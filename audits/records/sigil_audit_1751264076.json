[
  {
    "execution_id": "exec-6a770f7a-393e9876-1751264064",
    "timestamp": "2025-06-30T06:14:24.939315+00:00",
    "sacred_chain": {
      "input_data": "num-derive",
      "context_sources": [
        "crates.io",
        "github.com",
        "lib.rs",
        "docs.rs"
      ],
      "reasoning_steps": [
        "Input canonicalized: 'num-derive' -> 'num-derive'",
        "Context gathered from 4 validated sources",
        "Metadata extracted: 4 fields",
        "Documentation analyzed: quality 7.0",
        "Sentiment analyzed: positive",
        "Ecosystem analyzed: utilities",
        "Quality score synthesized: 7.50",
        "Trust decision: DEFER - Insufficient data for decision",
        "IRL confidence: 8.600"
      ],
      "suggestion": "ALLOW: Positive community sentiment",
      "verdict": "DEFER",
      "audit_info": {
        "metadata": {
          "name": "num-derive",
          "type": "rust_crate",
          "source": "manual_input",
          "extraction_method": "irl_engine"
        },
        "sentiment": {
          "quality_score": 7.0,
          "completeness": 0.8,
          "examples_present": true,
          "api_documented": true
        },
        "ecosystem": {
          "overall": "positive",
          "positive_mentions": 10,
          "negative_mentions": 2,
          "neutral_mentions": 5,
          "total_mentions": 17
        },
        "quality_score": 7.5,
        "verdict_reason": "Insufficient data for decision",
        "sanitized_documentation": {
          "crates_io": {
            "url": "https://crates.io/crates/num-derive",
            "title": "num-derive v0.4.2",
            "content": {
              "raw_markdown": "#  num-derive v0.4.2\nNumeric syntax extensions \n  * [ #numerics ](https://crates.io/keywords/numerics)\n  * [ #mathematics ](https://crates.io/keywords/mathematics)\n\n\n  * [ Readme ](https://crates.io/crates/num-derive)\n  * [ 22 Versions ](https://crates.io/crates/num-derive/versions)\n  * [ Dependencies ](https://crates.io/crates/num-derive/dependencies)\n  * [ Dependents ](https://crates.io/crates/num-derive/reverse_dependencies)\n\n\n## Metadata\nover 1 year ago \nv1.56.0 \n[ MIT ](https://choosealicense.com/licenses/mit) OR [ Apache-2.0 ](https://choosealicense.com/licenses/apache-2.0)\n14.4 KiB \n## Install\nRun the following Cargo command in your project directory:\ncargo add num-derive\nOr add the following line to your Cargo.toml:\nnum-derive = \"0.4.2\"\n## Documentation\n[ docs.rs/num-derive ](https://docs.rs/num-derive)\n## Repository\n[ github.com/rust-num/num-derive ](https://github.com/rust-num/num-derive)\n## Owners\n## Categories\n  * [Science](https://crates.io/categories/science)\n\n\n[ Report crate ](https://crates.io/support?crate=num-derive&inquire=crate-violation)\n### Stats Overview\n78,539,961 Downloads all time\n22 Versions published\n#### Downloads over the last 90 days\nDisplay as \nStacked \n  * Stacked \n  * Unstacked \n\n\nLoading\u2026\n",
              "markdown_with_citations": "#  num-derive v0.4.2\nNumeric syntax extensions \n  *  #numerics \u27e81\u27e9\n  *  #mathematics \u27e82\u27e9\n\n\n  *  Readme \u27e83\u27e9\n  *  22 Versions \u27e84\u27e9\n  *  Dependencies \u27e85\u27e9\n  *  Dependents \u27e86\u27e9\n\n\n## Metadata\nover 1 year ago \nv1.56.0 \n MIT \u27e87\u27e9 OR  Apache-2.0 \u27e88\u27e9\n14.4 KiB \n## Install\nRun the following Cargo command in your project directory:\ncargo add num-derive\nOr add the following line to your Cargo.toml:\nnum-derive = \"0.4.2\"\n## Documentation\n docs.rs/num-derive \u27e89\u27e9\n## Repository\n github.com/rust-num/num-derive \u27e810\u27e9\n## Owners\n## Categories\n  * Science\u27e811\u27e9\n\n\n Report crate \u27e812\u27e9\n### Stats Overview\n78,539,961 Downloads all time\n22 Versions published\n#### Downloads over the last 90 days\nDisplay as \nStacked \n  * Stacked \n  * Unstacked \n\n\nLoading\u2026\n",
              "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://crates.io/keywords/numerics:  #numerics \n\u27e82\u27e9 https://crates.io/keywords/mathematics:  #mathematics \n\u27e83\u27e9 https://crates.io/crates/num-derive:  Readme \n\u27e84\u27e9 https://crates.io/crates/num-derive/versions:  22 Versions \n\u27e85\u27e9 https://crates.io/crates/num-derive/dependencies:  Dependencies \n\u27e86\u27e9 https://crates.io/crates/num-derive/reverse_dependencies:  Dependents \n\u27e87\u27e9 https://choosealicense.com/licenses/mit:  MIT \n\u27e88\u27e9 https://choosealicense.com/licenses/apache-2.0:  Apache-2.0 \n\u27e89\u27e9 https://docs.rs/num-derive:  docs.rs/num-derive \n\u27e810\u27e9 https://github.com/rust-num/num-derive:  github.com/rust-num/num-derive \n\u27e811\u27e9 https://crates.io/categories/science: Science\n\u27e812\u27e9 https://crates.io/support?crate=num-derive&inquire=crate-violation:  Report crate \n",
              "fit_markdown": "",
              "fit_html": ""
            },
            "structured_data": {},
            "quality_score": 3.0,
            "extraction_method": "crawl4ai",
            "error": null,
            "metadata": {
              "doc_type": "docs",
              "content_length": 1243,
              "has_structured_data": false,
              "crawl_success": true
            },
            "timestamp": "117854.6938599"
          },
          "docs_rs": {
            "url": "https://docs.rs/num-derive",
            "title": "Crate num_deriveCopy item path",
            "content": {
              "raw_markdown": "[](https://docs.rs/num-derive/latest/num_derive/all.html \"show sidebar\")\n# Crate num_deriveCopy item path\n[Settings](https://docs.rs/num-derive/latest/settings.html)\n[Help](https://docs.rs/num-derive/latest/help.html)\nSummary[Source](https://docs.rs/num-derive/latest/src/num_derive/lib.rs.html#11-1004)\nExpand description\nProcedural macros to derive numeric traits in Rust.\n### [\u00a7](https://docs.rs/num-derive/latest/num_derive/#usage)Usage\nAdd this to your `Cargo.toml`:\n```\n[dependencies]\nnum-traits = \"0.2\"\nnum-derive = \"0.3\"\n```\n\nThen you can derive traits on your own types:\n```\n#[macro_use]\nextern crate num_derive;\n#[derive(FromPrimitive, ToPrimitive)]\nenum Color {\n  Red,\n  Blue,\n  Green,\n}\n```\n\n### [\u00a7](https://docs.rs/num-derive/latest/num_derive/#explicit-import)Explicit import\nBy default the `num_derive` procedural macros assume that the `num_traits` crate is a direct dependency. If `num_traits` is instead a transitive dependency, the `num_traits` helper attribute can be used to tell `num_derive` to use a specific identifier for its imports.\n```\n#[macro_use]\nextern crate num_derive;\n// Lets pretend this is a transitive dependency from another crate\n// reexported as `some_other_ident`.\nextern crate num_traits as some_other_ident;\n#[derive(FromPrimitive, ToPrimitive)]\n#[num_traits = \"some_other_ident\"]\nenum Color {\n  Red,\n  Blue,\n  Green,\n}\n```\n\n## Derive Macros[\u00a7](https://docs.rs/num-derive/latest/num_derive/#derives)\n\n[Float](https://docs.rs/num-derive/latest/num_derive/derive.Float.html \"derive num_derive::Float\")\n    Derives [`num_traits::Float`](https://docs.rs/num-traits/0.2/num_traits/float/trait.Float.html) for newtypes. The inner type must already implement `Float`.\n\n[FromPrimitive](https://docs.rs/num-derive/latest/num_derive/derive.FromPrimitive.html \"derive num_derive::FromPrimitive\")\n    Derives [`num_traits::FromPrimitive`](https://docs.rs/num-traits/0.2/num_traits/cast/trait.FromPrimitive.html) for simple enums and newtypes.\n\n[Num](https://docs.rs/num-derive/latest/num_derive/derive.Num.html \"derive num_derive::Num\")\n    Derives [`num_traits::Num`](https://docs.rs/num-traits/0.2/num_traits/trait.Num.html) for newtypes. The inner type must already implement `Num`.\n\n[NumCast](https://docs.rs/num-derive/latest/num_derive/derive.NumCast.html \"derive num_derive::NumCast\")\n    Derives [`num_traits::NumCast`](https://docs.rs/num-traits/0.2/num_traits/cast/trait.NumCast.html) for newtypes. The inner type must already implement `NumCast`.\n\n[NumOps](https://docs.rs/num-derive/latest/num_derive/derive.NumOps.html \"derive num_derive::NumOps\")\n    Derives [`num_traits::NumOps`](https://docs.rs/num-traits/0.2/num_traits/trait.NumOps.html) for newtypes. The inner type must already implement `NumOps`.\n\n[One](https://docs.rs/num-derive/latest/num_derive/derive.One.html \"derive num_derive::One\")\n    Derives [`num_traits::One`](https://docs.rs/num-traits/0.2/num_traits/identities/trait.One.html) for newtypes. The inner type must already implement `One`.\n\n[Signed](https://docs.rs/num-derive/latest/num_derive/derive.Signed.html \"derive num_derive::Signed\")\n    Derives [`num_traits::Signed`](https://docs.rs/num-traits/0.2/num_traits/sign/trait.Signed.html) for newtypes. The inner type must already implement `Signed`.\n\n[ToPrimitive](https://docs.rs/num-derive/latest/num_derive/derive.ToPrimitive.html \"derive num_derive::ToPrimitive\")\n    Derives [`num_traits::ToPrimitive`](https://docs.rs/num-traits/0.2/num_traits/cast/trait.ToPrimitive.html) for simple enums and newtypes.\n\n[Unsigned](https://docs.rs/num-derive/latest/num_derive/derive.Unsigned.html \"derive num_derive::Unsigned\")\n    Derives [`num_traits::Unsigned`](https://docs.rs/num/latest/num/traits/trait.Unsigned.html). The inner type must already implement `Unsigned`.\n\n[Zero](https://docs.rs/num-derive/latest/num_derive/derive.Zero.html \"derive num_derive::Zero\")\n    Derives [`num_traits::Zero`](https://docs.rs/num-traits/0.2/num_traits/identities/trait.Zero.html) for newtypes. The inner type must already implement `Zero`.\n",
              "markdown_with_citations": "[](https://docs.rs/num-derive/latest/num_derive/all.html \"show sidebar\")\n# Crate num_deriveCopy item path\nSettings\u27e81\u27e9\nHelp\u27e82\u27e9\nSummarySource\u27e83\u27e9\nExpand description\nProcedural macros to derive numeric traits in Rust.\n### \u00a7\u27e84\u27e9Usage\nAdd this to your `Cargo.toml`:\n```\n[dependencies]\nnum-traits = \"0.2\"\nnum-derive = \"0.3\"\n```\n\nThen you can derive traits on your own types:\n```\n#[macro_use]\nextern crate num_derive;\n#[derive(FromPrimitive, ToPrimitive)]\nenum Color {\n  Red,\n  Blue,\n  Green,\n}\n```\n\n### \u00a7\u27e85\u27e9Explicit import\nBy default the `num_derive` procedural macros assume that the `num_traits` crate is a direct dependency. If `num_traits` is instead a transitive dependency, the `num_traits` helper attribute can be used to tell `num_derive` to use a specific identifier for its imports.\n```\n#[macro_use]\nextern crate num_derive;\n// Lets pretend this is a transitive dependency from another crate\n// reexported as `some_other_ident`.\nextern crate num_traits as some_other_ident;\n#[derive(FromPrimitive, ToPrimitive)]\n#[num_traits = \"some_other_ident\"]\nenum Color {\n  Red,\n  Blue,\n  Green,\n}\n```\n\n## Derive Macros\u00a7\u27e86\u27e9\n\nFloat\u27e87\u27e9\n    Derives `num_traits::Float`\u27e88\u27e9 for newtypes. The inner type must already implement `Float`.\n\nFromPrimitive\u27e89\u27e9\n    Derives `num_traits::FromPrimitive`\u27e810\u27e9 for simple enums and newtypes.\n\nNum\u27e811\u27e9\n    Derives `num_traits::Num`\u27e812\u27e9 for newtypes. The inner type must already implement `Num`.\n\nNumCast\u27e813\u27e9\n    Derives `num_traits::NumCast`\u27e814\u27e9 for newtypes. The inner type must already implement `NumCast`.\n\nNumOps\u27e815\u27e9\n    Derives `num_traits::NumOps`\u27e816\u27e9 for newtypes. The inner type must already implement `NumOps`.\n\nOne\u27e817\u27e9\n    Derives `num_traits::One`\u27e818\u27e9 for newtypes. The inner type must already implement `One`.\n\nSigned\u27e819\u27e9\n    Derives `num_traits::Signed`\u27e820\u27e9 for newtypes. The inner type must already implement `Signed`.\n\nToPrimitive\u27e821\u27e9\n    Derives `num_traits::ToPrimitive`\u27e822\u27e9 for simple enums and newtypes.\n\nUnsigned\u27e823\u27e9\n    Derives `num_traits::Unsigned`\u27e824\u27e9. The inner type must already implement `Unsigned`.\n\nZero\u27e825\u27e9\n    Derives `num_traits::Zero`\u27e826\u27e9 for newtypes. The inner type must already implement `Zero`.\n",
              "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://docs.rs/num-derive/latest/settings.html: Settings\n\u27e82\u27e9 https://docs.rs/num-derive/latest/help.html: Help\n\u27e83\u27e9 https://docs.rs/num-derive/latest/src/num_derive/lib.rs.html#11-1004: Source\n\u27e84\u27e9 https://docs.rs/num-derive/latest/num_derive/#usage: \u00a7\n\u27e85\u27e9 https://docs.rs/num-derive/latest/num_derive/#explicit-import: \u00a7\n\u27e86\u27e9 https://docs.rs/num-derive/latest/num_derive/#derives: \u00a7\n\u27e87\u27e9 https://docs.rs/num-derive/latest/num_derive/derive.Float.html: derive num_derive::Float - Float\n\u27e88\u27e9 https://docs.rs/num-traits/0.2/num_traits/float/trait.Float.html: `num_traits::Float`\n\u27e89\u27e9 https://docs.rs/num-derive/latest/num_derive/derive.FromPrimitive.html: derive num_derive::FromPrimitive - FromPrimitive\n\u27e810\u27e9 https://docs.rs/num-traits/0.2/num_traits/cast/trait.FromPrimitive.html: `num_traits::FromPrimitive`\n\u27e811\u27e9 https://docs.rs/num-derive/latest/num_derive/derive.Num.html: derive num_derive::Num - Num\n\u27e812\u27e9 https://docs.rs/num-traits/0.2/num_traits/trait.Num.html: `num_traits::Num`\n\u27e813\u27e9 https://docs.rs/num-derive/latest/num_derive/derive.NumCast.html: derive num_derive::NumCast - NumCast\n\u27e814\u27e9 https://docs.rs/num-traits/0.2/num_traits/cast/trait.NumCast.html: `num_traits::NumCast`\n\u27e815\u27e9 https://docs.rs/num-derive/latest/num_derive/derive.NumOps.html: derive num_derive::NumOps - NumOps\n\u27e816\u27e9 https://docs.rs/num-traits/0.2/num_traits/trait.NumOps.html: `num_traits::NumOps`\n\u27e817\u27e9 https://docs.rs/num-derive/latest/num_derive/derive.One.html: derive num_derive::One - One\n\u27e818\u27e9 https://docs.rs/num-traits/0.2/num_traits/identities/trait.One.html: `num_traits::One`\n\u27e819\u27e9 https://docs.rs/num-derive/latest/num_derive/derive.Signed.html: derive num_derive::Signed - Signed\n\u27e820\u27e9 https://docs.rs/num-traits/0.2/num_traits/sign/trait.Signed.html: `num_traits::Signed`\n\u27e821\u27e9 https://docs.rs/num-derive/latest/num_derive/derive.ToPrimitive.html: derive num_derive::ToPrimitive - ToPrimitive\n\u27e822\u27e9 https://docs.rs/num-traits/0.2/num_traits/cast/trait.ToPrimitive.html: `num_traits::ToPrimitive`\n\u27e823\u27e9 https://docs.rs/num-derive/latest/num_derive/derive.Unsigned.html: derive num_derive::Unsigned - Unsigned\n\u27e824\u27e9 https://docs.rs/num/latest/num/traits/trait.Unsigned.html: `num_traits::Unsigned`\n\u27e825\u27e9 https://docs.rs/num-derive/latest/num_derive/derive.Zero.html: derive num_derive::Zero - Zero\n\u27e826\u27e9 https://docs.rs/num-traits/0.2/num_traits/identities/trait.Zero.html: `num_traits::Zero`\n",
              "fit_markdown": "",
              "fit_html": ""
            },
            "structured_data": {},
            "quality_score": 4.0,
            "extraction_method": "crawl4ai",
            "error": null,
            "metadata": {
              "doc_type": "docs",
              "content_length": 4046,
              "has_structured_data": false,
              "crawl_success": true
            },
            "timestamp": "117855.5521559"
          },
          "lib_rs": {
            "url": "https://lib.rs/crates/num-derive",
            "title": "Untitled",
            "content": {
              "raw_markdown": "###  [22 releases](https://lib.rs/crates/num-derive/versions)\n0.4.2 |  Feb 6, 2024   \n---|---  \n0.4.1 |  Oct 7, 2023   \n0.4.0 |  Jun 30, 2023   \n0.3.3 |  Oct 29, 2020   \n0.1.38 |  Nov 28, 2016   \n#**1048** in [Math](https://lib.rs/science/math \"Crates related to solving mathematical problems.\")\nDownload history 1048863/week @ 2025-03-08 1008964/week @ 2025-03-15 1006316/week @ 2025-03-22 984539/week @ 2025-03-29 1025966/week @ 2025-04-05 992927/week @ 2025-04-12 992628/week @ 2025-04-19 926746/week @ 2025-04-26 966016/week @ 2025-05-03 1042167/week @ 2025-05-10 1072487/week @ 2025-05-17 929799/week @ 2025-05-24 1039281/week @ 2025-05-31 1028074/week @ 2025-06-07 1017428/week @ 2025-06-14 950141/week @ 2025-06-21\n**4,204,582** downloads per month Used in [**5,899** crates (1,073 directly)](https://lib.rs/crates/num-derive/rev)\n**MIT/Apache**\n39KB  727 lines\n# num-derive\n[![crate](https://img.shields.io/crates/v/num-derive.svg)](https://crates.io/crates/num-derive) [![documentation](https://img.gs/czjpqfbdkz/full/https://docs.rs/num-derive/badge.svg)](https://docs.rs/num-derive) [![minimum rustc 1.56](https://img.shields.io/badge/rustc-1.56+-red.svg)](https://rust-lang.github.io/rfcs/2495-min-rust-version.html) [![build status](https://img.gs/czjpqfbdkz/full/https://github.com/rust-num/num-derive/workflows/master/badge.svg)](https://github.com/rust-num/num-derive/actions)\nProcedural macros to derive numeric traits in Rust.\n## Usage\nAdd this to your ``Cargo.toml``:\n```\n```[``dependencies``]`\n`num-traits ``=` ``\"`0.2`\"``\n`num-derive ``=` ``\"`0.4`\"``\n``\n```\n\nand this to your crate root:\n```\n```#``[``macro_use``]``\n`extern` `crate` num_derive`;`\n`\n```\n\nThen you can derive traits on your own types:\n```\n```#``[``derive```(```FromPrimitive`,` ToPrimitive```)```]``\n``enum` `Color` ``{`\n  Red`,`\n  Blue`,`\n  Green`,`\n```}```\n`\n```\n\n## Optional features\n  * **``full-syntax``**\u2014 Enables``num-derive`` to handle enum discriminants represented by complex expressions. Usually can be avoided by [utilizing constants](https://github.com/rust-num/num-derive/pull/3#issuecomment-359044704), so only use this feature if namespace pollution is undesired and [compile time doubling](https://github.com/rust-num/num-derive/pull/3#issuecomment-359172588) is acceptable.\n\n\n## Releases\nRelease notes are available in [RELEASES.md](https://github.com/rust-num/num-derive/blob/7cc33515dd2ae0eb43c5795c50ce49c554e8ba02/RELEASES.md).\n## Compatibility\nThe ``num-derive`` crate is tested for rustc 1.56 and greater.\n## License\nLicensed under either of\n  * [Apache License, Version 2.0](http://www.apache.org/licenses/LICENSE-2.0)\n  * [MIT license](http://opensource.org/licenses/MIT)\n\n\nat your option.\n### Contribution\nUnless you explicitly state otherwise, any contribution intentionally submitted for inclusion in the work by you, as defined in the Apache-2.0 license, shall be dual licensed as above, without any additional terms or conditions.\n#### Dependencies\n~185\u2013610KB  ~15K SLoC\n  * [proc-macro2](https://lib.rs/crates/proc-macro2 \"1\")\n  * [quote](https://lib.rs/crates/quote \"1\")\n  * [syn](https://lib.rs/crates/syn \"2.0.5\")\n\n\n  * dev  [num](https://lib.rs/crates/num \"new\") 0.4\n  * dev  [num-traits](https://lib.rs/crates/num-traits \"0.2\")\n\n\n  *[SLoC]: approx. additional lines of code\n",
              "markdown_with_citations": "###  22 releases\u27e81\u27e9\n0.4.2 |  Feb 6, 2024   \n---|---  \n0.4.1 |  Oct 7, 2023   \n0.4.0 |  Jun 30, 2023   \n0.3.3 |  Oct 29, 2020   \n0.1.38 |  Nov 28, 2016   \n#**1048** in Math\u27e82\u27e9\nDownload history 1048863/week @ 2025-03-08 1008964/week @ 2025-03-15 1006316/week @ 2025-03-22 984539/week @ 2025-03-29 1025966/week @ 2025-04-05 992927/week @ 2025-04-12 992628/week @ 2025-04-19 926746/week @ 2025-04-26 966016/week @ 2025-05-03 1042167/week @ 2025-05-10 1072487/week @ 2025-05-17 929799/week @ 2025-05-24 1039281/week @ 2025-05-31 1028074/week @ 2025-06-07 1017428/week @ 2025-06-14 950141/week @ 2025-06-21\n**4,204,582** downloads per month Used in **5,899** crates (1,073 directly)\u27e83\u27e9\n**MIT/Apache**\n39KB  727 lines\n# num-derive\n![crate\u27e84\u27e9](https://crates.io/crates/num-derive) ![documentation\u27e85\u27e9](https://docs.rs/num-derive) ![minimum rustc 1.56\u27e86\u27e9](https://rust-lang.github.io/rfcs/2495-min-rust-version.html) ![build status\u27e87\u27e9](https://github.com/rust-num/num-derive/actions)\nProcedural macros to derive numeric traits in Rust.\n## Usage\nAdd this to your ``Cargo.toml``:\n```\n```[``dependencies``]`\n`num-traits ``=` ``\"`0.2`\"``\n`num-derive ``=` ``\"`0.4`\"``\n``\n```\n\nand this to your crate root:\n```\n```#``[``macro_use``]``\n`extern` `crate` num_derive`;`\n`\n```\n\nThen you can derive traits on your own types:\n```\n```#``[``derive```(```FromPrimitive`,` ToPrimitive```)```]``\n``enum` `Color` ``{`\n  Red`,`\n  Blue`,`\n  Green`,`\n```}```\n`\n```\n\n## Optional features\n  * **``full-syntax``**\u2014 Enables``num-derive`` to handle enum discriminants represented by complex expressions. Usually can be avoided by utilizing constants\u27e88\u27e9, so only use this feature if namespace pollution is undesired and compile time doubling\u27e89\u27e9 is acceptable.\n\n\n## Releases\nRelease notes are available in RELEASES.md\u27e810\u27e9.\n## Compatibility\nThe ``num-derive`` crate is tested for rustc 1.56 and greater.\n## License\nLicensed under either of\n  * Apache License, Version 2.0\u27e811\u27e9\n  * MIT license\u27e812\u27e9\n\n\nat your option.\n### Contribution\nUnless you explicitly state otherwise, any contribution intentionally submitted for inclusion in the work by you, as defined in the Apache-2.0 license, shall be dual licensed as above, without any additional terms or conditions.\n#### Dependencies\n~185\u2013610KB  ~15K SLoC\n  * proc-macro2\u27e813\u27e9\n  * quote\u27e814\u27e9\n  * syn\u27e815\u27e9\n\n\n  * dev  num\u27e816\u27e9 0.4\n  * dev  num-traits\u27e817\u27e9\n\n\n  *[SLoC]: approx. additional lines of code\n",
              "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://lib.rs/crates/num-derive/versions: 22 releases\n\u27e82\u27e9 https://lib.rs/science/math: Crates related to solving mathematical problems. - Math\n\u27e83\u27e9 https://lib.rs/crates/num-derive/rev: **5,899** crates (1,073 directly)\n\u27e84\u27e9 https://img.shields.io/crates/v/num-derive.svg: ![crate\n\u27e85\u27e9 https://img.gs/czjpqfbdkz/full/https://docs.rs/num-derive/badge.svg: ![documentation\n\u27e86\u27e9 https://img.shields.io/badge/rustc-1.56+-red.svg: ![minimum rustc 1.56\n\u27e87\u27e9 https://img.gs/czjpqfbdkz/full/https://github.com/rust-num/num-derive/workflows/master/badge.svg: ![build status\n\u27e88\u27e9 https://github.com/rust-num/num-derive/pull/3#issuecomment-359044704: utilizing constants\n\u27e89\u27e9 https://github.com/rust-num/num-derive/pull/3#issuecomment-359172588: compile time doubling\n\u27e810\u27e9 https://github.com/rust-num/num-derive/blob/7cc33515dd2ae0eb43c5795c50ce49c554e8ba02/RELEASES.md: RELEASES.md\n\u27e811\u27e9 http://www.apache.org/licenses/LICENSE-2.0: Apache License, Version 2.0\n\u27e812\u27e9 http://opensource.org/licenses/MIT: MIT license\n\u27e813\u27e9 https://lib.rs/crates/proc-macro2: 1 - proc-macro2\n\u27e814\u27e9 https://lib.rs/crates/quote: 1 - quote\n\u27e815\u27e9 https://lib.rs/crates/syn: 2.0.5 - syn\n\u27e816\u27e9 https://lib.rs/crates/num: new - num\n\u27e817\u27e9 https://lib.rs/crates/num-traits: 0.2 - num-traits\n",
              "fit_markdown": "",
              "fit_html": ""
            },
            "structured_data": {},
            "quality_score": 3.0,
            "extraction_method": "crawl4ai",
            "error": null,
            "metadata": {
              "doc_type": "docs",
              "content_length": 3297,
              "has_structured_data": false,
              "crawl_success": true
            },
            "timestamp": "117856.0512527"
          }
        },
        "crate_analysis": {
          "status": "completed",
          "check": [
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#unicode-ident@1.0.18",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\unicode-ident-1.0.18\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "unicode_ident",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\unicode-ident-1.0.18\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp3u1t3ffy\\num-derive-0.4.2\\target\\debug\\deps\\libunicode_ident-0fdb772f9fe5b577.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#proc-macro2@1.0.95",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\proc-macro2-1.0.95\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\proc-macro2-1.0.95\\build.rs",
                "edition": "2021",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "proc-macro"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp3u1t3ffy\\num-derive-0.4.2\\target\\debug\\build\\proc-macro2-ff1a34852a360a33\\build-script-build.exe",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp3u1t3ffy\\num-derive-0.4.2\\target\\debug\\build\\proc-macro2-ff1a34852a360a33\\build_script_build.pdb"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "build-script-executed",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#proc-macro2@1.0.95",
              "linked_libs": [],
              "linked_paths": [],
              "cfgs": [
                "wrap_proc_macro"
              ],
              "env": [],
              "out_dir": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp3u1t3ffy\\num-derive-0.4.2\\target\\debug\\build\\proc-macro2-bd004ad9dcfa0b46\\out"
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#proc-macro2@1.0.95",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\proc-macro2-1.0.95\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "proc_macro2",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\proc-macro2-1.0.95\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "proc-macro"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp3u1t3ffy\\num-derive-0.4.2\\target\\debug\\deps\\libproc_macro2-48b01486ebc04fa5.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#quote@1.0.40",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\quote-1.0.40\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "quote",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\quote-1.0.40\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "proc-macro"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp3u1t3ffy\\num-derive-0.4.2\\target\\debug\\deps\\libquote-303ee31578ba9be8.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#syn@2.0.104",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\syn-2.0.104\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "syn",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\syn-2.0.104\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "clone-impls",
                "default",
                "derive",
                "parsing",
                "printing",
                "proc-macro"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp3u1t3ffy\\num-derive-0.4.2\\target\\debug\\deps\\libsyn-94d3bae4b7450320.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmp3u1t3ffy/num-derive-0.4.2#num-derive@0.4.2",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp3u1t3ffy\\num-derive-0.4.2\\Cargo.toml",
              "target": {
                "kind": [
                  "proc-macro"
                ],
                "crate_types": [
                  "proc-macro"
                ],
                "name": "num_derive",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp3u1t3ffy\\num-derive-0.4.2\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": false
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp3u1t3ffy\\num-derive-0.4.2\\target\\debug\\deps\\libnum_derive-7141286d70a197ac.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "build-finished",
              "success": true
            }
          ],
          "clippy": [
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#proc-macro2@1.0.95",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\proc-macro2-1.0.95\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\proc-macro2-1.0.95\\build.rs",
                "edition": "2021",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "proc-macro"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp3u1t3ffy\\num-derive-0.4.2\\target\\debug\\build\\proc-macro2-ff1a34852a360a33\\build-script-build.exe",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp3u1t3ffy\\num-derive-0.4.2\\target\\debug\\build\\proc-macro2-ff1a34852a360a33\\build_script_build.pdb"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "build-script-executed",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#proc-macro2@1.0.95",
              "linked_libs": [],
              "linked_paths": [],
              "cfgs": [
                "wrap_proc_macro"
              ],
              "env": [],
              "out_dir": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp3u1t3ffy\\num-derive-0.4.2\\target\\debug\\build\\proc-macro2-bd004ad9dcfa0b46\\out"
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#unicode-ident@1.0.18",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\unicode-ident-1.0.18\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "unicode_ident",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\unicode-ident-1.0.18\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp3u1t3ffy\\num-derive-0.4.2\\target\\debug\\deps\\libunicode_ident-0fdb772f9fe5b577.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#proc-macro2@1.0.95",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\proc-macro2-1.0.95\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "proc_macro2",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\proc-macro2-1.0.95\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "proc-macro"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp3u1t3ffy\\num-derive-0.4.2\\target\\debug\\deps\\libproc_macro2-48b01486ebc04fa5.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#quote@1.0.40",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\quote-1.0.40\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "quote",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\quote-1.0.40\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "proc-macro"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp3u1t3ffy\\num-derive-0.4.2\\target\\debug\\deps\\libquote-303ee31578ba9be8.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#syn@2.0.104",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\syn-2.0.104\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "syn",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\syn-2.0.104\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "clone-impls",
                "default",
                "derive",
                "parsing",
                "printing",
                "proc-macro"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp3u1t3ffy\\num-derive-0.4.2\\target\\debug\\deps\\libsyn-94d3bae4b7450320.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmp3u1t3ffy/num-derive-0.4.2#num-derive@0.4.2",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp3u1t3ffy\\num-derive-0.4.2\\Cargo.toml",
              "target": {
                "kind": [
                  "proc-macro"
                ],
                "crate_types": [
                  "proc-macro"
                ],
                "name": "num_derive",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp3u1t3ffy\\num-derive-0.4.2\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": false
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp3u1t3ffy\\num-derive-0.4.2\\target\\debug\\deps\\libnum_derive-6bca3e489b026a30.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "build-finished",
              "success": true
            }
          ],
          "audit": {
            "database": {
              "advisory-count": 787,
              "last-commit": "7573f55ba337263f61167dbb0ea926cdc7c8eb5d",
              "last-updated": "2025-06-17T11:04:25+02:00"
            },
            "lockfile": {
              "dependency-count": 13
            },
            "settings": {
              "target_arch": [],
              "target_os": [],
              "severity": null,
              "ignore": [],
              "informational_warnings": [
                "unmaintained",
                "unsound",
                "notice"
              ]
            },
            "vulnerabilities": {
              "found": false,
              "count": 0,
              "list": []
            },
            "warnings": {}
          },
          "note": "Crate analysis performed with stable toolchain."
        },
        "crate_metadata": {
          "name": "num-derive",
          "version": "0.4.2",
          "description": "ALLOW: Positive community sentiment",
          "repository": "",
          "keywords": [],
          "categories": [],
          "readme": {
            "raw_markdown": "[](https://docs.rs/num-derive/latest/num_derive/all.html \"show sidebar\")\n# Crate num_deriveCopy item path\n[Settings](https://docs.rs/num-derive/latest/settings.html)\n[Help](https://docs.rs/num-derive/latest/help.html)\nSummary[Source](https://docs.rs/num-derive/latest/src/num_derive/lib.rs.html#11-1004)\nExpand description\nProcedural macros to derive numeric traits in Rust.\n### [\u00a7](https://docs.rs/num-derive/latest/num_derive/#usage)Usage\nAdd this to your `Cargo.toml`:\n```\n[dependencies]\nnum-traits = \"0.2\"\nnum-derive = \"0.3\"\n```\n\nThen you can derive traits on your own types:\n```\n#[macro_use]\nextern crate num_derive;\n#[derive(FromPrimitive, ToPrimitive)]\nenum Color {\n  Red,\n  Blue,\n  Green,\n}\n```\n\n### [\u00a7](https://docs.rs/num-derive/latest/num_derive/#explicit-import)Explicit import\nBy default the `num_derive` procedural macros assume that the `num_traits` crate is a direct dependency. If `num_traits` is instead a transitive dependency, the `num_traits` helper attribute can be used to tell `num_derive` to use a specific identifier for its imports.\n```\n#[macro_use]\nextern crate num_derive;\n// Lets pretend this is a transitive dependency from another crate\n// reexported as `some_other_ident`.\nextern crate num_traits as some_other_ident;\n#[derive(FromPrimitive, ToPrimitive)]\n#[num_traits = \"some_other_ident\"]\nenum Color {\n  Red,\n  Blue,\n  Green,\n}\n```\n\n## Derive Macros[\u00a7](https://docs.rs/num-derive/latest/num_derive/#derives)\n\n[Float](https://docs.rs/num-derive/latest/num_derive/derive.Float.html \"derive num_derive::Float\")\n    Derives [`num_traits::Float`](https://docs.rs/num-traits/0.2/num_traits/float/trait.Float.html) for newtypes. The inner type must already implement `Float`.\n\n[FromPrimitive](https://docs.rs/num-derive/latest/num_derive/derive.FromPrimitive.html \"derive num_derive::FromPrimitive\")\n    Derives [`num_traits::FromPrimitive`](https://docs.rs/num-traits/0.2/num_traits/cast/trait.FromPrimitive.html) for simple enums and newtypes.\n\n[Num](https://docs.rs/num-derive/latest/num_derive/derive.Num.html \"derive num_derive::Num\")\n    Derives [`num_traits::Num`](https://docs.rs/num-traits/0.2/num_traits/trait.Num.html) for newtypes. The inner type must already implement `Num`.\n\n[NumCast](https://docs.rs/num-derive/latest/num_derive/derive.NumCast.html \"derive num_derive::NumCast\")\n    Derives [`num_traits::NumCast`](https://docs.rs/num-traits/0.2/num_traits/cast/trait.NumCast.html) for newtypes. The inner type must already implement `NumCast`.\n\n[NumOps](https://docs.rs/num-derive/latest/num_derive/derive.NumOps.html \"derive num_derive::NumOps\")\n    Derives [`num_traits::NumOps`](https://docs.rs/num-traits/0.2/num_traits/trait.NumOps.html) for newtypes. The inner type must already implement `NumOps`.\n\n[One](https://docs.rs/num-derive/latest/num_derive/derive.One.html \"derive num_derive::One\")\n    Derives [`num_traits::One`](https://docs.rs/num-traits/0.2/num_traits/identities/trait.One.html) for newtypes. The inner type must already implement `One`.\n\n[Signed](https://docs.rs/num-derive/latest/num_derive/derive.Signed.html \"derive num_derive::Signed\")\n    Derives [`num_traits::Signed`](https://docs.rs/num-traits/0.2/num_traits/sign/trait.Signed.html) for newtypes. The inner type must already implement `Signed`.\n\n[ToPrimitive](https://docs.rs/num-derive/latest/num_derive/derive.ToPrimitive.html \"derive num_derive::ToPrimitive\")\n    Derives [`num_traits::ToPrimitive`](https://docs.rs/num-traits/0.2/num_traits/cast/trait.ToPrimitive.html) for simple enums and newtypes.\n\n[Unsigned](https://docs.rs/num-derive/latest/num_derive/derive.Unsigned.html \"derive num_derive::Unsigned\")\n    Derives [`num_traits::Unsigned`](https://docs.rs/num/latest/num/traits/trait.Unsigned.html). The inner type must already implement `Unsigned`.\n\n[Zero](https://docs.rs/num-derive/latest/num_derive/derive.Zero.html \"derive num_derive::Zero\")\n    Derives [`num_traits::Zero`](https://docs.rs/num-traits/0.2/num_traits/identities/trait.Zero.html) for newtypes. The inner type must already implement `Zero`.\n",
            "markdown_with_citations": "[](https://docs.rs/num-derive/latest/num_derive/all.html \"show sidebar\")\n# Crate num_deriveCopy item path\nSettings\u27e81\u27e9\nHelp\u27e82\u27e9\nSummarySource\u27e83\u27e9\nExpand description\nProcedural macros to derive numeric traits in Rust.\n### \u00a7\u27e84\u27e9Usage\nAdd this to your `Cargo.toml`:\n```\n[dependencies]\nnum-traits = \"0.2\"\nnum-derive = \"0.3\"\n```\n\nThen you can derive traits on your own types:\n```\n#[macro_use]\nextern crate num_derive;\n#[derive(FromPrimitive, ToPrimitive)]\nenum Color {\n  Red,\n  Blue,\n  Green,\n}\n```\n\n### \u00a7\u27e85\u27e9Explicit import\nBy default the `num_derive` procedural macros assume that the `num_traits` crate is a direct dependency. If `num_traits` is instead a transitive dependency, the `num_traits` helper attribute can be used to tell `num_derive` to use a specific identifier for its imports.\n```\n#[macro_use]\nextern crate num_derive;\n// Lets pretend this is a transitive dependency from another crate\n// reexported as `some_other_ident`.\nextern crate num_traits as some_other_ident;\n#[derive(FromPrimitive, ToPrimitive)]\n#[num_traits = \"some_other_ident\"]\nenum Color {\n  Red,\n  Blue,\n  Green,\n}\n```\n\n## Derive Macros\u00a7\u27e86\u27e9\n\nFloat\u27e87\u27e9\n    Derives `num_traits::Float`\u27e88\u27e9 for newtypes. The inner type must already implement `Float`.\n\nFromPrimitive\u27e89\u27e9\n    Derives `num_traits::FromPrimitive`\u27e810\u27e9 for simple enums and newtypes.\n\nNum\u27e811\u27e9\n    Derives `num_traits::Num`\u27e812\u27e9 for newtypes. The inner type must already implement `Num`.\n\nNumCast\u27e813\u27e9\n    Derives `num_traits::NumCast`\u27e814\u27e9 for newtypes. The inner type must already implement `NumCast`.\n\nNumOps\u27e815\u27e9\n    Derives `num_traits::NumOps`\u27e816\u27e9 for newtypes. The inner type must already implement `NumOps`.\n\nOne\u27e817\u27e9\n    Derives `num_traits::One`\u27e818\u27e9 for newtypes. The inner type must already implement `One`.\n\nSigned\u27e819\u27e9\n    Derives `num_traits::Signed`\u27e820\u27e9 for newtypes. The inner type must already implement `Signed`.\n\nToPrimitive\u27e821\u27e9\n    Derives `num_traits::ToPrimitive`\u27e822\u27e9 for simple enums and newtypes.\n\nUnsigned\u27e823\u27e9\n    Derives `num_traits::Unsigned`\u27e824\u27e9. The inner type must already implement `Unsigned`.\n\nZero\u27e825\u27e9\n    Derives `num_traits::Zero`\u27e826\u27e9 for newtypes. The inner type must already implement `Zero`.\n",
            "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://docs.rs/num-derive/latest/settings.html: Settings\n\u27e82\u27e9 https://docs.rs/num-derive/latest/help.html: Help\n\u27e83\u27e9 https://docs.rs/num-derive/latest/src/num_derive/lib.rs.html#11-1004: Source\n\u27e84\u27e9 https://docs.rs/num-derive/latest/num_derive/#usage: \u00a7\n\u27e85\u27e9 https://docs.rs/num-derive/latest/num_derive/#explicit-import: \u00a7\n\u27e86\u27e9 https://docs.rs/num-derive/latest/num_derive/#derives: \u00a7\n\u27e87\u27e9 https://docs.rs/num-derive/latest/num_derive/derive.Float.html: derive num_derive::Float - Float\n\u27e88\u27e9 https://docs.rs/num-traits/0.2/num_traits/float/trait.Float.html: `num_traits::Float`\n\u27e89\u27e9 https://docs.rs/num-derive/latest/num_derive/derive.FromPrimitive.html: derive num_derive::FromPrimitive - FromPrimitive\n\u27e810\u27e9 https://docs.rs/num-traits/0.2/num_traits/cast/trait.FromPrimitive.html: `num_traits::FromPrimitive`\n\u27e811\u27e9 https://docs.rs/num-derive/latest/num_derive/derive.Num.html: derive num_derive::Num - Num\n\u27e812\u27e9 https://docs.rs/num-traits/0.2/num_traits/trait.Num.html: `num_traits::Num`\n\u27e813\u27e9 https://docs.rs/num-derive/latest/num_derive/derive.NumCast.html: derive num_derive::NumCast - NumCast\n\u27e814\u27e9 https://docs.rs/num-traits/0.2/num_traits/cast/trait.NumCast.html: `num_traits::NumCast`\n\u27e815\u27e9 https://docs.rs/num-derive/latest/num_derive/derive.NumOps.html: derive num_derive::NumOps - NumOps\n\u27e816\u27e9 https://docs.rs/num-traits/0.2/num_traits/trait.NumOps.html: `num_traits::NumOps`\n\u27e817\u27e9 https://docs.rs/num-derive/latest/num_derive/derive.One.html: derive num_derive::One - One\n\u27e818\u27e9 https://docs.rs/num-traits/0.2/num_traits/identities/trait.One.html: `num_traits::One`\n\u27e819\u27e9 https://docs.rs/num-derive/latest/num_derive/derive.Signed.html: derive num_derive::Signed - Signed\n\u27e820\u27e9 https://docs.rs/num-traits/0.2/num_traits/sign/trait.Signed.html: `num_traits::Signed`\n\u27e821\u27e9 https://docs.rs/num-derive/latest/num_derive/derive.ToPrimitive.html: derive num_derive::ToPrimitive - ToPrimitive\n\u27e822\u27e9 https://docs.rs/num-traits/0.2/num_traits/cast/trait.ToPrimitive.html: `num_traits::ToPrimitive`\n\u27e823\u27e9 https://docs.rs/num-derive/latest/num_derive/derive.Unsigned.html: derive num_derive::Unsigned - Unsigned\n\u27e824\u27e9 https://docs.rs/num/latest/num/traits/trait.Unsigned.html: `num_traits::Unsigned`\n\u27e825\u27e9 https://docs.rs/num-derive/latest/num_derive/derive.Zero.html: derive num_derive::Zero - Zero\n\u27e826\u27e9 https://docs.rs/num-traits/0.2/num_traits/identities/trait.Zero.html: `num_traits::Zero`\n",
            "fit_markdown": "",
            "fit_html": ""
          },
          "downloads": 0,
          "github_stars": 0,
          "dependencies": [],
          "features": {},
          "code_snippets": [],
          "readme_sections": {},
          "librs_downloads": null,
          "source": "crates.io",
          "enhanced_scraping": {},
          "enhanced_features": [],
          "enhanced_dependencies": []
        },
        "enriched_crate": {
          "name": "num-derive",
          "version": "0.4.2",
          "description": "ALLOW: Positive community sentiment",
          "repository": "",
          "keywords": [],
          "categories": [],
          "readme": {
            "raw_markdown": "[](https://docs.rs/num-derive/latest/num_derive/all.html \"show sidebar\")\n# Crate num_deriveCopy item path\n[Settings](https://docs.rs/num-derive/latest/settings.html)\n[Help](https://docs.rs/num-derive/latest/help.html)\nSummary[Source](https://docs.rs/num-derive/latest/src/num_derive/lib.rs.html#11-1004)\nExpand description\nProcedural macros to derive numeric traits in Rust.\n### [\u00a7](https://docs.rs/num-derive/latest/num_derive/#usage)Usage\nAdd this to your `Cargo.toml`:\n```\n[dependencies]\nnum-traits = \"0.2\"\nnum-derive = \"0.3\"\n```\n\nThen you can derive traits on your own types:\n```\n#[macro_use]\nextern crate num_derive;\n#[derive(FromPrimitive, ToPrimitive)]\nenum Color {\n  Red,\n  Blue,\n  Green,\n}\n```\n\n### [\u00a7](https://docs.rs/num-derive/latest/num_derive/#explicit-import)Explicit import\nBy default the `num_derive` procedural macros assume that the `num_traits` crate is a direct dependency. If `num_traits` is instead a transitive dependency, the `num_traits` helper attribute can be used to tell `num_derive` to use a specific identifier for its imports.\n```\n#[macro_use]\nextern crate num_derive;\n// Lets pretend this is a transitive dependency from another crate\n// reexported as `some_other_ident`.\nextern crate num_traits as some_other_ident;\n#[derive(FromPrimitive, ToPrimitive)]\n#[num_traits = \"some_other_ident\"]\nenum Color {\n  Red,\n  Blue,\n  Green,\n}\n```\n\n## Derive Macros[\u00a7](https://docs.rs/num-derive/latest/num_derive/#derives)\n\n[Float](https://docs.rs/num-derive/latest/num_derive/derive.Float.html \"derive num_derive::Float\")\n    Derives [`num_traits::Float`](https://docs.rs/num-traits/0.2/num_traits/float/trait.Float.html) for newtypes. The inner type must already implement `Float`.\n\n[FromPrimitive](https://docs.rs/num-derive/latest/num_derive/derive.FromPrimitive.html \"derive num_derive::FromPrimitive\")\n    Derives [`num_traits::FromPrimitive`](https://docs.rs/num-traits/0.2/num_traits/cast/trait.FromPrimitive.html) for simple enums and newtypes.\n\n[Num](https://docs.rs/num-derive/latest/num_derive/derive.Num.html \"derive num_derive::Num\")\n    Derives [`num_traits::Num`](https://docs.rs/num-traits/0.2/num_traits/trait.Num.html) for newtypes. The inner type must already implement `Num`.\n\n[NumCast](https://docs.rs/num-derive/latest/num_derive/derive.NumCast.html \"derive num_derive::NumCast\")\n    Derives [`num_traits::NumCast`](https://docs.rs/num-traits/0.2/num_traits/cast/trait.NumCast.html) for newtypes. The inner type must already implement `NumCast`.\n\n[NumOps](https://docs.rs/num-derive/latest/num_derive/derive.NumOps.html \"derive num_derive::NumOps\")\n    Derives [`num_traits::NumOps`](https://docs.rs/num-traits/0.2/num_traits/trait.NumOps.html) for newtypes. The inner type must already implement `NumOps`.\n\n[One](https://docs.rs/num-derive/latest/num_derive/derive.One.html \"derive num_derive::One\")\n    Derives [`num_traits::One`](https://docs.rs/num-traits/0.2/num_traits/identities/trait.One.html) for newtypes. The inner type must already implement `One`.\n\n[Signed](https://docs.rs/num-derive/latest/num_derive/derive.Signed.html \"derive num_derive::Signed\")\n    Derives [`num_traits::Signed`](https://docs.rs/num-traits/0.2/num_traits/sign/trait.Signed.html) for newtypes. The inner type must already implement `Signed`.\n\n[ToPrimitive](https://docs.rs/num-derive/latest/num_derive/derive.ToPrimitive.html \"derive num_derive::ToPrimitive\")\n    Derives [`num_traits::ToPrimitive`](https://docs.rs/num-traits/0.2/num_traits/cast/trait.ToPrimitive.html) for simple enums and newtypes.\n\n[Unsigned](https://docs.rs/num-derive/latest/num_derive/derive.Unsigned.html \"derive num_derive::Unsigned\")\n    Derives [`num_traits::Unsigned`](https://docs.rs/num/latest/num/traits/trait.Unsigned.html). The inner type must already implement `Unsigned`.\n\n[Zero](https://docs.rs/num-derive/latest/num_derive/derive.Zero.html \"derive num_derive::Zero\")\n    Derives [`num_traits::Zero`](https://docs.rs/num-traits/0.2/num_traits/identities/trait.Zero.html) for newtypes. The inner type must already implement `Zero`.\n",
            "markdown_with_citations": "[](https://docs.rs/num-derive/latest/num_derive/all.html \"show sidebar\")\n# Crate num_deriveCopy item path\nSettings\u27e81\u27e9\nHelp\u27e82\u27e9\nSummarySource\u27e83\u27e9\nExpand description\nProcedural macros to derive numeric traits in Rust.\n### \u00a7\u27e84\u27e9Usage\nAdd this to your `Cargo.toml`:\n```\n[dependencies]\nnum-traits = \"0.2\"\nnum-derive = \"0.3\"\n```\n\nThen you can derive traits on your own types:\n```\n#[macro_use]\nextern crate num_derive;\n#[derive(FromPrimitive, ToPrimitive)]\nenum Color {\n  Red,\n  Blue,\n  Green,\n}\n```\n\n### \u00a7\u27e85\u27e9Explicit import\nBy default the `num_derive` procedural macros assume that the `num_traits` crate is a direct dependency. If `num_traits` is instead a transitive dependency, the `num_traits` helper attribute can be used to tell `num_derive` to use a specific identifier for its imports.\n```\n#[macro_use]\nextern crate num_derive;\n// Lets pretend this is a transitive dependency from another crate\n// reexported as `some_other_ident`.\nextern crate num_traits as some_other_ident;\n#[derive(FromPrimitive, ToPrimitive)]\n#[num_traits = \"some_other_ident\"]\nenum Color {\n  Red,\n  Blue,\n  Green,\n}\n```\n\n## Derive Macros\u00a7\u27e86\u27e9\n\nFloat\u27e87\u27e9\n    Derives `num_traits::Float`\u27e88\u27e9 for newtypes. The inner type must already implement `Float`.\n\nFromPrimitive\u27e89\u27e9\n    Derives `num_traits::FromPrimitive`\u27e810\u27e9 for simple enums and newtypes.\n\nNum\u27e811\u27e9\n    Derives `num_traits::Num`\u27e812\u27e9 for newtypes. The inner type must already implement `Num`.\n\nNumCast\u27e813\u27e9\n    Derives `num_traits::NumCast`\u27e814\u27e9 for newtypes. The inner type must already implement `NumCast`.\n\nNumOps\u27e815\u27e9\n    Derives `num_traits::NumOps`\u27e816\u27e9 for newtypes. The inner type must already implement `NumOps`.\n\nOne\u27e817\u27e9\n    Derives `num_traits::One`\u27e818\u27e9 for newtypes. The inner type must already implement `One`.\n\nSigned\u27e819\u27e9\n    Derives `num_traits::Signed`\u27e820\u27e9 for newtypes. The inner type must already implement `Signed`.\n\nToPrimitive\u27e821\u27e9\n    Derives `num_traits::ToPrimitive`\u27e822\u27e9 for simple enums and newtypes.\n\nUnsigned\u27e823\u27e9\n    Derives `num_traits::Unsigned`\u27e824\u27e9. The inner type must already implement `Unsigned`.\n\nZero\u27e825\u27e9\n    Derives `num_traits::Zero`\u27e826\u27e9 for newtypes. The inner type must already implement `Zero`.\n",
            "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://docs.rs/num-derive/latest/settings.html: Settings\n\u27e82\u27e9 https://docs.rs/num-derive/latest/help.html: Help\n\u27e83\u27e9 https://docs.rs/num-derive/latest/src/num_derive/lib.rs.html#11-1004: Source\n\u27e84\u27e9 https://docs.rs/num-derive/latest/num_derive/#usage: \u00a7\n\u27e85\u27e9 https://docs.rs/num-derive/latest/num_derive/#explicit-import: \u00a7\n\u27e86\u27e9 https://docs.rs/num-derive/latest/num_derive/#derives: \u00a7\n\u27e87\u27e9 https://docs.rs/num-derive/latest/num_derive/derive.Float.html: derive num_derive::Float - Float\n\u27e88\u27e9 https://docs.rs/num-traits/0.2/num_traits/float/trait.Float.html: `num_traits::Float`\n\u27e89\u27e9 https://docs.rs/num-derive/latest/num_derive/derive.FromPrimitive.html: derive num_derive::FromPrimitive - FromPrimitive\n\u27e810\u27e9 https://docs.rs/num-traits/0.2/num_traits/cast/trait.FromPrimitive.html: `num_traits::FromPrimitive`\n\u27e811\u27e9 https://docs.rs/num-derive/latest/num_derive/derive.Num.html: derive num_derive::Num - Num\n\u27e812\u27e9 https://docs.rs/num-traits/0.2/num_traits/trait.Num.html: `num_traits::Num`\n\u27e813\u27e9 https://docs.rs/num-derive/latest/num_derive/derive.NumCast.html: derive num_derive::NumCast - NumCast\n\u27e814\u27e9 https://docs.rs/num-traits/0.2/num_traits/cast/trait.NumCast.html: `num_traits::NumCast`\n\u27e815\u27e9 https://docs.rs/num-derive/latest/num_derive/derive.NumOps.html: derive num_derive::NumOps - NumOps\n\u27e816\u27e9 https://docs.rs/num-traits/0.2/num_traits/trait.NumOps.html: `num_traits::NumOps`\n\u27e817\u27e9 https://docs.rs/num-derive/latest/num_derive/derive.One.html: derive num_derive::One - One\n\u27e818\u27e9 https://docs.rs/num-traits/0.2/num_traits/identities/trait.One.html: `num_traits::One`\n\u27e819\u27e9 https://docs.rs/num-derive/latest/num_derive/derive.Signed.html: derive num_derive::Signed - Signed\n\u27e820\u27e9 https://docs.rs/num-traits/0.2/num_traits/sign/trait.Signed.html: `num_traits::Signed`\n\u27e821\u27e9 https://docs.rs/num-derive/latest/num_derive/derive.ToPrimitive.html: derive num_derive::ToPrimitive - ToPrimitive\n\u27e822\u27e9 https://docs.rs/num-traits/0.2/num_traits/cast/trait.ToPrimitive.html: `num_traits::ToPrimitive`\n\u27e823\u27e9 https://docs.rs/num-derive/latest/num_derive/derive.Unsigned.html: derive num_derive::Unsigned - Unsigned\n\u27e824\u27e9 https://docs.rs/num/latest/num/traits/trait.Unsigned.html: `num_traits::Unsigned`\n\u27e825\u27e9 https://docs.rs/num-derive/latest/num_derive/derive.Zero.html: derive num_derive::Zero - Zero\n\u27e826\u27e9 https://docs.rs/num-traits/0.2/num_traits/identities/trait.Zero.html: `num_traits::Zero`\n",
            "fit_markdown": "",
            "fit_html": ""
          },
          "downloads": 0,
          "github_stars": 0,
          "dependencies": [],
          "features": {},
          "code_snippets": [],
          "readme_sections": {},
          "librs_downloads": null,
          "source": "crates.io",
          "enhanced_scraping": {},
          "enhanced_features": [],
          "enhanced_dependencies": [],
          "readme_summary": "The `num-derive` crate provides procedural macros to automatically derive numeric traits from the `num-traits` crate for enums and newtypes in Rust. It supports traits like `FromPrimitive`, `ToPrimitive`, `Float`, `Num`, `Zero`, and more, simplifying the implementation of numeric conversions and operations. Additionally, it allows explicit imports for transitive dependencies of `num-traits`.",
          "feature_summary": null,
          "use_case": "Utilities",
          "score": 6.0,
          "factual_counterfactual": "### Pair 1: Deriving traits for enums and newtypes  \n\u2705 **Factual**: The `num-derive` crate provides procedural macros such as `FromPrimitive` and `ToPrimitive`, which can be used to derive numeric traits for simple enums and newtypes, enabling seamless conversion between numeric types and enum variants.  \n\u274c **Counterfactual**: The `num-derive` crate supports deriving numeric traits for complex data structures like structs with multiple fields, allowing numeric operations across all fields simultaneously.  \n\n---\n\n### Pair 2: Dependency requirements  \n\u2705 **Factual**: The `num-derive` macros assume that the `num-traits` crate is a direct dependency, but you can specify a transitive dependency using the `#[num_traits = \"some_other_ident\"]` attribute for compatibility with re-exported identifiers.  \n\u274c **Counterfactual**: The `num-derive` crate automatically detects transitive dependencies of `num-traits` without requiring any additional configuration or attributes.  \n\n---\n\n### Pair 3: Inner type requirements for newtypes  \n\u2705 **Factual**: When deriving traits like `Float`, `Num`, or `Zero` for newtypes, the inner type must already implement the corresponding trait, as `num-derive` does not provide blanket implementations for unsupported types.  \n\u274c **Counterfactual**: The `num-derive` crate can derive traits like `Float` or `Num` for newtypes even",
          "source_analysis": null,
          "user_behavior": null,
          "security": null
        }
      },
      "irl_score": 8.6,
      "execution_id": "exec-6a770f7a-393e9876-1751264064",
      "timestamp": "2025-06-30T06:14:24.939315+00:00",
      "canon_version": "1.3.0"
    },
    "rule_zero_compliant": true
  }
]