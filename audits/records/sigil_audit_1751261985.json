[
  {
    "execution_id": "exec-822dcac3-f0d45b41-1751261975",
    "timestamp": "2025-06-30T05:39:35.674783+00:00",
    "sacred_chain": {
      "input_data": "rusqlite",
      "context_sources": [
        "crates.io",
        "github.com",
        "lib.rs",
        "docs.rs"
      ],
      "reasoning_steps": [
        "Input canonicalized: 'rusqlite' -> 'rusqlite'",
        "Context gathered from 4 validated sources",
        "Metadata extracted: 4 fields",
        "Documentation analyzed: quality 7.0",
        "Sentiment analyzed: positive",
        "Ecosystem analyzed: utilities",
        "Quality score synthesized: 7.50",
        "Trust decision: DEFER - Insufficient data for decision",
        "IRL confidence: 8.600"
      ],
      "suggestion": "ALLOW: Positive community sentiment",
      "verdict": "DEFER",
      "audit_info": {
        "metadata": {
          "name": "rusqlite",
          "type": "rust_crate",
          "source": "manual_input",
          "extraction_method": "irl_engine"
        },
        "sentiment": {
          "quality_score": 7.0,
          "completeness": 0.8,
          "examples_present": true,
          "api_documented": true
        },
        "ecosystem": {
          "overall": "positive",
          "positive_mentions": 10,
          "negative_mentions": 2,
          "neutral_mentions": 5,
          "total_mentions": 17
        },
        "quality_score": 7.5,
        "verdict_reason": "Insufficient data for decision",
        "sanitized_documentation": {
          "crates_io": {
            "url": "https://crates.io/crates/rusqlite",
            "title": "rusqlite v0.36.0",
            "content": {
              "raw_markdown": "#  rusqlite v0.36.0\nErgonomic wrapper for SQLite \n  * [ #database ](https://crates.io/keywords/database)\n  * [ #ffi ](https://crates.io/keywords/ffi)\n  * [ #sqlite ](https://crates.io/keywords/sqlite)\n\n\n  * [ Readme ](https://crates.io/crates/rusqlite)\n  * [ 79 Versions ](https://crates.io/crates/rusqlite/versions)\n  * [ Dependencies ](https://crates.io/crates/rusqlite/dependencies)\n  * [ Dependents ](https://crates.io/crates/rusqlite/reverse_dependencies)\n\n\n## Metadata\nabout 1 month ago \n2021 edition \n[ MIT ](https://choosealicense.com/licenses/mit)\n166 KiB \n## Install\nRun the following Cargo command in your project directory:\ncargo add rusqlite\nOr add the following line to your Cargo.toml:\nrusqlite = \"0.36.0\"\n## Documentation\n[ docs.rs/rusqlite ](https://docs.rs/rusqlite/)\n## Repository\n[ github.com/rusqlite/rusqlite ](https://github.com/rusqlite/rusqlite)\n## Owners\n## Categories\n  * [Database interfaces](https://crates.io/categories/database)\n\n\n[ Report crate ](https://crates.io/support?crate=rusqlite&inquire=crate-violation)\n### Stats Overview\n32,375,296 Downloads all time\n79 Versions published\n#### Downloads over the last 90 days\nDisplay as \nStacked \n  * Stacked \n  * Unstacked \n\n\nLoading\u2026\n",
              "markdown_with_citations": "#  rusqlite v0.36.0\nErgonomic wrapper for SQLite \n  *  #database \u27e81\u27e9\n  *  #ffi \u27e82\u27e9\n  *  #sqlite \u27e83\u27e9\n\n\n  *  Readme \u27e84\u27e9\n  *  79 Versions \u27e85\u27e9\n  *  Dependencies \u27e86\u27e9\n  *  Dependents \u27e87\u27e9\n\n\n## Metadata\nabout 1 month ago \n2021 edition \n MIT \u27e88\u27e9\n166 KiB \n## Install\nRun the following Cargo command in your project directory:\ncargo add rusqlite\nOr add the following line to your Cargo.toml:\nrusqlite = \"0.36.0\"\n## Documentation\n docs.rs/rusqlite \u27e89\u27e9\n## Repository\n github.com/rusqlite/rusqlite \u27e810\u27e9\n## Owners\n## Categories\n  * Database interfaces\u27e811\u27e9\n\n\n Report crate \u27e812\u27e9\n### Stats Overview\n32,375,296 Downloads all time\n79 Versions published\n#### Downloads over the last 90 days\nDisplay as \nStacked \n  * Stacked \n  * Unstacked \n\n\nLoading\u2026\n",
              "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://crates.io/keywords/database:  #database \n\u27e82\u27e9 https://crates.io/keywords/ffi:  #ffi \n\u27e83\u27e9 https://crates.io/keywords/sqlite:  #sqlite \n\u27e84\u27e9 https://crates.io/crates/rusqlite:  Readme \n\u27e85\u27e9 https://crates.io/crates/rusqlite/versions:  79 Versions \n\u27e86\u27e9 https://crates.io/crates/rusqlite/dependencies:  Dependencies \n\u27e87\u27e9 https://crates.io/crates/rusqlite/reverse_dependencies:  Dependents \n\u27e88\u27e9 https://choosealicense.com/licenses/mit:  MIT \n\u27e89\u27e9 https://docs.rs/rusqlite/:  docs.rs/rusqlite \n\u27e810\u27e9 https://github.com/rusqlite/rusqlite:  github.com/rusqlite/rusqlite \n\u27e811\u27e9 https://crates.io/categories/database: Database interfaces\n\u27e812\u27e9 https://crates.io/support?crate=rusqlite&inquire=crate-violation:  Report crate \n",
              "fit_markdown": "",
              "fit_html": ""
            },
            "structured_data": {},
            "quality_score": 3.0,
            "extraction_method": "crawl4ai",
            "error": null,
            "metadata": {
              "doc_type": "docs",
              "content_length": 1213,
              "has_structured_data": false,
              "crawl_success": true
            },
            "timestamp": "115765.0027945"
          },
          "docs_rs": {
            "url": "https://docs.rs/rusqlite",
            "title": "Crate rusqliteCopy item path",
            "content": {
              "raw_markdown": "[](https://docs.rs/rusqlite/latest/rusqlite/all.html \"show sidebar\")\n# Crate rusqliteCopy item path\n[Settings](https://docs.rs/rusqlite/latest/settings.html)\n[Help](https://docs.rs/rusqlite/latest/help.html)\nSummary[Source](https://docs.rs/rusqlite/latest/src/rusqlite/lib.rs.html#1-2296)\nExpand description\nRusqlite is an ergonomic wrapper for using SQLite from Rust.\nHistorically, the API was based on the one from [`rust-postgres`](https://github.com/sfackler/rust-postgres). However, the two have diverged in many ways, and no compatibility between the two is intended.\n```\nuse rusqlite::{params, Connection, Result};\n#[derive(Debug)]\nstruct Person {\n  id: i32,\n  name: String,\n  data: Option<Vec<u8>>,\n}\nfn main() -> Result<()> {\n  let conn = Connection::open_in_memory()?;\n  conn.execute(\n    \"CREATE TABLE person (\n      id  INTEGER PRIMARY KEY,\n      name TEXT NOT NULL,\n      data BLOB\n    )\",\n    (), // empty list of parameters.\n  )?;\n  let me = Person {\n    id: 0,\n    name: \"Steven\".to_string(),\n    data: None,\n  };\n  conn.execute(\n    \"INSERT INTO person (name, data) VALUES (?1, ?2)\",\n    (&me.name, &me.data),\n  )?;\n  let mut stmt = conn.prepare(\"SELECT id, name, data FROM person\")?;\n  let person_iter = stmt.query_map([], |row| {\n    Ok(Person {\n      id: row.get(0)?,\n      name: row.get(1)?,\n      data: row.get(2)?,\n    })\n  })?;\n  for person in person_iter {\n    println!(\"Found person {:?}\", person?);\n  }\n  Ok(())\n}\n```\n\n## Re-exports[\u00a7](https://docs.rs/rusqlite/latest/rusqlite/#reexports)\n\n`pub use crate::types::ToSql[](https://docs.rs/rusqlite/latest/rusqlite/types/trait.ToSql.html \"trait rusqlite::types::ToSql\");`\n\n\n`pub use fallible_iterator[](https://docs.rs/fallible-iterator/0.3.0/x86_64-unknown-linux-gnu/fallible_iterator/index.html \"mod fallible_iterator\");`\n\n\n`pub use fallible_streaming_iterator[](https://docs.rs/fallible-streaming-iterator/0.1.9/x86_64-unknown-linux-gnu/fallible_streaming_iterator/index.html \"mod fallible_streaming_iterator\");`\n\n\n`pub use libsqlite3_sys[](https://docs.rs/libsqlite3-sys/0.34.0/x86_64-unknown-linux-gnu/libsqlite3_sys/index.html \"mod libsqlite3_sys\") as ffi;`\n\n## Modules[\u00a7](https://docs.rs/rusqlite/latest/rusqlite/#modules)\n\n[auto_extension](https://docs.rs/rusqlite/latest/rusqlite/auto_extension/index.html \"mod rusqlite::auto_extension\")Non-`loadable_extension`\n    Automatic extension loading\n\n[backup](https://docs.rs/rusqlite/latest/rusqlite/backup/index.html \"mod rusqlite::backup\")`backup`\n    Online SQLite backup API.\n\n[blob](https://docs.rs/rusqlite/latest/rusqlite/blob/index.html \"mod rusqlite::blob\")`blob`\n    Incremental BLOB I/O.\n\n[config](https://docs.rs/rusqlite/latest/rusqlite/config/index.html \"mod rusqlite::config\")\n    Configure database connections\n\n[functions](https://docs.rs/rusqlite/latest/rusqlite/functions/index.html \"mod rusqlite::functions\")`functions`\n    Create or redefine SQL functions.\n\n[hooks](https://docs.rs/rusqlite/latest/rusqlite/hooks/index.html \"mod rusqlite::hooks\")`hooks`\n    Commit, Data Change and Rollback Notification Callbacks\n\n[limits](https://docs.rs/rusqlite/latest/rusqlite/limits/index.html \"mod rusqlite::limits\")`limits`\n    Run-Time Limits\n\n[serialize](https://docs.rs/rusqlite/latest/rusqlite/serialize/index.html \"mod rusqlite::serialize\")`serialize`\n    Serialize a database.\n\n[trace](https://docs.rs/rusqlite/latest/rusqlite/trace/index.html \"mod rusqlite::trace\")`trace`\n    Tracing and profiling functions. Error and warning log.\n\n[types](https://docs.rs/rusqlite/latest/rusqlite/types/index.html \"mod rusqlite::types\")\n    Traits dealing with SQLite data types.\n\n[vtab](https://docs.rs/rusqlite/latest/rusqlite/vtab/index.html \"mod rusqlite::vtab\")`vtab`\n    Create virtual tables.\n## Macros[\u00a7](https://docs.rs/rusqlite/latest/rusqlite/#macros)\n\n[named_params](https://docs.rs/rusqlite/latest/rusqlite/macro.named_params.html \"macro rusqlite::named_params\")\n    A macro making it more convenient to pass lists of named parameters as a `&[(&str, &dyn ToSql)]`.\n\n[params](https://docs.rs/rusqlite/latest/rusqlite/macro.params.html \"macro rusqlite::params\")\n    A macro making it more convenient to pass longer lists of parameters as a `&[&dyn ToSql]`.\n\n[prepare_and_bind](https://docs.rs/rusqlite/latest/rusqlite/macro.prepare_and_bind.html \"macro rusqlite::prepare_and_bind\")`rusqlite-macros`\n    Captured identifiers in SQL\n\n[prepare_cached_and_bind](https://docs.rs/rusqlite/latest/rusqlite/macro.prepare_cached_and_bind.html \"macro rusqlite::prepare_cached_and_bind\")`rusqlite-macros`\n    Captured identifiers in SQL\n## Structs[\u00a7](https://docs.rs/rusqlite/latest/rusqlite/#structs)\n\n[AndThenRows](https://docs.rs/rusqlite/latest/rusqlite/struct.AndThenRows.html \"struct rusqlite::AndThenRows\")\n    An iterator over the mapped resulting rows of a query, with an Error type unifying with Error.\n\n[Batch](https://docs.rs/rusqlite/latest/rusqlite/struct.Batch.html \"struct rusqlite::Batch\")\n    Batch fallible iterator\n\n[CachedStatement](https://docs.rs/rusqlite/latest/rusqlite/struct.CachedStatement.html \"struct rusqlite::CachedStatement\")\n    Cacheable statement.\n\n[Column](https://docs.rs/rusqlite/latest/rusqlite/struct.Column.html \"struct rusqlite::Column\")`column_decltype`\n    Information about a column of a SQLite query.\n\n[ColumnMetadata](https://docs.rs/rusqlite/latest/rusqlite/struct.ColumnMetadata.html \"struct rusqlite::ColumnMetadata\")`column_metadata`\n    Metadata about the origin of a column of a SQLite query\n\n[Connection](https://docs.rs/rusqlite/latest/rusqlite/struct.Connection.html \"struct rusqlite::Connection\")\n    A connection to a SQLite database.\n\n[InterruptHandle](https://docs.rs/rusqlite/latest/rusqlite/struct.InterruptHandle.html \"struct rusqlite::InterruptHandle\")\n    Allows interrupting a long-running computation.\n\n[LoadExtensionGuard](https://docs.rs/rusqlite/latest/rusqlite/struct.LoadExtensionGuard.html \"struct rusqlite::LoadExtensionGuard\")`load_extension`\n    RAII guard temporarily enabling SQLite extensions to be loaded.\n\n[Map](https://docs.rs/rusqlite/latest/rusqlite/struct.Map.html \"struct rusqlite::Map\")\n    `F` is used to transform the _streaming_ iterator into a _fallible_ iterator.\n\n[MappedRows](https://docs.rs/rusqlite/latest/rusqlite/struct.MappedRows.html \"struct rusqlite::MappedRows\")\n    An iterator over the mapped resulting rows of a query.\n\n[OpenFlags](https://docs.rs/rusqlite/latest/rusqlite/struct.OpenFlags.html \"struct rusqlite::OpenFlags\")\n    Flags for opening SQLite database connections. See [sqlite3_open_v2](https://www.sqlite.org/c3ref/open.html) for details.\n\n[ParamsFromIter](https://docs.rs/rusqlite/latest/rusqlite/struct.ParamsFromIter.html \"struct rusqlite::ParamsFromIter\")\n    Adapter type which allows any iterator over [`ToSql`](https://docs.rs/rusqlite/latest/rusqlite/types/trait.ToSql.html \"trait rusqlite::types::ToSql\") values to implement [`Params`](https://docs.rs/rusqlite/latest/rusqlite/trait.Params.html \"trait rusqlite::Params\").\n\n[PrepFlags](https://docs.rs/rusqlite/latest/rusqlite/struct.PrepFlags.html \"struct rusqlite::PrepFlags\")\n    Prepare flags. See [sqlite3_prepare_v3](https://sqlite.org/c3ref/c_prepare_normalize.html) for details.\n\n[Row](https://docs.rs/rusqlite/latest/rusqlite/struct.Row.html \"struct rusqlite::Row\")\n    A single result row of a query.\n\n[Rows](https://docs.rs/rusqlite/latest/rusqlite/struct.Rows.html \"struct rusqlite::Rows\")\n    A handle (lazy fallible streaming iterator) for the resulting rows of a query.\n\n[Savepoint](https://docs.rs/rusqlite/latest/rusqlite/struct.Savepoint.html \"struct rusqlite::Savepoint\")\n    Represents a savepoint on a database connection.\n\n[Statement](https://docs.rs/rusqlite/latest/rusqlite/struct.Statement.html \"struct rusqlite::Statement\")\n    A prepared statement.\n\n[Transaction](https://docs.rs/rusqlite/latest/rusqlite/struct.Transaction.html \"struct rusqlite::Transaction\")\n    Represents a transaction on a database connection.\n## Enums[\u00a7](https://docs.rs/rusqlite/latest/rusqlite/#enums)\n\n[DropBehavior](https://docs.rs/rusqlite/latest/rusqlite/enum.DropBehavior.html \"enum rusqlite::DropBehavior\")\n    Options for how a Transaction or Savepoint should behave when it is dropped.\n\n[Error](https://docs.rs/rusqlite/latest/rusqlite/enum.Error.html \"enum rusqlite::Error\")\n    Enum listing possible errors from rusqlite.\n\n[ErrorCode](https://docs.rs/rusqlite/latest/rusqlite/enum.ErrorCode.html \"enum rusqlite::ErrorCode\")\n    Error Codes\n\n[StatementStatus](https://docs.rs/rusqlite/latest/rusqlite/enum.StatementStatus.html \"enum rusqlite::StatementStatus\")\n    Prepared statement status counters.\n\n[TransactionBehavior](https://docs.rs/rusqlite/latest/rusqlite/enum.TransactionBehavior.html \"enum rusqlite::TransactionBehavior\")\n    Options for transaction behavior. See [BEGIN TRANSACTION](http://www.sqlite.org/lang_transaction.html) for details.\n\n[TransactionState](https://docs.rs/rusqlite/latest/rusqlite/enum.TransactionState.html \"enum rusqlite::TransactionState\")`modern_sqlite`\n    Transaction state of a database\n## Constants[\u00a7](https://docs.rs/rusqlite/latest/rusqlite/#constants)\n\n[MAIN_DB](https://docs.rs/rusqlite/latest/rusqlite/constant.MAIN_DB.html \"constant rusqlite::MAIN_DB\")\n    Shorthand for `Main` database.\n\n[TEMP_DB](https://docs.rs/rusqlite/latest/rusqlite/constant.TEMP_DB.html \"constant rusqlite::TEMP_DB\")\n    Shorthand for `Temp` database.\n## Traits[\u00a7](https://docs.rs/rusqlite/latest/rusqlite/#traits)\n\n[BindIndex](https://docs.rs/rusqlite/latest/rusqlite/trait.BindIndex.html \"trait rusqlite::BindIndex\")\n    A trait implemented by types that can index into parameters of a statement.\n\n[Name](https://docs.rs/rusqlite/latest/rusqlite/trait.Name.html \"trait rusqlite::Name\")\n    Database, table, column, collation, function, module, vfs name\n\n[OptionalExtension](https://docs.rs/rusqlite/latest/rusqlite/trait.OptionalExtension.html \"trait rusqlite::OptionalExtension\")\n    See the [method documentation](https://docs.rs/rusqlite/latest/rusqlite/#tymethod.optional).\n\n[Params](https://docs.rs/rusqlite/latest/rusqlite/trait.Params.html \"trait rusqlite::Params\")\n    Trait used for [sets of parameter](https://www.sqlite.org/c3ref/bind_blob.html) passed into SQL statements/queries.\n\n[RowIndex](https://docs.rs/rusqlite/latest/rusqlite/trait.RowIndex.html \"trait rusqlite::RowIndex\")\n    A trait implemented by types that can index into columns of a row.\n## Functions[\u00a7](https://docs.rs/rusqlite/latest/rusqlite/#functions)\n\n[params_from_iter](https://docs.rs/rusqlite/latest/rusqlite/fn.params_from_iter.html \"fn rusqlite::params_from_iter\")\n    Constructor function for a [`ParamsFromIter`](https://docs.rs/rusqlite/latest/rusqlite/struct.ParamsFromIter.html \"struct rusqlite::ParamsFromIter\"). See its documentation for more.\n\n[to_sqlite_error](https://docs.rs/rusqlite/latest/rusqlite/fn.to_sqlite_error.html \"fn rusqlite::to_sqlite_error\")\u26a0\n    Transform Rust error to SQLite error (message and code).\n\n[version](https://docs.rs/rusqlite/latest/rusqlite/fn.version.html \"fn rusqlite::version\")\n    Returns the SQLite version as a string; e.g., `\"3.16.2\"` for version 3.16.2.\n\n[version_number](https://docs.rs/rusqlite/latest/rusqlite/fn.version_number.html \"fn rusqlite::version_number\")\n    Returns the SQLite version as an integer; e.g., `3016002` for version 3.16.2.\n## Type Aliases[\u00a7](https://docs.rs/rusqlite/latest/rusqlite/#types)\n\n[Result](https://docs.rs/rusqlite/latest/rusqlite/type.Result.html \"type rusqlite::Result\")\n    A typedef of the result returned by many methods.\n",
              "markdown_with_citations": "[](https://docs.rs/rusqlite/latest/rusqlite/all.html \"show sidebar\")\n# Crate rusqliteCopy item path\nSettings\u27e81\u27e9\nHelp\u27e82\u27e9\nSummarySource\u27e83\u27e9\nExpand description\nRusqlite is an ergonomic wrapper for using SQLite from Rust.\nHistorically, the API was based on the one from `rust-postgres`\u27e84\u27e9. However, the two have diverged in many ways, and no compatibility between the two is intended.\n```\nuse rusqlite::{params, Connection, Result};\n#[derive(Debug)]\nstruct Person {\n  id: i32,\n  name: String,\n  data: Option<Vec<u8>>,\n}\nfn main() -> Result<()> {\n  let conn = Connection::open_in_memory()?;\n  conn.execute(\n    \"CREATE TABLE person (\n      id  INTEGER PRIMARY KEY,\n      name TEXT NOT NULL,\n      data BLOB\n    )\",\n    (), // empty list of parameters.\n  )?;\n  let me = Person {\n    id: 0,\n    name: \"Steven\".to_string(),\n    data: None,\n  };\n  conn.execute(\n    \"INSERT INTO person (name, data) VALUES (?1, ?2)\",\n    (&me.name, &me.data),\n  )?;\n  let mut stmt = conn.prepare(\"SELECT id, name, data FROM person\")?;\n  let person_iter = stmt.query_map([], |row| {\n    Ok(Person {\n      id: row.get(0)?,\n      name: row.get(1)?,\n      data: row.get(2)?,\n    })\n  })?;\n  for person in person_iter {\n    println!(\"Found person {:?}\", person?);\n  }\n  Ok(())\n}\n```\n\n## Re-exports\u00a7\u27e85\u27e9\n\n`pub use crate::types::ToSql[](https://docs.rs/rusqlite/latest/rusqlite/types/trait.ToSql.html \"trait rusqlite::types::ToSql\");`\n\n\n`pub use fallible_iterator[](https://docs.rs/fallible-iterator/0.3.0/x86_64-unknown-linux-gnu/fallible_iterator/index.html \"mod fallible_iterator\");`\n\n\n`pub use fallible_streaming_iterator[](https://docs.rs/fallible-streaming-iterator/0.1.9/x86_64-unknown-linux-gnu/fallible_streaming_iterator/index.html \"mod fallible_streaming_iterator\");`\n\n\n`pub use libsqlite3_sys[](https://docs.rs/libsqlite3-sys/0.34.0/x86_64-unknown-linux-gnu/libsqlite3_sys/index.html \"mod libsqlite3_sys\") as ffi;`\n\n## Modules\u00a7\u27e86\u27e9\n\nauto_extension\u27e87\u27e9Non-`loadable_extension`\n    Automatic extension loading\n\nbackup\u27e88\u27e9`backup`\n    Online SQLite backup API.\n\nblob\u27e89\u27e9`blob`\n    Incremental BLOB I/O.\n\nconfig\u27e810\u27e9\n    Configure database connections\n\nfunctions\u27e811\u27e9`functions`\n    Create or redefine SQL functions.\n\nhooks\u27e812\u27e9`hooks`\n    Commit, Data Change and Rollback Notification Callbacks\n\nlimits\u27e813\u27e9`limits`\n    Run-Time Limits\n\nserialize\u27e814\u27e9`serialize`\n    Serialize a database.\n\ntrace\u27e815\u27e9`trace`\n    Tracing and profiling functions. Error and warning log.\n\ntypes\u27e816\u27e9\n    Traits dealing with SQLite data types.\n\nvtab\u27e817\u27e9`vtab`\n    Create virtual tables.\n## Macros\u00a7\u27e818\u27e9\n\nnamed_params\u27e819\u27e9\n    A macro making it more convenient to pass lists of named parameters as a `&[(&str, &dyn ToSql)]`.\n\nparams\u27e820\u27e9\n    A macro making it more convenient to pass longer lists of parameters as a `&[&dyn ToSql]`.\n\nprepare_and_bind\u27e821\u27e9`rusqlite-macros`\n    Captured identifiers in SQL\n\nprepare_cached_and_bind\u27e822\u27e9`rusqlite-macros`\n    Captured identifiers in SQL\n## Structs\u00a7\u27e823\u27e9\n\nAndThenRows\u27e824\u27e9\n    An iterator over the mapped resulting rows of a query, with an Error type unifying with Error.\n\nBatch\u27e825\u27e9\n    Batch fallible iterator\n\nCachedStatement\u27e826\u27e9\n    Cacheable statement.\n\nColumn\u27e827\u27e9`column_decltype`\n    Information about a column of a SQLite query.\n\nColumnMetadata\u27e828\u27e9`column_metadata`\n    Metadata about the origin of a column of a SQLite query\n\nConnection\u27e829\u27e9\n    A connection to a SQLite database.\n\nInterruptHandle\u27e830\u27e9\n    Allows interrupting a long-running computation.\n\nLoadExtensionGuard\u27e831\u27e9`load_extension`\n    RAII guard temporarily enabling SQLite extensions to be loaded.\n\nMap\u27e832\u27e9\n    `F` is used to transform the _streaming_ iterator into a _fallible_ iterator.\n\nMappedRows\u27e833\u27e9\n    An iterator over the mapped resulting rows of a query.\n\nOpenFlags\u27e834\u27e9\n    Flags for opening SQLite database connections. See sqlite3_open_v2\u27e835\u27e9 for details.\n\nParamsFromIter\u27e836\u27e9\n    Adapter type which allows any iterator over `ToSql`\u27e837\u27e9 values to implement `Params`\u27e838\u27e9.\n\nPrepFlags\u27e839\u27e9\n    Prepare flags. See sqlite3_prepare_v3\u27e840\u27e9 for details.\n\nRow\u27e841\u27e9\n    A single result row of a query.\n\nRows\u27e842\u27e9\n    A handle (lazy fallible streaming iterator) for the resulting rows of a query.\n\nSavepoint\u27e843\u27e9\n    Represents a savepoint on a database connection.\n\nStatement\u27e844\u27e9\n    A prepared statement.\n\nTransaction\u27e845\u27e9\n    Represents a transaction on a database connection.\n## Enums\u00a7\u27e846\u27e9\n\nDropBehavior\u27e847\u27e9\n    Options for how a Transaction or Savepoint should behave when it is dropped.\n\nError\u27e848\u27e9\n    Enum listing possible errors from rusqlite.\n\nErrorCode\u27e849\u27e9\n    Error Codes\n\nStatementStatus\u27e850\u27e9\n    Prepared statement status counters.\n\nTransactionBehavior\u27e851\u27e9\n    Options for transaction behavior. See BEGIN TRANSACTION\u27e852\u27e9 for details.\n\nTransactionState\u27e853\u27e9`modern_sqlite`\n    Transaction state of a database\n## Constants\u00a7\u27e854\u27e9\n\nMAIN_DB\u27e855\u27e9\n    Shorthand for `Main` database.\n\nTEMP_DB\u27e856\u27e9\n    Shorthand for `Temp` database.\n## Traits\u00a7\u27e857\u27e9\n\nBindIndex\u27e858\u27e9\n    A trait implemented by types that can index into parameters of a statement.\n\nName\u27e859\u27e9\n    Database, table, column, collation, function, module, vfs name\n\nOptionalExtension\u27e860\u27e9\n    See the method documentation\u27e861\u27e9.\n\nParams\u27e838\u27e9\n    Trait used for sets of parameter\u27e862\u27e9 passed into SQL statements/queries.\n\nRowIndex\u27e863\u27e9\n    A trait implemented by types that can index into columns of a row.\n## Functions\u00a7\u27e864\u27e9\n\nparams_from_iter\u27e865\u27e9\n    Constructor function for a `ParamsFromIter`\u27e836\u27e9. See its documentation for more.\n\nto_sqlite_error\u27e866\u27e9\u26a0\n    Transform Rust error to SQLite error (message and code).\n\nversion\u27e867\u27e9\n    Returns the SQLite version as a string; e.g., `\"3.16.2\"` for version 3.16.2.\n\nversion_number\u27e868\u27e9\n    Returns the SQLite version as an integer; e.g., `3016002` for version 3.16.2.\n## Type Aliases\u00a7\u27e869\u27e9\n\nResult\u27e870\u27e9\n    A typedef of the result returned by many methods.\n",
              "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://docs.rs/rusqlite/latest/settings.html: Settings\n\u27e82\u27e9 https://docs.rs/rusqlite/latest/help.html: Help\n\u27e83\u27e9 https://docs.rs/rusqlite/latest/src/rusqlite/lib.rs.html#1-2296: Source\n\u27e84\u27e9 https://github.com/sfackler/rust-postgres: `rust-postgres`\n\u27e85\u27e9 https://docs.rs/rusqlite/latest/rusqlite/#reexports: \u00a7\n\u27e86\u27e9 https://docs.rs/rusqlite/latest/rusqlite/#modules: \u00a7\n\u27e87\u27e9 https://docs.rs/rusqlite/latest/rusqlite/auto_extension/index.html: mod rusqlite::auto_extension - auto_extension\n\u27e88\u27e9 https://docs.rs/rusqlite/latest/rusqlite/backup/index.html: mod rusqlite::backup - backup\n\u27e89\u27e9 https://docs.rs/rusqlite/latest/rusqlite/blob/index.html: mod rusqlite::blob - blob\n\u27e810\u27e9 https://docs.rs/rusqlite/latest/rusqlite/config/index.html: mod rusqlite::config - config\n\u27e811\u27e9 https://docs.rs/rusqlite/latest/rusqlite/functions/index.html: mod rusqlite::functions - functions\n\u27e812\u27e9 https://docs.rs/rusqlite/latest/rusqlite/hooks/index.html: mod rusqlite::hooks - hooks\n\u27e813\u27e9 https://docs.rs/rusqlite/latest/rusqlite/limits/index.html: mod rusqlite::limits - limits\n\u27e814\u27e9 https://docs.rs/rusqlite/latest/rusqlite/serialize/index.html: mod rusqlite::serialize - serialize\n\u27e815\u27e9 https://docs.rs/rusqlite/latest/rusqlite/trace/index.html: mod rusqlite::trace - trace\n\u27e816\u27e9 https://docs.rs/rusqlite/latest/rusqlite/types/index.html: mod rusqlite::types - types\n\u27e817\u27e9 https://docs.rs/rusqlite/latest/rusqlite/vtab/index.html: mod rusqlite::vtab - vtab\n\u27e818\u27e9 https://docs.rs/rusqlite/latest/rusqlite/#macros: \u00a7\n\u27e819\u27e9 https://docs.rs/rusqlite/latest/rusqlite/macro.named_params.html: macro rusqlite::named_params - named_params\n\u27e820\u27e9 https://docs.rs/rusqlite/latest/rusqlite/macro.params.html: macro rusqlite::params - params\n\u27e821\u27e9 https://docs.rs/rusqlite/latest/rusqlite/macro.prepare_and_bind.html: macro rusqlite::prepare_and_bind - prepare_and_bind\n\u27e822\u27e9 https://docs.rs/rusqlite/latest/rusqlite/macro.prepare_cached_and_bind.html: macro rusqlite::prepare_cached_and_bind - prepare_cached_and_bind\n\u27e823\u27e9 https://docs.rs/rusqlite/latest/rusqlite/#structs: \u00a7\n\u27e824\u27e9 https://docs.rs/rusqlite/latest/rusqlite/struct.AndThenRows.html: struct rusqlite::AndThenRows - AndThenRows\n\u27e825\u27e9 https://docs.rs/rusqlite/latest/rusqlite/struct.Batch.html: struct rusqlite::Batch - Batch\n\u27e826\u27e9 https://docs.rs/rusqlite/latest/rusqlite/struct.CachedStatement.html: struct rusqlite::CachedStatement - CachedStatement\n\u27e827\u27e9 https://docs.rs/rusqlite/latest/rusqlite/struct.Column.html: struct rusqlite::Column - Column\n\u27e828\u27e9 https://docs.rs/rusqlite/latest/rusqlite/struct.ColumnMetadata.html: struct rusqlite::ColumnMetadata - ColumnMetadata\n\u27e829\u27e9 https://docs.rs/rusqlite/latest/rusqlite/struct.Connection.html: struct rusqlite::Connection - Connection\n\u27e830\u27e9 https://docs.rs/rusqlite/latest/rusqlite/struct.InterruptHandle.html: struct rusqlite::InterruptHandle - InterruptHandle\n\u27e831\u27e9 https://docs.rs/rusqlite/latest/rusqlite/struct.LoadExtensionGuard.html: struct rusqlite::LoadExtensionGuard - LoadExtensionGuard\n\u27e832\u27e9 https://docs.rs/rusqlite/latest/rusqlite/struct.Map.html: struct rusqlite::Map - Map\n\u27e833\u27e9 https://docs.rs/rusqlite/latest/rusqlite/struct.MappedRows.html: struct rusqlite::MappedRows - MappedRows\n\u27e834\u27e9 https://docs.rs/rusqlite/latest/rusqlite/struct.OpenFlags.html: struct rusqlite::OpenFlags - OpenFlags\n\u27e835\u27e9 https://www.sqlite.org/c3ref/open.html: sqlite3_open_v2\n\u27e836\u27e9 https://docs.rs/rusqlite/latest/rusqlite/struct.ParamsFromIter.html: struct rusqlite::ParamsFromIter - ParamsFromIter\n\u27e837\u27e9 https://docs.rs/rusqlite/latest/rusqlite/types/trait.ToSql.html: trait rusqlite::types::ToSql - `ToSql`\n\u27e838\u27e9 https://docs.rs/rusqlite/latest/rusqlite/trait.Params.html: trait rusqlite::Params - `Params`\n\u27e839\u27e9 https://docs.rs/rusqlite/latest/rusqlite/struct.PrepFlags.html: struct rusqlite::PrepFlags - PrepFlags\n\u27e840\u27e9 https://sqlite.org/c3ref/c_prepare_normalize.html: sqlite3_prepare_v3\n\u27e841\u27e9 https://docs.rs/rusqlite/latest/rusqlite/struct.Row.html: struct rusqlite::Row - Row\n\u27e842\u27e9 https://docs.rs/rusqlite/latest/rusqlite/struct.Rows.html: struct rusqlite::Rows - Rows\n\u27e843\u27e9 https://docs.rs/rusqlite/latest/rusqlite/struct.Savepoint.html: struct rusqlite::Savepoint - Savepoint\n\u27e844\u27e9 https://docs.rs/rusqlite/latest/rusqlite/struct.Statement.html: struct rusqlite::Statement - Statement\n\u27e845\u27e9 https://docs.rs/rusqlite/latest/rusqlite/struct.Transaction.html: struct rusqlite::Transaction - Transaction\n\u27e846\u27e9 https://docs.rs/rusqlite/latest/rusqlite/#enums: \u00a7\n\u27e847\u27e9 https://docs.rs/rusqlite/latest/rusqlite/enum.DropBehavior.html: enum rusqlite::DropBehavior - DropBehavior\n\u27e848\u27e9 https://docs.rs/rusqlite/latest/rusqlite/enum.Error.html: enum rusqlite::Error - Error\n\u27e849\u27e9 https://docs.rs/rusqlite/latest/rusqlite/enum.ErrorCode.html: enum rusqlite::ErrorCode - ErrorCode\n\u27e850\u27e9 https://docs.rs/rusqlite/latest/rusqlite/enum.StatementStatus.html: enum rusqlite::StatementStatus - StatementStatus\n\u27e851\u27e9 https://docs.rs/rusqlite/latest/rusqlite/enum.TransactionBehavior.html: enum rusqlite::TransactionBehavior - TransactionBehavior\n\u27e852\u27e9 http://www.sqlite.org/lang_transaction.html: BEGIN TRANSACTION\n\u27e853\u27e9 https://docs.rs/rusqlite/latest/rusqlite/enum.TransactionState.html: enum rusqlite::TransactionState - TransactionState\n\u27e854\u27e9 https://docs.rs/rusqlite/latest/rusqlite/#constants: \u00a7\n\u27e855\u27e9 https://docs.rs/rusqlite/latest/rusqlite/constant.MAIN_DB.html: constant rusqlite::MAIN_DB - MAIN_DB\n\u27e856\u27e9 https://docs.rs/rusqlite/latest/rusqlite/constant.TEMP_DB.html: constant rusqlite::TEMP_DB - TEMP_DB\n\u27e857\u27e9 https://docs.rs/rusqlite/latest/rusqlite/#traits: \u00a7\n\u27e858\u27e9 https://docs.rs/rusqlite/latest/rusqlite/trait.BindIndex.html: trait rusqlite::BindIndex - BindIndex\n\u27e859\u27e9 https://docs.rs/rusqlite/latest/rusqlite/trait.Name.html: trait rusqlite::Name - Name\n\u27e860\u27e9 https://docs.rs/rusqlite/latest/rusqlite/trait.OptionalExtension.html: trait rusqlite::OptionalExtension - OptionalExtension\n\u27e861\u27e9 https://docs.rs/rusqlite/latest/rusqlite/#tymethod.optional: method documentation\n\u27e862\u27e9 https://www.sqlite.org/c3ref/bind_blob.html: sets of parameter\n\u27e863\u27e9 https://docs.rs/rusqlite/latest/rusqlite/trait.RowIndex.html: trait rusqlite::RowIndex - RowIndex\n\u27e864\u27e9 https://docs.rs/rusqlite/latest/rusqlite/#functions: \u00a7\n\u27e865\u27e9 https://docs.rs/rusqlite/latest/rusqlite/fn.params_from_iter.html: fn rusqlite::params_from_iter - params_from_iter\n\u27e866\u27e9 https://docs.rs/rusqlite/latest/rusqlite/fn.to_sqlite_error.html: fn rusqlite::to_sqlite_error - to_sqlite_error\n\u27e867\u27e9 https://docs.rs/rusqlite/latest/rusqlite/fn.version.html: fn rusqlite::version - version\n\u27e868\u27e9 https://docs.rs/rusqlite/latest/rusqlite/fn.version_number.html: fn rusqlite::version_number - version_number\n\u27e869\u27e9 https://docs.rs/rusqlite/latest/rusqlite/#types: \u00a7\n\u27e870\u27e9 https://docs.rs/rusqlite/latest/rusqlite/type.Result.html: type rusqlite::Result - Result\n",
              "fit_markdown": "",
              "fit_html": ""
            },
            "structured_data": {},
            "quality_score": 4.0,
            "extraction_method": "crawl4ai",
            "error": null,
            "metadata": {
              "doc_type": "docs",
              "content_length": 11544,
              "has_structured_data": false,
              "crawl_success": true
            },
            "timestamp": "115765.7581644"
          },
          "lib_rs": {
            "url": "https://lib.rs/crates/rusqlite",
            "title": "Untitled",
            "content": {
              "raw_markdown": "###  [68 releases](https://lib.rs/crates/rusqlite/versions) (36 breaking)\n0.36.0 |  May 26, 2025   \n---|---  \n0.34.0 |  Mar 5, 2025   \n0.32.1 |  Jul 26, 2024   \n0.31.0 |  Feb 17, 2024   \n0.0.1 |  Nov 21, 2014   \n#**1** in [Database interfaces](https://lib.rs/database \"Crates to interface with database management systems.\")\nDownload history 388327/week @ 2025-03-10 342958/week @ 2025-03-17 335887/week @ 2025-03-24 333880/week @ 2025-03-31 314848/week @ 2025-04-07 291291/week @ 2025-04-14 319622/week @ 2025-04-21 318824/week @ 2025-04-28 311278/week @ 2025-05-05 291677/week @ 2025-05-12 279945/week @ 2025-05-19 254505/week @ 2025-05-26 264862/week @ 2025-06-02 262368/week @ 2025-06-09 262212/week @ 2025-06-16 255076/week @ 2025-06-23\n**1,058,457** downloads per month Used in [**1,615** crates (1,069 directly)](https://lib.rs/crates/rusqlite/rev)\n**MIT** license \n**20MB** **396K** SLoC\nC 356K SLoC // 0.3% comments  Rust 40K SLoC // 0.0% comments  Shell 63 SLoC // 0.2% comments \n# Rusqlite\n[![Latest Version](https://img.shields.io/crates/v/rusqlite.svg)](https://crates.io/crates/rusqlite) [![Documentation](https://img.gs/czjpqfbdkz/full/https://docs.rs/rusqlite/badge.svg)](https://docs.rs/rusqlite) [![Build Status \\(GitHub\\)](https://img.gs/czjpqfbdkz/full/https://github.com/rusqlite/rusqlite/workflows/CI/badge.svg)](https://github.com/rusqlite/rusqlite/actions) [![Build Status \\(AppVeyor\\)](https://img.gs/czjpqfbdkz/full/https://ci.appveyor.com/api/projects/status/github/rusqlite/rusqlite?branch=master&svg=true)](https://ci.appveyor.com/project/rusqlite/rusqlite) [![Code Coverage](https://img.gs/czjpqfbdkz/full/https://codecov.io/gh/rusqlite/rusqlite/branch/master/graph/badge.svg)](https://codecov.io/gh/rusqlite/rusqlite) [![Dependency Status](https://img.gs/czjpqfbdkz/full/https://deps.rs/repo/github/rusqlite/rusqlite/status.svg)](https://deps.rs/repo/github/rusqlite/rusqlite) [![Discord Chat](https://img.shields.io/discord/927966344266256434.svg?logo=discord)](https://discord.gg/nFYfGPB8g4)\nRusqlite is an ergonomic wrapper for using SQLite from Rust.\nHistorically, the API was based on the one from [``rust-postgres``](https://github.com/sfackler/rust-postgres). However, the two have diverged in many ways, and no compatibility between the two is intended.\n## Usage\nIn your Cargo.toml:\n```\n```[``dependencies``]`\n``# `bundled` causes us to automatically compile and link in an up to date``\n``# version of SQLite for you. This avoids many common build issues, and``\n``# avoids depending on the version of SQLite on the users system (or your``\n``# system), which may be old or missing. It's the right choice for most``\n``# programs that control their own SQLite databases.``\n``#``\n``# That said, it's not ideal for all scenarios and in particular, generic``\n``# libraries built around `rusqlite` should probably not enable it, which``\n``# is why it is not a default feature -- it could become hard to disable.``\n`rusqlite = { version = \"0.36.0\", features ``=` ``[```\"`bundled`\"```]`` }\n``\n```\n\nSimple example usage:\n```\n``use` `rusqlite`::````{`Connection`,` `Result````}```;`\n``#``[``derive```(```Debug```)```]``\n``struct` ```Person` ````{`\n  `id``:` `i32`,\n  `name``:` String,\n  `data``:` ``Option``<``Vec``<``u8``>``>``,\n```}```\n``fn` `main`````(````)```` ``->` ``Result``<``(``)``>``` ````{`\n  `let` conn `=` `Connection`::``open_in_memory`(``)``?``;`\n  conn`.``execute``(`\n    ``\"`CREATE TABLE person (\n      id  INTEGER PRIMARY KEY,\n      name TEXT NOT NULL,\n      data BLOB\n    )`\"```,`\n    `(``)``,` ``//` empty list of parameters.`\n  `)``?``;`\n  `let` me `=` Person `{`\n    id`:` `0``,`\n    name`:` ``\"`Steven`\"```.``to_string``(``)``,`\n    data`:` `None``,`\n  `}``;`\n  conn`.``execute``(`\n    ``\"`INSERT INTO person (name, data) VALUES (?1, ?2)`\"```,`\n    `(``&`me`.`name`,` `&`me`.`data`)``,`\n  `)``?``;`\n  `let` `mut` stmt `=` conn`.``prepare``(```\"`SELECT id, name, data FROM person`\"```)``?``;`\n  `let` person_iter `=` stmt`.``query_map``(``[``]``,` ```|``````row``|`` ```{`\n    `Ok``(`Person `{`\n      id`:` row`.``get``(``0``)``?``,`\n      name`:` row`.``get``(``1``)``?``,`\n      data`:` row`.``get``(``2``)``?``,`\n    `}``)`\n  `}```)``?``;`\n  `for` person `in` person_iter `{`\n    `println!``(```\"`Found person `{:?}``\"```,` person`.``unwrap``(``)``)``;`\n  `}`\n  `Ok``(``(``)``)`\n```}```\n`\n```\n\n### Supported SQLite Versions\nThe base ``rusqlite`` package supports SQLite version 3.14.0 or newer. If you need support for older versions, please file an issue. Some cargo features require a newer SQLite version; see details below.\n### Optional Features\nRusqlite provides several features that are behind [Cargo features](https://doc.rust-lang.org/cargo/reference/manifest.html#the-features-section). They are:\n  * [``load_extension``](https://docs.rs/rusqlite/~0/rusqlite/struct.LoadExtensionGuard.html) allows loading dynamic library-based SQLite extensions.\n  * ``loadable_extension`` to program [loadable extension](https://sqlite.org/loadext.html) in Rust.\n  * [``backup``](https://docs.rs/rusqlite/~0/rusqlite/backup/index.html) allows use of SQLite's online backup API.\n  * [``functions``](https://docs.rs/rusqlite/~0/rusqlite/functions/index.html) allows you to load Rust closures into SQLite connections for use in queries.\n  * ``window`` for [window function](https://www.sqlite.org/windowfunctions.html) support (```fun``(``...``)` `OVER` `...```). (Implies ``functions``.)\n  * [``trace``](https://docs.rs/rusqlite/~0/rusqlite/trace/index.html) allows hooks into SQLite's tracing and profiling APIs.\n  * [``blob``](https://docs.rs/rusqlite/~0/rusqlite/blob/index.html) gives ```std`::```io`::````{`Read`,` Write`,` Seek```}```` access to SQL BLOBs.\n  * [``limits``](https://docs.rs/rusqlite/~0/rusqlite/struct.Connection.html#method.limit) allows you to set and retrieve SQLite's per connection limits.\n  * ``serde_json`` implements [``FromSql``](https://docs.rs/rusqlite/~0/rusqlite/types/trait.FromSql.html) and [``ToSql``](https://docs.rs/rusqlite/~0/rusqlite/types/trait.ToSql.html) for the ``Value`` type from the [``serde_json`` crate](https://lib.rs/crates/serde_json).\n  * ``chrono`` implements [``FromSql``](https://docs.rs/rusqlite/~0/rusqlite/types/trait.FromSql.html) and [``ToSql``](https://docs.rs/rusqlite/~0/rusqlite/types/trait.ToSql.html) for various types from the [``chrono`` crate](https://lib.rs/crates/chrono).\n  * ``time`` implements [``FromSql``](https://docs.rs/rusqlite/~0/rusqlite/types/trait.FromSql.html) and [``ToSql``](https://docs.rs/rusqlite/~0/rusqlite/types/trait.ToSql.html) for various types from the [``time`` crate](https://lib.rs/crates/time).\n  * ``jiff`` implements [``FromSql``](https://docs.rs/rusqlite/~0/rusqlite/types/trait.FromSql.html) and [``ToSql``](https://docs.rs/rusqlite/~0/rusqlite/types/trait.ToSql.html) for the ``Value`` type from the [``jiff`` crate](https://lib.rs/crates/jiff).\n  * ``url`` implements [``FromSql``](https://docs.rs/rusqlite/~0/rusqlite/types/trait.FromSql.html) and [``ToSql``](https://docs.rs/rusqlite/~0/rusqlite/types/trait.ToSql.html) for the ``Url`` type from the [``url`` crate](https://lib.rs/crates/url).\n  * ``bundled`` uses a bundled version of SQLite. This is a good option for cases where linking to SQLite is complicated, such as Windows.\n  * ``sqlcipher`` looks for the SQLCipher library to link against instead of SQLite. This feature overrides ``bundled``.\n  * ``bundled-sqlcipher`` uses a bundled version of SQLCipher. This searches for and links against a system-installed crypto library to provide the crypto implementation.\n  * ``bundled-sqlcipher-vendored-openssl`` allows using bundled-sqlcipher with a vendored version of OpenSSL (via the ``openssl-sys`` crate) as the crypto provider. \n    * As the name implies this depends on the ``bundled-sqlcipher`` feature, and automatically turns it on.\n    * If turned on, this uses the [``openssl-sys``](https://lib.rs/crates/openssl-sys) crate, with the ``vendored`` feature enabled in order to build and bundle the OpenSSL crypto library.\n  * ``hooks`` for [Commit, Rollback](http://sqlite.org/c3ref/commit_hook.html) and [Data Change](http://sqlite.org/c3ref/update_hook.html) notification callbacks.\n  * ``preupdate_hook`` for [preupdate](https://sqlite.org/c3ref/preupdate_count.html) notification callbacks. (Implies ``hooks``.)\n  * ``unlock_notify`` for [Unlock](https://sqlite.org/unlock_notify.html) notification.\n  * ``vtab`` for [virtual table](https://sqlite.org/vtab.html) support (allows you to write virtual table implementations in Rust). Currently, only read-only virtual tables are supported.\n  * ``series`` exposes [```generate_series``(``...``)```](https://www.sqlite.org/series.html) Table-Valued Function. (Implies ``vtab``.)\n  * [``csvtab``](https://sqlite.org/csv.html), CSV virtual table written in Rust. (Implies ``vtab``.)\n  * [``array``](https://sqlite.org/carray.html), The ```rarray``(``)``` Table-Valued Function. (Implies ``vtab``.)\n  * ``i128_blob`` allows storing values of type ```i128``` type in SQLite databases. Internally, the data is stored as a 16 byte big-endian blob, with the most significant bit flipped, which allows ordering and comparison between different blobs storing i128s to work as expected.\n  * ``uuid`` allows storing and retrieving ``Uuid`` values from the [``uuid``](https://docs.rs/uuid/) crate using blobs.\n  * [``session``](https://sqlite.org/sessionintro.html), Session module extension. Requires ``buildtime_bindgen`` feature. (Implies ``hooks``.)\n  * ``extra_check`` fails when a query passed to ``execute`` is readonly and has a column count > 0.\n  * ``column_decltype`` provides ```columns``(``)``` method for Statements and Rows; omit if linking to a version of SQLite/SQLCipher compiled with ```-``DSQLITE_OMIT_DECLTYPE```.\n  * ``collation`` exposes [``sqlite3_create_collation_v2``](https://sqlite.org/c3ref/create_collation.html).\n  * ``serialize`` exposes [``sqlite3_serialize``](http://sqlite.org/c3ref/serialize.html) (3.23.0).\n  * ``rusqlite-macros`` enables the use of the [``prepare_and_bind``](https://docs.rs/rusqlite/~0/rusqlite/macro.prepare_and_bind.html) and [``prepare_cached_and_bind``](https://docs.rs/rusqlite/~0/rusqlite/macro.prepare_cached_and_bind.html) procedural macros, which allow capturing identifiers in SQL statements.\n\n\n## Notes on building rusqlite and libsqlite3-sys\n``libsqlite3-sys`` is a separate crate from ``rusqlite`` that provides the Rust declarations for SQLite's C API. By default, ``libsqlite3-sys`` attempts to find a SQLite library that already exists on your system using pkg-config, or a [Vcpkg](https://github.com/Microsoft/vcpkg) installation for MSVC ABI builds.\nYou can adjust this behavior in a number of ways:\n  * If you use the ``bundled``, ``bundled-sqlcipher``, or ``bundled-sqlcipher-vendored-openssl`` features, ``libsqlite3-sys`` will use the [cc](https://lib.rs/crates/cc) crate to compile SQLite or SQLCipher from source and link against that. This source is embedded in the ``libsqlite3-sys`` crate and is currently SQLite 3.49.2 (as of ``rusqlite`` 0.36.0 / ``libsqlite3-sys`` 0.34.0). This is probably the simplest solution to any build problems. You can enable this by adding the following in your ``Cargo.toml`` file:\n```\n```[``dependencies.rusqlite``]`\n`version ``=` ``\"`0.36.0`\"``\n`features ``=` ``[```\"`bundled`\"```]``\n``\n```\n\n  * When using any of the ``bundled`` features, the build script will honor ``SQLITE_MAX_VARIABLE_NUMBER`` and ``SQLITE_MAX_EXPR_DEPTH`` variables. It will also honor a ```LIBSQLITE3_FLAGS``` variable, which can have a format like ````\"`-USQLITE_ALPHA -DSQLITE_BETA SQLITE_GAMMA ...`\"````. That would disable the ``SQLITE_ALPHA`` flag, and set the ``SQLITE_BETA`` and ``SQLITE_GAMMA`` flags. (The initial ```-`D`` can be omitted, as on the last one.)\n  * When using ``bundled-sqlcipher`` (and not also using ``bundled-sqlcipher-vendored-openssl``), ``libsqlite3-sys`` will need to link against crypto libraries on the system. If the build script can find a ``libcrypto`` from OpenSSL or LibreSSL (it will consult ``OPENSSL_LIB_DIR``/``OPENSSL_INCLUDE_DIR`` and ``OPENSSL_DIR`` environment variables), it will use that. If building on and for Macs, and none of those variables are set, it will use the system's SecurityFramework instead.\n  * When linking against a SQLite (or SQLCipher) library already on the system (so _not_ using any of the ``bundled`` features), you can set the ```SQLITE3_LIB_DIR``` (or ``SQLCIPHER_LIB_DIR``) environment variable to point to a directory containing the library. You can also set the ```SQLITE3_INCLUDE_DIR``` (or ``SQLCIPHER_INCLUDE_DIR``) variable to point to the directory containing ``sqlite3.h``.\n  * Installing the sqlite3 development packages will usually be all that is required, but the build helpers for [pkg-config](https://github.com/alexcrichton/pkg-config-rs) and [vcpkg](https://github.com/mcgoo/vcpkg-rs) have some additional configuration options. The default when using vcpkg is to dynamically link, which must be enabled by setting ``VCPKGRS_DYNAMIC=`1``` environment variable before build. ``vcpkg install sqlite3:x64-windows`` will install the required library.\n  * When linking against a SQLite (or SQLCipher) library already on the system, you can set the ```SQLITE3_STATIC``` (or ``SQLCIPHER_STATIC``) environment variable to 1 to request that the library be statically instead of dynamically linked.\n\n\n### Binding generation\nWe use [bindgen](https://lib.rs/crates/bindgen) to generate the Rust declarations from SQLite's C header file. ``bindgen`` [recommends](https://github.com/servo/rust-bindgen#library-usage-with-buildrs) running this as part of the build process of libraries that used this. We tried this briefly (``rusqlite`` 0.10.0, specifically), but it had some annoyances:\n  * The build time for ``libsqlite3-sys`` (and therefore ``rusqlite``) increased dramatically.\n  * Running ``bindgen`` requires a relatively-recent version of Clang, which many systems do not have installed by default.\n  * Running ``bindgen`` also requires the SQLite header file to be present.\n\n\nAs of ``rusqlite`` 0.10.1, we avoid running ``bindgen`` at build-time by shipping pregenerated bindings for several versions of SQLite. When compiling ``rusqlite``, we use your selected Cargo features to pick the bindings for the minimum SQLite version that supports your chosen features. If you are using ``libsqlite3-sys`` directly, you can use the same features to choose which pregenerated bindings are chosen:\n  * ``min_sqlite_version_3_14_0`` - SQLite 3.14.0 bindings (this is the default)\n\n\nIf you use any of the ``bundled`` features, you will get pregenerated bindings for the bundled version of SQLite/SQLCipher. If you need other specific pregenerated binding versions, please file an issue. If you want to run ``bindgen`` at buildtime to produce your own bindings, use the ``buildtime_bindgen`` Cargo feature.\nIf you enable the ``modern_sqlite`` feature, we'll use the bindings we would have included with the bundled build. You generally should have ``buildtime_bindgen`` enabled if you turn this on, as otherwise you'll need to keep the version of SQLite you link with in sync with what rusqlite would have bundled, (usually the most recent release of SQLite). Failing to do this will cause a runtime error.\n## Contributing\nRusqlite has many features, and many of them impact the build configuration in incompatible ways. This is unfortunate, and makes testing changes hard.\nTo help here: you generally should ensure that you run tests/lint for ``--features bundled``, and ``--features ``\"`bundled-full session buildtime_bindgen`\"````.\nIf running bindgen is problematic for you, ``--features bundled-full`` enables bundled and all features which don't require binding generation, and can be used instead.\n### Checklist\n  * Run ````cargo``` fmt``` to ensure your Rust code is correctly formatted.\n  * Ensure ````cargo``` clippy`` --`workspace``` --`features` bundled``` passes without warnings.\n  * Ensure ````cargo``` clippy`` --`workspace``` --`features` ``\"`bundled-full session buildtime_bindgen`\"````` passes without warnings.\n  * Ensure ````cargo``` test`` --`workspace``` --`features` bundled``` reports no failures.\n  * Ensure ````cargo``` test`` --`workspace``` --`features` ``\"`bundled-full session buildtime_bindgen`\"````` reports no failures.\n\n\n## Author\nRusqlite is the product of hard work by a number of people. A list is available here: <https://github.com/rusqlite/rusqlite/graphs/contributors>\n## Community\nFeel free to join the [Rusqlite Discord Server](https://discord.gg/nFYfGPB8g4) to discuss or get help with ``rusqlite`` or ``libsqlite3-sys``.\n## License\nRusqlite and libsqlite3-sys are available under the MIT license. See the LICENSE file for more info.\n### Licenses of Bundled Software\nDepending on the set of enabled cargo ``features``, rusqlite and libsqlite3-sys will also bundle other libraries, which have their own licensing terms:\n  * If ``--features=bundled-sqlcipher`` is enabled, the vendored source of [SQLcipher](https://github.com/sqlcipher/sqlcipher) will be compiled and statically linked in. SQLcipher is distributed under a BSD-style license, as described [here](https://github.com/rusqlite/rusqlite/blob/8ae94074a77a3d7021470df00ff4f8cfbf614767/libsqlite3-sys/sqlcipher/LICENSE).\n  * If ``--features=bundled`` is enabled, the vendored source of SQLite will be compiled and linked in. SQLite is in the public domain, as described [here](https://www.sqlite.org/copyright.html).\n\n\nBoth of these are quite permissive, have no bearing on the license of the code in ``rusqlite`` or ``libsqlite3-sys`` themselves, and can be entirely ignored if you do not use the feature in question.\n## Minimum supported Rust version (MSRV)\nLatest stable Rust version at the time of release. It might compile with older versions.\n#### Dependencies\n~0.8\u20135.5MB  ~79K SLoC\n  * [bitflags](https://lib.rs/crates/bitflags \"new\") 2.6\n  * [fallible-iterator](https://lib.rs/crates/fallible-iterator \"new\") 0.3\n  * [fallible-streaming-iterator](https://lib.rs/crates/fallible-streaming-iterator \"0.1\")\n  * [hashlink](https://lib.rs/crates/hashlink \"new\") 0.10\n  * [libsqlite3-sys](https://lib.rs/crates/libsqlite3-sys \"new\") 0.34\n  * [smallvec](https://lib.rs/crates/smallvec \"1.6.1\")\n  * [modern-full?](https://lib.rs/crates/rusqlite/features#feature-modern-full \"optional feature\") [chrono](https://lib.rs/crates/chrono \"0.4.38\")[+clock](https://lib.rs/crates/chrono/features#feature-clock)\n  * [modern-full?](https://lib.rs/crates/rusqlite/features#feature-modern-full \"optional feature\") [jiff](https://lib.rs/crates/jiff \"0.2\")[+std](https://lib.rs/crates/jiff/features#feature-std)\n  * [modern-full?](https://lib.rs/crates/rusqlite/features#feature-modern-full \"optional feature\") [serde_json](https://lib.rs/crates/serde_json \"1.0\")\n  * [modern-full?](https://lib.rs/crates/rusqlite/features#feature-modern-full \"optional feature\") [time](https://lib.rs/crates/time \"0.3.36\")[+formatting](https://lib.rs/crates/time/features#feature-formatting)[+macros](https://lib.rs/crates/time/features#feature-macros)[+parsing](https://lib.rs/crates/time/features#feature-parsing)\n  * [modern-full?](https://lib.rs/crates/rusqlite/features#feature-modern-full \"optional feature\") [url](https://lib.rs/crates/url \"2.1\")\n  * [modern-full?](https://lib.rs/crates/rusqlite/features#feature-modern-full \"optional feature\") [uuid](https://lib.rs/crates/uuid \"1.0\")\n  * [csvtab?](https://lib.rs/crates/rusqlite/features#feature-csvtab \"optional feature\") [csv](https://lib.rs/crates/csv \"1.1\")\n  * [ optional ](https://lib.rs/crates/rusqlite/features#feature-rusqlite-macros \"rusqlite-macros is optional feature\") [rusqlite-macros](https://lib.rs/crates/rusqlite-macros \"0.4.1\")\n\n\n  * dev  [bencher](https://lib.rs/crates/bencher \"0.1\")\n  * dev  [doc-comment](https://lib.rs/crates/doc-comment \"0.3\")\n  * dev  [regex](https://lib.rs/crates/regex \"1.5.5\")\n  * dev  [self_cell](https://lib.rs/crates/self_cell \"1.1.0\")\n  * dev  [tempfile](https://lib.rs/crates/tempfile \"3.1.0\")\n  * dev  [unicase](https://lib.rs/crates/unicase \"2.6.0\")\n\n\n#### [Other features](https://lib.rs/crates/rusqlite/features)\n  * [array](https://lib.rs/crates/rusqlite/features#feature-array)\n  * [backup](https://lib.rs/crates/rusqlite/features#feature-backup)\n  * [blob](https://lib.rs/crates/rusqlite/features#feature-blob)\n  * [buildtime_bindgen](https://lib.rs/crates/rusqlite/features#feature-buildtime_bindgen)\n  * [bundled](https://lib.rs/crates/rusqlite/features#feature-bundled)\n  * [bundled-full](https://lib.rs/crates/rusqlite/features#feature-bundled-full)\n  * [bundled-sqlcipher](https://lib.rs/crates/rusqlite/features#feature-bundled-sqlcipher)\n  * [bundled-sqlcipher-vendored-openssl](https://lib.rs/crates/rusqlite/features#feature-bundled-sqlcipher-vendored-openssl)\n  * [bundled-windows](https://lib.rs/crates/rusqlite/features#feature-bundled-windows)\n  * [collation](https://lib.rs/crates/rusqlite/features#feature-collation)\n  * [column_decltype](https://lib.rs/crates/rusqlite/features#feature-column_decltype)\n  * [column_metadata](https://lib.rs/crates/rusqlite/features#feature-column_metadata)\n  * [extra_check](https://lib.rs/crates/rusqlite/features#feature-extra_check)\n  * [functions](https://lib.rs/crates/rusqlite/features#feature-functions)\n  * [hooks](https://lib.rs/crates/rusqlite/features#feature-hooks)\n  * [i128_blob](https://lib.rs/crates/rusqlite/features#feature-i128_blob)\n  * [in_gecko](https://lib.rs/crates/rusqlite/features#feature-in_gecko)\n  * [limits](https://lib.rs/crates/rusqlite/features#feature-limits)\n  * [load_extension](https://lib.rs/crates/rusqlite/features#feature-load_extension)\n  * [loadable_extension](https://lib.rs/crates/rusqlite/features#feature-loadable_extension)\n  * [and more](https://lib.rs/crates/rusqlite/features)\u2026\n\n\n  *[SLoC]: approx. additional lines of code\n",
              "markdown_with_citations": "###  68 releases\u27e81\u27e9 (36 breaking)\n0.36.0 |  May 26, 2025   \n---|---  \n0.34.0 |  Mar 5, 2025   \n0.32.1 |  Jul 26, 2024   \n0.31.0 |  Feb 17, 2024   \n0.0.1 |  Nov 21, 2014   \n#**1** in Database interfaces\u27e82\u27e9\nDownload history 388327/week @ 2025-03-10 342958/week @ 2025-03-17 335887/week @ 2025-03-24 333880/week @ 2025-03-31 314848/week @ 2025-04-07 291291/week @ 2025-04-14 319622/week @ 2025-04-21 318824/week @ 2025-04-28 311278/week @ 2025-05-05 291677/week @ 2025-05-12 279945/week @ 2025-05-19 254505/week @ 2025-05-26 264862/week @ 2025-06-02 262368/week @ 2025-06-09 262212/week @ 2025-06-16 255076/week @ 2025-06-23\n**1,058,457** downloads per month Used in **1,615** crates (1,069 directly)\u27e83\u27e9\n**MIT** license \n**20MB** **396K** SLoC\nC 356K SLoC // 0.3% comments  Rust 40K SLoC // 0.0% comments  Shell 63 SLoC // 0.2% comments \n# Rusqlite\n![Latest Version\u27e84\u27e9](https://crates.io/crates/rusqlite) ![Documentation\u27e85\u27e9](https://docs.rs/rusqlite) ![Build Status \\(GitHub\\)\u27e86\u27e9](https://github.com/rusqlite/rusqlite/actions) ![Build Status \\(AppVeyor\\)\u27e87\u27e9](https://ci.appveyor.com/project/rusqlite/rusqlite) ![Code Coverage\u27e88\u27e9](https://codecov.io/gh/rusqlite/rusqlite) ![Dependency Status\u27e89\u27e9](https://deps.rs/repo/github/rusqlite/rusqlite) ![Discord Chat\u27e810\u27e9](https://discord.gg/nFYfGPB8g4)\nRusqlite is an ergonomic wrapper for using SQLite from Rust.\nHistorically, the API was based on the one from ``rust-postgres``\u27e811\u27e9. However, the two have diverged in many ways, and no compatibility between the two is intended.\n## Usage\nIn your Cargo.toml:\n```\n```[``dependencies``]`\n``# `bundled` causes us to automatically compile and link in an up to date``\n``# version of SQLite for you. This avoids many common build issues, and``\n``# avoids depending on the version of SQLite on the users system (or your``\n``# system), which may be old or missing. It's the right choice for most``\n``# programs that control their own SQLite databases.``\n``#``\n``# That said, it's not ideal for all scenarios and in particular, generic``\n``# libraries built around `rusqlite` should probably not enable it, which``\n``# is why it is not a default feature -- it could become hard to disable.``\n`rusqlite = { version = \"0.36.0\", features ``=` ``[```\"`bundled`\"```]`` }\n``\n```\n\nSimple example usage:\n```\n``use` `rusqlite`::````{`Connection`,` `Result````}```;`\n``#``[``derive```(```Debug```)```]``\n``struct` ```Person` ````{`\n  `id``:` `i32`,\n  `name``:` String,\n  `data``:` ``Option``<``Vec``<``u8``>``>``,\n```}```\n``fn` `main`````(````)```` ``->` ``Result``<``(``)``>``` ````{`\n  `let` conn `=` `Connection`::``open_in_memory`(``)``?``;`\n  conn`.``execute``(`\n    ``\"`CREATE TABLE person (\n      id  INTEGER PRIMARY KEY,\n      name TEXT NOT NULL,\n      data BLOB\n    )`\"```,`\n    `(``)``,` ``//` empty list of parameters.`\n  `)``?``;`\n  `let` me `=` Person `{`\n    id`:` `0``,`\n    name`:` ``\"`Steven`\"```.``to_string``(``)``,`\n    data`:` `None``,`\n  `}``;`\n  conn`.``execute``(`\n    ``\"`INSERT INTO person (name, data) VALUES (?1, ?2)`\"```,`\n    `(``&`me`.`name`,` `&`me`.`data`)``,`\n  `)``?``;`\n  `let` `mut` stmt `=` conn`.``prepare``(```\"`SELECT id, name, data FROM person`\"```)``?``;`\n  `let` person_iter `=` stmt`.``query_map``(``[``]``,` ```|``````row``|`` ```{`\n    `Ok``(`Person `{`\n      id`:` row`.``get``(``0``)``?``,`\n      name`:` row`.``get``(``1``)``?``,`\n      data`:` row`.``get``(``2``)``?``,`\n    `}``)`\n  `}```)``?``;`\n  `for` person `in` person_iter `{`\n    `println!``(```\"`Found person `{:?}``\"```,` person`.``unwrap``(``)``)``;`\n  `}`\n  `Ok``(``(``)``)`\n```}```\n`\n```\n\n### Supported SQLite Versions\nThe base ``rusqlite`` package supports SQLite version 3.14.0 or newer. If you need support for older versions, please file an issue. Some cargo features require a newer SQLite version; see details below.\n### Optional Features\nRusqlite provides several features that are behind Cargo features\u27e812\u27e9. They are:\n  * ``load_extension``\u27e813\u27e9 allows loading dynamic library-based SQLite extensions.\n  * ``loadable_extension`` to program loadable extension\u27e814\u27e9 in Rust.\n  * ``backup``\u27e815\u27e9 allows use of SQLite's online backup API.\n  * ``functions``\u27e816\u27e9 allows you to load Rust closures into SQLite connections for use in queries.\n  * ``window`` for window function\u27e817\u27e9 support (```fun``(``...``)` `OVER` `...```). (Implies ``functions``.)\n  * ``trace``\u27e818\u27e9 allows hooks into SQLite's tracing and profiling APIs.\n  * ``blob``\u27e819\u27e9 gives ```std`::```io`::````{`Read`,` Write`,` Seek```}```` access to SQL BLOBs.\n  * ``limits``\u27e820\u27e9 allows you to set and retrieve SQLite's per connection limits.\n  * ``serde_json`` implements ``FromSql``\u27e821\u27e9 and ``ToSql``\u27e822\u27e9 for the ``Value`` type from the ``serde_json`` crate\u27e823\u27e9.\n  * ``chrono`` implements ``FromSql``\u27e821\u27e9 and ``ToSql``\u27e822\u27e9 for various types from the ``chrono`` crate\u27e824\u27e9.\n  * ``time`` implements ``FromSql``\u27e821\u27e9 and ``ToSql``\u27e822\u27e9 for various types from the ``time`` crate\u27e825\u27e9.\n  * ``jiff`` implements ``FromSql``\u27e821\u27e9 and ``ToSql``\u27e822\u27e9 for the ``Value`` type from the ``jiff`` crate\u27e826\u27e9.\n  * ``url`` implements ``FromSql``\u27e821\u27e9 and ``ToSql``\u27e822\u27e9 for the ``Url`` type from the ``url`` crate\u27e827\u27e9.\n  * ``bundled`` uses a bundled version of SQLite. This is a good option for cases where linking to SQLite is complicated, such as Windows.\n  * ``sqlcipher`` looks for the SQLCipher library to link against instead of SQLite. This feature overrides ``bundled``.\n  * ``bundled-sqlcipher`` uses a bundled version of SQLCipher. This searches for and links against a system-installed crypto library to provide the crypto implementation.\n  * ``bundled-sqlcipher-vendored-openssl`` allows using bundled-sqlcipher with a vendored version of OpenSSL (via the ``openssl-sys`` crate) as the crypto provider. \n    * As the name implies this depends on the ``bundled-sqlcipher`` feature, and automatically turns it on.\n    * If turned on, this uses the ``openssl-sys``\u27e828\u27e9 crate, with the ``vendored`` feature enabled in order to build and bundle the OpenSSL crypto library.\n  * ``hooks`` for Commit, Rollback\u27e829\u27e9 and Data Change\u27e830\u27e9 notification callbacks.\n  * ``preupdate_hook`` for preupdate\u27e831\u27e9 notification callbacks. (Implies ``hooks``.)\n  * ``unlock_notify`` for Unlock\u27e832\u27e9 notification.\n  * ``vtab`` for virtual table\u27e833\u27e9 support (allows you to write virtual table implementations in Rust). Currently, only read-only virtual tables are supported.\n  * ``series`` exposes ```generate_series``(``...``)```\u27e834\u27e9 Table-Valued Function. (Implies ``vtab``.)\n  * ``csvtab``\u27e835\u27e9, CSV virtual table written in Rust. (Implies ``vtab``.)\n  * ``array``\u27e836\u27e9, The ```rarray``(``)``` Table-Valued Function. (Implies ``vtab``.)\n  * ``i128_blob`` allows storing values of type ```i128``` type in SQLite databases. Internally, the data is stored as a 16 byte big-endian blob, with the most significant bit flipped, which allows ordering and comparison between different blobs storing i128s to work as expected.\n  * ``uuid`` allows storing and retrieving ``Uuid`` values from the ``uuid``\u27e837\u27e9 crate using blobs.\n  * ``session``\u27e838\u27e9, Session module extension. Requires ``buildtime_bindgen`` feature. (Implies ``hooks``.)\n  * ``extra_check`` fails when a query passed to ``execute`` is readonly and has a column count > 0.\n  * ``column_decltype`` provides ```columns``(``)``` method for Statements and Rows; omit if linking to a version of SQLite/SQLCipher compiled with ```-``DSQLITE_OMIT_DECLTYPE```.\n  * ``collation`` exposes ``sqlite3_create_collation_v2``\u27e839\u27e9.\n  * ``serialize`` exposes ``sqlite3_serialize``\u27e840\u27e9 (3.23.0).\n  * ``rusqlite-macros`` enables the use of the ``prepare_and_bind``\u27e841\u27e9 and ``prepare_cached_and_bind``\u27e842\u27e9 procedural macros, which allow capturing identifiers in SQL statements.\n\n\n## Notes on building rusqlite and libsqlite3-sys\n``libsqlite3-sys`` is a separate crate from ``rusqlite`` that provides the Rust declarations for SQLite's C API. By default, ``libsqlite3-sys`` attempts to find a SQLite library that already exists on your system using pkg-config, or a Vcpkg\u27e843\u27e9 installation for MSVC ABI builds.\nYou can adjust this behavior in a number of ways:\n  * If you use the ``bundled``, ``bundled-sqlcipher``, or ``bundled-sqlcipher-vendored-openssl`` features, ``libsqlite3-sys`` will use the cc\u27e844\u27e9 crate to compile SQLite or SQLCipher from source and link against that. This source is embedded in the ``libsqlite3-sys`` crate and is currently SQLite 3.49.2 (as of ``rusqlite`` 0.36.0 / ``libsqlite3-sys`` 0.34.0). This is probably the simplest solution to any build problems. You can enable this by adding the following in your ``Cargo.toml`` file:\n```\n```[``dependencies.rusqlite``]`\n`version ``=` ``\"`0.36.0`\"``\n`features ``=` ``[```\"`bundled`\"```]``\n``\n```\n\n  * When using any of the ``bundled`` features, the build script will honor ``SQLITE_MAX_VARIABLE_NUMBER`` and ``SQLITE_MAX_EXPR_DEPTH`` variables. It will also honor a ```LIBSQLITE3_FLAGS``` variable, which can have a format like ````\"`-USQLITE_ALPHA -DSQLITE_BETA SQLITE_GAMMA ...`\"````. That would disable the ``SQLITE_ALPHA`` flag, and set the ``SQLITE_BETA`` and ``SQLITE_GAMMA`` flags. (The initial ```-`D`` can be omitted, as on the last one.)\n  * When using ``bundled-sqlcipher`` (and not also using ``bundled-sqlcipher-vendored-openssl``), ``libsqlite3-sys`` will need to link against crypto libraries on the system. If the build script can find a ``libcrypto`` from OpenSSL or LibreSSL (it will consult ``OPENSSL_LIB_DIR``/``OPENSSL_INCLUDE_DIR`` and ``OPENSSL_DIR`` environment variables), it will use that. If building on and for Macs, and none of those variables are set, it will use the system's SecurityFramework instead.\n  * When linking against a SQLite (or SQLCipher) library already on the system (so _not_ using any of the ``bundled`` features), you can set the ```SQLITE3_LIB_DIR``` (or ``SQLCIPHER_LIB_DIR``) environment variable to point to a directory containing the library. You can also set the ```SQLITE3_INCLUDE_DIR``` (or ``SQLCIPHER_INCLUDE_DIR``) variable to point to the directory containing ``sqlite3.h``.\n  * Installing the sqlite3 development packages will usually be all that is required, but the build helpers for pkg-config\u27e845\u27e9 and vcpkg\u27e846\u27e9 have some additional configuration options. The default when using vcpkg is to dynamically link, which must be enabled by setting ``VCPKGRS_DYNAMIC=`1``` environment variable before build. ``vcpkg install sqlite3:x64-windows`` will install the required library.\n  * When linking against a SQLite (or SQLCipher) library already on the system, you can set the ```SQLITE3_STATIC``` (or ``SQLCIPHER_STATIC``) environment variable to 1 to request that the library be statically instead of dynamically linked.\n\n\n### Binding generation\nWe use bindgen\u27e847\u27e9 to generate the Rust declarations from SQLite's C header file. ``bindgen`` recommends\u27e848\u27e9 running this as part of the build process of libraries that used this. We tried this briefly (``rusqlite`` 0.10.0, specifically), but it had some annoyances:\n  * The build time for ``libsqlite3-sys`` (and therefore ``rusqlite``) increased dramatically.\n  * Running ``bindgen`` requires a relatively-recent version of Clang, which many systems do not have installed by default.\n  * Running ``bindgen`` also requires the SQLite header file to be present.\n\n\nAs of ``rusqlite`` 0.10.1, we avoid running ``bindgen`` at build-time by shipping pregenerated bindings for several versions of SQLite. When compiling ``rusqlite``, we use your selected Cargo features to pick the bindings for the minimum SQLite version that supports your chosen features. If you are using ``libsqlite3-sys`` directly, you can use the same features to choose which pregenerated bindings are chosen:\n  * ``min_sqlite_version_3_14_0`` - SQLite 3.14.0 bindings (this is the default)\n\n\nIf you use any of the ``bundled`` features, you will get pregenerated bindings for the bundled version of SQLite/SQLCipher. If you need other specific pregenerated binding versions, please file an issue. If you want to run ``bindgen`` at buildtime to produce your own bindings, use the ``buildtime_bindgen`` Cargo feature.\nIf you enable the ``modern_sqlite`` feature, we'll use the bindings we would have included with the bundled build. You generally should have ``buildtime_bindgen`` enabled if you turn this on, as otherwise you'll need to keep the version of SQLite you link with in sync with what rusqlite would have bundled, (usually the most recent release of SQLite). Failing to do this will cause a runtime error.\n## Contributing\nRusqlite has many features, and many of them impact the build configuration in incompatible ways. This is unfortunate, and makes testing changes hard.\nTo help here: you generally should ensure that you run tests/lint for ``--features bundled``, and ``--features ``\"`bundled-full session buildtime_bindgen`\"````.\nIf running bindgen is problematic for you, ``--features bundled-full`` enables bundled and all features which don't require binding generation, and can be used instead.\n### Checklist\n  * Run ````cargo``` fmt``` to ensure your Rust code is correctly formatted.\n  * Ensure ````cargo``` clippy`` --`workspace``` --`features` bundled``` passes without warnings.\n  * Ensure ````cargo``` clippy`` --`workspace``` --`features` ``\"`bundled-full session buildtime_bindgen`\"````` passes without warnings.\n  * Ensure ````cargo``` test`` --`workspace``` --`features` bundled``` reports no failures.\n  * Ensure ````cargo``` test`` --`workspace``` --`features` ``\"`bundled-full session buildtime_bindgen`\"````` reports no failures.\n\n\n## Author\nRusqlite is the product of hard work by a number of people. A list is available here: <https://github.com/rusqlite/rusqlite/graphs/contributors>\n## Community\nFeel free to join the Rusqlite Discord Server\u27e849\u27e9 to discuss or get help with ``rusqlite`` or ``libsqlite3-sys``.\n## License\nRusqlite and libsqlite3-sys are available under the MIT license. See the LICENSE file for more info.\n### Licenses of Bundled Software\nDepending on the set of enabled cargo ``features``, rusqlite and libsqlite3-sys will also bundle other libraries, which have their own licensing terms:\n  * If ``--features=bundled-sqlcipher`` is enabled, the vendored source of SQLcipher\u27e850\u27e9 will be compiled and statically linked in. SQLcipher is distributed under a BSD-style license, as described here\u27e851\u27e9.\n  * If ``--features=bundled`` is enabled, the vendored source of SQLite will be compiled and linked in. SQLite is in the public domain, as described here\u27e852\u27e9.\n\n\nBoth of these are quite permissive, have no bearing on the license of the code in ``rusqlite`` or ``libsqlite3-sys`` themselves, and can be entirely ignored if you do not use the feature in question.\n## Minimum supported Rust version (MSRV)\nLatest stable Rust version at the time of release. It might compile with older versions.\n#### Dependencies\n~0.8\u20135.5MB  ~79K SLoC\n  * bitflags\u27e853\u27e9 2.6\n  * fallible-iterator\u27e854\u27e9 0.3\n  * fallible-streaming-iterator\u27e855\u27e9\n  * hashlink\u27e856\u27e9 0.10\n  * libsqlite3-sys\u27e857\u27e9 0.34\n  * smallvec\u27e858\u27e9\n  * modern-full?\u27e859\u27e9 chrono\u27e824\u27e9+clock\u27e860\u27e9\n  * modern-full?\u27e859\u27e9 jiff\u27e826\u27e9+std\u27e861\u27e9\n  * modern-full?\u27e859\u27e9 serde_json\u27e823\u27e9\n  * modern-full?\u27e859\u27e9 time\u27e825\u27e9+formatting\u27e862\u27e9+macros\u27e863\u27e9+parsing\u27e864\u27e9\n  * modern-full?\u27e859\u27e9 url\u27e827\u27e9\n  * modern-full?\u27e859\u27e9 uuid\u27e865\u27e9\n  * csvtab?\u27e866\u27e9 csv\u27e867\u27e9\n  *  optional \u27e868\u27e9 rusqlite-macros\u27e869\u27e9\n\n\n  * dev  bencher\u27e870\u27e9\n  * dev  doc-comment\u27e871\u27e9\n  * dev  regex\u27e872\u27e9\n  * dev  self_cell\u27e873\u27e9\n  * dev  tempfile\u27e874\u27e9\n  * dev  unicase\u27e875\u27e9\n\n\n#### Other features\u27e876\u27e9\n  * array\u27e877\u27e9\n  * backup\u27e878\u27e9\n  * blob\u27e879\u27e9\n  * buildtime_bindgen\u27e880\u27e9\n  * bundled\u27e881\u27e9\n  * bundled-full\u27e882\u27e9\n  * bundled-sqlcipher\u27e883\u27e9\n  * bundled-sqlcipher-vendored-openssl\u27e884\u27e9\n  * bundled-windows\u27e885\u27e9\n  * collation\u27e886\u27e9\n  * column_decltype\u27e887\u27e9\n  * column_metadata\u27e888\u27e9\n  * extra_check\u27e889\u27e9\n  * functions\u27e890\u27e9\n  * hooks\u27e891\u27e9\n  * i128_blob\u27e892\u27e9\n  * in_gecko\u27e893\u27e9\n  * limits\u27e894\u27e9\n  * load_extension\u27e895\u27e9\n  * loadable_extension\u27e896\u27e9\n  * and more\u27e876\u27e9\u2026\n\n\n  *[SLoC]: approx. additional lines of code\n",
              "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://lib.rs/crates/rusqlite/versions: 68 releases\n\u27e82\u27e9 https://lib.rs/database: Crates to interface with database management systems. - Database interfaces\n\u27e83\u27e9 https://lib.rs/crates/rusqlite/rev: **1,615** crates (1,069 directly)\n\u27e84\u27e9 https://img.shields.io/crates/v/rusqlite.svg: ![Latest Version\n\u27e85\u27e9 https://img.gs/czjpqfbdkz/full/https://docs.rs/rusqlite/badge.svg: ![Documentation\n\u27e86\u27e9 https://img.gs/czjpqfbdkz/full/https://github.com/rusqlite/rusqlite/workflows/CI/badge.svg: ![Build Status \\(GitHub\\)\n\u27e87\u27e9 https://img.gs/czjpqfbdkz/full/https://ci.appveyor.com/api/projects/status/github/rusqlite/rusqlite?branch=master&svg=true: ![Build Status \\(AppVeyor\\)\n\u27e88\u27e9 https://img.gs/czjpqfbdkz/full/https://codecov.io/gh/rusqlite/rusqlite/branch/master/graph/badge.svg: ![Code Coverage\n\u27e89\u27e9 https://img.gs/czjpqfbdkz/full/https://deps.rs/repo/github/rusqlite/rusqlite/status.svg: ![Dependency Status\n\u27e810\u27e9 https://img.shields.io/discord/927966344266256434.svg?logo=discord: ![Discord Chat\n\u27e811\u27e9 https://github.com/sfackler/rust-postgres: ``rust-postgres``\n\u27e812\u27e9 https://doc.rust-lang.org/cargo/reference/manifest.html#the-features-section: Cargo features\n\u27e813\u27e9 https://docs.rs/rusqlite/~0/rusqlite/struct.LoadExtensionGuard.html: ``load_extension``\n\u27e814\u27e9 https://sqlite.org/loadext.html: loadable extension\n\u27e815\u27e9 https://docs.rs/rusqlite/~0/rusqlite/backup/index.html: ``backup``\n\u27e816\u27e9 https://docs.rs/rusqlite/~0/rusqlite/functions/index.html: ``functions``\n\u27e817\u27e9 https://www.sqlite.org/windowfunctions.html: window function\n\u27e818\u27e9 https://docs.rs/rusqlite/~0/rusqlite/trace/index.html: ``trace``\n\u27e819\u27e9 https://docs.rs/rusqlite/~0/rusqlite/blob/index.html: ``blob``\n\u27e820\u27e9 https://docs.rs/rusqlite/~0/rusqlite/struct.Connection.html#method.limit: ``limits``\n\u27e821\u27e9 https://docs.rs/rusqlite/~0/rusqlite/types/trait.FromSql.html: ``FromSql``\n\u27e822\u27e9 https://docs.rs/rusqlite/~0/rusqlite/types/trait.ToSql.html: ``ToSql``\n\u27e823\u27e9 https://lib.rs/crates/serde_json: ``serde_json`` crate\n\u27e824\u27e9 https://lib.rs/crates/chrono: ``chrono`` crate\n\u27e825\u27e9 https://lib.rs/crates/time: ``time`` crate\n\u27e826\u27e9 https://lib.rs/crates/jiff: ``jiff`` crate\n\u27e827\u27e9 https://lib.rs/crates/url: ``url`` crate\n\u27e828\u27e9 https://lib.rs/crates/openssl-sys: ``openssl-sys``\n\u27e829\u27e9 http://sqlite.org/c3ref/commit_hook.html: Commit, Rollback\n\u27e830\u27e9 http://sqlite.org/c3ref/update_hook.html: Data Change\n\u27e831\u27e9 https://sqlite.org/c3ref/preupdate_count.html: preupdate\n\u27e832\u27e9 https://sqlite.org/unlock_notify.html: Unlock\n\u27e833\u27e9 https://sqlite.org/vtab.html: virtual table\n\u27e834\u27e9 https://www.sqlite.org/series.html: ```generate_series``(``...``)```\n\u27e835\u27e9 https://sqlite.org/csv.html: ``csvtab``\n\u27e836\u27e9 https://sqlite.org/carray.html: ``array``\n\u27e837\u27e9 https://docs.rs/uuid/: ``uuid``\n\u27e838\u27e9 https://sqlite.org/sessionintro.html: ``session``\n\u27e839\u27e9 https://sqlite.org/c3ref/create_collation.html: ``sqlite3_create_collation_v2``\n\u27e840\u27e9 http://sqlite.org/c3ref/serialize.html: ``sqlite3_serialize``\n\u27e841\u27e9 https://docs.rs/rusqlite/~0/rusqlite/macro.prepare_and_bind.html: ``prepare_and_bind``\n\u27e842\u27e9 https://docs.rs/rusqlite/~0/rusqlite/macro.prepare_cached_and_bind.html: ``prepare_cached_and_bind``\n\u27e843\u27e9 https://github.com/Microsoft/vcpkg: Vcpkg\n\u27e844\u27e9 https://lib.rs/crates/cc: cc\n\u27e845\u27e9 https://github.com/alexcrichton/pkg-config-rs: pkg-config\n\u27e846\u27e9 https://github.com/mcgoo/vcpkg-rs: vcpkg\n\u27e847\u27e9 https://lib.rs/crates/bindgen: bindgen\n\u27e848\u27e9 https://github.com/servo/rust-bindgen#library-usage-with-buildrs: recommends\n\u27e849\u27e9 https://discord.gg/nFYfGPB8g4: Rusqlite Discord Server\n\u27e850\u27e9 https://github.com/sqlcipher/sqlcipher: SQLcipher\n\u27e851\u27e9 https://github.com/rusqlite/rusqlite/blob/8ae94074a77a3d7021470df00ff4f8cfbf614767/libsqlite3-sys/sqlcipher/LICENSE: here\n\u27e852\u27e9 https://www.sqlite.org/copyright.html: here\n\u27e853\u27e9 https://lib.rs/crates/bitflags: new - bitflags\n\u27e854\u27e9 https://lib.rs/crates/fallible-iterator: new - fallible-iterator\n\u27e855\u27e9 https://lib.rs/crates/fallible-streaming-iterator: 0.1 - fallible-streaming-iterator\n\u27e856\u27e9 https://lib.rs/crates/hashlink: new - hashlink\n\u27e857\u27e9 https://lib.rs/crates/libsqlite3-sys: new - libsqlite3-sys\n\u27e858\u27e9 https://lib.rs/crates/smallvec: 1.6.1 - smallvec\n\u27e859\u27e9 https://lib.rs/crates/rusqlite/features#feature-modern-full: optional feature - modern-full?\n\u27e860\u27e9 https://lib.rs/crates/chrono/features#feature-clock: +clock\n\u27e861\u27e9 https://lib.rs/crates/jiff/features#feature-std: +std\n\u27e862\u27e9 https://lib.rs/crates/time/features#feature-formatting: +formatting\n\u27e863\u27e9 https://lib.rs/crates/time/features#feature-macros: +macros\n\u27e864\u27e9 https://lib.rs/crates/time/features#feature-parsing: +parsing\n\u27e865\u27e9 https://lib.rs/crates/uuid: 1.0 - uuid\n\u27e866\u27e9 https://lib.rs/crates/rusqlite/features#feature-csvtab: optional feature - csvtab?\n\u27e867\u27e9 https://lib.rs/crates/csv: 1.1 - csv\n\u27e868\u27e9 https://lib.rs/crates/rusqlite/features#feature-rusqlite-macros: rusqlite-macros is optional feature -  optional \n\u27e869\u27e9 https://lib.rs/crates/rusqlite-macros: 0.4.1 - rusqlite-macros\n\u27e870\u27e9 https://lib.rs/crates/bencher: 0.1 - bencher\n\u27e871\u27e9 https://lib.rs/crates/doc-comment: 0.3 - doc-comment\n\u27e872\u27e9 https://lib.rs/crates/regex: 1.5.5 - regex\n\u27e873\u27e9 https://lib.rs/crates/self_cell: 1.1.0 - self_cell\n\u27e874\u27e9 https://lib.rs/crates/tempfile: 3.1.0 - tempfile\n\u27e875\u27e9 https://lib.rs/crates/unicase: 2.6.0 - unicase\n\u27e876\u27e9 https://lib.rs/crates/rusqlite/features: Other features\n\u27e877\u27e9 https://lib.rs/crates/rusqlite/features#feature-array: array\n\u27e878\u27e9 https://lib.rs/crates/rusqlite/features#feature-backup: backup\n\u27e879\u27e9 https://lib.rs/crates/rusqlite/features#feature-blob: blob\n\u27e880\u27e9 https://lib.rs/crates/rusqlite/features#feature-buildtime_bindgen: buildtime_bindgen\n\u27e881\u27e9 https://lib.rs/crates/rusqlite/features#feature-bundled: bundled\n\u27e882\u27e9 https://lib.rs/crates/rusqlite/features#feature-bundled-full: bundled-full\n\u27e883\u27e9 https://lib.rs/crates/rusqlite/features#feature-bundled-sqlcipher: bundled-sqlcipher\n\u27e884\u27e9 https://lib.rs/crates/rusqlite/features#feature-bundled-sqlcipher-vendored-openssl: bundled-sqlcipher-vendored-openssl\n\u27e885\u27e9 https://lib.rs/crates/rusqlite/features#feature-bundled-windows: bundled-windows\n\u27e886\u27e9 https://lib.rs/crates/rusqlite/features#feature-collation: collation\n\u27e887\u27e9 https://lib.rs/crates/rusqlite/features#feature-column_decltype: column_decltype\n\u27e888\u27e9 https://lib.rs/crates/rusqlite/features#feature-column_metadata: column_metadata\n\u27e889\u27e9 https://lib.rs/crates/rusqlite/features#feature-extra_check: extra_check\n\u27e890\u27e9 https://lib.rs/crates/rusqlite/features#feature-functions: functions\n\u27e891\u27e9 https://lib.rs/crates/rusqlite/features#feature-hooks: hooks\n\u27e892\u27e9 https://lib.rs/crates/rusqlite/features#feature-i128_blob: i128_blob\n\u27e893\u27e9 https://lib.rs/crates/rusqlite/features#feature-in_gecko: in_gecko\n\u27e894\u27e9 https://lib.rs/crates/rusqlite/features#feature-limits: limits\n\u27e895\u27e9 https://lib.rs/crates/rusqlite/features#feature-load_extension: load_extension\n\u27e896\u27e9 https://lib.rs/crates/rusqlite/features#feature-loadable_extension: loadable_extension\n",
              "fit_markdown": "",
              "fit_html": ""
            },
            "structured_data": {},
            "quality_score": 3.0,
            "extraction_method": "crawl4ai",
            "error": null,
            "metadata": {
              "doc_type": "docs",
              "content_length": 21942,
              "has_structured_data": false,
              "crawl_success": true
            },
            "timestamp": "115766.764383"
          }
        },
        "crate_analysis": {
          "status": "completed",
          "check": [
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#foldhash@0.1.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\foldhash-0.1.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "foldhash",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\foldhash-0.1.5\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpz5pylvkv\\rusqlite-0.36.0\\target\\debug\\deps\\libfoldhash-7b6274bf084325ef.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#fallible-streaming-iterator@0.1.9",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\fallible-streaming-iterator-0.1.9\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "fallible_streaming_iterator",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\fallible-streaming-iterator-0.1.9\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpz5pylvkv\\rusqlite-0.36.0\\target\\debug\\deps\\libfallible_streaming_iterator-85a7c90b687fc098.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#bitflags@2.9.1",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\bitflags-2.9.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "bitflags",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\bitflags-2.9.1\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpz5pylvkv\\rusqlite-0.36.0\\target\\debug\\deps\\libbitflags-b84dcc06ac5e612b.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#smallvec@1.15.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "smallvec",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpz5pylvkv\\rusqlite-0.36.0\\target\\debug\\deps\\libsmallvec-eb9c68e8246af032.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#fallible-iterator@0.3.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\fallible-iterator-0.3.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "fallible_iterator",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\fallible-iterator-0.3.0\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "alloc",
                "default"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpz5pylvkv\\rusqlite-0.36.0\\target\\debug\\deps\\libfallible_iterator-9475c00a8d88e622.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#pkg-config@0.3.32",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\pkg-config-0.3.32\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "pkg_config",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\pkg-config-0.3.32\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpz5pylvkv\\rusqlite-0.36.0\\target\\debug\\deps\\libpkg_config-0bfc1299271ce0a9.rlib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpz5pylvkv\\rusqlite-0.36.0\\target\\debug\\deps\\libpkg_config-0bfc1299271ce0a9.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#vcpkg@0.2.15",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\vcpkg-0.2.15\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "vcpkg",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\vcpkg-0.2.15\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpz5pylvkv\\rusqlite-0.36.0\\target\\debug\\deps\\libvcpkg-96871fdfe7389d02.rlib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpz5pylvkv\\rusqlite-0.36.0\\target\\debug\\deps\\libvcpkg-96871fdfe7389d02.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#hashbrown@0.15.3",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\hashbrown-0.15.3\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "hashbrown",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\hashbrown-0.15.3\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default-hasher",
                "inline-more"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpz5pylvkv\\rusqlite-0.36.0\\target\\debug\\deps\\libhashbrown-4b193acb312f4eea.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#hashlink@0.10.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\hashlink-0.10.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "hashlink",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\hashlink-0.10.0\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpz5pylvkv\\rusqlite-0.36.0\\target\\debug\\deps\\libhashlink-96dbc7e8a97404eb.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#libsqlite3-sys@0.34.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\libsqlite3-sys-0.34.0\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\libsqlite3-sys-0.34.0\\build.rs",
                "edition": "2021",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "min_sqlite_version_3_14_0",
                "pkg-config",
                "vcpkg"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpz5pylvkv\\rusqlite-0.36.0\\target\\debug\\build\\libsqlite3-sys-0de70ed790ff0ee8\\build-script-build.exe",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpz5pylvkv\\rusqlite-0.36.0\\target\\debug\\build\\libsqlite3-sys-0de70ed790ff0ee8\\build_script_build.pdb"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "build-script-executed",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#libsqlite3-sys@0.34.0",
              "linked_libs": [
                "dylib=sqlite3"
              ],
              "linked_paths": [],
              "cfgs": [],
              "env": [],
              "out_dir": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpz5pylvkv\\rusqlite-0.36.0\\target\\debug\\build\\libsqlite3-sys-01307d591a4cbbdb\\out"
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#libsqlite3-sys@0.34.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\libsqlite3-sys-0.34.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "libsqlite3_sys",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\libsqlite3-sys-0.34.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "min_sqlite_version_3_14_0",
                "pkg-config",
                "vcpkg"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpz5pylvkv\\rusqlite-0.36.0\\target\\debug\\deps\\liblibsqlite3_sys-512bcd77d507eaab.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpz5pylvkv/rusqlite-0.36.0#rusqlite@0.36.0",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpz5pylvkv\\rusqlite-0.36.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "rusqlite",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpz5pylvkv\\rusqlite-0.36.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpz5pylvkv\\rusqlite-0.36.0\\target\\debug\\deps\\librusqlite-89b34c73341ce4fd.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "build-finished",
              "success": true
            }
          ],
          "clippy": [
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#pkg-config@0.3.32",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\pkg-config-0.3.32\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "pkg_config",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\pkg-config-0.3.32\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpz5pylvkv\\rusqlite-0.36.0\\target\\debug\\deps\\libpkg_config-0bfc1299271ce0a9.rlib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpz5pylvkv\\rusqlite-0.36.0\\target\\debug\\deps\\libpkg_config-0bfc1299271ce0a9.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#vcpkg@0.2.15",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\vcpkg-0.2.15\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "vcpkg",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\vcpkg-0.2.15\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpz5pylvkv\\rusqlite-0.36.0\\target\\debug\\deps\\libvcpkg-96871fdfe7389d02.rlib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpz5pylvkv\\rusqlite-0.36.0\\target\\debug\\deps\\libvcpkg-96871fdfe7389d02.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#foldhash@0.1.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\foldhash-0.1.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "foldhash",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\foldhash-0.1.5\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpz5pylvkv\\rusqlite-0.36.0\\target\\debug\\deps\\libfoldhash-7b6274bf084325ef.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#smallvec@1.15.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "smallvec",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.15.0\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpz5pylvkv\\rusqlite-0.36.0\\target\\debug\\deps\\libsmallvec-eb9c68e8246af032.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#bitflags@2.9.1",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\bitflags-2.9.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "bitflags",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\bitflags-2.9.1\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpz5pylvkv\\rusqlite-0.36.0\\target\\debug\\deps\\libbitflags-b84dcc06ac5e612b.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#fallible-iterator@0.3.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\fallible-iterator-0.3.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "fallible_iterator",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\fallible-iterator-0.3.0\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "alloc",
                "default"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpz5pylvkv\\rusqlite-0.36.0\\target\\debug\\deps\\libfallible_iterator-9475c00a8d88e622.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#fallible-streaming-iterator@0.1.9",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\fallible-streaming-iterator-0.1.9\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "fallible_streaming_iterator",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\fallible-streaming-iterator-0.1.9\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpz5pylvkv\\rusqlite-0.36.0\\target\\debug\\deps\\libfallible_streaming_iterator-85a7c90b687fc098.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#libsqlite3-sys@0.34.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\libsqlite3-sys-0.34.0\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\libsqlite3-sys-0.34.0\\build.rs",
                "edition": "2021",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "min_sqlite_version_3_14_0",
                "pkg-config",
                "vcpkg"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpz5pylvkv\\rusqlite-0.36.0\\target\\debug\\build\\libsqlite3-sys-0de70ed790ff0ee8\\build-script-build.exe",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpz5pylvkv\\rusqlite-0.36.0\\target\\debug\\build\\libsqlite3-sys-0de70ed790ff0ee8\\build_script_build.pdb"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#hashbrown@0.15.3",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\hashbrown-0.15.3\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "hashbrown",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\hashbrown-0.15.3\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default-hasher",
                "inline-more"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpz5pylvkv\\rusqlite-0.36.0\\target\\debug\\deps\\libhashbrown-4b193acb312f4eea.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "build-script-executed",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#libsqlite3-sys@0.34.0",
              "linked_libs": [
                "dylib=sqlite3"
              ],
              "linked_paths": [],
              "cfgs": [],
              "env": [],
              "out_dir": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpz5pylvkv\\rusqlite-0.36.0\\target\\debug\\build\\libsqlite3-sys-01307d591a4cbbdb\\out"
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#hashlink@0.10.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\hashlink-0.10.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "hashlink",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\hashlink-0.10.0\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpz5pylvkv\\rusqlite-0.36.0\\target\\debug\\deps\\libhashlink-96dbc7e8a97404eb.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#libsqlite3-sys@0.34.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\libsqlite3-sys-0.34.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "libsqlite3_sys",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\libsqlite3-sys-0.34.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "min_sqlite_version_3_14_0",
                "pkg-config",
                "vcpkg"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpz5pylvkv\\rusqlite-0.36.0\\target\\debug\\deps\\liblibsqlite3_sys-512bcd77d507eaab.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpz5pylvkv/rusqlite-0.36.0#rusqlite@0.36.0",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpz5pylvkv\\rusqlite-0.36.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "rusqlite",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpz5pylvkv\\rusqlite-0.36.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpz5pylvkv\\rusqlite-0.36.0\\target\\debug\\deps\\librusqlite-72ce067f94352ed0.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "build-finished",
              "success": true
            }
          ],
          "audit": {
            "database": {
              "advisory-count": 787,
              "last-commit": "7573f55ba337263f61167dbb0ea926cdc7c8eb5d",
              "last-updated": "2025-06-17T11:04:25+02:00"
            },
            "lockfile": {
              "dependency-count": 152
            },
            "settings": {
              "target_arch": [],
              "target_os": [],
              "severity": null,
              "ignore": [],
              "informational_warnings": [
                "unmaintained",
                "unsound",
                "notice"
              ]
            },
            "vulnerabilities": {
              "found": false,
              "count": 0,
              "list": []
            },
            "warnings": {}
          },
          "note": "Crate analysis performed with stable toolchain."
        },
        "crate_metadata": {
          "name": "rusqlite",
          "version": "0.36.0",
          "description": "ALLOW: Positive community sentiment",
          "repository": "",
          "keywords": [],
          "categories": [],
          "readme": {
            "raw_markdown": "[](https://docs.rs/rusqlite/latest/rusqlite/all.html \"show sidebar\")\n# Crate rusqliteCopy item path\n[Settings](https://docs.rs/rusqlite/latest/settings.html)\n[Help](https://docs.rs/rusqlite/latest/help.html)\nSummary[Source](https://docs.rs/rusqlite/latest/src/rusqlite/lib.rs.html#1-2296)\nExpand description\nRusqlite is an ergonomic wrapper for using SQLite from Rust.\nHistorically, the API was based on the one from [`rust-postgres`](https://github.com/sfackler/rust-postgres). However, the two have diverged in many ways, and no compatibility between the two is intended.\n```\nuse rusqlite::{params, Connection, Result};\n#[derive(Debug)]\nstruct Person {\n  id: i32,\n  name: String,\n  data: Option<Vec<u8>>,\n}\nfn main() -> Result<()> {\n  let conn = Connection::open_in_memory()?;\n  conn.execute(\n    \"CREATE TABLE person (\n      id  INTEGER PRIMARY KEY,\n      name TEXT NOT NULL,\n      data BLOB\n    )\",\n    (), // empty list of parameters.\n  )?;\n  let me = Person {\n    id: 0,\n    name: \"Steven\".to_string(),\n    data: None,\n  };\n  conn.execute(\n    \"INSERT INTO person (name, data) VALUES (?1, ?2)\",\n    (&me.name, &me.data),\n  )?;\n  let mut stmt = conn.prepare(\"SELECT id, name, data FROM person\")?;\n  let person_iter = stmt.query_map([], |row| {\n    Ok(Person {\n      id: row.get(0)?,\n      name: row.get(1)?,\n      data: row.get(2)?,\n    })\n  })?;\n  for person in person_iter {\n    println!(\"Found person {:?}\", person?);\n  }\n  Ok(())\n}\n```\n\n## Re-exports[\u00a7](https://docs.rs/rusqlite/latest/rusqlite/#reexports)\n\n`pub use crate::types::ToSql[](https://docs.rs/rusqlite/latest/rusqlite/types/trait.ToSql.html \"trait rusqlite::types::ToSql\");`\n\n\n`pub use fallible_iterator[](https://docs.rs/fallible-iterator/0.3.0/x86_64-unknown-linux-gnu/fallible_iterator/index.html \"mod fallible_iterator\");`\n\n\n`pub use fallible_streaming_iterator[](https://docs.rs/fallible-streaming-iterator/0.1.9/x86_64-unknown-linux-gnu/fallible_streaming_iterator/index.html \"mod fallible_streaming_iterator\");`\n\n\n`pub use libsqlite3_sys[](https://docs.rs/libsqlite3-sys/0.34.0/x86_64-unknown-linux-gnu/libsqlite3_sys/index.html \"mod libsqlite3_sys\") as ffi;`\n\n## Modules[\u00a7](https://docs.rs/rusqlite/latest/rusqlite/#modules)\n\n[auto_extension](https://docs.rs/rusqlite/latest/rusqlite/auto_extension/index.html \"mod rusqlite::auto_extension\")Non-`loadable_extension`\n    Automatic extension loading\n\n[backup](https://docs.rs/rusqlite/latest/rusqlite/backup/index.html \"mod rusqlite::backup\")`backup`\n    Online SQLite backup API.\n\n[blob](https://docs.rs/rusqlite/latest/rusqlite/blob/index.html \"mod rusqlite::blob\")`blob`\n    Incremental BLOB I/O.\n\n[config](https://docs.rs/rusqlite/latest/rusqlite/config/index.html \"mod rusqlite::config\")\n    Configure database connections\n\n[functions](https://docs.rs/rusqlite/latest/rusqlite/functions/index.html \"mod rusqlite::functions\")`functions`\n    Create or redefine SQL functions.\n\n[hooks](https://docs.rs/rusqlite/latest/rusqlite/hooks/index.html \"mod rusqlite::hooks\")`hooks`\n    Commit, Data Change and Rollback Notification Callbacks\n\n[limits](https://docs.rs/rusqlite/latest/rusqlite/limits/index.html \"mod rusqlite::limits\")`limits`\n    Run-Time Limits\n\n[serialize](https://docs.rs/rusqlite/latest/rusqlite/serialize/index.html \"mod rusqlite::serialize\")`serialize`\n    Serialize a database.\n\n[trace](https://docs.rs/rusqlite/latest/rusqlite/trace/index.html \"mod rusqlite::trace\")`trace`\n    Tracing and profiling functions. Error and warning log.\n\n[types](https://docs.rs/rusqlite/latest/rusqlite/types/index.html \"mod rusqlite::types\")\n    Traits dealing with SQLite data types.\n\n[vtab](https://docs.rs/rusqlite/latest/rusqlite/vtab/index.html \"mod rusqlite::vtab\")`vtab`\n    Create virtual tables.\n## Macros[\u00a7](https://docs.rs/rusqlite/latest/rusqlite/#macros)\n\n[named_params](https://docs.rs/rusqlite/latest/rusqlite/macro.named_params.html \"macro rusqlite::named_params\")\n    A macro making it more convenient to pass lists of named parameters as a `&[(&str, &dyn ToSql)]`.\n\n[params](https://docs.rs/rusqlite/latest/rusqlite/macro.params.html \"macro rusqlite::params\")\n    A macro making it more convenient to pass longer lists of parameters as a `&[&dyn ToSql]`.\n\n[prepare_and_bind](https://docs.rs/rusqlite/latest/rusqlite/macro.prepare_and_bind.html \"macro rusqlite::prepare_and_bind\")`rusqlite-macros`\n    Captured identifiers in SQL\n\n[prepare_cached_and_bind](https://docs.rs/rusqlite/latest/rusqlite/macro.prepare_cached_and_bind.html \"macro rusqlite::prepare_cached_and_bind\")`rusqlite-macros`\n    Captured identifiers in SQL\n## Structs[\u00a7](https://docs.rs/rusqlite/latest/rusqlite/#structs)\n\n[AndThenRows](https://docs.rs/rusqlite/latest/rusqlite/struct.AndThenRows.html \"struct rusqlite::AndThenRows\")\n    An iterator over the mapped resulting rows of a query, with an Error type unifying with Error.\n\n[Batch](https://docs.rs/rusqlite/latest/rusqlite/struct.Batch.html \"struct rusqlite::Batch\")\n    Batch fallible iterator\n\n[CachedStatement](https://docs.rs/rusqlite/latest/rusqlite/struct.CachedStatement.html \"struct rusqlite::CachedStatement\")\n    Cacheable statement.\n\n[Column](https://docs.rs/rusqlite/latest/rusqlite/struct.Column.html \"struct rusqlite::Column\")`column_decltype`\n    Information about a column of a SQLite query.\n\n[ColumnMetadata](https://docs.rs/rusqlite/latest/rusqlite/struct.ColumnMetadata.html \"struct rusqlite::ColumnMetadata\")`column_metadata`\n    Metadata about the origin of a column of a SQLite query\n\n[Connection](https://docs.rs/rusqlite/latest/rusqlite/struct.Connection.html \"struct rusqlite::Connection\")\n    A connection to a SQLite database.\n\n[InterruptHandle](https://docs.rs/rusqlite/latest/rusqlite/struct.InterruptHandle.html \"struct rusqlite::InterruptHandle\")\n    Allows interrupting a long-running computation.\n\n[LoadExtensionGuard](https://docs.rs/rusqlite/latest/rusqlite/struct.LoadExtensionGuard.html \"struct rusqlite::LoadExtensionGuard\")`load_extension`\n    RAII guard temporarily enabling SQLite extensions to be loaded.\n\n[Map](https://docs.rs/rusqlite/latest/rusqlite/struct.Map.html \"struct rusqlite::Map\")\n    `F` is used to transform the _streaming_ iterator into a _fallible_ iterator.\n\n[MappedRows](https://docs.rs/rusqlite/latest/rusqlite/struct.MappedRows.html \"struct rusqlite::MappedRows\")\n    An iterator over the mapped resulting rows of a query.\n\n[OpenFlags](https://docs.rs/rusqlite/latest/rusqlite/struct.OpenFlags.html \"struct rusqlite::OpenFlags\")\n    Flags for opening SQLite database connections. See [sqlite3_open_v2](https://www.sqlite.org/c3ref/open.html) for details.\n\n[ParamsFromIter](https://docs.rs/rusqlite/latest/rusqlite/struct.ParamsFromIter.html \"struct rusqlite::ParamsFromIter\")\n    Adapter type which allows any iterator over [`ToSql`](https://docs.rs/rusqlite/latest/rusqlite/types/trait.ToSql.html \"trait rusqlite::types::ToSql\") values to implement [`Params`](https://docs.rs/rusqlite/latest/rusqlite/trait.Params.html \"trait rusqlite::Params\").\n\n[PrepFlags](https://docs.rs/rusqlite/latest/rusqlite/struct.PrepFlags.html \"struct rusqlite::PrepFlags\")\n    Prepare flags. See [sqlite3_prepare_v3](https://sqlite.org/c3ref/c_prepare_normalize.html) for details.\n\n[Row](https://docs.rs/rusqlite/latest/rusqlite/struct.Row.html \"struct rusqlite::Row\")\n    A single result row of a query.\n\n[Rows](https://docs.rs/rusqlite/latest/rusqlite/struct.Rows.html \"struct rusqlite::Rows\")\n    A handle (lazy fallible streaming iterator) for the resulting rows of a query.\n\n[Savepoint](https://docs.rs/rusqlite/latest/rusqlite/struct.Savepoint.html \"struct rusqlite::Savepoint\")\n    Represents a savepoint on a database connection.\n\n[Statement](https://docs.rs/rusqlite/latest/rusqlite/struct.Statement.html \"struct rusqlite::Statement\")\n    A prepared statement.\n\n[Transaction](https://docs.rs/rusqlite/latest/rusqlite/struct.Transaction.html \"struct rusqlite::Transaction\")\n    Represents a transaction on a database connection.\n## Enums[\u00a7](https://docs.rs/rusqlite/latest/rusqlite/#enums)\n\n[DropBehavior](https://docs.rs/rusqlite/latest/rusqlite/enum.DropBehavior.html \"enum rusqlite::DropBehavior\")\n    Options for how a Transaction or Savepoint should behave when it is dropped.\n\n[Error](https://docs.rs/rusqlite/latest/rusqlite/enum.Error.html \"enum rusqlite::Error\")\n    Enum listing possible errors from rusqlite.\n\n[ErrorCode](https://docs.rs/rusqlite/latest/rusqlite/enum.ErrorCode.html \"enum rusqlite::ErrorCode\")\n    Error Codes\n\n[StatementStatus](https://docs.rs/rusqlite/latest/rusqlite/enum.StatementStatus.html \"enum rusqlite::StatementStatus\")\n    Prepared statement status counters.\n\n[TransactionBehavior](https://docs.rs/rusqlite/latest/rusqlite/enum.TransactionBehavior.html \"enum rusqlite::TransactionBehavior\")\n    Options for transaction behavior. See [BEGIN TRANSACTION](http://www.sqlite.org/lang_transaction.html) for details.\n\n[TransactionState](https://docs.rs/rusqlite/latest/rusqlite/enum.TransactionState.html \"enum rusqlite::TransactionState\")`modern_sqlite`\n    Transaction state of a database\n## Constants[\u00a7](https://docs.rs/rusqlite/latest/rusqlite/#constants)\n\n[MAIN_DB](https://docs.rs/rusqlite/latest/rusqlite/constant.MAIN_DB.html \"constant rusqlite::MAIN_DB\")\n    Shorthand for `Main` database.\n\n[TEMP_DB](https://docs.rs/rusqlite/latest/rusqlite/constant.TEMP_DB.html \"constant rusqlite::TEMP_DB\")\n    Shorthand for `Temp` database.\n## Traits[\u00a7](https://docs.rs/rusqlite/latest/rusqlite/#traits)\n\n[BindIndex](https://docs.rs/rusqlite/latest/rusqlite/trait.BindIndex.html \"trait rusqlite::BindIndex\")\n    A trait implemented by types that can index into parameters of a statement.\n\n[Name](https://docs.rs/rusqlite/latest/rusqlite/trait.Name.html \"trait rusqlite::Name\")\n    Database, table, column, collation, function, module, vfs name\n\n[OptionalExtension](https://docs.rs/rusqlite/latest/rusqlite/trait.OptionalExtension.html \"trait rusqlite::OptionalExtension\")\n    See the [method documentation](https://docs.rs/rusqlite/latest/rusqlite/#tymethod.optional).\n\n[Params](https://docs.rs/rusqlite/latest/rusqlite/trait.Params.html \"trait rusqlite::Params\")\n    Trait used for [sets of parameter](https://www.sqlite.org/c3ref/bind_blob.html) passed into SQL statements/queries.\n\n[RowIndex](https://docs.rs/rusqlite/latest/rusqlite/trait.RowIndex.html \"trait rusqlite::RowIndex\")\n    A trait implemented by types that can index into columns of a row.\n## Functions[\u00a7](https://docs.rs/rusqlite/latest/rusqlite/#functions)\n\n[params_from_iter](https://docs.rs/rusqlite/latest/rusqlite/fn.params_from_iter.html \"fn rusqlite::params_from_iter\")\n    Constructor function for a [`ParamsFromIter`](https://docs.rs/rusqlite/latest/rusqlite/struct.ParamsFromIter.html \"struct rusqlite::ParamsFromIter\"). See its documentation for more.\n\n[to_sqlite_error](https://docs.rs/rusqlite/latest/rusqlite/fn.to_sqlite_error.html \"fn rusqlite::to_sqlite_error\")\u26a0\n    Transform Rust error to SQLite error (message and code).\n\n[version](https://docs.rs/rusqlite/latest/rusqlite/fn.version.html \"fn rusqlite::version\")\n    Returns the SQLite version as a string; e.g., `\"3.16.2\"` for version 3.16.2.\n\n[version_number](https://docs.rs/rusqlite/latest/rusqlite/fn.version_number.html \"fn rusqlite::version_number\")\n    Returns the SQLite version as an integer; e.g., `3016002` for version 3.16.2.\n## Type Aliases[\u00a7](https://docs.rs/rusqlite/latest/rusqlite/#types)\n\n[Result](https://docs.rs/rusqlite/latest/rusqlite/type.Result.html \"type rusqlite::Result\")\n    A typedef of the result returned by many methods.\n",
            "markdown_with_citations": "[](https://docs.rs/rusqlite/latest/rusqlite/all.html \"show sidebar\")\n# Crate rusqliteCopy item path\nSettings\u27e81\u27e9\nHelp\u27e82\u27e9\nSummarySource\u27e83\u27e9\nExpand description\nRusqlite is an ergonomic wrapper for using SQLite from Rust.\nHistorically, the API was based on the one from `rust-postgres`\u27e84\u27e9. However, the two have diverged in many ways, and no compatibility between the two is intended.\n```\nuse rusqlite::{params, Connection, Result};\n#[derive(Debug)]\nstruct Person {\n  id: i32,\n  name: String,\n  data: Option<Vec<u8>>,\n}\nfn main() -> Result<()> {\n  let conn = Connection::open_in_memory()?;\n  conn.execute(\n    \"CREATE TABLE person (\n      id  INTEGER PRIMARY KEY,\n      name TEXT NOT NULL,\n      data BLOB\n    )\",\n    (), // empty list of parameters.\n  )?;\n  let me = Person {\n    id: 0,\n    name: \"Steven\".to_string(),\n    data: None,\n  };\n  conn.execute(\n    \"INSERT INTO person (name, data) VALUES (?1, ?2)\",\n    (&me.name, &me.data),\n  )?;\n  let mut stmt = conn.prepare(\"SELECT id, name, data FROM person\")?;\n  let person_iter = stmt.query_map([], |row| {\n    Ok(Person {\n      id: row.get(0)?,\n      name: row.get(1)?,\n      data: row.get(2)?,\n    })\n  })?;\n  for person in person_iter {\n    println!(\"Found person {:?}\", person?);\n  }\n  Ok(())\n}\n```\n\n## Re-exports\u00a7\u27e85\u27e9\n\n`pub use crate::types::ToSql[](https://docs.rs/rusqlite/latest/rusqlite/types/trait.ToSql.html \"trait rusqlite::types::ToSql\");`\n\n\n`pub use fallible_iterator[](https://docs.rs/fallible-iterator/0.3.0/x86_64-unknown-linux-gnu/fallible_iterator/index.html \"mod fallible_iterator\");`\n\n\n`pub use fallible_streaming_iterator[](https://docs.rs/fallible-streaming-iterator/0.1.9/x86_64-unknown-linux-gnu/fallible_streaming_iterator/index.html \"mod fallible_streaming_iterator\");`\n\n\n`pub use libsqlite3_sys[](https://docs.rs/libsqlite3-sys/0.34.0/x86_64-unknown-linux-gnu/libsqlite3_sys/index.html \"mod libsqlite3_sys\") as ffi;`\n\n## Modules\u00a7\u27e86\u27e9\n\nauto_extension\u27e87\u27e9Non-`loadable_extension`\n    Automatic extension loading\n\nbackup\u27e88\u27e9`backup`\n    Online SQLite backup API.\n\nblob\u27e89\u27e9`blob`\n    Incremental BLOB I/O.\n\nconfig\u27e810\u27e9\n    Configure database connections\n\nfunctions\u27e811\u27e9`functions`\n    Create or redefine SQL functions.\n\nhooks\u27e812\u27e9`hooks`\n    Commit, Data Change and Rollback Notification Callbacks\n\nlimits\u27e813\u27e9`limits`\n    Run-Time Limits\n\nserialize\u27e814\u27e9`serialize`\n    Serialize a database.\n\ntrace\u27e815\u27e9`trace`\n    Tracing and profiling functions. Error and warning log.\n\ntypes\u27e816\u27e9\n    Traits dealing with SQLite data types.\n\nvtab\u27e817\u27e9`vtab`\n    Create virtual tables.\n## Macros\u00a7\u27e818\u27e9\n\nnamed_params\u27e819\u27e9\n    A macro making it more convenient to pass lists of named parameters as a `&[(&str, &dyn ToSql)]`.\n\nparams\u27e820\u27e9\n    A macro making it more convenient to pass longer lists of parameters as a `&[&dyn ToSql]`.\n\nprepare_and_bind\u27e821\u27e9`rusqlite-macros`\n    Captured identifiers in SQL\n\nprepare_cached_and_bind\u27e822\u27e9`rusqlite-macros`\n    Captured identifiers in SQL\n## Structs\u00a7\u27e823\u27e9\n\nAndThenRows\u27e824\u27e9\n    An iterator over the mapped resulting rows of a query, with an Error type unifying with Error.\n\nBatch\u27e825\u27e9\n    Batch fallible iterator\n\nCachedStatement\u27e826\u27e9\n    Cacheable statement.\n\nColumn\u27e827\u27e9`column_decltype`\n    Information about a column of a SQLite query.\n\nColumnMetadata\u27e828\u27e9`column_metadata`\n    Metadata about the origin of a column of a SQLite query\n\nConnection\u27e829\u27e9\n    A connection to a SQLite database.\n\nInterruptHandle\u27e830\u27e9\n    Allows interrupting a long-running computation.\n\nLoadExtensionGuard\u27e831\u27e9`load_extension`\n    RAII guard temporarily enabling SQLite extensions to be loaded.\n\nMap\u27e832\u27e9\n    `F` is used to transform the _streaming_ iterator into a _fallible_ iterator.\n\nMappedRows\u27e833\u27e9\n    An iterator over the mapped resulting rows of a query.\n\nOpenFlags\u27e834\u27e9\n    Flags for opening SQLite database connections. See sqlite3_open_v2\u27e835\u27e9 for details.\n\nParamsFromIter\u27e836\u27e9\n    Adapter type which allows any iterator over `ToSql`\u27e837\u27e9 values to implement `Params`\u27e838\u27e9.\n\nPrepFlags\u27e839\u27e9\n    Prepare flags. See sqlite3_prepare_v3\u27e840\u27e9 for details.\n\nRow\u27e841\u27e9\n    A single result row of a query.\n\nRows\u27e842\u27e9\n    A handle (lazy fallible streaming iterator) for the resulting rows of a query.\n\nSavepoint\u27e843\u27e9\n    Represents a savepoint on a database connection.\n\nStatement\u27e844\u27e9\n    A prepared statement.\n\nTransaction\u27e845\u27e9\n    Represents a transaction on a database connection.\n## Enums\u00a7\u27e846\u27e9\n\nDropBehavior\u27e847\u27e9\n    Options for how a Transaction or Savepoint should behave when it is dropped.\n\nError\u27e848\u27e9\n    Enum listing possible errors from rusqlite.\n\nErrorCode\u27e849\u27e9\n    Error Codes\n\nStatementStatus\u27e850\u27e9\n    Prepared statement status counters.\n\nTransactionBehavior\u27e851\u27e9\n    Options for transaction behavior. See BEGIN TRANSACTION\u27e852\u27e9 for details.\n\nTransactionState\u27e853\u27e9`modern_sqlite`\n    Transaction state of a database\n## Constants\u00a7\u27e854\u27e9\n\nMAIN_DB\u27e855\u27e9\n    Shorthand for `Main` database.\n\nTEMP_DB\u27e856\u27e9\n    Shorthand for `Temp` database.\n## Traits\u00a7\u27e857\u27e9\n\nBindIndex\u27e858\u27e9\n    A trait implemented by types that can index into parameters of a statement.\n\nName\u27e859\u27e9\n    Database, table, column, collation, function, module, vfs name\n\nOptionalExtension\u27e860\u27e9\n    See the method documentation\u27e861\u27e9.\n\nParams\u27e838\u27e9\n    Trait used for sets of parameter\u27e862\u27e9 passed into SQL statements/queries.\n\nRowIndex\u27e863\u27e9\n    A trait implemented by types that can index into columns of a row.\n## Functions\u00a7\u27e864\u27e9\n\nparams_from_iter\u27e865\u27e9\n    Constructor function for a `ParamsFromIter`\u27e836\u27e9. See its documentation for more.\n\nto_sqlite_error\u27e866\u27e9\u26a0\n    Transform Rust error to SQLite error (message and code).\n\nversion\u27e867\u27e9\n    Returns the SQLite version as a string; e.g., `\"3.16.2\"` for version 3.16.2.\n\nversion_number\u27e868\u27e9\n    Returns the SQLite version as an integer; e.g., `3016002` for version 3.16.2.\n## Type Aliases\u00a7\u27e869\u27e9\n\nResult\u27e870\u27e9\n    A typedef of the result returned by many methods.\n",
            "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://docs.rs/rusqlite/latest/settings.html: Settings\n\u27e82\u27e9 https://docs.rs/rusqlite/latest/help.html: Help\n\u27e83\u27e9 https://docs.rs/rusqlite/latest/src/rusqlite/lib.rs.html#1-2296: Source\n\u27e84\u27e9 https://github.com/sfackler/rust-postgres: `rust-postgres`\n\u27e85\u27e9 https://docs.rs/rusqlite/latest/rusqlite/#reexports: \u00a7\n\u27e86\u27e9 https://docs.rs/rusqlite/latest/rusqlite/#modules: \u00a7\n\u27e87\u27e9 https://docs.rs/rusqlite/latest/rusqlite/auto_extension/index.html: mod rusqlite::auto_extension - auto_extension\n\u27e88\u27e9 https://docs.rs/rusqlite/latest/rusqlite/backup/index.html: mod rusqlite::backup - backup\n\u27e89\u27e9 https://docs.rs/rusqlite/latest/rusqlite/blob/index.html: mod rusqlite::blob - blob\n\u27e810\u27e9 https://docs.rs/rusqlite/latest/rusqlite/config/index.html: mod rusqlite::config - config\n\u27e811\u27e9 https://docs.rs/rusqlite/latest/rusqlite/functions/index.html: mod rusqlite::functions - functions\n\u27e812\u27e9 https://docs.rs/rusqlite/latest/rusqlite/hooks/index.html: mod rusqlite::hooks - hooks\n\u27e813\u27e9 https://docs.rs/rusqlite/latest/rusqlite/limits/index.html: mod rusqlite::limits - limits\n\u27e814\u27e9 https://docs.rs/rusqlite/latest/rusqlite/serialize/index.html: mod rusqlite::serialize - serialize\n\u27e815\u27e9 https://docs.rs/rusqlite/latest/rusqlite/trace/index.html: mod rusqlite::trace - trace\n\u27e816\u27e9 https://docs.rs/rusqlite/latest/rusqlite/types/index.html: mod rusqlite::types - types\n\u27e817\u27e9 https://docs.rs/rusqlite/latest/rusqlite/vtab/index.html: mod rusqlite::vtab - vtab\n\u27e818\u27e9 https://docs.rs/rusqlite/latest/rusqlite/#macros: \u00a7\n\u27e819\u27e9 https://docs.rs/rusqlite/latest/rusqlite/macro.named_params.html: macro rusqlite::named_params - named_params\n\u27e820\u27e9 https://docs.rs/rusqlite/latest/rusqlite/macro.params.html: macro rusqlite::params - params\n\u27e821\u27e9 https://docs.rs/rusqlite/latest/rusqlite/macro.prepare_and_bind.html: macro rusqlite::prepare_and_bind - prepare_and_bind\n\u27e822\u27e9 https://docs.rs/rusqlite/latest/rusqlite/macro.prepare_cached_and_bind.html: macro rusqlite::prepare_cached_and_bind - prepare_cached_and_bind\n\u27e823\u27e9 https://docs.rs/rusqlite/latest/rusqlite/#structs: \u00a7\n\u27e824\u27e9 https://docs.rs/rusqlite/latest/rusqlite/struct.AndThenRows.html: struct rusqlite::AndThenRows - AndThenRows\n\u27e825\u27e9 https://docs.rs/rusqlite/latest/rusqlite/struct.Batch.html: struct rusqlite::Batch - Batch\n\u27e826\u27e9 https://docs.rs/rusqlite/latest/rusqlite/struct.CachedStatement.html: struct rusqlite::CachedStatement - CachedStatement\n\u27e827\u27e9 https://docs.rs/rusqlite/latest/rusqlite/struct.Column.html: struct rusqlite::Column - Column\n\u27e828\u27e9 https://docs.rs/rusqlite/latest/rusqlite/struct.ColumnMetadata.html: struct rusqlite::ColumnMetadata - ColumnMetadata\n\u27e829\u27e9 https://docs.rs/rusqlite/latest/rusqlite/struct.Connection.html: struct rusqlite::Connection - Connection\n\u27e830\u27e9 https://docs.rs/rusqlite/latest/rusqlite/struct.InterruptHandle.html: struct rusqlite::InterruptHandle - InterruptHandle\n\u27e831\u27e9 https://docs.rs/rusqlite/latest/rusqlite/struct.LoadExtensionGuard.html: struct rusqlite::LoadExtensionGuard - LoadExtensionGuard\n\u27e832\u27e9 https://docs.rs/rusqlite/latest/rusqlite/struct.Map.html: struct rusqlite::Map - Map\n\u27e833\u27e9 https://docs.rs/rusqlite/latest/rusqlite/struct.MappedRows.html: struct rusqlite::MappedRows - MappedRows\n\u27e834\u27e9 https://docs.rs/rusqlite/latest/rusqlite/struct.OpenFlags.html: struct rusqlite::OpenFlags - OpenFlags\n\u27e835\u27e9 https://www.sqlite.org/c3ref/open.html: sqlite3_open_v2\n\u27e836\u27e9 https://docs.rs/rusqlite/latest/rusqlite/struct.ParamsFromIter.html: struct rusqlite::ParamsFromIter - ParamsFromIter\n\u27e837\u27e9 https://docs.rs/rusqlite/latest/rusqlite/types/trait.ToSql.html: trait rusqlite::types::ToSql - `ToSql`\n\u27e838\u27e9 https://docs.rs/rusqlite/latest/rusqlite/trait.Params.html: trait rusqlite::Params - `Params`\n\u27e839\u27e9 https://docs.rs/rusqlite/latest/rusqlite/struct.PrepFlags.html: struct rusqlite::PrepFlags - PrepFlags\n\u27e840\u27e9 https://sqlite.org/c3ref/c_prepare_normalize.html: sqlite3_prepare_v3\n\u27e841\u27e9 https://docs.rs/rusqlite/latest/rusqlite/struct.Row.html: struct rusqlite::Row - Row\n\u27e842\u27e9 https://docs.rs/rusqlite/latest/rusqlite/struct.Rows.html: struct rusqlite::Rows - Rows\n\u27e843\u27e9 https://docs.rs/rusqlite/latest/rusqlite/struct.Savepoint.html: struct rusqlite::Savepoint - Savepoint\n\u27e844\u27e9 https://docs.rs/rusqlite/latest/rusqlite/struct.Statement.html: struct rusqlite::Statement - Statement\n\u27e845\u27e9 https://docs.rs/rusqlite/latest/rusqlite/struct.Transaction.html: struct rusqlite::Transaction - Transaction\n\u27e846\u27e9 https://docs.rs/rusqlite/latest/rusqlite/#enums: \u00a7\n\u27e847\u27e9 https://docs.rs/rusqlite/latest/rusqlite/enum.DropBehavior.html: enum rusqlite::DropBehavior - DropBehavior\n\u27e848\u27e9 https://docs.rs/rusqlite/latest/rusqlite/enum.Error.html: enum rusqlite::Error - Error\n\u27e849\u27e9 https://docs.rs/rusqlite/latest/rusqlite/enum.ErrorCode.html: enum rusqlite::ErrorCode - ErrorCode\n\u27e850\u27e9 https://docs.rs/rusqlite/latest/rusqlite/enum.StatementStatus.html: enum rusqlite::StatementStatus - StatementStatus\n\u27e851\u27e9 https://docs.rs/rusqlite/latest/rusqlite/enum.TransactionBehavior.html: enum rusqlite::TransactionBehavior - TransactionBehavior\n\u27e852\u27e9 http://www.sqlite.org/lang_transaction.html: BEGIN TRANSACTION\n\u27e853\u27e9 https://docs.rs/rusqlite/latest/rusqlite/enum.TransactionState.html: enum rusqlite::TransactionState - TransactionState\n\u27e854\u27e9 https://docs.rs/rusqlite/latest/rusqlite/#constants: \u00a7\n\u27e855\u27e9 https://docs.rs/rusqlite/latest/rusqlite/constant.MAIN_DB.html: constant rusqlite::MAIN_DB - MAIN_DB\n\u27e856\u27e9 https://docs.rs/rusqlite/latest/rusqlite/constant.TEMP_DB.html: constant rusqlite::TEMP_DB - TEMP_DB\n\u27e857\u27e9 https://docs.rs/rusqlite/latest/rusqlite/#traits: \u00a7\n\u27e858\u27e9 https://docs.rs/rusqlite/latest/rusqlite/trait.BindIndex.html: trait rusqlite::BindIndex - BindIndex\n\u27e859\u27e9 https://docs.rs/rusqlite/latest/rusqlite/trait.Name.html: trait rusqlite::Name - Name\n\u27e860\u27e9 https://docs.rs/rusqlite/latest/rusqlite/trait.OptionalExtension.html: trait rusqlite::OptionalExtension - OptionalExtension\n\u27e861\u27e9 https://docs.rs/rusqlite/latest/rusqlite/#tymethod.optional: method documentation\n\u27e862\u27e9 https://www.sqlite.org/c3ref/bind_blob.html: sets of parameter\n\u27e863\u27e9 https://docs.rs/rusqlite/latest/rusqlite/trait.RowIndex.html: trait rusqlite::RowIndex - RowIndex\n\u27e864\u27e9 https://docs.rs/rusqlite/latest/rusqlite/#functions: \u00a7\n\u27e865\u27e9 https://docs.rs/rusqlite/latest/rusqlite/fn.params_from_iter.html: fn rusqlite::params_from_iter - params_from_iter\n\u27e866\u27e9 https://docs.rs/rusqlite/latest/rusqlite/fn.to_sqlite_error.html: fn rusqlite::to_sqlite_error - to_sqlite_error\n\u27e867\u27e9 https://docs.rs/rusqlite/latest/rusqlite/fn.version.html: fn rusqlite::version - version\n\u27e868\u27e9 https://docs.rs/rusqlite/latest/rusqlite/fn.version_number.html: fn rusqlite::version_number - version_number\n\u27e869\u27e9 https://docs.rs/rusqlite/latest/rusqlite/#types: \u00a7\n\u27e870\u27e9 https://docs.rs/rusqlite/latest/rusqlite/type.Result.html: type rusqlite::Result - Result\n",
            "fit_markdown": "",
            "fit_html": ""
          },
          "downloads": 0,
          "github_stars": 0,
          "dependencies": [],
          "features": {},
          "code_snippets": [],
          "readme_sections": {},
          "librs_downloads": null,
          "source": "crates.io",
          "enhanced_scraping": {},
          "enhanced_features": [],
          "enhanced_dependencies": []
        },
        "enriched_crate": {
          "name": "rusqlite",
          "version": "0.36.0",
          "description": "ALLOW: Positive community sentiment",
          "repository": "",
          "keywords": [],
          "categories": [],
          "readme": {
            "raw_markdown": "[](https://docs.rs/rusqlite/latest/rusqlite/all.html \"show sidebar\")\n# Crate rusqliteCopy item path\n[Settings](https://docs.rs/rusqlite/latest/settings.html)\n[Help](https://docs.rs/rusqlite/latest/help.html)\nSummary[Source](https://docs.rs/rusqlite/latest/src/rusqlite/lib.rs.html#1-2296)\nExpand description\nRusqlite is an ergonomic wrapper for using SQLite from Rust.\nHistorically, the API was based on the one from [`rust-postgres`](https://github.com/sfackler/rust-postgres). However, the two have diverged in many ways, and no compatibility between the two is intended.\n```\nuse rusqlite::{params, Connection, Result};\n#[derive(Debug)]\nstruct Person {\n  id: i32,\n  name: String,\n  data: Option<Vec<u8>>,\n}\nfn main() -> Result<()> {\n  let conn = Connection::open_in_memory()?;\n  conn.execute(\n    \"CREATE TABLE person (\n      id  INTEGER PRIMARY KEY,\n      name TEXT NOT NULL,\n      data BLOB\n    )\",\n    (), // empty list of parameters.\n  )?;\n  let me = Person {\n    id: 0,\n    name: \"Steven\".to_string(),\n    data: None,\n  };\n  conn.execute(\n    \"INSERT INTO person (name, data) VALUES (?1, ?2)\",\n    (&me.name, &me.data),\n  )?;\n  let mut stmt = conn.prepare(\"SELECT id, name, data FROM person\")?;\n  let person_iter = stmt.query_map([], |row| {\n    Ok(Person {\n      id: row.get(0)?,\n      name: row.get(1)?,\n      data: row.get(2)?,\n    })\n  })?;\n  for person in person_iter {\n    println!(\"Found person {:?}\", person?);\n  }\n  Ok(())\n}\n```\n\n## Re-exports[\u00a7](https://docs.rs/rusqlite/latest/rusqlite/#reexports)\n\n`pub use crate::types::ToSql[](https://docs.rs/rusqlite/latest/rusqlite/types/trait.ToSql.html \"trait rusqlite::types::ToSql\");`\n\n\n`pub use fallible_iterator[](https://docs.rs/fallible-iterator/0.3.0/x86_64-unknown-linux-gnu/fallible_iterator/index.html \"mod fallible_iterator\");`\n\n\n`pub use fallible_streaming_iterator[](https://docs.rs/fallible-streaming-iterator/0.1.9/x86_64-unknown-linux-gnu/fallible_streaming_iterator/index.html \"mod fallible_streaming_iterator\");`\n\n\n`pub use libsqlite3_sys[](https://docs.rs/libsqlite3-sys/0.34.0/x86_64-unknown-linux-gnu/libsqlite3_sys/index.html \"mod libsqlite3_sys\") as ffi;`\n\n## Modules[\u00a7](https://docs.rs/rusqlite/latest/rusqlite/#modules)\n\n[auto_extension](https://docs.rs/rusqlite/latest/rusqlite/auto_extension/index.html \"mod rusqlite::auto_extension\")Non-`loadable_extension`\n    Automatic extension loading\n\n[backup](https://docs.rs/rusqlite/latest/rusqlite/backup/index.html \"mod rusqlite::backup\")`backup`\n    Online SQLite backup API.\n\n[blob](https://docs.rs/rusqlite/latest/rusqlite/blob/index.html \"mod rusqlite::blob\")`blob`\n    Incremental BLOB I/O.\n\n[config](https://docs.rs/rusqlite/latest/rusqlite/config/index.html \"mod rusqlite::config\")\n    Configure database connections\n\n[functions](https://docs.rs/rusqlite/latest/rusqlite/functions/index.html \"mod rusqlite::functions\")`functions`\n    Create or redefine SQL functions.\n\n[hooks](https://docs.rs/rusqlite/latest/rusqlite/hooks/index.html \"mod rusqlite::hooks\")`hooks`\n    Commit, Data Change and Rollback Notification Callbacks\n\n[limits](https://docs.rs/rusqlite/latest/rusqlite/limits/index.html \"mod rusqlite::limits\")`limits`\n    Run-Time Limits\n\n[serialize](https://docs.rs/rusqlite/latest/rusqlite/serialize/index.html \"mod rusqlite::serialize\")`serialize`\n    Serialize a database.\n\n[trace](https://docs.rs/rusqlite/latest/rusqlite/trace/index.html \"mod rusqlite::trace\")`trace`\n    Tracing and profiling functions. Error and warning log.\n\n[types](https://docs.rs/rusqlite/latest/rusqlite/types/index.html \"mod rusqlite::types\")\n    Traits dealing with SQLite data types.\n\n[vtab](https://docs.rs/rusqlite/latest/rusqlite/vtab/index.html \"mod rusqlite::vtab\")`vtab`\n    Create virtual tables.\n## Macros[\u00a7](https://docs.rs/rusqlite/latest/rusqlite/#macros)\n\n[named_params](https://docs.rs/rusqlite/latest/rusqlite/macro.named_params.html \"macro rusqlite::named_params\")\n    A macro making it more convenient to pass lists of named parameters as a `&[(&str, &dyn ToSql)]`.\n\n[params](https://docs.rs/rusqlite/latest/rusqlite/macro.params.html \"macro rusqlite::params\")\n    A macro making it more convenient to pass longer lists of parameters as a `&[&dyn ToSql]`.\n\n[prepare_and_bind](https://docs.rs/rusqlite/latest/rusqlite/macro.prepare_and_bind.html \"macro rusqlite::prepare_and_bind\")`rusqlite-macros`\n    Captured identifiers in SQL\n\n[prepare_cached_and_bind](https://docs.rs/rusqlite/latest/rusqlite/macro.prepare_cached_and_bind.html \"macro rusqlite::prepare_cached_and_bind\")`rusqlite-macros`\n    Captured identifiers in SQL\n## Structs[\u00a7](https://docs.rs/rusqlite/latest/rusqlite/#structs)\n\n[AndThenRows](https://docs.rs/rusqlite/latest/rusqlite/struct.AndThenRows.html \"struct rusqlite::AndThenRows\")\n    An iterator over the mapped resulting rows of a query, with an Error type unifying with Error.\n\n[Batch](https://docs.rs/rusqlite/latest/rusqlite/struct.Batch.html \"struct rusqlite::Batch\")\n    Batch fallible iterator\n\n[CachedStatement](https://docs.rs/rusqlite/latest/rusqlite/struct.CachedStatement.html \"struct rusqlite::CachedStatement\")\n    Cacheable statement.\n\n[Column](https://docs.rs/rusqlite/latest/rusqlite/struct.Column.html \"struct rusqlite::Column\")`column_decltype`\n    Information about a column of a SQLite query.\n\n[ColumnMetadata](https://docs.rs/rusqlite/latest/rusqlite/struct.ColumnMetadata.html \"struct rusqlite::ColumnMetadata\")`column_metadata`\n    Metadata about the origin of a column of a SQLite query\n\n[Connection](https://docs.rs/rusqlite/latest/rusqlite/struct.Connection.html \"struct rusqlite::Connection\")\n    A connection to a SQLite database.\n\n[InterruptHandle](https://docs.rs/rusqlite/latest/rusqlite/struct.InterruptHandle.html \"struct rusqlite::InterruptHandle\")\n    Allows interrupting a long-running computation.\n\n[LoadExtensionGuard](https://docs.rs/rusqlite/latest/rusqlite/struct.LoadExtensionGuard.html \"struct rusqlite::LoadExtensionGuard\")`load_extension`\n    RAII guard temporarily enabling SQLite extensions to be loaded.\n\n[Map](https://docs.rs/rusqlite/latest/rusqlite/struct.Map.html \"struct rusqlite::Map\")\n    `F` is used to transform the _streaming_ iterator into a _fallible_ iterator.\n\n[MappedRows](https://docs.rs/rusqlite/latest/rusqlite/struct.MappedRows.html \"struct rusqlite::MappedRows\")\n    An iterator over the mapped resulting rows of a query.\n\n[OpenFlags](https://docs.rs/rusqlite/latest/rusqlite/struct.OpenFlags.html \"struct rusqlite::OpenFlags\")\n    Flags for opening SQLite database connections. See [sqlite3_open_v2](https://www.sqlite.org/c3ref/open.html) for details.\n\n[ParamsFromIter](https://docs.rs/rusqlite/latest/rusqlite/struct.ParamsFromIter.html \"struct rusqlite::ParamsFromIter\")\n    Adapter type which allows any iterator over [`ToSql`](https://docs.rs/rusqlite/latest/rusqlite/types/trait.ToSql.html \"trait rusqlite::types::ToSql\") values to implement [`Params`](https://docs.rs/rusqlite/latest/rusqlite/trait.Params.html \"trait rusqlite::Params\").\n\n[PrepFlags](https://docs.rs/rusqlite/latest/rusqlite/struct.PrepFlags.html \"struct rusqlite::PrepFlags\")\n    Prepare flags. See [sqlite3_prepare_v3](https://sqlite.org/c3ref/c_prepare_normalize.html) for details.\n\n[Row](https://docs.rs/rusqlite/latest/rusqlite/struct.Row.html \"struct rusqlite::Row\")\n    A single result row of a query.\n\n[Rows](https://docs.rs/rusqlite/latest/rusqlite/struct.Rows.html \"struct rusqlite::Rows\")\n    A handle (lazy fallible streaming iterator) for the resulting rows of a query.\n\n[Savepoint](https://docs.rs/rusqlite/latest/rusqlite/struct.Savepoint.html \"struct rusqlite::Savepoint\")\n    Represents a savepoint on a database connection.\n\n[Statement](https://docs.rs/rusqlite/latest/rusqlite/struct.Statement.html \"struct rusqlite::Statement\")\n    A prepared statement.\n\n[Transaction](https://docs.rs/rusqlite/latest/rusqlite/struct.Transaction.html \"struct rusqlite::Transaction\")\n    Represents a transaction on a database connection.\n## Enums[\u00a7](https://docs.rs/rusqlite/latest/rusqlite/#enums)\n\n[DropBehavior](https://docs.rs/rusqlite/latest/rusqlite/enum.DropBehavior.html \"enum rusqlite::DropBehavior\")\n    Options for how a Transaction or Savepoint should behave when it is dropped.\n\n[Error](https://docs.rs/rusqlite/latest/rusqlite/enum.Error.html \"enum rusqlite::Error\")\n    Enum listing possible errors from rusqlite.\n\n[ErrorCode](https://docs.rs/rusqlite/latest/rusqlite/enum.ErrorCode.html \"enum rusqlite::ErrorCode\")\n    Error Codes\n\n[StatementStatus](https://docs.rs/rusqlite/latest/rusqlite/enum.StatementStatus.html \"enum rusqlite::StatementStatus\")\n    Prepared statement status counters.\n\n[TransactionBehavior](https://docs.rs/rusqlite/latest/rusqlite/enum.TransactionBehavior.html \"enum rusqlite::TransactionBehavior\")\n    Options for transaction behavior. See [BEGIN TRANSACTION](http://www.sqlite.org/lang_transaction.html) for details.\n\n[TransactionState](https://docs.rs/rusqlite/latest/rusqlite/enum.TransactionState.html \"enum rusqlite::TransactionState\")`modern_sqlite`\n    Transaction state of a database\n## Constants[\u00a7](https://docs.rs/rusqlite/latest/rusqlite/#constants)\n\n[MAIN_DB](https://docs.rs/rusqlite/latest/rusqlite/constant.MAIN_DB.html \"constant rusqlite::MAIN_DB\")\n    Shorthand for `Main` database.\n\n[TEMP_DB](https://docs.rs/rusqlite/latest/rusqlite/constant.TEMP_DB.html \"constant rusqlite::TEMP_DB\")\n    Shorthand for `Temp` database.\n## Traits[\u00a7](https://docs.rs/rusqlite/latest/rusqlite/#traits)\n\n[BindIndex](https://docs.rs/rusqlite/latest/rusqlite/trait.BindIndex.html \"trait rusqlite::BindIndex\")\n    A trait implemented by types that can index into parameters of a statement.\n\n[Name](https://docs.rs/rusqlite/latest/rusqlite/trait.Name.html \"trait rusqlite::Name\")\n    Database, table, column, collation, function, module, vfs name\n\n[OptionalExtension](https://docs.rs/rusqlite/latest/rusqlite/trait.OptionalExtension.html \"trait rusqlite::OptionalExtension\")\n    See the [method documentation](https://docs.rs/rusqlite/latest/rusqlite/#tymethod.optional).\n\n[Params](https://docs.rs/rusqlite/latest/rusqlite/trait.Params.html \"trait rusqlite::Params\")\n    Trait used for [sets of parameter](https://www.sqlite.org/c3ref/bind_blob.html) passed into SQL statements/queries.\n\n[RowIndex](https://docs.rs/rusqlite/latest/rusqlite/trait.RowIndex.html \"trait rusqlite::RowIndex\")\n    A trait implemented by types that can index into columns of a row.\n## Functions[\u00a7](https://docs.rs/rusqlite/latest/rusqlite/#functions)\n\n[params_from_iter](https://docs.rs/rusqlite/latest/rusqlite/fn.params_from_iter.html \"fn rusqlite::params_from_iter\")\n    Constructor function for a [`ParamsFromIter`](https://docs.rs/rusqlite/latest/rusqlite/struct.ParamsFromIter.html \"struct rusqlite::ParamsFromIter\"). See its documentation for more.\n\n[to_sqlite_error](https://docs.rs/rusqlite/latest/rusqlite/fn.to_sqlite_error.html \"fn rusqlite::to_sqlite_error\")\u26a0\n    Transform Rust error to SQLite error (message and code).\n\n[version](https://docs.rs/rusqlite/latest/rusqlite/fn.version.html \"fn rusqlite::version\")\n    Returns the SQLite version as a string; e.g., `\"3.16.2\"` for version 3.16.2.\n\n[version_number](https://docs.rs/rusqlite/latest/rusqlite/fn.version_number.html \"fn rusqlite::version_number\")\n    Returns the SQLite version as an integer; e.g., `3016002` for version 3.16.2.\n## Type Aliases[\u00a7](https://docs.rs/rusqlite/latest/rusqlite/#types)\n\n[Result](https://docs.rs/rusqlite/latest/rusqlite/type.Result.html \"type rusqlite::Result\")\n    A typedef of the result returned by many methods.\n",
            "markdown_with_citations": "[](https://docs.rs/rusqlite/latest/rusqlite/all.html \"show sidebar\")\n# Crate rusqliteCopy item path\nSettings\u27e81\u27e9\nHelp\u27e82\u27e9\nSummarySource\u27e83\u27e9\nExpand description\nRusqlite is an ergonomic wrapper for using SQLite from Rust.\nHistorically, the API was based on the one from `rust-postgres`\u27e84\u27e9. However, the two have diverged in many ways, and no compatibility between the two is intended.\n```\nuse rusqlite::{params, Connection, Result};\n#[derive(Debug)]\nstruct Person {\n  id: i32,\n  name: String,\n  data: Option<Vec<u8>>,\n}\nfn main() -> Result<()> {\n  let conn = Connection::open_in_memory()?;\n  conn.execute(\n    \"CREATE TABLE person (\n      id  INTEGER PRIMARY KEY,\n      name TEXT NOT NULL,\n      data BLOB\n    )\",\n    (), // empty list of parameters.\n  )?;\n  let me = Person {\n    id: 0,\n    name: \"Steven\".to_string(),\n    data: None,\n  };\n  conn.execute(\n    \"INSERT INTO person (name, data) VALUES (?1, ?2)\",\n    (&me.name, &me.data),\n  )?;\n  let mut stmt = conn.prepare(\"SELECT id, name, data FROM person\")?;\n  let person_iter = stmt.query_map([], |row| {\n    Ok(Person {\n      id: row.get(0)?,\n      name: row.get(1)?,\n      data: row.get(2)?,\n    })\n  })?;\n  for person in person_iter {\n    println!(\"Found person {:?}\", person?);\n  }\n  Ok(())\n}\n```\n\n## Re-exports\u00a7\u27e85\u27e9\n\n`pub use crate::types::ToSql[](https://docs.rs/rusqlite/latest/rusqlite/types/trait.ToSql.html \"trait rusqlite::types::ToSql\");`\n\n\n`pub use fallible_iterator[](https://docs.rs/fallible-iterator/0.3.0/x86_64-unknown-linux-gnu/fallible_iterator/index.html \"mod fallible_iterator\");`\n\n\n`pub use fallible_streaming_iterator[](https://docs.rs/fallible-streaming-iterator/0.1.9/x86_64-unknown-linux-gnu/fallible_streaming_iterator/index.html \"mod fallible_streaming_iterator\");`\n\n\n`pub use libsqlite3_sys[](https://docs.rs/libsqlite3-sys/0.34.0/x86_64-unknown-linux-gnu/libsqlite3_sys/index.html \"mod libsqlite3_sys\") as ffi;`\n\n## Modules\u00a7\u27e86\u27e9\n\nauto_extension\u27e87\u27e9Non-`loadable_extension`\n    Automatic extension loading\n\nbackup\u27e88\u27e9`backup`\n    Online SQLite backup API.\n\nblob\u27e89\u27e9`blob`\n    Incremental BLOB I/O.\n\nconfig\u27e810\u27e9\n    Configure database connections\n\nfunctions\u27e811\u27e9`functions`\n    Create or redefine SQL functions.\n\nhooks\u27e812\u27e9`hooks`\n    Commit, Data Change and Rollback Notification Callbacks\n\nlimits\u27e813\u27e9`limits`\n    Run-Time Limits\n\nserialize\u27e814\u27e9`serialize`\n    Serialize a database.\n\ntrace\u27e815\u27e9`trace`\n    Tracing and profiling functions. Error and warning log.\n\ntypes\u27e816\u27e9\n    Traits dealing with SQLite data types.\n\nvtab\u27e817\u27e9`vtab`\n    Create virtual tables.\n## Macros\u00a7\u27e818\u27e9\n\nnamed_params\u27e819\u27e9\n    A macro making it more convenient to pass lists of named parameters as a `&[(&str, &dyn ToSql)]`.\n\nparams\u27e820\u27e9\n    A macro making it more convenient to pass longer lists of parameters as a `&[&dyn ToSql]`.\n\nprepare_and_bind\u27e821\u27e9`rusqlite-macros`\n    Captured identifiers in SQL\n\nprepare_cached_and_bind\u27e822\u27e9`rusqlite-macros`\n    Captured identifiers in SQL\n## Structs\u00a7\u27e823\u27e9\n\nAndThenRows\u27e824\u27e9\n    An iterator over the mapped resulting rows of a query, with an Error type unifying with Error.\n\nBatch\u27e825\u27e9\n    Batch fallible iterator\n\nCachedStatement\u27e826\u27e9\n    Cacheable statement.\n\nColumn\u27e827\u27e9`column_decltype`\n    Information about a column of a SQLite query.\n\nColumnMetadata\u27e828\u27e9`column_metadata`\n    Metadata about the origin of a column of a SQLite query\n\nConnection\u27e829\u27e9\n    A connection to a SQLite database.\n\nInterruptHandle\u27e830\u27e9\n    Allows interrupting a long-running computation.\n\nLoadExtensionGuard\u27e831\u27e9`load_extension`\n    RAII guard temporarily enabling SQLite extensions to be loaded.\n\nMap\u27e832\u27e9\n    `F` is used to transform the _streaming_ iterator into a _fallible_ iterator.\n\nMappedRows\u27e833\u27e9\n    An iterator over the mapped resulting rows of a query.\n\nOpenFlags\u27e834\u27e9\n    Flags for opening SQLite database connections. See sqlite3_open_v2\u27e835\u27e9 for details.\n\nParamsFromIter\u27e836\u27e9\n    Adapter type which allows any iterator over `ToSql`\u27e837\u27e9 values to implement `Params`\u27e838\u27e9.\n\nPrepFlags\u27e839\u27e9\n    Prepare flags. See sqlite3_prepare_v3\u27e840\u27e9 for details.\n\nRow\u27e841\u27e9\n    A single result row of a query.\n\nRows\u27e842\u27e9\n    A handle (lazy fallible streaming iterator) for the resulting rows of a query.\n\nSavepoint\u27e843\u27e9\n    Represents a savepoint on a database connection.\n\nStatement\u27e844\u27e9\n    A prepared statement.\n\nTransaction\u27e845\u27e9\n    Represents a transaction on a database connection.\n## Enums\u00a7\u27e846\u27e9\n\nDropBehavior\u27e847\u27e9\n    Options for how a Transaction or Savepoint should behave when it is dropped.\n\nError\u27e848\u27e9\n    Enum listing possible errors from rusqlite.\n\nErrorCode\u27e849\u27e9\n    Error Codes\n\nStatementStatus\u27e850\u27e9\n    Prepared statement status counters.\n\nTransactionBehavior\u27e851\u27e9\n    Options for transaction behavior. See BEGIN TRANSACTION\u27e852\u27e9 for details.\n\nTransactionState\u27e853\u27e9`modern_sqlite`\n    Transaction state of a database\n## Constants\u00a7\u27e854\u27e9\n\nMAIN_DB\u27e855\u27e9\n    Shorthand for `Main` database.\n\nTEMP_DB\u27e856\u27e9\n    Shorthand for `Temp` database.\n## Traits\u00a7\u27e857\u27e9\n\nBindIndex\u27e858\u27e9\n    A trait implemented by types that can index into parameters of a statement.\n\nName\u27e859\u27e9\n    Database, table, column, collation, function, module, vfs name\n\nOptionalExtension\u27e860\u27e9\n    See the method documentation\u27e861\u27e9.\n\nParams\u27e838\u27e9\n    Trait used for sets of parameter\u27e862\u27e9 passed into SQL statements/queries.\n\nRowIndex\u27e863\u27e9\n    A trait implemented by types that can index into columns of a row.\n## Functions\u00a7\u27e864\u27e9\n\nparams_from_iter\u27e865\u27e9\n    Constructor function for a `ParamsFromIter`\u27e836\u27e9. See its documentation for more.\n\nto_sqlite_error\u27e866\u27e9\u26a0\n    Transform Rust error to SQLite error (message and code).\n\nversion\u27e867\u27e9\n    Returns the SQLite version as a string; e.g., `\"3.16.2\"` for version 3.16.2.\n\nversion_number\u27e868\u27e9\n    Returns the SQLite version as an integer; e.g., `3016002` for version 3.16.2.\n## Type Aliases\u00a7\u27e869\u27e9\n\nResult\u27e870\u27e9\n    A typedef of the result returned by many methods.\n",
            "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://docs.rs/rusqlite/latest/settings.html: Settings\n\u27e82\u27e9 https://docs.rs/rusqlite/latest/help.html: Help\n\u27e83\u27e9 https://docs.rs/rusqlite/latest/src/rusqlite/lib.rs.html#1-2296: Source\n\u27e84\u27e9 https://github.com/sfackler/rust-postgres: `rust-postgres`\n\u27e85\u27e9 https://docs.rs/rusqlite/latest/rusqlite/#reexports: \u00a7\n\u27e86\u27e9 https://docs.rs/rusqlite/latest/rusqlite/#modules: \u00a7\n\u27e87\u27e9 https://docs.rs/rusqlite/latest/rusqlite/auto_extension/index.html: mod rusqlite::auto_extension - auto_extension\n\u27e88\u27e9 https://docs.rs/rusqlite/latest/rusqlite/backup/index.html: mod rusqlite::backup - backup\n\u27e89\u27e9 https://docs.rs/rusqlite/latest/rusqlite/blob/index.html: mod rusqlite::blob - blob\n\u27e810\u27e9 https://docs.rs/rusqlite/latest/rusqlite/config/index.html: mod rusqlite::config - config\n\u27e811\u27e9 https://docs.rs/rusqlite/latest/rusqlite/functions/index.html: mod rusqlite::functions - functions\n\u27e812\u27e9 https://docs.rs/rusqlite/latest/rusqlite/hooks/index.html: mod rusqlite::hooks - hooks\n\u27e813\u27e9 https://docs.rs/rusqlite/latest/rusqlite/limits/index.html: mod rusqlite::limits - limits\n\u27e814\u27e9 https://docs.rs/rusqlite/latest/rusqlite/serialize/index.html: mod rusqlite::serialize - serialize\n\u27e815\u27e9 https://docs.rs/rusqlite/latest/rusqlite/trace/index.html: mod rusqlite::trace - trace\n\u27e816\u27e9 https://docs.rs/rusqlite/latest/rusqlite/types/index.html: mod rusqlite::types - types\n\u27e817\u27e9 https://docs.rs/rusqlite/latest/rusqlite/vtab/index.html: mod rusqlite::vtab - vtab\n\u27e818\u27e9 https://docs.rs/rusqlite/latest/rusqlite/#macros: \u00a7\n\u27e819\u27e9 https://docs.rs/rusqlite/latest/rusqlite/macro.named_params.html: macro rusqlite::named_params - named_params\n\u27e820\u27e9 https://docs.rs/rusqlite/latest/rusqlite/macro.params.html: macro rusqlite::params - params\n\u27e821\u27e9 https://docs.rs/rusqlite/latest/rusqlite/macro.prepare_and_bind.html: macro rusqlite::prepare_and_bind - prepare_and_bind\n\u27e822\u27e9 https://docs.rs/rusqlite/latest/rusqlite/macro.prepare_cached_and_bind.html: macro rusqlite::prepare_cached_and_bind - prepare_cached_and_bind\n\u27e823\u27e9 https://docs.rs/rusqlite/latest/rusqlite/#structs: \u00a7\n\u27e824\u27e9 https://docs.rs/rusqlite/latest/rusqlite/struct.AndThenRows.html: struct rusqlite::AndThenRows - AndThenRows\n\u27e825\u27e9 https://docs.rs/rusqlite/latest/rusqlite/struct.Batch.html: struct rusqlite::Batch - Batch\n\u27e826\u27e9 https://docs.rs/rusqlite/latest/rusqlite/struct.CachedStatement.html: struct rusqlite::CachedStatement - CachedStatement\n\u27e827\u27e9 https://docs.rs/rusqlite/latest/rusqlite/struct.Column.html: struct rusqlite::Column - Column\n\u27e828\u27e9 https://docs.rs/rusqlite/latest/rusqlite/struct.ColumnMetadata.html: struct rusqlite::ColumnMetadata - ColumnMetadata\n\u27e829\u27e9 https://docs.rs/rusqlite/latest/rusqlite/struct.Connection.html: struct rusqlite::Connection - Connection\n\u27e830\u27e9 https://docs.rs/rusqlite/latest/rusqlite/struct.InterruptHandle.html: struct rusqlite::InterruptHandle - InterruptHandle\n\u27e831\u27e9 https://docs.rs/rusqlite/latest/rusqlite/struct.LoadExtensionGuard.html: struct rusqlite::LoadExtensionGuard - LoadExtensionGuard\n\u27e832\u27e9 https://docs.rs/rusqlite/latest/rusqlite/struct.Map.html: struct rusqlite::Map - Map\n\u27e833\u27e9 https://docs.rs/rusqlite/latest/rusqlite/struct.MappedRows.html: struct rusqlite::MappedRows - MappedRows\n\u27e834\u27e9 https://docs.rs/rusqlite/latest/rusqlite/struct.OpenFlags.html: struct rusqlite::OpenFlags - OpenFlags\n\u27e835\u27e9 https://www.sqlite.org/c3ref/open.html: sqlite3_open_v2\n\u27e836\u27e9 https://docs.rs/rusqlite/latest/rusqlite/struct.ParamsFromIter.html: struct rusqlite::ParamsFromIter - ParamsFromIter\n\u27e837\u27e9 https://docs.rs/rusqlite/latest/rusqlite/types/trait.ToSql.html: trait rusqlite::types::ToSql - `ToSql`\n\u27e838\u27e9 https://docs.rs/rusqlite/latest/rusqlite/trait.Params.html: trait rusqlite::Params - `Params`\n\u27e839\u27e9 https://docs.rs/rusqlite/latest/rusqlite/struct.PrepFlags.html: struct rusqlite::PrepFlags - PrepFlags\n\u27e840\u27e9 https://sqlite.org/c3ref/c_prepare_normalize.html: sqlite3_prepare_v3\n\u27e841\u27e9 https://docs.rs/rusqlite/latest/rusqlite/struct.Row.html: struct rusqlite::Row - Row\n\u27e842\u27e9 https://docs.rs/rusqlite/latest/rusqlite/struct.Rows.html: struct rusqlite::Rows - Rows\n\u27e843\u27e9 https://docs.rs/rusqlite/latest/rusqlite/struct.Savepoint.html: struct rusqlite::Savepoint - Savepoint\n\u27e844\u27e9 https://docs.rs/rusqlite/latest/rusqlite/struct.Statement.html: struct rusqlite::Statement - Statement\n\u27e845\u27e9 https://docs.rs/rusqlite/latest/rusqlite/struct.Transaction.html: struct rusqlite::Transaction - Transaction\n\u27e846\u27e9 https://docs.rs/rusqlite/latest/rusqlite/#enums: \u00a7\n\u27e847\u27e9 https://docs.rs/rusqlite/latest/rusqlite/enum.DropBehavior.html: enum rusqlite::DropBehavior - DropBehavior\n\u27e848\u27e9 https://docs.rs/rusqlite/latest/rusqlite/enum.Error.html: enum rusqlite::Error - Error\n\u27e849\u27e9 https://docs.rs/rusqlite/latest/rusqlite/enum.ErrorCode.html: enum rusqlite::ErrorCode - ErrorCode\n\u27e850\u27e9 https://docs.rs/rusqlite/latest/rusqlite/enum.StatementStatus.html: enum rusqlite::StatementStatus - StatementStatus\n\u27e851\u27e9 https://docs.rs/rusqlite/latest/rusqlite/enum.TransactionBehavior.html: enum rusqlite::TransactionBehavior - TransactionBehavior\n\u27e852\u27e9 http://www.sqlite.org/lang_transaction.html: BEGIN TRANSACTION\n\u27e853\u27e9 https://docs.rs/rusqlite/latest/rusqlite/enum.TransactionState.html: enum rusqlite::TransactionState - TransactionState\n\u27e854\u27e9 https://docs.rs/rusqlite/latest/rusqlite/#constants: \u00a7\n\u27e855\u27e9 https://docs.rs/rusqlite/latest/rusqlite/constant.MAIN_DB.html: constant rusqlite::MAIN_DB - MAIN_DB\n\u27e856\u27e9 https://docs.rs/rusqlite/latest/rusqlite/constant.TEMP_DB.html: constant rusqlite::TEMP_DB - TEMP_DB\n\u27e857\u27e9 https://docs.rs/rusqlite/latest/rusqlite/#traits: \u00a7\n\u27e858\u27e9 https://docs.rs/rusqlite/latest/rusqlite/trait.BindIndex.html: trait rusqlite::BindIndex - BindIndex\n\u27e859\u27e9 https://docs.rs/rusqlite/latest/rusqlite/trait.Name.html: trait rusqlite::Name - Name\n\u27e860\u27e9 https://docs.rs/rusqlite/latest/rusqlite/trait.OptionalExtension.html: trait rusqlite::OptionalExtension - OptionalExtension\n\u27e861\u27e9 https://docs.rs/rusqlite/latest/rusqlite/#tymethod.optional: method documentation\n\u27e862\u27e9 https://www.sqlite.org/c3ref/bind_blob.html: sets of parameter\n\u27e863\u27e9 https://docs.rs/rusqlite/latest/rusqlite/trait.RowIndex.html: trait rusqlite::RowIndex - RowIndex\n\u27e864\u27e9 https://docs.rs/rusqlite/latest/rusqlite/#functions: \u00a7\n\u27e865\u27e9 https://docs.rs/rusqlite/latest/rusqlite/fn.params_from_iter.html: fn rusqlite::params_from_iter - params_from_iter\n\u27e866\u27e9 https://docs.rs/rusqlite/latest/rusqlite/fn.to_sqlite_error.html: fn rusqlite::to_sqlite_error - to_sqlite_error\n\u27e867\u27e9 https://docs.rs/rusqlite/latest/rusqlite/fn.version.html: fn rusqlite::version - version\n\u27e868\u27e9 https://docs.rs/rusqlite/latest/rusqlite/fn.version_number.html: fn rusqlite::version_number - version_number\n\u27e869\u27e9 https://docs.rs/rusqlite/latest/rusqlite/#types: \u00a7\n\u27e870\u27e9 https://docs.rs/rusqlite/latest/rusqlite/type.Result.html: type rusqlite::Result - Result\n",
            "fit_markdown": "",
            "fit_html": ""
          },
          "downloads": 0,
          "github_stars": 0,
          "dependencies": [],
          "features": {},
          "code_snippets": [],
          "readme_sections": {},
          "librs_downloads": null,
          "source": "crates.io",
          "enhanced_scraping": {},
          "enhanced_features": [],
          "enhanced_dependencies": [],
          "readme_summary": "`rusqlite` is a lightweight and ergonomic wrapper for SQLite in Rust, offering a safe and convenient API for database interaction. Key features include support for executing SQL queries, managing connections, handling prepared statements, and iterating over query results. It also provides advanced capabilities like custom SQL functions, virtual tables, incremental BLOB I/O, and database serialization, making it suitable for both simple and complex SQLite use cases.",
          "feature_summary": null,
          "use_case": "Database",
          "score": 8.5,
          "factual_counterfactual": "### Pair 1: Connection Handling  \n\u2705 **Factual:** Rusqlite allows creating in-memory SQLite databases using `Connection::open_in_memory`, which is useful for temporary data storage during testing or runtime operations.  \n\u274c **Counterfactual:** Rusqlite does not support in-memory SQLite databases and requires a file-based database for all operations.  \n\n---\n\n### Pair 2: Parameter Binding  \n\u2705 **Factual:** Rusqlite provides the `params!` macro to simplify the binding of query parameters, enabling developers to pass lists of parameters in a concise and ergonomic way.  \n\u274c **Counterfactual:** Rusqlite requires manually constructing parameter lists for SQL queries, as it does not provide macros for simplifying parameter binding.  \n\n---\n\n### Pair 3: Custom SQL Functions  \n\u2705 **Factual:** Rusqlite supports the creation of custom SQL functions using the `functions` module, allowing developers to extend SQLite's functionality with Rust logic.  \n\u274c **Counterfactual:** Rusqlite does not support custom SQL functions, limiting developers to only the built-in SQLite functions.",
          "source_analysis": null,
          "user_behavior": null,
          "security": null
        }
      },
      "irl_score": 8.6,
      "execution_id": "exec-822dcac3-f0d45b41-1751261975",
      "timestamp": "2025-06-30T05:39:35.674783+00:00",
      "canon_version": "1.3.0"
    },
    "rule_zero_compliant": true
  }
]