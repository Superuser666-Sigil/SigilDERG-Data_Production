[
  {
    "execution_id": "exec-6373f2da-7d258021-1751261195",
    "timestamp": "2025-06-30T05:26:35.304332+00:00",
    "sacred_chain": {
      "input_data": "unicode-normalization",
      "context_sources": [
        "crates.io",
        "github.com",
        "lib.rs",
        "docs.rs"
      ],
      "reasoning_steps": [
        "Input canonicalized: 'unicode-normalization' -> 'unicode-normalization'",
        "Context gathered from 4 validated sources",
        "Metadata extracted: 4 fields",
        "Documentation analyzed: quality 7.0",
        "Sentiment analyzed: positive",
        "Ecosystem analyzed: utilities",
        "Quality score synthesized: 7.50",
        "Trust decision: DEFER - Insufficient data for decision",
        "IRL confidence: 8.600"
      ],
      "suggestion": "ALLOW: Positive community sentiment",
      "verdict": "DEFER",
      "audit_info": {
        "metadata": {
          "name": "unicode-normalization",
          "type": "rust_crate",
          "source": "manual_input",
          "extraction_method": "irl_engine"
        },
        "sentiment": {
          "quality_score": 7.0,
          "completeness": 0.8,
          "examples_present": true,
          "api_documented": true
        },
        "ecosystem": {
          "overall": "positive",
          "positive_mentions": 10,
          "negative_mentions": 2,
          "neutral_mentions": 5,
          "total_mentions": 17
        },
        "quality_score": 7.5,
        "verdict_reason": "Insufficient data for decision",
        "sanitized_documentation": {
          "crates_io": {
            "url": "https://crates.io/crates/unicode-normalization",
            "title": "unicode-normalization v0.1.24",
            "content": {
              "raw_markdown": "#  unicode-normalization v0.1.24\nThis crate provides functions for normalization of Unicode strings, including Canonical and Compatible Decomposition and Recomposition, as described in Unicode Standard Annex #15. \n  * [ #decomposition ](https://crates.io/keywords/decomposition)\n  * [ #normalization ](https://crates.io/keywords/normalization)\n  * [ #recomposition ](https://crates.io/keywords/recomposition)\n  * [ #text ](https://crates.io/keywords/text)\n  * [ #unicode ](https://crates.io/keywords/unicode)\n\n\n  * [ Readme ](https://crates.io/crates/unicode-normalization)\n  * [ 28 Versions ](https://crates.io/crates/unicode-normalization/versions)\n  * [ Dependencies ](https://crates.io/crates/unicode-normalization/dependencies)\n  * [ Dependents ](https://crates.io/crates/unicode-normalization/reverse_dependencies)\n\n\n## Metadata\n10 months ago \nv1.36.0 \n[ MIT ](https://choosealicense.com/licenses/mit) OR [ Apache-2.0 ](https://choosealicense.com/licenses/apache-2.0)\n124 KiB \n## Install\nRun the following Cargo command in your project directory:\ncargo add unicode-normalization\nOr add the following line to your Cargo.toml:\nunicode-normalization = \"0.1.24\"\n## Documentation\n[ docs.rs/unicode-normalization ](https://docs.rs/unicode-normalization/)\n## Repository\n[ github.com/unicode-rs/unicode-normalization ](https://github.com/unicode-rs/unicode-normalization)\n## Owners\n[ Report crate ](https://crates.io/support?crate=unicode-normalization&inquire=crate-violation)\n### Stats Overview\n289,992,457 Downloads all time\n28 Versions published\n#### Downloads over the last 90 days\nDisplay as \nStacked \n  * Stacked \n  * Unstacked \n\n\nLoading\u2026\n",
              "markdown_with_citations": "#  unicode-normalization v0.1.24\nThis crate provides functions for normalization of Unicode strings, including Canonical and Compatible Decomposition and Recomposition, as described in Unicode Standard Annex #15. \n  *  #decomposition \u27e81\u27e9\n  *  #normalization \u27e82\u27e9\n  *  #recomposition \u27e83\u27e9\n  *  #text \u27e84\u27e9\n  *  #unicode \u27e85\u27e9\n\n\n  *  Readme \u27e86\u27e9\n  *  28 Versions \u27e87\u27e9\n  *  Dependencies \u27e88\u27e9\n  *  Dependents \u27e89\u27e9\n\n\n## Metadata\n10 months ago \nv1.36.0 \n MIT \u27e810\u27e9 OR  Apache-2.0 \u27e811\u27e9\n124 KiB \n## Install\nRun the following Cargo command in your project directory:\ncargo add unicode-normalization\nOr add the following line to your Cargo.toml:\nunicode-normalization = \"0.1.24\"\n## Documentation\n docs.rs/unicode-normalization \u27e812\u27e9\n## Repository\n github.com/unicode-rs/unicode-normalization \u27e813\u27e9\n## Owners\n Report crate \u27e814\u27e9\n### Stats Overview\n289,992,457 Downloads all time\n28 Versions published\n#### Downloads over the last 90 days\nDisplay as \nStacked \n  * Stacked \n  * Unstacked \n\n\nLoading\u2026\n",
              "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://crates.io/keywords/decomposition:  #decomposition \n\u27e82\u27e9 https://crates.io/keywords/normalization:  #normalization \n\u27e83\u27e9 https://crates.io/keywords/recomposition:  #recomposition \n\u27e84\u27e9 https://crates.io/keywords/text:  #text \n\u27e85\u27e9 https://crates.io/keywords/unicode:  #unicode \n\u27e86\u27e9 https://crates.io/crates/unicode-normalization:  Readme \n\u27e87\u27e9 https://crates.io/crates/unicode-normalization/versions:  28 Versions \n\u27e88\u27e9 https://crates.io/crates/unicode-normalization/dependencies:  Dependencies \n\u27e89\u27e9 https://crates.io/crates/unicode-normalization/reverse_dependencies:  Dependents \n\u27e810\u27e9 https://choosealicense.com/licenses/mit:  MIT \n\u27e811\u27e9 https://choosealicense.com/licenses/apache-2.0:  Apache-2.0 \n\u27e812\u27e9 https://docs.rs/unicode-normalization/:  docs.rs/unicode-normalization \n\u27e813\u27e9 https://github.com/unicode-rs/unicode-normalization:  github.com/unicode-rs/unicode-normalization \n\u27e814\u27e9 https://crates.io/support?crate=unicode-normalization&inquire=crate-violation:  Report crate \n",
              "fit_markdown": "",
              "fit_html": ""
            },
            "structured_data": {},
            "quality_score": 3.0,
            "extraction_method": "crawl4ai",
            "error": null,
            "metadata": {
              "doc_type": "docs",
              "content_length": 1645,
              "has_structured_data": false,
              "crawl_success": true
            },
            "timestamp": "114985.2828611"
          },
          "docs_rs": {
            "url": "https://docs.rs/unicode-normalization",
            "title": "Crate unicode_normalizationCopy item path",
            "content": {
              "raw_markdown": "[](https://docs.rs/unicode-normalization/latest/unicode_normalization/all.html \"show sidebar\")\n# Crate unicode_normalizationCopy item path\n[Settings](https://docs.rs/unicode-normalization/latest/settings.html)\n[Help](https://docs.rs/unicode-normalization/latest/help.html)\nSummary[Source](https://docs.rs/unicode-normalization/latest/src/unicode_normalization/lib.rs.html#11-227)\nExpand description\nUnicode character composition and decomposition utilities as described in [Unicode Standard Annex #15](http://www.unicode.org/reports/tr15/).\n```\nextern crate unicode_normalization;\nuse unicode_normalization::char::compose;\nuse unicode_normalization::UnicodeNormalization;\nfn main() {\n  assert_eq!(compose('A','\\u{30a}'), Some('\u00c5'));\n  let s = \"\u212b\u2126\";\n  let c = s.nfc().collect::<String>();\n  assert_eq!(c, \"\u00c5\u03a9\");\n}\n```\n\n## [\u00a7](https://docs.rs/unicode-normalization/latest/unicode_normalization/#cratesio)crates.io\nYou can use this package in your project by adding the following to your `Cargo.toml`:\n```\n[dependencies]\nunicode-normalization = \"0.1.20\"\n```\n\n## Modules[\u00a7](https://docs.rs/unicode-normalization/latest/unicode_normalization/#modules)\n\n[char](https://docs.rs/unicode-normalization/latest/unicode_normalization/char/index.html \"mod unicode_normalization::char\")\n    Methods for composing and decomposing characters.\n## Structs[\u00a7](https://docs.rs/unicode-normalization/latest/unicode_normalization/#structs)\n\n[Decompositions](https://docs.rs/unicode-normalization/latest/unicode_normalization/struct.Decompositions.html \"struct unicode_normalization::Decompositions\")\n    External iterator for a string decomposition\u2019s characters.\n\n[Recompositions](https://docs.rs/unicode-normalization/latest/unicode_normalization/struct.Recompositions.html \"struct unicode_normalization::Recompositions\")\n    External iterator for a string recomposition\u2019s characters.\n\n[Replacements](https://docs.rs/unicode-normalization/latest/unicode_normalization/struct.Replacements.html \"struct unicode_normalization::Replacements\")\n    External iterator for replacements for a string\u2019s characters.\n\n[StreamSafe](https://docs.rs/unicode-normalization/latest/unicode_normalization/struct.StreamSafe.html \"struct unicode_normalization::StreamSafe\")\n    UAX15-D4: This iterator keeps track of how many non-starters there have been since the last starter in _NFKD_ and will emit a Combining Grapheme Joiner (U+034F) if the count exceeds 30.\n## Enums[\u00a7](https://docs.rs/unicode-normalization/latest/unicode_normalization/#enums)\n\n[IsNormalized](https://docs.rs/unicode-normalization/latest/unicode_normalization/enum.IsNormalized.html \"enum unicode_normalization::IsNormalized\")\n    QuickCheck quickly determines if a string is normalized, it can return `Maybe`\n## Constants[\u00a7](https://docs.rs/unicode-normalization/latest/unicode_normalization/#constants)\n\n[UNICODE_VERSION](https://docs.rs/unicode-normalization/latest/unicode_normalization/constant.UNICODE_VERSION.html \"constant unicode_normalization::UNICODE_VERSION\")\n\n## Traits[\u00a7](https://docs.rs/unicode-normalization/latest/unicode_normalization/#traits)\n\n[UnicodeNormalization](https://docs.rs/unicode-normalization/latest/unicode_normalization/trait.UnicodeNormalization.html \"trait unicode_normalization::UnicodeNormalization\")\n    Methods for iterating over strings while applying Unicode normalizations as described in [Unicode Standard Annex #15](http://www.unicode.org/reports/tr15/).\n## Functions[\u00a7](https://docs.rs/unicode-normalization/latest/unicode_normalization/#functions)\n\n[is_nfc](https://docs.rs/unicode-normalization/latest/unicode_normalization/fn.is_nfc.html \"fn unicode_normalization::is_nfc\")\n    Authoritatively check if a string is in NFC.\n\n[is_nfc_quick](https://docs.rs/unicode-normalization/latest/unicode_normalization/fn.is_nfc_quick.html \"fn unicode_normalization::is_nfc_quick\")\n    Quickly check if a string is in NFC, potentially returning `IsNormalized::Maybe` if further checks are necessary. In this case a check like `s.chars().nfc().eq(s.chars())` should suffice.\n\n[is_nfc_stream_safe](https://docs.rs/unicode-normalization/latest/unicode_normalization/fn.is_nfc_stream_safe.html \"fn unicode_normalization::is_nfc_stream_safe\")\n    Authoritatively check if a string is Stream-Safe NFC.\n\n[is_nfc_stream_safe_quick](https://docs.rs/unicode-normalization/latest/unicode_normalization/fn.is_nfc_stream_safe_quick.html \"fn unicode_normalization::is_nfc_stream_safe_quick\")\n    Quickly check if a string is Stream-Safe NFC.\n\n[is_nfd](https://docs.rs/unicode-normalization/latest/unicode_normalization/fn.is_nfd.html \"fn unicode_normalization::is_nfd\")\n    Authoritatively check if a string is in NFD.\n\n[is_nfd_quick](https://docs.rs/unicode-normalization/latest/unicode_normalization/fn.is_nfd_quick.html \"fn unicode_normalization::is_nfd_quick\")\n    Quickly check if a string is in NFD.\n\n[is_nfd_stream_safe](https://docs.rs/unicode-normalization/latest/unicode_normalization/fn.is_nfd_stream_safe.html \"fn unicode_normalization::is_nfd_stream_safe\")\n    Authoritatively check if a string is Stream-Safe NFD.\n\n[is_nfd_stream_safe_quick](https://docs.rs/unicode-normalization/latest/unicode_normalization/fn.is_nfd_stream_safe_quick.html \"fn unicode_normalization::is_nfd_stream_safe_quick\")\n    Quickly check if a string is Stream-Safe NFD.\n\n[is_nfkc](https://docs.rs/unicode-normalization/latest/unicode_normalization/fn.is_nfkc.html \"fn unicode_normalization::is_nfkc\")\n    Authoritatively check if a string is in NFKC.\n\n[is_nfkc_quick](https://docs.rs/unicode-normalization/latest/unicode_normalization/fn.is_nfkc_quick.html \"fn unicode_normalization::is_nfkc_quick\")\n    Quickly check if a string is in NFKC.\n\n[is_nfkd](https://docs.rs/unicode-normalization/latest/unicode_normalization/fn.is_nfkd.html \"fn unicode_normalization::is_nfkd\")\n    Authoritatively check if a string is in NFKD.\n\n[is_nfkd_quick](https://docs.rs/unicode-normalization/latest/unicode_normalization/fn.is_nfkd_quick.html \"fn unicode_normalization::is_nfkd_quick\")\n    Quickly check if a string is in NFKD.\n",
              "markdown_with_citations": "[](https://docs.rs/unicode-normalization/latest/unicode_normalization/all.html \"show sidebar\")\n# Crate unicode_normalizationCopy item path\nSettings\u27e81\u27e9\nHelp\u27e82\u27e9\nSummarySource\u27e83\u27e9\nExpand description\nUnicode character composition and decomposition utilities as described in Unicode Standard Annex #15\u27e84\u27e9.\n```\nextern crate unicode_normalization;\nuse unicode_normalization::char::compose;\nuse unicode_normalization::UnicodeNormalization;\nfn main() {\n  assert_eq!(compose('A','\\u{30a}'), Some('\u00c5'));\n  let s = \"\u212b\u2126\";\n  let c = s.nfc().collect::<String>();\n  assert_eq!(c, \"\u00c5\u03a9\");\n}\n```\n\n## \u00a7\u27e85\u27e9crates.io\nYou can use this package in your project by adding the following to your `Cargo.toml`:\n```\n[dependencies]\nunicode-normalization = \"0.1.20\"\n```\n\n## Modules\u00a7\u27e86\u27e9\n\nchar\u27e87\u27e9\n    Methods for composing and decomposing characters.\n## Structs\u00a7\u27e88\u27e9\n\nDecompositions\u27e89\u27e9\n    External iterator for a string decomposition\u2019s characters.\n\nRecompositions\u27e810\u27e9\n    External iterator for a string recomposition\u2019s characters.\n\nReplacements\u27e811\u27e9\n    External iterator for replacements for a string\u2019s characters.\n\nStreamSafe\u27e812\u27e9\n    UAX15-D4: This iterator keeps track of how many non-starters there have been since the last starter in _NFKD_ and will emit a Combining Grapheme Joiner (U+034F) if the count exceeds 30.\n## Enums\u00a7\u27e813\u27e9\n\nIsNormalized\u27e814\u27e9\n    QuickCheck quickly determines if a string is normalized, it can return `Maybe`\n## Constants\u00a7\u27e815\u27e9\n\nUNICODE_VERSION\u27e816\u27e9\n\n## Traits\u00a7\u27e817\u27e9\n\nUnicodeNormalization\u27e818\u27e9\n    Methods for iterating over strings while applying Unicode normalizations as described in Unicode Standard Annex #15\u27e84\u27e9.\n## Functions\u00a7\u27e819\u27e9\n\nis_nfc\u27e820\u27e9\n    Authoritatively check if a string is in NFC.\n\nis_nfc_quick\u27e821\u27e9\n    Quickly check if a string is in NFC, potentially returning `IsNormalized::Maybe` if further checks are necessary. In this case a check like `s.chars().nfc().eq(s.chars())` should suffice.\n\nis_nfc_stream_safe\u27e822\u27e9\n    Authoritatively check if a string is Stream-Safe NFC.\n\nis_nfc_stream_safe_quick\u27e823\u27e9\n    Quickly check if a string is Stream-Safe NFC.\n\nis_nfd\u27e824\u27e9\n    Authoritatively check if a string is in NFD.\n\nis_nfd_quick\u27e825\u27e9\n    Quickly check if a string is in NFD.\n\nis_nfd_stream_safe\u27e826\u27e9\n    Authoritatively check if a string is Stream-Safe NFD.\n\nis_nfd_stream_safe_quick\u27e827\u27e9\n    Quickly check if a string is Stream-Safe NFD.\n\nis_nfkc\u27e828\u27e9\n    Authoritatively check if a string is in NFKC.\n\nis_nfkc_quick\u27e829\u27e9\n    Quickly check if a string is in NFKC.\n\nis_nfkd\u27e830\u27e9\n    Authoritatively check if a string is in NFKD.\n\nis_nfkd_quick\u27e831\u27e9\n    Quickly check if a string is in NFKD.\n",
              "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://docs.rs/unicode-normalization/latest/settings.html: Settings\n\u27e82\u27e9 https://docs.rs/unicode-normalization/latest/help.html: Help\n\u27e83\u27e9 https://docs.rs/unicode-normalization/latest/src/unicode_normalization/lib.rs.html#11-227: Source\n\u27e84\u27e9 http://www.unicode.org/reports/tr15/: Unicode Standard Annex #15\n\u27e85\u27e9 https://docs.rs/unicode-normalization/latest/unicode_normalization/#cratesio: \u00a7\n\u27e86\u27e9 https://docs.rs/unicode-normalization/latest/unicode_normalization/#modules: \u00a7\n\u27e87\u27e9 https://docs.rs/unicode-normalization/latest/unicode_normalization/char/index.html: mod unicode_normalization::char - char\n\u27e88\u27e9 https://docs.rs/unicode-normalization/latest/unicode_normalization/#structs: \u00a7\n\u27e89\u27e9 https://docs.rs/unicode-normalization/latest/unicode_normalization/struct.Decompositions.html: struct unicode_normalization::Decompositions - Decompositions\n\u27e810\u27e9 https://docs.rs/unicode-normalization/latest/unicode_normalization/struct.Recompositions.html: struct unicode_normalization::Recompositions - Recompositions\n\u27e811\u27e9 https://docs.rs/unicode-normalization/latest/unicode_normalization/struct.Replacements.html: struct unicode_normalization::Replacements - Replacements\n\u27e812\u27e9 https://docs.rs/unicode-normalization/latest/unicode_normalization/struct.StreamSafe.html: struct unicode_normalization::StreamSafe - StreamSafe\n\u27e813\u27e9 https://docs.rs/unicode-normalization/latest/unicode_normalization/#enums: \u00a7\n\u27e814\u27e9 https://docs.rs/unicode-normalization/latest/unicode_normalization/enum.IsNormalized.html: enum unicode_normalization::IsNormalized - IsNormalized\n\u27e815\u27e9 https://docs.rs/unicode-normalization/latest/unicode_normalization/#constants: \u00a7\n\u27e816\u27e9 https://docs.rs/unicode-normalization/latest/unicode_normalization/constant.UNICODE_VERSION.html: constant unicode_normalization::UNICODE_VERSION - UNICODE_VERSION\n\u27e817\u27e9 https://docs.rs/unicode-normalization/latest/unicode_normalization/#traits: \u00a7\n\u27e818\u27e9 https://docs.rs/unicode-normalization/latest/unicode_normalization/trait.UnicodeNormalization.html: trait unicode_normalization::UnicodeNormalization - UnicodeNormalization\n\u27e819\u27e9 https://docs.rs/unicode-normalization/latest/unicode_normalization/#functions: \u00a7\n\u27e820\u27e9 https://docs.rs/unicode-normalization/latest/unicode_normalization/fn.is_nfc.html: fn unicode_normalization::is_nfc - is_nfc\n\u27e821\u27e9 https://docs.rs/unicode-normalization/latest/unicode_normalization/fn.is_nfc_quick.html: fn unicode_normalization::is_nfc_quick - is_nfc_quick\n\u27e822\u27e9 https://docs.rs/unicode-normalization/latest/unicode_normalization/fn.is_nfc_stream_safe.html: fn unicode_normalization::is_nfc_stream_safe - is_nfc_stream_safe\n\u27e823\u27e9 https://docs.rs/unicode-normalization/latest/unicode_normalization/fn.is_nfc_stream_safe_quick.html: fn unicode_normalization::is_nfc_stream_safe_quick - is_nfc_stream_safe_quick\n\u27e824\u27e9 https://docs.rs/unicode-normalization/latest/unicode_normalization/fn.is_nfd.html: fn unicode_normalization::is_nfd - is_nfd\n\u27e825\u27e9 https://docs.rs/unicode-normalization/latest/unicode_normalization/fn.is_nfd_quick.html: fn unicode_normalization::is_nfd_quick - is_nfd_quick\n\u27e826\u27e9 https://docs.rs/unicode-normalization/latest/unicode_normalization/fn.is_nfd_stream_safe.html: fn unicode_normalization::is_nfd_stream_safe - is_nfd_stream_safe\n\u27e827\u27e9 https://docs.rs/unicode-normalization/latest/unicode_normalization/fn.is_nfd_stream_safe_quick.html: fn unicode_normalization::is_nfd_stream_safe_quick - is_nfd_stream_safe_quick\n\u27e828\u27e9 https://docs.rs/unicode-normalization/latest/unicode_normalization/fn.is_nfkc.html: fn unicode_normalization::is_nfkc - is_nfkc\n\u27e829\u27e9 https://docs.rs/unicode-normalization/latest/unicode_normalization/fn.is_nfkc_quick.html: fn unicode_normalization::is_nfkc_quick - is_nfkc_quick\n\u27e830\u27e9 https://docs.rs/unicode-normalization/latest/unicode_normalization/fn.is_nfkd.html: fn unicode_normalization::is_nfkd - is_nfkd\n\u27e831\u27e9 https://docs.rs/unicode-normalization/latest/unicode_normalization/fn.is_nfkd_quick.html: fn unicode_normalization::is_nfkd_quick - is_nfkd_quick\n",
              "fit_markdown": "",
              "fit_html": ""
            },
            "structured_data": {},
            "quality_score": 4.0,
            "extraction_method": "crawl4ai",
            "error": null,
            "metadata": {
              "doc_type": "docs",
              "content_length": 6057,
              "has_structured_data": false,
              "crawl_success": true
            },
            "timestamp": "114985.9939594"
          },
          "lib_rs": {
            "url": "https://lib.rs/crates/unicode-normalization",
            "title": "Untitled",
            "content": {
              "raw_markdown": "###  [28 releases](https://lib.rs/crates/unicode-normalization/versions)\n0.1.24 |  Sep 17, 2024   \n---|---  \n0.1.23 |  Feb 20, 2024   \n0.1.22 |  Sep 16, 2022   \n0.1.21 |  Jul 1, 2022   \n0.1.1 |  Jul 9, 2015   \n#**12** in [Text processing](https://lib.rs/text-processing \"Crates to deal with the complexities of human language when expressed in textual form.\")\nDownload history 2222615/week @ 2025-01-28 2207979/week @ 2025-02-04 1987808/week @ 2025-02-11 2273392/week @ 2025-02-18 2066550/week @ 2025-02-25 2072128/week @ 2025-03-04 2109985/week @ 2025-03-11 2595644/week @ 2025-03-18 2601731/week @ 2025-03-25 2274982/week @ 2025-04-01 2362841/week @ 2025-04-08 1996604/week @ 2025-04-15 2033936/week @ 2025-04-22 1906757/week @ 2025-04-29 2035680/week @ 2025-05-06 1716080/week @ 2025-05-13\n**7,979,886** downloads per month Used in [**10,732** crates (235 directly)](https://lib.rs/crates/unicode-normalization/rev)\n**MIT/Apache**\n710KB  **24K** SLoC\n# unicode-normalization\n[![Build Status](https://img.gs/czjpqfbdkz/full/https://travis-ci.org/unicode-rs/unicode-normalization.svg)](https://travis-ci.org/unicode-rs/unicode-normalization) [![Docs](https://img.gs/czjpqfbdkz/full/https://docs.rs/unicode-normalization/badge.svg)](https://docs.rs/unicode-normalization/)\nUnicode character composition and decomposition utilities as described in [Unicode Standard Annex #15](http://www.unicode.org/reports/tr15/).\nThis crate requires Rust 1.36+.\n```\n``extern` `crate` unicode_normalization`;`\n`use` `unicode_normalization`::```char`::``compose`;`\n`use` `unicode_normalization`::``UnicodeNormalization`;`\n``fn` `main`````(````)``````{`\n  `assert_eq!``(``compose``(```'`A`'```,```'``\\u{30a}``'```)``,` `Some``(```'`\u00c5`'```)``)``;`\n  `let` s `=` ``\"`\u212b\u2126`\"```;`\n  `let` c `=` s`.``nfc``(``)``.``collect`::````<``String``>```(``)``;`\n  `assert_eq!``(`c`,` ``\"`\u00c5\u03a9`\"```)``;`\n```}```\n`\n```\n\n## crates.io\nYou can use this package in your project by adding the following to your ``Cargo.toml``:\n```\n```[``dependencies``]`\n`unicode-normalization ``=` ``\"`0.1.23`\"``\n``\n```\n\n## ``no_std`` + ``alloc`` support\nThis crate is completely ``no_std`` + ``alloc`` compatible. This can be enabled by disabling the ``std`` feature, i.e. specifying ``default`-`features `=` `false``` for this crate on your ``Cargo.toml``.\n#### Dependencies\n  * [tinyvec](https://lib.rs/crates/tinyvec \"1\")[+alloc](https://lib.rs/crates/tinyvec/features#feature-alloc)\n\n\n#### [Other feature](https://lib.rs/crates/unicode-normalization/features)\n  * [std](https://lib.rs/crates/unicode-normalization/features#feature-std)\n\n\n  *[SLoC]: Lines of code, excluding comments\n",
              "markdown_with_citations": "###  28 releases\u27e81\u27e9\n0.1.24 |  Sep 17, 2024   \n---|---  \n0.1.23 |  Feb 20, 2024   \n0.1.22 |  Sep 16, 2022   \n0.1.21 |  Jul 1, 2022   \n0.1.1 |  Jul 9, 2015   \n#**12** in Text processing\u27e82\u27e9\nDownload history 2222615/week @ 2025-01-28 2207979/week @ 2025-02-04 1987808/week @ 2025-02-11 2273392/week @ 2025-02-18 2066550/week @ 2025-02-25 2072128/week @ 2025-03-04 2109985/week @ 2025-03-11 2595644/week @ 2025-03-18 2601731/week @ 2025-03-25 2274982/week @ 2025-04-01 2362841/week @ 2025-04-08 1996604/week @ 2025-04-15 2033936/week @ 2025-04-22 1906757/week @ 2025-04-29 2035680/week @ 2025-05-06 1716080/week @ 2025-05-13\n**7,979,886** downloads per month Used in **10,732** crates (235 directly)\u27e83\u27e9\n**MIT/Apache**\n710KB  **24K** SLoC\n# unicode-normalization\n![Build Status\u27e84\u27e9](https://travis-ci.org/unicode-rs/unicode-normalization) ![Docs\u27e85\u27e9](https://docs.rs/unicode-normalization/)\nUnicode character composition and decomposition utilities as described in Unicode Standard Annex #15\u27e86\u27e9.\nThis crate requires Rust 1.36+.\n```\n``extern` `crate` unicode_normalization`;`\n`use` `unicode_normalization`::```char`::``compose`;`\n`use` `unicode_normalization`::``UnicodeNormalization`;`\n``fn` `main`````(````)``````{`\n  `assert_eq!``(``compose``(```'`A`'```,```'``\\u{30a}``'```)``,` `Some``(```'`\u00c5`'```)``)``;`\n  `let` s `=` ``\"`\u212b\u2126`\"```;`\n  `let` c `=` s`.``nfc``(``)``.``collect`::````<``String``>```(``)``;`\n  `assert_eq!``(`c`,` ``\"`\u00c5\u03a9`\"```)``;`\n```}```\n`\n```\n\n## crates.io\nYou can use this package in your project by adding the following to your ``Cargo.toml``:\n```\n```[``dependencies``]`\n`unicode-normalization ``=` ``\"`0.1.23`\"``\n``\n```\n\n## ``no_std`` + ``alloc`` support\nThis crate is completely ``no_std`` + ``alloc`` compatible. This can be enabled by disabling the ``std`` feature, i.e. specifying ``default`-`features `=` `false``` for this crate on your ``Cargo.toml``.\n#### Dependencies\n  * tinyvec\u27e87\u27e9+alloc\u27e88\u27e9\n\n\n#### Other feature\u27e89\u27e9\n  * std\u27e810\u27e9\n\n\n  *[SLoC]: Lines of code, excluding comments\n",
              "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://lib.rs/crates/unicode-normalization/versions: 28 releases\n\u27e82\u27e9 https://lib.rs/text-processing: Crates to deal with the complexities of human language when expressed in textual form. - Text processing\n\u27e83\u27e9 https://lib.rs/crates/unicode-normalization/rev: **10,732** crates (235 directly)\n\u27e84\u27e9 https://img.gs/czjpqfbdkz/full/https://travis-ci.org/unicode-rs/unicode-normalization.svg: ![Build Status\n\u27e85\u27e9 https://img.gs/czjpqfbdkz/full/https://docs.rs/unicode-normalization/badge.svg: ![Docs\n\u27e86\u27e9 http://www.unicode.org/reports/tr15/: Unicode Standard Annex #15\n\u27e87\u27e9 https://lib.rs/crates/tinyvec: 1 - tinyvec\n\u27e88\u27e9 https://lib.rs/crates/tinyvec/features#feature-alloc: +alloc\n\u27e89\u27e9 https://lib.rs/crates/unicode-normalization/features: Other feature\n\u27e810\u27e9 https://lib.rs/crates/unicode-normalization/features#feature-std: std\n",
              "fit_markdown": "",
              "fit_html": ""
            },
            "structured_data": {},
            "quality_score": 3.0,
            "extraction_method": "crawl4ai",
            "error": null,
            "metadata": {
              "doc_type": "docs",
              "content_length": 2629,
              "has_structured_data": false,
              "crawl_success": true
            },
            "timestamp": "114986.3855828"
          }
        },
        "crate_analysis": {
          "status": "completed",
          "check": [
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#tinyvec_macros@0.1.1",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\tinyvec_macros-0.1.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "tinyvec_macros",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\tinyvec_macros-0.1.1\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpfgcuzmq6\\unicode-normalization-0.1.24\\target\\debug\\deps\\libtinyvec_macros-497427804be4e0f4.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#tinyvec@1.9.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\tinyvec-1.9.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "tinyvec",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\tinyvec-1.9.0\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "alloc",
                "default",
                "tinyvec_macros"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpfgcuzmq6\\unicode-normalization-0.1.24\\target\\debug\\deps\\libtinyvec-eb2320a67abf7dfb.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpfgcuzmq6/unicode-normalization-0.1.24#unicode-normalization@0.1.24",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpfgcuzmq6\\unicode-normalization-0.1.24\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "unicode_normalization",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpfgcuzmq6\\unicode-normalization-0.1.24\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpfgcuzmq6\\unicode-normalization-0.1.24\\target\\debug\\deps\\libunicode_normalization-6cc9c755bbe20757.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "build-finished",
              "success": true
            }
          ],
          "clippy": [
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#tinyvec_macros@0.1.1",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\tinyvec_macros-0.1.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "tinyvec_macros",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\tinyvec_macros-0.1.1\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpfgcuzmq6\\unicode-normalization-0.1.24\\target\\debug\\deps\\libtinyvec_macros-497427804be4e0f4.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#tinyvec@1.9.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\tinyvec-1.9.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "tinyvec",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\tinyvec-1.9.0\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "alloc",
                "default",
                "tinyvec_macros"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpfgcuzmq6\\unicode-normalization-0.1.24\\target\\debug\\deps\\libtinyvec-eb2320a67abf7dfb.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpfgcuzmq6/unicode-normalization-0.1.24#unicode-normalization@0.1.24",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpfgcuzmq6\\unicode-normalization-0.1.24\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "unicode_normalization",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpfgcuzmq6\\unicode-normalization-0.1.24\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: this `match` expression can be replaced with `?`\n  --> src\\stream_safe.rs:37:23\n   |\n37 |           let next_ch = match self.buffer.take().or_else(|| self.iter.next()) {\n   |  _______________________^\n38 | |             None => return None,\n39 | |             Some(c) => c,\n40 | |         };\n   | |_________^ help: try instead: `self.buffer.take().or_else(|| self.iter.next())?`\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#question_mark\n   = note: `#[warn(clippy::question_mark)]` on by default\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#question_mark",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "`#[warn(clippy::question_mark)]` on by default",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "try instead",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 1167,
                        "byte_start": 1043,
                        "column_end": 10,
                        "column_start": 23,
                        "expansion": null,
                        "file_name": "src\\stream_safe.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 40,
                        "line_start": 37,
                        "suggested_replacement": "self.buffer.take().or_else(|| self.iter.next())?",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 78,
                            "highlight_start": 23,
                            "text": "        let next_ch = match self.buffer.take().or_else(|| self.iter.next()) {"
                          },
                          {
                            "highlight_end": 33,
                            "highlight_start": 1,
                            "text": "            None => return None,"
                          },
                          {
                            "highlight_end": 26,
                            "highlight_start": 1,
                            "text": "            Some(c) => c,"
                          },
                          {
                            "highlight_end": 10,
                            "highlight_start": 1,
                            "text": "        };"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::question_mark",
                  "explanation": null
                },
                "level": "warning",
                "message": "this `match` expression can be replaced with `?`",
                "spans": [
                  {
                    "byte_end": 1167,
                    "byte_start": 1043,
                    "column_end": 10,
                    "column_start": 23,
                    "expansion": null,
                    "file_name": "src\\stream_safe.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 40,
                    "line_start": 37,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 78,
                        "highlight_start": 23,
                        "text": "        let next_ch = match self.buffer.take().or_else(|| self.iter.next()) {"
                      },
                      {
                        "highlight_end": 33,
                        "highlight_start": 1,
                        "text": "            None => return None,"
                      },
                      {
                        "highlight_end": 26,
                        "highlight_start": 1,
                        "text": "            Some(c) => c,"
                      },
                      {
                        "highlight_end": 10,
                        "highlight_start": 1,
                        "text": "        };"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-artifact",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpfgcuzmq6/unicode-normalization-0.1.24#unicode-normalization@0.1.24",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpfgcuzmq6\\unicode-normalization-0.1.24\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "unicode_normalization",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpfgcuzmq6\\unicode-normalization-0.1.24\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpfgcuzmq6\\unicode-normalization-0.1.24\\target\\debug\\deps\\libunicode_normalization-4485479dac720685.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "build-finished",
              "success": true
            }
          ],
          "audit": {
            "database": {
              "advisory-count": 787,
              "last-commit": "7573f55ba337263f61167dbb0ea926cdc7c8eb5d",
              "last-updated": "2025-06-17T11:04:25+02:00"
            },
            "lockfile": {
              "dependency-count": 3
            },
            "settings": {
              "target_arch": [],
              "target_os": [],
              "severity": null,
              "ignore": [],
              "informational_warnings": [
                "unmaintained",
                "unsound",
                "notice"
              ]
            },
            "vulnerabilities": {
              "found": false,
              "count": 0,
              "list": []
            },
            "warnings": {}
          },
          "note": "Crate analysis performed with stable toolchain."
        },
        "crate_metadata": {
          "name": "unicode-normalization",
          "version": "0.1.24",
          "description": "ALLOW: Positive community sentiment",
          "repository": "",
          "keywords": [],
          "categories": [],
          "readme": {
            "raw_markdown": "[](https://docs.rs/unicode-normalization/latest/unicode_normalization/all.html \"show sidebar\")\n# Crate unicode_normalizationCopy item path\n[Settings](https://docs.rs/unicode-normalization/latest/settings.html)\n[Help](https://docs.rs/unicode-normalization/latest/help.html)\nSummary[Source](https://docs.rs/unicode-normalization/latest/src/unicode_normalization/lib.rs.html#11-227)\nExpand description\nUnicode character composition and decomposition utilities as described in [Unicode Standard Annex #15](http://www.unicode.org/reports/tr15/).\n```\nextern crate unicode_normalization;\nuse unicode_normalization::char::compose;\nuse unicode_normalization::UnicodeNormalization;\nfn main() {\n  assert_eq!(compose('A','\\u{30a}'), Some('\u00c5'));\n  let s = \"\u212b\u2126\";\n  let c = s.nfc().collect::<String>();\n  assert_eq!(c, \"\u00c5\u03a9\");\n}\n```\n\n## [\u00a7](https://docs.rs/unicode-normalization/latest/unicode_normalization/#cratesio)crates.io\nYou can use this package in your project by adding the following to your `Cargo.toml`:\n```\n[dependencies]\nunicode-normalization = \"0.1.20\"\n```\n\n## Modules[\u00a7](https://docs.rs/unicode-normalization/latest/unicode_normalization/#modules)\n\n[char](https://docs.rs/unicode-normalization/latest/unicode_normalization/char/index.html \"mod unicode_normalization::char\")\n    Methods for composing and decomposing characters.\n## Structs[\u00a7](https://docs.rs/unicode-normalization/latest/unicode_normalization/#structs)\n\n[Decompositions](https://docs.rs/unicode-normalization/latest/unicode_normalization/struct.Decompositions.html \"struct unicode_normalization::Decompositions\")\n    External iterator for a string decomposition\u2019s characters.\n\n[Recompositions](https://docs.rs/unicode-normalization/latest/unicode_normalization/struct.Recompositions.html \"struct unicode_normalization::Recompositions\")\n    External iterator for a string recomposition\u2019s characters.\n\n[Replacements](https://docs.rs/unicode-normalization/latest/unicode_normalization/struct.Replacements.html \"struct unicode_normalization::Replacements\")\n    External iterator for replacements for a string\u2019s characters.\n\n[StreamSafe](https://docs.rs/unicode-normalization/latest/unicode_normalization/struct.StreamSafe.html \"struct unicode_normalization::StreamSafe\")\n    UAX15-D4: This iterator keeps track of how many non-starters there have been since the last starter in _NFKD_ and will emit a Combining Grapheme Joiner (U+034F) if the count exceeds 30.\n## Enums[\u00a7](https://docs.rs/unicode-normalization/latest/unicode_normalization/#enums)\n\n[IsNormalized](https://docs.rs/unicode-normalization/latest/unicode_normalization/enum.IsNormalized.html \"enum unicode_normalization::IsNormalized\")\n    QuickCheck quickly determines if a string is normalized, it can return `Maybe`\n## Constants[\u00a7](https://docs.rs/unicode-normalization/latest/unicode_normalization/#constants)\n\n[UNICODE_VERSION](https://docs.rs/unicode-normalization/latest/unicode_normalization/constant.UNICODE_VERSION.html \"constant unicode_normalization::UNICODE_VERSION\")\n\n## Traits[\u00a7](https://docs.rs/unicode-normalization/latest/unicode_normalization/#traits)\n\n[UnicodeNormalization](https://docs.rs/unicode-normalization/latest/unicode_normalization/trait.UnicodeNormalization.html \"trait unicode_normalization::UnicodeNormalization\")\n    Methods for iterating over strings while applying Unicode normalizations as described in [Unicode Standard Annex #15](http://www.unicode.org/reports/tr15/).\n## Functions[\u00a7](https://docs.rs/unicode-normalization/latest/unicode_normalization/#functions)\n\n[is_nfc](https://docs.rs/unicode-normalization/latest/unicode_normalization/fn.is_nfc.html \"fn unicode_normalization::is_nfc\")\n    Authoritatively check if a string is in NFC.\n\n[is_nfc_quick](https://docs.rs/unicode-normalization/latest/unicode_normalization/fn.is_nfc_quick.html \"fn unicode_normalization::is_nfc_quick\")\n    Quickly check if a string is in NFC, potentially returning `IsNormalized::Maybe` if further checks are necessary. In this case a check like `s.chars().nfc().eq(s.chars())` should suffice.\n\n[is_nfc_stream_safe](https://docs.rs/unicode-normalization/latest/unicode_normalization/fn.is_nfc_stream_safe.html \"fn unicode_normalization::is_nfc_stream_safe\")\n    Authoritatively check if a string is Stream-Safe NFC.\n\n[is_nfc_stream_safe_quick](https://docs.rs/unicode-normalization/latest/unicode_normalization/fn.is_nfc_stream_safe_quick.html \"fn unicode_normalization::is_nfc_stream_safe_quick\")\n    Quickly check if a string is Stream-Safe NFC.\n\n[is_nfd](https://docs.rs/unicode-normalization/latest/unicode_normalization/fn.is_nfd.html \"fn unicode_normalization::is_nfd\")\n    Authoritatively check if a string is in NFD.\n\n[is_nfd_quick](https://docs.rs/unicode-normalization/latest/unicode_normalization/fn.is_nfd_quick.html \"fn unicode_normalization::is_nfd_quick\")\n    Quickly check if a string is in NFD.\n\n[is_nfd_stream_safe](https://docs.rs/unicode-normalization/latest/unicode_normalization/fn.is_nfd_stream_safe.html \"fn unicode_normalization::is_nfd_stream_safe\")\n    Authoritatively check if a string is Stream-Safe NFD.\n\n[is_nfd_stream_safe_quick](https://docs.rs/unicode-normalization/latest/unicode_normalization/fn.is_nfd_stream_safe_quick.html \"fn unicode_normalization::is_nfd_stream_safe_quick\")\n    Quickly check if a string is Stream-Safe NFD.\n\n[is_nfkc](https://docs.rs/unicode-normalization/latest/unicode_normalization/fn.is_nfkc.html \"fn unicode_normalization::is_nfkc\")\n    Authoritatively check if a string is in NFKC.\n\n[is_nfkc_quick](https://docs.rs/unicode-normalization/latest/unicode_normalization/fn.is_nfkc_quick.html \"fn unicode_normalization::is_nfkc_quick\")\n    Quickly check if a string is in NFKC.\n\n[is_nfkd](https://docs.rs/unicode-normalization/latest/unicode_normalization/fn.is_nfkd.html \"fn unicode_normalization::is_nfkd\")\n    Authoritatively check if a string is in NFKD.\n\n[is_nfkd_quick](https://docs.rs/unicode-normalization/latest/unicode_normalization/fn.is_nfkd_quick.html \"fn unicode_normalization::is_nfkd_quick\")\n    Quickly check if a string is in NFKD.\n",
            "markdown_with_citations": "[](https://docs.rs/unicode-normalization/latest/unicode_normalization/all.html \"show sidebar\")\n# Crate unicode_normalizationCopy item path\nSettings\u27e81\u27e9\nHelp\u27e82\u27e9\nSummarySource\u27e83\u27e9\nExpand description\nUnicode character composition and decomposition utilities as described in Unicode Standard Annex #15\u27e84\u27e9.\n```\nextern crate unicode_normalization;\nuse unicode_normalization::char::compose;\nuse unicode_normalization::UnicodeNormalization;\nfn main() {\n  assert_eq!(compose('A','\\u{30a}'), Some('\u00c5'));\n  let s = \"\u212b\u2126\";\n  let c = s.nfc().collect::<String>();\n  assert_eq!(c, \"\u00c5\u03a9\");\n}\n```\n\n## \u00a7\u27e85\u27e9crates.io\nYou can use this package in your project by adding the following to your `Cargo.toml`:\n```\n[dependencies]\nunicode-normalization = \"0.1.20\"\n```\n\n## Modules\u00a7\u27e86\u27e9\n\nchar\u27e87\u27e9\n    Methods for composing and decomposing characters.\n## Structs\u00a7\u27e88\u27e9\n\nDecompositions\u27e89\u27e9\n    External iterator for a string decomposition\u2019s characters.\n\nRecompositions\u27e810\u27e9\n    External iterator for a string recomposition\u2019s characters.\n\nReplacements\u27e811\u27e9\n    External iterator for replacements for a string\u2019s characters.\n\nStreamSafe\u27e812\u27e9\n    UAX15-D4: This iterator keeps track of how many non-starters there have been since the last starter in _NFKD_ and will emit a Combining Grapheme Joiner (U+034F) if the count exceeds 30.\n## Enums\u00a7\u27e813\u27e9\n\nIsNormalized\u27e814\u27e9\n    QuickCheck quickly determines if a string is normalized, it can return `Maybe`\n## Constants\u00a7\u27e815\u27e9\n\nUNICODE_VERSION\u27e816\u27e9\n\n## Traits\u00a7\u27e817\u27e9\n\nUnicodeNormalization\u27e818\u27e9\n    Methods for iterating over strings while applying Unicode normalizations as described in Unicode Standard Annex #15\u27e84\u27e9.\n## Functions\u00a7\u27e819\u27e9\n\nis_nfc\u27e820\u27e9\n    Authoritatively check if a string is in NFC.\n\nis_nfc_quick\u27e821\u27e9\n    Quickly check if a string is in NFC, potentially returning `IsNormalized::Maybe` if further checks are necessary. In this case a check like `s.chars().nfc().eq(s.chars())` should suffice.\n\nis_nfc_stream_safe\u27e822\u27e9\n    Authoritatively check if a string is Stream-Safe NFC.\n\nis_nfc_stream_safe_quick\u27e823\u27e9\n    Quickly check if a string is Stream-Safe NFC.\n\nis_nfd\u27e824\u27e9\n    Authoritatively check if a string is in NFD.\n\nis_nfd_quick\u27e825\u27e9\n    Quickly check if a string is in NFD.\n\nis_nfd_stream_safe\u27e826\u27e9\n    Authoritatively check if a string is Stream-Safe NFD.\n\nis_nfd_stream_safe_quick\u27e827\u27e9\n    Quickly check if a string is Stream-Safe NFD.\n\nis_nfkc\u27e828\u27e9\n    Authoritatively check if a string is in NFKC.\n\nis_nfkc_quick\u27e829\u27e9\n    Quickly check if a string is in NFKC.\n\nis_nfkd\u27e830\u27e9\n    Authoritatively check if a string is in NFKD.\n\nis_nfkd_quick\u27e831\u27e9\n    Quickly check if a string is in NFKD.\n",
            "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://docs.rs/unicode-normalization/latest/settings.html: Settings\n\u27e82\u27e9 https://docs.rs/unicode-normalization/latest/help.html: Help\n\u27e83\u27e9 https://docs.rs/unicode-normalization/latest/src/unicode_normalization/lib.rs.html#11-227: Source\n\u27e84\u27e9 http://www.unicode.org/reports/tr15/: Unicode Standard Annex #15\n\u27e85\u27e9 https://docs.rs/unicode-normalization/latest/unicode_normalization/#cratesio: \u00a7\n\u27e86\u27e9 https://docs.rs/unicode-normalization/latest/unicode_normalization/#modules: \u00a7\n\u27e87\u27e9 https://docs.rs/unicode-normalization/latest/unicode_normalization/char/index.html: mod unicode_normalization::char - char\n\u27e88\u27e9 https://docs.rs/unicode-normalization/latest/unicode_normalization/#structs: \u00a7\n\u27e89\u27e9 https://docs.rs/unicode-normalization/latest/unicode_normalization/struct.Decompositions.html: struct unicode_normalization::Decompositions - Decompositions\n\u27e810\u27e9 https://docs.rs/unicode-normalization/latest/unicode_normalization/struct.Recompositions.html: struct unicode_normalization::Recompositions - Recompositions\n\u27e811\u27e9 https://docs.rs/unicode-normalization/latest/unicode_normalization/struct.Replacements.html: struct unicode_normalization::Replacements - Replacements\n\u27e812\u27e9 https://docs.rs/unicode-normalization/latest/unicode_normalization/struct.StreamSafe.html: struct unicode_normalization::StreamSafe - StreamSafe\n\u27e813\u27e9 https://docs.rs/unicode-normalization/latest/unicode_normalization/#enums: \u00a7\n\u27e814\u27e9 https://docs.rs/unicode-normalization/latest/unicode_normalization/enum.IsNormalized.html: enum unicode_normalization::IsNormalized - IsNormalized\n\u27e815\u27e9 https://docs.rs/unicode-normalization/latest/unicode_normalization/#constants: \u00a7\n\u27e816\u27e9 https://docs.rs/unicode-normalization/latest/unicode_normalization/constant.UNICODE_VERSION.html: constant unicode_normalization::UNICODE_VERSION - UNICODE_VERSION\n\u27e817\u27e9 https://docs.rs/unicode-normalization/latest/unicode_normalization/#traits: \u00a7\n\u27e818\u27e9 https://docs.rs/unicode-normalization/latest/unicode_normalization/trait.UnicodeNormalization.html: trait unicode_normalization::UnicodeNormalization - UnicodeNormalization\n\u27e819\u27e9 https://docs.rs/unicode-normalization/latest/unicode_normalization/#functions: \u00a7\n\u27e820\u27e9 https://docs.rs/unicode-normalization/latest/unicode_normalization/fn.is_nfc.html: fn unicode_normalization::is_nfc - is_nfc\n\u27e821\u27e9 https://docs.rs/unicode-normalization/latest/unicode_normalization/fn.is_nfc_quick.html: fn unicode_normalization::is_nfc_quick - is_nfc_quick\n\u27e822\u27e9 https://docs.rs/unicode-normalization/latest/unicode_normalization/fn.is_nfc_stream_safe.html: fn unicode_normalization::is_nfc_stream_safe - is_nfc_stream_safe\n\u27e823\u27e9 https://docs.rs/unicode-normalization/latest/unicode_normalization/fn.is_nfc_stream_safe_quick.html: fn unicode_normalization::is_nfc_stream_safe_quick - is_nfc_stream_safe_quick\n\u27e824\u27e9 https://docs.rs/unicode-normalization/latest/unicode_normalization/fn.is_nfd.html: fn unicode_normalization::is_nfd - is_nfd\n\u27e825\u27e9 https://docs.rs/unicode-normalization/latest/unicode_normalization/fn.is_nfd_quick.html: fn unicode_normalization::is_nfd_quick - is_nfd_quick\n\u27e826\u27e9 https://docs.rs/unicode-normalization/latest/unicode_normalization/fn.is_nfd_stream_safe.html: fn unicode_normalization::is_nfd_stream_safe - is_nfd_stream_safe\n\u27e827\u27e9 https://docs.rs/unicode-normalization/latest/unicode_normalization/fn.is_nfd_stream_safe_quick.html: fn unicode_normalization::is_nfd_stream_safe_quick - is_nfd_stream_safe_quick\n\u27e828\u27e9 https://docs.rs/unicode-normalization/latest/unicode_normalization/fn.is_nfkc.html: fn unicode_normalization::is_nfkc - is_nfkc\n\u27e829\u27e9 https://docs.rs/unicode-normalization/latest/unicode_normalization/fn.is_nfkc_quick.html: fn unicode_normalization::is_nfkc_quick - is_nfkc_quick\n\u27e830\u27e9 https://docs.rs/unicode-normalization/latest/unicode_normalization/fn.is_nfkd.html: fn unicode_normalization::is_nfkd - is_nfkd\n\u27e831\u27e9 https://docs.rs/unicode-normalization/latest/unicode_normalization/fn.is_nfkd_quick.html: fn unicode_normalization::is_nfkd_quick - is_nfkd_quick\n",
            "fit_markdown": "",
            "fit_html": ""
          },
          "downloads": 0,
          "github_stars": 0,
          "dependencies": [],
          "features": {},
          "code_snippets": [],
          "readme_sections": {},
          "librs_downloads": null,
          "source": "crates.io",
          "enhanced_scraping": {},
          "enhanced_features": [],
          "enhanced_dependencies": []
        },
        "enriched_crate": {
          "name": "unicode-normalization",
          "version": "0.1.24",
          "description": "ALLOW: Positive community sentiment",
          "repository": "",
          "keywords": [],
          "categories": [],
          "readme": {
            "raw_markdown": "[](https://docs.rs/unicode-normalization/latest/unicode_normalization/all.html \"show sidebar\")\n# Crate unicode_normalizationCopy item path\n[Settings](https://docs.rs/unicode-normalization/latest/settings.html)\n[Help](https://docs.rs/unicode-normalization/latest/help.html)\nSummary[Source](https://docs.rs/unicode-normalization/latest/src/unicode_normalization/lib.rs.html#11-227)\nExpand description\nUnicode character composition and decomposition utilities as described in [Unicode Standard Annex #15](http://www.unicode.org/reports/tr15/).\n```\nextern crate unicode_normalization;\nuse unicode_normalization::char::compose;\nuse unicode_normalization::UnicodeNormalization;\nfn main() {\n  assert_eq!(compose('A','\\u{30a}'), Some('\u00c5'));\n  let s = \"\u212b\u2126\";\n  let c = s.nfc().collect::<String>();\n  assert_eq!(c, \"\u00c5\u03a9\");\n}\n```\n\n## [\u00a7](https://docs.rs/unicode-normalization/latest/unicode_normalization/#cratesio)crates.io\nYou can use this package in your project by adding the following to your `Cargo.toml`:\n```\n[dependencies]\nunicode-normalization = \"0.1.20\"\n```\n\n## Modules[\u00a7](https://docs.rs/unicode-normalization/latest/unicode_normalization/#modules)\n\n[char](https://docs.rs/unicode-normalization/latest/unicode_normalization/char/index.html \"mod unicode_normalization::char\")\n    Methods for composing and decomposing characters.\n## Structs[\u00a7](https://docs.rs/unicode-normalization/latest/unicode_normalization/#structs)\n\n[Decompositions](https://docs.rs/unicode-normalization/latest/unicode_normalization/struct.Decompositions.html \"struct unicode_normalization::Decompositions\")\n    External iterator for a string decomposition\u2019s characters.\n\n[Recompositions](https://docs.rs/unicode-normalization/latest/unicode_normalization/struct.Recompositions.html \"struct unicode_normalization::Recompositions\")\n    External iterator for a string recomposition\u2019s characters.\n\n[Replacements](https://docs.rs/unicode-normalization/latest/unicode_normalization/struct.Replacements.html \"struct unicode_normalization::Replacements\")\n    External iterator for replacements for a string\u2019s characters.\n\n[StreamSafe](https://docs.rs/unicode-normalization/latest/unicode_normalization/struct.StreamSafe.html \"struct unicode_normalization::StreamSafe\")\n    UAX15-D4: This iterator keeps track of how many non-starters there have been since the last starter in _NFKD_ and will emit a Combining Grapheme Joiner (U+034F) if the count exceeds 30.\n## Enums[\u00a7](https://docs.rs/unicode-normalization/latest/unicode_normalization/#enums)\n\n[IsNormalized](https://docs.rs/unicode-normalization/latest/unicode_normalization/enum.IsNormalized.html \"enum unicode_normalization::IsNormalized\")\n    QuickCheck quickly determines if a string is normalized, it can return `Maybe`\n## Constants[\u00a7](https://docs.rs/unicode-normalization/latest/unicode_normalization/#constants)\n\n[UNICODE_VERSION](https://docs.rs/unicode-normalization/latest/unicode_normalization/constant.UNICODE_VERSION.html \"constant unicode_normalization::UNICODE_VERSION\")\n\n## Traits[\u00a7](https://docs.rs/unicode-normalization/latest/unicode_normalization/#traits)\n\n[UnicodeNormalization](https://docs.rs/unicode-normalization/latest/unicode_normalization/trait.UnicodeNormalization.html \"trait unicode_normalization::UnicodeNormalization\")\n    Methods for iterating over strings while applying Unicode normalizations as described in [Unicode Standard Annex #15](http://www.unicode.org/reports/tr15/).\n## Functions[\u00a7](https://docs.rs/unicode-normalization/latest/unicode_normalization/#functions)\n\n[is_nfc](https://docs.rs/unicode-normalization/latest/unicode_normalization/fn.is_nfc.html \"fn unicode_normalization::is_nfc\")\n    Authoritatively check if a string is in NFC.\n\n[is_nfc_quick](https://docs.rs/unicode-normalization/latest/unicode_normalization/fn.is_nfc_quick.html \"fn unicode_normalization::is_nfc_quick\")\n    Quickly check if a string is in NFC, potentially returning `IsNormalized::Maybe` if further checks are necessary. In this case a check like `s.chars().nfc().eq(s.chars())` should suffice.\n\n[is_nfc_stream_safe](https://docs.rs/unicode-normalization/latest/unicode_normalization/fn.is_nfc_stream_safe.html \"fn unicode_normalization::is_nfc_stream_safe\")\n    Authoritatively check if a string is Stream-Safe NFC.\n\n[is_nfc_stream_safe_quick](https://docs.rs/unicode-normalization/latest/unicode_normalization/fn.is_nfc_stream_safe_quick.html \"fn unicode_normalization::is_nfc_stream_safe_quick\")\n    Quickly check if a string is Stream-Safe NFC.\n\n[is_nfd](https://docs.rs/unicode-normalization/latest/unicode_normalization/fn.is_nfd.html \"fn unicode_normalization::is_nfd\")\n    Authoritatively check if a string is in NFD.\n\n[is_nfd_quick](https://docs.rs/unicode-normalization/latest/unicode_normalization/fn.is_nfd_quick.html \"fn unicode_normalization::is_nfd_quick\")\n    Quickly check if a string is in NFD.\n\n[is_nfd_stream_safe](https://docs.rs/unicode-normalization/latest/unicode_normalization/fn.is_nfd_stream_safe.html \"fn unicode_normalization::is_nfd_stream_safe\")\n    Authoritatively check if a string is Stream-Safe NFD.\n\n[is_nfd_stream_safe_quick](https://docs.rs/unicode-normalization/latest/unicode_normalization/fn.is_nfd_stream_safe_quick.html \"fn unicode_normalization::is_nfd_stream_safe_quick\")\n    Quickly check if a string is Stream-Safe NFD.\n\n[is_nfkc](https://docs.rs/unicode-normalization/latest/unicode_normalization/fn.is_nfkc.html \"fn unicode_normalization::is_nfkc\")\n    Authoritatively check if a string is in NFKC.\n\n[is_nfkc_quick](https://docs.rs/unicode-normalization/latest/unicode_normalization/fn.is_nfkc_quick.html \"fn unicode_normalization::is_nfkc_quick\")\n    Quickly check if a string is in NFKC.\n\n[is_nfkd](https://docs.rs/unicode-normalization/latest/unicode_normalization/fn.is_nfkd.html \"fn unicode_normalization::is_nfkd\")\n    Authoritatively check if a string is in NFKD.\n\n[is_nfkd_quick](https://docs.rs/unicode-normalization/latest/unicode_normalization/fn.is_nfkd_quick.html \"fn unicode_normalization::is_nfkd_quick\")\n    Quickly check if a string is in NFKD.\n",
            "markdown_with_citations": "[](https://docs.rs/unicode-normalization/latest/unicode_normalization/all.html \"show sidebar\")\n# Crate unicode_normalizationCopy item path\nSettings\u27e81\u27e9\nHelp\u27e82\u27e9\nSummarySource\u27e83\u27e9\nExpand description\nUnicode character composition and decomposition utilities as described in Unicode Standard Annex #15\u27e84\u27e9.\n```\nextern crate unicode_normalization;\nuse unicode_normalization::char::compose;\nuse unicode_normalization::UnicodeNormalization;\nfn main() {\n  assert_eq!(compose('A','\\u{30a}'), Some('\u00c5'));\n  let s = \"\u212b\u2126\";\n  let c = s.nfc().collect::<String>();\n  assert_eq!(c, \"\u00c5\u03a9\");\n}\n```\n\n## \u00a7\u27e85\u27e9crates.io\nYou can use this package in your project by adding the following to your `Cargo.toml`:\n```\n[dependencies]\nunicode-normalization = \"0.1.20\"\n```\n\n## Modules\u00a7\u27e86\u27e9\n\nchar\u27e87\u27e9\n    Methods for composing and decomposing characters.\n## Structs\u00a7\u27e88\u27e9\n\nDecompositions\u27e89\u27e9\n    External iterator for a string decomposition\u2019s characters.\n\nRecompositions\u27e810\u27e9\n    External iterator for a string recomposition\u2019s characters.\n\nReplacements\u27e811\u27e9\n    External iterator for replacements for a string\u2019s characters.\n\nStreamSafe\u27e812\u27e9\n    UAX15-D4: This iterator keeps track of how many non-starters there have been since the last starter in _NFKD_ and will emit a Combining Grapheme Joiner (U+034F) if the count exceeds 30.\n## Enums\u00a7\u27e813\u27e9\n\nIsNormalized\u27e814\u27e9\n    QuickCheck quickly determines if a string is normalized, it can return `Maybe`\n## Constants\u00a7\u27e815\u27e9\n\nUNICODE_VERSION\u27e816\u27e9\n\n## Traits\u00a7\u27e817\u27e9\n\nUnicodeNormalization\u27e818\u27e9\n    Methods for iterating over strings while applying Unicode normalizations as described in Unicode Standard Annex #15\u27e84\u27e9.\n## Functions\u00a7\u27e819\u27e9\n\nis_nfc\u27e820\u27e9\n    Authoritatively check if a string is in NFC.\n\nis_nfc_quick\u27e821\u27e9\n    Quickly check if a string is in NFC, potentially returning `IsNormalized::Maybe` if further checks are necessary. In this case a check like `s.chars().nfc().eq(s.chars())` should suffice.\n\nis_nfc_stream_safe\u27e822\u27e9\n    Authoritatively check if a string is Stream-Safe NFC.\n\nis_nfc_stream_safe_quick\u27e823\u27e9\n    Quickly check if a string is Stream-Safe NFC.\n\nis_nfd\u27e824\u27e9\n    Authoritatively check if a string is in NFD.\n\nis_nfd_quick\u27e825\u27e9\n    Quickly check if a string is in NFD.\n\nis_nfd_stream_safe\u27e826\u27e9\n    Authoritatively check if a string is Stream-Safe NFD.\n\nis_nfd_stream_safe_quick\u27e827\u27e9\n    Quickly check if a string is Stream-Safe NFD.\n\nis_nfkc\u27e828\u27e9\n    Authoritatively check if a string is in NFKC.\n\nis_nfkc_quick\u27e829\u27e9\n    Quickly check if a string is in NFKC.\n\nis_nfkd\u27e830\u27e9\n    Authoritatively check if a string is in NFKD.\n\nis_nfkd_quick\u27e831\u27e9\n    Quickly check if a string is in NFKD.\n",
            "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://docs.rs/unicode-normalization/latest/settings.html: Settings\n\u27e82\u27e9 https://docs.rs/unicode-normalization/latest/help.html: Help\n\u27e83\u27e9 https://docs.rs/unicode-normalization/latest/src/unicode_normalization/lib.rs.html#11-227: Source\n\u27e84\u27e9 http://www.unicode.org/reports/tr15/: Unicode Standard Annex #15\n\u27e85\u27e9 https://docs.rs/unicode-normalization/latest/unicode_normalization/#cratesio: \u00a7\n\u27e86\u27e9 https://docs.rs/unicode-normalization/latest/unicode_normalization/#modules: \u00a7\n\u27e87\u27e9 https://docs.rs/unicode-normalization/latest/unicode_normalization/char/index.html: mod unicode_normalization::char - char\n\u27e88\u27e9 https://docs.rs/unicode-normalization/latest/unicode_normalization/#structs: \u00a7\n\u27e89\u27e9 https://docs.rs/unicode-normalization/latest/unicode_normalization/struct.Decompositions.html: struct unicode_normalization::Decompositions - Decompositions\n\u27e810\u27e9 https://docs.rs/unicode-normalization/latest/unicode_normalization/struct.Recompositions.html: struct unicode_normalization::Recompositions - Recompositions\n\u27e811\u27e9 https://docs.rs/unicode-normalization/latest/unicode_normalization/struct.Replacements.html: struct unicode_normalization::Replacements - Replacements\n\u27e812\u27e9 https://docs.rs/unicode-normalization/latest/unicode_normalization/struct.StreamSafe.html: struct unicode_normalization::StreamSafe - StreamSafe\n\u27e813\u27e9 https://docs.rs/unicode-normalization/latest/unicode_normalization/#enums: \u00a7\n\u27e814\u27e9 https://docs.rs/unicode-normalization/latest/unicode_normalization/enum.IsNormalized.html: enum unicode_normalization::IsNormalized - IsNormalized\n\u27e815\u27e9 https://docs.rs/unicode-normalization/latest/unicode_normalization/#constants: \u00a7\n\u27e816\u27e9 https://docs.rs/unicode-normalization/latest/unicode_normalization/constant.UNICODE_VERSION.html: constant unicode_normalization::UNICODE_VERSION - UNICODE_VERSION\n\u27e817\u27e9 https://docs.rs/unicode-normalization/latest/unicode_normalization/#traits: \u00a7\n\u27e818\u27e9 https://docs.rs/unicode-normalization/latest/unicode_normalization/trait.UnicodeNormalization.html: trait unicode_normalization::UnicodeNormalization - UnicodeNormalization\n\u27e819\u27e9 https://docs.rs/unicode-normalization/latest/unicode_normalization/#functions: \u00a7\n\u27e820\u27e9 https://docs.rs/unicode-normalization/latest/unicode_normalization/fn.is_nfc.html: fn unicode_normalization::is_nfc - is_nfc\n\u27e821\u27e9 https://docs.rs/unicode-normalization/latest/unicode_normalization/fn.is_nfc_quick.html: fn unicode_normalization::is_nfc_quick - is_nfc_quick\n\u27e822\u27e9 https://docs.rs/unicode-normalization/latest/unicode_normalization/fn.is_nfc_stream_safe.html: fn unicode_normalization::is_nfc_stream_safe - is_nfc_stream_safe\n\u27e823\u27e9 https://docs.rs/unicode-normalization/latest/unicode_normalization/fn.is_nfc_stream_safe_quick.html: fn unicode_normalization::is_nfc_stream_safe_quick - is_nfc_stream_safe_quick\n\u27e824\u27e9 https://docs.rs/unicode-normalization/latest/unicode_normalization/fn.is_nfd.html: fn unicode_normalization::is_nfd - is_nfd\n\u27e825\u27e9 https://docs.rs/unicode-normalization/latest/unicode_normalization/fn.is_nfd_quick.html: fn unicode_normalization::is_nfd_quick - is_nfd_quick\n\u27e826\u27e9 https://docs.rs/unicode-normalization/latest/unicode_normalization/fn.is_nfd_stream_safe.html: fn unicode_normalization::is_nfd_stream_safe - is_nfd_stream_safe\n\u27e827\u27e9 https://docs.rs/unicode-normalization/latest/unicode_normalization/fn.is_nfd_stream_safe_quick.html: fn unicode_normalization::is_nfd_stream_safe_quick - is_nfd_stream_safe_quick\n\u27e828\u27e9 https://docs.rs/unicode-normalization/latest/unicode_normalization/fn.is_nfkc.html: fn unicode_normalization::is_nfkc - is_nfkc\n\u27e829\u27e9 https://docs.rs/unicode-normalization/latest/unicode_normalization/fn.is_nfkc_quick.html: fn unicode_normalization::is_nfkc_quick - is_nfkc_quick\n\u27e830\u27e9 https://docs.rs/unicode-normalization/latest/unicode_normalization/fn.is_nfkd.html: fn unicode_normalization::is_nfkd - is_nfkd\n\u27e831\u27e9 https://docs.rs/unicode-normalization/latest/unicode_normalization/fn.is_nfkd_quick.html: fn unicode_normalization::is_nfkd_quick - is_nfkd_quick\n",
            "fit_markdown": "",
            "fit_html": ""
          },
          "downloads": 0,
          "github_stars": 0,
          "dependencies": [],
          "features": {},
          "code_snippets": [],
          "readme_sections": {},
          "librs_downloads": null,
          "source": "crates.io",
          "enhanced_scraping": {},
          "enhanced_features": [],
          "enhanced_dependencies": [],
          "readme_summary": "The `unicode-normalization` crate provides utilities for Unicode character composition and decomposition, implementing normalization forms (NFC, NFD, NFKC, NFKD) as specified in Unicode Standard Annex #15. It includes traits and iterators for transforming strings, quick-check functions for determining normalization states, and stream-safe processing to ensure compliance with UAX15-D4. This crate is ideal for handling text normalization in Rust applications.",
          "feature_summary": null,
          "use_case": "Utilities",
          "score": 6.0,
          "factual_counterfactual": "### Pair 1: Unicode Composition and Decomposition\n\u2705 **Factual:** The `unicode-normalization` crate provides utilities for Unicode character composition and decomposition, allowing developers to normalize strings to NFC or NFD forms as described in Unicode Standard Annex #15.  \n\u274c **Counterfactual:** The `unicode-normalization` crate only supports NFC normalization and does not provide functionality for NFD normalization.  \n\n---\n\n### Pair 2: Stream-Safe Normalization\n\u2705 **Factual:** The `StreamSafe` struct in the `unicode-normalization` crate ensures that strings are stream-safe by inserting a Combining Grapheme Joiner (U+034F) when the count of non-starters exceeds 30, as per UAX15-D4.  \n\u274c **Counterfactual:** The `StreamSafe` struct automatically removes non-starter characters from strings to ensure stream safety, instead of inserting a Combining Grapheme Joiner.  \n\n---\n\n### Pair 3: QuickCheck for Normalization\n\u2705 **Factual:** The `is_nfc_quick` function in the `unicode-normalization` crate can quickly check if a string is in NFC form, but may return `IsNormalized::Maybe` if further verification is needed.  \n\u274c **Counterfactual:** The `is_nfc_quick` function guarantees accurate results for NFC checks without ever returning `IsNormalized::Maybe`.",
          "source_analysis": null,
          "user_behavior": null,
          "security": null
        }
      },
      "irl_score": 8.6,
      "execution_id": "exec-6373f2da-7d258021-1751261195",
      "timestamp": "2025-06-30T05:26:35.304332+00:00",
      "canon_version": "1.3.0"
    },
    "rule_zero_compliant": true
  }
]