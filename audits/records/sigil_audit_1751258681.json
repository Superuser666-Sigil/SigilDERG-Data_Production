[
  {
    "execution_id": "exec-42356f50-7e0bec86-1751258671",
    "timestamp": "2025-06-30T04:44:31.739205+00:00",
    "sacred_chain": {
      "input_data": "async-lock",
      "context_sources": [
        "crates.io",
        "github.com",
        "lib.rs",
        "docs.rs"
      ],
      "reasoning_steps": [
        "Input canonicalized: 'async-lock' -> 'async-lock'",
        "Context gathered from 4 validated sources",
        "Metadata extracted: 4 fields",
        "Documentation analyzed: quality 7.0",
        "Sentiment analyzed: positive",
        "Ecosystem analyzed: utilities",
        "Quality score synthesized: 7.50",
        "Trust decision: DEFER - Insufficient data for decision",
        "IRL confidence: 8.600"
      ],
      "suggestion": "ALLOW: Positive community sentiment",
      "verdict": "DEFER",
      "audit_info": {
        "metadata": {
          "name": "async-lock",
          "type": "rust_crate",
          "source": "manual_input",
          "extraction_method": "irl_engine"
        },
        "sentiment": {
          "quality_score": 7.0,
          "completeness": 0.8,
          "examples_present": true,
          "api_documented": true
        },
        "ecosystem": {
          "overall": "positive",
          "positive_mentions": 10,
          "negative_mentions": 2,
          "neutral_mentions": 5,
          "total_mentions": 17
        },
        "quality_score": 7.5,
        "verdict_reason": "Insufficient data for decision",
        "sanitized_documentation": {
          "crates_io": {
            "url": "https://crates.io/crates/async-lock",
            "title": "async-lock v3.4.0",
            "content": {
              "raw_markdown": "#  async-lock v3.4.0\nAsync synchronization primitives \n  * [ #rwlock ](https://crates.io/keywords/rwlock)\n  * [ #semaphore ](https://crates.io/keywords/semaphore)\n  * [ #lock ](https://crates.io/keywords/lock)\n  * [ #barrier ](https://crates.io/keywords/barrier)\n  * [ #mutex ](https://crates.io/keywords/mutex)\n\n\n  * [ Readme ](https://crates.io/crates/async-lock)\n  * [ 30 Versions ](https://crates.io/crates/async-lock/versions)\n  * [ Dependencies ](https://crates.io/crates/async-lock/dependencies)\n  * [ Dependents ](https://crates.io/crates/async-lock/reverse_dependencies)\n\n\n## Metadata\nabout 1 year ago \nv1.60.0 \n[ Apache-2.0 ](https://choosealicense.com/licenses/apache-2.0) OR [ MIT ](https://choosealicense.com/licenses/mit)\n33.6 KiB \n## Install\nRun the following Cargo command in your project directory:\ncargo add async-lock\nOr add the following line to your Cargo.toml:\nasync-lock = \"3.4.0\"\n## Repository\n[ github.com/smol-rs/async-lock ](https://github.com/smol-rs/async-lock)\n## Owners\n## Categories\n  * [Concurrency](https://crates.io/categories/concurrency)\n  * [Asynchronous](https://crates.io/categories/asynchronous)\n\n\n[ Report crate ](https://crates.io/support?crate=async-lock&inquire=crate-violation)\n### Stats Overview\n114,073,600 Downloads all time\n30 Versions published\n#### Downloads over the last 90 days\nDisplay as \nStacked \n  * Stacked \n  * Unstacked \n\n\nLoading\u2026\n",
              "markdown_with_citations": "#  async-lock v3.4.0\nAsync synchronization primitives \n  *  #rwlock \u27e81\u27e9\n  *  #semaphore \u27e82\u27e9\n  *  #lock \u27e83\u27e9\n  *  #barrier \u27e84\u27e9\n  *  #mutex \u27e85\u27e9\n\n\n  *  Readme \u27e86\u27e9\n  *  30 Versions \u27e87\u27e9\n  *  Dependencies \u27e88\u27e9\n  *  Dependents \u27e89\u27e9\n\n\n## Metadata\nabout 1 year ago \nv1.60.0 \n Apache-2.0 \u27e810\u27e9 OR  MIT \u27e811\u27e9\n33.6 KiB \n## Install\nRun the following Cargo command in your project directory:\ncargo add async-lock\nOr add the following line to your Cargo.toml:\nasync-lock = \"3.4.0\"\n## Repository\n github.com/smol-rs/async-lock \u27e812\u27e9\n## Owners\n## Categories\n  * Concurrency\u27e813\u27e9\n  * Asynchronous\u27e814\u27e9\n\n\n Report crate \u27e815\u27e9\n### Stats Overview\n114,073,600 Downloads all time\n30 Versions published\n#### Downloads over the last 90 days\nDisplay as \nStacked \n  * Stacked \n  * Unstacked \n\n\nLoading\u2026\n",
              "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://crates.io/keywords/rwlock:  #rwlock \n\u27e82\u27e9 https://crates.io/keywords/semaphore:  #semaphore \n\u27e83\u27e9 https://crates.io/keywords/lock:  #lock \n\u27e84\u27e9 https://crates.io/keywords/barrier:  #barrier \n\u27e85\u27e9 https://crates.io/keywords/mutex:  #mutex \n\u27e86\u27e9 https://crates.io/crates/async-lock:  Readme \n\u27e87\u27e9 https://crates.io/crates/async-lock/versions:  30 Versions \n\u27e88\u27e9 https://crates.io/crates/async-lock/dependencies:  Dependencies \n\u27e89\u27e9 https://crates.io/crates/async-lock/reverse_dependencies:  Dependents \n\u27e810\u27e9 https://choosealicense.com/licenses/apache-2.0:  Apache-2.0 \n\u27e811\u27e9 https://choosealicense.com/licenses/mit:  MIT \n\u27e812\u27e9 https://github.com/smol-rs/async-lock:  github.com/smol-rs/async-lock \n\u27e813\u27e9 https://crates.io/categories/concurrency: Concurrency\n\u27e814\u27e9 https://crates.io/categories/asynchronous: Asynchronous\n\u27e815\u27e9 https://crates.io/support?crate=async-lock&inquire=crate-violation:  Report crate \n",
              "fit_markdown": "",
              "fit_html": ""
            },
            "structured_data": {},
            "quality_score": 3.0,
            "extraction_method": "crawl4ai",
            "error": null,
            "metadata": {
              "doc_type": "docs",
              "content_length": 1393,
              "has_structured_data": false,
              "crawl_success": true
            },
            "timestamp": "112461.5260462"
          },
          "docs_rs": {
            "url": "https://docs.rs/async-lock",
            "title": "Crate async_lockCopy item path",
            "content": {
              "raw_markdown": "[](https://docs.rs/async-lock/latest/async_lock/all.html \"show sidebar\")\n# Crate async_lockCopy item path\n[Settings](https://docs.rs/async-lock/latest/settings.html)\n[Help](https://docs.rs/async-lock/latest/help.html)\nSummary[Source](https://docs.rs/async-lock/latest/src/async_lock/lib.rs.html#1-168)\nExpand description\nAsync synchronization primitives.\nThis crate provides the following primitives:\n  * [`Barrier`](https://docs.rs/async-lock/latest/async_lock/struct.Barrier.html \"struct async_lock::Barrier\") - enables tasks to synchronize all together at the same time.\n  * [`Mutex`](https://docs.rs/async-lock/latest/async_lock/struct.Mutex.html \"struct async_lock::Mutex\") - a mutual exclusion lock.\n  * [`RwLock`](https://docs.rs/async-lock/latest/async_lock/struct.RwLock.html \"struct async_lock::RwLock\") - a reader-writer lock, allowing any number of readers or a single writer.\n  * [`Semaphore`](https://docs.rs/async-lock/latest/async_lock/struct.Semaphore.html \"struct async_lock::Semaphore\") - limits the number of concurrent operations.\n\n\n### [\u00a7](https://docs.rs/async-lock/latest/async_lock/#relationship-with-stdsync)Relationship with `std::sync`\nIn general, you should consider using [`std::sync`](https://doc.rust-lang.org/std/sync/index.html) types over types from this crate.\nThere are two primary use cases for types from this crate:\n  * You need to use a synchronization primitive in a `no_std` environment.\n  * You need to hold a lock across an `.await` point. (Holding an [`std::sync`](https://doc.rust-lang.org/std/sync/index.html) lock guard across an `.await` will make your future non-`Send`, and is also highly likely to cause deadlocks.)\n\n\nIf you already use `libstd` and you aren\u2019t holding locks across await points (there is a Clippy lint called [`await_holding_lock`](https://rust-lang.github.io/rust-clippy/stable/index.html#/await_holding_lock) that emits warnings for this scenario), you should consider [`std::sync`](https://doc.rust-lang.org/std/sync/index.html) instead of this crate. Those types are optimized for the currently running operating system, are less complex and are generally much faster.\nIn contrast, `async-lock`\u2019s notification system uses `std::sync::Mutex` under the hood if the `std` feature is enabled, and will fall back to a significantly slower strategy if it is not. So, there are few cases where `async-lock` is a win for performance over [`std::sync`](https://doc.rust-lang.org/std/sync/index.html).\n## Modules[\u00a7](https://docs.rs/async-lock/latest/async_lock/#modules)\n\n[futures](https://docs.rs/async-lock/latest/async_lock/futures/index.html \"mod async_lock::futures\")\n    Named futures for use with `async_lock` primitives.\n## Structs[\u00a7](https://docs.rs/async-lock/latest/async_lock/#structs)\n\n[Barrier](https://docs.rs/async-lock/latest/async_lock/struct.Barrier.html \"struct async_lock::Barrier\")\n    A counter to synchronize multiple tasks at the same time.\n\n[BarrierWaitResult](https://docs.rs/async-lock/latest/async_lock/struct.BarrierWaitResult.html \"struct async_lock::BarrierWaitResult\")\n    Returned by [`Barrier::wait()`](https://docs.rs/async-lock/latest/async_lock/struct.Barrier.html#method.wait \"method async_lock::Barrier::wait\") when all tasks have called it.\n\n[Mutex](https://docs.rs/async-lock/latest/async_lock/struct.Mutex.html \"struct async_lock::Mutex\")\n    An async mutex.\n\n[MutexGuard](https://docs.rs/async-lock/latest/async_lock/struct.MutexGuard.html \"struct async_lock::MutexGuard\")\n    A guard that releases the mutex when dropped.\n\n[MutexGuardArc](https://docs.rs/async-lock/latest/async_lock/struct.MutexGuardArc.html \"struct async_lock::MutexGuardArc\")\n    An owned guard that releases the mutex when dropped.\n\n[OnceCell](https://docs.rs/async-lock/latest/async_lock/struct.OnceCell.html \"struct async_lock::OnceCell\")\n    A memory location that can be written to at most once.\n\n[RwLock](https://docs.rs/async-lock/latest/async_lock/struct.RwLock.html \"struct async_lock::RwLock\")\n    An async reader-writer lock.\n\n[RwLockReadGuard](https://docs.rs/async-lock/latest/async_lock/struct.RwLockReadGuard.html \"struct async_lock::RwLockReadGuard\")\n    A guard that releases the read lock when dropped.\n\n[RwLockReadGuardArc](https://docs.rs/async-lock/latest/async_lock/struct.RwLockReadGuardArc.html \"struct async_lock::RwLockReadGuardArc\")\n    An owned, reference-counting guard that releases the read lock when dropped.\n\n[RwLockUpgradableReadGuard](https://docs.rs/async-lock/latest/async_lock/struct.RwLockUpgradableReadGuard.html \"struct async_lock::RwLockUpgradableReadGuard\")\n    A guard that releases the upgradable read lock when dropped.\n\n[RwLockUpgradableReadGuardArc](https://docs.rs/async-lock/latest/async_lock/struct.RwLockUpgradableReadGuardArc.html \"struct async_lock::RwLockUpgradableReadGuardArc\")\n    An owned, reference-counting guard that releases the upgradable read lock when dropped.\n\n[RwLockWriteGuard](https://docs.rs/async-lock/latest/async_lock/struct.RwLockWriteGuard.html \"struct async_lock::RwLockWriteGuard\")\n    A guard that releases the write lock when dropped.\n\n[RwLockWriteGuardArc](https://docs.rs/async-lock/latest/async_lock/struct.RwLockWriteGuardArc.html \"struct async_lock::RwLockWriteGuardArc\")\n    An owned, reference-counted guard that releases the write lock when dropped.\n\n[Semaphore](https://docs.rs/async-lock/latest/async_lock/struct.Semaphore.html \"struct async_lock::Semaphore\")\n    A counter for limiting the number of concurrent operations.\n\n[SemaphoreGuard](https://docs.rs/async-lock/latest/async_lock/struct.SemaphoreGuard.html \"struct async_lock::SemaphoreGuard\")\n    A guard that releases the acquired permit.\n\n[SemaphoreGuardArc](https://docs.rs/async-lock/latest/async_lock/struct.SemaphoreGuardArc.html \"struct async_lock::SemaphoreGuardArc\")\n    An owned guard that releases the acquired permit.\n",
              "markdown_with_citations": "[](https://docs.rs/async-lock/latest/async_lock/all.html \"show sidebar\")\n# Crate async_lockCopy item path\nSettings\u27e81\u27e9\nHelp\u27e82\u27e9\nSummarySource\u27e83\u27e9\nExpand description\nAsync synchronization primitives.\nThis crate provides the following primitives:\n  * `Barrier`\u27e84\u27e9 - enables tasks to synchronize all together at the same time.\n  * `Mutex`\u27e85\u27e9 - a mutual exclusion lock.\n  * `RwLock`\u27e86\u27e9 - a reader-writer lock, allowing any number of readers or a single writer.\n  * `Semaphore`\u27e87\u27e9 - limits the number of concurrent operations.\n\n\n### \u00a7\u27e88\u27e9Relationship with `std::sync`\nIn general, you should consider using `std::sync`\u27e89\u27e9 types over types from this crate.\nThere are two primary use cases for types from this crate:\n  * You need to use a synchronization primitive in a `no_std` environment.\n  * You need to hold a lock across an `.await` point. (Holding an `std::sync`\u27e89\u27e9 lock guard across an `.await` will make your future non-`Send`, and is also highly likely to cause deadlocks.)\n\n\nIf you already use `libstd` and you aren\u2019t holding locks across await points (there is a Clippy lint called `await_holding_lock`\u27e810\u27e9 that emits warnings for this scenario), you should consider `std::sync`\u27e89\u27e9 instead of this crate. Those types are optimized for the currently running operating system, are less complex and are generally much faster.\nIn contrast, `async-lock`\u2019s notification system uses `std::sync::Mutex` under the hood if the `std` feature is enabled, and will fall back to a significantly slower strategy if it is not. So, there are few cases where `async-lock` is a win for performance over `std::sync`\u27e89\u27e9.\n## Modules\u00a7\u27e811\u27e9\n\nfutures\u27e812\u27e9\n    Named futures for use with `async_lock` primitives.\n## Structs\u00a7\u27e813\u27e9\n\nBarrier\u27e84\u27e9\n    A counter to synchronize multiple tasks at the same time.\n\nBarrierWaitResult\u27e814\u27e9\n    Returned by `Barrier::wait()`\u27e815\u27e9 when all tasks have called it.\n\nMutex\u27e85\u27e9\n    An async mutex.\n\nMutexGuard\u27e816\u27e9\n    A guard that releases the mutex when dropped.\n\nMutexGuardArc\u27e817\u27e9\n    An owned guard that releases the mutex when dropped.\n\nOnceCell\u27e818\u27e9\n    A memory location that can be written to at most once.\n\nRwLock\u27e86\u27e9\n    An async reader-writer lock.\n\nRwLockReadGuard\u27e819\u27e9\n    A guard that releases the read lock when dropped.\n\nRwLockReadGuardArc\u27e820\u27e9\n    An owned, reference-counting guard that releases the read lock when dropped.\n\nRwLockUpgradableReadGuard\u27e821\u27e9\n    A guard that releases the upgradable read lock when dropped.\n\nRwLockUpgradableReadGuardArc\u27e822\u27e9\n    An owned, reference-counting guard that releases the upgradable read lock when dropped.\n\nRwLockWriteGuard\u27e823\u27e9\n    A guard that releases the write lock when dropped.\n\nRwLockWriteGuardArc\u27e824\u27e9\n    An owned, reference-counted guard that releases the write lock when dropped.\n\nSemaphore\u27e87\u27e9\n    A counter for limiting the number of concurrent operations.\n\nSemaphoreGuard\u27e825\u27e9\n    A guard that releases the acquired permit.\n\nSemaphoreGuardArc\u27e826\u27e9\n    An owned guard that releases the acquired permit.\n",
              "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://docs.rs/async-lock/latest/settings.html: Settings\n\u27e82\u27e9 https://docs.rs/async-lock/latest/help.html: Help\n\u27e83\u27e9 https://docs.rs/async-lock/latest/src/async_lock/lib.rs.html#1-168: Source\n\u27e84\u27e9 https://docs.rs/async-lock/latest/async_lock/struct.Barrier.html: struct async_lock::Barrier - `Barrier`\n\u27e85\u27e9 https://docs.rs/async-lock/latest/async_lock/struct.Mutex.html: struct async_lock::Mutex - `Mutex`\n\u27e86\u27e9 https://docs.rs/async-lock/latest/async_lock/struct.RwLock.html: struct async_lock::RwLock - `RwLock`\n\u27e87\u27e9 https://docs.rs/async-lock/latest/async_lock/struct.Semaphore.html: struct async_lock::Semaphore - `Semaphore`\n\u27e88\u27e9 https://docs.rs/async-lock/latest/async_lock/#relationship-with-stdsync: \u00a7\n\u27e89\u27e9 https://doc.rust-lang.org/std/sync/index.html: `std::sync`\n\u27e810\u27e9 https://rust-lang.github.io/rust-clippy/stable/index.html#/await_holding_lock: `await_holding_lock`\n\u27e811\u27e9 https://docs.rs/async-lock/latest/async_lock/#modules: \u00a7\n\u27e812\u27e9 https://docs.rs/async-lock/latest/async_lock/futures/index.html: mod async_lock::futures - futures\n\u27e813\u27e9 https://docs.rs/async-lock/latest/async_lock/#structs: \u00a7\n\u27e814\u27e9 https://docs.rs/async-lock/latest/async_lock/struct.BarrierWaitResult.html: struct async_lock::BarrierWaitResult - BarrierWaitResult\n\u27e815\u27e9 https://docs.rs/async-lock/latest/async_lock/struct.Barrier.html#method.wait: method async_lock::Barrier::wait - `Barrier::wait()`\n\u27e816\u27e9 https://docs.rs/async-lock/latest/async_lock/struct.MutexGuard.html: struct async_lock::MutexGuard - MutexGuard\n\u27e817\u27e9 https://docs.rs/async-lock/latest/async_lock/struct.MutexGuardArc.html: struct async_lock::MutexGuardArc - MutexGuardArc\n\u27e818\u27e9 https://docs.rs/async-lock/latest/async_lock/struct.OnceCell.html: struct async_lock::OnceCell - OnceCell\n\u27e819\u27e9 https://docs.rs/async-lock/latest/async_lock/struct.RwLockReadGuard.html: struct async_lock::RwLockReadGuard - RwLockReadGuard\n\u27e820\u27e9 https://docs.rs/async-lock/latest/async_lock/struct.RwLockReadGuardArc.html: struct async_lock::RwLockReadGuardArc - RwLockReadGuardArc\n\u27e821\u27e9 https://docs.rs/async-lock/latest/async_lock/struct.RwLockUpgradableReadGuard.html: struct async_lock::RwLockUpgradableReadGuard - RwLockUpgradableReadGuard\n\u27e822\u27e9 https://docs.rs/async-lock/latest/async_lock/struct.RwLockUpgradableReadGuardArc.html: struct async_lock::RwLockUpgradableReadGuardArc - RwLockUpgradableReadGuardArc\n\u27e823\u27e9 https://docs.rs/async-lock/latest/async_lock/struct.RwLockWriteGuard.html: struct async_lock::RwLockWriteGuard - RwLockWriteGuard\n\u27e824\u27e9 https://docs.rs/async-lock/latest/async_lock/struct.RwLockWriteGuardArc.html: struct async_lock::RwLockWriteGuardArc - RwLockWriteGuardArc\n\u27e825\u27e9 https://docs.rs/async-lock/latest/async_lock/struct.SemaphoreGuard.html: struct async_lock::SemaphoreGuard - SemaphoreGuard\n\u27e826\u27e9 https://docs.rs/async-lock/latest/async_lock/struct.SemaphoreGuardArc.html: struct async_lock::SemaphoreGuardArc - SemaphoreGuardArc\n",
              "fit_markdown": "",
              "fit_html": ""
            },
            "structured_data": {},
            "quality_score": 4.0,
            "extraction_method": "crawl4ai",
            "error": null,
            "metadata": {
              "doc_type": "docs",
              "content_length": 5857,
              "has_structured_data": false,
              "crawl_success": true
            },
            "timestamp": "112462.2850681"
          },
          "lib_rs": {
            "url": "https://lib.rs/crates/async-lock",
            "title": "Untitled",
            "content": {
              "raw_markdown": "###  [29 stable releases](https://lib.rs/crates/async-lock/versions) (3 major)\n3.4.0 |  Jun 1, 2024   \n---|---  \n3.3.0 |  Jan 10, 2024   \n3.2.0 |  Dec 2, 2023   \n3.1.2 |  Nov 24, 2023   \n0.1.0 |  May 22, 2019   \n#**6** in [Concurrency](https://lib.rs/concurrency \"Crates for implementing concurrent and parallel computation.\")\nDownload history 1250482/week @ 2025-01-28 1401864/week @ 2025-02-04 1440976/week @ 2025-02-11 1405695/week @ 2025-02-18 1395322/week @ 2025-02-25 1826118/week @ 2025-03-04 1746452/week @ 2025-03-11 2137338/week @ 2025-03-18 1927969/week @ 2025-03-25 1582938/week @ 2025-04-01 1587462/week @ 2025-04-08 1267383/week @ 2025-04-15 1356921/week @ 2025-04-22 1217074/week @ 2025-04-29 1308239/week @ 2025-05-06 1139968/week @ 2025-05-13\n**5,209,626** downloads per month Used in [**6,266** crates (175 directly)](https://lib.rs/crates/async-lock/rev)\n**Apache-2.0 OR MIT**\n155KB  2.5K  SLoC\n# async-lock\n[![Build](https://img.gs/czjpqfbdkz/full/https://github.com/smol-rs/async-lock/workflows/Build%20and%20test/badge.svg)](https://github.com/smol-rs/async-lock/actions) [![License](https://img.shields.io/badge/license-Apache--2.0_OR_MIT-blue.svg)](https://github.com/smol-rs/async-lock) [![Cargo](https://img.shields.io/crates/v/async-lock.svg)](https://crates.io/crates/async-lock) [![Documentation](https://img.gs/czjpqfbdkz/full/https://docs.rs/async-lock/badge.svg)](https://docs.rs/async-lock)\nAsync synchronization primitives.\nThis crate provides the following primitives:\n  * ``Barrier`` - enables tasks to synchronize all together at the same time.\n  * ``Mutex`` - a mutual exclusion lock.\n  * ``RwLock`` - a reader-writer lock, allowing any number of readers or a single writer.\n  * ``Semaphore`` - limits the number of concurrent operations.\n\n\n## License\nLicensed under either of\n  * Apache License, Version 2.0 ([LICENSE-APACHE](https://github.com/smol-rs/async-lock/blob/HEAD/LICENSE-APACHE) or <http://www.apache.org/licenses/LICENSE-2.0>)\n  * MIT license ([LICENSE-MIT](https://github.com/smol-rs/async-lock/blob/HEAD/LICENSE-MIT) or <http://opensource.org/licenses/MIT>)\n\n\nat your option.\n#### Contribution\nUnless you explicitly state otherwise, any contribution intentionally submitted for inclusion in the work by you, as defined in the Apache-2.0 license, shall be dual licensed as above, without any additional terms or conditions.\n#### Dependencies\n~0.3\u201318MB  ~298K SLoC\n  * [event-listener](https://lib.rs/crates/event-listener \"new\") 5.0\n  * [event-listener-strategy](https://lib.rs/crates/event-listener-strategy \"0.5.0\")\n  * [ optional ](https://lib.rs/crates/async-lock/features#feature-loom \"loom is optional feature\") [loom](https://lib.rs/crates/loom \"new\") 0.7 loom\n  * [pin-project-lite](https://lib.rs/crates/pin-project-lite \"0.2.11\")\n\n\n  * dev  [fastrand](https://lib.rs/crates/fastrand \"2.0.0\")\n  * dev  [flume](https://lib.rs/crates/flume \"new\") 0.11\n  * dev  [futures-lite](https://lib.rs/crates/futures-lite \"new\") 2.0\n  * dev  [waker-fn](https://lib.rs/crates/waker-fn \"1.1.0\")\n  * dev  [wasm-bindgen-test](https://lib.rs/crates/wasm-bindgen-test \"0.3\") wasm\n\n\n#### [Other feature](https://lib.rs/crates/async-lock/features)\n  * [std](https://lib.rs/crates/async-lock/features#feature-std)\n\n\n  *[SLoC]: approx. additional lines of code\n",
              "markdown_with_citations": "###  29 stable releases\u27e81\u27e9 (3 major)\n3.4.0 |  Jun 1, 2024   \n---|---  \n3.3.0 |  Jan 10, 2024   \n3.2.0 |  Dec 2, 2023   \n3.1.2 |  Nov 24, 2023   \n0.1.0 |  May 22, 2019   \n#**6** in Concurrency\u27e82\u27e9\nDownload history 1250482/week @ 2025-01-28 1401864/week @ 2025-02-04 1440976/week @ 2025-02-11 1405695/week @ 2025-02-18 1395322/week @ 2025-02-25 1826118/week @ 2025-03-04 1746452/week @ 2025-03-11 2137338/week @ 2025-03-18 1927969/week @ 2025-03-25 1582938/week @ 2025-04-01 1587462/week @ 2025-04-08 1267383/week @ 2025-04-15 1356921/week @ 2025-04-22 1217074/week @ 2025-04-29 1308239/week @ 2025-05-06 1139968/week @ 2025-05-13\n**5,209,626** downloads per month Used in **6,266** crates (175 directly)\u27e83\u27e9\n**Apache-2.0 OR MIT**\n155KB  2.5K  SLoC\n# async-lock\n![Build\u27e84\u27e9](https://github.com/smol-rs/async-lock/actions) ![License\u27e85\u27e9](https://github.com/smol-rs/async-lock) ![Cargo\u27e86\u27e9](https://crates.io/crates/async-lock) ![Documentation\u27e87\u27e9](https://docs.rs/async-lock)\nAsync synchronization primitives.\nThis crate provides the following primitives:\n  * ``Barrier`` - enables tasks to synchronize all together at the same time.\n  * ``Mutex`` - a mutual exclusion lock.\n  * ``RwLock`` - a reader-writer lock, allowing any number of readers or a single writer.\n  * ``Semaphore`` - limits the number of concurrent operations.\n\n\n## License\nLicensed under either of\n  * Apache License, Version 2.0 (LICENSE-APACHE\u27e88\u27e9 or <http://www.apache.org/licenses/LICENSE-2.0>)\n  * MIT license (LICENSE-MIT\u27e89\u27e9 or <http://opensource.org/licenses/MIT>)\n\n\nat your option.\n#### Contribution\nUnless you explicitly state otherwise, any contribution intentionally submitted for inclusion in the work by you, as defined in the Apache-2.0 license, shall be dual licensed as above, without any additional terms or conditions.\n#### Dependencies\n~0.3\u201318MB  ~298K SLoC\n  * event-listener\u27e810\u27e9 5.0\n  * event-listener-strategy\u27e811\u27e9\n  *  optional \u27e812\u27e9 loom\u27e813\u27e9 0.7 loom\n  * pin-project-lite\u27e814\u27e9\n\n\n  * dev  fastrand\u27e815\u27e9\n  * dev  flume\u27e816\u27e9 0.11\n  * dev  futures-lite\u27e817\u27e9 2.0\n  * dev  waker-fn\u27e818\u27e9\n  * dev  wasm-bindgen-test\u27e819\u27e9 wasm\n\n\n#### Other feature\u27e820\u27e9\n  * std\u27e821\u27e9\n\n\n  *[SLoC]: approx. additional lines of code\n",
              "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://lib.rs/crates/async-lock/versions: 29 stable releases\n\u27e82\u27e9 https://lib.rs/concurrency: Crates for implementing concurrent and parallel computation. - Concurrency\n\u27e83\u27e9 https://lib.rs/crates/async-lock/rev: **6,266** crates (175 directly)\n\u27e84\u27e9 https://img.gs/czjpqfbdkz/full/https://github.com/smol-rs/async-lock/workflows/Build%20and%20test/badge.svg: ![Build\n\u27e85\u27e9 https://img.shields.io/badge/license-Apache--2.0_OR_MIT-blue.svg: ![License\n\u27e86\u27e9 https://img.shields.io/crates/v/async-lock.svg: ![Cargo\n\u27e87\u27e9 https://img.gs/czjpqfbdkz/full/https://docs.rs/async-lock/badge.svg: ![Documentation\n\u27e88\u27e9 https://github.com/smol-rs/async-lock/blob/HEAD/LICENSE-APACHE: LICENSE-APACHE\n\u27e89\u27e9 https://github.com/smol-rs/async-lock/blob/HEAD/LICENSE-MIT: LICENSE-MIT\n\u27e810\u27e9 https://lib.rs/crates/event-listener: new - event-listener\n\u27e811\u27e9 https://lib.rs/crates/event-listener-strategy: 0.5.0 - event-listener-strategy\n\u27e812\u27e9 https://lib.rs/crates/async-lock/features#feature-loom: loom is optional feature -  optional \n\u27e813\u27e9 https://lib.rs/crates/loom: new - loom\n\u27e814\u27e9 https://lib.rs/crates/pin-project-lite: 0.2.11 - pin-project-lite\n\u27e815\u27e9 https://lib.rs/crates/fastrand: 2.0.0 - fastrand\n\u27e816\u27e9 https://lib.rs/crates/flume: new - flume\n\u27e817\u27e9 https://lib.rs/crates/futures-lite: new - futures-lite\n\u27e818\u27e9 https://lib.rs/crates/waker-fn: 1.1.0 - waker-fn\n\u27e819\u27e9 https://lib.rs/crates/wasm-bindgen-test: 0.3 - wasm-bindgen-test\n\u27e820\u27e9 https://lib.rs/crates/async-lock/features: Other feature\n\u27e821\u27e9 https://lib.rs/crates/async-lock/features#feature-std: std\n",
              "fit_markdown": "",
              "fit_html": ""
            },
            "structured_data": {},
            "quality_score": 3.0,
            "extraction_method": "crawl4ai",
            "error": null,
            "metadata": {
              "doc_type": "docs",
              "content_length": 3299,
              "has_structured_data": false,
              "crawl_success": true
            },
            "timestamp": "112462.7925544"
          }
        },
        "crate_analysis": {
          "status": "completed",
          "check": [
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#pin-project-lite@0.2.16",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\pin-project-lite-0.2.16\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "pin_project_lite",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\pin-project-lite-0.2.16\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphaqb7ny2\\async-lock-3.4.0\\target\\debug\\deps\\libpin_project_lite-c1a285380b388093.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#parking@2.2.1",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\parking-2.2.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "parking",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\parking-2.2.1\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphaqb7ny2\\async-lock-3.4.0\\target\\debug\\deps\\libparking-bd9888c8dfceec72.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#crossbeam-utils@0.8.21",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\crossbeam-utils-0.8.21\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\crossbeam-utils-0.8.21\\build.rs",
                "edition": "2021",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphaqb7ny2\\async-lock-3.4.0\\target\\debug\\build\\crossbeam-utils-058eff74cbd551a4\\build-script-build.exe",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphaqb7ny2\\async-lock-3.4.0\\target\\debug\\build\\crossbeam-utils-058eff74cbd551a4\\build_script_build.pdb"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "build-script-executed",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#crossbeam-utils@0.8.21",
              "linked_libs": [],
              "linked_paths": [],
              "cfgs": [],
              "env": [],
              "out_dir": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphaqb7ny2\\async-lock-3.4.0\\target\\debug\\build\\crossbeam-utils-8d9c1eff06854c8d\\out"
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#crossbeam-utils@0.8.21",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\crossbeam-utils-0.8.21\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "crossbeam_utils",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\crossbeam-utils-0.8.21\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphaqb7ny2\\async-lock-3.4.0\\target\\debug\\deps\\libcrossbeam_utils-0f4f22ec3e3ec06e.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#concurrent-queue@2.5.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\concurrent-queue-2.5.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "concurrent_queue",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\concurrent-queue-2.5.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphaqb7ny2\\async-lock-3.4.0\\target\\debug\\deps\\libconcurrent_queue-6d8464127a7463ef.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#event-listener@5.4.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\event-listener-5.4.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "event_listener",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\event-listener-5.4.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "parking",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphaqb7ny2\\async-lock-3.4.0\\target\\debug\\deps\\libevent_listener-45c869864aabd80f.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#event-listener-strategy@0.5.4",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\event-listener-strategy-0.5.4\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "event_listener_strategy",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\event-listener-strategy-0.5.4\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphaqb7ny2\\async-lock-3.4.0\\target\\debug\\deps\\libevent_listener_strategy-4e321d2b017bfd98.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmphaqb7ny2/async-lock-3.4.0#async-lock@3.4.0",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphaqb7ny2\\async-lock-3.4.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "async_lock",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphaqb7ny2\\async-lock-3.4.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: unexpected `cfg` condition name: `loom`\n   --> src\\lib.rs:116:11\n    |\n116 | #[cfg(not(loom))]\n    |           ^^^^ help: found config with similar value: `feature = \"loom\"`\n    |\n    = help: expected names are: `docsrs`, `feature`, and `test` and 31 more\n    = help: consider using a Cargo feature instead\n    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n             [lints.rust]\n             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(loom)'] }\n    = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(loom)\");` to the top of the `build.rs`\n    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n    = note: requested on the command line with `-W unexpected-cfgs`\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "expected names are: `docsrs`, `feature`, and `test` and 31 more",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider using a Cargo feature instead",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(loom)'] }",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "or consider adding `println!(\"cargo::rustc-check-cfg=cfg(loom)\");` to the top of the `build.rs`",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "requested on the command line with `-W unexpected-cfgs`",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "found config with similar value",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 4058,
                        "byte_start": 4054,
                        "column_end": 15,
                        "column_start": 11,
                        "expansion": null,
                        "file_name": "src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 116,
                        "line_start": 116,
                        "suggested_replacement": "feature = \"loom\"",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 15,
                            "highlight_start": 11,
                            "text": "#[cfg(not(loom))]"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "unexpected_cfgs",
                  "explanation": null
                },
                "level": "warning",
                "message": "unexpected `cfg` condition name: `loom`",
                "spans": [
                  {
                    "byte_end": 4058,
                    "byte_start": 4054,
                    "column_end": 15,
                    "column_start": 11,
                    "expansion": null,
                    "file_name": "src\\lib.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 116,
                    "line_start": 116,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 15,
                        "highlight_start": 11,
                        "text": "#[cfg(not(loom))]"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmphaqb7ny2/async-lock-3.4.0#async-lock@3.4.0",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphaqb7ny2\\async-lock-3.4.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "async_lock",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphaqb7ny2\\async-lock-3.4.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: unexpected `cfg` condition name: `loom`\n   --> src\\lib.rs:142:7\n    |\n142 | #[cfg(loom)]\n    |       ^^^^ help: found config with similar value: `feature = \"loom\"`\n    |\n    = help: consider using a Cargo feature instead\n    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n             [lints.rust]\n             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(loom)'] }\n    = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(loom)\");` to the top of the `build.rs`\n    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider using a Cargo feature instead",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(loom)'] }",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "or consider adding `println!(\"cargo::rustc-check-cfg=cfg(loom)\");` to the top of the `build.rs`",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "found config with similar value",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 4597,
                        "byte_start": 4593,
                        "column_end": 11,
                        "column_start": 7,
                        "expansion": null,
                        "file_name": "src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 142,
                        "line_start": 142,
                        "suggested_replacement": "feature = \"loom\"",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 11,
                            "highlight_start": 7,
                            "text": "#[cfg(loom)]"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "unexpected_cfgs",
                  "explanation": null
                },
                "level": "warning",
                "message": "unexpected `cfg` condition name: `loom`",
                "spans": [
                  {
                    "byte_end": 4597,
                    "byte_start": 4593,
                    "column_end": 11,
                    "column_start": 7,
                    "expansion": null,
                    "file_name": "src\\lib.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 142,
                    "line_start": 142,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 11,
                        "highlight_start": 7,
                        "text": "#[cfg(loom)]"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmphaqb7ny2/async-lock-3.4.0#async-lock@3.4.0",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphaqb7ny2\\async-lock-3.4.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "async_lock",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphaqb7ny2\\async-lock-3.4.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: unexpected `cfg` condition name: `loom`\n  --> src\\barrier.rs:27:29\n   |\n27 |         const_if: #[cfg(not(loom))];\n   |                             ^^^^ help: found config with similar value: `feature = \"loom\"`\n   |\n   = help: consider using a Cargo feature instead\n   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n            [lints.rust]\n            unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(loom)'] }\n   = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(loom)\");` to the top of the `build.rs`\n   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider using a Cargo feature instead",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(loom)'] }",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "or consider adding `println!(\"cargo::rustc-check-cfg=cfg(loom)\");` to the top of the `build.rs`",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "found config with similar value",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 524,
                        "byte_start": 520,
                        "column_end": 33,
                        "column_start": 29,
                        "expansion": null,
                        "file_name": "src\\barrier.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 27,
                        "line_start": 27,
                        "suggested_replacement": "feature = \"loom\"",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 33,
                            "highlight_start": 29,
                            "text": "        const_if: #[cfg(not(loom))];"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "unexpected_cfgs",
                  "explanation": null
                },
                "level": "warning",
                "message": "unexpected `cfg` condition name: `loom`",
                "spans": [
                  {
                    "byte_end": 524,
                    "byte_start": 520,
                    "column_end": 33,
                    "column_start": 29,
                    "expansion": null,
                    "file_name": "src\\barrier.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 27,
                    "line_start": 27,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 33,
                        "highlight_start": 29,
                        "text": "        const_if: #[cfg(not(loom))];"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmphaqb7ny2/async-lock-3.4.0#async-lock@3.4.0",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphaqb7ny2\\async-lock-3.4.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "async_lock",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphaqb7ny2\\async-lock-3.4.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: unexpected `cfg` condition name: `loom`\n  --> src\\mutex.rs:62:29\n   |\n62 |         const_if: #[cfg(not(loom))];\n   |                             ^^^^ help: found config with similar value: `feature = \"loom\"`\n   |\n   = help: consider using a Cargo feature instead\n   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n            [lints.rust]\n            unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(loom)'] }\n   = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(loom)\");` to the top of the `build.rs`\n   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider using a Cargo feature instead",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(loom)'] }",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "or consider adding `println!(\"cargo::rustc-check-cfg=cfg(loom)\");` to the top of the `build.rs`",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "found config with similar value",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 1690,
                        "byte_start": 1686,
                        "column_end": 33,
                        "column_start": 29,
                        "expansion": null,
                        "file_name": "src\\mutex.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 62,
                        "line_start": 62,
                        "suggested_replacement": "feature = \"loom\"",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 33,
                            "highlight_start": 29,
                            "text": "        const_if: #[cfg(not(loom))];"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "unexpected_cfgs",
                  "explanation": null
                },
                "level": "warning",
                "message": "unexpected `cfg` condition name: `loom`",
                "spans": [
                  {
                    "byte_end": 1690,
                    "byte_start": 1686,
                    "column_end": 33,
                    "column_start": 29,
                    "expansion": null,
                    "file_name": "src\\mutex.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 62,
                    "line_start": 62,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 33,
                        "highlight_start": 29,
                        "text": "        const_if: #[cfg(not(loom))];"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmphaqb7ny2/async-lock-3.4.0#async-lock@3.4.0",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphaqb7ny2\\async-lock-3.4.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "async_lock",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphaqb7ny2\\async-lock-3.4.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: unexpected `cfg` condition name: `loom`\n  --> src\\once_cell.rs:10:11\n   |\n10 | #[cfg(not(loom))]\n   |           ^^^^ help: found config with similar value: `feature = \"loom\"`\n   |\n   = help: consider using a Cargo feature instead\n   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n            [lints.rust]\n            unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(loom)'] }\n   = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(loom)\");` to the top of the `build.rs`\n   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider using a Cargo feature instead",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(loom)'] }",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "or consider adding `println!(\"cargo::rustc-check-cfg=cfg(loom)\");` to the top of the `build.rs`",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "found config with similar value",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 219,
                        "byte_start": 215,
                        "column_end": 15,
                        "column_start": 11,
                        "expansion": null,
                        "file_name": "src\\once_cell.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 10,
                        "line_start": 10,
                        "suggested_replacement": "feature = \"loom\"",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 15,
                            "highlight_start": 11,
                            "text": "#[cfg(not(loom))]"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "unexpected_cfgs",
                  "explanation": null
                },
                "level": "warning",
                "message": "unexpected `cfg` condition name: `loom`",
                "spans": [
                  {
                    "byte_end": 219,
                    "byte_start": 215,
                    "column_end": 15,
                    "column_start": 11,
                    "expansion": null,
                    "file_name": "src\\once_cell.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 10,
                    "line_start": 10,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 15,
                        "highlight_start": 11,
                        "text": "#[cfg(not(loom))]"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmphaqb7ny2/async-lock-3.4.0#async-lock@3.4.0",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphaqb7ny2\\async-lock-3.4.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "async_lock",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphaqb7ny2\\async-lock-3.4.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: unexpected `cfg` condition name: `loom`\n   --> src\\once_cell.rs:115:29\n    |\n115 |         const_if: #[cfg(not(loom))];\n    |                             ^^^^ help: found config with similar value: `feature = \"loom\"`\n    |\n    = help: consider using a Cargo feature instead\n    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n             [lints.rust]\n             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(loom)'] }\n    = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(loom)\");` to the top of the `build.rs`\n    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider using a Cargo feature instead",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(loom)'] }",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "or consider adding `println!(\"cargo::rustc-check-cfg=cfg(loom)\");` to the top of the `build.rs`",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "found config with similar value",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 2940,
                        "byte_start": 2936,
                        "column_end": 33,
                        "column_start": 29,
                        "expansion": null,
                        "file_name": "src\\once_cell.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 115,
                        "line_start": 115,
                        "suggested_replacement": "feature = \"loom\"",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 33,
                            "highlight_start": 29,
                            "text": "        const_if: #[cfg(not(loom))];"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "unexpected_cfgs",
                  "explanation": null
                },
                "level": "warning",
                "message": "unexpected `cfg` condition name: `loom`",
                "spans": [
                  {
                    "byte_end": 2940,
                    "byte_start": 2936,
                    "column_end": 33,
                    "column_start": 29,
                    "expansion": null,
                    "file_name": "src\\once_cell.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 115,
                    "line_start": 115,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 33,
                        "highlight_start": 29,
                        "text": "        const_if: #[cfg(not(loom))];"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmphaqb7ny2/async-lock-3.4.0#async-lock@3.4.0",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphaqb7ny2\\async-lock-3.4.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "async_lock",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphaqb7ny2\\async-lock-3.4.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: unexpected `cfg` condition name: `loom`\n  --> src\\rwlock\\raw.rs:48:29\n   |\n48 |         const_if: #[cfg(not(loom))];\n   |                             ^^^^ help: found config with similar value: `feature = \"loom\"`\n   |\n   = help: consider using a Cargo feature instead\n   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n            [lints.rust]\n            unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(loom)'] }\n   = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(loom)\");` to the top of the `build.rs`\n   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider using a Cargo feature instead",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(loom)'] }",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "or consider adding `println!(\"cargo::rustc-check-cfg=cfg(loom)\");` to the top of the `build.rs`",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "found config with similar value",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 1415,
                        "byte_start": 1411,
                        "column_end": 33,
                        "column_start": 29,
                        "expansion": null,
                        "file_name": "src\\rwlock\\raw.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 48,
                        "line_start": 48,
                        "suggested_replacement": "feature = \"loom\"",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 33,
                            "highlight_start": 29,
                            "text": "        const_if: #[cfg(not(loom))];"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "unexpected_cfgs",
                  "explanation": null
                },
                "level": "warning",
                "message": "unexpected `cfg` condition name: `loom`",
                "spans": [
                  {
                    "byte_end": 1415,
                    "byte_start": 1411,
                    "column_end": 33,
                    "column_start": 29,
                    "expansion": null,
                    "file_name": "src\\rwlock\\raw.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 48,
                    "line_start": 48,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 33,
                        "highlight_start": 29,
                        "text": "        const_if: #[cfg(not(loom))];"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmphaqb7ny2/async-lock-3.4.0#async-lock@3.4.0",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphaqb7ny2\\async-lock-3.4.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "async_lock",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphaqb7ny2\\async-lock-3.4.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: unexpected `cfg` condition name: `loom`\n  --> src\\rwlock.rs:59:29\n   |\n59 |         const_if: #[cfg(not(loom))];\n   |                             ^^^^ help: found config with similar value: `feature = \"loom\"`\n   |\n   = help: consider using a Cargo feature instead\n   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n            [lints.rust]\n            unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(loom)'] }\n   = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(loom)\");` to the top of the `build.rs`\n   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider using a Cargo feature instead",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(loom)'] }",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "or consider adding `println!(\"cargo::rustc-check-cfg=cfg(loom)\");` to the top of the `build.rs`",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "found config with similar value",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 1487,
                        "byte_start": 1483,
                        "column_end": 33,
                        "column_start": 29,
                        "expansion": null,
                        "file_name": "src\\rwlock.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 59,
                        "line_start": 59,
                        "suggested_replacement": "feature = \"loom\"",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 33,
                            "highlight_start": 29,
                            "text": "        const_if: #[cfg(not(loom))];"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "unexpected_cfgs",
                  "explanation": null
                },
                "level": "warning",
                "message": "unexpected `cfg` condition name: `loom`",
                "spans": [
                  {
                    "byte_end": 1487,
                    "byte_start": 1483,
                    "column_end": 33,
                    "column_start": 29,
                    "expansion": null,
                    "file_name": "src\\rwlock.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 59,
                    "line_start": 59,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 33,
                        "highlight_start": 29,
                        "text": "        const_if: #[cfg(not(loom))];"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmphaqb7ny2/async-lock-3.4.0#async-lock@3.4.0",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphaqb7ny2\\async-lock-3.4.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "async_lock",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphaqb7ny2\\async-lock-3.4.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: unexpected `cfg` condition name: `loom`\n  --> src\\semaphore.rs:23:29\n   |\n23 |         const_if: #[cfg(not(loom))];\n   |                             ^^^^ help: found config with similar value: `feature = \"loom\"`\n   |\n   = help: consider using a Cargo feature instead\n   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n            [lints.rust]\n            unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(loom)'] }\n   = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(loom)\");` to the top of the `build.rs`\n   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider using a Cargo feature instead",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(loom)'] }",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "or consider adding `println!(\"cargo::rustc-check-cfg=cfg(loom)\");` to the top of the `build.rs`",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "found config with similar value",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 515,
                        "byte_start": 511,
                        "column_end": 33,
                        "column_start": 29,
                        "expansion": null,
                        "file_name": "src\\semaphore.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 23,
                        "line_start": 23,
                        "suggested_replacement": "feature = \"loom\"",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 33,
                            "highlight_start": 29,
                            "text": "        const_if: #[cfg(not(loom))];"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "unexpected_cfgs",
                  "explanation": null
                },
                "level": "warning",
                "message": "unexpected `cfg` condition name: `loom`",
                "spans": [
                  {
                    "byte_end": 515,
                    "byte_start": 511,
                    "column_end": 33,
                    "column_start": 29,
                    "expansion": null,
                    "file_name": "src\\semaphore.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 23,
                    "line_start": 23,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 33,
                        "highlight_start": 29,
                        "text": "        const_if: #[cfg(not(loom))];"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-artifact",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmphaqb7ny2/async-lock-3.4.0#async-lock@3.4.0",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphaqb7ny2\\async-lock-3.4.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "async_lock",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphaqb7ny2\\async-lock-3.4.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphaqb7ny2\\async-lock-3.4.0\\target\\debug\\deps\\libasync_lock-c024526f32a8c894.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "build-finished",
              "success": true
            }
          ],
          "clippy": [
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#crossbeam-utils@0.8.21",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\crossbeam-utils-0.8.21\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\crossbeam-utils-0.8.21\\build.rs",
                "edition": "2021",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphaqb7ny2\\async-lock-3.4.0\\target\\debug\\build\\crossbeam-utils-058eff74cbd551a4\\build-script-build.exe",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphaqb7ny2\\async-lock-3.4.0\\target\\debug\\build\\crossbeam-utils-058eff74cbd551a4\\build_script_build.pdb"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "build-script-executed",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#crossbeam-utils@0.8.21",
              "linked_libs": [],
              "linked_paths": [],
              "cfgs": [],
              "env": [],
              "out_dir": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphaqb7ny2\\async-lock-3.4.0\\target\\debug\\build\\crossbeam-utils-8d9c1eff06854c8d\\out"
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#parking@2.2.1",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\parking-2.2.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "parking",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\parking-2.2.1\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphaqb7ny2\\async-lock-3.4.0\\target\\debug\\deps\\libparking-bd9888c8dfceec72.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#pin-project-lite@0.2.16",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\pin-project-lite-0.2.16\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "pin_project_lite",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\pin-project-lite-0.2.16\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphaqb7ny2\\async-lock-3.4.0\\target\\debug\\deps\\libpin_project_lite-c1a285380b388093.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#crossbeam-utils@0.8.21",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\crossbeam-utils-0.8.21\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "crossbeam_utils",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\crossbeam-utils-0.8.21\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphaqb7ny2\\async-lock-3.4.0\\target\\debug\\deps\\libcrossbeam_utils-0f4f22ec3e3ec06e.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#concurrent-queue@2.5.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\concurrent-queue-2.5.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "concurrent_queue",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\concurrent-queue-2.5.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphaqb7ny2\\async-lock-3.4.0\\target\\debug\\deps\\libconcurrent_queue-6d8464127a7463ef.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#event-listener@5.4.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\event-listener-5.4.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "event_listener",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\event-listener-5.4.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "parking",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphaqb7ny2\\async-lock-3.4.0\\target\\debug\\deps\\libevent_listener-45c869864aabd80f.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#event-listener-strategy@0.5.4",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\event-listener-strategy-0.5.4\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "event_listener_strategy",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\event-listener-strategy-0.5.4\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphaqb7ny2\\async-lock-3.4.0\\target\\debug\\deps\\libevent_listener_strategy-4e321d2b017bfd98.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmphaqb7ny2/async-lock-3.4.0#async-lock@3.4.0",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphaqb7ny2\\async-lock-3.4.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "async_lock",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphaqb7ny2\\async-lock-3.4.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: unexpected `cfg` condition name: `loom`\n   --> src\\lib.rs:116:11\n    |\n116 | #[cfg(not(loom))]\n    |           ^^^^ help: found config with similar value: `feature = \"loom\"`\n    |\n    = help: expected names are: `docsrs`, `feature`, and `test` and 31 more\n    = help: consider using a Cargo feature instead\n    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n             [lints.rust]\n             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(loom)'] }\n    = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(loom)\");` to the top of the `build.rs`\n    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n    = note: requested on the command line with `-W unexpected-cfgs`\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "expected names are: `docsrs`, `feature`, and `test` and 31 more",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider using a Cargo feature instead",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(loom)'] }",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "or consider adding `println!(\"cargo::rustc-check-cfg=cfg(loom)\");` to the top of the `build.rs`",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "requested on the command line with `-W unexpected-cfgs`",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "found config with similar value",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 4058,
                        "byte_start": 4054,
                        "column_end": 15,
                        "column_start": 11,
                        "expansion": null,
                        "file_name": "src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 116,
                        "line_start": 116,
                        "suggested_replacement": "feature = \"loom\"",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 15,
                            "highlight_start": 11,
                            "text": "#[cfg(not(loom))]"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "unexpected_cfgs",
                  "explanation": null
                },
                "level": "warning",
                "message": "unexpected `cfg` condition name: `loom`",
                "spans": [
                  {
                    "byte_end": 4058,
                    "byte_start": 4054,
                    "column_end": 15,
                    "column_start": 11,
                    "expansion": null,
                    "file_name": "src\\lib.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 116,
                    "line_start": 116,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 15,
                        "highlight_start": 11,
                        "text": "#[cfg(not(loom))]"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmphaqb7ny2/async-lock-3.4.0#async-lock@3.4.0",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphaqb7ny2\\async-lock-3.4.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "async_lock",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphaqb7ny2\\async-lock-3.4.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: unexpected `cfg` condition name: `loom`\n   --> src\\lib.rs:142:7\n    |\n142 | #[cfg(loom)]\n    |       ^^^^ help: found config with similar value: `feature = \"loom\"`\n    |\n    = help: consider using a Cargo feature instead\n    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n             [lints.rust]\n             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(loom)'] }\n    = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(loom)\");` to the top of the `build.rs`\n    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider using a Cargo feature instead",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(loom)'] }",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "or consider adding `println!(\"cargo::rustc-check-cfg=cfg(loom)\");` to the top of the `build.rs`",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "found config with similar value",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 4597,
                        "byte_start": 4593,
                        "column_end": 11,
                        "column_start": 7,
                        "expansion": null,
                        "file_name": "src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 142,
                        "line_start": 142,
                        "suggested_replacement": "feature = \"loom\"",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 11,
                            "highlight_start": 7,
                            "text": "#[cfg(loom)]"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "unexpected_cfgs",
                  "explanation": null
                },
                "level": "warning",
                "message": "unexpected `cfg` condition name: `loom`",
                "spans": [
                  {
                    "byte_end": 4597,
                    "byte_start": 4593,
                    "column_end": 11,
                    "column_start": 7,
                    "expansion": null,
                    "file_name": "src\\lib.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 142,
                    "line_start": 142,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 11,
                        "highlight_start": 7,
                        "text": "#[cfg(loom)]"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmphaqb7ny2/async-lock-3.4.0#async-lock@3.4.0",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphaqb7ny2\\async-lock-3.4.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "async_lock",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphaqb7ny2\\async-lock-3.4.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: unexpected `cfg` condition name: `loom`\n  --> src\\barrier.rs:27:29\n   |\n27 |         const_if: #[cfg(not(loom))];\n   |                             ^^^^ help: found config with similar value: `feature = \"loom\"`\n   |\n   = help: consider using a Cargo feature instead\n   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n            [lints.rust]\n            unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(loom)'] }\n   = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(loom)\");` to the top of the `build.rs`\n   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider using a Cargo feature instead",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(loom)'] }",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "or consider adding `println!(\"cargo::rustc-check-cfg=cfg(loom)\");` to the top of the `build.rs`",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "found config with similar value",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 524,
                        "byte_start": 520,
                        "column_end": 33,
                        "column_start": 29,
                        "expansion": null,
                        "file_name": "src\\barrier.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 27,
                        "line_start": 27,
                        "suggested_replacement": "feature = \"loom\"",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 33,
                            "highlight_start": 29,
                            "text": "        const_if: #[cfg(not(loom))];"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "unexpected_cfgs",
                  "explanation": null
                },
                "level": "warning",
                "message": "unexpected `cfg` condition name: `loom`",
                "spans": [
                  {
                    "byte_end": 524,
                    "byte_start": 520,
                    "column_end": 33,
                    "column_start": 29,
                    "expansion": null,
                    "file_name": "src\\barrier.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 27,
                    "line_start": 27,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 33,
                        "highlight_start": 29,
                        "text": "        const_if: #[cfg(not(loom))];"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmphaqb7ny2/async-lock-3.4.0#async-lock@3.4.0",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphaqb7ny2\\async-lock-3.4.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "async_lock",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphaqb7ny2\\async-lock-3.4.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: unexpected `cfg` condition name: `loom`\n  --> src\\mutex.rs:62:29\n   |\n62 |         const_if: #[cfg(not(loom))];\n   |                             ^^^^ help: found config with similar value: `feature = \"loom\"`\n   |\n   = help: consider using a Cargo feature instead\n   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n            [lints.rust]\n            unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(loom)'] }\n   = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(loom)\");` to the top of the `build.rs`\n   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider using a Cargo feature instead",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(loom)'] }",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "or consider adding `println!(\"cargo::rustc-check-cfg=cfg(loom)\");` to the top of the `build.rs`",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "found config with similar value",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 1690,
                        "byte_start": 1686,
                        "column_end": 33,
                        "column_start": 29,
                        "expansion": null,
                        "file_name": "src\\mutex.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 62,
                        "line_start": 62,
                        "suggested_replacement": "feature = \"loom\"",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 33,
                            "highlight_start": 29,
                            "text": "        const_if: #[cfg(not(loom))];"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "unexpected_cfgs",
                  "explanation": null
                },
                "level": "warning",
                "message": "unexpected `cfg` condition name: `loom`",
                "spans": [
                  {
                    "byte_end": 1690,
                    "byte_start": 1686,
                    "column_end": 33,
                    "column_start": 29,
                    "expansion": null,
                    "file_name": "src\\mutex.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 62,
                    "line_start": 62,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 33,
                        "highlight_start": 29,
                        "text": "        const_if: #[cfg(not(loom))];"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmphaqb7ny2/async-lock-3.4.0#async-lock@3.4.0",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphaqb7ny2\\async-lock-3.4.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "async_lock",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphaqb7ny2\\async-lock-3.4.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: unexpected `cfg` condition name: `loom`\n  --> src\\once_cell.rs:10:11\n   |\n10 | #[cfg(not(loom))]\n   |           ^^^^ help: found config with similar value: `feature = \"loom\"`\n   |\n   = help: consider using a Cargo feature instead\n   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n            [lints.rust]\n            unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(loom)'] }\n   = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(loom)\");` to the top of the `build.rs`\n   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider using a Cargo feature instead",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(loom)'] }",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "or consider adding `println!(\"cargo::rustc-check-cfg=cfg(loom)\");` to the top of the `build.rs`",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "found config with similar value",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 219,
                        "byte_start": 215,
                        "column_end": 15,
                        "column_start": 11,
                        "expansion": null,
                        "file_name": "src\\once_cell.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 10,
                        "line_start": 10,
                        "suggested_replacement": "feature = \"loom\"",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 15,
                            "highlight_start": 11,
                            "text": "#[cfg(not(loom))]"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "unexpected_cfgs",
                  "explanation": null
                },
                "level": "warning",
                "message": "unexpected `cfg` condition name: `loom`",
                "spans": [
                  {
                    "byte_end": 219,
                    "byte_start": 215,
                    "column_end": 15,
                    "column_start": 11,
                    "expansion": null,
                    "file_name": "src\\once_cell.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 10,
                    "line_start": 10,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 15,
                        "highlight_start": 11,
                        "text": "#[cfg(not(loom))]"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmphaqb7ny2/async-lock-3.4.0#async-lock@3.4.0",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphaqb7ny2\\async-lock-3.4.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "async_lock",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphaqb7ny2\\async-lock-3.4.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: unexpected `cfg` condition name: `loom`\n   --> src\\once_cell.rs:115:29\n    |\n115 |         const_if: #[cfg(not(loom))];\n    |                             ^^^^ help: found config with similar value: `feature = \"loom\"`\n    |\n    = help: consider using a Cargo feature instead\n    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n             [lints.rust]\n             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(loom)'] }\n    = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(loom)\");` to the top of the `build.rs`\n    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider using a Cargo feature instead",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(loom)'] }",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "or consider adding `println!(\"cargo::rustc-check-cfg=cfg(loom)\");` to the top of the `build.rs`",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "found config with similar value",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 2940,
                        "byte_start": 2936,
                        "column_end": 33,
                        "column_start": 29,
                        "expansion": null,
                        "file_name": "src\\once_cell.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 115,
                        "line_start": 115,
                        "suggested_replacement": "feature = \"loom\"",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 33,
                            "highlight_start": 29,
                            "text": "        const_if: #[cfg(not(loom))];"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "unexpected_cfgs",
                  "explanation": null
                },
                "level": "warning",
                "message": "unexpected `cfg` condition name: `loom`",
                "spans": [
                  {
                    "byte_end": 2940,
                    "byte_start": 2936,
                    "column_end": 33,
                    "column_start": 29,
                    "expansion": null,
                    "file_name": "src\\once_cell.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 115,
                    "line_start": 115,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 33,
                        "highlight_start": 29,
                        "text": "        const_if: #[cfg(not(loom))];"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmphaqb7ny2/async-lock-3.4.0#async-lock@3.4.0",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphaqb7ny2\\async-lock-3.4.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "async_lock",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphaqb7ny2\\async-lock-3.4.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: unexpected `cfg` condition name: `loom`\n  --> src\\rwlock\\raw.rs:48:29\n   |\n48 |         const_if: #[cfg(not(loom))];\n   |                             ^^^^ help: found config with similar value: `feature = \"loom\"`\n   |\n   = help: consider using a Cargo feature instead\n   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n            [lints.rust]\n            unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(loom)'] }\n   = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(loom)\");` to the top of the `build.rs`\n   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider using a Cargo feature instead",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(loom)'] }",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "or consider adding `println!(\"cargo::rustc-check-cfg=cfg(loom)\");` to the top of the `build.rs`",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "found config with similar value",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 1415,
                        "byte_start": 1411,
                        "column_end": 33,
                        "column_start": 29,
                        "expansion": null,
                        "file_name": "src\\rwlock\\raw.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 48,
                        "line_start": 48,
                        "suggested_replacement": "feature = \"loom\"",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 33,
                            "highlight_start": 29,
                            "text": "        const_if: #[cfg(not(loom))];"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "unexpected_cfgs",
                  "explanation": null
                },
                "level": "warning",
                "message": "unexpected `cfg` condition name: `loom`",
                "spans": [
                  {
                    "byte_end": 1415,
                    "byte_start": 1411,
                    "column_end": 33,
                    "column_start": 29,
                    "expansion": null,
                    "file_name": "src\\rwlock\\raw.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 48,
                    "line_start": 48,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 33,
                        "highlight_start": 29,
                        "text": "        const_if: #[cfg(not(loom))];"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmphaqb7ny2/async-lock-3.4.0#async-lock@3.4.0",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphaqb7ny2\\async-lock-3.4.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "async_lock",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphaqb7ny2\\async-lock-3.4.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: empty line after doc comment\n   --> src\\rwlock\\raw.rs:99:5\n    |\n99  | /     /// Returns `true` iff an upgradable read lock was successfully acquired.\n100 | |\n    | |_^\n101 |       pub(super) fn try_upgradable_read(&self) -> bool {\n    |       --------------------------------- the comment documents this function\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#empty_line_after_doc_comments\n    = note: `#[warn(clippy::empty_line_after_doc_comments)]` on by default\n    = help: if the empty line is unintentional, remove it\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#empty_line_after_doc_comments",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "`#[warn(clippy::empty_line_after_doc_comments)]` on by default",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "if the empty line is unintentional, remove it",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 2929,
                        "byte_start": 2928,
                        "column_end": 1,
                        "column_start": 78,
                        "expansion": null,
                        "file_name": "src\\rwlock\\raw.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 100,
                        "line_start": 99,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 78,
                            "highlight_start": 78,
                            "text": "    /// Returns `true` iff an upgradable read lock was successfully acquired."
                          },
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": ""
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::empty_line_after_doc_comments",
                  "explanation": null
                },
                "level": "warning",
                "message": "empty line after doc comment",
                "spans": [
                  {
                    "byte_end": 2967,
                    "byte_start": 2934,
                    "column_end": 38,
                    "column_start": 5,
                    "expansion": null,
                    "file_name": "src\\rwlock\\raw.rs",
                    "is_primary": false,
                    "label": "the comment documents this function",
                    "line_end": 101,
                    "line_start": 101,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 38,
                        "highlight_start": 5,
                        "text": "    pub(super) fn try_upgradable_read(&self) -> bool {"
                      }
                    ]
                  },
                  {
                    "byte_end": 2929,
                    "byte_start": 2855,
                    "column_end": 1,
                    "column_start": 5,
                    "expansion": null,
                    "file_name": "src\\rwlock\\raw.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 100,
                    "line_start": 99,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 78,
                        "highlight_start": 5,
                        "text": "    /// Returns `true` iff an upgradable read lock was successfully acquired."
                      },
                      {
                        "highlight_end": 1,
                        "highlight_start": 1,
                        "text": ""
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmphaqb7ny2/async-lock-3.4.0#async-lock@3.4.0",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphaqb7ny2\\async-lock-3.4.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "async_lock",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphaqb7ny2\\async-lock-3.4.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: empty line after outer attribute\n   --> src\\rwlock\\raw.rs:132:5\n    |\n132 | /     #[inline]\n133 | |\n    | |_^\n134 |       pub(super) fn upgradable_read(&self) -> RawUpgradableRead<'_> {\n    |       ----------------------------- the attribute applies to this function\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#empty_line_after_outer_attr\n    = note: `#[warn(clippy::empty_line_after_outer_attr)]` on by default\n    = help: if the empty line is unintentional, remove it\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#empty_line_after_outer_attr",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "`#[warn(clippy::empty_line_after_outer_attr)]` on by default",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "if the empty line is unintentional, remove it",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 3762,
                        "byte_start": 3761,
                        "column_end": 1,
                        "column_start": 14,
                        "expansion": null,
                        "file_name": "src\\rwlock\\raw.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 133,
                        "line_start": 132,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 14,
                            "highlight_start": 14,
                            "text": "    #[inline]"
                          },
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": ""
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::empty_line_after_outer_attr",
                  "explanation": null
                },
                "level": "warning",
                "message": "empty line after outer attribute",
                "spans": [
                  {
                    "byte_end": 3796,
                    "byte_start": 3767,
                    "column_end": 34,
                    "column_start": 5,
                    "expansion": null,
                    "file_name": "src\\rwlock\\raw.rs",
                    "is_primary": false,
                    "label": "the attribute applies to this function",
                    "line_end": 134,
                    "line_start": 134,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 34,
                        "highlight_start": 5,
                        "text": "    pub(super) fn upgradable_read(&self) -> RawUpgradableRead<'_> {"
                      }
                    ]
                  },
                  {
                    "byte_end": 3762,
                    "byte_start": 3752,
                    "column_end": 1,
                    "column_start": 5,
                    "expansion": null,
                    "file_name": "src\\rwlock\\raw.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 133,
                    "line_start": 132,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 14,
                        "highlight_start": 5,
                        "text": "    #[inline]"
                      },
                      {
                        "highlight_end": 1,
                        "highlight_start": 1,
                        "text": ""
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmphaqb7ny2/async-lock-3.4.0#async-lock@3.4.0",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphaqb7ny2\\async-lock-3.4.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "async_lock",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphaqb7ny2\\async-lock-3.4.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: empty line after doc comment\n   --> src\\rwlock\\raw.rs:141:5\n    |\n141 | /     /// Returs `true` iff a write lock was successfully acquired.\n142 | |\n    | |_^\n143 |       pub(super) fn try_write(&self) -> bool {\n    |       ----------------------- the comment documents this function\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#empty_line_after_doc_comments\n    = help: if the empty line is unintentional, remove it\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#empty_line_after_doc_comments",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "if the empty line is unintentional, remove it",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 4006,
                        "byte_start": 4005,
                        "column_end": 1,
                        "column_start": 66,
                        "expansion": null,
                        "file_name": "src\\rwlock\\raw.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 142,
                        "line_start": 141,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 66,
                            "highlight_start": 66,
                            "text": "    /// Returs `true` iff a write lock was successfully acquired."
                          },
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": ""
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::empty_line_after_doc_comments",
                  "explanation": null
                },
                "level": "warning",
                "message": "empty line after doc comment",
                "spans": [
                  {
                    "byte_end": 4034,
                    "byte_start": 4011,
                    "column_end": 28,
                    "column_start": 5,
                    "expansion": null,
                    "file_name": "src\\rwlock\\raw.rs",
                    "is_primary": false,
                    "label": "the comment documents this function",
                    "line_end": 143,
                    "line_start": 143,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 28,
                        "highlight_start": 5,
                        "text": "    pub(super) fn try_write(&self) -> bool {"
                      }
                    ]
                  },
                  {
                    "byte_end": 4006,
                    "byte_start": 3944,
                    "column_end": 1,
                    "column_start": 5,
                    "expansion": null,
                    "file_name": "src\\rwlock\\raw.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 142,
                    "line_start": 141,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 66,
                        "highlight_start": 5,
                        "text": "    /// Returs `true` iff a write lock was successfully acquired."
                      },
                      {
                        "highlight_end": 1,
                        "highlight_start": 1,
                        "text": ""
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmphaqb7ny2/async-lock-3.4.0#async-lock@3.4.0",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphaqb7ny2\\async-lock-3.4.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "async_lock",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphaqb7ny2\\async-lock-3.4.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: empty line after outer attribute\n   --> src\\rwlock\\raw.rs:165:5\n    |\n165 | /     #[inline]\n166 | |\n    | |_^\n167 |       pub(super) fn write(&self) -> RawWrite<'_> {\n    |       ------------------- the attribute applies to this function\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#empty_line_after_outer_attr\n    = help: if the empty line is unintentional, remove it\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#empty_line_after_outer_attr",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "if the empty line is unintentional, remove it",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 4566,
                        "byte_start": 4565,
                        "column_end": 1,
                        "column_start": 14,
                        "expansion": null,
                        "file_name": "src\\rwlock\\raw.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 166,
                        "line_start": 165,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 14,
                            "highlight_start": 14,
                            "text": "    #[inline]"
                          },
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": ""
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::empty_line_after_outer_attr",
                  "explanation": null
                },
                "level": "warning",
                "message": "empty line after outer attribute",
                "spans": [
                  {
                    "byte_end": 4590,
                    "byte_start": 4571,
                    "column_end": 24,
                    "column_start": 5,
                    "expansion": null,
                    "file_name": "src\\rwlock\\raw.rs",
                    "is_primary": false,
                    "label": "the attribute applies to this function",
                    "line_end": 167,
                    "line_start": 167,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 24,
                        "highlight_start": 5,
                        "text": "    pub(super) fn write(&self) -> RawWrite<'_> {"
                      }
                    ]
                  },
                  {
                    "byte_end": 4566,
                    "byte_start": 4556,
                    "column_end": 1,
                    "column_start": 5,
                    "expansion": null,
                    "file_name": "src\\rwlock\\raw.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 166,
                    "line_start": 165,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 14,
                        "highlight_start": 5,
                        "text": "    #[inline]"
                      },
                      {
                        "highlight_end": 1,
                        "highlight_start": 1,
                        "text": ""
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmphaqb7ny2/async-lock-3.4.0#async-lock@3.4.0",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphaqb7ny2\\async-lock-3.4.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "async_lock",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphaqb7ny2\\async-lock-3.4.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: empty line after doc comment\n   --> src\\rwlock\\raw.rs:182:5\n    |\n182 | /     /// This will attempt to upgrade it to a write lock.\n183 | |\n    | |_^\n184 |       pub(super) unsafe fn try_upgrade(&self) -> bool {\n    |       -------------------------------- the comment documents this function\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#empty_line_after_doc_comments\n    = help: if the empty line is unintentional, remove it\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#empty_line_after_doc_comments",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "if the empty line is unintentional, remove it",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 5042,
                        "byte_start": 5041,
                        "column_end": 1,
                        "column_start": 57,
                        "expansion": null,
                        "file_name": "src\\rwlock\\raw.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 183,
                        "line_start": 182,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 57,
                            "highlight_start": 57,
                            "text": "    /// This will attempt to upgrade it to a write lock."
                          },
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": ""
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::empty_line_after_doc_comments",
                  "explanation": null
                },
                "level": "warning",
                "message": "empty line after doc comment",
                "spans": [
                  {
                    "byte_end": 5079,
                    "byte_start": 5047,
                    "column_end": 37,
                    "column_start": 5,
                    "expansion": null,
                    "file_name": "src\\rwlock\\raw.rs",
                    "is_primary": false,
                    "label": "the comment documents this function",
                    "line_end": 184,
                    "line_start": 184,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 37,
                        "highlight_start": 5,
                        "text": "    pub(super) unsafe fn try_upgrade(&self) -> bool {"
                      }
                    ]
                  },
                  {
                    "byte_end": 5042,
                    "byte_start": 4989,
                    "column_end": 1,
                    "column_start": 5,
                    "expansion": null,
                    "file_name": "src\\rwlock\\raw.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 183,
                    "line_start": 182,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 57,
                        "highlight_start": 5,
                        "text": "    /// This will attempt to upgrade it to a write lock."
                      },
                      {
                        "highlight_end": 1,
                        "highlight_start": 1,
                        "text": ""
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmphaqb7ny2/async-lock-3.4.0#async-lock@3.4.0",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphaqb7ny2\\async-lock-3.4.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "async_lock",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphaqb7ny2\\async-lock-3.4.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: empty line after doc comment\n   --> src\\rwlock\\raw.rs:193:5\n    |\n193 | /     /// This will upgrade it to a write lock.\n194 | |\n    | |_^\n195 |       pub(super) unsafe fn upgrade(&self) -> RawUpgrade<'_> {\n    |       ---------------------------- the comment documents this function\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#empty_line_after_doc_comments\n    = help: if the empty line is unintentional, remove it\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#empty_line_after_doc_comments",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "if the empty line is unintentional, remove it",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 5356,
                        "byte_start": 5355,
                        "column_end": 1,
                        "column_start": 46,
                        "expansion": null,
                        "file_name": "src\\rwlock\\raw.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 194,
                        "line_start": 193,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 46,
                            "highlight_start": 46,
                            "text": "    /// This will upgrade it to a write lock."
                          },
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": ""
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::empty_line_after_doc_comments",
                  "explanation": null
                },
                "level": "warning",
                "message": "empty line after doc comment",
                "spans": [
                  {
                    "byte_end": 5389,
                    "byte_start": 5361,
                    "column_end": 33,
                    "column_start": 5,
                    "expansion": null,
                    "file_name": "src\\rwlock\\raw.rs",
                    "is_primary": false,
                    "label": "the comment documents this function",
                    "line_end": 195,
                    "line_start": 195,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 33,
                        "highlight_start": 5,
                        "text": "    pub(super) unsafe fn upgrade(&self) -> RawUpgrade<'_> {"
                      }
                    ]
                  },
                  {
                    "byte_end": 5356,
                    "byte_start": 5314,
                    "column_end": 1,
                    "column_start": 5,
                    "expansion": null,
                    "file_name": "src\\rwlock\\raw.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 194,
                    "line_start": 193,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 46,
                        "highlight_start": 5,
                        "text": "    /// This will upgrade it to a write lock."
                      },
                      {
                        "highlight_end": 1,
                        "highlight_start": 1,
                        "text": ""
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmphaqb7ny2/async-lock-3.4.0#async-lock@3.4.0",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphaqb7ny2\\async-lock-3.4.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "async_lock",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphaqb7ny2\\async-lock-3.4.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: empty line after outer attribute\n   --> src\\rwlock\\raw.rs:211:5\n    |\n211 | /     #[inline]\n212 | |\n    | |_^\n213 |       pub(super) unsafe fn downgrade_upgradable_read(&self) {\n    |       ---------------------------------------------- the attribute applies to this function\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#empty_line_after_outer_attr\n    = help: if the empty line is unintentional, remove it\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#empty_line_after_outer_attr",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "if the empty line is unintentional, remove it",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 5859,
                        "byte_start": 5858,
                        "column_end": 1,
                        "column_start": 14,
                        "expansion": null,
                        "file_name": "src\\rwlock\\raw.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 212,
                        "line_start": 211,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 14,
                            "highlight_start": 14,
                            "text": "    #[inline]"
                          },
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": ""
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::empty_line_after_outer_attr",
                  "explanation": null
                },
                "level": "warning",
                "message": "empty line after outer attribute",
                "spans": [
                  {
                    "byte_end": 5910,
                    "byte_start": 5864,
                    "column_end": 51,
                    "column_start": 5,
                    "expansion": null,
                    "file_name": "src\\rwlock\\raw.rs",
                    "is_primary": false,
                    "label": "the attribute applies to this function",
                    "line_end": 213,
                    "line_start": 213,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 51,
                        "highlight_start": 5,
                        "text": "    pub(super) unsafe fn downgrade_upgradable_read(&self) {"
                      }
                    ]
                  },
                  {
                    "byte_end": 5859,
                    "byte_start": 5849,
                    "column_end": 1,
                    "column_start": 5,
                    "expansion": null,
                    "file_name": "src\\rwlock\\raw.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 212,
                    "line_start": 211,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 14,
                        "highlight_start": 5,
                        "text": "    #[inline]"
                      },
                      {
                        "highlight_end": 1,
                        "highlight_start": 1,
                        "text": ""
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmphaqb7ny2/async-lock-3.4.0#async-lock@3.4.0",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphaqb7ny2\\async-lock-3.4.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "async_lock",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphaqb7ny2\\async-lock-3.4.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: empty line after doc comment\n   --> src\\rwlock\\raw.rs:220:5\n    |\n220 | /     /// This will downgrade it to a read lock.\n221 | |\n    | |_^\n222 |       pub(super) unsafe fn downgrade_write(&self) {\n    |       ------------------------------------ the comment documents this function\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#empty_line_after_doc_comments\n    = help: if the empty line is unintentional, remove it\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#empty_line_after_doc_comments",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "if the empty line is unintentional, remove it",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 6077,
                        "byte_start": 6076,
                        "column_end": 1,
                        "column_start": 47,
                        "expansion": null,
                        "file_name": "src\\rwlock\\raw.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 221,
                        "line_start": 220,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 47,
                            "highlight_start": 47,
                            "text": "    /// This will downgrade it to a read lock."
                          },
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": ""
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::empty_line_after_doc_comments",
                  "explanation": null
                },
                "level": "warning",
                "message": "empty line after doc comment",
                "spans": [
                  {
                    "byte_end": 6118,
                    "byte_start": 6082,
                    "column_end": 41,
                    "column_start": 5,
                    "expansion": null,
                    "file_name": "src\\rwlock\\raw.rs",
                    "is_primary": false,
                    "label": "the comment documents this function",
                    "line_end": 222,
                    "line_start": 222,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 41,
                        "highlight_start": 5,
                        "text": "    pub(super) unsafe fn downgrade_write(&self) {"
                      }
                    ]
                  },
                  {
                    "byte_end": 6077,
                    "byte_start": 6034,
                    "column_end": 1,
                    "column_start": 5,
                    "expansion": null,
                    "file_name": "src\\rwlock\\raw.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 221,
                    "line_start": 220,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 47,
                        "highlight_start": 5,
                        "text": "    /// This will downgrade it to a read lock."
                      },
                      {
                        "highlight_end": 1,
                        "highlight_start": 1,
                        "text": ""
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmphaqb7ny2/async-lock-3.4.0#async-lock@3.4.0",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphaqb7ny2\\async-lock-3.4.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "async_lock",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphaqb7ny2\\async-lock-3.4.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: empty line after doc comment\n   --> src\\rwlock\\raw.rs:237:5\n    |\n237 | /     /// This will downgrade it to an upgradable read lock.\n238 | |\n    | |_^\n239 |       pub(super) unsafe fn downgrade_to_upgradable(&self) {\n    |       -------------------------------------------- the comment documents this function\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#empty_line_after_doc_comments\n    = help: if the empty line is unintentional, remove it\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#empty_line_after_doc_comments",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "if the empty line is unintentional, remove it",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 6537,
                        "byte_start": 6536,
                        "column_end": 1,
                        "column_start": 59,
                        "expansion": null,
                        "file_name": "src\\rwlock\\raw.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 238,
                        "line_start": 237,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 59,
                            "highlight_start": 59,
                            "text": "    /// This will downgrade it to an upgradable read lock."
                          },
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": ""
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::empty_line_after_doc_comments",
                  "explanation": null
                },
                "level": "warning",
                "message": "empty line after doc comment",
                "spans": [
                  {
                    "byte_end": 6586,
                    "byte_start": 6542,
                    "column_end": 49,
                    "column_start": 5,
                    "expansion": null,
                    "file_name": "src\\rwlock\\raw.rs",
                    "is_primary": false,
                    "label": "the comment documents this function",
                    "line_end": 239,
                    "line_start": 239,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 49,
                        "highlight_start": 5,
                        "text": "    pub(super) unsafe fn downgrade_to_upgradable(&self) {"
                      }
                    ]
                  },
                  {
                    "byte_end": 6537,
                    "byte_start": 6482,
                    "column_end": 1,
                    "column_start": 5,
                    "expansion": null,
                    "file_name": "src\\rwlock\\raw.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 238,
                    "line_start": 237,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 59,
                        "highlight_start": 5,
                        "text": "    /// This will downgrade it to an upgradable read lock."
                      },
                      {
                        "highlight_end": 1,
                        "highlight_start": 1,
                        "text": ""
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmphaqb7ny2/async-lock-3.4.0#async-lock@3.4.0",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphaqb7ny2\\async-lock-3.4.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "async_lock",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphaqb7ny2\\async-lock-3.4.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: empty line after doc comment\n   --> src\\rwlock\\raw.rs:248:5\n    |\n248 | /     /// This will unlock that lock.\n249 | |\n    | |_^\n250 |       pub(super) unsafe fn read_unlock(&self) {\n    |       -------------------------------- the comment documents this function\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#empty_line_after_doc_comments\n    = help: if the empty line is unintentional, remove it\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#empty_line_after_doc_comments",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "if the empty line is unintentional, remove it",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 6828,
                        "byte_start": 6827,
                        "column_end": 1,
                        "column_start": 36,
                        "expansion": null,
                        "file_name": "src\\rwlock\\raw.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 249,
                        "line_start": 248,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 36,
                            "highlight_start": 36,
                            "text": "    /// This will unlock that lock."
                          },
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": ""
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::empty_line_after_doc_comments",
                  "explanation": null
                },
                "level": "warning",
                "message": "empty line after doc comment",
                "spans": [
                  {
                    "byte_end": 6865,
                    "byte_start": 6833,
                    "column_end": 37,
                    "column_start": 5,
                    "expansion": null,
                    "file_name": "src\\rwlock\\raw.rs",
                    "is_primary": false,
                    "label": "the comment documents this function",
                    "line_end": 250,
                    "line_start": 250,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 37,
                        "highlight_start": 5,
                        "text": "    pub(super) unsafe fn read_unlock(&self) {"
                      }
                    ]
                  },
                  {
                    "byte_end": 6828,
                    "byte_start": 6796,
                    "column_end": 1,
                    "column_start": 5,
                    "expansion": null,
                    "file_name": "src\\rwlock\\raw.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 249,
                    "line_start": 248,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 36,
                        "highlight_start": 5,
                        "text": "    /// This will unlock that lock."
                      },
                      {
                        "highlight_end": 1,
                        "highlight_start": 1,
                        "text": ""
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmphaqb7ny2/async-lock-3.4.0#async-lock@3.4.0",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphaqb7ny2\\async-lock-3.4.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "async_lock",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphaqb7ny2\\async-lock-3.4.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: empty line after doc comment\n   --> src\\rwlock\\raw.rs:261:5\n    |\n261 | /     /// This will unlock that lock.\n262 | |\n    | |_^\n263 |       pub(super) unsafe fn upgradable_read_unlock(&self) {\n    |       ------------------------------------------- the comment documents this function\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#empty_line_after_doc_comments\n    = help: if the empty line is unintentional, remove it\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#empty_line_after_doc_comments",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "if the empty line is unintentional, remove it",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 7254,
                        "byte_start": 7253,
                        "column_end": 1,
                        "column_start": 36,
                        "expansion": null,
                        "file_name": "src\\rwlock\\raw.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 262,
                        "line_start": 261,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 36,
                            "highlight_start": 36,
                            "text": "    /// This will unlock that lock."
                          },
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": ""
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::empty_line_after_doc_comments",
                  "explanation": null
                },
                "level": "warning",
                "message": "empty line after doc comment",
                "spans": [
                  {
                    "byte_end": 7302,
                    "byte_start": 7259,
                    "column_end": 48,
                    "column_start": 5,
                    "expansion": null,
                    "file_name": "src\\rwlock\\raw.rs",
                    "is_primary": false,
                    "label": "the comment documents this function",
                    "line_end": 263,
                    "line_start": 263,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 48,
                        "highlight_start": 5,
                        "text": "    pub(super) unsafe fn upgradable_read_unlock(&self) {"
                      }
                    ]
                  },
                  {
                    "byte_end": 7254,
                    "byte_start": 7222,
                    "column_end": 1,
                    "column_start": 5,
                    "expansion": null,
                    "file_name": "src\\rwlock\\raw.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 262,
                    "line_start": 261,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 36,
                        "highlight_start": 5,
                        "text": "    /// This will unlock that lock."
                      },
                      {
                        "highlight_end": 1,
                        "highlight_start": 1,
                        "text": ""
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmphaqb7ny2/async-lock-3.4.0#async-lock@3.4.0",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphaqb7ny2\\async-lock-3.4.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "async_lock",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphaqb7ny2\\async-lock-3.4.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: empty line after doc comment\n   --> src\\rwlock\\raw.rs:277:5\n    |\n277 | /     /// This will unlock that lock.\n278 | |\n    | |_^\n279 |       pub(super) unsafe fn write_unlock(&self) {\n    |       --------------------------------- the comment documents this function\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#empty_line_after_doc_comments\n    = help: if the empty line is unintentional, remove it\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#empty_line_after_doc_comments",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "if the empty line is unintentional, remove it",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 7802,
                        "byte_start": 7801,
                        "column_end": 1,
                        "column_start": 36,
                        "expansion": null,
                        "file_name": "src\\rwlock\\raw.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 278,
                        "line_start": 277,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 36,
                            "highlight_start": 36,
                            "text": "    /// This will unlock that lock."
                          },
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": ""
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::empty_line_after_doc_comments",
                  "explanation": null
                },
                "level": "warning",
                "message": "empty line after doc comment",
                "spans": [
                  {
                    "byte_end": 7840,
                    "byte_start": 7807,
                    "column_end": 38,
                    "column_start": 5,
                    "expansion": null,
                    "file_name": "src\\rwlock\\raw.rs",
                    "is_primary": false,
                    "label": "the comment documents this function",
                    "line_end": 279,
                    "line_start": 279,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 38,
                        "highlight_start": 5,
                        "text": "    pub(super) unsafe fn write_unlock(&self) {"
                      }
                    ]
                  },
                  {
                    "byte_end": 7802,
                    "byte_start": 7770,
                    "column_end": 1,
                    "column_start": 5,
                    "expansion": null,
                    "file_name": "src\\rwlock\\raw.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 278,
                    "line_start": 277,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 36,
                        "highlight_start": 5,
                        "text": "    /// This will unlock that lock."
                      },
                      {
                        "highlight_end": 1,
                        "highlight_start": 1,
                        "text": ""
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmphaqb7ny2/async-lock-3.4.0#async-lock@3.4.0",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphaqb7ny2\\async-lock-3.4.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "async_lock",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphaqb7ny2\\async-lock-3.4.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: unexpected `cfg` condition name: `loom`\n  --> src\\rwlock.rs:59:29\n   |\n59 |         const_if: #[cfg(not(loom))];\n   |                             ^^^^ help: found config with similar value: `feature = \"loom\"`\n   |\n   = help: consider using a Cargo feature instead\n   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n            [lints.rust]\n            unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(loom)'] }\n   = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(loom)\");` to the top of the `build.rs`\n   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider using a Cargo feature instead",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(loom)'] }",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "or consider adding `println!(\"cargo::rustc-check-cfg=cfg(loom)\");` to the top of the `build.rs`",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "found config with similar value",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 1487,
                        "byte_start": 1483,
                        "column_end": 33,
                        "column_start": 29,
                        "expansion": null,
                        "file_name": "src\\rwlock.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 59,
                        "line_start": 59,
                        "suggested_replacement": "feature = \"loom\"",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 33,
                            "highlight_start": 29,
                            "text": "        const_if: #[cfg(not(loom))];"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "unexpected_cfgs",
                  "explanation": null
                },
                "level": "warning",
                "message": "unexpected `cfg` condition name: `loom`",
                "spans": [
                  {
                    "byte_end": 1487,
                    "byte_start": 1483,
                    "column_end": 33,
                    "column_start": 29,
                    "expansion": null,
                    "file_name": "src\\rwlock.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 59,
                    "line_start": 59,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 33,
                        "highlight_start": 29,
                        "text": "        const_if: #[cfg(not(loom))];"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmphaqb7ny2/async-lock-3.4.0#async-lock@3.4.0",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphaqb7ny2\\async-lock-3.4.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "async_lock",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphaqb7ny2\\async-lock-3.4.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: unexpected `cfg` condition name: `loom`\n  --> src\\semaphore.rs:23:29\n   |\n23 |         const_if: #[cfg(not(loom))];\n   |                             ^^^^ help: found config with similar value: `feature = \"loom\"`\n   |\n   = help: consider using a Cargo feature instead\n   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n            [lints.rust]\n            unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(loom)'] }\n   = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(loom)\");` to the top of the `build.rs`\n   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider using a Cargo feature instead",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(loom)'] }",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "or consider adding `println!(\"cargo::rustc-check-cfg=cfg(loom)\");` to the top of the `build.rs`",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "found config with similar value",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 515,
                        "byte_start": 511,
                        "column_end": 33,
                        "column_start": 29,
                        "expansion": null,
                        "file_name": "src\\semaphore.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 23,
                        "line_start": 23,
                        "suggested_replacement": "feature = \"loom\"",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 33,
                            "highlight_start": 29,
                            "text": "        const_if: #[cfg(not(loom))];"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "unexpected_cfgs",
                  "explanation": null
                },
                "level": "warning",
                "message": "unexpected `cfg` condition name: `loom`",
                "spans": [
                  {
                    "byte_end": 515,
                    "byte_start": 511,
                    "column_end": 33,
                    "column_start": 29,
                    "expansion": null,
                    "file_name": "src\\semaphore.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 23,
                    "line_start": 23,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 33,
                        "highlight_start": 29,
                        "text": "        const_if: #[cfg(not(loom))];"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmphaqb7ny2/async-lock-3.4.0#async-lock@3.4.0",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphaqb7ny2\\async-lock-3.4.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "async_lock",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphaqb7ny2\\async-lock-3.4.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: usage of a legacy numeric constant\n   --> src\\barrier.rs:213:51\n    |\n213 |                         this.barrier.event.notify(core::usize::MAX);\n    |                                                   ^^^^^^^^^^^^^^^^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#legacy_numeric_constants\n    = note: `#[warn(clippy::legacy_numeric_constants)]` on by default\nhelp: use the associated constant instead\n    |\n213 -                         this.barrier.event.notify(core::usize::MAX);\n213 +                         this.barrier.event.notify(usize::MAX);\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#legacy_numeric_constants",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "`#[warn(clippy::legacy_numeric_constants)]` on by default",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "use the associated constant instead",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 6686,
                        "byte_start": 6670,
                        "column_end": 67,
                        "column_start": 51,
                        "expansion": null,
                        "file_name": "src\\barrier.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 213,
                        "line_start": 213,
                        "suggested_replacement": "usize::MAX",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 67,
                            "highlight_start": 51,
                            "text": "                        this.barrier.event.notify(core::usize::MAX);"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::legacy_numeric_constants",
                  "explanation": null
                },
                "level": "warning",
                "message": "usage of a legacy numeric constant",
                "spans": [
                  {
                    "byte_end": 6686,
                    "byte_start": 6670,
                    "column_end": 67,
                    "column_start": 51,
                    "expansion": null,
                    "file_name": "src\\barrier.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 213,
                    "line_start": 213,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 67,
                        "highlight_start": 51,
                        "text": "                        this.barrier.event.notify(core::usize::MAX);"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmphaqb7ny2/async-lock-3.4.0#async-lock@3.4.0",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphaqb7ny2\\async-lock-3.4.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "async_lock",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphaqb7ny2\\async-lock-3.4.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: importing legacy numeric constants\n --> src\\mutex.rs:8:5\n  |\n8 | use core::usize;\n  |     ^^^^^^^^^^^\n  |\n  = help: remove this import\n  = note: then `usize::<CONST>` will resolve to the respective associated constant\n  = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#legacy_numeric_constants\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "remove this import",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "then `usize::<CONST>` will resolve to the respective associated constant",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#legacy_numeric_constants",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "clippy::legacy_numeric_constants",
                  "explanation": null
                },
                "level": "warning",
                "message": "importing legacy numeric constants",
                "spans": [
                  {
                    "byte_end": 208,
                    "byte_start": 197,
                    "column_end": 16,
                    "column_start": 5,
                    "expansion": null,
                    "file_name": "src\\mutex.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 8,
                    "line_start": 8,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 16,
                        "highlight_start": 5,
                        "text": "use core::usize;"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmphaqb7ny2/async-lock-3.4.0#async-lock@3.4.0",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphaqb7ny2\\async-lock-3.4.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "async_lock",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphaqb7ny2\\async-lock-3.4.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: `?Sized` bound is ignored because of a `Sized` requirement\n   --> src\\mutex.rs:317:19\n    |\n317 | impl<T: Default + ?Sized> Default for Mutex<T> {\n    |                   ^^^^^^\n    |\nnote: `T` cannot be unsized because of the bound\n   --> src\\mutex.rs:317:9\n    |\n317 | impl<T: Default + ?Sized> Default for Mutex<T> {\n    |         ^^^^^^^\n    = note: ...because `Default` has the bound `Sized`\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_maybe_sized\n    = note: `#[warn(clippy::needless_maybe_sized)]` on by default\nhelp: change the bounds that require `Sized`, or remove the `?Sized` bound\n    |\n317 - impl<T: Default + ?Sized> Default for Mutex<T> {\n317 + impl<T: Default> Default for Mutex<T> {\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "`T` cannot be unsized because of the bound",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 9009,
                        "byte_start": 9002,
                        "column_end": 16,
                        "column_start": 9,
                        "expansion": null,
                        "file_name": "src\\mutex.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 317,
                        "line_start": 317,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 16,
                            "highlight_start": 9,
                            "text": "impl<T: Default + ?Sized> Default for Mutex<T> {"
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "...because `Default` has the bound `Sized`",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_maybe_sized",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "`#[warn(clippy::needless_maybe_sized)]` on by default",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "change the bounds that require `Sized`, or remove the `?Sized` bound",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 9018,
                        "byte_start": 9009,
                        "column_end": 25,
                        "column_start": 16,
                        "expansion": null,
                        "file_name": "src\\mutex.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 317,
                        "line_start": 317,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 25,
                            "highlight_start": 16,
                            "text": "impl<T: Default + ?Sized> Default for Mutex<T> {"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::needless_maybe_sized",
                  "explanation": null
                },
                "level": "warning",
                "message": "`?Sized` bound is ignored because of a `Sized` requirement",
                "spans": [
                  {
                    "byte_end": 9018,
                    "byte_start": 9012,
                    "column_end": 25,
                    "column_start": 19,
                    "expansion": null,
                    "file_name": "src\\mutex.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 317,
                    "line_start": 317,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 25,
                        "highlight_start": 19,
                        "text": "impl<T: Default + ?Sized> Default for Mutex<T> {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmphaqb7ny2/async-lock-3.4.0#async-lock@3.4.0",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphaqb7ny2\\async-lock-3.4.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "async_lock",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphaqb7ny2\\async-lock-3.4.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: usage of a legacy numeric constant\n   --> src\\once_cell.rs:662:72\n    |\n662 | ...                   self.active_initializers.notify_additional(core::usize::MAX);\n    |                                                                  ^^^^^^^^^^^^^^^^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#legacy_numeric_constants\nhelp: use the associated constant instead\n    |\n662 -                             self.active_initializers.notify_additional(core::usize::MAX);\n662 +                             self.active_initializers.notify_additional(usize::MAX);\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#legacy_numeric_constants",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "use the associated constant instead",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 21217,
                        "byte_start": 21201,
                        "column_end": 88,
                        "column_start": 72,
                        "expansion": null,
                        "file_name": "src\\once_cell.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 662,
                        "line_start": 662,
                        "suggested_replacement": "usize::MAX",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 88,
                            "highlight_start": 72,
                            "text": "                            self.active_initializers.notify_additional(core::usize::MAX);"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::legacy_numeric_constants",
                  "explanation": null
                },
                "level": "warning",
                "message": "usage of a legacy numeric constant",
                "spans": [
                  {
                    "byte_end": 21217,
                    "byte_start": 21201,
                    "column_end": 88,
                    "column_start": 72,
                    "expansion": null,
                    "file_name": "src\\once_cell.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 662,
                    "line_start": 662,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 88,
                        "highlight_start": 72,
                        "text": "                            self.active_initializers.notify_additional(core::usize::MAX);"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmphaqb7ny2/async-lock-3.4.0#async-lock@3.4.0",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphaqb7ny2\\async-lock-3.4.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "async_lock",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphaqb7ny2\\async-lock-3.4.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: usage of a legacy numeric constant\n   --> src\\once_cell.rs:663:68\n    |\n663 | ...                   self.passive_waiters.notify_additional(core::usize::MAX);\n    |                                                              ^^^^^^^^^^^^^^^^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#legacy_numeric_constants\nhelp: use the associated constant instead\n    |\n663 -                             self.passive_waiters.notify_additional(core::usize::MAX);\n663 +                             self.passive_waiters.notify_additional(usize::MAX);\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#legacy_numeric_constants",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "use the associated constant instead",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 21303,
                        "byte_start": 21287,
                        "column_end": 84,
                        "column_start": 68,
                        "expansion": null,
                        "file_name": "src\\once_cell.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 663,
                        "line_start": 663,
                        "suggested_replacement": "usize::MAX",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 84,
                            "highlight_start": 68,
                            "text": "                            self.passive_waiters.notify_additional(core::usize::MAX);"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::legacy_numeric_constants",
                  "explanation": null
                },
                "level": "warning",
                "message": "usage of a legacy numeric constant",
                "spans": [
                  {
                    "byte_end": 21303,
                    "byte_start": 21287,
                    "column_end": 84,
                    "column_start": 68,
                    "expansion": null,
                    "file_name": "src\\once_cell.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 663,
                    "line_start": 663,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 84,
                        "highlight_start": 68,
                        "text": "                            self.passive_waiters.notify_additional(core::usize::MAX);"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmphaqb7ny2/async-lock-3.4.0#async-lock@3.4.0",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphaqb7ny2\\async-lock-3.4.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "async_lock",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphaqb7ny2\\async-lock-3.4.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: usage of a legacy numeric constant\n  --> src\\rwlock\\raw.rs:72:24\n   |\n72 |             if state > core::isize::MAX as usize {\n   |                        ^^^^^^^^^^^^^^^^\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#legacy_numeric_constants\nhelp: use the associated constant instead\n   |\n72 -             if state > core::isize::MAX as usize {\n72 +             if state > isize::MAX as usize {\n   |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#legacy_numeric_constants",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "use the associated constant instead",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 2211,
                        "byte_start": 2195,
                        "column_end": 40,
                        "column_start": 24,
                        "expansion": null,
                        "file_name": "src\\rwlock\\raw.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 72,
                        "line_start": 72,
                        "suggested_replacement": "isize::MAX",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 40,
                            "highlight_start": 24,
                            "text": "            if state > core::isize::MAX as usize {"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::legacy_numeric_constants",
                  "explanation": null
                },
                "level": "warning",
                "message": "usage of a legacy numeric constant",
                "spans": [
                  {
                    "byte_end": 2211,
                    "byte_start": 2195,
                    "column_end": 40,
                    "column_start": 24,
                    "expansion": null,
                    "file_name": "src\\rwlock\\raw.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 72,
                    "line_start": 72,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 40,
                        "highlight_start": 24,
                        "text": "            if state > core::isize::MAX as usize {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmphaqb7ny2/async-lock-3.4.0#async-lock@3.4.0",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphaqb7ny2\\async-lock-3.4.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "async_lock",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphaqb7ny2\\async-lock-3.4.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: usage of a legacy numeric constant\n   --> src\\rwlock\\raw.rs:114:20\n    |\n114 |         if state > core::isize::MAX as usize {\n    |                    ^^^^^^^^^^^^^^^^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#legacy_numeric_constants\nhelp: use the associated constant instead\n    |\n114 -         if state > core::isize::MAX as usize {\n114 +         if state > isize::MAX as usize {\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#legacy_numeric_constants",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "use the associated constant instead",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 3341,
                        "byte_start": 3325,
                        "column_end": 36,
                        "column_start": 20,
                        "expansion": null,
                        "file_name": "src\\rwlock\\raw.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 114,
                        "line_start": 114,
                        "suggested_replacement": "isize::MAX",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 36,
                            "highlight_start": 20,
                            "text": "        if state > core::isize::MAX as usize {"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::legacy_numeric_constants",
                  "explanation": null
                },
                "level": "warning",
                "message": "usage of a legacy numeric constant",
                "spans": [
                  {
                    "byte_end": 3341,
                    "byte_start": 3325,
                    "column_end": 36,
                    "column_start": 20,
                    "expansion": null,
                    "file_name": "src\\rwlock\\raw.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 114,
                    "line_start": 114,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 36,
                        "highlight_start": 20,
                        "text": "        if state > core::isize::MAX as usize {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmphaqb7ny2/async-lock-3.4.0#async-lock@3.4.0",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphaqb7ny2\\async-lock-3.4.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "async_lock",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphaqb7ny2\\async-lock-3.4.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: usage of a legacy numeric constant\n   --> src\\rwlock\\raw.rs:323:34\n    |\n323 |                 if *this.state > core::isize::MAX as usize {\n    |                                  ^^^^^^^^^^^^^^^^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#legacy_numeric_constants\nhelp: use the associated constant instead\n    |\n323 -                 if *this.state > core::isize::MAX as usize {\n323 +                 if *this.state > isize::MAX as usize {\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#legacy_numeric_constants",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "use the associated constant instead",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 9108,
                        "byte_start": 9092,
                        "column_end": 50,
                        "column_start": 34,
                        "expansion": null,
                        "file_name": "src\\rwlock\\raw.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 323,
                        "line_start": 323,
                        "suggested_replacement": "isize::MAX",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 50,
                            "highlight_start": 34,
                            "text": "                if *this.state > core::isize::MAX as usize {"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::legacy_numeric_constants",
                  "explanation": null
                },
                "level": "warning",
                "message": "usage of a legacy numeric constant",
                "spans": [
                  {
                    "byte_end": 9108,
                    "byte_start": 9092,
                    "column_end": 50,
                    "column_start": 34,
                    "expansion": null,
                    "file_name": "src\\rwlock\\raw.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 323,
                    "line_start": 323,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 50,
                        "highlight_start": 34,
                        "text": "                if *this.state > core::isize::MAX as usize {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmphaqb7ny2/async-lock-3.4.0#async-lock@3.4.0",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphaqb7ny2\\async-lock-3.4.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "async_lock",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphaqb7ny2\\async-lock-3.4.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: usage of a legacy numeric constant\n   --> src\\rwlock\\raw.rs:393:20\n    |\n393 |         if state > core::isize::MAX as usize {\n    |                    ^^^^^^^^^^^^^^^^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#legacy_numeric_constants\nhelp: use the associated constant instead\n    |\n393 -         if state > core::isize::MAX as usize {\n393 +         if state > isize::MAX as usize {\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#legacy_numeric_constants",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "use the associated constant instead",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 11409,
                        "byte_start": 11393,
                        "column_end": 36,
                        "column_start": 20,
                        "expansion": null,
                        "file_name": "src\\rwlock\\raw.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 393,
                        "line_start": 393,
                        "suggested_replacement": "isize::MAX",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 36,
                            "highlight_start": 20,
                            "text": "        if state > core::isize::MAX as usize {"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::legacy_numeric_constants",
                  "explanation": null
                },
                "level": "warning",
                "message": "usage of a legacy numeric constant",
                "spans": [
                  {
                    "byte_end": 11409,
                    "byte_start": 11393,
                    "column_end": 36,
                    "column_start": 20,
                    "expansion": null,
                    "file_name": "src\\rwlock\\raw.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 393,
                    "line_start": 393,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 36,
                        "highlight_start": 20,
                        "text": "        if state > core::isize::MAX as usize {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmphaqb7ny2/async-lock-3.4.0#async-lock@3.4.0",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphaqb7ny2\\async-lock-3.4.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "async_lock",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphaqb7ny2\\async-lock-3.4.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: `?Sized` bound is ignored because of a `Sized` requirement\n   --> src\\rwlock.rs:704:19\n    |\n704 | impl<T: Default + ?Sized> Default for RwLock<T> {\n    |                   ^^^^^^\n    |\nnote: `T` cannot be unsized because of the bound\n   --> src\\rwlock.rs:704:9\n    |\n704 | impl<T: Default + ?Sized> Default for RwLock<T> {\n    |         ^^^^^^^\n    = note: ...because `Default` has the bound `Sized`\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_maybe_sized\nhelp: change the bounds that require `Sized`, or remove the `?Sized` bound\n    |\n704 - impl<T: Default + ?Sized> Default for RwLock<T> {\n704 + impl<T: Default> Default for RwLock<T> {\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "`T` cannot be unsized because of the bound",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 22184,
                        "byte_start": 22177,
                        "column_end": 16,
                        "column_start": 9,
                        "expansion": null,
                        "file_name": "src\\rwlock.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 704,
                        "line_start": 704,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 16,
                            "highlight_start": 9,
                            "text": "impl<T: Default + ?Sized> Default for RwLock<T> {"
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "...because `Default` has the bound `Sized`",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_maybe_sized",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "change the bounds that require `Sized`, or remove the `?Sized` bound",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 22193,
                        "byte_start": 22184,
                        "column_end": 25,
                        "column_start": 16,
                        "expansion": null,
                        "file_name": "src\\rwlock.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 704,
                        "line_start": 704,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 25,
                            "highlight_start": 16,
                            "text": "impl<T: Default + ?Sized> Default for RwLock<T> {"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::needless_maybe_sized",
                  "explanation": null
                },
                "level": "warning",
                "message": "`?Sized` bound is ignored because of a `Sized` requirement",
                "spans": [
                  {
                    "byte_end": 22193,
                    "byte_start": 22187,
                    "column_end": 25,
                    "column_start": 19,
                    "expansion": null,
                    "file_name": "src\\rwlock.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 704,
                    "line_start": 704,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 25,
                        "highlight_start": 19,
                        "text": "impl<T: Default + ?Sized> Default for RwLock<T> {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-artifact",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmphaqb7ny2/async-lock-3.4.0#async-lock@3.4.0",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphaqb7ny2\\async-lock-3.4.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "async_lock",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphaqb7ny2\\async-lock-3.4.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphaqb7ny2\\async-lock-3.4.0\\target\\debug\\deps\\libasync_lock-a42379ba77b30f1a.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "build-finished",
              "success": true
            }
          ],
          "audit": {
            "database": {
              "advisory-count": 787,
              "last-commit": "7573f55ba337263f61167dbb0ea926cdc7c8eb5d",
              "last-updated": "2025-06-17T11:04:25+02:00"
            },
            "lockfile": {
              "dependency-count": 93
            },
            "settings": {
              "target_arch": [],
              "target_os": [],
              "severity": null,
              "ignore": [],
              "informational_warnings": [
                "unmaintained",
                "unsound",
                "notice"
              ]
            },
            "vulnerabilities": {
              "found": false,
              "count": 0,
              "list": []
            },
            "warnings": {}
          },
          "note": "Crate analysis performed with stable toolchain."
        },
        "crate_metadata": {
          "name": "async-lock",
          "version": "3.4.0",
          "description": "ALLOW: Positive community sentiment",
          "repository": "",
          "keywords": [],
          "categories": [],
          "readme": {
            "raw_markdown": "[](https://docs.rs/async-lock/latest/async_lock/all.html \"show sidebar\")\n# Crate async_lockCopy item path\n[Settings](https://docs.rs/async-lock/latest/settings.html)\n[Help](https://docs.rs/async-lock/latest/help.html)\nSummary[Source](https://docs.rs/async-lock/latest/src/async_lock/lib.rs.html#1-168)\nExpand description\nAsync synchronization primitives.\nThis crate provides the following primitives:\n  * [`Barrier`](https://docs.rs/async-lock/latest/async_lock/struct.Barrier.html \"struct async_lock::Barrier\") - enables tasks to synchronize all together at the same time.\n  * [`Mutex`](https://docs.rs/async-lock/latest/async_lock/struct.Mutex.html \"struct async_lock::Mutex\") - a mutual exclusion lock.\n  * [`RwLock`](https://docs.rs/async-lock/latest/async_lock/struct.RwLock.html \"struct async_lock::RwLock\") - a reader-writer lock, allowing any number of readers or a single writer.\n  * [`Semaphore`](https://docs.rs/async-lock/latest/async_lock/struct.Semaphore.html \"struct async_lock::Semaphore\") - limits the number of concurrent operations.\n\n\n### [\u00a7](https://docs.rs/async-lock/latest/async_lock/#relationship-with-stdsync)Relationship with `std::sync`\nIn general, you should consider using [`std::sync`](https://doc.rust-lang.org/std/sync/index.html) types over types from this crate.\nThere are two primary use cases for types from this crate:\n  * You need to use a synchronization primitive in a `no_std` environment.\n  * You need to hold a lock across an `.await` point. (Holding an [`std::sync`](https://doc.rust-lang.org/std/sync/index.html) lock guard across an `.await` will make your future non-`Send`, and is also highly likely to cause deadlocks.)\n\n\nIf you already use `libstd` and you aren\u2019t holding locks across await points (there is a Clippy lint called [`await_holding_lock`](https://rust-lang.github.io/rust-clippy/stable/index.html#/await_holding_lock) that emits warnings for this scenario), you should consider [`std::sync`](https://doc.rust-lang.org/std/sync/index.html) instead of this crate. Those types are optimized for the currently running operating system, are less complex and are generally much faster.\nIn contrast, `async-lock`\u2019s notification system uses `std::sync::Mutex` under the hood if the `std` feature is enabled, and will fall back to a significantly slower strategy if it is not. So, there are few cases where `async-lock` is a win for performance over [`std::sync`](https://doc.rust-lang.org/std/sync/index.html).\n## Modules[\u00a7](https://docs.rs/async-lock/latest/async_lock/#modules)\n\n[futures](https://docs.rs/async-lock/latest/async_lock/futures/index.html \"mod async_lock::futures\")\n    Named futures for use with `async_lock` primitives.\n## Structs[\u00a7](https://docs.rs/async-lock/latest/async_lock/#structs)\n\n[Barrier](https://docs.rs/async-lock/latest/async_lock/struct.Barrier.html \"struct async_lock::Barrier\")\n    A counter to synchronize multiple tasks at the same time.\n\n[BarrierWaitResult](https://docs.rs/async-lock/latest/async_lock/struct.BarrierWaitResult.html \"struct async_lock::BarrierWaitResult\")\n    Returned by [`Barrier::wait()`](https://docs.rs/async-lock/latest/async_lock/struct.Barrier.html#method.wait \"method async_lock::Barrier::wait\") when all tasks have called it.\n\n[Mutex](https://docs.rs/async-lock/latest/async_lock/struct.Mutex.html \"struct async_lock::Mutex\")\n    An async mutex.\n\n[MutexGuard](https://docs.rs/async-lock/latest/async_lock/struct.MutexGuard.html \"struct async_lock::MutexGuard\")\n    A guard that releases the mutex when dropped.\n\n[MutexGuardArc](https://docs.rs/async-lock/latest/async_lock/struct.MutexGuardArc.html \"struct async_lock::MutexGuardArc\")\n    An owned guard that releases the mutex when dropped.\n\n[OnceCell](https://docs.rs/async-lock/latest/async_lock/struct.OnceCell.html \"struct async_lock::OnceCell\")\n    A memory location that can be written to at most once.\n\n[RwLock](https://docs.rs/async-lock/latest/async_lock/struct.RwLock.html \"struct async_lock::RwLock\")\n    An async reader-writer lock.\n\n[RwLockReadGuard](https://docs.rs/async-lock/latest/async_lock/struct.RwLockReadGuard.html \"struct async_lock::RwLockReadGuard\")\n    A guard that releases the read lock when dropped.\n\n[RwLockReadGuardArc](https://docs.rs/async-lock/latest/async_lock/struct.RwLockReadGuardArc.html \"struct async_lock::RwLockReadGuardArc\")\n    An owned, reference-counting guard that releases the read lock when dropped.\n\n[RwLockUpgradableReadGuard](https://docs.rs/async-lock/latest/async_lock/struct.RwLockUpgradableReadGuard.html \"struct async_lock::RwLockUpgradableReadGuard\")\n    A guard that releases the upgradable read lock when dropped.\n\n[RwLockUpgradableReadGuardArc](https://docs.rs/async-lock/latest/async_lock/struct.RwLockUpgradableReadGuardArc.html \"struct async_lock::RwLockUpgradableReadGuardArc\")\n    An owned, reference-counting guard that releases the upgradable read lock when dropped.\n\n[RwLockWriteGuard](https://docs.rs/async-lock/latest/async_lock/struct.RwLockWriteGuard.html \"struct async_lock::RwLockWriteGuard\")\n    A guard that releases the write lock when dropped.\n\n[RwLockWriteGuardArc](https://docs.rs/async-lock/latest/async_lock/struct.RwLockWriteGuardArc.html \"struct async_lock::RwLockWriteGuardArc\")\n    An owned, reference-counted guard that releases the write lock when dropped.\n\n[Semaphore](https://docs.rs/async-lock/latest/async_lock/struct.Semaphore.html \"struct async_lock::Semaphore\")\n    A counter for limiting the number of concurrent operations.\n\n[SemaphoreGuard](https://docs.rs/async-lock/latest/async_lock/struct.SemaphoreGuard.html \"struct async_lock::SemaphoreGuard\")\n    A guard that releases the acquired permit.\n\n[SemaphoreGuardArc](https://docs.rs/async-lock/latest/async_lock/struct.SemaphoreGuardArc.html \"struct async_lock::SemaphoreGuardArc\")\n    An owned guard that releases the acquired permit.\n",
            "markdown_with_citations": "[](https://docs.rs/async-lock/latest/async_lock/all.html \"show sidebar\")\n# Crate async_lockCopy item path\nSettings\u27e81\u27e9\nHelp\u27e82\u27e9\nSummarySource\u27e83\u27e9\nExpand description\nAsync synchronization primitives.\nThis crate provides the following primitives:\n  * `Barrier`\u27e84\u27e9 - enables tasks to synchronize all together at the same time.\n  * `Mutex`\u27e85\u27e9 - a mutual exclusion lock.\n  * `RwLock`\u27e86\u27e9 - a reader-writer lock, allowing any number of readers or a single writer.\n  * `Semaphore`\u27e87\u27e9 - limits the number of concurrent operations.\n\n\n### \u00a7\u27e88\u27e9Relationship with `std::sync`\nIn general, you should consider using `std::sync`\u27e89\u27e9 types over types from this crate.\nThere are two primary use cases for types from this crate:\n  * You need to use a synchronization primitive in a `no_std` environment.\n  * You need to hold a lock across an `.await` point. (Holding an `std::sync`\u27e89\u27e9 lock guard across an `.await` will make your future non-`Send`, and is also highly likely to cause deadlocks.)\n\n\nIf you already use `libstd` and you aren\u2019t holding locks across await points (there is a Clippy lint called `await_holding_lock`\u27e810\u27e9 that emits warnings for this scenario), you should consider `std::sync`\u27e89\u27e9 instead of this crate. Those types are optimized for the currently running operating system, are less complex and are generally much faster.\nIn contrast, `async-lock`\u2019s notification system uses `std::sync::Mutex` under the hood if the `std` feature is enabled, and will fall back to a significantly slower strategy if it is not. So, there are few cases where `async-lock` is a win for performance over `std::sync`\u27e89\u27e9.\n## Modules\u00a7\u27e811\u27e9\n\nfutures\u27e812\u27e9\n    Named futures for use with `async_lock` primitives.\n## Structs\u00a7\u27e813\u27e9\n\nBarrier\u27e84\u27e9\n    A counter to synchronize multiple tasks at the same time.\n\nBarrierWaitResult\u27e814\u27e9\n    Returned by `Barrier::wait()`\u27e815\u27e9 when all tasks have called it.\n\nMutex\u27e85\u27e9\n    An async mutex.\n\nMutexGuard\u27e816\u27e9\n    A guard that releases the mutex when dropped.\n\nMutexGuardArc\u27e817\u27e9\n    An owned guard that releases the mutex when dropped.\n\nOnceCell\u27e818\u27e9\n    A memory location that can be written to at most once.\n\nRwLock\u27e86\u27e9\n    An async reader-writer lock.\n\nRwLockReadGuard\u27e819\u27e9\n    A guard that releases the read lock when dropped.\n\nRwLockReadGuardArc\u27e820\u27e9\n    An owned, reference-counting guard that releases the read lock when dropped.\n\nRwLockUpgradableReadGuard\u27e821\u27e9\n    A guard that releases the upgradable read lock when dropped.\n\nRwLockUpgradableReadGuardArc\u27e822\u27e9\n    An owned, reference-counting guard that releases the upgradable read lock when dropped.\n\nRwLockWriteGuard\u27e823\u27e9\n    A guard that releases the write lock when dropped.\n\nRwLockWriteGuardArc\u27e824\u27e9\n    An owned, reference-counted guard that releases the write lock when dropped.\n\nSemaphore\u27e87\u27e9\n    A counter for limiting the number of concurrent operations.\n\nSemaphoreGuard\u27e825\u27e9\n    A guard that releases the acquired permit.\n\nSemaphoreGuardArc\u27e826\u27e9\n    An owned guard that releases the acquired permit.\n",
            "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://docs.rs/async-lock/latest/settings.html: Settings\n\u27e82\u27e9 https://docs.rs/async-lock/latest/help.html: Help\n\u27e83\u27e9 https://docs.rs/async-lock/latest/src/async_lock/lib.rs.html#1-168: Source\n\u27e84\u27e9 https://docs.rs/async-lock/latest/async_lock/struct.Barrier.html: struct async_lock::Barrier - `Barrier`\n\u27e85\u27e9 https://docs.rs/async-lock/latest/async_lock/struct.Mutex.html: struct async_lock::Mutex - `Mutex`\n\u27e86\u27e9 https://docs.rs/async-lock/latest/async_lock/struct.RwLock.html: struct async_lock::RwLock - `RwLock`\n\u27e87\u27e9 https://docs.rs/async-lock/latest/async_lock/struct.Semaphore.html: struct async_lock::Semaphore - `Semaphore`\n\u27e88\u27e9 https://docs.rs/async-lock/latest/async_lock/#relationship-with-stdsync: \u00a7\n\u27e89\u27e9 https://doc.rust-lang.org/std/sync/index.html: `std::sync`\n\u27e810\u27e9 https://rust-lang.github.io/rust-clippy/stable/index.html#/await_holding_lock: `await_holding_lock`\n\u27e811\u27e9 https://docs.rs/async-lock/latest/async_lock/#modules: \u00a7\n\u27e812\u27e9 https://docs.rs/async-lock/latest/async_lock/futures/index.html: mod async_lock::futures - futures\n\u27e813\u27e9 https://docs.rs/async-lock/latest/async_lock/#structs: \u00a7\n\u27e814\u27e9 https://docs.rs/async-lock/latest/async_lock/struct.BarrierWaitResult.html: struct async_lock::BarrierWaitResult - BarrierWaitResult\n\u27e815\u27e9 https://docs.rs/async-lock/latest/async_lock/struct.Barrier.html#method.wait: method async_lock::Barrier::wait - `Barrier::wait()`\n\u27e816\u27e9 https://docs.rs/async-lock/latest/async_lock/struct.MutexGuard.html: struct async_lock::MutexGuard - MutexGuard\n\u27e817\u27e9 https://docs.rs/async-lock/latest/async_lock/struct.MutexGuardArc.html: struct async_lock::MutexGuardArc - MutexGuardArc\n\u27e818\u27e9 https://docs.rs/async-lock/latest/async_lock/struct.OnceCell.html: struct async_lock::OnceCell - OnceCell\n\u27e819\u27e9 https://docs.rs/async-lock/latest/async_lock/struct.RwLockReadGuard.html: struct async_lock::RwLockReadGuard - RwLockReadGuard\n\u27e820\u27e9 https://docs.rs/async-lock/latest/async_lock/struct.RwLockReadGuardArc.html: struct async_lock::RwLockReadGuardArc - RwLockReadGuardArc\n\u27e821\u27e9 https://docs.rs/async-lock/latest/async_lock/struct.RwLockUpgradableReadGuard.html: struct async_lock::RwLockUpgradableReadGuard - RwLockUpgradableReadGuard\n\u27e822\u27e9 https://docs.rs/async-lock/latest/async_lock/struct.RwLockUpgradableReadGuardArc.html: struct async_lock::RwLockUpgradableReadGuardArc - RwLockUpgradableReadGuardArc\n\u27e823\u27e9 https://docs.rs/async-lock/latest/async_lock/struct.RwLockWriteGuard.html: struct async_lock::RwLockWriteGuard - RwLockWriteGuard\n\u27e824\u27e9 https://docs.rs/async-lock/latest/async_lock/struct.RwLockWriteGuardArc.html: struct async_lock::RwLockWriteGuardArc - RwLockWriteGuardArc\n\u27e825\u27e9 https://docs.rs/async-lock/latest/async_lock/struct.SemaphoreGuard.html: struct async_lock::SemaphoreGuard - SemaphoreGuard\n\u27e826\u27e9 https://docs.rs/async-lock/latest/async_lock/struct.SemaphoreGuardArc.html: struct async_lock::SemaphoreGuardArc - SemaphoreGuardArc\n",
            "fit_markdown": "",
            "fit_html": ""
          },
          "downloads": 0,
          "github_stars": 0,
          "dependencies": [],
          "features": {},
          "code_snippets": [],
          "readme_sections": {},
          "librs_downloads": null,
          "source": "crates.io",
          "enhanced_scraping": {},
          "enhanced_features": [],
          "enhanced_dependencies": []
        },
        "enriched_crate": {
          "name": "async-lock",
          "version": "3.4.0",
          "description": "ALLOW: Positive community sentiment",
          "repository": "",
          "keywords": [],
          "categories": [],
          "readme": {
            "raw_markdown": "[](https://docs.rs/async-lock/latest/async_lock/all.html \"show sidebar\")\n# Crate async_lockCopy item path\n[Settings](https://docs.rs/async-lock/latest/settings.html)\n[Help](https://docs.rs/async-lock/latest/help.html)\nSummary[Source](https://docs.rs/async-lock/latest/src/async_lock/lib.rs.html#1-168)\nExpand description\nAsync synchronization primitives.\nThis crate provides the following primitives:\n  * [`Barrier`](https://docs.rs/async-lock/latest/async_lock/struct.Barrier.html \"struct async_lock::Barrier\") - enables tasks to synchronize all together at the same time.\n  * [`Mutex`](https://docs.rs/async-lock/latest/async_lock/struct.Mutex.html \"struct async_lock::Mutex\") - a mutual exclusion lock.\n  * [`RwLock`](https://docs.rs/async-lock/latest/async_lock/struct.RwLock.html \"struct async_lock::RwLock\") - a reader-writer lock, allowing any number of readers or a single writer.\n  * [`Semaphore`](https://docs.rs/async-lock/latest/async_lock/struct.Semaphore.html \"struct async_lock::Semaphore\") - limits the number of concurrent operations.\n\n\n### [\u00a7](https://docs.rs/async-lock/latest/async_lock/#relationship-with-stdsync)Relationship with `std::sync`\nIn general, you should consider using [`std::sync`](https://doc.rust-lang.org/std/sync/index.html) types over types from this crate.\nThere are two primary use cases for types from this crate:\n  * You need to use a synchronization primitive in a `no_std` environment.\n  * You need to hold a lock across an `.await` point. (Holding an [`std::sync`](https://doc.rust-lang.org/std/sync/index.html) lock guard across an `.await` will make your future non-`Send`, and is also highly likely to cause deadlocks.)\n\n\nIf you already use `libstd` and you aren\u2019t holding locks across await points (there is a Clippy lint called [`await_holding_lock`](https://rust-lang.github.io/rust-clippy/stable/index.html#/await_holding_lock) that emits warnings for this scenario), you should consider [`std::sync`](https://doc.rust-lang.org/std/sync/index.html) instead of this crate. Those types are optimized for the currently running operating system, are less complex and are generally much faster.\nIn contrast, `async-lock`\u2019s notification system uses `std::sync::Mutex` under the hood if the `std` feature is enabled, and will fall back to a significantly slower strategy if it is not. So, there are few cases where `async-lock` is a win for performance over [`std::sync`](https://doc.rust-lang.org/std/sync/index.html).\n## Modules[\u00a7](https://docs.rs/async-lock/latest/async_lock/#modules)\n\n[futures](https://docs.rs/async-lock/latest/async_lock/futures/index.html \"mod async_lock::futures\")\n    Named futures for use with `async_lock` primitives.\n## Structs[\u00a7](https://docs.rs/async-lock/latest/async_lock/#structs)\n\n[Barrier](https://docs.rs/async-lock/latest/async_lock/struct.Barrier.html \"struct async_lock::Barrier\")\n    A counter to synchronize multiple tasks at the same time.\n\n[BarrierWaitResult](https://docs.rs/async-lock/latest/async_lock/struct.BarrierWaitResult.html \"struct async_lock::BarrierWaitResult\")\n    Returned by [`Barrier::wait()`](https://docs.rs/async-lock/latest/async_lock/struct.Barrier.html#method.wait \"method async_lock::Barrier::wait\") when all tasks have called it.\n\n[Mutex](https://docs.rs/async-lock/latest/async_lock/struct.Mutex.html \"struct async_lock::Mutex\")\n    An async mutex.\n\n[MutexGuard](https://docs.rs/async-lock/latest/async_lock/struct.MutexGuard.html \"struct async_lock::MutexGuard\")\n    A guard that releases the mutex when dropped.\n\n[MutexGuardArc](https://docs.rs/async-lock/latest/async_lock/struct.MutexGuardArc.html \"struct async_lock::MutexGuardArc\")\n    An owned guard that releases the mutex when dropped.\n\n[OnceCell](https://docs.rs/async-lock/latest/async_lock/struct.OnceCell.html \"struct async_lock::OnceCell\")\n    A memory location that can be written to at most once.\n\n[RwLock](https://docs.rs/async-lock/latest/async_lock/struct.RwLock.html \"struct async_lock::RwLock\")\n    An async reader-writer lock.\n\n[RwLockReadGuard](https://docs.rs/async-lock/latest/async_lock/struct.RwLockReadGuard.html \"struct async_lock::RwLockReadGuard\")\n    A guard that releases the read lock when dropped.\n\n[RwLockReadGuardArc](https://docs.rs/async-lock/latest/async_lock/struct.RwLockReadGuardArc.html \"struct async_lock::RwLockReadGuardArc\")\n    An owned, reference-counting guard that releases the read lock when dropped.\n\n[RwLockUpgradableReadGuard](https://docs.rs/async-lock/latest/async_lock/struct.RwLockUpgradableReadGuard.html \"struct async_lock::RwLockUpgradableReadGuard\")\n    A guard that releases the upgradable read lock when dropped.\n\n[RwLockUpgradableReadGuardArc](https://docs.rs/async-lock/latest/async_lock/struct.RwLockUpgradableReadGuardArc.html \"struct async_lock::RwLockUpgradableReadGuardArc\")\n    An owned, reference-counting guard that releases the upgradable read lock when dropped.\n\n[RwLockWriteGuard](https://docs.rs/async-lock/latest/async_lock/struct.RwLockWriteGuard.html \"struct async_lock::RwLockWriteGuard\")\n    A guard that releases the write lock when dropped.\n\n[RwLockWriteGuardArc](https://docs.rs/async-lock/latest/async_lock/struct.RwLockWriteGuardArc.html \"struct async_lock::RwLockWriteGuardArc\")\n    An owned, reference-counted guard that releases the write lock when dropped.\n\n[Semaphore](https://docs.rs/async-lock/latest/async_lock/struct.Semaphore.html \"struct async_lock::Semaphore\")\n    A counter for limiting the number of concurrent operations.\n\n[SemaphoreGuard](https://docs.rs/async-lock/latest/async_lock/struct.SemaphoreGuard.html \"struct async_lock::SemaphoreGuard\")\n    A guard that releases the acquired permit.\n\n[SemaphoreGuardArc](https://docs.rs/async-lock/latest/async_lock/struct.SemaphoreGuardArc.html \"struct async_lock::SemaphoreGuardArc\")\n    An owned guard that releases the acquired permit.\n",
            "markdown_with_citations": "[](https://docs.rs/async-lock/latest/async_lock/all.html \"show sidebar\")\n# Crate async_lockCopy item path\nSettings\u27e81\u27e9\nHelp\u27e82\u27e9\nSummarySource\u27e83\u27e9\nExpand description\nAsync synchronization primitives.\nThis crate provides the following primitives:\n  * `Barrier`\u27e84\u27e9 - enables tasks to synchronize all together at the same time.\n  * `Mutex`\u27e85\u27e9 - a mutual exclusion lock.\n  * `RwLock`\u27e86\u27e9 - a reader-writer lock, allowing any number of readers or a single writer.\n  * `Semaphore`\u27e87\u27e9 - limits the number of concurrent operations.\n\n\n### \u00a7\u27e88\u27e9Relationship with `std::sync`\nIn general, you should consider using `std::sync`\u27e89\u27e9 types over types from this crate.\nThere are two primary use cases for types from this crate:\n  * You need to use a synchronization primitive in a `no_std` environment.\n  * You need to hold a lock across an `.await` point. (Holding an `std::sync`\u27e89\u27e9 lock guard across an `.await` will make your future non-`Send`, and is also highly likely to cause deadlocks.)\n\n\nIf you already use `libstd` and you aren\u2019t holding locks across await points (there is a Clippy lint called `await_holding_lock`\u27e810\u27e9 that emits warnings for this scenario), you should consider `std::sync`\u27e89\u27e9 instead of this crate. Those types are optimized for the currently running operating system, are less complex and are generally much faster.\nIn contrast, `async-lock`\u2019s notification system uses `std::sync::Mutex` under the hood if the `std` feature is enabled, and will fall back to a significantly slower strategy if it is not. So, there are few cases where `async-lock` is a win for performance over `std::sync`\u27e89\u27e9.\n## Modules\u00a7\u27e811\u27e9\n\nfutures\u27e812\u27e9\n    Named futures for use with `async_lock` primitives.\n## Structs\u00a7\u27e813\u27e9\n\nBarrier\u27e84\u27e9\n    A counter to synchronize multiple tasks at the same time.\n\nBarrierWaitResult\u27e814\u27e9\n    Returned by `Barrier::wait()`\u27e815\u27e9 when all tasks have called it.\n\nMutex\u27e85\u27e9\n    An async mutex.\n\nMutexGuard\u27e816\u27e9\n    A guard that releases the mutex when dropped.\n\nMutexGuardArc\u27e817\u27e9\n    An owned guard that releases the mutex when dropped.\n\nOnceCell\u27e818\u27e9\n    A memory location that can be written to at most once.\n\nRwLock\u27e86\u27e9\n    An async reader-writer lock.\n\nRwLockReadGuard\u27e819\u27e9\n    A guard that releases the read lock when dropped.\n\nRwLockReadGuardArc\u27e820\u27e9\n    An owned, reference-counting guard that releases the read lock when dropped.\n\nRwLockUpgradableReadGuard\u27e821\u27e9\n    A guard that releases the upgradable read lock when dropped.\n\nRwLockUpgradableReadGuardArc\u27e822\u27e9\n    An owned, reference-counting guard that releases the upgradable read lock when dropped.\n\nRwLockWriteGuard\u27e823\u27e9\n    A guard that releases the write lock when dropped.\n\nRwLockWriteGuardArc\u27e824\u27e9\n    An owned, reference-counted guard that releases the write lock when dropped.\n\nSemaphore\u27e87\u27e9\n    A counter for limiting the number of concurrent operations.\n\nSemaphoreGuard\u27e825\u27e9\n    A guard that releases the acquired permit.\n\nSemaphoreGuardArc\u27e826\u27e9\n    An owned guard that releases the acquired permit.\n",
            "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://docs.rs/async-lock/latest/settings.html: Settings\n\u27e82\u27e9 https://docs.rs/async-lock/latest/help.html: Help\n\u27e83\u27e9 https://docs.rs/async-lock/latest/src/async_lock/lib.rs.html#1-168: Source\n\u27e84\u27e9 https://docs.rs/async-lock/latest/async_lock/struct.Barrier.html: struct async_lock::Barrier - `Barrier`\n\u27e85\u27e9 https://docs.rs/async-lock/latest/async_lock/struct.Mutex.html: struct async_lock::Mutex - `Mutex`\n\u27e86\u27e9 https://docs.rs/async-lock/latest/async_lock/struct.RwLock.html: struct async_lock::RwLock - `RwLock`\n\u27e87\u27e9 https://docs.rs/async-lock/latest/async_lock/struct.Semaphore.html: struct async_lock::Semaphore - `Semaphore`\n\u27e88\u27e9 https://docs.rs/async-lock/latest/async_lock/#relationship-with-stdsync: \u00a7\n\u27e89\u27e9 https://doc.rust-lang.org/std/sync/index.html: `std::sync`\n\u27e810\u27e9 https://rust-lang.github.io/rust-clippy/stable/index.html#/await_holding_lock: `await_holding_lock`\n\u27e811\u27e9 https://docs.rs/async-lock/latest/async_lock/#modules: \u00a7\n\u27e812\u27e9 https://docs.rs/async-lock/latest/async_lock/futures/index.html: mod async_lock::futures - futures\n\u27e813\u27e9 https://docs.rs/async-lock/latest/async_lock/#structs: \u00a7\n\u27e814\u27e9 https://docs.rs/async-lock/latest/async_lock/struct.BarrierWaitResult.html: struct async_lock::BarrierWaitResult - BarrierWaitResult\n\u27e815\u27e9 https://docs.rs/async-lock/latest/async_lock/struct.Barrier.html#method.wait: method async_lock::Barrier::wait - `Barrier::wait()`\n\u27e816\u27e9 https://docs.rs/async-lock/latest/async_lock/struct.MutexGuard.html: struct async_lock::MutexGuard - MutexGuard\n\u27e817\u27e9 https://docs.rs/async-lock/latest/async_lock/struct.MutexGuardArc.html: struct async_lock::MutexGuardArc - MutexGuardArc\n\u27e818\u27e9 https://docs.rs/async-lock/latest/async_lock/struct.OnceCell.html: struct async_lock::OnceCell - OnceCell\n\u27e819\u27e9 https://docs.rs/async-lock/latest/async_lock/struct.RwLockReadGuard.html: struct async_lock::RwLockReadGuard - RwLockReadGuard\n\u27e820\u27e9 https://docs.rs/async-lock/latest/async_lock/struct.RwLockReadGuardArc.html: struct async_lock::RwLockReadGuardArc - RwLockReadGuardArc\n\u27e821\u27e9 https://docs.rs/async-lock/latest/async_lock/struct.RwLockUpgradableReadGuard.html: struct async_lock::RwLockUpgradableReadGuard - RwLockUpgradableReadGuard\n\u27e822\u27e9 https://docs.rs/async-lock/latest/async_lock/struct.RwLockUpgradableReadGuardArc.html: struct async_lock::RwLockUpgradableReadGuardArc - RwLockUpgradableReadGuardArc\n\u27e823\u27e9 https://docs.rs/async-lock/latest/async_lock/struct.RwLockWriteGuard.html: struct async_lock::RwLockWriteGuard - RwLockWriteGuard\n\u27e824\u27e9 https://docs.rs/async-lock/latest/async_lock/struct.RwLockWriteGuardArc.html: struct async_lock::RwLockWriteGuardArc - RwLockWriteGuardArc\n\u27e825\u27e9 https://docs.rs/async-lock/latest/async_lock/struct.SemaphoreGuard.html: struct async_lock::SemaphoreGuard - SemaphoreGuard\n\u27e826\u27e9 https://docs.rs/async-lock/latest/async_lock/struct.SemaphoreGuardArc.html: struct async_lock::SemaphoreGuardArc - SemaphoreGuardArc\n",
            "fit_markdown": "",
            "fit_html": ""
          },
          "downloads": 0,
          "github_stars": 0,
          "dependencies": [],
          "features": {},
          "code_snippets": [],
          "readme_sections": {},
          "librs_downloads": null,
          "source": "crates.io",
          "enhanced_scraping": {},
          "enhanced_features": [],
          "enhanced_dependencies": [],
          "readme_summary": "The `async-lock` crate provides asynchronous synchronization primitives designed for use in `async` contexts, particularly when locks need to be held across `.await` points. It includes key features like `Barrier` for task synchronization, `Mutex` for mutual exclusion, `RwLock` for reader-writer locking, and `Semaphore` for limiting concurrent operations. While it supports `no_std` environments, it is recommended over `std::sync` only in specific scenarios, such as avoiding deadlocks or ensuring `Send` futures.",
          "feature_summary": null,
          "use_case": "Utilities",
          "score": 5.0,
          "factual_counterfactual": "### Pair 1: Mutex and `.await` compatibility  \n\u2705 **Factual**: The `async-lock` crate's `Mutex` is designed to allow locks to be held across `.await` points without making the future non-`Send`.  \n\u274c **Counterfactual**: The `async-lock` crate's `Mutex` uses the same implementation as `std::sync::Mutex`, making it unsafe to hold locks across `.await` points.  \n\n---\n\n### Pair 2: Performance considerations  \n\u2705 **Factual**: The `async-lock` crate falls back to a slower notification strategy when the `std` feature is disabled, making it less performant in `no_std` environments.  \n\u274c **Counterfactual**: The `async-lock` crate is always faster than `std::sync` primitives, even when the `std` feature is disabled.  \n\n---\n\n### Pair 3: Use cases for `RwLock`  \n\u2705 **Factual**: The `async-lock` crate's `RwLock` allows multiple readers or a single writer, making it suitable for scenarios requiring fine-grained access control across `.await` points.  \n\u274c **Counterfactual**: The `async-lock` crate's `RwLock` does not support multiple readers and only allows exclusive access for writers.",
          "source_analysis": null,
          "user_behavior": null,
          "security": null
        }
      },
      "irl_score": 8.6,
      "execution_id": "exec-42356f50-7e0bec86-1751258671",
      "timestamp": "2025-06-30T04:44:31.739205+00:00",
      "canon_version": "1.3.0"
    },
    "rule_zero_compliant": true
  }
]