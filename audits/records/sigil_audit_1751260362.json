[
  {
    "execution_id": "exec-121268c9-2bcca3c7-1751260352",
    "timestamp": "2025-06-30T05:12:32.765404+00:00",
    "sacred_chain": {
      "input_data": "owo-colors",
      "context_sources": [
        "crates.io",
        "github.com",
        "lib.rs",
        "docs.rs"
      ],
      "reasoning_steps": [
        "Input canonicalized: 'owo-colors' -> 'owo-colors'",
        "Context gathered from 4 validated sources",
        "Metadata extracted: 4 fields",
        "Documentation analyzed: quality 7.0",
        "Sentiment analyzed: positive",
        "Ecosystem analyzed: utilities",
        "Quality score synthesized: 7.50",
        "Trust decision: DEFER - Insufficient data for decision",
        "IRL confidence: 8.600"
      ],
      "suggestion": "ALLOW: Positive community sentiment",
      "verdict": "DEFER",
      "audit_info": {
        "metadata": {
          "name": "owo-colors",
          "type": "rust_crate",
          "source": "manual_input",
          "extraction_method": "irl_engine"
        },
        "sentiment": {
          "quality_score": 7.0,
          "completeness": 0.8,
          "examples_present": true,
          "api_documented": true
        },
        "ecosystem": {
          "overall": "positive",
          "positive_mentions": 10,
          "negative_mentions": 2,
          "neutral_mentions": 5,
          "total_mentions": 17
        },
        "quality_score": 7.5,
        "verdict_reason": "Insufficient data for decision",
        "sanitized_documentation": {
          "crates_io": {
            "url": "https://crates.io/crates/owo-colors",
            "title": "owo-colors v4.2.2",
            "content": {
              "raw_markdown": "#  owo-colors v4.2.2\nZero-allocation terminal colors that'll make people go owo \n  * [ #ansi_term ](https://crates.io/keywords/ansi_term)\n  * [ #cli ](https://crates.io/keywords/cli)\n  * [ #color ](https://crates.io/keywords/color)\n  * [ #no-std ](https://crates.io/keywords/no-std)\n  * [ #terminal ](https://crates.io/keywords/terminal)\n\n\n  * [ Readme ](https://crates.io/crates/owo-colors)\n  * [ 39 Versions ](https://crates.io/crates/owo-colors/versions)\n  * [ Dependencies ](https://crates.io/crates/owo-colors/dependencies)\n  * [ Dependents ](https://crates.io/crates/owo-colors/reverse_dependencies)\n\n\n## Metadata\n6 days ago \nv1.70.0 \n[ MIT ](https://choosealicense.com/licenses/mit)\n37.2 KiB \n## Install\nRun the following Cargo command in your project directory:\ncargo add owo-colors\nOr add the following line to your Cargo.toml:\nowo-colors = \"4.2.2\"\n## Documentation\n[ docs.rs/owo-colors ](https://docs.rs/owo-colors)\n## Repository\n[ github.com/owo-colors/owo-colors ](https://github.com/owo-colors/owo-colors)\n## Owners\n## Categories\n  * [Command-line interface](https://crates.io/categories/command-line-interface)\n  * [No dynamic allocation](https://crates.io/categories/no-std::no-alloc)\n\n\n[ Report crate ](https://crates.io/support?crate=owo-colors&inquire=crate-violation)\n### Stats Overview\n55,371,903 Downloads all time\n39 Versions published\n#### Downloads over the last 90 days\nDisplay as \nStacked \n  * Stacked \n  * Unstacked \n\n\nLoading\u2026\n",
              "markdown_with_citations": "#  owo-colors v4.2.2\nZero-allocation terminal colors that'll make people go owo \n  *  #ansi_term \u27e81\u27e9\n  *  #cli \u27e82\u27e9\n  *  #color \u27e83\u27e9\n  *  #no-std \u27e84\u27e9\n  *  #terminal \u27e85\u27e9\n\n\n  *  Readme \u27e86\u27e9\n  *  39 Versions \u27e87\u27e9\n  *  Dependencies \u27e88\u27e9\n  *  Dependents \u27e89\u27e9\n\n\n## Metadata\n6 days ago \nv1.70.0 \n MIT \u27e810\u27e9\n37.2 KiB \n## Install\nRun the following Cargo command in your project directory:\ncargo add owo-colors\nOr add the following line to your Cargo.toml:\nowo-colors = \"4.2.2\"\n## Documentation\n docs.rs/owo-colors \u27e811\u27e9\n## Repository\n github.com/owo-colors/owo-colors \u27e812\u27e9\n## Owners\n## Categories\n  * Command-line interface\u27e813\u27e9\n  * No dynamic allocation\u27e814\u27e9\n\n\n Report crate \u27e815\u27e9\n### Stats Overview\n55,371,903 Downloads all time\n39 Versions published\n#### Downloads over the last 90 days\nDisplay as \nStacked \n  * Stacked \n  * Unstacked \n\n\nLoading\u2026\n",
              "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://crates.io/keywords/ansi_term:  #ansi_term \n\u27e82\u27e9 https://crates.io/keywords/cli:  #cli \n\u27e83\u27e9 https://crates.io/keywords/color:  #color \n\u27e84\u27e9 https://crates.io/keywords/no-std:  #no-std \n\u27e85\u27e9 https://crates.io/keywords/terminal:  #terminal \n\u27e86\u27e9 https://crates.io/crates/owo-colors:  Readme \n\u27e87\u27e9 https://crates.io/crates/owo-colors/versions:  39 Versions \n\u27e88\u27e9 https://crates.io/crates/owo-colors/dependencies:  Dependencies \n\u27e89\u27e9 https://crates.io/crates/owo-colors/reverse_dependencies:  Dependents \n\u27e810\u27e9 https://choosealicense.com/licenses/mit:  MIT \n\u27e811\u27e9 https://docs.rs/owo-colors:  docs.rs/owo-colors \n\u27e812\u27e9 https://github.com/owo-colors/owo-colors:  github.com/owo-colors/owo-colors \n\u27e813\u27e9 https://crates.io/categories/command-line-interface: Command-line interface\n\u27e814\u27e9 https://crates.io/categories/no-std::no-alloc: No dynamic allocation\n\u27e815\u27e9 https://crates.io/support?crate=owo-colors&inquire=crate-violation:  Report crate \n",
              "fit_markdown": "",
              "fit_html": ""
            },
            "structured_data": {},
            "quality_score": 3.0,
            "extraction_method": "crawl4ai",
            "error": null,
            "metadata": {
              "doc_type": "docs",
              "content_length": 1455,
              "has_structured_data": false,
              "crawl_success": true
            },
            "timestamp": "114142.3849009"
          },
          "docs_rs": {
            "url": "https://docs.rs/owo-colors",
            "title": "Crate owo_colorsCopy item path",
            "content": {
              "raw_markdown": "[](https://docs.rs/owo-colors/latest/owo_colors/all.html \"show sidebar\")\n# Crate owo_colorsCopy item path\n[Settings](https://docs.rs/owo-colors/latest/settings.html)\n[Help](https://docs.rs/owo-colors/latest/help.html)\nSummary[Source](https://docs.rs/owo-colors/latest/src/owo_colors/lib.rs.html#1-544)\nExpand description\n**Quick Links**| [`OwoColorize`](https://docs.rs/owo-colors/latest/owo_colors/trait.OwoColorize.html \"trait owo_colors::OwoColorize\")| [`Style`](https://docs.rs/owo-colors/latest/owo_colors/struct.Style.html \"struct owo_colors::Style\")| [`StyledList`](https://docs.rs/owo-colors/latest/owo_colors/struct.StyledList.html \"struct owo_colors::StyledList\")| [`github`](https://github.com/owo-colors/owo-colors)  \n---|---|---|---|---  \nThis crate provides [`OwoColorize`](https://docs.rs/owo-colors/latest/owo_colors/trait.OwoColorize.html \"trait owo_colors::OwoColorize\"), an extension trait for colorizing a given type.\n### [\u00a7](https://docs.rs/owo-colors/latest/owo_colors/#example)Example\n```\nuse owo_colors::OwoColorize;\n// Foreground colors\nprintln!(\"My number is {:#x}!\", 10.green());\n// Background colors\nprintln!(\"My number is not {}!\", 4.on_red());\n```\n\n### [\u00a7](https://docs.rs/owo-colors/latest/owo_colors/#generically-color)Generically color\n```\nuse owo_colors::OwoColorize;\nuse owo_colors::colors::*;\n// Generically color\nprintln!(\"My number might be {}!\", 4.fg::<Black>().bg::<Yellow>());\n```\n\n### [\u00a7](https://docs.rs/owo-colors/latest/owo_colors/#stylize)Stylize\n```\nuse owo_colors::OwoColorize;\nprintln!(\"{}\", \"strikethrough\".strikethrough());\n```\n\n### [\u00a7](https://docs.rs/owo-colors/latest/owo_colors/#only-style-on-supported-terminals)Only Style on Supported Terminals\n```\nuse owo_colors::{OwoColorize, Stream::Stdout};\nprintln!(\n  \"{}\",\n  \"colored blue if a supported terminal\"\n    .if_supports_color(Stdout, |text| text.bright_blue())\n);\n```\n\nSupports `NO_COLOR`/`FORCE_COLOR` environment variables, checks if it\u2019s a tty, checks if it\u2019s running in CI (and thus likely supports color), and checks which terminal is being used. (Note: requires `supports-colors` feature)\n### [\u00a7](https://docs.rs/owo-colors/latest/owo_colors/#style-objects)Style Objects\nowo-colors also features the ability to create a [`Style`](https://docs.rs/owo-colors/latest/owo_colors/struct.Style.html \"struct owo_colors::Style\") object and use it to apply the same set of colors/effects to any number of things to display.\n```\nuse owo_colors::{OwoColorize, Style};\nlet my_style = Style::new()\n  .red()\n  .on_white()\n  .strikethrough();\nlet text = \"red text, white background, struck through\";\nprintln!(\"{}\", text.style(my_style));\n```\n\n## Modules[\u00a7](https://docs.rs/owo-colors/latest/owo_colors/#modules)\n\n[colored](https://docs.rs/owo-colors/latest/owo_colors/colored/index.html \"mod owo_colors::colored\")\n    Module for drop-in [`colored`](https://docs.rs/colored) support to aid in porting code from [`colored`](https://docs.rs/colored) to owo-colors.\n\n[colors](https://docs.rs/owo-colors/latest/owo_colors/colors/index.html \"mod owo_colors::colors\")\n    Color types for used for being generic over the color\n\n[styles](https://docs.rs/owo-colors/latest/owo_colors/styles/index.html \"mod owo_colors::styles\")\n    Different display styles (strikethrough, bold, etc.)\n## Structs[\u00a7](https://docs.rs/owo-colors/latest/owo_colors/#structs)\n\n[BgColorDisplay](https://docs.rs/owo-colors/latest/owo_colors/struct.BgColorDisplay.html \"struct owo_colors::BgColorDisplay\")\n    Transparent wrapper around a type which implements all the formatters the wrapped type does, with the addition of changing the background color. Recommended to be constructed using [`OwoColorize`](https://docs.rs/owo-colors/latest/owo_colors/trait.OwoColorize.html \"trait owo_colors::OwoColorize\").\n\n[BgDynColorDisplay](https://docs.rs/owo-colors/latest/owo_colors/struct.BgDynColorDisplay.html \"struct owo_colors::BgDynColorDisplay\")\n    Wrapper around a type which implements all the formatters the wrapped type does, with the addition of changing the background color. Is not recommended unless compile-time coloring is not an option.\n\n[ComboColorDisplay](https://docs.rs/owo-colors/latest/owo_colors/struct.ComboColorDisplay.html \"struct owo_colors::ComboColorDisplay\")\n    A wrapper type which applies both a foreground and background color\n\n[ComboDynColorDisplay](https://docs.rs/owo-colors/latest/owo_colors/struct.ComboDynColorDisplay.html \"struct owo_colors::ComboDynColorDisplay\")\n    Wrapper around a type which implements all the formatters the wrapped type does, with the addition of changing the foreground and background color.\n\n[FgColorDisplay](https://docs.rs/owo-colors/latest/owo_colors/struct.FgColorDisplay.html \"struct owo_colors::FgColorDisplay\")\n    Transparent wrapper around a type which implements all the formatters the wrapped type does, with the addition of changing the foreground color. Recommended to be constructed using [`OwoColorize`](https://docs.rs/owo-colors/latest/owo_colors/trait.OwoColorize.html \"trait owo_colors::OwoColorize\").\n\n[FgDynColorDisplay](https://docs.rs/owo-colors/latest/owo_colors/struct.FgDynColorDisplay.html \"struct owo_colors::FgDynColorDisplay\")\n    Wrapper around a type which implements all the formatters the wrapped type does, with the addition of changing the foreground color. Is not recommended unless compile-time coloring is not an option.\n\n[ParseColorError](https://docs.rs/owo-colors/latest/owo_colors/struct.ParseColorError.html \"struct owo_colors::ParseColorError\")\n    An error for when the color can not be parsed from a string at runtime\n\n[Rgb](https://docs.rs/owo-colors/latest/owo_colors/struct.Rgb.html \"struct owo_colors::Rgb\")\n    Available RGB colors for use with [`OwoColorize::color`](https://docs.rs/owo-colors/latest/owo_colors/trait.OwoColorize.html#method.color \"method owo_colors::OwoColorize::color\") or [`OwoColorize::on_color`](https://docs.rs/owo-colors/latest/owo_colors/trait.OwoColorize.html#method.on_color \"method owo_colors::OwoColorize::on_color\")\n\n[Style](https://docs.rs/owo-colors/latest/owo_colors/struct.Style.html \"struct owo_colors::Style\")\n    A pre-computed style that can be applied to a struct using [`OwoColorize::style`](https://docs.rs/owo-colors/latest/owo_colors/trait.OwoColorize.html#method.style \"method owo_colors::OwoColorize::style\").\n\n[StylePrefixFormatter](https://docs.rs/owo-colors/latest/owo_colors/struct.StylePrefixFormatter.html \"struct owo_colors::StylePrefixFormatter\")\n    Formatter for the prefix of a [`Style`](https://docs.rs/owo-colors/latest/owo_colors/struct.Style.html \"struct owo_colors::Style\").\n\n[StyleSuffixFormatter](https://docs.rs/owo-colors/latest/owo_colors/struct.StyleSuffixFormatter.html \"struct owo_colors::StyleSuffixFormatter\")\n    Formatter for the suffix of a [`Style`](https://docs.rs/owo-colors/latest/owo_colors/struct.Style.html \"struct owo_colors::Style\").\n\n[Styled](https://docs.rs/owo-colors/latest/owo_colors/struct.Styled.html \"struct owo_colors::Styled\")\n    A wrapper type which applies a [`Style`](https://docs.rs/owo-colors/latest/owo_colors/struct.Style.html \"struct owo_colors::Style\") when displaying the inner type\n\n[StyledList](https://docs.rs/owo-colors/latest/owo_colors/struct.StyledList.html \"struct owo_colors::StyledList\")\n    A collection of [`Styled`](https://docs.rs/owo-colors/latest/owo_colors/struct.Styled.html \"struct owo_colors::Styled\") items that are displayed in such a way as to minimize the amount of characters that are written when displayed.\n\n[SupportsColorsDisplay](https://docs.rs/owo-colors/latest/owo_colors/struct.SupportsColorsDisplay.html \"struct owo_colors::SupportsColorsDisplay\")`supports-colors`\n    A display wrapper which applies a transformation based on if the given stream supports colored terminal output\n## Enums[\u00a7](https://docs.rs/owo-colors/latest/owo_colors/#enums)\n\n[AnsiColors](https://docs.rs/owo-colors/latest/owo_colors/enum.AnsiColors.html \"enum owo_colors::AnsiColors\")\n    Available standard ANSI colors for use with [`OwoColorize::color`](https://docs.rs/owo-colors/latest/owo_colors/trait.OwoColorize.html#method.color \"method owo_colors::OwoColorize::color\") or [`OwoColorize::on_color`](https://docs.rs/owo-colors/latest/owo_colors/trait.OwoColorize.html#method.on_color \"method owo_colors::OwoColorize::on_color\")\n\n[CssColors](https://docs.rs/owo-colors/latest/owo_colors/enum.CssColors.html \"enum owo_colors::CssColors\")\n    Available CSS colors for use with [`OwoColorize::color`](https://docs.rs/owo-colors/latest/owo_colors/trait.OwoColorize.html#method.color \"method owo_colors::OwoColorize::color\") or [`OwoColorize::on_color`](https://docs.rs/owo-colors/latest/owo_colors/trait.OwoColorize.html#method.on_color \"method owo_colors::OwoColorize::on_color\")\n\n[DynColors](https://docs.rs/owo-colors/latest/owo_colors/enum.DynColors.html \"enum owo_colors::DynColors\")\n    An enum describing runtime-configurable colors\n\n[Effect](https://docs.rs/owo-colors/latest/owo_colors/enum.Effect.html \"enum owo_colors::Effect\")\n    A runtime-configurable text effect for use with [`Style`](https://docs.rs/owo-colors/latest/owo_colors/struct.Style.html \"struct owo_colors::Style\")\n\n[Stream](https://docs.rs/owo-colors/latest/owo_colors/enum.Stream.html \"enum owo_colors::Stream\")`supports-colors`\n    A possible stream source.\n\n[XtermColors](https://docs.rs/owo-colors/latest/owo_colors/enum.XtermColors.html \"enum owo_colors::XtermColors\")\n    Available Xterm colors for use with [`OwoColorize::color`](https://docs.rs/owo-colors/latest/owo_colors/trait.OwoColorize.html#method.color \"method owo_colors::OwoColorize::color\") or [`OwoColorize::on_color`](https://docs.rs/owo-colors/latest/owo_colors/trait.OwoColorize.html#method.on_color \"method owo_colors::OwoColorize::on_color\")\n## Traits[\u00a7](https://docs.rs/owo-colors/latest/owo_colors/#traits)\n\n[Color](https://docs.rs/owo-colors/latest/owo_colors/trait.Color.html \"trait owo_colors::Color\")\n    A trait for describing a type which can be used with [`FgColorDisplay`](https://docs.rs/owo-colors/latest/owo_colors/struct.FgColorDisplay.html \"struct owo_colors::FgColorDisplay\") or [`BgColorDisplay`](https://docs.rs/owo-colors/latest/owo_colors/struct.BgColorDisplay.html \"struct owo_colors::BgColorDisplay\")\n\n[DynColor](https://docs.rs/owo-colors/latest/owo_colors/trait.DynColor.html \"trait owo_colors::DynColor\")\n    A trait describing a runtime-configurable color which can displayed using [`FgDynColorDisplay`](https://docs.rs/owo-colors/latest/owo_colors/struct.FgDynColorDisplay.html \"struct owo_colors::FgDynColorDisplay\") or [`BgDynColorDisplay`](https://docs.rs/owo-colors/latest/owo_colors/struct.BgDynColorDisplay.html \"struct owo_colors::BgDynColorDisplay\"). If your color will be known at compile time it is recommended you avoid this.\n\n[OwoColorize](https://docs.rs/owo-colors/latest/owo_colors/trait.OwoColorize.html \"trait owo_colors::OwoColorize\")\n    Extension trait for colorizing a type which implements any std formatter ([`Display`](https://doc.rust-lang.org/nightly/core/fmt/trait.Display.html \"trait core::fmt::Display\"), [`Debug`](https://doc.rust-lang.org/nightly/core/fmt/trait.Debug.html \"trait core::fmt::Debug\"), [`UpperHex`](https://doc.rust-lang.org/nightly/core/fmt/trait.UpperHex.html \"trait core::fmt::UpperHex\"), etc.)\n## Functions[\u00a7](https://docs.rs/owo-colors/latest/owo_colors/#functions)\n\n[set_override](https://docs.rs/owo-colors/latest/owo_colors/fn.set_override.html \"fn owo_colors::set_override\")`supports-colors`\n    Set an override value for whether or not colors are supported.\n\n[style](https://docs.rs/owo-colors/latest/owo_colors/fn.style.html \"fn owo_colors::style\")\n    Helper to create [`Style`](https://docs.rs/owo-colors/latest/owo_colors/struct.Style.html \"struct owo_colors::Style\")s more ergonomically\n\n[unset_override](https://docs.rs/owo-colors/latest/owo_colors/fn.unset_override.html \"fn owo_colors::unset_override\")`supports-colors`\n    Remove any override value for whether or not colors are supported. This means [`if_supports_color`](https://docs.rs/owo-colors/latest/owo_colors/trait.OwoColorize.html#method.if_supports_color \"method owo_colors::OwoColorize::if_supports_color\") will resume checking if the given terminal output ([`Stream`](https://docs.rs/owo-colors/latest/owo_colors/enum.Stream.html \"enum owo_colors::Stream\")) supports colors.\n\n[with_override](https://docs.rs/owo-colors/latest/owo_colors/fn.with_override.html \"fn owo_colors::with_override\")`supports-colors`\n    Set an override value for whether or not colors are supported using [`set_override`](https://docs.rs/owo-colors/latest/owo_colors/fn.set_override.html \"fn owo_colors::set_override\") while executing the closure provided.\n## Type Aliases[\u00a7](https://docs.rs/owo-colors/latest/owo_colors/#types)\n\n[StyledVec](https://docs.rs/owo-colors/latest/owo_colors/type.StyledVec.html \"type owo_colors::StyledVec\")`alloc`\n    A helper alias for [`StyledList`](https://docs.rs/owo-colors/latest/owo_colors/struct.StyledList.html \"struct owo_colors::StyledList\") for easier usage with [`alloc::vec::Vec`](https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html \"struct alloc::vec::Vec\").\n",
              "markdown_with_citations": "[](https://docs.rs/owo-colors/latest/owo_colors/all.html \"show sidebar\")\n# Crate owo_colorsCopy item path\nSettings\u27e81\u27e9\nHelp\u27e82\u27e9\nSummarySource\u27e83\u27e9\nExpand description\n**Quick Links**| `OwoColorize`\u27e84\u27e9| `Style`\u27e85\u27e9| `StyledList`\u27e86\u27e9| `github`\u27e87\u27e9  \n---|---|---|---|---  \nThis crate provides `OwoColorize`\u27e84\u27e9, an extension trait for colorizing a given type.\n### \u00a7\u27e88\u27e9Example\n```\nuse owo_colors::OwoColorize;\n// Foreground colors\nprintln!(\"My number is {:#x}!\", 10.green());\n// Background colors\nprintln!(\"My number is not {}!\", 4.on_red());\n```\n\n### \u00a7\u27e89\u27e9Generically color\n```\nuse owo_colors::OwoColorize;\nuse owo_colors::colors::*;\n// Generically color\nprintln!(\"My number might be {}!\", 4.fg::<Black>().bg::<Yellow>());\n```\n\n### \u00a7\u27e810\u27e9Stylize\n```\nuse owo_colors::OwoColorize;\nprintln!(\"{}\", \"strikethrough\".strikethrough());\n```\n\n### \u00a7\u27e811\u27e9Only Style on Supported Terminals\n```\nuse owo_colors::{OwoColorize, Stream::Stdout};\nprintln!(\n  \"{}\",\n  \"colored blue if a supported terminal\"\n    .if_supports_color(Stdout, |text| text.bright_blue())\n);\n```\n\nSupports `NO_COLOR`/`FORCE_COLOR` environment variables, checks if it\u2019s a tty, checks if it\u2019s running in CI (and thus likely supports color), and checks which terminal is being used. (Note: requires `supports-colors` feature)\n### \u00a7\u27e812\u27e9Style Objects\nowo-colors also features the ability to create a `Style`\u27e85\u27e9 object and use it to apply the same set of colors/effects to any number of things to display.\n```\nuse owo_colors::{OwoColorize, Style};\nlet my_style = Style::new()\n  .red()\n  .on_white()\n  .strikethrough();\nlet text = \"red text, white background, struck through\";\nprintln!(\"{}\", text.style(my_style));\n```\n\n## Modules\u00a7\u27e813\u27e9\n\ncolored\u27e814\u27e9\n    Module for drop-in `colored`\u27e815\u27e9 support to aid in porting code from `colored`\u27e815\u27e9 to owo-colors.\n\ncolors\u27e816\u27e9\n    Color types for used for being generic over the color\n\nstyles\u27e817\u27e9\n    Different display styles (strikethrough, bold, etc.)\n## Structs\u00a7\u27e818\u27e9\n\nBgColorDisplay\u27e819\u27e9\n    Transparent wrapper around a type which implements all the formatters the wrapped type does, with the addition of changing the background color. Recommended to be constructed using `OwoColorize`\u27e84\u27e9.\n\nBgDynColorDisplay\u27e820\u27e9\n    Wrapper around a type which implements all the formatters the wrapped type does, with the addition of changing the background color. Is not recommended unless compile-time coloring is not an option.\n\nComboColorDisplay\u27e821\u27e9\n    A wrapper type which applies both a foreground and background color\n\nComboDynColorDisplay\u27e822\u27e9\n    Wrapper around a type which implements all the formatters the wrapped type does, with the addition of changing the foreground and background color.\n\nFgColorDisplay\u27e823\u27e9\n    Transparent wrapper around a type which implements all the formatters the wrapped type does, with the addition of changing the foreground color. Recommended to be constructed using `OwoColorize`\u27e84\u27e9.\n\nFgDynColorDisplay\u27e824\u27e9\n    Wrapper around a type which implements all the formatters the wrapped type does, with the addition of changing the foreground color. Is not recommended unless compile-time coloring is not an option.\n\nParseColorError\u27e825\u27e9\n    An error for when the color can not be parsed from a string at runtime\n\nRgb\u27e826\u27e9\n    Available RGB colors for use with `OwoColorize::color`\u27e827\u27e9 or `OwoColorize::on_color`\u27e828\u27e9\n\nStyle\u27e85\u27e9\n    A pre-computed style that can be applied to a struct using `OwoColorize::style`\u27e829\u27e9.\n\nStylePrefixFormatter\u27e830\u27e9\n    Formatter for the prefix of a `Style`\u27e85\u27e9.\n\nStyleSuffixFormatter\u27e831\u27e9\n    Formatter for the suffix of a `Style`\u27e85\u27e9.\n\nStyled\u27e832\u27e9\n    A wrapper type which applies a `Style`\u27e85\u27e9 when displaying the inner type\n\nStyledList\u27e86\u27e9\n    A collection of `Styled`\u27e832\u27e9 items that are displayed in such a way as to minimize the amount of characters that are written when displayed.\n\nSupportsColorsDisplay\u27e833\u27e9`supports-colors`\n    A display wrapper which applies a transformation based on if the given stream supports colored terminal output\n## Enums\u00a7\u27e834\u27e9\n\nAnsiColors\u27e835\u27e9\n    Available standard ANSI colors for use with `OwoColorize::color`\u27e827\u27e9 or `OwoColorize::on_color`\u27e828\u27e9\n\nCssColors\u27e836\u27e9\n    Available CSS colors for use with `OwoColorize::color`\u27e827\u27e9 or `OwoColorize::on_color`\u27e828\u27e9\n\nDynColors\u27e837\u27e9\n    An enum describing runtime-configurable colors\n\nEffect\u27e838\u27e9\n    A runtime-configurable text effect for use with `Style`\u27e85\u27e9\n\nStream\u27e839\u27e9`supports-colors`\n    A possible stream source.\n\nXtermColors\u27e840\u27e9\n    Available Xterm colors for use with `OwoColorize::color`\u27e827\u27e9 or `OwoColorize::on_color`\u27e828\u27e9\n## Traits\u00a7\u27e841\u27e9\n\nColor\u27e842\u27e9\n    A trait for describing a type which can be used with `FgColorDisplay`\u27e823\u27e9 or `BgColorDisplay`\u27e819\u27e9\n\nDynColor\u27e843\u27e9\n    A trait describing a runtime-configurable color which can displayed using `FgDynColorDisplay`\u27e824\u27e9 or `BgDynColorDisplay`\u27e820\u27e9. If your color will be known at compile time it is recommended you avoid this.\n\nOwoColorize\u27e84\u27e9\n    Extension trait for colorizing a type which implements any std formatter (`Display`\u27e844\u27e9, `Debug`\u27e845\u27e9, `UpperHex`\u27e846\u27e9, etc.)\n## Functions\u00a7\u27e847\u27e9\n\nset_override\u27e848\u27e9`supports-colors`\n    Set an override value for whether or not colors are supported.\n\nstyle\u27e849\u27e9\n    Helper to create `Style`\u27e85\u27e9s more ergonomically\n\nunset_override\u27e850\u27e9`supports-colors`\n    Remove any override value for whether or not colors are supported. This means `if_supports_color`\u27e851\u27e9 will resume checking if the given terminal output (`Stream`\u27e839\u27e9) supports colors.\n\nwith_override\u27e852\u27e9`supports-colors`\n    Set an override value for whether or not colors are supported using `set_override`\u27e848\u27e9 while executing the closure provided.\n## Type Aliases\u00a7\u27e853\u27e9\n\nStyledVec\u27e854\u27e9`alloc`\n    A helper alias for `StyledList`\u27e86\u27e9 for easier usage with `alloc::vec::Vec`\u27e855\u27e9.\n",
              "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://docs.rs/owo-colors/latest/settings.html: Settings\n\u27e82\u27e9 https://docs.rs/owo-colors/latest/help.html: Help\n\u27e83\u27e9 https://docs.rs/owo-colors/latest/src/owo_colors/lib.rs.html#1-544: Source\n\u27e84\u27e9 https://docs.rs/owo-colors/latest/owo_colors/trait.OwoColorize.html: trait owo_colors::OwoColorize - `OwoColorize`\n\u27e85\u27e9 https://docs.rs/owo-colors/latest/owo_colors/struct.Style.html: struct owo_colors::Style - `Style`\n\u27e86\u27e9 https://docs.rs/owo-colors/latest/owo_colors/struct.StyledList.html: struct owo_colors::StyledList - `StyledList`\n\u27e87\u27e9 https://github.com/owo-colors/owo-colors: `github`\n\u27e88\u27e9 https://docs.rs/owo-colors/latest/owo_colors/#example: \u00a7\n\u27e89\u27e9 https://docs.rs/owo-colors/latest/owo_colors/#generically-color: \u00a7\n\u27e810\u27e9 https://docs.rs/owo-colors/latest/owo_colors/#stylize: \u00a7\n\u27e811\u27e9 https://docs.rs/owo-colors/latest/owo_colors/#only-style-on-supported-terminals: \u00a7\n\u27e812\u27e9 https://docs.rs/owo-colors/latest/owo_colors/#style-objects: \u00a7\n\u27e813\u27e9 https://docs.rs/owo-colors/latest/owo_colors/#modules: \u00a7\n\u27e814\u27e9 https://docs.rs/owo-colors/latest/owo_colors/colored/index.html: mod owo_colors::colored - colored\n\u27e815\u27e9 https://docs.rs/colored: `colored`\n\u27e816\u27e9 https://docs.rs/owo-colors/latest/owo_colors/colors/index.html: mod owo_colors::colors - colors\n\u27e817\u27e9 https://docs.rs/owo-colors/latest/owo_colors/styles/index.html: mod owo_colors::styles - styles\n\u27e818\u27e9 https://docs.rs/owo-colors/latest/owo_colors/#structs: \u00a7\n\u27e819\u27e9 https://docs.rs/owo-colors/latest/owo_colors/struct.BgColorDisplay.html: struct owo_colors::BgColorDisplay - BgColorDisplay\n\u27e820\u27e9 https://docs.rs/owo-colors/latest/owo_colors/struct.BgDynColorDisplay.html: struct owo_colors::BgDynColorDisplay - BgDynColorDisplay\n\u27e821\u27e9 https://docs.rs/owo-colors/latest/owo_colors/struct.ComboColorDisplay.html: struct owo_colors::ComboColorDisplay - ComboColorDisplay\n\u27e822\u27e9 https://docs.rs/owo-colors/latest/owo_colors/struct.ComboDynColorDisplay.html: struct owo_colors::ComboDynColorDisplay - ComboDynColorDisplay\n\u27e823\u27e9 https://docs.rs/owo-colors/latest/owo_colors/struct.FgColorDisplay.html: struct owo_colors::FgColorDisplay - FgColorDisplay\n\u27e824\u27e9 https://docs.rs/owo-colors/latest/owo_colors/struct.FgDynColorDisplay.html: struct owo_colors::FgDynColorDisplay - FgDynColorDisplay\n\u27e825\u27e9 https://docs.rs/owo-colors/latest/owo_colors/struct.ParseColorError.html: struct owo_colors::ParseColorError - ParseColorError\n\u27e826\u27e9 https://docs.rs/owo-colors/latest/owo_colors/struct.Rgb.html: struct owo_colors::Rgb - Rgb\n\u27e827\u27e9 https://docs.rs/owo-colors/latest/owo_colors/trait.OwoColorize.html#method.color: method owo_colors::OwoColorize::color - `OwoColorize::color`\n\u27e828\u27e9 https://docs.rs/owo-colors/latest/owo_colors/trait.OwoColorize.html#method.on_color: method owo_colors::OwoColorize::on_color - `OwoColorize::on_color`\n\u27e829\u27e9 https://docs.rs/owo-colors/latest/owo_colors/trait.OwoColorize.html#method.style: method owo_colors::OwoColorize::style - `OwoColorize::style`\n\u27e830\u27e9 https://docs.rs/owo-colors/latest/owo_colors/struct.StylePrefixFormatter.html: struct owo_colors::StylePrefixFormatter - StylePrefixFormatter\n\u27e831\u27e9 https://docs.rs/owo-colors/latest/owo_colors/struct.StyleSuffixFormatter.html: struct owo_colors::StyleSuffixFormatter - StyleSuffixFormatter\n\u27e832\u27e9 https://docs.rs/owo-colors/latest/owo_colors/struct.Styled.html: struct owo_colors::Styled - Styled\n\u27e833\u27e9 https://docs.rs/owo-colors/latest/owo_colors/struct.SupportsColorsDisplay.html: struct owo_colors::SupportsColorsDisplay - SupportsColorsDisplay\n\u27e834\u27e9 https://docs.rs/owo-colors/latest/owo_colors/#enums: \u00a7\n\u27e835\u27e9 https://docs.rs/owo-colors/latest/owo_colors/enum.AnsiColors.html: enum owo_colors::AnsiColors - AnsiColors\n\u27e836\u27e9 https://docs.rs/owo-colors/latest/owo_colors/enum.CssColors.html: enum owo_colors::CssColors - CssColors\n\u27e837\u27e9 https://docs.rs/owo-colors/latest/owo_colors/enum.DynColors.html: enum owo_colors::DynColors - DynColors\n\u27e838\u27e9 https://docs.rs/owo-colors/latest/owo_colors/enum.Effect.html: enum owo_colors::Effect - Effect\n\u27e839\u27e9 https://docs.rs/owo-colors/latest/owo_colors/enum.Stream.html: enum owo_colors::Stream - Stream\n\u27e840\u27e9 https://docs.rs/owo-colors/latest/owo_colors/enum.XtermColors.html: enum owo_colors::XtermColors - XtermColors\n\u27e841\u27e9 https://docs.rs/owo-colors/latest/owo_colors/#traits: \u00a7\n\u27e842\u27e9 https://docs.rs/owo-colors/latest/owo_colors/trait.Color.html: trait owo_colors::Color - Color\n\u27e843\u27e9 https://docs.rs/owo-colors/latest/owo_colors/trait.DynColor.html: trait owo_colors::DynColor - DynColor\n\u27e844\u27e9 https://doc.rust-lang.org/nightly/core/fmt/trait.Display.html: trait core::fmt::Display - `Display`\n\u27e845\u27e9 https://doc.rust-lang.org/nightly/core/fmt/trait.Debug.html: trait core::fmt::Debug - `Debug`\n\u27e846\u27e9 https://doc.rust-lang.org/nightly/core/fmt/trait.UpperHex.html: trait core::fmt::UpperHex - `UpperHex`\n\u27e847\u27e9 https://docs.rs/owo-colors/latest/owo_colors/#functions: \u00a7\n\u27e848\u27e9 https://docs.rs/owo-colors/latest/owo_colors/fn.set_override.html: fn owo_colors::set_override - set_override\n\u27e849\u27e9 https://docs.rs/owo-colors/latest/owo_colors/fn.style.html: fn owo_colors::style - style\n\u27e850\u27e9 https://docs.rs/owo-colors/latest/owo_colors/fn.unset_override.html: fn owo_colors::unset_override - unset_override\n\u27e851\u27e9 https://docs.rs/owo-colors/latest/owo_colors/trait.OwoColorize.html#method.if_supports_color: method owo_colors::OwoColorize::if_supports_color - `if_supports_color`\n\u27e852\u27e9 https://docs.rs/owo-colors/latest/owo_colors/fn.with_override.html: fn owo_colors::with_override - with_override\n\u27e853\u27e9 https://docs.rs/owo-colors/latest/owo_colors/#types: \u00a7\n\u27e854\u27e9 https://docs.rs/owo-colors/latest/owo_colors/type.StyledVec.html: type owo_colors::StyledVec - StyledVec\n\u27e855\u27e9 https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html: struct alloc::vec::Vec - `alloc::vec::Vec`\n",
              "fit_markdown": "",
              "fit_html": ""
            },
            "structured_data": {},
            "quality_score": 4.0,
            "extraction_method": "crawl4ai",
            "error": null,
            "metadata": {
              "doc_type": "docs",
              "content_length": 13184,
              "has_structured_data": false,
              "crawl_success": true
            },
            "timestamp": "114143.2549358"
          },
          "lib_rs": {
            "url": "https://lib.rs/crates/owo-colors",
            "title": "Untitled",
            "content": {
              "raw_markdown": "###  [32 releases](https://lib.rs/crates/owo-colors/versions) (stable)\n5.0.0 |  ~~Sep 10, 2024~~  \n---|---  \n4.2.2 |  Jun 24, 2025   \n4.2.1 |  May 15, 2025   \n4.2.0 |  Feb 23, 2025   \n0.0.0 |  Aug 25, 2020   \n#**5** in [Command-line interface](https://lib.rs/command-line-interface \"Crates to help create command line interfaces, such as argument parsers, line-editing, or output coloring and formatting.\")\nDownload history 919618/week @ 2025-03-10 882382/week @ 2025-03-17 881051/week @ 2025-03-24 859851/week @ 2025-03-31 920469/week @ 2025-04-07 855998/week @ 2025-04-14 828822/week @ 2025-04-21 810481/week @ 2025-04-28 862372/week @ 2025-05-05 897143/week @ 2025-05-12 865185/week @ 2025-05-19 776254/week @ 2025-05-26 873991/week @ 2025-06-02 908517/week @ 2025-06-09 946980/week @ 2025-06-16 900426/week @ 2025-06-23\n**3,673,119** downloads per month Used in [**2,222** crates (517 directly)](https://lib.rs/crates/owo-colors/rev)\n**MIT** license \n155KB  3K  SLoC\n# ![](https://img.gs/czjpqfbdkz/100/https://jam1.re/img/rust_owo.svg) Colors\n[![Current Crates.io Version](https://img.shields.io/crates/v/owo-colors.svg)](https://crates.io/crates/owo-colors) [![docs-rs](https://img.gs/czjpqfbdkz/full/https://docs.rs/owo-colors/badge.svg)](https://docs.rs/owo-colors) ![MSRV 1.70+](https://img.shields.io/badge/rustc-1.70+-blue.svg) ![Downloads](https://img.shields.io/crates/d/owo-colors)\nA zero-allocation no_std-compatible zero-cost way to add color to your Rust terminal to make people go owo.\n**Supports:**\n  * All std/core formatters \n    * [Display](https://doc.rust-lang.org/std/fmt/trait.Display.html)\n    * [Debug](https://doc.rust-lang.org/std/fmt/trait.Debug.html)\n    * [Octal](https://doc.rust-lang.org/std/fmt/trait.Octal.html)\n    * [LowerHex](https://doc.rust-lang.org/std/fmt/trait.LowerHex.html)\n    * [UpperHex](https://doc.rust-lang.org/std/fmt/trait.UpperHex.html)\n    * [Pointer](https://doc.rust-lang.org/std/fmt/trait.Pointer.html)\n    * [Binary](https://doc.rust-lang.org/std/fmt/trait.Binary.html)\n    * [LowerExp](https://doc.rust-lang.org/std/fmt/trait.LowerExp.html)\n    * [UpperExp](https://doc.rust-lang.org/std/fmt/trait.UpperExp.html)\n  * Optional checking for if a terminal supports colors \n    * Enabled for CI\n    * Disabled by default for non-terminal outputs\n    * Overridable by ``NO_COLOR``/``FORCE_COLOR`` environment variables\n    * Overridable programmatically via [``set_override``](https://docs.rs/owo-colors/latest/owo_colors/fn.set_override.html)\n  * Dependency-less by default\n  * 100% safe code\n  * Most functions are ```const```\n  * Hand picked names for all ANSI (4-bit) and Xterm (8-bit) colors\n  * Support for RGB colors\n  * Set colors at compile time by generics or at runtime by value\n  * All ANSI colors \n    * Basic support (normal and bright variants)\n    * Xterm support (high compatibility and 256 colors)\n    * Truecolor support (modern, 48-bit color)\n  * Styling (underline, strikethrough, etc)\n\n\nowo-colors is also more-or-less a drop-in replacement for [colored](https://lib.rs/crates/colored), allowing colored to work in a no_std environment. No allocations or dependencies required because embedded systems deserve to be pretty too uwu.\nTo add to your Cargo.toml:\n```\n`owo-colors = \"4\"\n`\n```\n\n## Example\n```\n``use` `owo_colors`::``OwoColorize`;`\n``fn` `main`````(````)``````{`\n  ``//` Foreground colors`\n  `println!``(```\"`My number is `{:#x}`!`\"```,` `10.``green``(``)``)``;`\n  ``//` Background colors`\n  `println!``(```\"`My number is not `{}`!`\"```,` `4.``on_red``(``)``)``;`\n```}```\n`\n```\n\n## Generic colors\n```\n``use` `owo_colors`::``OwoColorize`;`\n`use` `owo_colors`::```colors`::```*``;`\n``fn` `main`````(````)``````{`\n  ``//` Generically color`\n  `println!``(```\"`My number might be `{}`!`\"```,` `4.``fg`::````<`Black`>```(``)``.``bg`::````<`Yellow`>```(``)``)``;`\n```}```\n`\n```\n\n## Stylize\n```\n``use` `owo_colors`::``OwoColorize`;`\n`println!``(```\"``{}``\"```,` ``\"`strikethrough`\"```.``strikethrough``(``)``)``;`\n`\n```\n\n## Only Style on Supported Terminals\n```\n``use` `owo_colors`::````{`OwoColorize`,` `Stream`::``Stdout```}```;`\n`println!``(`\n  ``\"``{}``\"```,`\n  ``\"`colored blue if a supported terminal`\"``\n    `.``if_supports_color``(`Stdout`,` ```|``````text``|`` ``text`.``bright_blue``(``)```)`\n`)``;`\n`\n```\n\nSupports ``NO_COLOR``/``FORCE_COLOR`` environment variables, checks if it's a tty, checks if it's running in CI (and thus likely supports color), and checks which terminal is being used. (Note: requires ``supports-colors`` feature)\n## Minimum supported Rust version (MSRV)\nThe MSRV of owo-colors is **Rust 1.70**.\nThis library has a conservative MSRV policy \u2014 Rust versions from the last 12 months will be supported (features available in newer versions will be gated by ``build.rs``), the MSRV will only be bumped if required, and if the MSRV is bumped it will always occur with a new minor version.\n#### Dependencies\n~0\u20136.5MB  ~36K SLoC\n  * [supports-colors?](https://lib.rs/crates/owo-colors/features#feature-supports-colors \"optional feature\") [supports-color](https://lib.rs/crates/supports-color \"3.0.0\")\n  * [supports-colors?](https://lib.rs/crates/owo-colors/features#feature-supports-colors \"optional feature\") [supports-color](https://lib.rs/crates/supports-color \"renamed supports-color-2, obsolete\") 2.0\n\n\n  * build `build.rs`\n\n\n#### [Other feature](https://lib.rs/crates/owo-colors/features)\n  * [alloc](https://lib.rs/crates/owo-colors/features#feature-alloc)\n\n\n  *[SLoC]: approx. additional lines of code\n",
              "markdown_with_citations": "###  32 releases\u27e81\u27e9 (stable)\n5.0.0 |  ~~Sep 10, 2024~~  \n---|---  \n4.2.2 |  Jun 24, 2025   \n4.2.1 |  May 15, 2025   \n4.2.0 |  Feb 23, 2025   \n0.0.0 |  Aug 25, 2020   \n#**5** in Command-line interface\u27e82\u27e9\nDownload history 919618/week @ 2025-03-10 882382/week @ 2025-03-17 881051/week @ 2025-03-24 859851/week @ 2025-03-31 920469/week @ 2025-04-07 855998/week @ 2025-04-14 828822/week @ 2025-04-21 810481/week @ 2025-04-28 862372/week @ 2025-05-05 897143/week @ 2025-05-12 865185/week @ 2025-05-19 776254/week @ 2025-05-26 873991/week @ 2025-06-02 908517/week @ 2025-06-09 946980/week @ 2025-06-16 900426/week @ 2025-06-23\n**3,673,119** downloads per month Used in **2,222** crates (517 directly)\u27e83\u27e9\n**MIT** license \n155KB  3K  SLoC\n# ![](https://img.gs/czjpqfbdkz/100/https://jam1.re/img/rust_owo.svg) Colors\n![Current Crates.io Version\u27e84\u27e9](https://crates.io/crates/owo-colors) ![docs-rs\u27e85\u27e9](https://docs.rs/owo-colors) ![MSRV 1.70+\u27e86\u27e9] ![Downloads\u27e87\u27e9]\nA zero-allocation no_std-compatible zero-cost way to add color to your Rust terminal to make people go owo.\n**Supports:**\n  * All std/core formatters \n    * Display\u27e88\u27e9\n    * Debug\u27e89\u27e9\n    * Octal\u27e810\u27e9\n    * LowerHex\u27e811\u27e9\n    * UpperHex\u27e812\u27e9\n    * Pointer\u27e813\u27e9\n    * Binary\u27e814\u27e9\n    * LowerExp\u27e815\u27e9\n    * UpperExp\u27e816\u27e9\n  * Optional checking for if a terminal supports colors \n    * Enabled for CI\n    * Disabled by default for non-terminal outputs\n    * Overridable by ``NO_COLOR``/``FORCE_COLOR`` environment variables\n    * Overridable programmatically via ``set_override``\u27e817\u27e9\n  * Dependency-less by default\n  * 100% safe code\n  * Most functions are ```const```\n  * Hand picked names for all ANSI (4-bit) and Xterm (8-bit) colors\n  * Support for RGB colors\n  * Set colors at compile time by generics or at runtime by value\n  * All ANSI colors \n    * Basic support (normal and bright variants)\n    * Xterm support (high compatibility and 256 colors)\n    * Truecolor support (modern, 48-bit color)\n  * Styling (underline, strikethrough, etc)\n\n\nowo-colors is also more-or-less a drop-in replacement for colored\u27e818\u27e9, allowing colored to work in a no_std environment. No allocations or dependencies required because embedded systems deserve to be pretty too uwu.\nTo add to your Cargo.toml:\n```\n`owo-colors = \"4\"\n`\n```\n\n## Example\n```\n``use` `owo_colors`::``OwoColorize`;`\n``fn` `main`````(````)``````{`\n  ``//` Foreground colors`\n  `println!``(```\"`My number is `{:#x}`!`\"```,` `10.``green``(``)``)``;`\n  ``//` Background colors`\n  `println!``(```\"`My number is not `{}`!`\"```,` `4.``on_red``(``)``)``;`\n```}```\n`\n```\n\n## Generic colors\n```\n``use` `owo_colors`::``OwoColorize`;`\n`use` `owo_colors`::```colors`::```*``;`\n``fn` `main`````(````)``````{`\n  ``//` Generically color`\n  `println!``(```\"`My number might be `{}`!`\"```,` `4.``fg`::````<`Black`>```(``)``.``bg`::````<`Yellow`>```(``)``)``;`\n```}```\n`\n```\n\n## Stylize\n```\n``use` `owo_colors`::``OwoColorize`;`\n`println!``(```\"``{}``\"```,` ``\"`strikethrough`\"```.``strikethrough``(``)``)``;`\n`\n```\n\n## Only Style on Supported Terminals\n```\n``use` `owo_colors`::````{`OwoColorize`,` `Stream`::``Stdout```}```;`\n`println!``(`\n  ``\"``{}``\"```,`\n  ``\"`colored blue if a supported terminal`\"``\n    `.``if_supports_color``(`Stdout`,` ```|``````text``|`` ``text`.``bright_blue``(``)```)`\n`)``;`\n`\n```\n\nSupports ``NO_COLOR``/``FORCE_COLOR`` environment variables, checks if it's a tty, checks if it's running in CI (and thus likely supports color), and checks which terminal is being used. (Note: requires ``supports-colors`` feature)\n## Minimum supported Rust version (MSRV)\nThe MSRV of owo-colors is **Rust 1.70**.\nThis library has a conservative MSRV policy \u2014 Rust versions from the last 12 months will be supported (features available in newer versions will be gated by ``build.rs``), the MSRV will only be bumped if required, and if the MSRV is bumped it will always occur with a new minor version.\n#### Dependencies\n~0\u20136.5MB  ~36K SLoC\n  * supports-colors?\u27e819\u27e9 supports-color\u27e820\u27e9\n  * supports-colors?\u27e819\u27e9 supports-color\u27e820\u27e9 2.0\n\n\n  * build `build.rs`\n\n\n#### Other feature\u27e821\u27e9\n  * alloc\u27e822\u27e9\n\n\n  *[SLoC]: approx. additional lines of code\n",
              "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://lib.rs/crates/owo-colors/versions: 32 releases\n\u27e82\u27e9 https://lib.rs/command-line-interface: Crates to help create command line interfaces, such as argument parsers, line-editing, or output coloring and formatting. - Command-line interface\n\u27e83\u27e9 https://lib.rs/crates/owo-colors/rev: **2,222** crates (517 directly)\n\u27e84\u27e9 https://img.shields.io/crates/v/owo-colors.svg: ![Current Crates.io Version\n\u27e85\u27e9 https://img.gs/czjpqfbdkz/full/https://docs.rs/owo-colors/badge.svg: ![docs-rs\n\u27e86\u27e9 https://img.shields.io/badge/rustc-1.70+-blue.svg: MSRV 1.70+\n\u27e87\u27e9 https://img.shields.io/crates/d/owo-colors: Downloads\n\u27e88\u27e9 https://doc.rust-lang.org/std/fmt/trait.Display.html: Display\n\u27e89\u27e9 https://doc.rust-lang.org/std/fmt/trait.Debug.html: Debug\n\u27e810\u27e9 https://doc.rust-lang.org/std/fmt/trait.Octal.html: Octal\n\u27e811\u27e9 https://doc.rust-lang.org/std/fmt/trait.LowerHex.html: LowerHex\n\u27e812\u27e9 https://doc.rust-lang.org/std/fmt/trait.UpperHex.html: UpperHex\n\u27e813\u27e9 https://doc.rust-lang.org/std/fmt/trait.Pointer.html: Pointer\n\u27e814\u27e9 https://doc.rust-lang.org/std/fmt/trait.Binary.html: Binary\n\u27e815\u27e9 https://doc.rust-lang.org/std/fmt/trait.LowerExp.html: LowerExp\n\u27e816\u27e9 https://doc.rust-lang.org/std/fmt/trait.UpperExp.html: UpperExp\n\u27e817\u27e9 https://docs.rs/owo-colors/latest/owo_colors/fn.set_override.html: ``set_override``\n\u27e818\u27e9 https://lib.rs/crates/colored: colored\n\u27e819\u27e9 https://lib.rs/crates/owo-colors/features#feature-supports-colors: optional feature - supports-colors?\n\u27e820\u27e9 https://lib.rs/crates/supports-color: 3.0.0 - supports-color\n\u27e821\u27e9 https://lib.rs/crates/owo-colors/features: Other feature\n\u27e822\u27e9 https://lib.rs/crates/owo-colors/features#feature-alloc: alloc\n",
              "fit_markdown": "",
              "fit_html": ""
            },
            "structured_data": {},
            "quality_score": 3.0,
            "extraction_method": "crawl4ai",
            "error": null,
            "metadata": {
              "doc_type": "docs",
              "content_length": 5518,
              "has_structured_data": false,
              "crawl_success": true
            },
            "timestamp": "114143.8376918"
          }
        },
        "crate_analysis": {
          "status": "completed",
          "check": [
            {
              "reason": "compiler-artifact",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpgxlekk7s/owo-colors-4.2.2#owo-colors@4.2.2",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpgxlekk7s\\owo-colors-4.2.2\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpgxlekk7s\\owo-colors-4.2.2\\build.rs",
                "edition": "2021",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpgxlekk7s\\owo-colors-4.2.2\\target\\debug\\build\\owo-colors-a23ebbacfba9d510\\build-script-build.exe",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpgxlekk7s\\owo-colors-4.2.2\\target\\debug\\build\\owo-colors-a23ebbacfba9d510\\build_script_build.pdb"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "build-script-executed",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpgxlekk7s/owo-colors-4.2.2#owo-colors@4.2.2",
              "linked_libs": [],
              "linked_paths": [],
              "cfgs": [
                "const_mut_refs"
              ],
              "env": [],
              "out_dir": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpgxlekk7s\\owo-colors-4.2.2\\target\\debug\\build\\owo-colors-48cfc6bb88090893\\out"
            },
            {
              "reason": "compiler-artifact",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpgxlekk7s/owo-colors-4.2.2#owo-colors@4.2.2",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpgxlekk7s\\owo-colors-4.2.2\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "owo_colors",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpgxlekk7s\\owo-colors-4.2.2\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpgxlekk7s\\owo-colors-4.2.2\\target\\debug\\deps\\libowo_colors-d408ffdccddeeb62.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "build-finished",
              "success": true
            }
          ],
          "clippy": [
            {
              "reason": "compiler-artifact",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpgxlekk7s/owo-colors-4.2.2#owo-colors@4.2.2",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpgxlekk7s\\owo-colors-4.2.2\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpgxlekk7s\\owo-colors-4.2.2\\build.rs",
                "edition": "2021",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpgxlekk7s\\owo-colors-4.2.2\\target\\debug\\build\\owo-colors-e74d2267f7ebf8e0\\build-script-build.exe",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpgxlekk7s\\owo-colors-4.2.2\\target\\debug\\build\\owo-colors-e74d2267f7ebf8e0\\build_script_build.pdb"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "build-script-executed",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpgxlekk7s/owo-colors-4.2.2#owo-colors@4.2.2",
              "linked_libs": [],
              "linked_paths": [],
              "cfgs": [
                "const_mut_refs"
              ],
              "env": [],
              "out_dir": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpgxlekk7s\\owo-colors-4.2.2\\target\\debug\\build\\owo-colors-3997e889afd69e28\\out"
            },
            {
              "reason": "compiler-artifact",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpgxlekk7s/owo-colors-4.2.2#owo-colors@4.2.2",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpgxlekk7s\\owo-colors-4.2.2\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "owo_colors",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpgxlekk7s\\owo-colors-4.2.2\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpgxlekk7s\\owo-colors-4.2.2\\target\\debug\\deps\\libowo_colors-2c9cc5d034bf8e5e.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "build-finished",
              "success": true
            }
          ],
          "audit": {
            "database": {
              "advisory-count": 787,
              "last-commit": "7573f55ba337263f61167dbb0ea926cdc7c8eb5d",
              "last-updated": "2025-06-17T11:04:25+02:00"
            },
            "lockfile": {
              "dependency-count": 17
            },
            "settings": {
              "target_arch": [],
              "target_os": [],
              "severity": null,
              "ignore": [],
              "informational_warnings": [
                "unmaintained",
                "unsound",
                "notice"
              ]
            },
            "vulnerabilities": {
              "found": false,
              "count": 0,
              "list": []
            },
            "warnings": {}
          },
          "note": "Crate analysis performed with stable toolchain."
        },
        "crate_metadata": {
          "name": "owo-colors",
          "version": "4.2.2",
          "description": "ALLOW: Positive community sentiment",
          "repository": "",
          "keywords": [],
          "categories": [],
          "readme": {
            "raw_markdown": "[](https://docs.rs/owo-colors/latest/owo_colors/all.html \"show sidebar\")\n# Crate owo_colorsCopy item path\n[Settings](https://docs.rs/owo-colors/latest/settings.html)\n[Help](https://docs.rs/owo-colors/latest/help.html)\nSummary[Source](https://docs.rs/owo-colors/latest/src/owo_colors/lib.rs.html#1-544)\nExpand description\n**Quick Links**| [`OwoColorize`](https://docs.rs/owo-colors/latest/owo_colors/trait.OwoColorize.html \"trait owo_colors::OwoColorize\")| [`Style`](https://docs.rs/owo-colors/latest/owo_colors/struct.Style.html \"struct owo_colors::Style\")| [`StyledList`](https://docs.rs/owo-colors/latest/owo_colors/struct.StyledList.html \"struct owo_colors::StyledList\")| [`github`](https://github.com/owo-colors/owo-colors)  \n---|---|---|---|---  \nThis crate provides [`OwoColorize`](https://docs.rs/owo-colors/latest/owo_colors/trait.OwoColorize.html \"trait owo_colors::OwoColorize\"), an extension trait for colorizing a given type.\n### [\u00a7](https://docs.rs/owo-colors/latest/owo_colors/#example)Example\n```\nuse owo_colors::OwoColorize;\n// Foreground colors\nprintln!(\"My number is {:#x}!\", 10.green());\n// Background colors\nprintln!(\"My number is not {}!\", 4.on_red());\n```\n\n### [\u00a7](https://docs.rs/owo-colors/latest/owo_colors/#generically-color)Generically color\n```\nuse owo_colors::OwoColorize;\nuse owo_colors::colors::*;\n// Generically color\nprintln!(\"My number might be {}!\", 4.fg::<Black>().bg::<Yellow>());\n```\n\n### [\u00a7](https://docs.rs/owo-colors/latest/owo_colors/#stylize)Stylize\n```\nuse owo_colors::OwoColorize;\nprintln!(\"{}\", \"strikethrough\".strikethrough());\n```\n\n### [\u00a7](https://docs.rs/owo-colors/latest/owo_colors/#only-style-on-supported-terminals)Only Style on Supported Terminals\n```\nuse owo_colors::{OwoColorize, Stream::Stdout};\nprintln!(\n  \"{}\",\n  \"colored blue if a supported terminal\"\n    .if_supports_color(Stdout, |text| text.bright_blue())\n);\n```\n\nSupports `NO_COLOR`/`FORCE_COLOR` environment variables, checks if it\u2019s a tty, checks if it\u2019s running in CI (and thus likely supports color), and checks which terminal is being used. (Note: requires `supports-colors` feature)\n### [\u00a7](https://docs.rs/owo-colors/latest/owo_colors/#style-objects)Style Objects\nowo-colors also features the ability to create a [`Style`](https://docs.rs/owo-colors/latest/owo_colors/struct.Style.html \"struct owo_colors::Style\") object and use it to apply the same set of colors/effects to any number of things to display.\n```\nuse owo_colors::{OwoColorize, Style};\nlet my_style = Style::new()\n  .red()\n  .on_white()\n  .strikethrough();\nlet text = \"red text, white background, struck through\";\nprintln!(\"{}\", text.style(my_style));\n```\n\n## Modules[\u00a7](https://docs.rs/owo-colors/latest/owo_colors/#modules)\n\n[colored](https://docs.rs/owo-colors/latest/owo_colors/colored/index.html \"mod owo_colors::colored\")\n    Module for drop-in [`colored`](https://docs.rs/colored) support to aid in porting code from [`colored`](https://docs.rs/colored) to owo-colors.\n\n[colors](https://docs.rs/owo-colors/latest/owo_colors/colors/index.html \"mod owo_colors::colors\")\n    Color types for used for being generic over the color\n\n[styles](https://docs.rs/owo-colors/latest/owo_colors/styles/index.html \"mod owo_colors::styles\")\n    Different display styles (strikethrough, bold, etc.)\n## Structs[\u00a7](https://docs.rs/owo-colors/latest/owo_colors/#structs)\n\n[BgColorDisplay](https://docs.rs/owo-colors/latest/owo_colors/struct.BgColorDisplay.html \"struct owo_colors::BgColorDisplay\")\n    Transparent wrapper around a type which implements all the formatters the wrapped type does, with the addition of changing the background color. Recommended to be constructed using [`OwoColorize`](https://docs.rs/owo-colors/latest/owo_colors/trait.OwoColorize.html \"trait owo_colors::OwoColorize\").\n\n[BgDynColorDisplay](https://docs.rs/owo-colors/latest/owo_colors/struct.BgDynColorDisplay.html \"struct owo_colors::BgDynColorDisplay\")\n    Wrapper around a type which implements all the formatters the wrapped type does, with the addition of changing the background color. Is not recommended unless compile-time coloring is not an option.\n\n[ComboColorDisplay](https://docs.rs/owo-colors/latest/owo_colors/struct.ComboColorDisplay.html \"struct owo_colors::ComboColorDisplay\")\n    A wrapper type which applies both a foreground and background color\n\n[ComboDynColorDisplay](https://docs.rs/owo-colors/latest/owo_colors/struct.ComboDynColorDisplay.html \"struct owo_colors::ComboDynColorDisplay\")\n    Wrapper around a type which implements all the formatters the wrapped type does, with the addition of changing the foreground and background color.\n\n[FgColorDisplay](https://docs.rs/owo-colors/latest/owo_colors/struct.FgColorDisplay.html \"struct owo_colors::FgColorDisplay\")\n    Transparent wrapper around a type which implements all the formatters the wrapped type does, with the addition of changing the foreground color. Recommended to be constructed using [`OwoColorize`](https://docs.rs/owo-colors/latest/owo_colors/trait.OwoColorize.html \"trait owo_colors::OwoColorize\").\n\n[FgDynColorDisplay](https://docs.rs/owo-colors/latest/owo_colors/struct.FgDynColorDisplay.html \"struct owo_colors::FgDynColorDisplay\")\n    Wrapper around a type which implements all the formatters the wrapped type does, with the addition of changing the foreground color. Is not recommended unless compile-time coloring is not an option.\n\n[ParseColorError](https://docs.rs/owo-colors/latest/owo_colors/struct.ParseColorError.html \"struct owo_colors::ParseColorError\")\n    An error for when the color can not be parsed from a string at runtime\n\n[Rgb](https://docs.rs/owo-colors/latest/owo_colors/struct.Rgb.html \"struct owo_colors::Rgb\")\n    Available RGB colors for use with [`OwoColorize::color`](https://docs.rs/owo-colors/latest/owo_colors/trait.OwoColorize.html#method.color \"method owo_colors::OwoColorize::color\") or [`OwoColorize::on_color`](https://docs.rs/owo-colors/latest/owo_colors/trait.OwoColorize.html#method.on_color \"method owo_colors::OwoColorize::on_color\")\n\n[Style](https://docs.rs/owo-colors/latest/owo_colors/struct.Style.html \"struct owo_colors::Style\")\n    A pre-computed style that can be applied to a struct using [`OwoColorize::style`](https://docs.rs/owo-colors/latest/owo_colors/trait.OwoColorize.html#method.style \"method owo_colors::OwoColorize::style\").\n\n[StylePrefixFormatter](https://docs.rs/owo-colors/latest/owo_colors/struct.StylePrefixFormatter.html \"struct owo_colors::StylePrefixFormatter\")\n    Formatter for the prefix of a [`Style`](https://docs.rs/owo-colors/latest/owo_colors/struct.Style.html \"struct owo_colors::Style\").\n\n[StyleSuffixFormatter](https://docs.rs/owo-colors/latest/owo_colors/struct.StyleSuffixFormatter.html \"struct owo_colors::StyleSuffixFormatter\")\n    Formatter for the suffix of a [`Style`](https://docs.rs/owo-colors/latest/owo_colors/struct.Style.html \"struct owo_colors::Style\").\n\n[Styled](https://docs.rs/owo-colors/latest/owo_colors/struct.Styled.html \"struct owo_colors::Styled\")\n    A wrapper type which applies a [`Style`](https://docs.rs/owo-colors/latest/owo_colors/struct.Style.html \"struct owo_colors::Style\") when displaying the inner type\n\n[StyledList](https://docs.rs/owo-colors/latest/owo_colors/struct.StyledList.html \"struct owo_colors::StyledList\")\n    A collection of [`Styled`](https://docs.rs/owo-colors/latest/owo_colors/struct.Styled.html \"struct owo_colors::Styled\") items that are displayed in such a way as to minimize the amount of characters that are written when displayed.\n\n[SupportsColorsDisplay](https://docs.rs/owo-colors/latest/owo_colors/struct.SupportsColorsDisplay.html \"struct owo_colors::SupportsColorsDisplay\")`supports-colors`\n    A display wrapper which applies a transformation based on if the given stream supports colored terminal output\n## Enums[\u00a7](https://docs.rs/owo-colors/latest/owo_colors/#enums)\n\n[AnsiColors](https://docs.rs/owo-colors/latest/owo_colors/enum.AnsiColors.html \"enum owo_colors::AnsiColors\")\n    Available standard ANSI colors for use with [`OwoColorize::color`](https://docs.rs/owo-colors/latest/owo_colors/trait.OwoColorize.html#method.color \"method owo_colors::OwoColorize::color\") or [`OwoColorize::on_color`](https://docs.rs/owo-colors/latest/owo_colors/trait.OwoColorize.html#method.on_color \"method owo_colors::OwoColorize::on_color\")\n\n[CssColors](https://docs.rs/owo-colors/latest/owo_colors/enum.CssColors.html \"enum owo_colors::CssColors\")\n    Available CSS colors for use with [`OwoColorize::color`](https://docs.rs/owo-colors/latest/owo_colors/trait.OwoColorize.html#method.color \"method owo_colors::OwoColorize::color\") or [`OwoColorize::on_color`](https://docs.rs/owo-colors/latest/owo_colors/trait.OwoColorize.html#method.on_color \"method owo_colors::OwoColorize::on_color\")\n\n[DynColors](https://docs.rs/owo-colors/latest/owo_colors/enum.DynColors.html \"enum owo_colors::DynColors\")\n    An enum describing runtime-configurable colors\n\n[Effect](https://docs.rs/owo-colors/latest/owo_colors/enum.Effect.html \"enum owo_colors::Effect\")\n    A runtime-configurable text effect for use with [`Style`](https://docs.rs/owo-colors/latest/owo_colors/struct.Style.html \"struct owo_colors::Style\")\n\n[Stream](https://docs.rs/owo-colors/latest/owo_colors/enum.Stream.html \"enum owo_colors::Stream\")`supports-colors`\n    A possible stream source.\n\n[XtermColors](https://docs.rs/owo-colors/latest/owo_colors/enum.XtermColors.html \"enum owo_colors::XtermColors\")\n    Available Xterm colors for use with [`OwoColorize::color`](https://docs.rs/owo-colors/latest/owo_colors/trait.OwoColorize.html#method.color \"method owo_colors::OwoColorize::color\") or [`OwoColorize::on_color`](https://docs.rs/owo-colors/latest/owo_colors/trait.OwoColorize.html#method.on_color \"method owo_colors::OwoColorize::on_color\")\n## Traits[\u00a7](https://docs.rs/owo-colors/latest/owo_colors/#traits)\n\n[Color](https://docs.rs/owo-colors/latest/owo_colors/trait.Color.html \"trait owo_colors::Color\")\n    A trait for describing a type which can be used with [`FgColorDisplay`](https://docs.rs/owo-colors/latest/owo_colors/struct.FgColorDisplay.html \"struct owo_colors::FgColorDisplay\") or [`BgColorDisplay`](https://docs.rs/owo-colors/latest/owo_colors/struct.BgColorDisplay.html \"struct owo_colors::BgColorDisplay\")\n\n[DynColor](https://docs.rs/owo-colors/latest/owo_colors/trait.DynColor.html \"trait owo_colors::DynColor\")\n    A trait describing a runtime-configurable color which can displayed using [`FgDynColorDisplay`](https://docs.rs/owo-colors/latest/owo_colors/struct.FgDynColorDisplay.html \"struct owo_colors::FgDynColorDisplay\") or [`BgDynColorDisplay`](https://docs.rs/owo-colors/latest/owo_colors/struct.BgDynColorDisplay.html \"struct owo_colors::BgDynColorDisplay\"). If your color will be known at compile time it is recommended you avoid this.\n\n[OwoColorize](https://docs.rs/owo-colors/latest/owo_colors/trait.OwoColorize.html \"trait owo_colors::OwoColorize\")\n    Extension trait for colorizing a type which implements any std formatter ([`Display`](https://doc.rust-lang.org/nightly/core/fmt/trait.Display.html \"trait core::fmt::Display\"), [`Debug`](https://doc.rust-lang.org/nightly/core/fmt/trait.Debug.html \"trait core::fmt::Debug\"), [`UpperHex`](https://doc.rust-lang.org/nightly/core/fmt/trait.UpperHex.html \"trait core::fmt::UpperHex\"), etc.)\n## Functions[\u00a7](https://docs.rs/owo-colors/latest/owo_colors/#functions)\n\n[set_override](https://docs.rs/owo-colors/latest/owo_colors/fn.set_override.html \"fn owo_colors::set_override\")`supports-colors`\n    Set an override value for whether or not colors are supported.\n\n[style](https://docs.rs/owo-colors/latest/owo_colors/fn.style.html \"fn owo_colors::style\")\n    Helper to create [`Style`](https://docs.rs/owo-colors/latest/owo_colors/struct.Style.html \"struct owo_colors::Style\")s more ergonomically\n\n[unset_override](https://docs.rs/owo-colors/latest/owo_colors/fn.unset_override.html \"fn owo_colors::unset_override\")`supports-colors`\n    Remove any override value for whether or not colors are supported. This means [`if_supports_color`](https://docs.rs/owo-colors/latest/owo_colors/trait.OwoColorize.html#method.if_supports_color \"method owo_colors::OwoColorize::if_supports_color\") will resume checking if the given terminal output ([`Stream`](https://docs.rs/owo-colors/latest/owo_colors/enum.Stream.html \"enum owo_colors::Stream\")) supports colors.\n\n[with_override](https://docs.rs/owo-colors/latest/owo_colors/fn.with_override.html \"fn owo_colors::with_override\")`supports-colors`\n    Set an override value for whether or not colors are supported using [`set_override`](https://docs.rs/owo-colors/latest/owo_colors/fn.set_override.html \"fn owo_colors::set_override\") while executing the closure provided.\n## Type Aliases[\u00a7](https://docs.rs/owo-colors/latest/owo_colors/#types)\n\n[StyledVec](https://docs.rs/owo-colors/latest/owo_colors/type.StyledVec.html \"type owo_colors::StyledVec\")`alloc`\n    A helper alias for [`StyledList`](https://docs.rs/owo-colors/latest/owo_colors/struct.StyledList.html \"struct owo_colors::StyledList\") for easier usage with [`alloc::vec::Vec`](https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html \"struct alloc::vec::Vec\").\n",
            "markdown_with_citations": "[](https://docs.rs/owo-colors/latest/owo_colors/all.html \"show sidebar\")\n# Crate owo_colorsCopy item path\nSettings\u27e81\u27e9\nHelp\u27e82\u27e9\nSummarySource\u27e83\u27e9\nExpand description\n**Quick Links**| `OwoColorize`\u27e84\u27e9| `Style`\u27e85\u27e9| `StyledList`\u27e86\u27e9| `github`\u27e87\u27e9  \n---|---|---|---|---  \nThis crate provides `OwoColorize`\u27e84\u27e9, an extension trait for colorizing a given type.\n### \u00a7\u27e88\u27e9Example\n```\nuse owo_colors::OwoColorize;\n// Foreground colors\nprintln!(\"My number is {:#x}!\", 10.green());\n// Background colors\nprintln!(\"My number is not {}!\", 4.on_red());\n```\n\n### \u00a7\u27e89\u27e9Generically color\n```\nuse owo_colors::OwoColorize;\nuse owo_colors::colors::*;\n// Generically color\nprintln!(\"My number might be {}!\", 4.fg::<Black>().bg::<Yellow>());\n```\n\n### \u00a7\u27e810\u27e9Stylize\n```\nuse owo_colors::OwoColorize;\nprintln!(\"{}\", \"strikethrough\".strikethrough());\n```\n\n### \u00a7\u27e811\u27e9Only Style on Supported Terminals\n```\nuse owo_colors::{OwoColorize, Stream::Stdout};\nprintln!(\n  \"{}\",\n  \"colored blue if a supported terminal\"\n    .if_supports_color(Stdout, |text| text.bright_blue())\n);\n```\n\nSupports `NO_COLOR`/`FORCE_COLOR` environment variables, checks if it\u2019s a tty, checks if it\u2019s running in CI (and thus likely supports color), and checks which terminal is being used. (Note: requires `supports-colors` feature)\n### \u00a7\u27e812\u27e9Style Objects\nowo-colors also features the ability to create a `Style`\u27e85\u27e9 object and use it to apply the same set of colors/effects to any number of things to display.\n```\nuse owo_colors::{OwoColorize, Style};\nlet my_style = Style::new()\n  .red()\n  .on_white()\n  .strikethrough();\nlet text = \"red text, white background, struck through\";\nprintln!(\"{}\", text.style(my_style));\n```\n\n## Modules\u00a7\u27e813\u27e9\n\ncolored\u27e814\u27e9\n    Module for drop-in `colored`\u27e815\u27e9 support to aid in porting code from `colored`\u27e815\u27e9 to owo-colors.\n\ncolors\u27e816\u27e9\n    Color types for used for being generic over the color\n\nstyles\u27e817\u27e9\n    Different display styles (strikethrough, bold, etc.)\n## Structs\u00a7\u27e818\u27e9\n\nBgColorDisplay\u27e819\u27e9\n    Transparent wrapper around a type which implements all the formatters the wrapped type does, with the addition of changing the background color. Recommended to be constructed using `OwoColorize`\u27e84\u27e9.\n\nBgDynColorDisplay\u27e820\u27e9\n    Wrapper around a type which implements all the formatters the wrapped type does, with the addition of changing the background color. Is not recommended unless compile-time coloring is not an option.\n\nComboColorDisplay\u27e821\u27e9\n    A wrapper type which applies both a foreground and background color\n\nComboDynColorDisplay\u27e822\u27e9\n    Wrapper around a type which implements all the formatters the wrapped type does, with the addition of changing the foreground and background color.\n\nFgColorDisplay\u27e823\u27e9\n    Transparent wrapper around a type which implements all the formatters the wrapped type does, with the addition of changing the foreground color. Recommended to be constructed using `OwoColorize`\u27e84\u27e9.\n\nFgDynColorDisplay\u27e824\u27e9\n    Wrapper around a type which implements all the formatters the wrapped type does, with the addition of changing the foreground color. Is not recommended unless compile-time coloring is not an option.\n\nParseColorError\u27e825\u27e9\n    An error for when the color can not be parsed from a string at runtime\n\nRgb\u27e826\u27e9\n    Available RGB colors for use with `OwoColorize::color`\u27e827\u27e9 or `OwoColorize::on_color`\u27e828\u27e9\n\nStyle\u27e85\u27e9\n    A pre-computed style that can be applied to a struct using `OwoColorize::style`\u27e829\u27e9.\n\nStylePrefixFormatter\u27e830\u27e9\n    Formatter for the prefix of a `Style`\u27e85\u27e9.\n\nStyleSuffixFormatter\u27e831\u27e9\n    Formatter for the suffix of a `Style`\u27e85\u27e9.\n\nStyled\u27e832\u27e9\n    A wrapper type which applies a `Style`\u27e85\u27e9 when displaying the inner type\n\nStyledList\u27e86\u27e9\n    A collection of `Styled`\u27e832\u27e9 items that are displayed in such a way as to minimize the amount of characters that are written when displayed.\n\nSupportsColorsDisplay\u27e833\u27e9`supports-colors`\n    A display wrapper which applies a transformation based on if the given stream supports colored terminal output\n## Enums\u00a7\u27e834\u27e9\n\nAnsiColors\u27e835\u27e9\n    Available standard ANSI colors for use with `OwoColorize::color`\u27e827\u27e9 or `OwoColorize::on_color`\u27e828\u27e9\n\nCssColors\u27e836\u27e9\n    Available CSS colors for use with `OwoColorize::color`\u27e827\u27e9 or `OwoColorize::on_color`\u27e828\u27e9\n\nDynColors\u27e837\u27e9\n    An enum describing runtime-configurable colors\n\nEffect\u27e838\u27e9\n    A runtime-configurable text effect for use with `Style`\u27e85\u27e9\n\nStream\u27e839\u27e9`supports-colors`\n    A possible stream source.\n\nXtermColors\u27e840\u27e9\n    Available Xterm colors for use with `OwoColorize::color`\u27e827\u27e9 or `OwoColorize::on_color`\u27e828\u27e9\n## Traits\u00a7\u27e841\u27e9\n\nColor\u27e842\u27e9\n    A trait for describing a type which can be used with `FgColorDisplay`\u27e823\u27e9 or `BgColorDisplay`\u27e819\u27e9\n\nDynColor\u27e843\u27e9\n    A trait describing a runtime-configurable color which can displayed using `FgDynColorDisplay`\u27e824\u27e9 or `BgDynColorDisplay`\u27e820\u27e9. If your color will be known at compile time it is recommended you avoid this.\n\nOwoColorize\u27e84\u27e9\n    Extension trait for colorizing a type which implements any std formatter (`Display`\u27e844\u27e9, `Debug`\u27e845\u27e9, `UpperHex`\u27e846\u27e9, etc.)\n## Functions\u00a7\u27e847\u27e9\n\nset_override\u27e848\u27e9`supports-colors`\n    Set an override value for whether or not colors are supported.\n\nstyle\u27e849\u27e9\n    Helper to create `Style`\u27e85\u27e9s more ergonomically\n\nunset_override\u27e850\u27e9`supports-colors`\n    Remove any override value for whether or not colors are supported. This means `if_supports_color`\u27e851\u27e9 will resume checking if the given terminal output (`Stream`\u27e839\u27e9) supports colors.\n\nwith_override\u27e852\u27e9`supports-colors`\n    Set an override value for whether or not colors are supported using `set_override`\u27e848\u27e9 while executing the closure provided.\n## Type Aliases\u00a7\u27e853\u27e9\n\nStyledVec\u27e854\u27e9`alloc`\n    A helper alias for `StyledList`\u27e86\u27e9 for easier usage with `alloc::vec::Vec`\u27e855\u27e9.\n",
            "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://docs.rs/owo-colors/latest/settings.html: Settings\n\u27e82\u27e9 https://docs.rs/owo-colors/latest/help.html: Help\n\u27e83\u27e9 https://docs.rs/owo-colors/latest/src/owo_colors/lib.rs.html#1-544: Source\n\u27e84\u27e9 https://docs.rs/owo-colors/latest/owo_colors/trait.OwoColorize.html: trait owo_colors::OwoColorize - `OwoColorize`\n\u27e85\u27e9 https://docs.rs/owo-colors/latest/owo_colors/struct.Style.html: struct owo_colors::Style - `Style`\n\u27e86\u27e9 https://docs.rs/owo-colors/latest/owo_colors/struct.StyledList.html: struct owo_colors::StyledList - `StyledList`\n\u27e87\u27e9 https://github.com/owo-colors/owo-colors: `github`\n\u27e88\u27e9 https://docs.rs/owo-colors/latest/owo_colors/#example: \u00a7\n\u27e89\u27e9 https://docs.rs/owo-colors/latest/owo_colors/#generically-color: \u00a7\n\u27e810\u27e9 https://docs.rs/owo-colors/latest/owo_colors/#stylize: \u00a7\n\u27e811\u27e9 https://docs.rs/owo-colors/latest/owo_colors/#only-style-on-supported-terminals: \u00a7\n\u27e812\u27e9 https://docs.rs/owo-colors/latest/owo_colors/#style-objects: \u00a7\n\u27e813\u27e9 https://docs.rs/owo-colors/latest/owo_colors/#modules: \u00a7\n\u27e814\u27e9 https://docs.rs/owo-colors/latest/owo_colors/colored/index.html: mod owo_colors::colored - colored\n\u27e815\u27e9 https://docs.rs/colored: `colored`\n\u27e816\u27e9 https://docs.rs/owo-colors/latest/owo_colors/colors/index.html: mod owo_colors::colors - colors\n\u27e817\u27e9 https://docs.rs/owo-colors/latest/owo_colors/styles/index.html: mod owo_colors::styles - styles\n\u27e818\u27e9 https://docs.rs/owo-colors/latest/owo_colors/#structs: \u00a7\n\u27e819\u27e9 https://docs.rs/owo-colors/latest/owo_colors/struct.BgColorDisplay.html: struct owo_colors::BgColorDisplay - BgColorDisplay\n\u27e820\u27e9 https://docs.rs/owo-colors/latest/owo_colors/struct.BgDynColorDisplay.html: struct owo_colors::BgDynColorDisplay - BgDynColorDisplay\n\u27e821\u27e9 https://docs.rs/owo-colors/latest/owo_colors/struct.ComboColorDisplay.html: struct owo_colors::ComboColorDisplay - ComboColorDisplay\n\u27e822\u27e9 https://docs.rs/owo-colors/latest/owo_colors/struct.ComboDynColorDisplay.html: struct owo_colors::ComboDynColorDisplay - ComboDynColorDisplay\n\u27e823\u27e9 https://docs.rs/owo-colors/latest/owo_colors/struct.FgColorDisplay.html: struct owo_colors::FgColorDisplay - FgColorDisplay\n\u27e824\u27e9 https://docs.rs/owo-colors/latest/owo_colors/struct.FgDynColorDisplay.html: struct owo_colors::FgDynColorDisplay - FgDynColorDisplay\n\u27e825\u27e9 https://docs.rs/owo-colors/latest/owo_colors/struct.ParseColorError.html: struct owo_colors::ParseColorError - ParseColorError\n\u27e826\u27e9 https://docs.rs/owo-colors/latest/owo_colors/struct.Rgb.html: struct owo_colors::Rgb - Rgb\n\u27e827\u27e9 https://docs.rs/owo-colors/latest/owo_colors/trait.OwoColorize.html#method.color: method owo_colors::OwoColorize::color - `OwoColorize::color`\n\u27e828\u27e9 https://docs.rs/owo-colors/latest/owo_colors/trait.OwoColorize.html#method.on_color: method owo_colors::OwoColorize::on_color - `OwoColorize::on_color`\n\u27e829\u27e9 https://docs.rs/owo-colors/latest/owo_colors/trait.OwoColorize.html#method.style: method owo_colors::OwoColorize::style - `OwoColorize::style`\n\u27e830\u27e9 https://docs.rs/owo-colors/latest/owo_colors/struct.StylePrefixFormatter.html: struct owo_colors::StylePrefixFormatter - StylePrefixFormatter\n\u27e831\u27e9 https://docs.rs/owo-colors/latest/owo_colors/struct.StyleSuffixFormatter.html: struct owo_colors::StyleSuffixFormatter - StyleSuffixFormatter\n\u27e832\u27e9 https://docs.rs/owo-colors/latest/owo_colors/struct.Styled.html: struct owo_colors::Styled - Styled\n\u27e833\u27e9 https://docs.rs/owo-colors/latest/owo_colors/struct.SupportsColorsDisplay.html: struct owo_colors::SupportsColorsDisplay - SupportsColorsDisplay\n\u27e834\u27e9 https://docs.rs/owo-colors/latest/owo_colors/#enums: \u00a7\n\u27e835\u27e9 https://docs.rs/owo-colors/latest/owo_colors/enum.AnsiColors.html: enum owo_colors::AnsiColors - AnsiColors\n\u27e836\u27e9 https://docs.rs/owo-colors/latest/owo_colors/enum.CssColors.html: enum owo_colors::CssColors - CssColors\n\u27e837\u27e9 https://docs.rs/owo-colors/latest/owo_colors/enum.DynColors.html: enum owo_colors::DynColors - DynColors\n\u27e838\u27e9 https://docs.rs/owo-colors/latest/owo_colors/enum.Effect.html: enum owo_colors::Effect - Effect\n\u27e839\u27e9 https://docs.rs/owo-colors/latest/owo_colors/enum.Stream.html: enum owo_colors::Stream - Stream\n\u27e840\u27e9 https://docs.rs/owo-colors/latest/owo_colors/enum.XtermColors.html: enum owo_colors::XtermColors - XtermColors\n\u27e841\u27e9 https://docs.rs/owo-colors/latest/owo_colors/#traits: \u00a7\n\u27e842\u27e9 https://docs.rs/owo-colors/latest/owo_colors/trait.Color.html: trait owo_colors::Color - Color\n\u27e843\u27e9 https://docs.rs/owo-colors/latest/owo_colors/trait.DynColor.html: trait owo_colors::DynColor - DynColor\n\u27e844\u27e9 https://doc.rust-lang.org/nightly/core/fmt/trait.Display.html: trait core::fmt::Display - `Display`\n\u27e845\u27e9 https://doc.rust-lang.org/nightly/core/fmt/trait.Debug.html: trait core::fmt::Debug - `Debug`\n\u27e846\u27e9 https://doc.rust-lang.org/nightly/core/fmt/trait.UpperHex.html: trait core::fmt::UpperHex - `UpperHex`\n\u27e847\u27e9 https://docs.rs/owo-colors/latest/owo_colors/#functions: \u00a7\n\u27e848\u27e9 https://docs.rs/owo-colors/latest/owo_colors/fn.set_override.html: fn owo_colors::set_override - set_override\n\u27e849\u27e9 https://docs.rs/owo-colors/latest/owo_colors/fn.style.html: fn owo_colors::style - style\n\u27e850\u27e9 https://docs.rs/owo-colors/latest/owo_colors/fn.unset_override.html: fn owo_colors::unset_override - unset_override\n\u27e851\u27e9 https://docs.rs/owo-colors/latest/owo_colors/trait.OwoColorize.html#method.if_supports_color: method owo_colors::OwoColorize::if_supports_color - `if_supports_color`\n\u27e852\u27e9 https://docs.rs/owo-colors/latest/owo_colors/fn.with_override.html: fn owo_colors::with_override - with_override\n\u27e853\u27e9 https://docs.rs/owo-colors/latest/owo_colors/#types: \u00a7\n\u27e854\u27e9 https://docs.rs/owo-colors/latest/owo_colors/type.StyledVec.html: type owo_colors::StyledVec - StyledVec\n\u27e855\u27e9 https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html: struct alloc::vec::Vec - `alloc::vec::Vec`\n",
            "fit_markdown": "",
            "fit_html": ""
          },
          "downloads": 0,
          "github_stars": 0,
          "dependencies": [],
          "features": {},
          "code_snippets": [],
          "readme_sections": {},
          "librs_downloads": null,
          "source": "crates.io",
          "enhanced_scraping": {},
          "enhanced_features": [],
          "enhanced_dependencies": []
        },
        "enriched_crate": {
          "name": "owo-colors",
          "version": "4.2.2",
          "description": "ALLOW: Positive community sentiment",
          "repository": "",
          "keywords": [],
          "categories": [],
          "readme": {
            "raw_markdown": "[](https://docs.rs/owo-colors/latest/owo_colors/all.html \"show sidebar\")\n# Crate owo_colorsCopy item path\n[Settings](https://docs.rs/owo-colors/latest/settings.html)\n[Help](https://docs.rs/owo-colors/latest/help.html)\nSummary[Source](https://docs.rs/owo-colors/latest/src/owo_colors/lib.rs.html#1-544)\nExpand description\n**Quick Links**| [`OwoColorize`](https://docs.rs/owo-colors/latest/owo_colors/trait.OwoColorize.html \"trait owo_colors::OwoColorize\")| [`Style`](https://docs.rs/owo-colors/latest/owo_colors/struct.Style.html \"struct owo_colors::Style\")| [`StyledList`](https://docs.rs/owo-colors/latest/owo_colors/struct.StyledList.html \"struct owo_colors::StyledList\")| [`github`](https://github.com/owo-colors/owo-colors)  \n---|---|---|---|---  \nThis crate provides [`OwoColorize`](https://docs.rs/owo-colors/latest/owo_colors/trait.OwoColorize.html \"trait owo_colors::OwoColorize\"), an extension trait for colorizing a given type.\n### [\u00a7](https://docs.rs/owo-colors/latest/owo_colors/#example)Example\n```\nuse owo_colors::OwoColorize;\n// Foreground colors\nprintln!(\"My number is {:#x}!\", 10.green());\n// Background colors\nprintln!(\"My number is not {}!\", 4.on_red());\n```\n\n### [\u00a7](https://docs.rs/owo-colors/latest/owo_colors/#generically-color)Generically color\n```\nuse owo_colors::OwoColorize;\nuse owo_colors::colors::*;\n// Generically color\nprintln!(\"My number might be {}!\", 4.fg::<Black>().bg::<Yellow>());\n```\n\n### [\u00a7](https://docs.rs/owo-colors/latest/owo_colors/#stylize)Stylize\n```\nuse owo_colors::OwoColorize;\nprintln!(\"{}\", \"strikethrough\".strikethrough());\n```\n\n### [\u00a7](https://docs.rs/owo-colors/latest/owo_colors/#only-style-on-supported-terminals)Only Style on Supported Terminals\n```\nuse owo_colors::{OwoColorize, Stream::Stdout};\nprintln!(\n  \"{}\",\n  \"colored blue if a supported terminal\"\n    .if_supports_color(Stdout, |text| text.bright_blue())\n);\n```\n\nSupports `NO_COLOR`/`FORCE_COLOR` environment variables, checks if it\u2019s a tty, checks if it\u2019s running in CI (and thus likely supports color), and checks which terminal is being used. (Note: requires `supports-colors` feature)\n### [\u00a7](https://docs.rs/owo-colors/latest/owo_colors/#style-objects)Style Objects\nowo-colors also features the ability to create a [`Style`](https://docs.rs/owo-colors/latest/owo_colors/struct.Style.html \"struct owo_colors::Style\") object and use it to apply the same set of colors/effects to any number of things to display.\n```\nuse owo_colors::{OwoColorize, Style};\nlet my_style = Style::new()\n  .red()\n  .on_white()\n  .strikethrough();\nlet text = \"red text, white background, struck through\";\nprintln!(\"{}\", text.style(my_style));\n```\n\n## Modules[\u00a7](https://docs.rs/owo-colors/latest/owo_colors/#modules)\n\n[colored](https://docs.rs/owo-colors/latest/owo_colors/colored/index.html \"mod owo_colors::colored\")\n    Module for drop-in [`colored`](https://docs.rs/colored) support to aid in porting code from [`colored`](https://docs.rs/colored) to owo-colors.\n\n[colors](https://docs.rs/owo-colors/latest/owo_colors/colors/index.html \"mod owo_colors::colors\")\n    Color types for used for being generic over the color\n\n[styles](https://docs.rs/owo-colors/latest/owo_colors/styles/index.html \"mod owo_colors::styles\")\n    Different display styles (strikethrough, bold, etc.)\n## Structs[\u00a7](https://docs.rs/owo-colors/latest/owo_colors/#structs)\n\n[BgColorDisplay](https://docs.rs/owo-colors/latest/owo_colors/struct.BgColorDisplay.html \"struct owo_colors::BgColorDisplay\")\n    Transparent wrapper around a type which implements all the formatters the wrapped type does, with the addition of changing the background color. Recommended to be constructed using [`OwoColorize`](https://docs.rs/owo-colors/latest/owo_colors/trait.OwoColorize.html \"trait owo_colors::OwoColorize\").\n\n[BgDynColorDisplay](https://docs.rs/owo-colors/latest/owo_colors/struct.BgDynColorDisplay.html \"struct owo_colors::BgDynColorDisplay\")\n    Wrapper around a type which implements all the formatters the wrapped type does, with the addition of changing the background color. Is not recommended unless compile-time coloring is not an option.\n\n[ComboColorDisplay](https://docs.rs/owo-colors/latest/owo_colors/struct.ComboColorDisplay.html \"struct owo_colors::ComboColorDisplay\")\n    A wrapper type which applies both a foreground and background color\n\n[ComboDynColorDisplay](https://docs.rs/owo-colors/latest/owo_colors/struct.ComboDynColorDisplay.html \"struct owo_colors::ComboDynColorDisplay\")\n    Wrapper around a type which implements all the formatters the wrapped type does, with the addition of changing the foreground and background color.\n\n[FgColorDisplay](https://docs.rs/owo-colors/latest/owo_colors/struct.FgColorDisplay.html \"struct owo_colors::FgColorDisplay\")\n    Transparent wrapper around a type which implements all the formatters the wrapped type does, with the addition of changing the foreground color. Recommended to be constructed using [`OwoColorize`](https://docs.rs/owo-colors/latest/owo_colors/trait.OwoColorize.html \"trait owo_colors::OwoColorize\").\n\n[FgDynColorDisplay](https://docs.rs/owo-colors/latest/owo_colors/struct.FgDynColorDisplay.html \"struct owo_colors::FgDynColorDisplay\")\n    Wrapper around a type which implements all the formatters the wrapped type does, with the addition of changing the foreground color. Is not recommended unless compile-time coloring is not an option.\n\n[ParseColorError](https://docs.rs/owo-colors/latest/owo_colors/struct.ParseColorError.html \"struct owo_colors::ParseColorError\")\n    An error for when the color can not be parsed from a string at runtime\n\n[Rgb](https://docs.rs/owo-colors/latest/owo_colors/struct.Rgb.html \"struct owo_colors::Rgb\")\n    Available RGB colors for use with [`OwoColorize::color`](https://docs.rs/owo-colors/latest/owo_colors/trait.OwoColorize.html#method.color \"method owo_colors::OwoColorize::color\") or [`OwoColorize::on_color`](https://docs.rs/owo-colors/latest/owo_colors/trait.OwoColorize.html#method.on_color \"method owo_colors::OwoColorize::on_color\")\n\n[Style](https://docs.rs/owo-colors/latest/owo_colors/struct.Style.html \"struct owo_colors::Style\")\n    A pre-computed style that can be applied to a struct using [`OwoColorize::style`](https://docs.rs/owo-colors/latest/owo_colors/trait.OwoColorize.html#method.style \"method owo_colors::OwoColorize::style\").\n\n[StylePrefixFormatter](https://docs.rs/owo-colors/latest/owo_colors/struct.StylePrefixFormatter.html \"struct owo_colors::StylePrefixFormatter\")\n    Formatter for the prefix of a [`Style`](https://docs.rs/owo-colors/latest/owo_colors/struct.Style.html \"struct owo_colors::Style\").\n\n[StyleSuffixFormatter](https://docs.rs/owo-colors/latest/owo_colors/struct.StyleSuffixFormatter.html \"struct owo_colors::StyleSuffixFormatter\")\n    Formatter for the suffix of a [`Style`](https://docs.rs/owo-colors/latest/owo_colors/struct.Style.html \"struct owo_colors::Style\").\n\n[Styled](https://docs.rs/owo-colors/latest/owo_colors/struct.Styled.html \"struct owo_colors::Styled\")\n    A wrapper type which applies a [`Style`](https://docs.rs/owo-colors/latest/owo_colors/struct.Style.html \"struct owo_colors::Style\") when displaying the inner type\n\n[StyledList](https://docs.rs/owo-colors/latest/owo_colors/struct.StyledList.html \"struct owo_colors::StyledList\")\n    A collection of [`Styled`](https://docs.rs/owo-colors/latest/owo_colors/struct.Styled.html \"struct owo_colors::Styled\") items that are displayed in such a way as to minimize the amount of characters that are written when displayed.\n\n[SupportsColorsDisplay](https://docs.rs/owo-colors/latest/owo_colors/struct.SupportsColorsDisplay.html \"struct owo_colors::SupportsColorsDisplay\")`supports-colors`\n    A display wrapper which applies a transformation based on if the given stream supports colored terminal output\n## Enums[\u00a7](https://docs.rs/owo-colors/latest/owo_colors/#enums)\n\n[AnsiColors](https://docs.rs/owo-colors/latest/owo_colors/enum.AnsiColors.html \"enum owo_colors::AnsiColors\")\n    Available standard ANSI colors for use with [`OwoColorize::color`](https://docs.rs/owo-colors/latest/owo_colors/trait.OwoColorize.html#method.color \"method owo_colors::OwoColorize::color\") or [`OwoColorize::on_color`](https://docs.rs/owo-colors/latest/owo_colors/trait.OwoColorize.html#method.on_color \"method owo_colors::OwoColorize::on_color\")\n\n[CssColors](https://docs.rs/owo-colors/latest/owo_colors/enum.CssColors.html \"enum owo_colors::CssColors\")\n    Available CSS colors for use with [`OwoColorize::color`](https://docs.rs/owo-colors/latest/owo_colors/trait.OwoColorize.html#method.color \"method owo_colors::OwoColorize::color\") or [`OwoColorize::on_color`](https://docs.rs/owo-colors/latest/owo_colors/trait.OwoColorize.html#method.on_color \"method owo_colors::OwoColorize::on_color\")\n\n[DynColors](https://docs.rs/owo-colors/latest/owo_colors/enum.DynColors.html \"enum owo_colors::DynColors\")\n    An enum describing runtime-configurable colors\n\n[Effect](https://docs.rs/owo-colors/latest/owo_colors/enum.Effect.html \"enum owo_colors::Effect\")\n    A runtime-configurable text effect for use with [`Style`](https://docs.rs/owo-colors/latest/owo_colors/struct.Style.html \"struct owo_colors::Style\")\n\n[Stream](https://docs.rs/owo-colors/latest/owo_colors/enum.Stream.html \"enum owo_colors::Stream\")`supports-colors`\n    A possible stream source.\n\n[XtermColors](https://docs.rs/owo-colors/latest/owo_colors/enum.XtermColors.html \"enum owo_colors::XtermColors\")\n    Available Xterm colors for use with [`OwoColorize::color`](https://docs.rs/owo-colors/latest/owo_colors/trait.OwoColorize.html#method.color \"method owo_colors::OwoColorize::color\") or [`OwoColorize::on_color`](https://docs.rs/owo-colors/latest/owo_colors/trait.OwoColorize.html#method.on_color \"method owo_colors::OwoColorize::on_color\")\n## Traits[\u00a7](https://docs.rs/owo-colors/latest/owo_colors/#traits)\n\n[Color](https://docs.rs/owo-colors/latest/owo_colors/trait.Color.html \"trait owo_colors::Color\")\n    A trait for describing a type which can be used with [`FgColorDisplay`](https://docs.rs/owo-colors/latest/owo_colors/struct.FgColorDisplay.html \"struct owo_colors::FgColorDisplay\") or [`BgColorDisplay`](https://docs.rs/owo-colors/latest/owo_colors/struct.BgColorDisplay.html \"struct owo_colors::BgColorDisplay\")\n\n[DynColor](https://docs.rs/owo-colors/latest/owo_colors/trait.DynColor.html \"trait owo_colors::DynColor\")\n    A trait describing a runtime-configurable color which can displayed using [`FgDynColorDisplay`](https://docs.rs/owo-colors/latest/owo_colors/struct.FgDynColorDisplay.html \"struct owo_colors::FgDynColorDisplay\") or [`BgDynColorDisplay`](https://docs.rs/owo-colors/latest/owo_colors/struct.BgDynColorDisplay.html \"struct owo_colors::BgDynColorDisplay\"). If your color will be known at compile time it is recommended you avoid this.\n\n[OwoColorize](https://docs.rs/owo-colors/latest/owo_colors/trait.OwoColorize.html \"trait owo_colors::OwoColorize\")\n    Extension trait for colorizing a type which implements any std formatter ([`Display`](https://doc.rust-lang.org/nightly/core/fmt/trait.Display.html \"trait core::fmt::Display\"), [`Debug`](https://doc.rust-lang.org/nightly/core/fmt/trait.Debug.html \"trait core::fmt::Debug\"), [`UpperHex`](https://doc.rust-lang.org/nightly/core/fmt/trait.UpperHex.html \"trait core::fmt::UpperHex\"), etc.)\n## Functions[\u00a7](https://docs.rs/owo-colors/latest/owo_colors/#functions)\n\n[set_override](https://docs.rs/owo-colors/latest/owo_colors/fn.set_override.html \"fn owo_colors::set_override\")`supports-colors`\n    Set an override value for whether or not colors are supported.\n\n[style](https://docs.rs/owo-colors/latest/owo_colors/fn.style.html \"fn owo_colors::style\")\n    Helper to create [`Style`](https://docs.rs/owo-colors/latest/owo_colors/struct.Style.html \"struct owo_colors::Style\")s more ergonomically\n\n[unset_override](https://docs.rs/owo-colors/latest/owo_colors/fn.unset_override.html \"fn owo_colors::unset_override\")`supports-colors`\n    Remove any override value for whether or not colors are supported. This means [`if_supports_color`](https://docs.rs/owo-colors/latest/owo_colors/trait.OwoColorize.html#method.if_supports_color \"method owo_colors::OwoColorize::if_supports_color\") will resume checking if the given terminal output ([`Stream`](https://docs.rs/owo-colors/latest/owo_colors/enum.Stream.html \"enum owo_colors::Stream\")) supports colors.\n\n[with_override](https://docs.rs/owo-colors/latest/owo_colors/fn.with_override.html \"fn owo_colors::with_override\")`supports-colors`\n    Set an override value for whether or not colors are supported using [`set_override`](https://docs.rs/owo-colors/latest/owo_colors/fn.set_override.html \"fn owo_colors::set_override\") while executing the closure provided.\n## Type Aliases[\u00a7](https://docs.rs/owo-colors/latest/owo_colors/#types)\n\n[StyledVec](https://docs.rs/owo-colors/latest/owo_colors/type.StyledVec.html \"type owo_colors::StyledVec\")`alloc`\n    A helper alias for [`StyledList`](https://docs.rs/owo-colors/latest/owo_colors/struct.StyledList.html \"struct owo_colors::StyledList\") for easier usage with [`alloc::vec::Vec`](https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html \"struct alloc::vec::Vec\").\n",
            "markdown_with_citations": "[](https://docs.rs/owo-colors/latest/owo_colors/all.html \"show sidebar\")\n# Crate owo_colorsCopy item path\nSettings\u27e81\u27e9\nHelp\u27e82\u27e9\nSummarySource\u27e83\u27e9\nExpand description\n**Quick Links**| `OwoColorize`\u27e84\u27e9| `Style`\u27e85\u27e9| `StyledList`\u27e86\u27e9| `github`\u27e87\u27e9  \n---|---|---|---|---  \nThis crate provides `OwoColorize`\u27e84\u27e9, an extension trait for colorizing a given type.\n### \u00a7\u27e88\u27e9Example\n```\nuse owo_colors::OwoColorize;\n// Foreground colors\nprintln!(\"My number is {:#x}!\", 10.green());\n// Background colors\nprintln!(\"My number is not {}!\", 4.on_red());\n```\n\n### \u00a7\u27e89\u27e9Generically color\n```\nuse owo_colors::OwoColorize;\nuse owo_colors::colors::*;\n// Generically color\nprintln!(\"My number might be {}!\", 4.fg::<Black>().bg::<Yellow>());\n```\n\n### \u00a7\u27e810\u27e9Stylize\n```\nuse owo_colors::OwoColorize;\nprintln!(\"{}\", \"strikethrough\".strikethrough());\n```\n\n### \u00a7\u27e811\u27e9Only Style on Supported Terminals\n```\nuse owo_colors::{OwoColorize, Stream::Stdout};\nprintln!(\n  \"{}\",\n  \"colored blue if a supported terminal\"\n    .if_supports_color(Stdout, |text| text.bright_blue())\n);\n```\n\nSupports `NO_COLOR`/`FORCE_COLOR` environment variables, checks if it\u2019s a tty, checks if it\u2019s running in CI (and thus likely supports color), and checks which terminal is being used. (Note: requires `supports-colors` feature)\n### \u00a7\u27e812\u27e9Style Objects\nowo-colors also features the ability to create a `Style`\u27e85\u27e9 object and use it to apply the same set of colors/effects to any number of things to display.\n```\nuse owo_colors::{OwoColorize, Style};\nlet my_style = Style::new()\n  .red()\n  .on_white()\n  .strikethrough();\nlet text = \"red text, white background, struck through\";\nprintln!(\"{}\", text.style(my_style));\n```\n\n## Modules\u00a7\u27e813\u27e9\n\ncolored\u27e814\u27e9\n    Module for drop-in `colored`\u27e815\u27e9 support to aid in porting code from `colored`\u27e815\u27e9 to owo-colors.\n\ncolors\u27e816\u27e9\n    Color types for used for being generic over the color\n\nstyles\u27e817\u27e9\n    Different display styles (strikethrough, bold, etc.)\n## Structs\u00a7\u27e818\u27e9\n\nBgColorDisplay\u27e819\u27e9\n    Transparent wrapper around a type which implements all the formatters the wrapped type does, with the addition of changing the background color. Recommended to be constructed using `OwoColorize`\u27e84\u27e9.\n\nBgDynColorDisplay\u27e820\u27e9\n    Wrapper around a type which implements all the formatters the wrapped type does, with the addition of changing the background color. Is not recommended unless compile-time coloring is not an option.\n\nComboColorDisplay\u27e821\u27e9\n    A wrapper type which applies both a foreground and background color\n\nComboDynColorDisplay\u27e822\u27e9\n    Wrapper around a type which implements all the formatters the wrapped type does, with the addition of changing the foreground and background color.\n\nFgColorDisplay\u27e823\u27e9\n    Transparent wrapper around a type which implements all the formatters the wrapped type does, with the addition of changing the foreground color. Recommended to be constructed using `OwoColorize`\u27e84\u27e9.\n\nFgDynColorDisplay\u27e824\u27e9\n    Wrapper around a type which implements all the formatters the wrapped type does, with the addition of changing the foreground color. Is not recommended unless compile-time coloring is not an option.\n\nParseColorError\u27e825\u27e9\n    An error for when the color can not be parsed from a string at runtime\n\nRgb\u27e826\u27e9\n    Available RGB colors for use with `OwoColorize::color`\u27e827\u27e9 or `OwoColorize::on_color`\u27e828\u27e9\n\nStyle\u27e85\u27e9\n    A pre-computed style that can be applied to a struct using `OwoColorize::style`\u27e829\u27e9.\n\nStylePrefixFormatter\u27e830\u27e9\n    Formatter for the prefix of a `Style`\u27e85\u27e9.\n\nStyleSuffixFormatter\u27e831\u27e9\n    Formatter for the suffix of a `Style`\u27e85\u27e9.\n\nStyled\u27e832\u27e9\n    A wrapper type which applies a `Style`\u27e85\u27e9 when displaying the inner type\n\nStyledList\u27e86\u27e9\n    A collection of `Styled`\u27e832\u27e9 items that are displayed in such a way as to minimize the amount of characters that are written when displayed.\n\nSupportsColorsDisplay\u27e833\u27e9`supports-colors`\n    A display wrapper which applies a transformation based on if the given stream supports colored terminal output\n## Enums\u00a7\u27e834\u27e9\n\nAnsiColors\u27e835\u27e9\n    Available standard ANSI colors for use with `OwoColorize::color`\u27e827\u27e9 or `OwoColorize::on_color`\u27e828\u27e9\n\nCssColors\u27e836\u27e9\n    Available CSS colors for use with `OwoColorize::color`\u27e827\u27e9 or `OwoColorize::on_color`\u27e828\u27e9\n\nDynColors\u27e837\u27e9\n    An enum describing runtime-configurable colors\n\nEffect\u27e838\u27e9\n    A runtime-configurable text effect for use with `Style`\u27e85\u27e9\n\nStream\u27e839\u27e9`supports-colors`\n    A possible stream source.\n\nXtermColors\u27e840\u27e9\n    Available Xterm colors for use with `OwoColorize::color`\u27e827\u27e9 or `OwoColorize::on_color`\u27e828\u27e9\n## Traits\u00a7\u27e841\u27e9\n\nColor\u27e842\u27e9\n    A trait for describing a type which can be used with `FgColorDisplay`\u27e823\u27e9 or `BgColorDisplay`\u27e819\u27e9\n\nDynColor\u27e843\u27e9\n    A trait describing a runtime-configurable color which can displayed using `FgDynColorDisplay`\u27e824\u27e9 or `BgDynColorDisplay`\u27e820\u27e9. If your color will be known at compile time it is recommended you avoid this.\n\nOwoColorize\u27e84\u27e9\n    Extension trait for colorizing a type which implements any std formatter (`Display`\u27e844\u27e9, `Debug`\u27e845\u27e9, `UpperHex`\u27e846\u27e9, etc.)\n## Functions\u00a7\u27e847\u27e9\n\nset_override\u27e848\u27e9`supports-colors`\n    Set an override value for whether or not colors are supported.\n\nstyle\u27e849\u27e9\n    Helper to create `Style`\u27e85\u27e9s more ergonomically\n\nunset_override\u27e850\u27e9`supports-colors`\n    Remove any override value for whether or not colors are supported. This means `if_supports_color`\u27e851\u27e9 will resume checking if the given terminal output (`Stream`\u27e839\u27e9) supports colors.\n\nwith_override\u27e852\u27e9`supports-colors`\n    Set an override value for whether or not colors are supported using `set_override`\u27e848\u27e9 while executing the closure provided.\n## Type Aliases\u00a7\u27e853\u27e9\n\nStyledVec\u27e854\u27e9`alloc`\n    A helper alias for `StyledList`\u27e86\u27e9 for easier usage with `alloc::vec::Vec`\u27e855\u27e9.\n",
            "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://docs.rs/owo-colors/latest/settings.html: Settings\n\u27e82\u27e9 https://docs.rs/owo-colors/latest/help.html: Help\n\u27e83\u27e9 https://docs.rs/owo-colors/latest/src/owo_colors/lib.rs.html#1-544: Source\n\u27e84\u27e9 https://docs.rs/owo-colors/latest/owo_colors/trait.OwoColorize.html: trait owo_colors::OwoColorize - `OwoColorize`\n\u27e85\u27e9 https://docs.rs/owo-colors/latest/owo_colors/struct.Style.html: struct owo_colors::Style - `Style`\n\u27e86\u27e9 https://docs.rs/owo-colors/latest/owo_colors/struct.StyledList.html: struct owo_colors::StyledList - `StyledList`\n\u27e87\u27e9 https://github.com/owo-colors/owo-colors: `github`\n\u27e88\u27e9 https://docs.rs/owo-colors/latest/owo_colors/#example: \u00a7\n\u27e89\u27e9 https://docs.rs/owo-colors/latest/owo_colors/#generically-color: \u00a7\n\u27e810\u27e9 https://docs.rs/owo-colors/latest/owo_colors/#stylize: \u00a7\n\u27e811\u27e9 https://docs.rs/owo-colors/latest/owo_colors/#only-style-on-supported-terminals: \u00a7\n\u27e812\u27e9 https://docs.rs/owo-colors/latest/owo_colors/#style-objects: \u00a7\n\u27e813\u27e9 https://docs.rs/owo-colors/latest/owo_colors/#modules: \u00a7\n\u27e814\u27e9 https://docs.rs/owo-colors/latest/owo_colors/colored/index.html: mod owo_colors::colored - colored\n\u27e815\u27e9 https://docs.rs/colored: `colored`\n\u27e816\u27e9 https://docs.rs/owo-colors/latest/owo_colors/colors/index.html: mod owo_colors::colors - colors\n\u27e817\u27e9 https://docs.rs/owo-colors/latest/owo_colors/styles/index.html: mod owo_colors::styles - styles\n\u27e818\u27e9 https://docs.rs/owo-colors/latest/owo_colors/#structs: \u00a7\n\u27e819\u27e9 https://docs.rs/owo-colors/latest/owo_colors/struct.BgColorDisplay.html: struct owo_colors::BgColorDisplay - BgColorDisplay\n\u27e820\u27e9 https://docs.rs/owo-colors/latest/owo_colors/struct.BgDynColorDisplay.html: struct owo_colors::BgDynColorDisplay - BgDynColorDisplay\n\u27e821\u27e9 https://docs.rs/owo-colors/latest/owo_colors/struct.ComboColorDisplay.html: struct owo_colors::ComboColorDisplay - ComboColorDisplay\n\u27e822\u27e9 https://docs.rs/owo-colors/latest/owo_colors/struct.ComboDynColorDisplay.html: struct owo_colors::ComboDynColorDisplay - ComboDynColorDisplay\n\u27e823\u27e9 https://docs.rs/owo-colors/latest/owo_colors/struct.FgColorDisplay.html: struct owo_colors::FgColorDisplay - FgColorDisplay\n\u27e824\u27e9 https://docs.rs/owo-colors/latest/owo_colors/struct.FgDynColorDisplay.html: struct owo_colors::FgDynColorDisplay - FgDynColorDisplay\n\u27e825\u27e9 https://docs.rs/owo-colors/latest/owo_colors/struct.ParseColorError.html: struct owo_colors::ParseColorError - ParseColorError\n\u27e826\u27e9 https://docs.rs/owo-colors/latest/owo_colors/struct.Rgb.html: struct owo_colors::Rgb - Rgb\n\u27e827\u27e9 https://docs.rs/owo-colors/latest/owo_colors/trait.OwoColorize.html#method.color: method owo_colors::OwoColorize::color - `OwoColorize::color`\n\u27e828\u27e9 https://docs.rs/owo-colors/latest/owo_colors/trait.OwoColorize.html#method.on_color: method owo_colors::OwoColorize::on_color - `OwoColorize::on_color`\n\u27e829\u27e9 https://docs.rs/owo-colors/latest/owo_colors/trait.OwoColorize.html#method.style: method owo_colors::OwoColorize::style - `OwoColorize::style`\n\u27e830\u27e9 https://docs.rs/owo-colors/latest/owo_colors/struct.StylePrefixFormatter.html: struct owo_colors::StylePrefixFormatter - StylePrefixFormatter\n\u27e831\u27e9 https://docs.rs/owo-colors/latest/owo_colors/struct.StyleSuffixFormatter.html: struct owo_colors::StyleSuffixFormatter - StyleSuffixFormatter\n\u27e832\u27e9 https://docs.rs/owo-colors/latest/owo_colors/struct.Styled.html: struct owo_colors::Styled - Styled\n\u27e833\u27e9 https://docs.rs/owo-colors/latest/owo_colors/struct.SupportsColorsDisplay.html: struct owo_colors::SupportsColorsDisplay - SupportsColorsDisplay\n\u27e834\u27e9 https://docs.rs/owo-colors/latest/owo_colors/#enums: \u00a7\n\u27e835\u27e9 https://docs.rs/owo-colors/latest/owo_colors/enum.AnsiColors.html: enum owo_colors::AnsiColors - AnsiColors\n\u27e836\u27e9 https://docs.rs/owo-colors/latest/owo_colors/enum.CssColors.html: enum owo_colors::CssColors - CssColors\n\u27e837\u27e9 https://docs.rs/owo-colors/latest/owo_colors/enum.DynColors.html: enum owo_colors::DynColors - DynColors\n\u27e838\u27e9 https://docs.rs/owo-colors/latest/owo_colors/enum.Effect.html: enum owo_colors::Effect - Effect\n\u27e839\u27e9 https://docs.rs/owo-colors/latest/owo_colors/enum.Stream.html: enum owo_colors::Stream - Stream\n\u27e840\u27e9 https://docs.rs/owo-colors/latest/owo_colors/enum.XtermColors.html: enum owo_colors::XtermColors - XtermColors\n\u27e841\u27e9 https://docs.rs/owo-colors/latest/owo_colors/#traits: \u00a7\n\u27e842\u27e9 https://docs.rs/owo-colors/latest/owo_colors/trait.Color.html: trait owo_colors::Color - Color\n\u27e843\u27e9 https://docs.rs/owo-colors/latest/owo_colors/trait.DynColor.html: trait owo_colors::DynColor - DynColor\n\u27e844\u27e9 https://doc.rust-lang.org/nightly/core/fmt/trait.Display.html: trait core::fmt::Display - `Display`\n\u27e845\u27e9 https://doc.rust-lang.org/nightly/core/fmt/trait.Debug.html: trait core::fmt::Debug - `Debug`\n\u27e846\u27e9 https://doc.rust-lang.org/nightly/core/fmt/trait.UpperHex.html: trait core::fmt::UpperHex - `UpperHex`\n\u27e847\u27e9 https://docs.rs/owo-colors/latest/owo_colors/#functions: \u00a7\n\u27e848\u27e9 https://docs.rs/owo-colors/latest/owo_colors/fn.set_override.html: fn owo_colors::set_override - set_override\n\u27e849\u27e9 https://docs.rs/owo-colors/latest/owo_colors/fn.style.html: fn owo_colors::style - style\n\u27e850\u27e9 https://docs.rs/owo-colors/latest/owo_colors/fn.unset_override.html: fn owo_colors::unset_override - unset_override\n\u27e851\u27e9 https://docs.rs/owo-colors/latest/owo_colors/trait.OwoColorize.html#method.if_supports_color: method owo_colors::OwoColorize::if_supports_color - `if_supports_color`\n\u27e852\u27e9 https://docs.rs/owo-colors/latest/owo_colors/fn.with_override.html: fn owo_colors::with_override - with_override\n\u27e853\u27e9 https://docs.rs/owo-colors/latest/owo_colors/#types: \u00a7\n\u27e854\u27e9 https://docs.rs/owo-colors/latest/owo_colors/type.StyledVec.html: type owo_colors::StyledVec - StyledVec\n\u27e855\u27e9 https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html: struct alloc::vec::Vec - `alloc::vec::Vec`\n",
            "fit_markdown": "",
            "fit_html": ""
          },
          "downloads": 0,
          "github_stars": 0,
          "dependencies": [],
          "features": {},
          "code_snippets": [],
          "readme_sections": {},
          "librs_downloads": null,
          "source": "crates.io",
          "enhanced_scraping": {},
          "enhanced_features": [],
          "enhanced_dependencies": [],
          "readme_summary": "The `owo-colors` crate provides an ergonomic and lightweight way to add text styling and colorization to terminal output in Rust. It features the `OwoColorize` trait for applying foreground and background colors, text styles (e.g., bold, strikethrough), and supports conditional styling based on terminal capabilities (`NO_COLOR`, `FORCE_COLOR`, TTY checks). Additionally, it offers reusable `Style` objects for consistent styling and compatibility with the `colored` crate for easy migration.",
          "feature_summary": null,
          "use_case": "Utilities",
          "score": 7.0,
          "factual_counterfactual": "### Pair 1: Colorization Features  \n\u2705 Factual: The `owo-colors` crate allows users to apply both foreground and background colors to text using the `OwoColorize` trait, such as `println!(\"{}\", \"Hello\".green().on_red());`.  \n\u274c Counterfactual: The `owo-colors` crate only supports foreground colorization and does not provide functionality for background colors.  \n\n---\n\n### Pair 2: Terminal Compatibility  \n\u2705 Factual: The crate includes functionality to check if the terminal supports color output, and it respects the `NO_COLOR` and `FORCE_COLOR` environment variables to control colorization behavior.  \n\u274c Counterfactual: The crate assumes all terminals support color output and does not provide mechanisms to disable colorization based on terminal capabilities or environment variables.  \n\n---\n\n### Pair 3: Style Objects  \n\u2705 Factual: The `owo-colors` crate allows users to create reusable `Style` objects that can combine multiple effects, such as color, background, and text formatting (e.g., `strikethrough`).  \n\u274c Counterfactual: The `owo-colors` crate requires users to apply individual color and style effects directly to text and does not support reusable style objects.",
          "source_analysis": null,
          "user_behavior": null,
          "security": null
        }
      },
      "irl_score": 8.6,
      "execution_id": "exec-121268c9-2bcca3c7-1751260352",
      "timestamp": "2025-06-30T05:12:32.765404+00:00",
      "canon_version": "1.3.0"
    },
    "rule_zero_compliant": true
  }
]