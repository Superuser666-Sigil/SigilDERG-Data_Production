[
  {
    "execution_id": "exec-bf0a9022-0bc3907d-1751258996",
    "timestamp": "2025-06-30T04:49:56.206875+00:00",
    "sacred_chain": {
      "input_data": "toml",
      "context_sources": [
        "crates.io",
        "github.com",
        "lib.rs",
        "docs.rs"
      ],
      "reasoning_steps": [
        "Input canonicalized: 'toml' -> 'toml'",
        "Context gathered from 4 validated sources",
        "Metadata extracted: 4 fields",
        "Documentation analyzed: quality 7.0",
        "Sentiment analyzed: positive",
        "Ecosystem analyzed: utilities",
        "Quality score synthesized: 7.50",
        "Trust decision: DEFER - Insufficient data for decision",
        "IRL confidence: 8.600"
      ],
      "suggestion": "ALLOW: Positive community sentiment",
      "verdict": "DEFER",
      "audit_info": {
        "metadata": {
          "name": "toml",
          "type": "rust_crate",
          "source": "manual_input",
          "extraction_method": "irl_engine"
        },
        "sentiment": {
          "quality_score": 7.0,
          "completeness": 0.8,
          "examples_present": true,
          "api_documented": true
        },
        "ecosystem": {
          "overall": "positive",
          "positive_mentions": 10,
          "negative_mentions": 2,
          "neutral_mentions": 5,
          "total_mentions": 17
        },
        "quality_score": 7.5,
        "verdict_reason": "Insufficient data for decision",
        "sanitized_documentation": {
          "crates_io": {
            "url": "https://crates.io/crates/toml",
            "title": "toml v0.8.23",
            "content": {
              "raw_markdown": "#  toml v0.8.23\nA native Rust encoder and decoder of TOML-formatted files and streams. Provides implementations of the standard Serialize/Deserialize traits for TOML data to facilitate deserializing and serializing Rust structures. \n  * [ #encoding ](https://crates.io/keywords/encoding)\n  * [ #toml ](https://crates.io/keywords/toml)\n\n\n  * [ Readme ](https://crates.io/crates/toml)\n  * [ 92 Versions ](https://crates.io/crates/toml/versions)\n  * [ Dependencies ](https://crates.io/crates/toml/dependencies)\n  * [ Dependents ](https://crates.io/crates/toml/reverse_dependencies)\n\n\n## Metadata\n24 days ago \nv1.66.0 \n[ MIT ](https://choosealicense.com/licenses/mit) OR [ Apache-2.0 ](https://choosealicense.com/licenses/apache-2.0)\n35.2 KiB \n## Install\nRun the following Cargo command in your project directory:\ncargo add toml\nOr add the following line to your Cargo.toml:\ntoml = \"0.8.23\"\n## Repository\n[ github.com/toml-rs/toml ](https://github.com/toml-rs/toml)\n## Owners\n## Categories\n  * [Encoding](https://crates.io/categories/encoding)\n  * [Parser implementations](https://crates.io/categories/parser-implementations)\n  * [Parsing tools](https://crates.io/categories/parsing)\n  * [Configuration](https://crates.io/categories/config)\n\n\n[ Report crate ](https://crates.io/support?crate=toml&inquire=crate-violation)\n### Stats Overview\n327,039,333 Downloads all time\n92 Versions published\n#### Downloads over the last 90 days\nDisplay as \nStacked \n  * Stacked \n  * Unstacked \n\n\nLoading\u2026\n",
              "markdown_with_citations": "#  toml v0.8.23\nA native Rust encoder and decoder of TOML-formatted files and streams. Provides implementations of the standard Serialize/Deserialize traits for TOML data to facilitate deserializing and serializing Rust structures. \n  *  #encoding \u27e81\u27e9\n  *  #toml \u27e82\u27e9\n\n\n  *  Readme \u27e83\u27e9\n  *  92 Versions \u27e84\u27e9\n  *  Dependencies \u27e85\u27e9\n  *  Dependents \u27e86\u27e9\n\n\n## Metadata\n24 days ago \nv1.66.0 \n MIT \u27e87\u27e9 OR  Apache-2.0 \u27e88\u27e9\n35.2 KiB \n## Install\nRun the following Cargo command in your project directory:\ncargo add toml\nOr add the following line to your Cargo.toml:\ntoml = \"0.8.23\"\n## Repository\n github.com/toml-rs/toml \u27e89\u27e9\n## Owners\n## Categories\n  * Encoding\u27e810\u27e9\n  * Parser implementations\u27e811\u27e9\n  * Parsing tools\u27e812\u27e9\n  * Configuration\u27e813\u27e9\n\n\n Report crate \u27e814\u27e9\n### Stats Overview\n327,039,333 Downloads all time\n92 Versions published\n#### Downloads over the last 90 days\nDisplay as \nStacked \n  * Stacked \n  * Unstacked \n\n\nLoading\u2026\n",
              "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://crates.io/keywords/encoding:  #encoding \n\u27e82\u27e9 https://crates.io/keywords/toml:  #toml \n\u27e83\u27e9 https://crates.io/crates/toml:  Readme \n\u27e84\u27e9 https://crates.io/crates/toml/versions:  92 Versions \n\u27e85\u27e9 https://crates.io/crates/toml/dependencies:  Dependencies \n\u27e86\u27e9 https://crates.io/crates/toml/reverse_dependencies:  Dependents \n\u27e87\u27e9 https://choosealicense.com/licenses/mit:  MIT \n\u27e88\u27e9 https://choosealicense.com/licenses/apache-2.0:  Apache-2.0 \n\u27e89\u27e9 https://github.com/toml-rs/toml:  github.com/toml-rs/toml \n\u27e810\u27e9 https://crates.io/categories/encoding: Encoding\n\u27e811\u27e9 https://crates.io/categories/parser-implementations: Parser implementations\n\u27e812\u27e9 https://crates.io/categories/parsing: Parsing tools\n\u27e813\u27e9 https://crates.io/categories/config: Configuration\n\u27e814\u27e9 https://crates.io/support?crate=toml&inquire=crate-violation:  Report crate \n",
              "fit_markdown": "",
              "fit_html": ""
            },
            "structured_data": {},
            "quality_score": 3.0,
            "extraction_method": "crawl4ai",
            "error": null,
            "metadata": {
              "doc_type": "docs",
              "content_length": 1487,
              "has_structured_data": false,
              "crawl_success": true
            },
            "timestamp": "112786.1663789"
          },
          "docs_rs": {
            "url": "https://docs.rs/toml",
            "title": "Crate tomlCopy item path",
            "content": {
              "raw_markdown": "[](https://docs.rs/toml/latest/toml/all.html \"show sidebar\")\n# Crate tomlCopy item path\n[Settings](https://docs.rs/toml/latest/settings.html)\n[Help](https://docs.rs/toml/latest/help.html)\nSummary[Source](https://docs.rs/toml/latest/src/toml/lib.rs.html#1-185)\nExpand description\nA [serde](https://serde.rs/)-compatible [TOML](https://github.com/toml-lang/toml)-parsing library\nTOML itself is a simple, ergonomic, and readable configuration format:\n```\n[package]\nname = \"toml\"\n[dependencies]\nserde = \"1.0\"\n```\n\nThe TOML format tends to be relatively common throughout the Rust community for configuration, notably being used by [Cargo](https://crates.io/), Rust\u2019s package manager.\n### [\u00a7](https://docs.rs/toml/latest/toml/#toml-values)TOML values\nA TOML document is represented with the [`Table`](https://docs.rs/toml/latest/toml/type.Table.html \"type toml::Table\") type which maps `String` to the [`Value`](https://docs.rs/toml/latest/toml/enum.Value.html \"enum toml::Value\") enum:\n```\npub enum Value {\n  String(String),\n  Integer(i64),\n  Float(f64),\n  Boolean(bool),\n  Datetime(Datetime),\n  Array(Array),\n  Table(Table),\n}\n```\n\n### [\u00a7](https://docs.rs/toml/latest/toml/#parsing-toml)Parsing TOML\nThe easiest way to parse a TOML document is via the [`Table`](https://docs.rs/toml/latest/toml/type.Table.html \"type toml::Table\") type:\n```\nuse toml::Table;\nlet value = \"foo = 'bar'\".parse::<Table>().unwrap();\nassert_eq!(value[\"foo\"].as_str(), Some(\"bar\"));\n```\n\nThe [`Table`](https://docs.rs/toml/latest/toml/type.Table.html \"type toml::Table\") type implements a number of convenience methods and traits; the example above uses [`FromStr`](https://doc.rust-lang.org/nightly/core/str/traits/trait.FromStr.html \"trait core::str::traits::FromStr\") to parse a [`str`](https://doc.rust-lang.org/nightly/std/primitive.str.html \"primitive str\") into a [`Table`](https://docs.rs/toml/latest/toml/type.Table.html \"type toml::Table\").\n### [\u00a7](https://docs.rs/toml/latest/toml/#deserialization-and-serialization)Deserialization and Serialization\nThis crate supports [`serde`](https://serde.rs/) 1.0 with a number of implementations of the `Deserialize`, `Serialize`, `Deserializer`, and `Serializer` traits. Namely, you\u2019ll find:\n  * `Deserialize for Table`\n  * `Serialize for Table`\n  * `Deserialize for Value`\n  * `Serialize for Value`\n  * `Deserialize for Datetime`\n  * `Serialize for Datetime`\n  * `Deserializer for de::Deserializer`\n  * `Serializer for ser::Serializer`\n  * `Deserializer for Table`\n  * `Deserializer for Value`\n\n\nThis means that you can use Serde to deserialize/serialize the [`Table`](https://docs.rs/toml/latest/toml/type.Table.html \"type toml::Table\") type as well as [`Value`](https://docs.rs/toml/latest/toml/enum.Value.html \"enum toml::Value\") and [`Datetime`](https://docs.rs/toml/latest/toml/value/struct.Datetime.html \"struct toml::value::Datetime\") type in this crate. You can also use the [`Deserializer`](https://docs.rs/toml/latest/toml/struct.Deserializer.html \"struct toml::Deserializer\"), [`Serializer`](https://docs.rs/toml/latest/toml/struct.Serializer.html \"struct toml::Serializer\"), or [`Table`](https://docs.rs/toml/latest/toml/type.Table.html \"type toml::Table\") type itself to act as a deserializer/serializer for arbitrary types.\nAn example of deserializing with TOML is:\n```\nuse serde::Deserialize;\n#[derive(Deserialize)]\nstruct Config {\n  ip: String,\n  port: Option<u16>,\n  keys: Keys,\n}\n#[derive(Deserialize)]\nstruct Keys {\n  github: String,\n  travis: Option<String>,\n}\nlet config: Config = toml::from_str(r#\"\n  ip = '127.0.0.1'\n  [keys]\n  github = 'xxxxxxxxxxxxxxxxx'\n  travis = 'yyyyyyyyyyyyyyyyy'\n\"#).unwrap();\nassert_eq!(config.ip, \"127.0.0.1\");\nassert_eq!(config.port, None);\nassert_eq!(config.keys.github, \"xxxxxxxxxxxxxxxxx\");\nassert_eq!(config.keys.travis.as_ref().unwrap(), \"yyyyyyyyyyyyyyyyy\");\n```\n\nYou can serialize types in a similar fashion:\n```\nuse serde::Serialize;\n#[derive(Serialize)]\nstruct Config {\n  ip: String,\n  port: Option<u16>,\n  keys: Keys,\n}\n#[derive(Serialize)]\nstruct Keys {\n  github: String,\n  travis: Option<String>,\n}\nlet config = Config {\n  ip: \"127.0.0.1\".to_string(),\n  port: None,\n  keys: Keys {\n    github: \"xxxxxxxxxxxxxxxxx\".to_string(),\n    travis: Some(\"yyyyyyyyyyyyyyyyy\".to_string()),\n  },\n};\nlet toml = toml::to_string(&config).unwrap();\n```\n\n## Modules[\u00a7](https://docs.rs/toml/latest/toml/#modules)\n\n[de](https://docs.rs/toml/latest/toml/de/index.html \"mod toml::de\")\n    Deserializing TOML into Rust structures.\n\n[map](https://docs.rs/toml/latest/toml/map/index.html \"mod toml::map\")\n    A map of `String` to [Value](https://docs.rs/toml/latest/toml/enum.Value.html \"enum toml::Value\").\n\n[ser](https://docs.rs/toml/latest/toml/ser/index.html \"mod toml::ser\")\n    Serializing Rust structures into TOML.\n\n[value](https://docs.rs/toml/latest/toml/value/index.html \"mod toml::value\")\n    Definition of a TOML [value](https://docs.rs/toml/latest/toml/enum.Value.html \"enum toml::Value\")\n## Macros[\u00a7](https://docs.rs/toml/latest/toml/#macros)\n\n[toml](https://docs.rs/toml/latest/toml/macro.toml.html \"macro toml::toml\")\n    Construct a [`Table`](https://docs.rs/toml/latest/toml/type.Table.html \"type toml::Table\") from TOML syntax.\n## Structs[\u00a7](https://docs.rs/toml/latest/toml/#structs)\n\n[Deserializer](https://docs.rs/toml/latest/toml/struct.Deserializer.html \"struct toml::Deserializer\")`parse`\n    Deserialization TOML document\n\n[Serializer](https://docs.rs/toml/latest/toml/struct.Serializer.html \"struct toml::Serializer\")`display`\n    Serialization for TOML documents.\n\n[Spanned](https://docs.rs/toml/latest/toml/struct.Spanned.html \"struct toml::Spanned\")\n    A spanned value, indicating the range at which it is defined in the source.\n## Enums[\u00a7](https://docs.rs/toml/latest/toml/#enums)\n\n[Value](https://docs.rs/toml/latest/toml/enum.Value.html \"enum toml::Value\")\n    Representation of a TOML value.\n## Functions[\u00a7](https://docs.rs/toml/latest/toml/#functions)\n\n[from_str](https://docs.rs/toml/latest/toml/fn.from_str.html \"fn toml::from_str\")`parse`\n    Deserializes a string into a type.\n\n[to_string](https://docs.rs/toml/latest/toml/fn.to_string.html \"fn toml::to_string\")`display`\n    Serialize the given data structure as a String of TOML.\n\n[to_string_pretty](https://docs.rs/toml/latest/toml/fn.to_string_pretty.html \"fn toml::to_string_pretty\")`display`\n    Serialize the given data structure as a \u201cpretty\u201d String of TOML.\n## Type Aliases[\u00a7](https://docs.rs/toml/latest/toml/#types)\n\n[Table](https://docs.rs/toml/latest/toml/type.Table.html \"type toml::Table\")\n    Type representing a TOML table, payload of the `Value::Table` variant.\n",
              "markdown_with_citations": "[](https://docs.rs/toml/latest/toml/all.html \"show sidebar\")\n# Crate tomlCopy item path\nSettings\u27e81\u27e9\nHelp\u27e82\u27e9\nSummarySource\u27e83\u27e9\nExpand description\nA serde\u27e84\u27e9-compatible TOML\u27e85\u27e9-parsing library\nTOML itself is a simple, ergonomic, and readable configuration format:\n```\n[package]\nname = \"toml\"\n[dependencies]\nserde = \"1.0\"\n```\n\nThe TOML format tends to be relatively common throughout the Rust community for configuration, notably being used by Cargo\u27e86\u27e9, Rust\u2019s package manager.\n### \u00a7\u27e87\u27e9TOML values\nA TOML document is represented with the `Table`\u27e88\u27e9 type which maps `String` to the `Value`\u27e89\u27e9 enum:\n```\npub enum Value {\n  String(String),\n  Integer(i64),\n  Float(f64),\n  Boolean(bool),\n  Datetime(Datetime),\n  Array(Array),\n  Table(Table),\n}\n```\n\n### \u00a7\u27e810\u27e9Parsing TOML\nThe easiest way to parse a TOML document is via the `Table`\u27e88\u27e9 type:\n```\nuse toml::Table;\nlet value = \"foo = 'bar'\".parse::<Table>().unwrap();\nassert_eq!(value[\"foo\"].as_str(), Some(\"bar\"));\n```\n\nThe `Table`\u27e88\u27e9 type implements a number of convenience methods and traits; the example above uses `FromStr`\u27e811\u27e9 to parse a `str`\u27e812\u27e9 into a `Table`\u27e88\u27e9.\n### \u00a7\u27e813\u27e9Deserialization and Serialization\nThis crate supports `serde`\u27e84\u27e9 1.0 with a number of implementations of the `Deserialize`, `Serialize`, `Deserializer`, and `Serializer` traits. Namely, you\u2019ll find:\n  * `Deserialize for Table`\n  * `Serialize for Table`\n  * `Deserialize for Value`\n  * `Serialize for Value`\n  * `Deserialize for Datetime`\n  * `Serialize for Datetime`\n  * `Deserializer for de::Deserializer`\n  * `Serializer for ser::Serializer`\n  * `Deserializer for Table`\n  * `Deserializer for Value`\n\n\nThis means that you can use Serde to deserialize/serialize the `Table`\u27e88\u27e9 type as well as `Value`\u27e89\u27e9 and `Datetime`\u27e814\u27e9 type in this crate. You can also use the `Deserializer`\u27e815\u27e9, `Serializer`\u27e816\u27e9, or `Table`\u27e88\u27e9 type itself to act as a deserializer/serializer for arbitrary types.\nAn example of deserializing with TOML is:\n```\nuse serde::Deserialize;\n#[derive(Deserialize)]\nstruct Config {\n  ip: String,\n  port: Option<u16>,\n  keys: Keys,\n}\n#[derive(Deserialize)]\nstruct Keys {\n  github: String,\n  travis: Option<String>,\n}\nlet config: Config = toml::from_str(r#\"\n  ip = '127.0.0.1'\n  [keys]\n  github = 'xxxxxxxxxxxxxxxxx'\n  travis = 'yyyyyyyyyyyyyyyyy'\n\"#).unwrap();\nassert_eq!(config.ip, \"127.0.0.1\");\nassert_eq!(config.port, None);\nassert_eq!(config.keys.github, \"xxxxxxxxxxxxxxxxx\");\nassert_eq!(config.keys.travis.as_ref().unwrap(), \"yyyyyyyyyyyyyyyyy\");\n```\n\nYou can serialize types in a similar fashion:\n```\nuse serde::Serialize;\n#[derive(Serialize)]\nstruct Config {\n  ip: String,\n  port: Option<u16>,\n  keys: Keys,\n}\n#[derive(Serialize)]\nstruct Keys {\n  github: String,\n  travis: Option<String>,\n}\nlet config = Config {\n  ip: \"127.0.0.1\".to_string(),\n  port: None,\n  keys: Keys {\n    github: \"xxxxxxxxxxxxxxxxx\".to_string(),\n    travis: Some(\"yyyyyyyyyyyyyyyyy\".to_string()),\n  },\n};\nlet toml = toml::to_string(&config).unwrap();\n```\n\n## Modules\u00a7\u27e817\u27e9\n\nde\u27e818\u27e9\n    Deserializing TOML into Rust structures.\n\nmap\u27e819\u27e9\n    A map of `String` to Value\u27e89\u27e9.\n\nser\u27e820\u27e9\n    Serializing Rust structures into TOML.\n\nvalue\u27e821\u27e9\n    Definition of a TOML value\u27e89\u27e9\n## Macros\u00a7\u27e822\u27e9\n\ntoml\u27e823\u27e9\n    Construct a `Table`\u27e88\u27e9 from TOML syntax.\n## Structs\u00a7\u27e824\u27e9\n\nDeserializer\u27e815\u27e9`parse`\n    Deserialization TOML document\n\nSerializer\u27e816\u27e9`display`\n    Serialization for TOML documents.\n\nSpanned\u27e825\u27e9\n    A spanned value, indicating the range at which it is defined in the source.\n## Enums\u00a7\u27e826\u27e9\n\nValue\u27e89\u27e9\n    Representation of a TOML value.\n## Functions\u00a7\u27e827\u27e9\n\nfrom_str\u27e828\u27e9`parse`\n    Deserializes a string into a type.\n\nto_string\u27e829\u27e9`display`\n    Serialize the given data structure as a String of TOML.\n\nto_string_pretty\u27e830\u27e9`display`\n    Serialize the given data structure as a \u201cpretty\u201d String of TOML.\n## Type Aliases\u00a7\u27e831\u27e9\n\nTable\u27e88\u27e9\n    Type representing a TOML table, payload of the `Value::Table` variant.\n",
              "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://docs.rs/toml/latest/settings.html: Settings\n\u27e82\u27e9 https://docs.rs/toml/latest/help.html: Help\n\u27e83\u27e9 https://docs.rs/toml/latest/src/toml/lib.rs.html#1-185: Source\n\u27e84\u27e9 https://serde.rs/: serde\n\u27e85\u27e9 https://github.com/toml-lang/toml: TOML\n\u27e86\u27e9 https://crates.io/: Cargo\n\u27e87\u27e9 https://docs.rs/toml/latest/toml/#toml-values: \u00a7\n\u27e88\u27e9 https://docs.rs/toml/latest/toml/type.Table.html: type toml::Table - `Table`\n\u27e89\u27e9 https://docs.rs/toml/latest/toml/enum.Value.html: enum toml::Value - `Value`\n\u27e810\u27e9 https://docs.rs/toml/latest/toml/#parsing-toml: \u00a7\n\u27e811\u27e9 https://doc.rust-lang.org/nightly/core/str/traits/trait.FromStr.html: trait core::str::traits::FromStr - `FromStr`\n\u27e812\u27e9 https://doc.rust-lang.org/nightly/std/primitive.str.html: primitive str - `str`\n\u27e813\u27e9 https://docs.rs/toml/latest/toml/#deserialization-and-serialization: \u00a7\n\u27e814\u27e9 https://docs.rs/toml/latest/toml/value/struct.Datetime.html: struct toml::value::Datetime - `Datetime`\n\u27e815\u27e9 https://docs.rs/toml/latest/toml/struct.Deserializer.html: struct toml::Deserializer - `Deserializer`\n\u27e816\u27e9 https://docs.rs/toml/latest/toml/struct.Serializer.html: struct toml::Serializer - `Serializer`\n\u27e817\u27e9 https://docs.rs/toml/latest/toml/#modules: \u00a7\n\u27e818\u27e9 https://docs.rs/toml/latest/toml/de/index.html: mod toml::de - de\n\u27e819\u27e9 https://docs.rs/toml/latest/toml/map/index.html: mod toml::map - map\n\u27e820\u27e9 https://docs.rs/toml/latest/toml/ser/index.html: mod toml::ser - ser\n\u27e821\u27e9 https://docs.rs/toml/latest/toml/value/index.html: mod toml::value - value\n\u27e822\u27e9 https://docs.rs/toml/latest/toml/#macros: \u00a7\n\u27e823\u27e9 https://docs.rs/toml/latest/toml/macro.toml.html: macro toml::toml - toml\n\u27e824\u27e9 https://docs.rs/toml/latest/toml/#structs: \u00a7\n\u27e825\u27e9 https://docs.rs/toml/latest/toml/struct.Spanned.html: struct toml::Spanned - Spanned\n\u27e826\u27e9 https://docs.rs/toml/latest/toml/#enums: \u00a7\n\u27e827\u27e9 https://docs.rs/toml/latest/toml/#functions: \u00a7\n\u27e828\u27e9 https://docs.rs/toml/latest/toml/fn.from_str.html: fn toml::from_str - from_str\n\u27e829\u27e9 https://docs.rs/toml/latest/toml/fn.to_string.html: fn toml::to_string - to_string\n\u27e830\u27e9 https://docs.rs/toml/latest/toml/fn.to_string_pretty.html: fn toml::to_string_pretty - to_string_pretty\n\u27e831\u27e9 https://docs.rs/toml/latest/toml/#types: \u00a7\n",
              "fit_markdown": "",
              "fit_html": ""
            },
            "structured_data": {},
            "quality_score": 4.0,
            "extraction_method": "crawl4ai",
            "error": null,
            "metadata": {
              "doc_type": "docs",
              "content_length": 6634,
              "has_structured_data": false,
              "crawl_success": true
            },
            "timestamp": "112786.6822421"
          },
          "lib_rs": {
            "url": "https://lib.rs/crates/toml",
            "title": "Untitled",
            "content": {
              "raw_markdown": "###  [89 releases](https://lib.rs/crates/toml/versions)\n0.8.23 |  Jun 6, 2025   \n---|---  \n0.8.20 |  Feb 5, 2025   \n0.8.19 |  Jul 31, 2024   \n0.8.12 |  Mar 18, 2024   \n0.1.3 |  Nov 22, 2014   \n#**10** in [Parser implementations](https://lib.rs/parser-implementations \"Parsers implemented for particular formats or languages.\")\nDownload history 3804533/week @ 2025-03-08 3912234/week @ 2025-03-15 4125711/week @ 2025-03-22 3544345/week @ 2025-03-29 3641183/week @ 2025-04-05 3291108/week @ 2025-04-12 3294390/week @ 2025-04-19 3288116/week @ 2025-04-26 3369204/week @ 2025-05-03 3462659/week @ 2025-05-10 3513816/week @ 2025-05-17 3116006/week @ 2025-05-24 3281426/week @ 2025-05-31 3570459/week @ 2025-06-07 3685153/week @ 2025-06-14 3907562/week @ 2025-06-21\n**15,004,501** downloads per month Used in [**21,442** crates (6,250 directly)](https://lib.rs/crates/toml/rev)\n**MIT/Apache**\n280KB  6K  SLoC\n# toml\n[![Latest Version](https://img.shields.io/crates/v/toml.svg)](https://crates.io/crates/toml) [![Documentation](https://img.gs/czjpqfbdkz/full/https://docs.rs/toml/badge.svg)](https://docs.rs/toml)\nA [serde](https://serde.rs/)-compatible [TOML](https://github.com/toml-lang/toml) decoder and encoder for Rust.\nFor format-preserving editing or finer control over output, see [toml_edit](https://docs.rs/toml_edit)\n## License\nLicensed under either of\n  * Apache License, Version 2.0, ([LICENSE-APACHE](https://github.com/toml-rs/toml/blob/838a0223142a2137b530e020cb7231aba46f7946/crates/toml/LICENSE-APACHE) or <http://www.apache.org/licenses/LICENSE-2.0>)\n  * MIT license ([LICENSE-MIT](https://github.com/toml-rs/toml/blob/838a0223142a2137b530e020cb7231aba46f7946/crates/toml/LICENSE-MIT) or <http://opensource.org/licenses/MIT>)\n\n\nat your option.\n### Contribution\nUnless you explicitly state otherwise, any contribution intentionally submitted for inclusion in the work by you, as defined in the Apache-2.0 license, shall be dual-licensed as above, without any additional terms or conditions.\n###  [`lib.rs`](https://docs.rs/toml): \nA [serde](https://serde.rs/)-compatible [TOML](https://github.com/toml-lang/toml)-parsing library\nTOML itself is a simple, ergonomic, and readable configuration format:\n```\n```[``package``]`\n`name ``=` ``\"`toml`\"``\n```[``dependencies``]`\n`serde ``=` ``\"`1.0`\"``\n``\n```\n\nThe TOML format tends to be relatively common throughout the Rust community for configuration, notably being used by [Cargo](https://crates.io/), Rust's package manager.\n## TOML values\nA TOML document is represented with the [``Table``](https://lib.rs/Table \"`Table`\") type which maps ```String``` to the [``Value``](https://lib.rs/Value \"`Value`\") enum:\n```\n```pub` `enum` `Value` ``{`\n  `String``(``String``)``,`\n  Integer`(``i64``)``,`\n  Float`(``f64``)``,`\n  Boolean`(``bool``)``,`\n  Datetime`(`Datetime`)``,`\n  Array`(`Array`)``,`\n  Table`(`Table`)``,`\n```}```\n`\n```\n\n## Parsing TOML\nThe easiest way to parse a TOML document is via the [``Table``](https://lib.rs/Table \"`Table`\") type:\n```\n``use` `toml`::``Table`;`\n`let` value `=` ``\"`foo = 'bar'`\"```.``parse`::````<`Table`>```(``)``.``unwrap``(``)``;`\n`assert_eq!``(`value`[```\"`foo`\"```]``.``as_str``(``)``,` `Some``(```\"`bar`\"```)``)``;`\n`\n```\n\nThe [``Table``](https://lib.rs/Table \"`Table`\") type implements a number of convenience methods and traits; the example above uses [``FromStr``](https://docs.rs/toml/latest/toml/?search=FromStr \"`FromStr`\") to parse a [```str```] into a [``Table``](https://lib.rs/Table \"`Table`\").\n## Deserialization and Serialization\nThis crate supports [``serde``](https://serde.rs/) 1.0 with a number of implementations of the ``Deserialize``, ``Serialize``, ``Deserializer``, and ``Serializer`` traits. Namely, you'll find:\n  * ``Deserialize `for` Table``\n  * ``Serialize `for` Table``\n  * ``Deserialize `for` Value``\n  * ``Serialize `for` Value``\n  * ``Deserialize `for` Datetime``\n  * ``Serialize `for` Datetime``\n  * ``Deserializer `for` `de`::``Deserializer``\n  * ``Serializer `for` `ser`::``Serializer``\n  * ``Deserializer `for` Table``\n  * ``Deserializer `for` Value``\n\n\nThis means that you can use Serde to deserialize/serialize the [``Table``](https://lib.rs/Table \"`Table`\") type as well as [``Value``](https://lib.rs/Value \"`Value`\") and [``Datetime``](https://lib.rs/Datetime \"`Datetime`\") type in this crate. You can also use the [``Deserializer``](https://docs.rs/toml/latest/toml/?search=Deserializer \"`Deserializer`\"), [``Serializer``](https://lib.rs/Serializer \"`Serializer`\"), or [``Table``](https://lib.rs/Table \"`Table`\") type itself to act as a deserializer/serializer for arbitrary types.\nAn example of deserializing with TOML is:\n```\n``use` `serde`::``Deserialize`;`\n``#``[``derive```(```Deserialize```)```]``\n``struct` ```Config` ````{`\n  `ip``:` String,\n  `port``:` ``Option``<``u16``>``,\n  `keys``:` Keys,\n```}```\n``#``[``derive```(```Deserialize```)```]``\n``struct` ```Keys` ````{`\n  `github``:` String,\n  `travis``:` ``Option``<``String``>``,\n```}```\n`let` config`:` Config `=` `toml`::``from_str`(```r``#\"`\n  ip = '127.0.0.1'\n  [keys]\n  github = 'xxxxxxxxxxxxxxxxx'\n  travis = 'yyyyyyyyyyyyyyyyy'\n`\"#```)``.``unwrap``(``)``;`\n`assert_eq!``(`config`.`ip`,` ``\"`127.0.0.1`\"```)``;`\n`assert_eq!``(`config`.`port`,` `None``)``;`\n`assert_eq!``(`config`.`keys`.`github`,` ``\"`xxxxxxxxxxxxxxxxx`\"```)``;`\n`assert_eq!``(`config`.`keys`.`travis`.``as_ref``(``)``.``unwrap``(``)``,` ``\"`yyyyyyyyyyyyyyyyy`\"```)``;`\n`\n```\n\nYou can serialize types in a similar fashion:\n```\n``use` `serde`::``Serialize`;`\n``#``[``derive```(```Serialize```)```]``\n``struct` ```Config` ````{`\n  `ip``:` String,\n  `port``:` ``Option``<``u16``>``,\n  `keys``:` Keys,\n```}```\n``#``[``derive```(```Serialize```)```]``\n``struct` ```Keys` ````{`\n  `github``:` String,\n  `travis``:` ``Option``<``String``>``,\n```}```\n`let` config `=` Config ``{`\n  ip`:` ``\"`127.0.0.1`\"```.``to_string``(``)``,`\n  port`:` `None``,`\n  keys`:` Keys `{`\n    github`:` ``\"`xxxxxxxxxxxxxxxxx`\"```.``to_string``(``)``,`\n    travis`:` `Some``(```\"`yyyyyyyyyyyyyyyyy`\"```.``to_string``(``)``)``,`\n  `}``,`\n```}```;`\n`let` toml `=` `toml`::``to_string`(``&`config`)``.``unwrap``(``)``;`\n`\n```\n\n#### Dependencies\n~94\u2013620KB  ~14K SLoC\n  * [preserve_order?](https://lib.rs/crates/toml/features#feature-preserve_order \"optional feature\") [indexmap](https://lib.rs/crates/indexmap \"new\") 2.0\n  * [serde](https://lib.rs/crates/serde \"1.0.145\")\n  * [serde_spanned](https://lib.rs/crates/serde_spanned \"0.6.9\")[+serde](https://lib.rs/crates/serde_spanned/features#feature-serde)\n  * [toml_datetime](https://lib.rs/crates/toml_datetime \"0.6.11\")[+serde](https://lib.rs/crates/toml_datetime/features#feature-serde)\n  * [display](https://lib.rs/crates/toml/features#feature-display \"default feature\") [parse](https://lib.rs/crates/toml/features#feature-parse \"default feature\") [unbounded?](https://lib.rs/crates/toml/features#feature-unbounded \"optional feature\") [toml_edit](https://lib.rs/crates/toml_edit \"0.22.27\")[+serde](https://lib.rs/crates/toml_edit/features#feature-serde)\n\n\n  * dev  [serde_json](https://lib.rs/crates/serde_json \"1.0.116\")\n  * dev  [snapbox](https://lib.rs/crates/snapbox \"new\") 0.6\n  * dev  [toml-test-data](https://lib.rs/crates/toml-test-data \"new\") 2.3\n  * dev  [toml-test-harness](https://lib.rs/crates/toml-test-harness \"new\") 1.3[+snapshot](https://lib.rs/crates/toml-test-harness/features#feature-snapshot)\n  * dev  [walkdir](https://lib.rs/crates/walkdir \"2.5.0\")\n\n\n  *[SLoC]: approx. additional lines of code\n",
              "markdown_with_citations": "###  89 releases\u27e81\u27e9\n0.8.23 |  Jun 6, 2025   \n---|---  \n0.8.20 |  Feb 5, 2025   \n0.8.19 |  Jul 31, 2024   \n0.8.12 |  Mar 18, 2024   \n0.1.3 |  Nov 22, 2014   \n#**10** in Parser implementations\u27e82\u27e9\nDownload history 3804533/week @ 2025-03-08 3912234/week @ 2025-03-15 4125711/week @ 2025-03-22 3544345/week @ 2025-03-29 3641183/week @ 2025-04-05 3291108/week @ 2025-04-12 3294390/week @ 2025-04-19 3288116/week @ 2025-04-26 3369204/week @ 2025-05-03 3462659/week @ 2025-05-10 3513816/week @ 2025-05-17 3116006/week @ 2025-05-24 3281426/week @ 2025-05-31 3570459/week @ 2025-06-07 3685153/week @ 2025-06-14 3907562/week @ 2025-06-21\n**15,004,501** downloads per month Used in **21,442** crates (6,250 directly)\u27e83\u27e9\n**MIT/Apache**\n280KB  6K  SLoC\n# toml\n![Latest Version\u27e84\u27e9](https://crates.io/crates/toml) ![Documentation\u27e85\u27e9](https://docs.rs/toml)\nA serde\u27e86\u27e9-compatible TOML\u27e87\u27e9 decoder and encoder for Rust.\nFor format-preserving editing or finer control over output, see toml_edit\u27e88\u27e9\n## License\nLicensed under either of\n  * Apache License, Version 2.0, (LICENSE-APACHE\u27e89\u27e9 or <http://www.apache.org/licenses/LICENSE-2.0>)\n  * MIT license (LICENSE-MIT\u27e810\u27e9 or <http://opensource.org/licenses/MIT>)\n\n\nat your option.\n### Contribution\nUnless you explicitly state otherwise, any contribution intentionally submitted for inclusion in the work by you, as defined in the Apache-2.0 license, shall be dual-licensed as above, without any additional terms or conditions.\n###  `lib.rs`\u27e811\u27e9: \nA serde\u27e86\u27e9-compatible TOML\u27e87\u27e9-parsing library\nTOML itself is a simple, ergonomic, and readable configuration format:\n```\n```[``package``]`\n`name ``=` ``\"`toml`\"``\n```[``dependencies``]`\n`serde ``=` ``\"`1.0`\"``\n``\n```\n\nThe TOML format tends to be relatively common throughout the Rust community for configuration, notably being used by Cargo\u27e812\u27e9, Rust's package manager.\n## TOML values\nA TOML document is represented with the ``Table``\u27e813\u27e9 type which maps ```String``` to the ``Value``\u27e814\u27e9 enum:\n```\n```pub` `enum` `Value` ``{`\n  `String``(``String``)``,`\n  Integer`(``i64``)``,`\n  Float`(``f64``)``,`\n  Boolean`(``bool``)``,`\n  Datetime`(`Datetime`)``,`\n  Array`(`Array`)``,`\n  Table`(`Table`)``,`\n```}```\n`\n```\n\n## Parsing TOML\nThe easiest way to parse a TOML document is via the ``Table``\u27e813\u27e9 type:\n```\n``use` `toml`::``Table`;`\n`let` value `=` ``\"`foo = 'bar'`\"```.``parse`::````<`Table`>```(``)``.``unwrap``(``)``;`\n`assert_eq!``(`value`[```\"`foo`\"```]``.``as_str``(``)``,` `Some``(```\"`bar`\"```)``)``;`\n`\n```\n\nThe ``Table``\u27e813\u27e9 type implements a number of convenience methods and traits; the example above uses ``FromStr``\u27e815\u27e9 to parse a [```str```] into a ``Table``\u27e813\u27e9.\n## Deserialization and Serialization\nThis crate supports ``serde``\u27e86\u27e9 1.0 with a number of implementations of the ``Deserialize``, ``Serialize``, ``Deserializer``, and ``Serializer`` traits. Namely, you'll find:\n  * ``Deserialize `for` Table``\n  * ``Serialize `for` Table``\n  * ``Deserialize `for` Value``\n  * ``Serialize `for` Value``\n  * ``Deserialize `for` Datetime``\n  * ``Serialize `for` Datetime``\n  * ``Deserializer `for` `de`::``Deserializer``\n  * ``Serializer `for` `ser`::``Serializer``\n  * ``Deserializer `for` Table``\n  * ``Deserializer `for` Value``\n\n\nThis means that you can use Serde to deserialize/serialize the ``Table``\u27e813\u27e9 type as well as ``Value``\u27e814\u27e9 and ``Datetime``\u27e816\u27e9 type in this crate. You can also use the ``Deserializer``\u27e817\u27e9, ``Serializer``\u27e818\u27e9, or ``Table``\u27e813\u27e9 type itself to act as a deserializer/serializer for arbitrary types.\nAn example of deserializing with TOML is:\n```\n``use` `serde`::``Deserialize`;`\n``#``[``derive```(```Deserialize```)```]``\n``struct` ```Config` ````{`\n  `ip``:` String,\n  `port``:` ``Option``<``u16``>``,\n  `keys``:` Keys,\n```}```\n``#``[``derive```(```Deserialize```)```]``\n``struct` ```Keys` ````{`\n  `github``:` String,\n  `travis``:` ``Option``<``String``>``,\n```}```\n`let` config`:` Config `=` `toml`::``from_str`(```r``#\"`\n  ip = '127.0.0.1'\n  [keys]\n  github = 'xxxxxxxxxxxxxxxxx'\n  travis = 'yyyyyyyyyyyyyyyyy'\n`\"#```)``.``unwrap``(``)``;`\n`assert_eq!``(`config`.`ip`,` ``\"`127.0.0.1`\"```)``;`\n`assert_eq!``(`config`.`port`,` `None``)``;`\n`assert_eq!``(`config`.`keys`.`github`,` ``\"`xxxxxxxxxxxxxxxxx`\"```)``;`\n`assert_eq!``(`config`.`keys`.`travis`.``as_ref``(``)``.``unwrap``(``)``,` ``\"`yyyyyyyyyyyyyyyyy`\"```)``;`\n`\n```\n\nYou can serialize types in a similar fashion:\n```\n``use` `serde`::``Serialize`;`\n``#``[``derive```(```Serialize```)```]``\n``struct` ```Config` ````{`\n  `ip``:` String,\n  `port``:` ``Option``<``u16``>``,\n  `keys``:` Keys,\n```}```\n``#``[``derive```(```Serialize```)```]``\n``struct` ```Keys` ````{`\n  `github``:` String,\n  `travis``:` ``Option``<``String``>``,\n```}```\n`let` config `=` Config ``{`\n  ip`:` ``\"`127.0.0.1`\"```.``to_string``(``)``,`\n  port`:` `None``,`\n  keys`:` Keys `{`\n    github`:` ``\"`xxxxxxxxxxxxxxxxx`\"```.``to_string``(``)``,`\n    travis`:` `Some``(```\"`yyyyyyyyyyyyyyyyy`\"```.``to_string``(``)``)``,`\n  `}``,`\n```}```;`\n`let` toml `=` `toml`::``to_string`(``&`config`)``.``unwrap``(``)``;`\n`\n```\n\n#### Dependencies\n~94\u2013620KB  ~14K SLoC\n  * preserve_order?\u27e819\u27e9 indexmap\u27e820\u27e9 2.0\n  * serde\u27e821\u27e9\n  * serde_spanned\u27e822\u27e9+serde\u27e823\u27e9\n  * toml_datetime\u27e824\u27e9+serde\u27e825\u27e9\n  * display\u27e826\u27e9 parse\u27e827\u27e9 unbounded?\u27e828\u27e9 toml_edit\u27e829\u27e9+serde\u27e830\u27e9\n\n\n  * dev  serde_json\u27e831\u27e9\n  * dev  snapbox\u27e832\u27e9 0.6\n  * dev  toml-test-data\u27e833\u27e9 2.3\n  * dev  toml-test-harness\u27e834\u27e9 1.3+snapshot\u27e835\u27e9\n  * dev  walkdir\u27e836\u27e9\n\n\n  *[SLoC]: approx. additional lines of code\n",
              "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://lib.rs/crates/toml/versions: 89 releases\n\u27e82\u27e9 https://lib.rs/parser-implementations: Parsers implemented for particular formats or languages. - Parser implementations\n\u27e83\u27e9 https://lib.rs/crates/toml/rev: **21,442** crates (6,250 directly)\n\u27e84\u27e9 https://img.shields.io/crates/v/toml.svg: ![Latest Version\n\u27e85\u27e9 https://img.gs/czjpqfbdkz/full/https://docs.rs/toml/badge.svg: ![Documentation\n\u27e86\u27e9 https://serde.rs/: serde\n\u27e87\u27e9 https://github.com/toml-lang/toml: TOML\n\u27e88\u27e9 https://docs.rs/toml_edit: toml_edit\n\u27e89\u27e9 https://github.com/toml-rs/toml/blob/838a0223142a2137b530e020cb7231aba46f7946/crates/toml/LICENSE-APACHE: LICENSE-APACHE\n\u27e810\u27e9 https://github.com/toml-rs/toml/blob/838a0223142a2137b530e020cb7231aba46f7946/crates/toml/LICENSE-MIT: LICENSE-MIT\n\u27e811\u27e9 https://docs.rs/toml: `lib.rs`\n\u27e812\u27e9 https://crates.io/: Cargo\n\u27e813\u27e9 https://lib.rs/Table: `Table` - ``Table``\n\u27e814\u27e9 https://lib.rs/Value: `Value` - ``Value``\n\u27e815\u27e9 https://docs.rs/toml/latest/toml/?search=FromStr: `FromStr` - ``FromStr``\n\u27e816\u27e9 https://lib.rs/Datetime: `Datetime` - ``Datetime``\n\u27e817\u27e9 https://docs.rs/toml/latest/toml/?search=Deserializer: `Deserializer` - ``Deserializer``\n\u27e818\u27e9 https://lib.rs/Serializer: `Serializer` - ``Serializer``\n\u27e819\u27e9 https://lib.rs/crates/toml/features#feature-preserve_order: optional feature - preserve_order?\n\u27e820\u27e9 https://lib.rs/crates/indexmap: new - indexmap\n\u27e821\u27e9 https://lib.rs/crates/serde: 1.0.145 - serde\n\u27e822\u27e9 https://lib.rs/crates/serde_spanned: 0.6.9 - serde_spanned\n\u27e823\u27e9 https://lib.rs/crates/serde_spanned/features#feature-serde: +serde\n\u27e824\u27e9 https://lib.rs/crates/toml_datetime: 0.6.11 - toml_datetime\n\u27e825\u27e9 https://lib.rs/crates/toml_datetime/features#feature-serde: +serde\n\u27e826\u27e9 https://lib.rs/crates/toml/features#feature-display: default feature - display\n\u27e827\u27e9 https://lib.rs/crates/toml/features#feature-parse: default feature - parse\n\u27e828\u27e9 https://lib.rs/crates/toml/features#feature-unbounded: optional feature - unbounded?\n\u27e829\u27e9 https://lib.rs/crates/toml_edit: 0.22.27 - toml_edit\n\u27e830\u27e9 https://lib.rs/crates/toml_edit/features#feature-serde: +serde\n\u27e831\u27e9 https://lib.rs/crates/serde_json: 1.0.116 - serde_json\n\u27e832\u27e9 https://lib.rs/crates/snapbox: new - snapbox\n\u27e833\u27e9 https://lib.rs/crates/toml-test-data: new - toml-test-data\n\u27e834\u27e9 https://lib.rs/crates/toml-test-harness: new - toml-test-harness\n\u27e835\u27e9 https://lib.rs/crates/toml-test-harness/features#feature-snapshot: +snapshot\n\u27e836\u27e9 https://lib.rs/crates/walkdir: 2.5.0 - walkdir\n",
              "fit_markdown": "",
              "fit_html": ""
            },
            "structured_data": {},
            "quality_score": 3.0,
            "extraction_method": "crawl4ai",
            "error": null,
            "metadata": {
              "doc_type": "docs",
              "content_length": 7506,
              "has_structured_data": false,
              "crawl_success": true
            },
            "timestamp": "112787.2643497"
          }
        },
        "crate_analysis": {
          "status": "completed",
          "check": [
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#equivalent@1.0.1",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\equivalent-1.0.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "equivalent",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\equivalent-1.0.1\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp8p35qkku\\toml-0.8.23\\target\\debug\\deps\\libequivalent-1ddcc1c34f146777.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#toml_write@0.1.2",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\toml_write-0.1.2\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "toml_write",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\toml_write-0.1.2\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "alloc",
                "default",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp8p35qkku\\toml-0.8.23\\target\\debug\\deps\\libtoml_write-764de957ba82b07d.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#serde@1.0.219",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde-1.0.219\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde-1.0.219\\build.rs",
                "edition": "2018",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp8p35qkku\\toml-0.8.23\\target\\debug\\build\\serde-9fa5cff0eb8eb847\\build-script-build.exe",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp8p35qkku\\toml-0.8.23\\target\\debug\\build\\serde-9fa5cff0eb8eb847\\build_script_build.pdb"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "build-script-executed",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#serde@1.0.219",
              "linked_libs": [],
              "linked_paths": [],
              "cfgs": [],
              "env": [],
              "out_dir": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp8p35qkku\\toml-0.8.23\\target\\debug\\build\\serde-e14999bd5be61c74\\out"
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#hashbrown@0.14.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\hashbrown-0.14.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "hashbrown",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\hashbrown-0.14.5\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "raw"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp8p35qkku\\toml-0.8.23\\target\\debug\\deps\\libhashbrown-48982c59adb56e95.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#indexmap@2.3.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\indexmap-2.3.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "indexmap",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\indexmap-2.3.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp8p35qkku\\toml-0.8.23\\target\\debug\\deps\\libindexmap-6fa80cf955e01822.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#winnow@0.7.10",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\winnow-0.7.10\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "winnow",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\winnow-0.7.10\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "alloc",
                "default",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp8p35qkku\\toml-0.8.23\\target\\debug\\deps\\libwinnow-61801a86b2cdbaf7.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#serde@1.0.219",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde-1.0.219\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "serde",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde-1.0.219\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp8p35qkku\\toml-0.8.23\\target\\debug\\deps\\libserde-972596367428443c.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#serde_spanned@0.6.9",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde_spanned-0.6.9\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "serde_spanned",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde_spanned-0.6.9\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "serde"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp8p35qkku\\toml-0.8.23\\target\\debug\\deps\\libserde_spanned-173ff804906854b1.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#toml_datetime@0.6.11",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\toml_datetime-0.6.11\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "toml_datetime",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\toml_datetime-0.6.11\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "serde"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp8p35qkku\\toml-0.8.23\\target\\debug\\deps\\libtoml_datetime-62a11fdaa900a3cf.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#toml_edit@0.22.27",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\toml_edit-0.22.27\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "toml_edit",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\toml_edit-0.22.27\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "display",
                "parse",
                "serde"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp8p35qkku\\toml-0.8.23\\target\\debug\\deps\\libtoml_edit-7b262b98bdce81c0.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmp8p35qkku/toml-0.8.23#toml@0.8.23",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp8p35qkku\\toml-0.8.23\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "toml",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp8p35qkku\\toml-0.8.23\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "display",
                "parse"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp8p35qkku\\toml-0.8.23\\target\\debug\\deps\\libtoml-db64c519b98c2491.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "build-finished",
              "success": true
            }
          ],
          "clippy": [
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#serde@1.0.219",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde-1.0.219\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde-1.0.219\\build.rs",
                "edition": "2018",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp8p35qkku\\toml-0.8.23\\target\\debug\\build\\serde-9fa5cff0eb8eb847\\build-script-build.exe",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp8p35qkku\\toml-0.8.23\\target\\debug\\build\\serde-9fa5cff0eb8eb847\\build_script_build.pdb"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "build-script-executed",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#serde@1.0.219",
              "linked_libs": [],
              "linked_paths": [],
              "cfgs": [],
              "env": [],
              "out_dir": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp8p35qkku\\toml-0.8.23\\target\\debug\\build\\serde-e14999bd5be61c74\\out"
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#equivalent@1.0.1",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\equivalent-1.0.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "equivalent",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\equivalent-1.0.1\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp8p35qkku\\toml-0.8.23\\target\\debug\\deps\\libequivalent-1ddcc1c34f146777.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#hashbrown@0.14.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\hashbrown-0.14.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "hashbrown",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\hashbrown-0.14.5\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "raw"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp8p35qkku\\toml-0.8.23\\target\\debug\\deps\\libhashbrown-48982c59adb56e95.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#toml_write@0.1.2",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\toml_write-0.1.2\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "toml_write",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\toml_write-0.1.2\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "alloc",
                "default",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp8p35qkku\\toml-0.8.23\\target\\debug\\deps\\libtoml_write-764de957ba82b07d.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#winnow@0.7.10",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\winnow-0.7.10\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "winnow",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\winnow-0.7.10\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "alloc",
                "default",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp8p35qkku\\toml-0.8.23\\target\\debug\\deps\\libwinnow-61801a86b2cdbaf7.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#serde@1.0.219",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde-1.0.219\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "serde",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde-1.0.219\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp8p35qkku\\toml-0.8.23\\target\\debug\\deps\\libserde-972596367428443c.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#indexmap@2.3.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\indexmap-2.3.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "indexmap",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\indexmap-2.3.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp8p35qkku\\toml-0.8.23\\target\\debug\\deps\\libindexmap-6fa80cf955e01822.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#serde_spanned@0.6.9",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde_spanned-0.6.9\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "serde_spanned",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde_spanned-0.6.9\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "serde"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp8p35qkku\\toml-0.8.23\\target\\debug\\deps\\libserde_spanned-173ff804906854b1.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#toml_datetime@0.6.11",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\toml_datetime-0.6.11\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "toml_datetime",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\toml_datetime-0.6.11\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "serde"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp8p35qkku\\toml-0.8.23\\target\\debug\\deps\\libtoml_datetime-62a11fdaa900a3cf.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#toml_edit@0.22.27",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\toml_edit-0.22.27\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "toml_edit",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\toml_edit-0.22.27\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "display",
                "parse",
                "serde"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp8p35qkku\\toml-0.8.23\\target\\debug\\deps\\libtoml_edit-7b262b98bdce81c0.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmp8p35qkku/toml-0.8.23#toml@0.8.23",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp8p35qkku\\toml-0.8.23\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "toml",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp8p35qkku\\toml-0.8.23\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "display",
                "parse"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp8p35qkku\\toml-0.8.23\\target\\debug\\deps\\libtoml-ffe1436232b96a37.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "build-finished",
              "success": true
            }
          ],
          "audit": {
            "database": {
              "advisory-count": 787,
              "last-commit": "7573f55ba337263f61167dbb0ea926cdc7c8eb5d",
              "last-updated": "2025-06-17T11:04:25+02:00"
            },
            "lockfile": {
              "dependency-count": 92
            },
            "settings": {
              "target_arch": [],
              "target_os": [],
              "severity": null,
              "ignore": [],
              "informational_warnings": [
                "unmaintained",
                "unsound",
                "notice"
              ]
            },
            "vulnerabilities": {
              "found": false,
              "count": 0,
              "list": []
            },
            "warnings": {
              "unsound": [
                {
                  "kind": "unsound",
                  "package": {
                    "name": "anstream",
                    "version": "0.3.2",
                    "source": "registry+https://github.com/rust-lang/crates.io-index",
                    "checksum": "0ca84f3628370c59db74ee214b3263d58f9aadd9b4fe7e711fd87dc452b7f163",
                    "dependencies": [
                      {
                        "name": "anstyle",
                        "version": "1.0.8",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "anstyle-parse",
                        "version": "0.2.4",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "anstyle-query",
                        "version": "1.0.3",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "anstyle-wincon",
                        "version": "1.0.2",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "colorchoice",
                        "version": "1.0.1",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "is-terminal",
                        "version": "0.4.12",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "utf8parse",
                        "version": "0.2.1",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      }
                    ],
                    "replace": null
                  },
                  "advisory": {
                    "id": "RUSTSEC-2024-0404",
                    "package": "anstream",
                    "title": "Unsoundness in anstream",
                    "description": "When given a valid UTF8 string \"\u00f6\\x1b\ud83d\ude00\", the function in\ncrates/anstream/src/adapter/strip.rs will be confused. The UTF8\nbytes are \\xc3\\xb6 then \\x1b then \\xf0\\x9f\\x98\\x80.\n\nWhen looping over \"non-printable bytes\" \\x1b\\xf0 will be\nconsidered as some non-printable sequence.\n\nThis will produce a broken str from the incorrectly segmented\nbytes via str::from_utf8_unchecked, and that should never happen.\n\nFull credit goes to @Ralith who reviewed this code and\nasked @burakemir to follow up.",
                    "date": "2024-09-08",
                    "aliases": [],
                    "related": [],
                    "collection": "crates",
                    "categories": [],
                    "keywords": [],
                    "cvss": null,
                    "informational": "unsound",
                    "references": [],
                    "source": null,
                    "url": "https://github.com/rust-cli/anstyle/issues/156",
                    "withdrawn": null,
                    "license": "CC0-1.0"
                  },
                  "affected": {
                    "arch": [],
                    "os": [],
                    "functions": {
                      "anstream::adapter::strip_str": [
                        "<0.6.8"
                      ]
                    }
                  },
                  "versions": {
                    "patched": [
                      ">=0.6.8"
                    ],
                    "unaffected": []
                  }
                }
              ],
              "yanked": [
                {
                  "kind": "yanked",
                  "package": {
                    "name": "libc",
                    "version": "0.2.154",
                    "source": "registry+https://github.com/rust-lang/crates.io-index",
                    "checksum": "ae743338b92ff9146ce83992f766a31066a91a8c84a45e0e9f21e7cf6de6d346",
                    "replace": null
                  },
                  "advisory": null,
                  "affected": null,
                  "versions": null
                }
              ]
            }
          },
          "note": "Crate analysis performed with stable toolchain."
        },
        "crate_metadata": {
          "name": "toml",
          "version": "0.8.23",
          "description": "ALLOW: Positive community sentiment",
          "repository": "",
          "keywords": [],
          "categories": [],
          "readme": {
            "raw_markdown": "[](https://docs.rs/toml/latest/toml/all.html \"show sidebar\")\n# Crate tomlCopy item path\n[Settings](https://docs.rs/toml/latest/settings.html)\n[Help](https://docs.rs/toml/latest/help.html)\nSummary[Source](https://docs.rs/toml/latest/src/toml/lib.rs.html#1-185)\nExpand description\nA [serde](https://serde.rs/)-compatible [TOML](https://github.com/toml-lang/toml)-parsing library\nTOML itself is a simple, ergonomic, and readable configuration format:\n```\n[package]\nname = \"toml\"\n[dependencies]\nserde = \"1.0\"\n```\n\nThe TOML format tends to be relatively common throughout the Rust community for configuration, notably being used by [Cargo](https://crates.io/), Rust\u2019s package manager.\n### [\u00a7](https://docs.rs/toml/latest/toml/#toml-values)TOML values\nA TOML document is represented with the [`Table`](https://docs.rs/toml/latest/toml/type.Table.html \"type toml::Table\") type which maps `String` to the [`Value`](https://docs.rs/toml/latest/toml/enum.Value.html \"enum toml::Value\") enum:\n```\npub enum Value {\n  String(String),\n  Integer(i64),\n  Float(f64),\n  Boolean(bool),\n  Datetime(Datetime),\n  Array(Array),\n  Table(Table),\n}\n```\n\n### [\u00a7](https://docs.rs/toml/latest/toml/#parsing-toml)Parsing TOML\nThe easiest way to parse a TOML document is via the [`Table`](https://docs.rs/toml/latest/toml/type.Table.html \"type toml::Table\") type:\n```\nuse toml::Table;\nlet value = \"foo = 'bar'\".parse::<Table>().unwrap();\nassert_eq!(value[\"foo\"].as_str(), Some(\"bar\"));\n```\n\nThe [`Table`](https://docs.rs/toml/latest/toml/type.Table.html \"type toml::Table\") type implements a number of convenience methods and traits; the example above uses [`FromStr`](https://doc.rust-lang.org/nightly/core/str/traits/trait.FromStr.html \"trait core::str::traits::FromStr\") to parse a [`str`](https://doc.rust-lang.org/nightly/std/primitive.str.html \"primitive str\") into a [`Table`](https://docs.rs/toml/latest/toml/type.Table.html \"type toml::Table\").\n### [\u00a7](https://docs.rs/toml/latest/toml/#deserialization-and-serialization)Deserialization and Serialization\nThis crate supports [`serde`](https://serde.rs/) 1.0 with a number of implementations of the `Deserialize`, `Serialize`, `Deserializer`, and `Serializer` traits. Namely, you\u2019ll find:\n  * `Deserialize for Table`\n  * `Serialize for Table`\n  * `Deserialize for Value`\n  * `Serialize for Value`\n  * `Deserialize for Datetime`\n  * `Serialize for Datetime`\n  * `Deserializer for de::Deserializer`\n  * `Serializer for ser::Serializer`\n  * `Deserializer for Table`\n  * `Deserializer for Value`\n\n\nThis means that you can use Serde to deserialize/serialize the [`Table`](https://docs.rs/toml/latest/toml/type.Table.html \"type toml::Table\") type as well as [`Value`](https://docs.rs/toml/latest/toml/enum.Value.html \"enum toml::Value\") and [`Datetime`](https://docs.rs/toml/latest/toml/value/struct.Datetime.html \"struct toml::value::Datetime\") type in this crate. You can also use the [`Deserializer`](https://docs.rs/toml/latest/toml/struct.Deserializer.html \"struct toml::Deserializer\"), [`Serializer`](https://docs.rs/toml/latest/toml/struct.Serializer.html \"struct toml::Serializer\"), or [`Table`](https://docs.rs/toml/latest/toml/type.Table.html \"type toml::Table\") type itself to act as a deserializer/serializer for arbitrary types.\nAn example of deserializing with TOML is:\n```\nuse serde::Deserialize;\n#[derive(Deserialize)]\nstruct Config {\n  ip: String,\n  port: Option<u16>,\n  keys: Keys,\n}\n#[derive(Deserialize)]\nstruct Keys {\n  github: String,\n  travis: Option<String>,\n}\nlet config: Config = toml::from_str(r#\"\n  ip = '127.0.0.1'\n  [keys]\n  github = 'xxxxxxxxxxxxxxxxx'\n  travis = 'yyyyyyyyyyyyyyyyy'\n\"#).unwrap();\nassert_eq!(config.ip, \"127.0.0.1\");\nassert_eq!(config.port, None);\nassert_eq!(config.keys.github, \"xxxxxxxxxxxxxxxxx\");\nassert_eq!(config.keys.travis.as_ref().unwrap(), \"yyyyyyyyyyyyyyyyy\");\n```\n\nYou can serialize types in a similar fashion:\n```\nuse serde::Serialize;\n#[derive(Serialize)]\nstruct Config {\n  ip: String,\n  port: Option<u16>,\n  keys: Keys,\n}\n#[derive(Serialize)]\nstruct Keys {\n  github: String,\n  travis: Option<String>,\n}\nlet config = Config {\n  ip: \"127.0.0.1\".to_string(),\n  port: None,\n  keys: Keys {\n    github: \"xxxxxxxxxxxxxxxxx\".to_string(),\n    travis: Some(\"yyyyyyyyyyyyyyyyy\".to_string()),\n  },\n};\nlet toml = toml::to_string(&config).unwrap();\n```\n\n## Modules[\u00a7](https://docs.rs/toml/latest/toml/#modules)\n\n[de](https://docs.rs/toml/latest/toml/de/index.html \"mod toml::de\")\n    Deserializing TOML into Rust structures.\n\n[map](https://docs.rs/toml/latest/toml/map/index.html \"mod toml::map\")\n    A map of `String` to [Value](https://docs.rs/toml/latest/toml/enum.Value.html \"enum toml::Value\").\n\n[ser](https://docs.rs/toml/latest/toml/ser/index.html \"mod toml::ser\")\n    Serializing Rust structures into TOML.\n\n[value](https://docs.rs/toml/latest/toml/value/index.html \"mod toml::value\")\n    Definition of a TOML [value](https://docs.rs/toml/latest/toml/enum.Value.html \"enum toml::Value\")\n## Macros[\u00a7](https://docs.rs/toml/latest/toml/#macros)\n\n[toml](https://docs.rs/toml/latest/toml/macro.toml.html \"macro toml::toml\")\n    Construct a [`Table`](https://docs.rs/toml/latest/toml/type.Table.html \"type toml::Table\") from TOML syntax.\n## Structs[\u00a7](https://docs.rs/toml/latest/toml/#structs)\n\n[Deserializer](https://docs.rs/toml/latest/toml/struct.Deserializer.html \"struct toml::Deserializer\")`parse`\n    Deserialization TOML document\n\n[Serializer](https://docs.rs/toml/latest/toml/struct.Serializer.html \"struct toml::Serializer\")`display`\n    Serialization for TOML documents.\n\n[Spanned](https://docs.rs/toml/latest/toml/struct.Spanned.html \"struct toml::Spanned\")\n    A spanned value, indicating the range at which it is defined in the source.\n## Enums[\u00a7](https://docs.rs/toml/latest/toml/#enums)\n\n[Value](https://docs.rs/toml/latest/toml/enum.Value.html \"enum toml::Value\")\n    Representation of a TOML value.\n## Functions[\u00a7](https://docs.rs/toml/latest/toml/#functions)\n\n[from_str](https://docs.rs/toml/latest/toml/fn.from_str.html \"fn toml::from_str\")`parse`\n    Deserializes a string into a type.\n\n[to_string](https://docs.rs/toml/latest/toml/fn.to_string.html \"fn toml::to_string\")`display`\n    Serialize the given data structure as a String of TOML.\n\n[to_string_pretty](https://docs.rs/toml/latest/toml/fn.to_string_pretty.html \"fn toml::to_string_pretty\")`display`\n    Serialize the given data structure as a \u201cpretty\u201d String of TOML.\n## Type Aliases[\u00a7](https://docs.rs/toml/latest/toml/#types)\n\n[Table](https://docs.rs/toml/latest/toml/type.Table.html \"type toml::Table\")\n    Type representing a TOML table, payload of the `Value::Table` variant.\n",
            "markdown_with_citations": "[](https://docs.rs/toml/latest/toml/all.html \"show sidebar\")\n# Crate tomlCopy item path\nSettings\u27e81\u27e9\nHelp\u27e82\u27e9\nSummarySource\u27e83\u27e9\nExpand description\nA serde\u27e84\u27e9-compatible TOML\u27e85\u27e9-parsing library\nTOML itself is a simple, ergonomic, and readable configuration format:\n```\n[package]\nname = \"toml\"\n[dependencies]\nserde = \"1.0\"\n```\n\nThe TOML format tends to be relatively common throughout the Rust community for configuration, notably being used by Cargo\u27e86\u27e9, Rust\u2019s package manager.\n### \u00a7\u27e87\u27e9TOML values\nA TOML document is represented with the `Table`\u27e88\u27e9 type which maps `String` to the `Value`\u27e89\u27e9 enum:\n```\npub enum Value {\n  String(String),\n  Integer(i64),\n  Float(f64),\n  Boolean(bool),\n  Datetime(Datetime),\n  Array(Array),\n  Table(Table),\n}\n```\n\n### \u00a7\u27e810\u27e9Parsing TOML\nThe easiest way to parse a TOML document is via the `Table`\u27e88\u27e9 type:\n```\nuse toml::Table;\nlet value = \"foo = 'bar'\".parse::<Table>().unwrap();\nassert_eq!(value[\"foo\"].as_str(), Some(\"bar\"));\n```\n\nThe `Table`\u27e88\u27e9 type implements a number of convenience methods and traits; the example above uses `FromStr`\u27e811\u27e9 to parse a `str`\u27e812\u27e9 into a `Table`\u27e88\u27e9.\n### \u00a7\u27e813\u27e9Deserialization and Serialization\nThis crate supports `serde`\u27e84\u27e9 1.0 with a number of implementations of the `Deserialize`, `Serialize`, `Deserializer`, and `Serializer` traits. Namely, you\u2019ll find:\n  * `Deserialize for Table`\n  * `Serialize for Table`\n  * `Deserialize for Value`\n  * `Serialize for Value`\n  * `Deserialize for Datetime`\n  * `Serialize for Datetime`\n  * `Deserializer for de::Deserializer`\n  * `Serializer for ser::Serializer`\n  * `Deserializer for Table`\n  * `Deserializer for Value`\n\n\nThis means that you can use Serde to deserialize/serialize the `Table`\u27e88\u27e9 type as well as `Value`\u27e89\u27e9 and `Datetime`\u27e814\u27e9 type in this crate. You can also use the `Deserializer`\u27e815\u27e9, `Serializer`\u27e816\u27e9, or `Table`\u27e88\u27e9 type itself to act as a deserializer/serializer for arbitrary types.\nAn example of deserializing with TOML is:\n```\nuse serde::Deserialize;\n#[derive(Deserialize)]\nstruct Config {\n  ip: String,\n  port: Option<u16>,\n  keys: Keys,\n}\n#[derive(Deserialize)]\nstruct Keys {\n  github: String,\n  travis: Option<String>,\n}\nlet config: Config = toml::from_str(r#\"\n  ip = '127.0.0.1'\n  [keys]\n  github = 'xxxxxxxxxxxxxxxxx'\n  travis = 'yyyyyyyyyyyyyyyyy'\n\"#).unwrap();\nassert_eq!(config.ip, \"127.0.0.1\");\nassert_eq!(config.port, None);\nassert_eq!(config.keys.github, \"xxxxxxxxxxxxxxxxx\");\nassert_eq!(config.keys.travis.as_ref().unwrap(), \"yyyyyyyyyyyyyyyyy\");\n```\n\nYou can serialize types in a similar fashion:\n```\nuse serde::Serialize;\n#[derive(Serialize)]\nstruct Config {\n  ip: String,\n  port: Option<u16>,\n  keys: Keys,\n}\n#[derive(Serialize)]\nstruct Keys {\n  github: String,\n  travis: Option<String>,\n}\nlet config = Config {\n  ip: \"127.0.0.1\".to_string(),\n  port: None,\n  keys: Keys {\n    github: \"xxxxxxxxxxxxxxxxx\".to_string(),\n    travis: Some(\"yyyyyyyyyyyyyyyyy\".to_string()),\n  },\n};\nlet toml = toml::to_string(&config).unwrap();\n```\n\n## Modules\u00a7\u27e817\u27e9\n\nde\u27e818\u27e9\n    Deserializing TOML into Rust structures.\n\nmap\u27e819\u27e9\n    A map of `String` to Value\u27e89\u27e9.\n\nser\u27e820\u27e9\n    Serializing Rust structures into TOML.\n\nvalue\u27e821\u27e9\n    Definition of a TOML value\u27e89\u27e9\n## Macros\u00a7\u27e822\u27e9\n\ntoml\u27e823\u27e9\n    Construct a `Table`\u27e88\u27e9 from TOML syntax.\n## Structs\u00a7\u27e824\u27e9\n\nDeserializer\u27e815\u27e9`parse`\n    Deserialization TOML document\n\nSerializer\u27e816\u27e9`display`\n    Serialization for TOML documents.\n\nSpanned\u27e825\u27e9\n    A spanned value, indicating the range at which it is defined in the source.\n## Enums\u00a7\u27e826\u27e9\n\nValue\u27e89\u27e9\n    Representation of a TOML value.\n## Functions\u00a7\u27e827\u27e9\n\nfrom_str\u27e828\u27e9`parse`\n    Deserializes a string into a type.\n\nto_string\u27e829\u27e9`display`\n    Serialize the given data structure as a String of TOML.\n\nto_string_pretty\u27e830\u27e9`display`\n    Serialize the given data structure as a \u201cpretty\u201d String of TOML.\n## Type Aliases\u00a7\u27e831\u27e9\n\nTable\u27e88\u27e9\n    Type representing a TOML table, payload of the `Value::Table` variant.\n",
            "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://docs.rs/toml/latest/settings.html: Settings\n\u27e82\u27e9 https://docs.rs/toml/latest/help.html: Help\n\u27e83\u27e9 https://docs.rs/toml/latest/src/toml/lib.rs.html#1-185: Source\n\u27e84\u27e9 https://serde.rs/: serde\n\u27e85\u27e9 https://github.com/toml-lang/toml: TOML\n\u27e86\u27e9 https://crates.io/: Cargo\n\u27e87\u27e9 https://docs.rs/toml/latest/toml/#toml-values: \u00a7\n\u27e88\u27e9 https://docs.rs/toml/latest/toml/type.Table.html: type toml::Table - `Table`\n\u27e89\u27e9 https://docs.rs/toml/latest/toml/enum.Value.html: enum toml::Value - `Value`\n\u27e810\u27e9 https://docs.rs/toml/latest/toml/#parsing-toml: \u00a7\n\u27e811\u27e9 https://doc.rust-lang.org/nightly/core/str/traits/trait.FromStr.html: trait core::str::traits::FromStr - `FromStr`\n\u27e812\u27e9 https://doc.rust-lang.org/nightly/std/primitive.str.html: primitive str - `str`\n\u27e813\u27e9 https://docs.rs/toml/latest/toml/#deserialization-and-serialization: \u00a7\n\u27e814\u27e9 https://docs.rs/toml/latest/toml/value/struct.Datetime.html: struct toml::value::Datetime - `Datetime`\n\u27e815\u27e9 https://docs.rs/toml/latest/toml/struct.Deserializer.html: struct toml::Deserializer - `Deserializer`\n\u27e816\u27e9 https://docs.rs/toml/latest/toml/struct.Serializer.html: struct toml::Serializer - `Serializer`\n\u27e817\u27e9 https://docs.rs/toml/latest/toml/#modules: \u00a7\n\u27e818\u27e9 https://docs.rs/toml/latest/toml/de/index.html: mod toml::de - de\n\u27e819\u27e9 https://docs.rs/toml/latest/toml/map/index.html: mod toml::map - map\n\u27e820\u27e9 https://docs.rs/toml/latest/toml/ser/index.html: mod toml::ser - ser\n\u27e821\u27e9 https://docs.rs/toml/latest/toml/value/index.html: mod toml::value - value\n\u27e822\u27e9 https://docs.rs/toml/latest/toml/#macros: \u00a7\n\u27e823\u27e9 https://docs.rs/toml/latest/toml/macro.toml.html: macro toml::toml - toml\n\u27e824\u27e9 https://docs.rs/toml/latest/toml/#structs: \u00a7\n\u27e825\u27e9 https://docs.rs/toml/latest/toml/struct.Spanned.html: struct toml::Spanned - Spanned\n\u27e826\u27e9 https://docs.rs/toml/latest/toml/#enums: \u00a7\n\u27e827\u27e9 https://docs.rs/toml/latest/toml/#functions: \u00a7\n\u27e828\u27e9 https://docs.rs/toml/latest/toml/fn.from_str.html: fn toml::from_str - from_str\n\u27e829\u27e9 https://docs.rs/toml/latest/toml/fn.to_string.html: fn toml::to_string - to_string\n\u27e830\u27e9 https://docs.rs/toml/latest/toml/fn.to_string_pretty.html: fn toml::to_string_pretty - to_string_pretty\n\u27e831\u27e9 https://docs.rs/toml/latest/toml/#types: \u00a7\n",
            "fit_markdown": "",
            "fit_html": ""
          },
          "downloads": 0,
          "github_stars": 0,
          "dependencies": [],
          "features": {},
          "code_snippets": [],
          "readme_sections": {},
          "librs_downloads": null,
          "source": "crates.io",
          "enhanced_scraping": {},
          "enhanced_features": [],
          "enhanced_dependencies": []
        },
        "enriched_crate": {
          "name": "toml",
          "version": "0.8.23",
          "description": "ALLOW: Positive community sentiment",
          "repository": "",
          "keywords": [],
          "categories": [],
          "readme": {
            "raw_markdown": "[](https://docs.rs/toml/latest/toml/all.html \"show sidebar\")\n# Crate tomlCopy item path\n[Settings](https://docs.rs/toml/latest/settings.html)\n[Help](https://docs.rs/toml/latest/help.html)\nSummary[Source](https://docs.rs/toml/latest/src/toml/lib.rs.html#1-185)\nExpand description\nA [serde](https://serde.rs/)-compatible [TOML](https://github.com/toml-lang/toml)-parsing library\nTOML itself is a simple, ergonomic, and readable configuration format:\n```\n[package]\nname = \"toml\"\n[dependencies]\nserde = \"1.0\"\n```\n\nThe TOML format tends to be relatively common throughout the Rust community for configuration, notably being used by [Cargo](https://crates.io/), Rust\u2019s package manager.\n### [\u00a7](https://docs.rs/toml/latest/toml/#toml-values)TOML values\nA TOML document is represented with the [`Table`](https://docs.rs/toml/latest/toml/type.Table.html \"type toml::Table\") type which maps `String` to the [`Value`](https://docs.rs/toml/latest/toml/enum.Value.html \"enum toml::Value\") enum:\n```\npub enum Value {\n  String(String),\n  Integer(i64),\n  Float(f64),\n  Boolean(bool),\n  Datetime(Datetime),\n  Array(Array),\n  Table(Table),\n}\n```\n\n### [\u00a7](https://docs.rs/toml/latest/toml/#parsing-toml)Parsing TOML\nThe easiest way to parse a TOML document is via the [`Table`](https://docs.rs/toml/latest/toml/type.Table.html \"type toml::Table\") type:\n```\nuse toml::Table;\nlet value = \"foo = 'bar'\".parse::<Table>().unwrap();\nassert_eq!(value[\"foo\"].as_str(), Some(\"bar\"));\n```\n\nThe [`Table`](https://docs.rs/toml/latest/toml/type.Table.html \"type toml::Table\") type implements a number of convenience methods and traits; the example above uses [`FromStr`](https://doc.rust-lang.org/nightly/core/str/traits/trait.FromStr.html \"trait core::str::traits::FromStr\") to parse a [`str`](https://doc.rust-lang.org/nightly/std/primitive.str.html \"primitive str\") into a [`Table`](https://docs.rs/toml/latest/toml/type.Table.html \"type toml::Table\").\n### [\u00a7](https://docs.rs/toml/latest/toml/#deserialization-and-serialization)Deserialization and Serialization\nThis crate supports [`serde`](https://serde.rs/) 1.0 with a number of implementations of the `Deserialize`, `Serialize`, `Deserializer`, and `Serializer` traits. Namely, you\u2019ll find:\n  * `Deserialize for Table`\n  * `Serialize for Table`\n  * `Deserialize for Value`\n  * `Serialize for Value`\n  * `Deserialize for Datetime`\n  * `Serialize for Datetime`\n  * `Deserializer for de::Deserializer`\n  * `Serializer for ser::Serializer`\n  * `Deserializer for Table`\n  * `Deserializer for Value`\n\n\nThis means that you can use Serde to deserialize/serialize the [`Table`](https://docs.rs/toml/latest/toml/type.Table.html \"type toml::Table\") type as well as [`Value`](https://docs.rs/toml/latest/toml/enum.Value.html \"enum toml::Value\") and [`Datetime`](https://docs.rs/toml/latest/toml/value/struct.Datetime.html \"struct toml::value::Datetime\") type in this crate. You can also use the [`Deserializer`](https://docs.rs/toml/latest/toml/struct.Deserializer.html \"struct toml::Deserializer\"), [`Serializer`](https://docs.rs/toml/latest/toml/struct.Serializer.html \"struct toml::Serializer\"), or [`Table`](https://docs.rs/toml/latest/toml/type.Table.html \"type toml::Table\") type itself to act as a deserializer/serializer for arbitrary types.\nAn example of deserializing with TOML is:\n```\nuse serde::Deserialize;\n#[derive(Deserialize)]\nstruct Config {\n  ip: String,\n  port: Option<u16>,\n  keys: Keys,\n}\n#[derive(Deserialize)]\nstruct Keys {\n  github: String,\n  travis: Option<String>,\n}\nlet config: Config = toml::from_str(r#\"\n  ip = '127.0.0.1'\n  [keys]\n  github = 'xxxxxxxxxxxxxxxxx'\n  travis = 'yyyyyyyyyyyyyyyyy'\n\"#).unwrap();\nassert_eq!(config.ip, \"127.0.0.1\");\nassert_eq!(config.port, None);\nassert_eq!(config.keys.github, \"xxxxxxxxxxxxxxxxx\");\nassert_eq!(config.keys.travis.as_ref().unwrap(), \"yyyyyyyyyyyyyyyyy\");\n```\n\nYou can serialize types in a similar fashion:\n```\nuse serde::Serialize;\n#[derive(Serialize)]\nstruct Config {\n  ip: String,\n  port: Option<u16>,\n  keys: Keys,\n}\n#[derive(Serialize)]\nstruct Keys {\n  github: String,\n  travis: Option<String>,\n}\nlet config = Config {\n  ip: \"127.0.0.1\".to_string(),\n  port: None,\n  keys: Keys {\n    github: \"xxxxxxxxxxxxxxxxx\".to_string(),\n    travis: Some(\"yyyyyyyyyyyyyyyyy\".to_string()),\n  },\n};\nlet toml = toml::to_string(&config).unwrap();\n```\n\n## Modules[\u00a7](https://docs.rs/toml/latest/toml/#modules)\n\n[de](https://docs.rs/toml/latest/toml/de/index.html \"mod toml::de\")\n    Deserializing TOML into Rust structures.\n\n[map](https://docs.rs/toml/latest/toml/map/index.html \"mod toml::map\")\n    A map of `String` to [Value](https://docs.rs/toml/latest/toml/enum.Value.html \"enum toml::Value\").\n\n[ser](https://docs.rs/toml/latest/toml/ser/index.html \"mod toml::ser\")\n    Serializing Rust structures into TOML.\n\n[value](https://docs.rs/toml/latest/toml/value/index.html \"mod toml::value\")\n    Definition of a TOML [value](https://docs.rs/toml/latest/toml/enum.Value.html \"enum toml::Value\")\n## Macros[\u00a7](https://docs.rs/toml/latest/toml/#macros)\n\n[toml](https://docs.rs/toml/latest/toml/macro.toml.html \"macro toml::toml\")\n    Construct a [`Table`](https://docs.rs/toml/latest/toml/type.Table.html \"type toml::Table\") from TOML syntax.\n## Structs[\u00a7](https://docs.rs/toml/latest/toml/#structs)\n\n[Deserializer](https://docs.rs/toml/latest/toml/struct.Deserializer.html \"struct toml::Deserializer\")`parse`\n    Deserialization TOML document\n\n[Serializer](https://docs.rs/toml/latest/toml/struct.Serializer.html \"struct toml::Serializer\")`display`\n    Serialization for TOML documents.\n\n[Spanned](https://docs.rs/toml/latest/toml/struct.Spanned.html \"struct toml::Spanned\")\n    A spanned value, indicating the range at which it is defined in the source.\n## Enums[\u00a7](https://docs.rs/toml/latest/toml/#enums)\n\n[Value](https://docs.rs/toml/latest/toml/enum.Value.html \"enum toml::Value\")\n    Representation of a TOML value.\n## Functions[\u00a7](https://docs.rs/toml/latest/toml/#functions)\n\n[from_str](https://docs.rs/toml/latest/toml/fn.from_str.html \"fn toml::from_str\")`parse`\n    Deserializes a string into a type.\n\n[to_string](https://docs.rs/toml/latest/toml/fn.to_string.html \"fn toml::to_string\")`display`\n    Serialize the given data structure as a String of TOML.\n\n[to_string_pretty](https://docs.rs/toml/latest/toml/fn.to_string_pretty.html \"fn toml::to_string_pretty\")`display`\n    Serialize the given data structure as a \u201cpretty\u201d String of TOML.\n## Type Aliases[\u00a7](https://docs.rs/toml/latest/toml/#types)\n\n[Table](https://docs.rs/toml/latest/toml/type.Table.html \"type toml::Table\")\n    Type representing a TOML table, payload of the `Value::Table` variant.\n",
            "markdown_with_citations": "[](https://docs.rs/toml/latest/toml/all.html \"show sidebar\")\n# Crate tomlCopy item path\nSettings\u27e81\u27e9\nHelp\u27e82\u27e9\nSummarySource\u27e83\u27e9\nExpand description\nA serde\u27e84\u27e9-compatible TOML\u27e85\u27e9-parsing library\nTOML itself is a simple, ergonomic, and readable configuration format:\n```\n[package]\nname = \"toml\"\n[dependencies]\nserde = \"1.0\"\n```\n\nThe TOML format tends to be relatively common throughout the Rust community for configuration, notably being used by Cargo\u27e86\u27e9, Rust\u2019s package manager.\n### \u00a7\u27e87\u27e9TOML values\nA TOML document is represented with the `Table`\u27e88\u27e9 type which maps `String` to the `Value`\u27e89\u27e9 enum:\n```\npub enum Value {\n  String(String),\n  Integer(i64),\n  Float(f64),\n  Boolean(bool),\n  Datetime(Datetime),\n  Array(Array),\n  Table(Table),\n}\n```\n\n### \u00a7\u27e810\u27e9Parsing TOML\nThe easiest way to parse a TOML document is via the `Table`\u27e88\u27e9 type:\n```\nuse toml::Table;\nlet value = \"foo = 'bar'\".parse::<Table>().unwrap();\nassert_eq!(value[\"foo\"].as_str(), Some(\"bar\"));\n```\n\nThe `Table`\u27e88\u27e9 type implements a number of convenience methods and traits; the example above uses `FromStr`\u27e811\u27e9 to parse a `str`\u27e812\u27e9 into a `Table`\u27e88\u27e9.\n### \u00a7\u27e813\u27e9Deserialization and Serialization\nThis crate supports `serde`\u27e84\u27e9 1.0 with a number of implementations of the `Deserialize`, `Serialize`, `Deserializer`, and `Serializer` traits. Namely, you\u2019ll find:\n  * `Deserialize for Table`\n  * `Serialize for Table`\n  * `Deserialize for Value`\n  * `Serialize for Value`\n  * `Deserialize for Datetime`\n  * `Serialize for Datetime`\n  * `Deserializer for de::Deserializer`\n  * `Serializer for ser::Serializer`\n  * `Deserializer for Table`\n  * `Deserializer for Value`\n\n\nThis means that you can use Serde to deserialize/serialize the `Table`\u27e88\u27e9 type as well as `Value`\u27e89\u27e9 and `Datetime`\u27e814\u27e9 type in this crate. You can also use the `Deserializer`\u27e815\u27e9, `Serializer`\u27e816\u27e9, or `Table`\u27e88\u27e9 type itself to act as a deserializer/serializer for arbitrary types.\nAn example of deserializing with TOML is:\n```\nuse serde::Deserialize;\n#[derive(Deserialize)]\nstruct Config {\n  ip: String,\n  port: Option<u16>,\n  keys: Keys,\n}\n#[derive(Deserialize)]\nstruct Keys {\n  github: String,\n  travis: Option<String>,\n}\nlet config: Config = toml::from_str(r#\"\n  ip = '127.0.0.1'\n  [keys]\n  github = 'xxxxxxxxxxxxxxxxx'\n  travis = 'yyyyyyyyyyyyyyyyy'\n\"#).unwrap();\nassert_eq!(config.ip, \"127.0.0.1\");\nassert_eq!(config.port, None);\nassert_eq!(config.keys.github, \"xxxxxxxxxxxxxxxxx\");\nassert_eq!(config.keys.travis.as_ref().unwrap(), \"yyyyyyyyyyyyyyyyy\");\n```\n\nYou can serialize types in a similar fashion:\n```\nuse serde::Serialize;\n#[derive(Serialize)]\nstruct Config {\n  ip: String,\n  port: Option<u16>,\n  keys: Keys,\n}\n#[derive(Serialize)]\nstruct Keys {\n  github: String,\n  travis: Option<String>,\n}\nlet config = Config {\n  ip: \"127.0.0.1\".to_string(),\n  port: None,\n  keys: Keys {\n    github: \"xxxxxxxxxxxxxxxxx\".to_string(),\n    travis: Some(\"yyyyyyyyyyyyyyyyy\".to_string()),\n  },\n};\nlet toml = toml::to_string(&config).unwrap();\n```\n\n## Modules\u00a7\u27e817\u27e9\n\nde\u27e818\u27e9\n    Deserializing TOML into Rust structures.\n\nmap\u27e819\u27e9\n    A map of `String` to Value\u27e89\u27e9.\n\nser\u27e820\u27e9\n    Serializing Rust structures into TOML.\n\nvalue\u27e821\u27e9\n    Definition of a TOML value\u27e89\u27e9\n## Macros\u00a7\u27e822\u27e9\n\ntoml\u27e823\u27e9\n    Construct a `Table`\u27e88\u27e9 from TOML syntax.\n## Structs\u00a7\u27e824\u27e9\n\nDeserializer\u27e815\u27e9`parse`\n    Deserialization TOML document\n\nSerializer\u27e816\u27e9`display`\n    Serialization for TOML documents.\n\nSpanned\u27e825\u27e9\n    A spanned value, indicating the range at which it is defined in the source.\n## Enums\u00a7\u27e826\u27e9\n\nValue\u27e89\u27e9\n    Representation of a TOML value.\n## Functions\u00a7\u27e827\u27e9\n\nfrom_str\u27e828\u27e9`parse`\n    Deserializes a string into a type.\n\nto_string\u27e829\u27e9`display`\n    Serialize the given data structure as a String of TOML.\n\nto_string_pretty\u27e830\u27e9`display`\n    Serialize the given data structure as a \u201cpretty\u201d String of TOML.\n## Type Aliases\u00a7\u27e831\u27e9\n\nTable\u27e88\u27e9\n    Type representing a TOML table, payload of the `Value::Table` variant.\n",
            "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://docs.rs/toml/latest/settings.html: Settings\n\u27e82\u27e9 https://docs.rs/toml/latest/help.html: Help\n\u27e83\u27e9 https://docs.rs/toml/latest/src/toml/lib.rs.html#1-185: Source\n\u27e84\u27e9 https://serde.rs/: serde\n\u27e85\u27e9 https://github.com/toml-lang/toml: TOML\n\u27e86\u27e9 https://crates.io/: Cargo\n\u27e87\u27e9 https://docs.rs/toml/latest/toml/#toml-values: \u00a7\n\u27e88\u27e9 https://docs.rs/toml/latest/toml/type.Table.html: type toml::Table - `Table`\n\u27e89\u27e9 https://docs.rs/toml/latest/toml/enum.Value.html: enum toml::Value - `Value`\n\u27e810\u27e9 https://docs.rs/toml/latest/toml/#parsing-toml: \u00a7\n\u27e811\u27e9 https://doc.rust-lang.org/nightly/core/str/traits/trait.FromStr.html: trait core::str::traits::FromStr - `FromStr`\n\u27e812\u27e9 https://doc.rust-lang.org/nightly/std/primitive.str.html: primitive str - `str`\n\u27e813\u27e9 https://docs.rs/toml/latest/toml/#deserialization-and-serialization: \u00a7\n\u27e814\u27e9 https://docs.rs/toml/latest/toml/value/struct.Datetime.html: struct toml::value::Datetime - `Datetime`\n\u27e815\u27e9 https://docs.rs/toml/latest/toml/struct.Deserializer.html: struct toml::Deserializer - `Deserializer`\n\u27e816\u27e9 https://docs.rs/toml/latest/toml/struct.Serializer.html: struct toml::Serializer - `Serializer`\n\u27e817\u27e9 https://docs.rs/toml/latest/toml/#modules: \u00a7\n\u27e818\u27e9 https://docs.rs/toml/latest/toml/de/index.html: mod toml::de - de\n\u27e819\u27e9 https://docs.rs/toml/latest/toml/map/index.html: mod toml::map - map\n\u27e820\u27e9 https://docs.rs/toml/latest/toml/ser/index.html: mod toml::ser - ser\n\u27e821\u27e9 https://docs.rs/toml/latest/toml/value/index.html: mod toml::value - value\n\u27e822\u27e9 https://docs.rs/toml/latest/toml/#macros: \u00a7\n\u27e823\u27e9 https://docs.rs/toml/latest/toml/macro.toml.html: macro toml::toml - toml\n\u27e824\u27e9 https://docs.rs/toml/latest/toml/#structs: \u00a7\n\u27e825\u27e9 https://docs.rs/toml/latest/toml/struct.Spanned.html: struct toml::Spanned - Spanned\n\u27e826\u27e9 https://docs.rs/toml/latest/toml/#enums: \u00a7\n\u27e827\u27e9 https://docs.rs/toml/latest/toml/#functions: \u00a7\n\u27e828\u27e9 https://docs.rs/toml/latest/toml/fn.from_str.html: fn toml::from_str - from_str\n\u27e829\u27e9 https://docs.rs/toml/latest/toml/fn.to_string.html: fn toml::to_string - to_string\n\u27e830\u27e9 https://docs.rs/toml/latest/toml/fn.to_string_pretty.html: fn toml::to_string_pretty - to_string_pretty\n\u27e831\u27e9 https://docs.rs/toml/latest/toml/#types: \u00a7\n",
            "fit_markdown": "",
            "fit_html": ""
          },
          "downloads": 0,
          "github_stars": 0,
          "dependencies": [],
          "features": {},
          "code_snippets": [],
          "readme_sections": {},
          "librs_downloads": null,
          "source": "crates.io",
          "enhanced_scraping": {},
          "enhanced_features": [],
          "enhanced_dependencies": [],
          "readme_summary": "The `toml` crate is a Serde-compatible library for parsing, serializing, and deserializing TOML, a widely-used configuration format in the Rust ecosystem. It provides robust support for working with TOML data via the `Table` type and the `Value` enum, enabling easy manipulation of strings, numbers, booleans, arrays, tables, and datetime values. Key features include seamless integration with Serde for custom Rust types, utility functions like `from_str` and `to_string`, and support for pretty serialization.",
          "feature_summary": null,
          "use_case": "Serialization",
          "score": 5.0,
          "factual_counterfactual": "### Pair 1: Parsing TOML Documents\n\u2705 Factual: The `toml` crate allows parsing TOML documents into a `Table` type using the `FromStr` trait, which maps strings to TOML values such as integers, strings, and arrays.  \n\u274c Counterfactual: The `toml` crate requires manual parsing of individual TOML values and does not support automatic conversion of strings into a `Table` type.  \n\n---\n\n### Pair 2: Serde Integration\n\u2705 Factual: The `toml` crate supports Serde 1.0, enabling seamless deserialization and serialization of Rust data structures like structs into TOML format using `toml::from_str` and `toml::to_string`.  \n\u274c Counterfactual: The `toml` crate does not integrate with Serde and requires custom implementations for deserialization and serialization of Rust data structures.  \n\n---\n\n### Pair 3: TOML Value Representation\n\u2705 Factual: The `Value` enum in the `toml` crate represents TOML values such as `String`, `Integer`, `Float`, `Boolean`, `Datetime`, `Array`, and `Table`.  \n\u274c Counterfactual: The `Value` enum in the `toml` crate only supports primitive types like `String` and `Integer` but does not include complex types like `Array` or `Table`.",
          "source_analysis": null,
          "user_behavior": null,
          "security": null
        }
      },
      "irl_score": 8.6,
      "execution_id": "exec-bf0a9022-0bc3907d-1751258996",
      "timestamp": "2025-06-30T04:49:56.206875+00:00",
      "canon_version": "1.3.0"
    },
    "rule_zero_compliant": true
  }
]