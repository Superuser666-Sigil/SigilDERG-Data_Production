[
  {
    "execution_id": "exec-ea31ac1d-a0de36ce-1751266147",
    "timestamp": "2025-06-30T06:49:07.486147+00:00",
    "sacred_chain": {
      "input_data": "mio",
      "context_sources": [
        "crates.io",
        "github.com",
        "lib.rs",
        "docs.rs"
      ],
      "reasoning_steps": [
        "Input canonicalized: 'mio' -> 'mio'",
        "Context gathered from 4 validated sources",
        "Metadata extracted: 4 fields",
        "Documentation analyzed: quality 7.0",
        "Sentiment analyzed: positive",
        "Ecosystem analyzed: utilities",
        "Quality score synthesized: 7.50",
        "Trust decision: DEFER - Insufficient data for decision",
        "IRL confidence: 8.600"
      ],
      "suggestion": "ALLOW: Positive community sentiment",
      "verdict": "DEFER",
      "audit_info": {
        "metadata": {
          "name": "mio",
          "type": "rust_crate",
          "source": "manual_input",
          "extraction_method": "irl_engine"
        },
        "sentiment": {
          "quality_score": 7.0,
          "completeness": 0.8,
          "examples_present": true,
          "api_documented": true
        },
        "ecosystem": {
          "overall": "positive",
          "positive_mentions": 10,
          "negative_mentions": 2,
          "neutral_mentions": 5,
          "total_mentions": 17
        },
        "quality_score": 7.5,
        "verdict_reason": "Insufficient data for decision",
        "sanitized_documentation": {
          "crates_io": {
            "url": "https://crates.io/crates/mio",
            "title": "mio v1.0.4",
            "content": {
              "raw_markdown": "#  mio v1.0.4\nLightweight non-blocking I/O. \n  * [ #async ](https://crates.io/keywords/async)\n  * [ #io ](https://crates.io/keywords/io)\n  * [ #non-blocking ](https://crates.io/keywords/non-blocking)\n\n\n  * [ Readme ](https://crates.io/crates/mio)\n  * [ 74 Versions ](https://crates.io/crates/mio/versions)\n  * [ Dependencies ](https://crates.io/crates/mio/dependencies)\n  * [ Dependents ](https://crates.io/crates/mio/reverse_dependencies)\n\n\n## Metadata\nabout 1 month ago \nv1.70.0 \n[ MIT ](https://choosealicense.com/licenses/mit)\n102 KiB \n## Install\nRun the following Cargo command in your project directory:\ncargo add mio\nOr add the following line to your Cargo.toml:\nmio = \"1.0.4\"\n## Repository\n[ github.com/tokio-rs/mio ](https://github.com/tokio-rs/mio)\n## Owners\n## Categories\n  * [Asynchronous](https://crates.io/categories/asynchronous)\n\n\n[ Report crate ](https://crates.io/support?crate=mio&inquire=crate-violation)\n### Stats Overview\n356,969,719 Downloads all time\n74 Versions published\n#### Downloads over the last 90 days\nDisplay as \nStacked \n  * Stacked \n  * Unstacked \n\n\nLoading\u2026\n",
              "markdown_with_citations": "#  mio v1.0.4\nLightweight non-blocking I/O. \n  *  #async \u27e81\u27e9\n  *  #io \u27e82\u27e9\n  *  #non-blocking \u27e83\u27e9\n\n\n  *  Readme \u27e84\u27e9\n  *  74 Versions \u27e85\u27e9\n  *  Dependencies \u27e86\u27e9\n  *  Dependents \u27e87\u27e9\n\n\n## Metadata\nabout 1 month ago \nv1.70.0 \n MIT \u27e88\u27e9\n102 KiB \n## Install\nRun the following Cargo command in your project directory:\ncargo add mio\nOr add the following line to your Cargo.toml:\nmio = \"1.0.4\"\n## Repository\n github.com/tokio-rs/mio \u27e89\u27e9\n## Owners\n## Categories\n  * Asynchronous\u27e810\u27e9\n\n\n Report crate \u27e811\u27e9\n### Stats Overview\n356,969,719 Downloads all time\n74 Versions published\n#### Downloads over the last 90 days\nDisplay as \nStacked \n  * Stacked \n  * Unstacked \n\n\nLoading\u2026\n",
              "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://crates.io/keywords/async:  #async \n\u27e82\u27e9 https://crates.io/keywords/io:  #io \n\u27e83\u27e9 https://crates.io/keywords/non-blocking:  #non-blocking \n\u27e84\u27e9 https://crates.io/crates/mio:  Readme \n\u27e85\u27e9 https://crates.io/crates/mio/versions:  74 Versions \n\u27e86\u27e9 https://crates.io/crates/mio/dependencies:  Dependencies \n\u27e87\u27e9 https://crates.io/crates/mio/reverse_dependencies:  Dependents \n\u27e88\u27e9 https://choosealicense.com/licenses/mit:  MIT \n\u27e89\u27e9 https://github.com/tokio-rs/mio:  github.com/tokio-rs/mio \n\u27e810\u27e9 https://crates.io/categories/asynchronous: Asynchronous\n\u27e811\u27e9 https://crates.io/support?crate=mio&inquire=crate-violation:  Report crate \n",
              "fit_markdown": "",
              "fit_html": ""
            },
            "structured_data": {},
            "quality_score": 3.0,
            "extraction_method": "crawl4ai",
            "error": null,
            "metadata": {
              "doc_type": "docs",
              "content_length": 1094,
              "has_structured_data": false,
              "crawl_success": true
            },
            "timestamp": "119936.9671003"
          },
          "docs_rs": {
            "url": "https://docs.rs/mio",
            "title": "Crate mioCopy item path",
            "content": {
              "raw_markdown": "[](https://docs.rs/mio/latest/mio/all.html \"show sidebar\")\n# Crate mioCopy item path\n[Settings](https://docs.rs/mio/latest/settings.html)\n[Help](https://docs.rs/mio/latest/help.html)\nSummary[Source](https://docs.rs/mio/latest/src/mio/lib.rs.html#1-277)\nExpand description\nMio is a fast, low-level I/O library for Rust focusing on non-blocking APIs and event notification for building high performance I/O apps with as little overhead as possible over the OS abstractions.\n## [\u00a7](https://docs.rs/mio/latest/mio/#usage)Usage\nUsing Mio starts by creating a [`Poll`](https://docs.rs/mio/latest/mio/struct.Poll.html), which reads events from the OS and puts them into [`Events`](https://docs.rs/mio/latest/mio/event/struct.Events.html). You can handle I/O events from the OS with it.\nFor more detail, see [`Poll`](https://docs.rs/mio/latest/mio/struct.Poll.html).\n### [\u00a7](https://docs.rs/mio/latest/mio/#examples)Examples\nExamples can found in the `examples` directory of the source code, or [on GitHub](https://github.com/tokio-rs/mio/tree/master/examples).\n### [\u00a7](https://docs.rs/mio/latest/mio/#guide)Guide\nA getting started guide is available in the [`guide`](https://docs.rs/mio/latest/mio/guide/index.html \"mod mio::guide\") module.\n### [\u00a7](https://docs.rs/mio/latest/mio/#available-features)Available features\nThe available features are described in the [`features`](https://docs.rs/mio/latest/mio/features/index.html \"mod mio::features\") module.\n## Re-exports[\u00a7](https://docs.rs/mio/latest/mio/#reexports)\n\n`pub use event::Events[](https://docs.rs/mio/latest/mio/event/struct.Events.html \"struct mio::event::Events\");`\n\n## Modules[\u00a7](https://docs.rs/mio/latest/mio/#modules)\n\n[event](https://docs.rs/mio/latest/mio/event/index.html \"mod mio::event\")\n    Readiness event types and utilities.\n\n[features](https://docs.rs/mio/latest/mio/features/index.html \"mod mio::features\")\n    Mio\u2019s optional features.\n\n[guide](https://docs.rs/mio/latest/mio/guide/index.html \"mod mio::guide\")\n    Getting started guide.\n\n[net](https://docs.rs/mio/latest/mio/net/index.html \"mod mio::net\")`net`\n    Networking primitives.\n\n[unix](https://docs.rs/mio/latest/mio/unix/index.html \"mod mio::unix\")Unix and `os-ext`\n    Unix only extensions.\n## Structs[\u00a7](https://docs.rs/mio/latest/mio/#structs)\n\n[Interest](https://docs.rs/mio/latest/mio/struct.Interest.html \"struct mio::Interest\")\n    Interest used in registering.\n\n[Poll](https://docs.rs/mio/latest/mio/struct.Poll.html \"struct mio::Poll\")\n    Polls for readiness events on all registered values.\n\n[Registry](https://docs.rs/mio/latest/mio/struct.Registry.html \"struct mio::Registry\")\n    Registers I/O resources.\n\n[Token](https://docs.rs/mio/latest/mio/struct.Token.html \"struct mio::Token\")\n    Associates readiness events with [`event::Source`](https://docs.rs/mio/latest/mio/event/trait.Source.html)s.\n\n[Waker](https://docs.rs/mio/latest/mio/struct.Waker.html \"struct mio::Waker\")\n    Waker allows cross-thread waking of [`Poll`](https://docs.rs/mio/latest/mio/struct.Poll.html).\n",
              "markdown_with_citations": "[](https://docs.rs/mio/latest/mio/all.html \"show sidebar\")\n# Crate mioCopy item path\nSettings\u27e81\u27e9\nHelp\u27e82\u27e9\nSummarySource\u27e83\u27e9\nExpand description\nMio is a fast, low-level I/O library for Rust focusing on non-blocking APIs and event notification for building high performance I/O apps with as little overhead as possible over the OS abstractions.\n## \u00a7\u27e84\u27e9Usage\nUsing Mio starts by creating a `Poll`\u27e85\u27e9, which reads events from the OS and puts them into `Events`\u27e86\u27e9. You can handle I/O events from the OS with it.\nFor more detail, see `Poll`\u27e85\u27e9.\n### \u00a7\u27e87\u27e9Examples\nExamples can found in the `examples` directory of the source code, or on GitHub\u27e88\u27e9.\n### \u00a7\u27e89\u27e9Guide\nA getting started guide is available in the `guide`\u27e810\u27e9 module.\n### \u00a7\u27e811\u27e9Available features\nThe available features are described in the `features`\u27e812\u27e9 module.\n## Re-exports\u00a7\u27e813\u27e9\n\n`pub use event::Events[](https://docs.rs/mio/latest/mio/event/struct.Events.html \"struct mio::event::Events\");`\n\n## Modules\u00a7\u27e814\u27e9\n\nevent\u27e815\u27e9\n    Readiness event types and utilities.\n\nfeatures\u27e812\u27e9\n    Mio\u2019s optional features.\n\nguide\u27e810\u27e9\n    Getting started guide.\n\nnet\u27e816\u27e9`net`\n    Networking primitives.\n\nunix\u27e817\u27e9Unix and `os-ext`\n    Unix only extensions.\n## Structs\u00a7\u27e818\u27e9\n\nInterest\u27e819\u27e9\n    Interest used in registering.\n\nPoll\u27e85\u27e9\n    Polls for readiness events on all registered values.\n\nRegistry\u27e820\u27e9\n    Registers I/O resources.\n\nToken\u27e821\u27e9\n    Associates readiness events with `event::Source`\u27e822\u27e9s.\n\nWaker\u27e823\u27e9\n    Waker allows cross-thread waking of `Poll`\u27e85\u27e9.\n",
              "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://docs.rs/mio/latest/settings.html: Settings\n\u27e82\u27e9 https://docs.rs/mio/latest/help.html: Help\n\u27e83\u27e9 https://docs.rs/mio/latest/src/mio/lib.rs.html#1-277: Source\n\u27e84\u27e9 https://docs.rs/mio/latest/mio/#usage: \u00a7\n\u27e85\u27e9 https://docs.rs/mio/latest/mio/struct.Poll.html: `Poll`\n\u27e86\u27e9 https://docs.rs/mio/latest/mio/event/struct.Events.html: `Events`\n\u27e87\u27e9 https://docs.rs/mio/latest/mio/#examples: \u00a7\n\u27e88\u27e9 https://github.com/tokio-rs/mio/tree/master/examples: on GitHub\n\u27e89\u27e9 https://docs.rs/mio/latest/mio/#guide: \u00a7\n\u27e810\u27e9 https://docs.rs/mio/latest/mio/guide/index.html: mod mio::guide - `guide`\n\u27e811\u27e9 https://docs.rs/mio/latest/mio/#available-features: \u00a7\n\u27e812\u27e9 https://docs.rs/mio/latest/mio/features/index.html: mod mio::features - `features`\n\u27e813\u27e9 https://docs.rs/mio/latest/mio/#reexports: \u00a7\n\u27e814\u27e9 https://docs.rs/mio/latest/mio/#modules: \u00a7\n\u27e815\u27e9 https://docs.rs/mio/latest/mio/event/index.html: mod mio::event - event\n\u27e816\u27e9 https://docs.rs/mio/latest/mio/net/index.html: mod mio::net - net\n\u27e817\u27e9 https://docs.rs/mio/latest/mio/unix/index.html: mod mio::unix - unix\n\u27e818\u27e9 https://docs.rs/mio/latest/mio/#structs: \u00a7\n\u27e819\u27e9 https://docs.rs/mio/latest/mio/struct.Interest.html: struct mio::Interest - Interest\n\u27e820\u27e9 https://docs.rs/mio/latest/mio/struct.Registry.html: struct mio::Registry - Registry\n\u27e821\u27e9 https://docs.rs/mio/latest/mio/struct.Token.html: struct mio::Token - Token\n\u27e822\u27e9 https://docs.rs/mio/latest/mio/event/trait.Source.html: `event::Source`\n\u27e823\u27e9 https://docs.rs/mio/latest/mio/struct.Waker.html: struct mio::Waker - Waker\n",
              "fit_markdown": "",
              "fit_html": ""
            },
            "structured_data": {},
            "quality_score": 4.0,
            "extraction_method": "crawl4ai",
            "error": null,
            "metadata": {
              "doc_type": "docs",
              "content_length": 3022,
              "has_structured_data": false,
              "crawl_success": true
            },
            "timestamp": "119937.654149"
          },
          "lib_rs": {
            "url": "https://lib.rs/crates/mio",
            "title": "Untitled",
            "content": {
              "raw_markdown": "###  [66 releases](https://lib.rs/crates/mio/versions) (5 stable)\n1.0.4 |  May 24, 2025   \n---|---  \n1.0.3 |  Nov 29, 2024   \n1.0.2 |  Aug 12, 2024   \n1.0.1 |  Jul 23, 2024   \n0.1.0 |  Nov 11, 2014   \n#**1** in [Asynchronous](https://lib.rs/asynchronous \"Crates to help you deal with events independently of the main program flow, using techniques like futures, promises, waiting, or eventing.\")\nDownload history 4093637/week @ 2025-03-09 4340048/week @ 2025-03-16 4438517/week @ 2025-03-23 3956349/week @ 2025-03-30 4168286/week @ 2025-04-06 3750512/week @ 2025-04-13 3706888/week @ 2025-04-20 3629377/week @ 2025-04-27 3703744/week @ 2025-05-04 3823918/week @ 2025-05-11 3908151/week @ 2025-05-18 3699769/week @ 2025-05-25 4083651/week @ 2025-06-01 4201087/week @ 2025-06-08 4538074/week @ 2025-06-15 4594907/week @ 2025-06-22\n**17,666,678** downloads per month Used in [**31,561** crates (490 directly)](https://lib.rs/crates/mio/rev)\n**MIT** license \n420KB  7.5K  SLoC\n# Mio \u2013 Metal I/O\nMio is a fast, low-level I/O library for Rust focusing on non-blocking APIs and event notification for building high performance I/O apps with as little overhead as possible over the OS abstractions.\n[![Crates.io](https://img.shields.io/crates/v/mio.svg)](https://crates.io/crates/mio) [![MIT licensed](https://img.shields.io/badge/license-MIT-blue.svg)](https://github.com/tokio-rs/mio/blob/dc25ca5b8d16115b6cb53ef0fe08b282bd56b9d6/LICENSE) [![Build Status](https://img.gs/czjpqfbdkz/full/https://github.com/tokio-rs/mio/workflows/CI/badge.svg)](https://github.com/tokio-rs/mio/actions?query=workflow%3ACI+branch%3Amaster) [![Build Status](https://img.gs/czjpqfbdkz/full/https://api.cirrus-ci.com/github/tokio-rs/mio.svg)](https://cirrus-ci.com/github/tokio-rs/mio)\n**API documentation**\n  * [v1](https://docs.rs/mio/%5E1)\n  * [v0.8](https://docs.rs/mio/%5E0.8)\n\n\nThis is a low level library, if you are looking for something easier to get started with, see [Tokio](https://tokio.rs).\n## Usage\nTo use ``mio``, first add this to your ``Cargo.toml``:\n```\n```[``dependencies``]`\n`mio ``=` ``\"`1`\"``\n``\n```\n\nNext we can start using Mio. The following is quick introduction using ``TcpListener`` and ``TcpStream``. Note that ``features `=` `[```\"`os-poll`\"```,` ``\"`net`\"```]``` must be specified for this example.\n```\n``use` `std`::```error`::``Error`;`\n`use` `mio`::```net`::````{`TcpListener`,` TcpStream```}```;`\n`use` `mio`::````{`Events`,` Interest`,` Poll`,` Token```}```;`\n``//` Some tokens to allow us to identify which event is for which socket.`\n`const` `SERVER``:` Token `=` Token`(``0``)``;`\n`const` `CLIENT``:` Token `=` Token`(``1``)``;`\n``fn` `main`````(````)```` ``->` ``Result``<``(``)`, `Box``<`dyn Error`>``>``` ````{`\n  ``//` Create a poll instance.`\n  `let` `mut` poll `=` `Poll`::``new`(``)``?``;`\n  ``//` Create storage for events.`\n  `let` `mut` events `=` `Events`::``with_capacity`(``128``)``;`\n  ``//` Setup the server socket.`\n  `let` addr `=` ``\"`127.0.0.1:13265`\"```.``parse``(``)``?``;`\n  `let` `mut` server `=` `TcpListener`::``bind`(`addr`)``?``;`\n  ``//` Start listening for incoming connections.`\n  poll`.``registry``(``)`\n    `.``register``(``&``mut` server`,` `SERVER``,` `Interest`::```READABLE``)``?``;`\n  ``//` Setup the client socket.`\n  `let` `mut` client `=` `TcpStream`::``connect`(`addr`)``?``;`\n  ``//` Register the socket.`\n  poll`.``registry``(``)`\n    `.``register``(``&``mut` client`,` `CLIENT``,` `Interest`::```READABLE` `|` `Interest`::```WRITABLE``)``?``;`\n  ``//` Start an event loop.`\n  `loop` `{`\n    ``//` Poll Mio for events, blocking until we get an event.`\n    poll`.``poll``(``&``mut` events`,` `None``)``?``;`\n    ``//` Process each event.`\n    `for` event `in` events`.``iter``(``)` `{`\n      ``//` We can use the token we previously provided to `register` to`\n      ``//` determine for which socket the event is.`\n      `match` event`.``token``(``)` `{`\n        `SERVER` `=>` `{`\n          ``//` If this is an event for the server, it means a connection`\n          ``//` is ready to be accepted.`\n          ``//``\n          ``//` Accept the connection and drop it immediately. This will`\n          ``//` close the socket and notify the client of the EOF.`\n          `let` connection `=` server`.``accept``(``)``;`\n          `drop``(`connection`)``;`\n        `}`\n        `CLIENT` `=>` `{`\n          `if` event`.``is_writable``(``)` `{`\n            ``//` We can (likely) write to the socket without blocking.`\n          `}`\n          `if` event`.``is_readable``(``)` `{`\n            ``//` We can (likely) read from the socket without blocking.`\n          `}`\n          ``//` Since the server just shuts down the connection, let's`\n          ``//` just exit from our event loop.`\n          `return` `Ok``(``(``)``)``;`\n        `}`\n        ``//` We don't expect any events with tokens other than those we provided.`\n        `_` `=>` `unreachable!``(``)``,`\n      `}`\n    `}`\n  `}`\n```}```\n`\n```\n\n## Features\n  * Non-blocking TCP, UDP, UDS\n  * I/O event queue backed by epoll, kqueue, and IOCP\n  * Zero allocations at runtime\n  * Platform specific extensions\n\n\n## Non-goals\nThe following are specifically omitted from Mio and are left to the user or higher-level libraries.\n  * File operations\n  * Thread pools / multi-threaded event loop\n  * Timers\n\n\n## Platforms\nCurrently supported platforms:\n  * Android (API level 21)\n  * DragonFly BSD\n  * FreeBSD\n  * Linux\n  * NetBSD\n  * OpenBSD\n  * Windows\n  * iOS\n  * macOS\n\n\nMio can handle interfacing with each of the event systems of the aforementioned platforms. The details of their implementation are further discussed in the ``Poll`` type of the API documentation (see above).\nMio generally supports the same versions of the above mentioned platforms as Rust the language (rustc) does, unless otherwise noted.\nThe Windows implementation for polling sockets is using the [wepoll](https://github.com/piscisaureus/wepoll) strategy. This uses the Windows AFD system to access socket readiness events.\n### Unsupported\n  * Wine, see [issue #1444](https://github.com/tokio-rs/mio/issues/1444)\n\n\n## MSRV Policy\nThe MSRV (Minimum Supported Rust Version) is fixed for a given minor (1.x) version. However it can be increased when bumping minor versions, i.e. going from 1.0 to 1.1 allows us to increase the MSRV. Users unable to increase their Rust version can use an older minor version instead. Below is a list of Mio versions and their MSRV:\n  * v0.8: Rust 1.46.\n  * v1.0: Rust 1.70.\n\n\nNote however that Mio also has dependencies, which might have different MSRV policies. We try to stick to the above policy when updating dependencies, but this is not always possible.\n## Unsupported flags\nMio uses different implementations to support the same functionality depending on the platform. Mio generally uses the \"best\" implementation possible, where \"best\" usually means most efficient for Mio's use case. However this means that the implementation is often specific to a limited number of platforms, meaning we often have multiple implementations for the same functionality. In some cases it might be required to not use the \"best\" implementation, but another implementation Mio supports (on other platforms). **Mio does not officially support secondary implementations on platforms** , however we do have various cfg flags to force another implementation for these situations.\nCurrent flags:\n  * ``mio_unsupported_force_poll_poll``, uses an implementation based on ```poll``(``2``)``` for ```mio`::``Poll``.\n  * ``mio_unsupported_force_waker_pipe``, uses an implementation based on ```pipe``(``2``)``` for ```mio`::``Waker``.\n\n\n**Again, Mio does not officially supports this**. Furthermore these flags may disappear in the future.\n## Community\nA group of Mio users hang out on [Discord](https://discord.gg/tokio), this can be a good place to go for questions. It's also possible to open a [new issue on GitHub](https://github.com/tokio-rs/mio/issues/new) to ask questions, report bugs or suggest new features.\n## Contributing\nInterested in getting involved? We would love to help you! For simple bug fixes, just submit a PR with the fix and we can discuss the fix directly in the PR. If the fix is more complex, start with an issue.\nIf you want to propose an API change, create an issue to start a discussion with the community. Also, feel free to talk with us in Discord.\nFinally, be kind. We support the [Rust Code of Conduct](https://www.rust-lang.org/policies/code-of-conduct).\n#### Dependencies\n~0\u20138MB  ~62K SLoC\n  * [libc](https://lib.rs/crates/libc \"0.2.159\") hermit wasi unix\n  * [default](https://lib.rs/crates/mio/features#feature-default \"default feature\") [log](https://lib.rs/crates/log \"0.4.8\")\n  * [wasi](https://lib.rs/crates/wasi \"outdated\") 0.11 wasi\n  * [windows-sys](https://lib.rs/crates/windows-sys \"0.59\")[+Wdk_Foundation](https://lib.rs/crates/windows-sys/features#feature-Wdk_Foundation)[+Wdk\u2026FileSystem](https://lib.rs/crates/windows-sys/features#feature-Wdk_Storage_FileSystem)[+Wdk_System_IO](https://lib.rs/crates/windows-sys/features#feature-Wdk_System_IO)[+Win32_Foundation](https://lib.rs/crates/windows-sys/features#feature-Win32_Foundation)[+Win32\u2026WinSock](https://lib.rs/crates/windows-sys/features#feature-Win32_Networking_WinSock)[+Win32\u2026FileSystem](https://lib.rs/crates/windows-sys/features#feature-Win32_Storage_FileSystem)[+Win32_System_IO](https://lib.rs/crates/windows-sys/features#feature-Win32_System_IO)[+Win32\u2026WindowsProgramming](https://lib.rs/crates/windows-sys/features#feature-Win32_System_WindowsProgramming) win\n\n\n  * dev  [env_logger](https://lib.rs/crates/env_logger \"obsolete\") 0.9.3\n  * dev  [rand](https://lib.rs/crates/rand \"outdated\") 0.8\n\n\n#### [Other features](https://lib.rs/crates/mio/features)\n  * [net](https://lib.rs/crates/mio/features#feature-net)\n  * [os-ext](https://lib.rs/crates/mio/features#feature-os-ext)\n  * [os-poll](https://lib.rs/crates/mio/features#feature-os-poll)\n\n\n  *[SLoC]: approx. additional lines of code\n",
              "markdown_with_citations": "###  66 releases\u27e81\u27e9 (5 stable)\n1.0.4 |  May 24, 2025   \n---|---  \n1.0.3 |  Nov 29, 2024   \n1.0.2 |  Aug 12, 2024   \n1.0.1 |  Jul 23, 2024   \n0.1.0 |  Nov 11, 2014   \n#**1** in Asynchronous\u27e82\u27e9\nDownload history 4093637/week @ 2025-03-09 4340048/week @ 2025-03-16 4438517/week @ 2025-03-23 3956349/week @ 2025-03-30 4168286/week @ 2025-04-06 3750512/week @ 2025-04-13 3706888/week @ 2025-04-20 3629377/week @ 2025-04-27 3703744/week @ 2025-05-04 3823918/week @ 2025-05-11 3908151/week @ 2025-05-18 3699769/week @ 2025-05-25 4083651/week @ 2025-06-01 4201087/week @ 2025-06-08 4538074/week @ 2025-06-15 4594907/week @ 2025-06-22\n**17,666,678** downloads per month Used in **31,561** crates (490 directly)\u27e83\u27e9\n**MIT** license \n420KB  7.5K  SLoC\n# Mio \u2013 Metal I/O\nMio is a fast, low-level I/O library for Rust focusing on non-blocking APIs and event notification for building high performance I/O apps with as little overhead as possible over the OS abstractions.\n![Crates.io\u27e84\u27e9](https://crates.io/crates/mio) ![MIT licensed\u27e85\u27e9](https://github.com/tokio-rs/mio/blob/dc25ca5b8d16115b6cb53ef0fe08b282bd56b9d6/LICENSE) ![Build Status\u27e86\u27e9](https://github.com/tokio-rs/mio/actions?query=workflow%3ACI+branch%3Amaster) ![Build Status\u27e87\u27e9](https://cirrus-ci.com/github/tokio-rs/mio)\n**API documentation**\n  * v1\u27e88\u27e9\n  * v0.8\u27e89\u27e9\n\n\nThis is a low level library, if you are looking for something easier to get started with, see Tokio\u27e810\u27e9.\n## Usage\nTo use ``mio``, first add this to your ``Cargo.toml``:\n```\n```[``dependencies``]`\n`mio ``=` ``\"`1`\"``\n``\n```\n\nNext we can start using Mio. The following is quick introduction using ``TcpListener`` and ``TcpStream``. Note that ``features `=` `[```\"`os-poll`\"```,` ``\"`net`\"```]``` must be specified for this example.\n```\n``use` `std`::```error`::``Error`;`\n`use` `mio`::```net`::````{`TcpListener`,` TcpStream```}```;`\n`use` `mio`::````{`Events`,` Interest`,` Poll`,` Token```}```;`\n``//` Some tokens to allow us to identify which event is for which socket.`\n`const` `SERVER``:` Token `=` Token`(``0``)``;`\n`const` `CLIENT``:` Token `=` Token`(``1``)``;`\n``fn` `main`````(````)```` ``->` ``Result``<``(``)`, `Box``<`dyn Error`>``>``` ````{`\n  ``//` Create a poll instance.`\n  `let` `mut` poll `=` `Poll`::``new`(``)``?``;`\n  ``//` Create storage for events.`\n  `let` `mut` events `=` `Events`::``with_capacity`(``128``)``;`\n  ``//` Setup the server socket.`\n  `let` addr `=` ``\"`127.0.0.1:13265`\"```.``parse``(``)``?``;`\n  `let` `mut` server `=` `TcpListener`::``bind`(`addr`)``?``;`\n  ``//` Start listening for incoming connections.`\n  poll`.``registry``(``)`\n    `.``register``(``&``mut` server`,` `SERVER``,` `Interest`::```READABLE``)``?``;`\n  ``//` Setup the client socket.`\n  `let` `mut` client `=` `TcpStream`::``connect`(`addr`)``?``;`\n  ``//` Register the socket.`\n  poll`.``registry``(``)`\n    `.``register``(``&``mut` client`,` `CLIENT``,` `Interest`::```READABLE` `|` `Interest`::```WRITABLE``)``?``;`\n  ``//` Start an event loop.`\n  `loop` `{`\n    ``//` Poll Mio for events, blocking until we get an event.`\n    poll`.``poll``(``&``mut` events`,` `None``)``?``;`\n    ``//` Process each event.`\n    `for` event `in` events`.``iter``(``)` `{`\n      ``//` We can use the token we previously provided to `register` to`\n      ``//` determine for which socket the event is.`\n      `match` event`.``token``(``)` `{`\n        `SERVER` `=>` `{`\n          ``//` If this is an event for the server, it means a connection`\n          ``//` is ready to be accepted.`\n          ``//``\n          ``//` Accept the connection and drop it immediately. This will`\n          ``//` close the socket and notify the client of the EOF.`\n          `let` connection `=` server`.``accept``(``)``;`\n          `drop``(`connection`)``;`\n        `}`\n        `CLIENT` `=>` `{`\n          `if` event`.``is_writable``(``)` `{`\n            ``//` We can (likely) write to the socket without blocking.`\n          `}`\n          `if` event`.``is_readable``(``)` `{`\n            ``//` We can (likely) read from the socket without blocking.`\n          `}`\n          ``//` Since the server just shuts down the connection, let's`\n          ``//` just exit from our event loop.`\n          `return` `Ok``(``(``)``)``;`\n        `}`\n        ``//` We don't expect any events with tokens other than those we provided.`\n        `_` `=>` `unreachable!``(``)``,`\n      `}`\n    `}`\n  `}`\n```}```\n`\n```\n\n## Features\n  * Non-blocking TCP, UDP, UDS\n  * I/O event queue backed by epoll, kqueue, and IOCP\n  * Zero allocations at runtime\n  * Platform specific extensions\n\n\n## Non-goals\nThe following are specifically omitted from Mio and are left to the user or higher-level libraries.\n  * File operations\n  * Thread pools / multi-threaded event loop\n  * Timers\n\n\n## Platforms\nCurrently supported platforms:\n  * Android (API level 21)\n  * DragonFly BSD\n  * FreeBSD\n  * Linux\n  * NetBSD\n  * OpenBSD\n  * Windows\n  * iOS\n  * macOS\n\n\nMio can handle interfacing with each of the event systems of the aforementioned platforms. The details of their implementation are further discussed in the ``Poll`` type of the API documentation (see above).\nMio generally supports the same versions of the above mentioned platforms as Rust the language (rustc) does, unless otherwise noted.\nThe Windows implementation for polling sockets is using the wepoll\u27e811\u27e9 strategy. This uses the Windows AFD system to access socket readiness events.\n### Unsupported\n  * Wine, see issue #1444\u27e812\u27e9\n\n\n## MSRV Policy\nThe MSRV (Minimum Supported Rust Version) is fixed for a given minor (1.x) version. However it can be increased when bumping minor versions, i.e. going from 1.0 to 1.1 allows us to increase the MSRV. Users unable to increase their Rust version can use an older minor version instead. Below is a list of Mio versions and their MSRV:\n  * v0.8: Rust 1.46.\n  * v1.0: Rust 1.70.\n\n\nNote however that Mio also has dependencies, which might have different MSRV policies. We try to stick to the above policy when updating dependencies, but this is not always possible.\n## Unsupported flags\nMio uses different implementations to support the same functionality depending on the platform. Mio generally uses the \"best\" implementation possible, where \"best\" usually means most efficient for Mio's use case. However this means that the implementation is often specific to a limited number of platforms, meaning we often have multiple implementations for the same functionality. In some cases it might be required to not use the \"best\" implementation, but another implementation Mio supports (on other platforms). **Mio does not officially support secondary implementations on platforms** , however we do have various cfg flags to force another implementation for these situations.\nCurrent flags:\n  * ``mio_unsupported_force_poll_poll``, uses an implementation based on ```poll``(``2``)``` for ```mio`::``Poll``.\n  * ``mio_unsupported_force_waker_pipe``, uses an implementation based on ```pipe``(``2``)``` for ```mio`::``Waker``.\n\n\n**Again, Mio does not officially supports this**. Furthermore these flags may disappear in the future.\n## Community\nA group of Mio users hang out on Discord\u27e813\u27e9, this can be a good place to go for questions. It's also possible to open a new issue on GitHub\u27e814\u27e9 to ask questions, report bugs or suggest new features.\n## Contributing\nInterested in getting involved? We would love to help you! For simple bug fixes, just submit a PR with the fix and we can discuss the fix directly in the PR. If the fix is more complex, start with an issue.\nIf you want to propose an API change, create an issue to start a discussion with the community. Also, feel free to talk with us in Discord.\nFinally, be kind. We support the Rust Code of Conduct\u27e815\u27e9.\n#### Dependencies\n~0\u20138MB  ~62K SLoC\n  * libc\u27e816\u27e9 hermit wasi unix\n  * default\u27e817\u27e9 log\u27e818\u27e9\n  * wasi\u27e819\u27e9 0.11 wasi\n  * windows-sys\u27e820\u27e9+Wdk_Foundation\u27e821\u27e9+Wdk\u2026FileSystem\u27e822\u27e9+Wdk_System_IO\u27e823\u27e9+Win32_Foundation\u27e824\u27e9+Win32\u2026WinSock\u27e825\u27e9+Win32\u2026FileSystem\u27e826\u27e9+Win32_System_IO\u27e827\u27e9+Win32\u2026WindowsProgramming\u27e828\u27e9 win\n\n\n  * dev  env_logger\u27e829\u27e9 0.9.3\n  * dev  rand\u27e830\u27e9 0.8\n\n\n#### Other features\u27e831\u27e9\n  * net\u27e832\u27e9\n  * os-ext\u27e833\u27e9\n  * os-poll\u27e834\u27e9\n\n\n  *[SLoC]: approx. additional lines of code\n",
              "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://lib.rs/crates/mio/versions: 66 releases\n\u27e82\u27e9 https://lib.rs/asynchronous: Crates to help you deal with events independently of the main program flow, using techniques like futures, promises, waiting, or eventing. - Asynchronous\n\u27e83\u27e9 https://lib.rs/crates/mio/rev: **31,561** crates (490 directly)\n\u27e84\u27e9 https://img.shields.io/crates/v/mio.svg: ![Crates.io\n\u27e85\u27e9 https://img.shields.io/badge/license-MIT-blue.svg: ![MIT licensed\n\u27e86\u27e9 https://img.gs/czjpqfbdkz/full/https://github.com/tokio-rs/mio/workflows/CI/badge.svg: ![Build Status\n\u27e87\u27e9 https://img.gs/czjpqfbdkz/full/https://api.cirrus-ci.com/github/tokio-rs/mio.svg: ![Build Status\n\u27e88\u27e9 https://docs.rs/mio/%5E1: v1\n\u27e89\u27e9 https://docs.rs/mio/%5E0.8: v0.8\n\u27e810\u27e9 https://tokio.rs: Tokio\n\u27e811\u27e9 https://github.com/piscisaureus/wepoll: wepoll\n\u27e812\u27e9 https://github.com/tokio-rs/mio/issues/1444: issue #1444\n\u27e813\u27e9 https://discord.gg/tokio: Discord\n\u27e814\u27e9 https://github.com/tokio-rs/mio/issues/new: new issue on GitHub\n\u27e815\u27e9 https://www.rust-lang.org/policies/code-of-conduct: Rust Code of Conduct\n\u27e816\u27e9 https://lib.rs/crates/libc: 0.2.159 - libc\n\u27e817\u27e9 https://lib.rs/crates/mio/features#feature-default: default feature - default\n\u27e818\u27e9 https://lib.rs/crates/log: 0.4.8 - log\n\u27e819\u27e9 https://lib.rs/crates/wasi: outdated - wasi\n\u27e820\u27e9 https://lib.rs/crates/windows-sys: 0.59 - windows-sys\n\u27e821\u27e9 https://lib.rs/crates/windows-sys/features#feature-Wdk_Foundation: +Wdk_Foundation\n\u27e822\u27e9 https://lib.rs/crates/windows-sys/features#feature-Wdk_Storage_FileSystem: +Wdk\u2026FileSystem\n\u27e823\u27e9 https://lib.rs/crates/windows-sys/features#feature-Wdk_System_IO: +Wdk_System_IO\n\u27e824\u27e9 https://lib.rs/crates/windows-sys/features#feature-Win32_Foundation: +Win32_Foundation\n\u27e825\u27e9 https://lib.rs/crates/windows-sys/features#feature-Win32_Networking_WinSock: +Win32\u2026WinSock\n\u27e826\u27e9 https://lib.rs/crates/windows-sys/features#feature-Win32_Storage_FileSystem: +Win32\u2026FileSystem\n\u27e827\u27e9 https://lib.rs/crates/windows-sys/features#feature-Win32_System_IO: +Win32_System_IO\n\u27e828\u27e9 https://lib.rs/crates/windows-sys/features#feature-Win32_System_WindowsProgramming: +Win32\u2026WindowsProgramming\n\u27e829\u27e9 https://lib.rs/crates/env_logger: obsolete - env_logger\n\u27e830\u27e9 https://lib.rs/crates/rand: outdated - rand\n\u27e831\u27e9 https://lib.rs/crates/mio/features: Other features\n\u27e832\u27e9 https://lib.rs/crates/mio/features#feature-net: net\n\u27e833\u27e9 https://lib.rs/crates/mio/features#feature-os-ext: os-ext\n\u27e834\u27e9 https://lib.rs/crates/mio/features#feature-os-poll: os-poll\n",
              "fit_markdown": "",
              "fit_html": ""
            },
            "structured_data": {},
            "quality_score": 3.0,
            "extraction_method": "crawl4ai",
            "error": null,
            "metadata": {
              "doc_type": "docs",
              "content_length": 9983,
              "has_structured_data": false,
              "crawl_success": true
            },
            "timestamp": "119938.6456193"
          }
        },
        "crate_analysis": {
          "status": "completed",
          "check": [
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#log@0.4.27",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\log-0.4.27\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "log",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\log-0.4.27\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpz9ixxxvn\\mio-1.0.4\\target\\debug\\deps\\liblog-1786323f854c511b.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#windows_x86_64_msvc@0.52.6",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\windows_x86_64_msvc-0.52.6\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\windows_x86_64_msvc-0.52.6\\build.rs",
                "edition": "2021",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpz9ixxxvn\\mio-1.0.4\\target\\debug\\build\\windows_x86_64_msvc-733c1e19d91d737a\\build-script-build.exe",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpz9ixxxvn\\mio-1.0.4\\target\\debug\\build\\windows_x86_64_msvc-733c1e19d91d737a\\build_script_build.pdb"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "build-script-executed",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#windows_x86_64_msvc@0.52.6",
              "linked_libs": [],
              "linked_paths": [
                "native=C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\windows_x86_64_msvc-0.52.6\\lib"
              ],
              "cfgs": [],
              "env": [],
              "out_dir": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpz9ixxxvn\\mio-1.0.4\\target\\debug\\build\\windows_x86_64_msvc-a8b60e91c970423e\\out"
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#windows_x86_64_msvc@0.52.6",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\windows_x86_64_msvc-0.52.6\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "windows_x86_64_msvc",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\windows_x86_64_msvc-0.52.6\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpz9ixxxvn\\mio-1.0.4\\target\\debug\\deps\\libwindows_x86_64_msvc-2b925ab0435b4697.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#windows-targets@0.52.6",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\windows-targets-0.52.6\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "windows_targets",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\windows-targets-0.52.6\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpz9ixxxvn\\mio-1.0.4\\target\\debug\\deps\\libwindows_targets-88f43bd664d6863b.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#windows-sys@0.59.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\windows-sys-0.59.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "windows_sys",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\windows-sys-0.59.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": false,
                "test": false
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "Wdk",
                "Wdk_Foundation",
                "Wdk_Storage",
                "Wdk_Storage_FileSystem",
                "Wdk_System",
                "Wdk_System_IO",
                "Win32",
                "Win32_Foundation",
                "Win32_Networking",
                "Win32_Networking_WinSock",
                "Win32_Storage",
                "Win32_Storage_FileSystem",
                "Win32_System",
                "Win32_System_IO",
                "Win32_System_WindowsProgramming",
                "default"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpz9ixxxvn\\mio-1.0.4\\target\\debug\\deps\\libwindows_sys-f5707a6007390f09.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpz9ixxxvn/mio-1.0.4#mio@1.0.4",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpz9ixxxvn\\mio-1.0.4\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "mio",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpz9ixxxvn\\mio-1.0.4\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "log"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpz9ixxxvn\\mio-1.0.4\\target\\debug\\deps\\libmio-91adeef30f8fa20c.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "build-finished",
              "success": true
            }
          ],
          "clippy": [
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#windows_x86_64_msvc@0.52.6",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\windows_x86_64_msvc-0.52.6\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\windows_x86_64_msvc-0.52.6\\build.rs",
                "edition": "2021",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpz9ixxxvn\\mio-1.0.4\\target\\debug\\build\\windows_x86_64_msvc-733c1e19d91d737a\\build-script-build.exe",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpz9ixxxvn\\mio-1.0.4\\target\\debug\\build\\windows_x86_64_msvc-733c1e19d91d737a\\build_script_build.pdb"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "build-script-executed",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#windows_x86_64_msvc@0.52.6",
              "linked_libs": [],
              "linked_paths": [
                "native=C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\windows_x86_64_msvc-0.52.6\\lib"
              ],
              "cfgs": [],
              "env": [],
              "out_dir": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpz9ixxxvn\\mio-1.0.4\\target\\debug\\build\\windows_x86_64_msvc-a8b60e91c970423e\\out"
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#log@0.4.27",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\log-0.4.27\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "log",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\log-0.4.27\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpz9ixxxvn\\mio-1.0.4\\target\\debug\\deps\\liblog-1786323f854c511b.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#windows_x86_64_msvc@0.52.6",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\windows_x86_64_msvc-0.52.6\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "windows_x86_64_msvc",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\windows_x86_64_msvc-0.52.6\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpz9ixxxvn\\mio-1.0.4\\target\\debug\\deps\\libwindows_x86_64_msvc-2b925ab0435b4697.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#windows-targets@0.52.6",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\windows-targets-0.52.6\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "windows_targets",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\windows-targets-0.52.6\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpz9ixxxvn\\mio-1.0.4\\target\\debug\\deps\\libwindows_targets-88f43bd664d6863b.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#windows-sys@0.59.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\windows-sys-0.59.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "windows_sys",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\windows-sys-0.59.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": false,
                "test": false
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "Wdk",
                "Wdk_Foundation",
                "Wdk_Storage",
                "Wdk_Storage_FileSystem",
                "Wdk_System",
                "Wdk_System_IO",
                "Win32",
                "Win32_Foundation",
                "Win32_Networking",
                "Win32_Networking_WinSock",
                "Win32_Storage",
                "Win32_Storage_FileSystem",
                "Win32_System",
                "Win32_System_IO",
                "Win32_System_WindowsProgramming",
                "default"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpz9ixxxvn\\mio-1.0.4\\target\\debug\\deps\\libwindows_sys-f5707a6007390f09.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpz9ixxxvn/mio-1.0.4#mio@1.0.4",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpz9ixxxvn\\mio-1.0.4\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "mio",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpz9ixxxvn\\mio-1.0.4\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "log"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpz9ixxxvn\\mio-1.0.4\\target\\debug\\deps\\libmio-0e745aa4f11aa682.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "build-finished",
              "success": true
            }
          ],
          "audit": {
            "database": {
              "advisory-count": 787,
              "last-commit": "7573f55ba337263f61167dbb0ea926cdc7c8eb5d",
              "last-updated": "2025-06-17T11:04:25+02:00"
            },
            "lockfile": {
              "dependency-count": 27
            },
            "settings": {
              "target_arch": [],
              "target_os": [],
              "severity": null,
              "ignore": [],
              "informational_warnings": [
                "unmaintained",
                "unsound",
                "notice"
              ]
            },
            "vulnerabilities": {
              "found": false,
              "count": 0,
              "list": []
            },
            "warnings": {}
          },
          "note": "Crate analysis performed with stable toolchain."
        },
        "crate_metadata": {
          "name": "mio",
          "version": "1.0.4",
          "description": "ALLOW: Positive community sentiment",
          "repository": "",
          "keywords": [],
          "categories": [],
          "readme": {
            "raw_markdown": "[](https://docs.rs/mio/latest/mio/all.html \"show sidebar\")\n# Crate mioCopy item path\n[Settings](https://docs.rs/mio/latest/settings.html)\n[Help](https://docs.rs/mio/latest/help.html)\nSummary[Source](https://docs.rs/mio/latest/src/mio/lib.rs.html#1-277)\nExpand description\nMio is a fast, low-level I/O library for Rust focusing on non-blocking APIs and event notification for building high performance I/O apps with as little overhead as possible over the OS abstractions.\n## [\u00a7](https://docs.rs/mio/latest/mio/#usage)Usage\nUsing Mio starts by creating a [`Poll`](https://docs.rs/mio/latest/mio/struct.Poll.html), which reads events from the OS and puts them into [`Events`](https://docs.rs/mio/latest/mio/event/struct.Events.html). You can handle I/O events from the OS with it.\nFor more detail, see [`Poll`](https://docs.rs/mio/latest/mio/struct.Poll.html).\n### [\u00a7](https://docs.rs/mio/latest/mio/#examples)Examples\nExamples can found in the `examples` directory of the source code, or [on GitHub](https://github.com/tokio-rs/mio/tree/master/examples).\n### [\u00a7](https://docs.rs/mio/latest/mio/#guide)Guide\nA getting started guide is available in the [`guide`](https://docs.rs/mio/latest/mio/guide/index.html \"mod mio::guide\") module.\n### [\u00a7](https://docs.rs/mio/latest/mio/#available-features)Available features\nThe available features are described in the [`features`](https://docs.rs/mio/latest/mio/features/index.html \"mod mio::features\") module.\n## Re-exports[\u00a7](https://docs.rs/mio/latest/mio/#reexports)\n\n`pub use event::Events[](https://docs.rs/mio/latest/mio/event/struct.Events.html \"struct mio::event::Events\");`\n\n## Modules[\u00a7](https://docs.rs/mio/latest/mio/#modules)\n\n[event](https://docs.rs/mio/latest/mio/event/index.html \"mod mio::event\")\n    Readiness event types and utilities.\n\n[features](https://docs.rs/mio/latest/mio/features/index.html \"mod mio::features\")\n    Mio\u2019s optional features.\n\n[guide](https://docs.rs/mio/latest/mio/guide/index.html \"mod mio::guide\")\n    Getting started guide.\n\n[net](https://docs.rs/mio/latest/mio/net/index.html \"mod mio::net\")`net`\n    Networking primitives.\n\n[unix](https://docs.rs/mio/latest/mio/unix/index.html \"mod mio::unix\")Unix and `os-ext`\n    Unix only extensions.\n## Structs[\u00a7](https://docs.rs/mio/latest/mio/#structs)\n\n[Interest](https://docs.rs/mio/latest/mio/struct.Interest.html \"struct mio::Interest\")\n    Interest used in registering.\n\n[Poll](https://docs.rs/mio/latest/mio/struct.Poll.html \"struct mio::Poll\")\n    Polls for readiness events on all registered values.\n\n[Registry](https://docs.rs/mio/latest/mio/struct.Registry.html \"struct mio::Registry\")\n    Registers I/O resources.\n\n[Token](https://docs.rs/mio/latest/mio/struct.Token.html \"struct mio::Token\")\n    Associates readiness events with [`event::Source`](https://docs.rs/mio/latest/mio/event/trait.Source.html)s.\n\n[Waker](https://docs.rs/mio/latest/mio/struct.Waker.html \"struct mio::Waker\")\n    Waker allows cross-thread waking of [`Poll`](https://docs.rs/mio/latest/mio/struct.Poll.html).\n",
            "markdown_with_citations": "[](https://docs.rs/mio/latest/mio/all.html \"show sidebar\")\n# Crate mioCopy item path\nSettings\u27e81\u27e9\nHelp\u27e82\u27e9\nSummarySource\u27e83\u27e9\nExpand description\nMio is a fast, low-level I/O library for Rust focusing on non-blocking APIs and event notification for building high performance I/O apps with as little overhead as possible over the OS abstractions.\n## \u00a7\u27e84\u27e9Usage\nUsing Mio starts by creating a `Poll`\u27e85\u27e9, which reads events from the OS and puts them into `Events`\u27e86\u27e9. You can handle I/O events from the OS with it.\nFor more detail, see `Poll`\u27e85\u27e9.\n### \u00a7\u27e87\u27e9Examples\nExamples can found in the `examples` directory of the source code, or on GitHub\u27e88\u27e9.\n### \u00a7\u27e89\u27e9Guide\nA getting started guide is available in the `guide`\u27e810\u27e9 module.\n### \u00a7\u27e811\u27e9Available features\nThe available features are described in the `features`\u27e812\u27e9 module.\n## Re-exports\u00a7\u27e813\u27e9\n\n`pub use event::Events[](https://docs.rs/mio/latest/mio/event/struct.Events.html \"struct mio::event::Events\");`\n\n## Modules\u00a7\u27e814\u27e9\n\nevent\u27e815\u27e9\n    Readiness event types and utilities.\n\nfeatures\u27e812\u27e9\n    Mio\u2019s optional features.\n\nguide\u27e810\u27e9\n    Getting started guide.\n\nnet\u27e816\u27e9`net`\n    Networking primitives.\n\nunix\u27e817\u27e9Unix and `os-ext`\n    Unix only extensions.\n## Structs\u00a7\u27e818\u27e9\n\nInterest\u27e819\u27e9\n    Interest used in registering.\n\nPoll\u27e85\u27e9\n    Polls for readiness events on all registered values.\n\nRegistry\u27e820\u27e9\n    Registers I/O resources.\n\nToken\u27e821\u27e9\n    Associates readiness events with `event::Source`\u27e822\u27e9s.\n\nWaker\u27e823\u27e9\n    Waker allows cross-thread waking of `Poll`\u27e85\u27e9.\n",
            "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://docs.rs/mio/latest/settings.html: Settings\n\u27e82\u27e9 https://docs.rs/mio/latest/help.html: Help\n\u27e83\u27e9 https://docs.rs/mio/latest/src/mio/lib.rs.html#1-277: Source\n\u27e84\u27e9 https://docs.rs/mio/latest/mio/#usage: \u00a7\n\u27e85\u27e9 https://docs.rs/mio/latest/mio/struct.Poll.html: `Poll`\n\u27e86\u27e9 https://docs.rs/mio/latest/mio/event/struct.Events.html: `Events`\n\u27e87\u27e9 https://docs.rs/mio/latest/mio/#examples: \u00a7\n\u27e88\u27e9 https://github.com/tokio-rs/mio/tree/master/examples: on GitHub\n\u27e89\u27e9 https://docs.rs/mio/latest/mio/#guide: \u00a7\n\u27e810\u27e9 https://docs.rs/mio/latest/mio/guide/index.html: mod mio::guide - `guide`\n\u27e811\u27e9 https://docs.rs/mio/latest/mio/#available-features: \u00a7\n\u27e812\u27e9 https://docs.rs/mio/latest/mio/features/index.html: mod mio::features - `features`\n\u27e813\u27e9 https://docs.rs/mio/latest/mio/#reexports: \u00a7\n\u27e814\u27e9 https://docs.rs/mio/latest/mio/#modules: \u00a7\n\u27e815\u27e9 https://docs.rs/mio/latest/mio/event/index.html: mod mio::event - event\n\u27e816\u27e9 https://docs.rs/mio/latest/mio/net/index.html: mod mio::net - net\n\u27e817\u27e9 https://docs.rs/mio/latest/mio/unix/index.html: mod mio::unix - unix\n\u27e818\u27e9 https://docs.rs/mio/latest/mio/#structs: \u00a7\n\u27e819\u27e9 https://docs.rs/mio/latest/mio/struct.Interest.html: struct mio::Interest - Interest\n\u27e820\u27e9 https://docs.rs/mio/latest/mio/struct.Registry.html: struct mio::Registry - Registry\n\u27e821\u27e9 https://docs.rs/mio/latest/mio/struct.Token.html: struct mio::Token - Token\n\u27e822\u27e9 https://docs.rs/mio/latest/mio/event/trait.Source.html: `event::Source`\n\u27e823\u27e9 https://docs.rs/mio/latest/mio/struct.Waker.html: struct mio::Waker - Waker\n",
            "fit_markdown": "",
            "fit_html": ""
          },
          "downloads": 0,
          "github_stars": 0,
          "dependencies": [],
          "features": {},
          "code_snippets": [],
          "readme_sections": {},
          "librs_downloads": null,
          "source": "crates.io",
          "enhanced_scraping": {},
          "enhanced_features": [],
          "enhanced_dependencies": []
        },
        "enriched_crate": {
          "name": "mio",
          "version": "1.0.4",
          "description": "ALLOW: Positive community sentiment",
          "repository": "",
          "keywords": [],
          "categories": [],
          "readme": {
            "raw_markdown": "[](https://docs.rs/mio/latest/mio/all.html \"show sidebar\")\n# Crate mioCopy item path\n[Settings](https://docs.rs/mio/latest/settings.html)\n[Help](https://docs.rs/mio/latest/help.html)\nSummary[Source](https://docs.rs/mio/latest/src/mio/lib.rs.html#1-277)\nExpand description\nMio is a fast, low-level I/O library for Rust focusing on non-blocking APIs and event notification for building high performance I/O apps with as little overhead as possible over the OS abstractions.\n## [\u00a7](https://docs.rs/mio/latest/mio/#usage)Usage\nUsing Mio starts by creating a [`Poll`](https://docs.rs/mio/latest/mio/struct.Poll.html), which reads events from the OS and puts them into [`Events`](https://docs.rs/mio/latest/mio/event/struct.Events.html). You can handle I/O events from the OS with it.\nFor more detail, see [`Poll`](https://docs.rs/mio/latest/mio/struct.Poll.html).\n### [\u00a7](https://docs.rs/mio/latest/mio/#examples)Examples\nExamples can found in the `examples` directory of the source code, or [on GitHub](https://github.com/tokio-rs/mio/tree/master/examples).\n### [\u00a7](https://docs.rs/mio/latest/mio/#guide)Guide\nA getting started guide is available in the [`guide`](https://docs.rs/mio/latest/mio/guide/index.html \"mod mio::guide\") module.\n### [\u00a7](https://docs.rs/mio/latest/mio/#available-features)Available features\nThe available features are described in the [`features`](https://docs.rs/mio/latest/mio/features/index.html \"mod mio::features\") module.\n## Re-exports[\u00a7](https://docs.rs/mio/latest/mio/#reexports)\n\n`pub use event::Events[](https://docs.rs/mio/latest/mio/event/struct.Events.html \"struct mio::event::Events\");`\n\n## Modules[\u00a7](https://docs.rs/mio/latest/mio/#modules)\n\n[event](https://docs.rs/mio/latest/mio/event/index.html \"mod mio::event\")\n    Readiness event types and utilities.\n\n[features](https://docs.rs/mio/latest/mio/features/index.html \"mod mio::features\")\n    Mio\u2019s optional features.\n\n[guide](https://docs.rs/mio/latest/mio/guide/index.html \"mod mio::guide\")\n    Getting started guide.\n\n[net](https://docs.rs/mio/latest/mio/net/index.html \"mod mio::net\")`net`\n    Networking primitives.\n\n[unix](https://docs.rs/mio/latest/mio/unix/index.html \"mod mio::unix\")Unix and `os-ext`\n    Unix only extensions.\n## Structs[\u00a7](https://docs.rs/mio/latest/mio/#structs)\n\n[Interest](https://docs.rs/mio/latest/mio/struct.Interest.html \"struct mio::Interest\")\n    Interest used in registering.\n\n[Poll](https://docs.rs/mio/latest/mio/struct.Poll.html \"struct mio::Poll\")\n    Polls for readiness events on all registered values.\n\n[Registry](https://docs.rs/mio/latest/mio/struct.Registry.html \"struct mio::Registry\")\n    Registers I/O resources.\n\n[Token](https://docs.rs/mio/latest/mio/struct.Token.html \"struct mio::Token\")\n    Associates readiness events with [`event::Source`](https://docs.rs/mio/latest/mio/event/trait.Source.html)s.\n\n[Waker](https://docs.rs/mio/latest/mio/struct.Waker.html \"struct mio::Waker\")\n    Waker allows cross-thread waking of [`Poll`](https://docs.rs/mio/latest/mio/struct.Poll.html).\n",
            "markdown_with_citations": "[](https://docs.rs/mio/latest/mio/all.html \"show sidebar\")\n# Crate mioCopy item path\nSettings\u27e81\u27e9\nHelp\u27e82\u27e9\nSummarySource\u27e83\u27e9\nExpand description\nMio is a fast, low-level I/O library for Rust focusing on non-blocking APIs and event notification for building high performance I/O apps with as little overhead as possible over the OS abstractions.\n## \u00a7\u27e84\u27e9Usage\nUsing Mio starts by creating a `Poll`\u27e85\u27e9, which reads events from the OS and puts them into `Events`\u27e86\u27e9. You can handle I/O events from the OS with it.\nFor more detail, see `Poll`\u27e85\u27e9.\n### \u00a7\u27e87\u27e9Examples\nExamples can found in the `examples` directory of the source code, or on GitHub\u27e88\u27e9.\n### \u00a7\u27e89\u27e9Guide\nA getting started guide is available in the `guide`\u27e810\u27e9 module.\n### \u00a7\u27e811\u27e9Available features\nThe available features are described in the `features`\u27e812\u27e9 module.\n## Re-exports\u00a7\u27e813\u27e9\n\n`pub use event::Events[](https://docs.rs/mio/latest/mio/event/struct.Events.html \"struct mio::event::Events\");`\n\n## Modules\u00a7\u27e814\u27e9\n\nevent\u27e815\u27e9\n    Readiness event types and utilities.\n\nfeatures\u27e812\u27e9\n    Mio\u2019s optional features.\n\nguide\u27e810\u27e9\n    Getting started guide.\n\nnet\u27e816\u27e9`net`\n    Networking primitives.\n\nunix\u27e817\u27e9Unix and `os-ext`\n    Unix only extensions.\n## Structs\u00a7\u27e818\u27e9\n\nInterest\u27e819\u27e9\n    Interest used in registering.\n\nPoll\u27e85\u27e9\n    Polls for readiness events on all registered values.\n\nRegistry\u27e820\u27e9\n    Registers I/O resources.\n\nToken\u27e821\u27e9\n    Associates readiness events with `event::Source`\u27e822\u27e9s.\n\nWaker\u27e823\u27e9\n    Waker allows cross-thread waking of `Poll`\u27e85\u27e9.\n",
            "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://docs.rs/mio/latest/settings.html: Settings\n\u27e82\u27e9 https://docs.rs/mio/latest/help.html: Help\n\u27e83\u27e9 https://docs.rs/mio/latest/src/mio/lib.rs.html#1-277: Source\n\u27e84\u27e9 https://docs.rs/mio/latest/mio/#usage: \u00a7\n\u27e85\u27e9 https://docs.rs/mio/latest/mio/struct.Poll.html: `Poll`\n\u27e86\u27e9 https://docs.rs/mio/latest/mio/event/struct.Events.html: `Events`\n\u27e87\u27e9 https://docs.rs/mio/latest/mio/#examples: \u00a7\n\u27e88\u27e9 https://github.com/tokio-rs/mio/tree/master/examples: on GitHub\n\u27e89\u27e9 https://docs.rs/mio/latest/mio/#guide: \u00a7\n\u27e810\u27e9 https://docs.rs/mio/latest/mio/guide/index.html: mod mio::guide - `guide`\n\u27e811\u27e9 https://docs.rs/mio/latest/mio/#available-features: \u00a7\n\u27e812\u27e9 https://docs.rs/mio/latest/mio/features/index.html: mod mio::features - `features`\n\u27e813\u27e9 https://docs.rs/mio/latest/mio/#reexports: \u00a7\n\u27e814\u27e9 https://docs.rs/mio/latest/mio/#modules: \u00a7\n\u27e815\u27e9 https://docs.rs/mio/latest/mio/event/index.html: mod mio::event - event\n\u27e816\u27e9 https://docs.rs/mio/latest/mio/net/index.html: mod mio::net - net\n\u27e817\u27e9 https://docs.rs/mio/latest/mio/unix/index.html: mod mio::unix - unix\n\u27e818\u27e9 https://docs.rs/mio/latest/mio/#structs: \u00a7\n\u27e819\u27e9 https://docs.rs/mio/latest/mio/struct.Interest.html: struct mio::Interest - Interest\n\u27e820\u27e9 https://docs.rs/mio/latest/mio/struct.Registry.html: struct mio::Registry - Registry\n\u27e821\u27e9 https://docs.rs/mio/latest/mio/struct.Token.html: struct mio::Token - Token\n\u27e822\u27e9 https://docs.rs/mio/latest/mio/event/trait.Source.html: `event::Source`\n\u27e823\u27e9 https://docs.rs/mio/latest/mio/struct.Waker.html: struct mio::Waker - Waker\n",
            "fit_markdown": "",
            "fit_html": ""
          },
          "downloads": 0,
          "github_stars": 0,
          "dependencies": [],
          "features": {},
          "code_snippets": [],
          "readme_sections": {},
          "librs_downloads": null,
          "source": "crates.io",
          "enhanced_scraping": {},
          "enhanced_features": [],
          "enhanced_dependencies": [],
          "readme_summary": "The `mio` crate is a fast, low-level I/O library for Rust designed for building high-performance, non-blocking I/O applications with minimal overhead. It provides abstractions like `Poll` for event-driven I/O, `Registry` for resource registration, and `Waker` for cross-thread notifications. Key features include support for readiness events, networking primitives, and platform-specific extensions for Unix systems.",
          "feature_summary": null,
          "use_case": "Networking",
          "score": 8.0,
          "factual_counterfactual": "### Pair 1: Event Handling  \n\u2705 Factual: Mio uses a `Poll` struct to efficiently register I/O resources and monitor readiness events, enabling non-blocking I/O operations.  \n\u274c Counterfactual: Mio automatically handles all I/O events without requiring the user to create or manage a `Poll` instance.  \n\n---\n\n### Pair 2: Platform Support  \n\u2705 Factual: Mio provides platform-specific modules, such as `mio::unix` for Unix-only extensions, to leverage OS-specific features.  \n\u274c Counterfactual: Mio has built-in support for Windows-specific extensions through the `mio::windows` module.  \n\n---\n\n### Pair 3: Thread Waking  \n\u2705 Factual: Mio's `Waker` struct allows cross-thread signaling to wake up a `Poll` instance, making it suitable for multithreaded applications.  \n\u274c Counterfactual: Mio's `Waker` is designed exclusively for single-threaded applications and does not support cross-thread signaling.",
          "source_analysis": null,
          "user_behavior": null,
          "security": null
        }
      },
      "irl_score": 8.6,
      "execution_id": "exec-ea31ac1d-a0de36ce-1751266147",
      "timestamp": "2025-06-30T06:49:07.486147+00:00",
      "canon_version": "1.3.0"
    },
    "rule_zero_compliant": true
  }
]