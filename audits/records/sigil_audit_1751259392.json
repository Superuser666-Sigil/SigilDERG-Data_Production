[
  {
    "execution_id": "exec-da12ac53-d179d4f4-1751259371",
    "timestamp": "2025-06-30T04:56:11.958053+00:00",
    "sacred_chain": {
      "input_data": "bson",
      "context_sources": [
        "crates.io",
        "github.com",
        "lib.rs",
        "docs.rs"
      ],
      "reasoning_steps": [
        "Input canonicalized: 'bson' -> 'bson'",
        "Context gathered from 4 validated sources",
        "Metadata extracted: 4 fields",
        "Documentation analyzed: quality 7.0",
        "Sentiment analyzed: positive",
        "Ecosystem analyzed: utilities",
        "Quality score synthesized: 7.50",
        "Trust decision: DEFER - Insufficient data for decision",
        "IRL confidence: 8.600"
      ],
      "suggestion": "ALLOW: Positive community sentiment",
      "verdict": "DEFER",
      "audit_info": {
        "metadata": {
          "name": "bson",
          "type": "rust_crate",
          "source": "manual_input",
          "extraction_method": "irl_engine"
        },
        "sentiment": {
          "quality_score": 7.0,
          "completeness": 0.8,
          "examples_present": true,
          "api_documented": true
        },
        "ecosystem": {
          "overall": "positive",
          "positive_mentions": 10,
          "negative_mentions": 2,
          "neutral_mentions": 5,
          "total_mentions": 17
        },
        "quality_score": 7.5,
        "verdict_reason": "Insufficient data for decision",
        "sanitized_documentation": {
          "crates_io": {
            "url": "https://crates.io/crates/bson",
            "title": "bson v2.15.0",
            "content": {
              "raw_markdown": "#  bson v2.15.0\nEncoding and decoding support for BSON in Rust \n  * [ #bson ](https://crates.io/keywords/bson)\n  * [ #deserialization ](https://crates.io/keywords/deserialization)\n  * [ #mongodb ](https://crates.io/keywords/mongodb)\n  * [ #serde ](https://crates.io/keywords/serde)\n  * [ #serialization ](https://crates.io/keywords/serialization)\n\n\n  * [ Readme ](https://crates.io/crates/bson)\n  * [ 70 Versions ](https://crates.io/crates/bson/versions)\n  * [ Dependencies ](https://crates.io/crates/bson/dependencies)\n  * [ Dependents ](https://crates.io/crates/bson/reverse_dependencies)\n\n\n## Metadata\nabout 1 month ago \n2021 edition \n[ MIT ](https://choosealicense.com/licenses/mit)\n128 KiB \n## Install\nRun the following Cargo command in your project directory:\ncargo add bson\nOr add the following line to your Cargo.toml:\nbson = \"2.15.0\"\n## Repository\n[ github.com/mongodb/bson-rust ](https://github.com/mongodb/bson-rust)\n## Owners\n## Categories\n  * [Encoding](https://crates.io/categories/encoding)\n\n\n[ Report crate ](https://crates.io/support?crate=bson&inquire=crate-violation)\n### Stats Overview\n9,537,282 Downloads all time\n70 Versions published\n#### Downloads over the last 90 days\nDisplay as \nStacked \n  * Stacked \n  * Unstacked \n\n\nLoading\u2026\n",
              "markdown_with_citations": "#  bson v2.15.0\nEncoding and decoding support for BSON in Rust \n  *  #bson \u27e81\u27e9\n  *  #deserialization \u27e82\u27e9\n  *  #mongodb \u27e83\u27e9\n  *  #serde \u27e84\u27e9\n  *  #serialization \u27e85\u27e9\n\n\n  *  Readme \u27e86\u27e9\n  *  70 Versions \u27e87\u27e9\n  *  Dependencies \u27e88\u27e9\n  *  Dependents \u27e89\u27e9\n\n\n## Metadata\nabout 1 month ago \n2021 edition \n MIT \u27e810\u27e9\n128 KiB \n## Install\nRun the following Cargo command in your project directory:\ncargo add bson\nOr add the following line to your Cargo.toml:\nbson = \"2.15.0\"\n## Repository\n github.com/mongodb/bson-rust \u27e811\u27e9\n## Owners\n## Categories\n  * Encoding\u27e812\u27e9\n\n\n Report crate \u27e813\u27e9\n### Stats Overview\n9,537,282 Downloads all time\n70 Versions published\n#### Downloads over the last 90 days\nDisplay as \nStacked \n  * Stacked \n  * Unstacked \n\n\nLoading\u2026\n",
              "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://crates.io/keywords/bson:  #bson \n\u27e82\u27e9 https://crates.io/keywords/deserialization:  #deserialization \n\u27e83\u27e9 https://crates.io/keywords/mongodb:  #mongodb \n\u27e84\u27e9 https://crates.io/keywords/serde:  #serde \n\u27e85\u27e9 https://crates.io/keywords/serialization:  #serialization \n\u27e86\u27e9 https://crates.io/crates/bson:  Readme \n\u27e87\u27e9 https://crates.io/crates/bson/versions:  70 Versions \n\u27e88\u27e9 https://crates.io/crates/bson/dependencies:  Dependencies \n\u27e89\u27e9 https://crates.io/crates/bson/reverse_dependencies:  Dependents \n\u27e810\u27e9 https://choosealicense.com/licenses/mit:  MIT \n\u27e811\u27e9 https://github.com/mongodb/bson-rust:  github.com/mongodb/bson-rust \n\u27e812\u27e9 https://crates.io/categories/encoding: Encoding\n\u27e813\u27e9 https://crates.io/support?crate=bson&inquire=crate-violation:  Report crate \n",
              "fit_markdown": "",
              "fit_html": ""
            },
            "structured_data": {},
            "quality_score": 3.0,
            "extraction_method": "crawl4ai",
            "error": null,
            "metadata": {
              "doc_type": "docs",
              "content_length": 1254,
              "has_structured_data": false,
              "crawl_success": true
            },
            "timestamp": "113161.6234451"
          },
          "docs_rs": {
            "url": "https://docs.rs/bson",
            "title": "Crate bsonCopy item path",
            "content": {
              "raw_markdown": "[](https://docs.rs/bson/latest/bson/all.html \"show sidebar\")\n# Crate bsonCopy item path\n[Settings](https://docs.rs/bson/latest/settings.html)\n[Help](https://docs.rs/bson/latest/help.html)\nSummary[Source](https://docs.rs/bson/latest/src/bson/lib.rs.html#22-350)\nExpand description\nBSON, short for Binary JSON, is a binary-encoded serialization of JSON-like documents. Like JSON, BSON supports the embedding of documents and arrays within other documents and arrays. BSON also contains extensions that allow representation of data types that are not part of the JSON spec. For example, BSON has a datetime type and a binary data type.\n```\n// JSON equivalent\n{\"hello\": \"world\"}\n// BSON encoding\n\\x16\\x00\\x00\\x00          // total document size\n\\x02                // 0x02 = type String\nhello\\x00             // field name\n\\x06\\x00\\x00\\x00world\\x00     // field value\n\\x00                // 0x00 = type EOO ('end of object')\n```\n\nBSON is the primary data representation for [MongoDB](https://www.mongodb.com/), and this crate is used in the [`mongodb`](https://docs.rs/mongodb/latest/mongodb/) driver crate in its API and implementation.\nFor more information about BSON itself, see [bsonspec.org](http://bsonspec.org).\n### [\u00a7](https://docs.rs/bson/latest/bson/#installation)Installation\n#### [\u00a7](https://docs.rs/bson/latest/bson/#requirements)Requirements\n  * Rust 1.64+\n\n\n#### [\u00a7](https://docs.rs/bson/latest/bson/#importing)Importing\nThis crate is available on [crates.io](https://crates.io/crates/bson). To use it in your application, simply add it to your project\u2019s `Cargo.toml`.\n```\n[dependencies]\nbson = \"2.15.0\"\n```\n\nNote that if you are using `bson` through the `mongodb` crate, you do not need to specify it in your `Cargo.toml`, since the `mongodb` crate already re-exports it.\n##### [\u00a7](https://docs.rs/bson/latest/bson/#feature-flags)Feature Flags\nFeature| Description| Default  \n---|---|---  \n`chrono-0_4`| Enable support for v0.4 of the [`chrono`](https://docs.rs/chrono/0.4) crate in the public API.| no  \n`uuid-0_8`| Enable support for v0.8 of the [`uuid`](https://docs.rs/uuid/0.8) crate in the public API.| no  \n`uuid-1`| Enable support for v1.x of the [`uuid`](https://docs.rs/uuid/1.x) crate in the public API.| no  \n`time-0_3`| Enable support for v0.3 of the [`time`](https://docs.rs/time/0.3) crate in the public API.| no  \n`serde_with`| Enable [`serde_with`](https://docs.rs/serde_with/1.x) 1.x integrations for [`DateTime`](https://docs.rs/bson/latest/bson/struct.DateTime.html \"struct bson::DateTime\") and [`Uuid`](https://docs.rs/bson/latest/bson/struct.Uuid.html \"struct bson::Uuid\").| no  \n`serde_with-3`| Enable [`serde_with`](https://docs.rs/serde_with/3.x) 3.x integrations for [`DateTime`](https://docs.rs/bson/latest/bson/struct.DateTime.html \"struct bson::DateTime\") and [`Uuid`](https://docs.rs/bson/latest/bson/struct.Uuid.html \"struct bson::Uuid\").| no  \n`serde_path_to_error`| Enable support for error paths via integration with [`serde_path_to_error`](https://docs.rs/serde_path_to_err/latest). This is an unstable feature and any breaking changes to `serde_path_to_error` may affect usage of it via this feature.| no  \n### [\u00a7](https://docs.rs/bson/latest/bson/#bson-values)BSON values\nMany different types can be represented as a BSON value, including 32-bit and 64-bit signed integers, 64 bit floating point numbers, strings, datetimes, embedded documents, and more. To see a full list of possible BSON values, see the [BSON specification](http://bsonspec.org/spec.html). The various possible BSON values are modeled in this crate by the [`Bson`](https://docs.rs/bson/latest/bson/enum.Bson.html) enum.\n#### [\u00a7](https://docs.rs/bson/latest/bson/#creating-bson-instances)Creating [`Bson`](https://docs.rs/bson/latest/bson/enum.Bson.html) instances\n[`Bson`](https://docs.rs/bson/latest/bson/enum.Bson.html) values can be instantiated directly or via the [`bson!`](https://docs.rs/bson/latest/bson/macro.bson.html) macro:\n```\nuse bson::{bson, Bson};\nlet string = Bson::String(\"hello world\".to_string());\nlet int = Bson::Int32(5);\nlet array = Bson::Array(vec![Bson::Int32(5), Bson::Boolean(false)]);\nlet string: Bson = \"hello world\".into();\nlet int: Bson = 5i32.into();\nlet string = bson!(\"hello world\");\nlet int = bson!(5);\nlet array = bson!([5, false]);\n```\n\n[`bson!`](https://docs.rs/bson/latest/bson/macro.bson.html) has supports both array and object literals, and it automatically converts any values specified to [`Bson`](https://docs.rs/bson/latest/bson/enum.Bson.html), provided they are `Into<Bson>`.\n#### [\u00a7](https://docs.rs/bson/latest/bson/#bson-value-unwrapping)[`Bson`](https://docs.rs/bson/latest/bson/enum.Bson.html) value unwrapping\n[`Bson`](https://docs.rs/bson/latest/bson/enum.Bson.html) has a number of helper methods for accessing the underlying native Rust types. These helpers can be useful in circumstances in which the specific type of a BSON value is known ahead of time.\ne.g.:\n```\nuse bson::{bson, Bson};\nlet value = Bson::Int32(5);\nlet int = value.as_i32(); // Some(5)\nlet bool = value.as_bool(); // None\nlet value = bson!([true]);\nlet array = value.as_array(); // Some(&Vec<Bson>)\n```\n\n### [\u00a7](https://docs.rs/bson/latest/bson/#bson-documents)BSON documents\nBSON documents are ordered maps of UTF-8 encoded strings to BSON values. They are logically similar to JSON objects in that they can contain subdocuments, arrays, and values of several different types. This crate models BSON documents via the [`Document`](https://docs.rs/bson/latest/bson/document/struct.Document.html) struct.\n#### [\u00a7](https://docs.rs/bson/latest/bson/#creating-documents)Creating [`Document`](https://docs.rs/bson/latest/bson/document/struct.Document.html)s\n[`Document`](https://docs.rs/bson/latest/bson/document/struct.Document.html)s can be created directly either from a byte reader containing BSON data or via the `doc!` macro:\n```\nuse bson::{doc, Document};\nuse std::io::Read;\nlet mut bytes = hex::decode(\"0C0000001069000100000000\").unwrap();\nlet doc = Document::from_reader(&mut bytes.as_slice()).unwrap(); // { \"i\": 1 }\nlet doc = doc! {\n  \"hello\": \"world\",\n  \"int\": 5,\n  \"subdoc\": { \"cat\": true },\n};\n```\n\n[`doc!`](https://docs.rs/bson/latest/bson/macro.doc.html) works similarly to [`bson!`](https://docs.rs/bson/latest/bson/macro.bson.html), except that it always returns a [`Document`](https://docs.rs/bson/latest/bson/document/struct.Document.html) rather than a [`Bson`](https://docs.rs/bson/latest/bson/enum.Bson.html).\n#### [\u00a7](https://docs.rs/bson/latest/bson/#document-member-access)[`Document`](https://docs.rs/bson/latest/bson/document/struct.Document.html) member access\n[`Document`](https://docs.rs/bson/latest/bson/document/struct.Document.html) has a number of methods on it to facilitate member access:\n```\nuse bson::doc;\nlet doc = doc! {\n  \"string\": \"string\",\n  \"bool\": true,\n  \"i32\": 5,\n  \"doc\": { \"x\": true },\n};\n// attempt get values as untyped Bson\nlet none = doc.get(\"asdfadsf\"); // None\nlet value = doc.get(\"string\"); // Some(&Bson::String(\"string\"))\n// attempt to get values with explicit typing\nlet string = doc.get_str(\"string\"); // Ok(\"string\")\nlet subdoc = doc.get_document(\"doc\"); // Some(Document({ \"x\": true }))\nlet error = doc.get_i64(\"i32\"); // Err(...)\n```\n\n### [\u00a7](https://docs.rs/bson/latest/bson/#modeling-bson-with-strongly-typed-data-structures)Modeling BSON with strongly typed data structures\nWhile it is possible to work with documents and BSON values directly, it will often introduce a lot of boilerplate for verifying the necessary keys are present and their values are the correct types. [`serde`](https://serde.rs/) provides a powerful way of mapping BSON data into Rust data structures largely automatically, removing the need for all that boilerplate.\ne.g.:\n```\nuse serde::{Deserialize, Serialize};\nuse bson::{bson, Bson};\n#[derive(Serialize, Deserialize)]\nstruct Person {\n  name: String,\n  age: i32,\n  phones: Vec<String>,\n}\n// Some BSON input data as a [`Bson`].\nlet bson_data: Bson = bson!({\n  \"name\": \"John Doe\",\n  \"age\": 43,\n  \"phones\": [\n    \"+44 1234567\",\n    \"+44 2345678\"\n  ]\n});\n// Deserialize the Person struct from the BSON data, automatically\n// verifying that the necessary keys are present and that they are of\n// the correct types.\nlet mut person: Person = bson::from_bson(bson_data).unwrap();\n// Do things just like with any other Rust data structure.\nprintln!(\"Redacting {}'s record.\", person.name);\nperson.name = \"REDACTED\".to_string();\n// Get a serialized version of the input data as a [`Bson`].\nlet redacted_bson = bson::to_bson(&person).unwrap();\n```\n\nAny types that implement [`Serialize`](https://docs.rs/serde/1.0.219/x86_64-unknown-linux-gnu/serde/ser/trait.Serialize.html \"trait serde::ser::Serialize\") and [`Deserialize`](https://docs.rs/serde/1.0.219/x86_64-unknown-linux-gnu/serde/de/trait.Deserialize.html \"trait serde::de::Deserialize\") can be used in this way. Doing so helps separate the \u201cbusiness logic\u201d that operates over the data from the (de)serialization logic that translates the data to/from its serialized form. This can lead to more clear and concise code that is also less error prone.\nWhen serializing values that cannot be represented in BSON, or deserialzing from BSON that does not match the format expected by the type, the default error will only report the specific field that failed. To aid debugging, enabling the `serde_path_to_error` feature will [augment errors](https://docs.rs/bson/latest/bson/de/enum.Error.html#variant.WithPath \"variant bson::de::Error::WithPath\") with the full field path from root object to failing field. This feature does incur a small CPU and memory overhead during (de)serialization and should be enabled with care in performance-sensitive environments.\n### [\u00a7](https://docs.rs/bson/latest/bson/#working-with-datetimes)Working with datetimes\nThe BSON format includes a datetime type, which is modeled in this crate by the [`DateTime`](https://docs.rs/bson/latest/bson/struct.DateTime.html \"struct bson::DateTime\") struct, and the [`Serialize`](https://docs.rs/serde/1.0.219/x86_64-unknown-linux-gnu/serde/ser/trait.Serialize.html \"trait serde::ser::Serialize\") and [`Deserialize`](https://docs.rs/serde/1.0.219/x86_64-unknown-linux-gnu/serde/de/trait.Deserialize.html \"trait serde::de::Deserialize\") implementations for this struct produce and parse BSON datetimes when serializing to or deserializing from BSON. The popular crate [`chrono`](https://docs.rs/bson/latest/bson/docs.rs/chrono) also provides a [`DateTime`](https://docs.rs/bson/latest/bson/struct.DateTime.html \"struct bson::DateTime\") type, but its [`Serialize`](https://docs.rs/serde/1.0.219/x86_64-unknown-linux-gnu/serde/ser/trait.Serialize.html \"trait serde::ser::Serialize\") and [`Deserialize`](https://docs.rs/serde/1.0.219/x86_64-unknown-linux-gnu/serde/de/trait.Deserialize.html \"trait serde::de::Deserialize\") implementations operate on strings instead, so when using it with BSON, the BSON datetime type is not used. To work around this, the `chrono-0_4` feature flag can be enabled. This flag exposes a number of convenient conversions between [`bson::DateTime`](https://docs.rs/bson/latest/bson/struct.DateTime.html \"struct bson::DateTime\") and [`chrono::DateTime`](https://docs.rs/chrono/0.4.41/x86_64-unknown-linux-gnu/chrono/datetime/struct.DateTime.html \"struct chrono::datetime::DateTime\"), including the [`serde_helpers::chrono_datetime_as_bson_datetime`](https://docs.rs/bson/latest/bson/serde_helpers/chrono_datetime_as_bson_datetime/index.html \"mod bson::serde_helpers::chrono_datetime_as_bson_datetime\") serde helper, which can be used to (de)serialize [`chrono::DateTime`](https://docs.rs/chrono/0.4.41/x86_64-unknown-linux-gnu/chrono/datetime/struct.DateTime.html \"struct chrono::datetime::DateTime\")s to/from BSON datetimes, and the `From<chrono::DateTime>` implementation for [`Bson`](https://docs.rs/bson/latest/bson/enum.Bson.html \"enum bson::Bson\"), which allows [`chrono::DateTime`](https://docs.rs/chrono/0.4.41/x86_64-unknown-linux-gnu/chrono/datetime/struct.DateTime.html \"struct chrono::datetime::DateTime\") values to be used in the `doc!` and `bson!` macros.\ne.g.\n```\nuse serde::{Serialize, Deserialize};\nuse bson::doc;\n#[derive(Serialize, Deserialize)]\nstruct Foo {\n  // serializes as a BSON datetime.\n  date_time: bson::DateTime,\n  // serializes as an RFC 3339 / ISO-8601 string.\n  chrono_datetime: chrono::DateTime<chrono::Utc>,\n  // serializes as a BSON datetime.\n  // this requires the \"chrono-0_4\" feature flag\n  #[serde(with = \"bson::serde_helpers::chrono_datetime_as_bson_datetime\")]\n  chrono_as_bson: chrono::DateTime<chrono::Utc>,\n}\n// this automatic conversion also requires the \"chrono-0_4\" feature flag\nlet query = doc! {\n  \"created_at\": chrono::Utc::now(),\n};\n```\n\n### [\u00a7](https://docs.rs/bson/latest/bson/#working-with-uuids)Working with UUIDs\nSee the module level documentation for the [`uuid`](https://docs.rs/bson/latest/bson/uuid/index.html \"mod bson::uuid\") module.\n### [\u00a7](https://docs.rs/bson/latest/bson/#wasm-support)WASM support\nThis crate compiles to the `wasm32-unknown-unknown` target; when doing so, the `js-sys` crate is used for the current timestamp component of `ObjectId` generation.\n### [\u00a7](https://docs.rs/bson/latest/bson/#minimum-supported-rust-version-msrv)Minimum supported Rust version (MSRV)\nThe MSRV for this crate is currently 1.81. This will be rarely be increased, and if it ever is, it will only happen in a minor or major version release.\n## Re-exports[\u00a7](https://docs.rs/bson/latest/bson/#reexports)\n\n`pub use self::de::from_reader_utf8_lossy[](https://docs.rs/bson/latest/bson/de/fn.from_reader_utf8_lossy.html \"fn bson::de::from_reader_utf8_lossy\");`\n\n\n`pub use self::de::from_slice_utf8_lossy[](https://docs.rs/bson/latest/bson/de/fn.from_slice_utf8_lossy.html \"fn bson::de::from_slice_utf8_lossy\");`\n\n## Modules[\u00a7](https://docs.rs/bson/latest/bson/#modules)\n\n[binary](https://docs.rs/bson/latest/bson/binary/index.html \"mod bson::binary\")\n\n\n[datetime](https://docs.rs/bson/latest/bson/datetime/index.html \"mod bson::datetime\")\n    Module containing functionality related to BSON DateTimes. For more information, see the documentation for the [`DateTime`](https://docs.rs/bson/latest/bson/struct.DateTime.html \"struct bson::DateTime\") type.\n\n[de](https://docs.rs/bson/latest/bson/de/index.html \"mod bson::de\")\n    Deserializer\n\n[decimal128](https://docs.rs/bson/latest/bson/decimal128/index.html \"mod bson::decimal128\")\n    [BSON Decimal128](https://github.com/mongodb/specifications/blob/master/source/bson-decimal128/decimal128.rst) data type representation\n\n[document](https://docs.rs/bson/latest/bson/document/index.html \"mod bson::document\")\n    A BSON document represented as an associative HashMap with insertion ordering.\n\n[extjson](https://docs.rs/bson/latest/bson/extjson/index.html \"mod bson::extjson\")\n    Deserialization and serialization of [MongoDB Extended JSON v2](https://www.mongodb.com/docs/manual/reference/mongodb-extended-json/)\n\n[oid](https://docs.rs/bson/latest/bson/oid/index.html \"mod bson::oid\")\n    Module containing functionality related to BSON ObjectIds. For more information, see the documentation for the [`ObjectId`](https://docs.rs/bson/latest/bson/oid/struct.ObjectId.html \"struct bson::oid::ObjectId\") type.\n\n[raw](https://docs.rs/bson/latest/bson/raw/index.html \"mod bson::raw\")\n    An API for interacting with raw BSON bytes.\n\n[ser](https://docs.rs/bson/latest/bson/ser/index.html \"mod bson::ser\")\n    Serializer\n\n[serde_helpers](https://docs.rs/bson/latest/bson/serde_helpers/index.html \"mod bson::serde_helpers\")\n    Collection of helper functions for serializing to and deserializing from BSON using Serde\n\n[spec](https://docs.rs/bson/latest/bson/spec/index.html \"mod bson::spec\")\n    Constants derived from the [BSON Specification Version 1.1](http://bsonspec.org/spec.html).\n\n[uuid](https://docs.rs/bson/latest/bson/uuid/index.html \"mod bson::uuid\")\n    UUID support for BSON.\n## Macros[\u00a7](https://docs.rs/bson/latest/bson/#macros)\n\n[bson](https://docs.rs/bson/latest/bson/macro.bson.html \"macro bson::bson\")\n    Construct a bson::BSON value from a literal.\n\n[doc](https://docs.rs/bson/latest/bson/macro.doc.html \"macro bson::doc\")\n    Construct a bson::Document value.\n\n[rawbson](https://docs.rs/bson/latest/bson/macro.rawbson.html \"macro bson::rawbson\")\n    Construct a [`crate::RawBson`](https://docs.rs/bson/latest/bson/enum.RawBson.html \"enum bson::RawBson\") value from a literal.\n\n[rawdoc](https://docs.rs/bson/latest/bson/macro.rawdoc.html \"macro bson::rawdoc\")\n    Construct a [`crate::RawDocumentBuf`](https://docs.rs/bson/latest/bson/struct.RawDocumentBuf.html \"struct bson::RawDocumentBuf\") value.\n## Structs[\u00a7](https://docs.rs/bson/latest/bson/#structs)\n\n[Binary](https://docs.rs/bson/latest/bson/struct.Binary.html \"struct bson::Binary\")\n    Represents a BSON binary value.\n\n[DateTime](https://docs.rs/bson/latest/bson/struct.DateTime.html \"struct bson::DateTime\")\n    Struct representing a BSON datetime. Note: BSON datetimes have millisecond precision.\n\n[DbPointer](https://docs.rs/bson/latest/bson/struct.DbPointer.html \"struct bson::DbPointer\")\n    Represents a DBPointer. (Deprecated)\n\n[Decimal128](https://docs.rs/bson/latest/bson/struct.Decimal128.html \"struct bson::Decimal128\")\n    Struct representing a BSON Decimal128 type.\n\n[Deserializer](https://docs.rs/bson/latest/bson/struct.Deserializer.html \"struct bson::Deserializer\")\n    Serde Deserializer\n\n[DeserializerOptions](https://docs.rs/bson/latest/bson/struct.DeserializerOptions.html \"struct bson::DeserializerOptions\")\n    Options used to configure a [`Deserializer`](https://docs.rs/bson/latest/bson/struct.Deserializer.html \"struct bson::Deserializer\"). These can also be passed into [`crate::from_bson_with_options`](https://docs.rs/bson/latest/bson/fn.from_bson_with_options.html \"fn bson::from_bson_with_options\") and [`crate::from_document_with_options`](https://docs.rs/bson/latest/bson/fn.from_document_with_options.html \"fn bson::from_document_with_options\").\n\n[Document](https://docs.rs/bson/latest/bson/struct.Document.html \"struct bson::Document\")\n    A BSON document represented as an associative HashMap with insertion ordering.\n\n[JavaScriptCodeWithScope](https://docs.rs/bson/latest/bson/struct.JavaScriptCodeWithScope.html \"struct bson::JavaScriptCodeWithScope\")\n    Represents a BSON code with scope value.\n\n[RawArray](https://docs.rs/bson/latest/bson/struct.RawArray.html \"struct bson::RawArray\")\n    A slice of a BSON document containing a BSON array value (akin to [`std::str`](https://doc.rust-lang.org/nightly/alloc/str/index.html \"mod alloc::str\")). This can be retrieved from a [`RawDocument`](https://docs.rs/bson/latest/bson/struct.RawDocument.html \"struct bson::RawDocument\") via [`RawDocument::get`](https://docs.rs/bson/latest/bson/struct.RawDocument.html#method.get \"method bson::RawDocument::get\").\n\n[RawArrayBuf](https://docs.rs/bson/latest/bson/struct.RawArrayBuf.html \"struct bson::RawArrayBuf\")\n    An owned BSON array value (akin to [`std::path::PathBuf`](https://doc.rust-lang.org/nightly/std/path/struct.PathBuf.html \"struct std::path::PathBuf\")), backed by a buffer of raw BSON bytes. This type can be used to construct owned array values, which can be used to append to [`RawDocumentBuf`](https://docs.rs/bson/latest/bson/struct.RawDocumentBuf.html \"struct bson::RawDocumentBuf\") or as a field in a [`Deserialize`](https://docs.rs/serde/1.0.219/x86_64-unknown-linux-gnu/serde/de/trait.Deserialize.html \"trait serde::de::Deserialize\") struct.\n\n[RawBinaryRef](https://docs.rs/bson/latest/bson/struct.RawBinaryRef.html \"struct bson::RawBinaryRef\")\n    A BSON binary value referencing raw bytes stored elsewhere.\n\n[RawDbPointerRef](https://docs.rs/bson/latest/bson/struct.RawDbPointerRef.html \"struct bson::RawDbPointerRef\")\n    A BSON DB pointer value referencing raw bytes stored elesewhere.\n\n[RawDocument](https://docs.rs/bson/latest/bson/struct.RawDocument.html \"struct bson::RawDocument\")\n    A slice of a BSON document (akin to [`std::str`](https://doc.rust-lang.org/nightly/alloc/str/index.html \"mod alloc::str\")). This can be created from a [`RawDocumentBuf`](https://docs.rs/bson/latest/bson/struct.RawDocumentBuf.html \"struct bson::RawDocumentBuf\") or any type that contains valid BSON data, including static binary literals, [`Vec<u8>`](https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html \"struct alloc::vec::Vec\"), or arrays.\n\n[RawDocumentBuf](https://docs.rs/bson/latest/bson/struct.RawDocumentBuf.html \"struct bson::RawDocumentBuf\")\n    An owned BSON document (akin to [`std::path::PathBuf`](https://doc.rust-lang.org/nightly/std/path/struct.PathBuf.html \"struct std::path::PathBuf\")), backed by a buffer of raw BSON bytes. This can be created from a `Vec<u8>` or a [`crate::Document`](https://docs.rs/bson/latest/bson/struct.Document.html \"struct bson::Document\").\n\n[RawJavaScriptCodeWithScope](https://docs.rs/bson/latest/bson/struct.RawJavaScriptCodeWithScope.html \"struct bson::RawJavaScriptCodeWithScope\")\n    A BSON \u201ccode with scope\u201d value backed by owned raw BSON.\n\n[RawJavaScriptCodeWithScopeRef](https://docs.rs/bson/latest/bson/struct.RawJavaScriptCodeWithScopeRef.html \"struct bson::RawJavaScriptCodeWithScopeRef\")\n    A BSON \u201ccode with scope\u201d value referencing raw bytes stored elsewhere.\n\n[RawRegexRef](https://docs.rs/bson/latest/bson/struct.RawRegexRef.html \"struct bson::RawRegexRef\")\n    A BSON regex referencing raw bytes stored elsewhere.\n\n[Regex](https://docs.rs/bson/latest/bson/struct.Regex.html \"struct bson::Regex\")\n    Represents a BSON regular expression value.\n\n[Serializer](https://docs.rs/bson/latest/bson/struct.Serializer.html \"struct bson::Serializer\")\n    Serde Serializer\n\n[SerializerOptions](https://docs.rs/bson/latest/bson/struct.SerializerOptions.html \"struct bson::SerializerOptions\")\n    Options used to configure a [`Serializer`](https://docs.rs/bson/latest/bson/struct.Serializer.html \"struct bson::Serializer\").\n\n[Timestamp](https://docs.rs/bson/latest/bson/struct.Timestamp.html \"struct bson::Timestamp\")\n    Represents a BSON timestamp value.\n\n[Uuid](https://docs.rs/bson/latest/bson/struct.Uuid.html \"struct bson::Uuid\")\n    A struct modeling a BSON UUID value (i.e. a Binary value with subtype 4).\n## Enums[\u00a7](https://docs.rs/bson/latest/bson/#enums)\n\n[Bson](https://docs.rs/bson/latest/bson/enum.Bson.html \"enum bson::Bson\")\n    Possible BSON value types.\n\n[RawBson](https://docs.rs/bson/latest/bson/enum.RawBson.html \"enum bson::RawBson\")\n    A BSON value backed by owned raw BSON bytes.\n\n[RawBsonRef](https://docs.rs/bson/latest/bson/enum.RawBsonRef.html \"enum bson::RawBsonRef\")\n    A BSON value referencing raw bytes stored elsewhere.\n\n[UuidRepresentation](https://docs.rs/bson/latest/bson/enum.UuidRepresentation.html \"enum bson::UuidRepresentation\")\n    Enum of the possible representations to use when converting between [`Uuid`](https://docs.rs/bson/latest/bson/struct.Uuid.html \"struct bson::Uuid\") and [`Binary`](https://docs.rs/bson/latest/bson/struct.Binary.html \"struct bson::Binary\"). This enum is necessary because the different drivers used to have different ways of encoding UUIDs, with the BSON subtype: 0x03 (UUID old). If a UUID has been serialized with a particular representation, it MUST be deserialized with the same representation.\n## Functions[\u00a7](https://docs.rs/bson/latest/bson/#functions)\n\n[from_bson](https://docs.rs/bson/latest/bson/fn.from_bson.html \"fn bson::from_bson\")\n    Deserialize a `T` from the provided [`Bson`](https://docs.rs/bson/latest/bson/enum.Bson.html \"enum bson::Bson\") value.\n\n[from_bson_with_options](https://docs.rs/bson/latest/bson/fn.from_bson_with_options.html \"fn bson::from_bson_with_options\")\n    Deserialize a `T` from the provided [`Bson`](https://docs.rs/bson/latest/bson/enum.Bson.html \"enum bson::Bson\") value, configuring the underlying deserializer with the provided options.\n\n[from_document](https://docs.rs/bson/latest/bson/fn.from_document.html \"fn bson::from_document\")\n    Deserialize a `T` from the provided [`Document`](https://docs.rs/bson/latest/bson/struct.Document.html \"struct bson::Document\").\n\n[from_document_with_options](https://docs.rs/bson/latest/bson/fn.from_document_with_options.html \"fn bson::from_document_with_options\")\n    Deserialize a `T` from the provided [`Document`](https://docs.rs/bson/latest/bson/struct.Document.html \"struct bson::Document\"), configuring the underlying deserializer with the provided options.\n\n[from_reader](https://docs.rs/bson/latest/bson/fn.from_reader.html \"fn bson::from_reader\")\n    Deserialize an instance of type `T` from an I/O stream of BSON.\n\n[from_slice](https://docs.rs/bson/latest/bson/fn.from_slice.html \"fn bson::from_slice\")\n    Deserialize an instance of type `T` from a slice of BSON bytes.\n\n[to_bson](https://docs.rs/bson/latest/bson/fn.to_bson.html \"fn bson::to_bson\")\n    Encode a `T` Serializable into a [`Bson`](https://docs.rs/bson/latest/bson/enum.Bson.html \"enum bson::Bson\") value.\n\n[to_bson_with_options](https://docs.rs/bson/latest/bson/fn.to_bson_with_options.html \"fn bson::to_bson_with_options\")\n    Encode a `T` into a [`Bson`](https://docs.rs/bson/latest/bson/enum.Bson.html \"enum bson::Bson\") value, configuring the underlying serializer with the provided options.\n\n[to_document](https://docs.rs/bson/latest/bson/fn.to_document.html \"fn bson::to_document\")\n    Encode a `T` Serializable into a BSON [`Document`](https://docs.rs/bson/latest/bson/struct.Document.html \"struct bson::Document\").\n\n[to_document_with_options](https://docs.rs/bson/latest/bson/fn.to_document_with_options.html \"fn bson::to_document_with_options\")\n    Encode a `T` into a [`Document`](https://docs.rs/bson/latest/bson/struct.Document.html \"struct bson::Document\"), configuring the underlying serializer with the provided options.\n\n[to_raw_document_buf](https://docs.rs/bson/latest/bson/fn.to_raw_document_buf.html \"fn bson::to_raw_document_buf\")\n    Serialize the given `T` as a [`RawDocumentBuf`](https://docs.rs/bson/latest/bson/struct.RawDocumentBuf.html \"struct bson::RawDocumentBuf\").\n\n[to_vec](https://docs.rs/bson/latest/bson/fn.to_vec.html \"fn bson::to_vec\")\n    Serialize the given `T` as a BSON byte vector.\n## Type Aliases[\u00a7](https://docs.rs/bson/latest/bson/#types)\n\n[Array](https://docs.rs/bson/latest/bson/type.Array.html \"type bson::Array\")\n    Alias for `Vec<Bson>`.\n",
              "markdown_with_citations": "[](https://docs.rs/bson/latest/bson/all.html \"show sidebar\")\n# Crate bsonCopy item path\nSettings\u27e81\u27e9\nHelp\u27e82\u27e9\nSummarySource\u27e83\u27e9\nExpand description\nBSON, short for Binary JSON, is a binary-encoded serialization of JSON-like documents. Like JSON, BSON supports the embedding of documents and arrays within other documents and arrays. BSON also contains extensions that allow representation of data types that are not part of the JSON spec. For example, BSON has a datetime type and a binary data type.\n```\n// JSON equivalent\n{\"hello\": \"world\"}\n// BSON encoding\n\\x16\\x00\\x00\\x00          // total document size\n\\x02                // 0x02 = type String\nhello\\x00             // field name\n\\x06\\x00\\x00\\x00world\\x00     // field value\n\\x00                // 0x00 = type EOO ('end of object')\n```\n\nBSON is the primary data representation for MongoDB\u27e84\u27e9, and this crate is used in the `mongodb`\u27e85\u27e9 driver crate in its API and implementation.\nFor more information about BSON itself, see bsonspec.org\u27e86\u27e9.\n### \u00a7\u27e87\u27e9Installation\n#### \u00a7\u27e88\u27e9Requirements\n  * Rust 1.64+\n\n\n#### \u00a7\u27e89\u27e9Importing\nThis crate is available on crates.io\u27e810\u27e9. To use it in your application, simply add it to your project\u2019s `Cargo.toml`.\n```\n[dependencies]\nbson = \"2.15.0\"\n```\n\nNote that if you are using `bson` through the `mongodb` crate, you do not need to specify it in your `Cargo.toml`, since the `mongodb` crate already re-exports it.\n##### \u00a7\u27e811\u27e9Feature Flags\nFeature| Description| Default  \n---|---|---  \n`chrono-0_4`| Enable support for v0.4 of the `chrono`\u27e812\u27e9 crate in the public API.| no  \n`uuid-0_8`| Enable support for v0.8 of the `uuid`\u27e813\u27e9 crate in the public API.| no  \n`uuid-1`| Enable support for v1.x of the `uuid`\u27e814\u27e9 crate in the public API.| no  \n`time-0_3`| Enable support for v0.3 of the `time`\u27e815\u27e9 crate in the public API.| no  \n`serde_with`| Enable `serde_with`\u27e816\u27e9 1.x integrations for `DateTime`\u27e817\u27e9 and `Uuid`\u27e818\u27e9.| no  \n`serde_with-3`| Enable `serde_with`\u27e819\u27e9 3.x integrations for `DateTime`\u27e817\u27e9 and `Uuid`\u27e818\u27e9.| no  \n`serde_path_to_error`| Enable support for error paths via integration with `serde_path_to_error`\u27e820\u27e9. This is an unstable feature and any breaking changes to `serde_path_to_error` may affect usage of it via this feature.| no  \n### \u00a7\u27e821\u27e9BSON values\nMany different types can be represented as a BSON value, including 32-bit and 64-bit signed integers, 64 bit floating point numbers, strings, datetimes, embedded documents, and more. To see a full list of possible BSON values, see the BSON specification\u27e822\u27e9. The various possible BSON values are modeled in this crate by the `Bson`\u27e823\u27e9 enum.\n#### \u00a7\u27e824\u27e9Creating `Bson`\u27e823\u27e9 instances\n`Bson`\u27e823\u27e9 values can be instantiated directly or via the `bson!`\u27e825\u27e9 macro:\n```\nuse bson::{bson, Bson};\nlet string = Bson::String(\"hello world\".to_string());\nlet int = Bson::Int32(5);\nlet array = Bson::Array(vec![Bson::Int32(5), Bson::Boolean(false)]);\nlet string: Bson = \"hello world\".into();\nlet int: Bson = 5i32.into();\nlet string = bson!(\"hello world\");\nlet int = bson!(5);\nlet array = bson!([5, false]);\n```\n\n`bson!`\u27e825\u27e9 has supports both array and object literals, and it automatically converts any values specified to `Bson`\u27e823\u27e9, provided they are `Into<Bson>`.\n#### \u00a7\u27e826\u27e9`Bson`\u27e823\u27e9 value unwrapping\n`Bson`\u27e823\u27e9 has a number of helper methods for accessing the underlying native Rust types. These helpers can be useful in circumstances in which the specific type of a BSON value is known ahead of time.\ne.g.:\n```\nuse bson::{bson, Bson};\nlet value = Bson::Int32(5);\nlet int = value.as_i32(); // Some(5)\nlet bool = value.as_bool(); // None\nlet value = bson!([true]);\nlet array = value.as_array(); // Some(&Vec<Bson>)\n```\n\n### \u00a7\u27e827\u27e9BSON documents\nBSON documents are ordered maps of UTF-8 encoded strings to BSON values. They are logically similar to JSON objects in that they can contain subdocuments, arrays, and values of several different types. This crate models BSON documents via the `Document`\u27e828\u27e9 struct.\n#### \u00a7\u27e829\u27e9Creating `Document`\u27e828\u27e9s\n`Document`\u27e828\u27e9s can be created directly either from a byte reader containing BSON data or via the `doc!` macro:\n```\nuse bson::{doc, Document};\nuse std::io::Read;\nlet mut bytes = hex::decode(\"0C0000001069000100000000\").unwrap();\nlet doc = Document::from_reader(&mut bytes.as_slice()).unwrap(); // { \"i\": 1 }\nlet doc = doc! {\n  \"hello\": \"world\",\n  \"int\": 5,\n  \"subdoc\": { \"cat\": true },\n};\n```\n\n`doc!`\u27e830\u27e9 works similarly to `bson!`\u27e825\u27e9, except that it always returns a `Document`\u27e828\u27e9 rather than a `Bson`\u27e823\u27e9.\n#### \u00a7\u27e831\u27e9`Document`\u27e828\u27e9 member access\n`Document`\u27e828\u27e9 has a number of methods on it to facilitate member access:\n```\nuse bson::doc;\nlet doc = doc! {\n  \"string\": \"string\",\n  \"bool\": true,\n  \"i32\": 5,\n  \"doc\": { \"x\": true },\n};\n// attempt get values as untyped Bson\nlet none = doc.get(\"asdfadsf\"); // None\nlet value = doc.get(\"string\"); // Some(&Bson::String(\"string\"))\n// attempt to get values with explicit typing\nlet string = doc.get_str(\"string\"); // Ok(\"string\")\nlet subdoc = doc.get_document(\"doc\"); // Some(Document({ \"x\": true }))\nlet error = doc.get_i64(\"i32\"); // Err(...)\n```\n\n### \u00a7\u27e832\u27e9Modeling BSON with strongly typed data structures\nWhile it is possible to work with documents and BSON values directly, it will often introduce a lot of boilerplate for verifying the necessary keys are present and their values are the correct types. `serde`\u27e833\u27e9 provides a powerful way of mapping BSON data into Rust data structures largely automatically, removing the need for all that boilerplate.\ne.g.:\n```\nuse serde::{Deserialize, Serialize};\nuse bson::{bson, Bson};\n#[derive(Serialize, Deserialize)]\nstruct Person {\n  name: String,\n  age: i32,\n  phones: Vec<String>,\n}\n// Some BSON input data as a [`Bson`].\nlet bson_data: Bson = bson!({\n  \"name\": \"John Doe\",\n  \"age\": 43,\n  \"phones\": [\n    \"+44 1234567\",\n    \"+44 2345678\"\n  ]\n});\n// Deserialize the Person struct from the BSON data, automatically\n// verifying that the necessary keys are present and that they are of\n// the correct types.\nlet mut person: Person = bson::from_bson(bson_data).unwrap();\n// Do things just like with any other Rust data structure.\nprintln!(\"Redacting {}'s record.\", person.name);\nperson.name = \"REDACTED\".to_string();\n// Get a serialized version of the input data as a [`Bson`].\nlet redacted_bson = bson::to_bson(&person).unwrap();\n```\n\nAny types that implement `Serialize`\u27e834\u27e9 and `Deserialize`\u27e835\u27e9 can be used in this way. Doing so helps separate the \u201cbusiness logic\u201d that operates over the data from the (de)serialization logic that translates the data to/from its serialized form. This can lead to more clear and concise code that is also less error prone.\nWhen serializing values that cannot be represented in BSON, or deserialzing from BSON that does not match the format expected by the type, the default error will only report the specific field that failed. To aid debugging, enabling the `serde_path_to_error` feature will augment errors\u27e836\u27e9 with the full field path from root object to failing field. This feature does incur a small CPU and memory overhead during (de)serialization and should be enabled with care in performance-sensitive environments.\n### \u00a7\u27e837\u27e9Working with datetimes\nThe BSON format includes a datetime type, which is modeled in this crate by the `DateTime`\u27e817\u27e9 struct, and the `Serialize`\u27e834\u27e9 and `Deserialize`\u27e835\u27e9 implementations for this struct produce and parse BSON datetimes when serializing to or deserializing from BSON. The popular crate `chrono`\u27e838\u27e9 also provides a `DateTime`\u27e817\u27e9 type, but its `Serialize`\u27e834\u27e9 and `Deserialize`\u27e835\u27e9 implementations operate on strings instead, so when using it with BSON, the BSON datetime type is not used. To work around this, the `chrono-0_4` feature flag can be enabled. This flag exposes a number of convenient conversions between `bson::DateTime`\u27e817\u27e9 and `chrono::DateTime`\u27e839\u27e9, including the `serde_helpers::chrono_datetime_as_bson_datetime`\u27e840\u27e9 serde helper, which can be used to (de)serialize `chrono::DateTime`\u27e839\u27e9s to/from BSON datetimes, and the `From<chrono::DateTime>` implementation for `Bson`\u27e823\u27e9, which allows `chrono::DateTime`\u27e839\u27e9 values to be used in the `doc!` and `bson!` macros.\ne.g.\n```\nuse serde::{Serialize, Deserialize};\nuse bson::doc;\n#[derive(Serialize, Deserialize)]\nstruct Foo {\n  // serializes as a BSON datetime.\n  date_time: bson::DateTime,\n  // serializes as an RFC 3339 / ISO-8601 string.\n  chrono_datetime: chrono::DateTime<chrono::Utc>,\n  // serializes as a BSON datetime.\n  // this requires the \"chrono-0_4\" feature flag\n  #[serde(with = \"bson::serde_helpers::chrono_datetime_as_bson_datetime\")]\n  chrono_as_bson: chrono::DateTime<chrono::Utc>,\n}\n// this automatic conversion also requires the \"chrono-0_4\" feature flag\nlet query = doc! {\n  \"created_at\": chrono::Utc::now(),\n};\n```\n\n### \u00a7\u27e841\u27e9Working with UUIDs\nSee the module level documentation for the `uuid`\u27e842\u27e9 module.\n### \u00a7\u27e843\u27e9WASM support\nThis crate compiles to the `wasm32-unknown-unknown` target; when doing so, the `js-sys` crate is used for the current timestamp component of `ObjectId` generation.\n### \u00a7\u27e844\u27e9Minimum supported Rust version (MSRV)\nThe MSRV for this crate is currently 1.81. This will be rarely be increased, and if it ever is, it will only happen in a minor or major version release.\n## Re-exports\u00a7\u27e845\u27e9\n\n`pub use self::de::from_reader_utf8_lossy[](https://docs.rs/bson/latest/bson/de/fn.from_reader_utf8_lossy.html \"fn bson::de::from_reader_utf8_lossy\");`\n\n\n`pub use self::de::from_slice_utf8_lossy[](https://docs.rs/bson/latest/bson/de/fn.from_slice_utf8_lossy.html \"fn bson::de::from_slice_utf8_lossy\");`\n\n## Modules\u00a7\u27e846\u27e9\n\nbinary\u27e847\u27e9\n\n\ndatetime\u27e848\u27e9\n    Module containing functionality related to BSON DateTimes. For more information, see the documentation for the `DateTime`\u27e817\u27e9 type.\n\nde\u27e849\u27e9\n    Deserializer\n\ndecimal128\u27e850\u27e9\n    BSON Decimal128\u27e851\u27e9 data type representation\n\ndocument\u27e852\u27e9\n    A BSON document represented as an associative HashMap with insertion ordering.\n\nextjson\u27e853\u27e9\n    Deserialization and serialization of MongoDB Extended JSON v2\u27e854\u27e9\n\noid\u27e855\u27e9\n    Module containing functionality related to BSON ObjectIds. For more information, see the documentation for the `ObjectId`\u27e856\u27e9 type.\n\nraw\u27e857\u27e9\n    An API for interacting with raw BSON bytes.\n\nser\u27e858\u27e9\n    Serializer\n\nserde_helpers\u27e859\u27e9\n    Collection of helper functions for serializing to and deserializing from BSON using Serde\n\nspec\u27e860\u27e9\n    Constants derived from the BSON Specification Version 1.1\u27e822\u27e9.\n\nuuid\u27e842\u27e9\n    UUID support for BSON.\n## Macros\u00a7\u27e861\u27e9\n\nbson\u27e825\u27e9\n    Construct a bson::BSON value from a literal.\n\ndoc\u27e830\u27e9\n    Construct a bson::Document value.\n\nrawbson\u27e862\u27e9\n    Construct a `crate::RawBson`\u27e863\u27e9 value from a literal.\n\nrawdoc\u27e864\u27e9\n    Construct a `crate::RawDocumentBuf`\u27e865\u27e9 value.\n## Structs\u00a7\u27e866\u27e9\n\nBinary\u27e867\u27e9\n    Represents a BSON binary value.\n\nDateTime\u27e817\u27e9\n    Struct representing a BSON datetime. Note: BSON datetimes have millisecond precision.\n\nDbPointer\u27e868\u27e9\n    Represents a DBPointer. (Deprecated)\n\nDecimal128\u27e869\u27e9\n    Struct representing a BSON Decimal128 type.\n\nDeserializer\u27e870\u27e9\n    Serde Deserializer\n\nDeserializerOptions\u27e871\u27e9\n    Options used to configure a `Deserializer`\u27e870\u27e9. These can also be passed into `crate::from_bson_with_options`\u27e872\u27e9 and `crate::from_document_with_options`\u27e873\u27e9.\n\nDocument\u27e874\u27e9\n    A BSON document represented as an associative HashMap with insertion ordering.\n\nJavaScriptCodeWithScope\u27e875\u27e9\n    Represents a BSON code with scope value.\n\nRawArray\u27e876\u27e9\n    A slice of a BSON document containing a BSON array value (akin to `std::str`\u27e877\u27e9). This can be retrieved from a `RawDocument`\u27e878\u27e9 via `RawDocument::get`\u27e879\u27e9.\n\nRawArrayBuf\u27e880\u27e9\n    An owned BSON array value (akin to `std::path::PathBuf`\u27e881\u27e9), backed by a buffer of raw BSON bytes. This type can be used to construct owned array values, which can be used to append to `RawDocumentBuf`\u27e865\u27e9 or as a field in a `Deserialize`\u27e835\u27e9 struct.\n\nRawBinaryRef\u27e882\u27e9\n    A BSON binary value referencing raw bytes stored elsewhere.\n\nRawDbPointerRef\u27e883\u27e9\n    A BSON DB pointer value referencing raw bytes stored elesewhere.\n\nRawDocument\u27e878\u27e9\n    A slice of a BSON document (akin to `std::str`\u27e877\u27e9). This can be created from a `RawDocumentBuf`\u27e865\u27e9 or any type that contains valid BSON data, including static binary literals, `Vec<u8>`\u27e884\u27e9, or arrays.\n\nRawDocumentBuf\u27e865\u27e9\n    An owned BSON document (akin to `std::path::PathBuf`\u27e881\u27e9), backed by a buffer of raw BSON bytes. This can be created from a `Vec<u8>` or a `crate::Document`\u27e874\u27e9.\n\nRawJavaScriptCodeWithScope\u27e885\u27e9\n    A BSON \u201ccode with scope\u201d value backed by owned raw BSON.\n\nRawJavaScriptCodeWithScopeRef\u27e886\u27e9\n    A BSON \u201ccode with scope\u201d value referencing raw bytes stored elsewhere.\n\nRawRegexRef\u27e887\u27e9\n    A BSON regex referencing raw bytes stored elsewhere.\n\nRegex\u27e888\u27e9\n    Represents a BSON regular expression value.\n\nSerializer\u27e889\u27e9\n    Serde Serializer\n\nSerializerOptions\u27e890\u27e9\n    Options used to configure a `Serializer`\u27e889\u27e9.\n\nTimestamp\u27e891\u27e9\n    Represents a BSON timestamp value.\n\nUuid\u27e818\u27e9\n    A struct modeling a BSON UUID value (i.e. a Binary value with subtype 4).\n## Enums\u00a7\u27e892\u27e9\n\nBson\u27e823\u27e9\n    Possible BSON value types.\n\nRawBson\u27e863\u27e9\n    A BSON value backed by owned raw BSON bytes.\n\nRawBsonRef\u27e893\u27e9\n    A BSON value referencing raw bytes stored elsewhere.\n\nUuidRepresentation\u27e894\u27e9\n    Enum of the possible representations to use when converting between `Uuid`\u27e818\u27e9 and `Binary`\u27e867\u27e9. This enum is necessary because the different drivers used to have different ways of encoding UUIDs, with the BSON subtype: 0x03 (UUID old). If a UUID has been serialized with a particular representation, it MUST be deserialized with the same representation.\n## Functions\u00a7\u27e895\u27e9\n\nfrom_bson\u27e896\u27e9\n    Deserialize a `T` from the provided `Bson`\u27e823\u27e9 value.\n\nfrom_bson_with_options\u27e872\u27e9\n    Deserialize a `T` from the provided `Bson`\u27e823\u27e9 value, configuring the underlying deserializer with the provided options.\n\nfrom_document\u27e897\u27e9\n    Deserialize a `T` from the provided `Document`\u27e874\u27e9.\n\nfrom_document_with_options\u27e873\u27e9\n    Deserialize a `T` from the provided `Document`\u27e874\u27e9, configuring the underlying deserializer with the provided options.\n\nfrom_reader\u27e898\u27e9\n    Deserialize an instance of type `T` from an I/O stream of BSON.\n\nfrom_slice\u27e899\u27e9\n    Deserialize an instance of type `T` from a slice of BSON bytes.\n\nto_bson\u27e8100\u27e9\n    Encode a `T` Serializable into a `Bson`\u27e823\u27e9 value.\n\nto_bson_with_options\u27e8101\u27e9\n    Encode a `T` into a `Bson`\u27e823\u27e9 value, configuring the underlying serializer with the provided options.\n\nto_document\u27e8102\u27e9\n    Encode a `T` Serializable into a BSON `Document`\u27e874\u27e9.\n\nto_document_with_options\u27e8103\u27e9\n    Encode a `T` into a `Document`\u27e874\u27e9, configuring the underlying serializer with the provided options.\n\nto_raw_document_buf\u27e8104\u27e9\n    Serialize the given `T` as a `RawDocumentBuf`\u27e865\u27e9.\n\nto_vec\u27e8105\u27e9\n    Serialize the given `T` as a BSON byte vector.\n## Type Aliases\u00a7\u27e8106\u27e9\n\nArray\u27e8107\u27e9\n    Alias for `Vec<Bson>`.\n",
              "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://docs.rs/bson/latest/settings.html: Settings\n\u27e82\u27e9 https://docs.rs/bson/latest/help.html: Help\n\u27e83\u27e9 https://docs.rs/bson/latest/src/bson/lib.rs.html#22-350: Source\n\u27e84\u27e9 https://www.mongodb.com/: MongoDB\n\u27e85\u27e9 https://docs.rs/mongodb/latest/mongodb/: `mongodb`\n\u27e86\u27e9 http://bsonspec.org: bsonspec.org\n\u27e87\u27e9 https://docs.rs/bson/latest/bson/#installation: \u00a7\n\u27e88\u27e9 https://docs.rs/bson/latest/bson/#requirements: \u00a7\n\u27e89\u27e9 https://docs.rs/bson/latest/bson/#importing: \u00a7\n\u27e810\u27e9 https://crates.io/crates/bson: crates.io\n\u27e811\u27e9 https://docs.rs/bson/latest/bson/#feature-flags: \u00a7\n\u27e812\u27e9 https://docs.rs/chrono/0.4: `chrono`\n\u27e813\u27e9 https://docs.rs/uuid/0.8: `uuid`\n\u27e814\u27e9 https://docs.rs/uuid/1.x: `uuid`\n\u27e815\u27e9 https://docs.rs/time/0.3: `time`\n\u27e816\u27e9 https://docs.rs/serde_with/1.x: `serde_with`\n\u27e817\u27e9 https://docs.rs/bson/latest/bson/struct.DateTime.html: struct bson::DateTime - `DateTime`\n\u27e818\u27e9 https://docs.rs/bson/latest/bson/struct.Uuid.html: struct bson::Uuid - `Uuid`\n\u27e819\u27e9 https://docs.rs/serde_with/3.x: `serde_with`\n\u27e820\u27e9 https://docs.rs/serde_path_to_err/latest: `serde_path_to_error`\n\u27e821\u27e9 https://docs.rs/bson/latest/bson/#bson-values: \u00a7\n\u27e822\u27e9 http://bsonspec.org/spec.html: BSON specification\n\u27e823\u27e9 https://docs.rs/bson/latest/bson/enum.Bson.html: `Bson`\n\u27e824\u27e9 https://docs.rs/bson/latest/bson/#creating-bson-instances: \u00a7\n\u27e825\u27e9 https://docs.rs/bson/latest/bson/macro.bson.html: `bson!`\n\u27e826\u27e9 https://docs.rs/bson/latest/bson/#bson-value-unwrapping: \u00a7\n\u27e827\u27e9 https://docs.rs/bson/latest/bson/#bson-documents: \u00a7\n\u27e828\u27e9 https://docs.rs/bson/latest/bson/document/struct.Document.html: `Document`\n\u27e829\u27e9 https://docs.rs/bson/latest/bson/#creating-documents: \u00a7\n\u27e830\u27e9 https://docs.rs/bson/latest/bson/macro.doc.html: `doc!`\n\u27e831\u27e9 https://docs.rs/bson/latest/bson/#document-member-access: \u00a7\n\u27e832\u27e9 https://docs.rs/bson/latest/bson/#modeling-bson-with-strongly-typed-data-structures: \u00a7\n\u27e833\u27e9 https://serde.rs/: `serde`\n\u27e834\u27e9 https://docs.rs/serde/1.0.219/x86_64-unknown-linux-gnu/serde/ser/trait.Serialize.html: trait serde::ser::Serialize - `Serialize`\n\u27e835\u27e9 https://docs.rs/serde/1.0.219/x86_64-unknown-linux-gnu/serde/de/trait.Deserialize.html: trait serde::de::Deserialize - `Deserialize`\n\u27e836\u27e9 https://docs.rs/bson/latest/bson/de/enum.Error.html#variant.WithPath: variant bson::de::Error::WithPath - augment errors\n\u27e837\u27e9 https://docs.rs/bson/latest/bson/#working-with-datetimes: \u00a7\n\u27e838\u27e9 https://docs.rs/bson/latest/bson/docs.rs/chrono: `chrono`\n\u27e839\u27e9 https://docs.rs/chrono/0.4.41/x86_64-unknown-linux-gnu/chrono/datetime/struct.DateTime.html: struct chrono::datetime::DateTime - `chrono::DateTime`\n\u27e840\u27e9 https://docs.rs/bson/latest/bson/serde_helpers/chrono_datetime_as_bson_datetime/index.html: mod bson::serde_helpers::chrono_datetime_as_bson_datetime - `serde_helpers::chrono_datetime_as_bson_datetime`\n\u27e841\u27e9 https://docs.rs/bson/latest/bson/#working-with-uuids: \u00a7\n\u27e842\u27e9 https://docs.rs/bson/latest/bson/uuid/index.html: mod bson::uuid - `uuid`\n\u27e843\u27e9 https://docs.rs/bson/latest/bson/#wasm-support: \u00a7\n\u27e844\u27e9 https://docs.rs/bson/latest/bson/#minimum-supported-rust-version-msrv: \u00a7\n\u27e845\u27e9 https://docs.rs/bson/latest/bson/#reexports: \u00a7\n\u27e846\u27e9 https://docs.rs/bson/latest/bson/#modules: \u00a7\n\u27e847\u27e9 https://docs.rs/bson/latest/bson/binary/index.html: mod bson::binary - binary\n\u27e848\u27e9 https://docs.rs/bson/latest/bson/datetime/index.html: mod bson::datetime - datetime\n\u27e849\u27e9 https://docs.rs/bson/latest/bson/de/index.html: mod bson::de - de\n\u27e850\u27e9 https://docs.rs/bson/latest/bson/decimal128/index.html: mod bson::decimal128 - decimal128\n\u27e851\u27e9 https://github.com/mongodb/specifications/blob/master/source/bson-decimal128/decimal128.rst: BSON Decimal128\n\u27e852\u27e9 https://docs.rs/bson/latest/bson/document/index.html: mod bson::document - document\n\u27e853\u27e9 https://docs.rs/bson/latest/bson/extjson/index.html: mod bson::extjson - extjson\n\u27e854\u27e9 https://www.mongodb.com/docs/manual/reference/mongodb-extended-json/: MongoDB Extended JSON v2\n\u27e855\u27e9 https://docs.rs/bson/latest/bson/oid/index.html: mod bson::oid - oid\n\u27e856\u27e9 https://docs.rs/bson/latest/bson/oid/struct.ObjectId.html: struct bson::oid::ObjectId - `ObjectId`\n\u27e857\u27e9 https://docs.rs/bson/latest/bson/raw/index.html: mod bson::raw - raw\n\u27e858\u27e9 https://docs.rs/bson/latest/bson/ser/index.html: mod bson::ser - ser\n\u27e859\u27e9 https://docs.rs/bson/latest/bson/serde_helpers/index.html: mod bson::serde_helpers - serde_helpers\n\u27e860\u27e9 https://docs.rs/bson/latest/bson/spec/index.html: mod bson::spec - spec\n\u27e861\u27e9 https://docs.rs/bson/latest/bson/#macros: \u00a7\n\u27e862\u27e9 https://docs.rs/bson/latest/bson/macro.rawbson.html: macro bson::rawbson - rawbson\n\u27e863\u27e9 https://docs.rs/bson/latest/bson/enum.RawBson.html: enum bson::RawBson - `crate::RawBson`\n\u27e864\u27e9 https://docs.rs/bson/latest/bson/macro.rawdoc.html: macro bson::rawdoc - rawdoc\n\u27e865\u27e9 https://docs.rs/bson/latest/bson/struct.RawDocumentBuf.html: struct bson::RawDocumentBuf - `crate::RawDocumentBuf`\n\u27e866\u27e9 https://docs.rs/bson/latest/bson/#structs: \u00a7\n\u27e867\u27e9 https://docs.rs/bson/latest/bson/struct.Binary.html: struct bson::Binary - Binary\n\u27e868\u27e9 https://docs.rs/bson/latest/bson/struct.DbPointer.html: struct bson::DbPointer - DbPointer\n\u27e869\u27e9 https://docs.rs/bson/latest/bson/struct.Decimal128.html: struct bson::Decimal128 - Decimal128\n\u27e870\u27e9 https://docs.rs/bson/latest/bson/struct.Deserializer.html: struct bson::Deserializer - Deserializer\n\u27e871\u27e9 https://docs.rs/bson/latest/bson/struct.DeserializerOptions.html: struct bson::DeserializerOptions - DeserializerOptions\n\u27e872\u27e9 https://docs.rs/bson/latest/bson/fn.from_bson_with_options.html: fn bson::from_bson_with_options - `crate::from_bson_with_options`\n\u27e873\u27e9 https://docs.rs/bson/latest/bson/fn.from_document_with_options.html: fn bson::from_document_with_options - `crate::from_document_with_options`\n\u27e874\u27e9 https://docs.rs/bson/latest/bson/struct.Document.html: struct bson::Document - Document\n\u27e875\u27e9 https://docs.rs/bson/latest/bson/struct.JavaScriptCodeWithScope.html: struct bson::JavaScriptCodeWithScope - JavaScriptCodeWithScope\n\u27e876\u27e9 https://docs.rs/bson/latest/bson/struct.RawArray.html: struct bson::RawArray - RawArray\n\u27e877\u27e9 https://doc.rust-lang.org/nightly/alloc/str/index.html: mod alloc::str - `std::str`\n\u27e878\u27e9 https://docs.rs/bson/latest/bson/struct.RawDocument.html: struct bson::RawDocument - `RawDocument`\n\u27e879\u27e9 https://docs.rs/bson/latest/bson/struct.RawDocument.html#method.get: method bson::RawDocument::get - `RawDocument::get`\n\u27e880\u27e9 https://docs.rs/bson/latest/bson/struct.RawArrayBuf.html: struct bson::RawArrayBuf - RawArrayBuf\n\u27e881\u27e9 https://doc.rust-lang.org/nightly/std/path/struct.PathBuf.html: struct std::path::PathBuf - `std::path::PathBuf`\n\u27e882\u27e9 https://docs.rs/bson/latest/bson/struct.RawBinaryRef.html: struct bson::RawBinaryRef - RawBinaryRef\n\u27e883\u27e9 https://docs.rs/bson/latest/bson/struct.RawDbPointerRef.html: struct bson::RawDbPointerRef - RawDbPointerRef\n\u27e884\u27e9 https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html: struct alloc::vec::Vec - `Vec<u8>`\n\u27e885\u27e9 https://docs.rs/bson/latest/bson/struct.RawJavaScriptCodeWithScope.html: struct bson::RawJavaScriptCodeWithScope - RawJavaScriptCodeWithScope\n\u27e886\u27e9 https://docs.rs/bson/latest/bson/struct.RawJavaScriptCodeWithScopeRef.html: struct bson::RawJavaScriptCodeWithScopeRef - RawJavaScriptCodeWithScopeRef\n\u27e887\u27e9 https://docs.rs/bson/latest/bson/struct.RawRegexRef.html: struct bson::RawRegexRef - RawRegexRef\n\u27e888\u27e9 https://docs.rs/bson/latest/bson/struct.Regex.html: struct bson::Regex - Regex\n\u27e889\u27e9 https://docs.rs/bson/latest/bson/struct.Serializer.html: struct bson::Serializer - Serializer\n\u27e890\u27e9 https://docs.rs/bson/latest/bson/struct.SerializerOptions.html: struct bson::SerializerOptions - SerializerOptions\n\u27e891\u27e9 https://docs.rs/bson/latest/bson/struct.Timestamp.html: struct bson::Timestamp - Timestamp\n\u27e892\u27e9 https://docs.rs/bson/latest/bson/#enums: \u00a7\n\u27e893\u27e9 https://docs.rs/bson/latest/bson/enum.RawBsonRef.html: enum bson::RawBsonRef - RawBsonRef\n\u27e894\u27e9 https://docs.rs/bson/latest/bson/enum.UuidRepresentation.html: enum bson::UuidRepresentation - UuidRepresentation\n\u27e895\u27e9 https://docs.rs/bson/latest/bson/#functions: \u00a7\n\u27e896\u27e9 https://docs.rs/bson/latest/bson/fn.from_bson.html: fn bson::from_bson - from_bson\n\u27e897\u27e9 https://docs.rs/bson/latest/bson/fn.from_document.html: fn bson::from_document - from_document\n\u27e898\u27e9 https://docs.rs/bson/latest/bson/fn.from_reader.html: fn bson::from_reader - from_reader\n\u27e899\u27e9 https://docs.rs/bson/latest/bson/fn.from_slice.html: fn bson::from_slice - from_slice\n\u27e8100\u27e9 https://docs.rs/bson/latest/bson/fn.to_bson.html: fn bson::to_bson - to_bson\n\u27e8101\u27e9 https://docs.rs/bson/latest/bson/fn.to_bson_with_options.html: fn bson::to_bson_with_options - to_bson_with_options\n\u27e8102\u27e9 https://docs.rs/bson/latest/bson/fn.to_document.html: fn bson::to_document - to_document\n\u27e8103\u27e9 https://docs.rs/bson/latest/bson/fn.to_document_with_options.html: fn bson::to_document_with_options - to_document_with_options\n\u27e8104\u27e9 https://docs.rs/bson/latest/bson/fn.to_raw_document_buf.html: fn bson::to_raw_document_buf - to_raw_document_buf\n\u27e8105\u27e9 https://docs.rs/bson/latest/bson/fn.to_vec.html: fn bson::to_vec - to_vec\n\u27e8106\u27e9 https://docs.rs/bson/latest/bson/#types: \u00a7\n\u27e8107\u27e9 https://docs.rs/bson/latest/bson/type.Array.html: type bson::Array - Array\n",
              "fit_markdown": "",
              "fit_html": ""
            },
            "structured_data": {},
            "quality_score": 4.0,
            "extraction_method": "crawl4ai",
            "error": null,
            "metadata": {
              "doc_type": "docs",
              "content_length": 26372,
              "has_structured_data": false,
              "crawl_success": true
            },
            "timestamp": "113162.407373"
          },
          "lib_rs": {
            "url": "https://lib.rs/crates/bson",
            "title": "Untitled",
            "content": {
              "raw_markdown": "###  [68 releases](https://lib.rs/crates/bson/versions) (26 stable)\n2.15.0 |  May 20, 2025   \n---|---  \n2.14.0 |  Mar 13, 2025   \n2.13.0 |  Sep 19, 2024   \n2.11.0 |  Jun 5, 2024   \n0.1.2 |  Jun 24, 2015   \n#**13** in [Encoding](https://lib.rs/encoding \"Encoding and/or decoding data from one data format to another.\")\nDownload history 81445/week @ 2025-03-09 82715/week @ 2025-03-16 73233/week @ 2025-03-23 68318/week @ 2025-03-30 73970/week @ 2025-04-06 68548/week @ 2025-04-13 69132/week @ 2025-04-20 75162/week @ 2025-04-27 72934/week @ 2025-05-04 73307/week @ 2025-05-11 82737/week @ 2025-05-18 76468/week @ 2025-05-25 77138/week @ 2025-06-01 82101/week @ 2025-06-08 82992/week @ 2025-06-15 89817/week @ 2025-06-22\n**335,406** downloads per month Used in [**516** crates (252 directly)](https://lib.rs/crates/bson/rev)\n**MIT** license \n640KB  14K  SLoC\n# bson\n[![crates.io](https://img.shields.io/crates/v/bson.svg)](https://crates.io/crates/bson) [![docs.rs](https://img.gs/czjpqfbdkz/full/https://docs.rs/mongodb/badge.svg)](https://docs.rs/bson) [![crates.io](https://img.shields.io/crates/l/bson.svg)](https://crates.io/crates/bson)\nEncoding and decoding support for BSON in Rust\n## Index\n  * [Installation](https://lib.rs/crates/bson#readme-installation)\n    * [Requirements](https://lib.rs/crates/bson#readme-requirements)\n    * [Importing](https://lib.rs/crates/bson#readme-importing)\n      * [Feature flags](https://lib.rs/crates/bson#readme-feature-flags)\n  * [Useful links](https://lib.rs/crates/bson#readme-useful-links)\n  * [Overview of BSON Format](https://lib.rs/crates/bson#readme-overview-of-the-bson-format)\n  * [Usage](https://lib.rs/crates/bson#readme-usage)\n    * [BSON Values](https://lib.rs/crates/bson#readme-bson-values)\n    * [BSON Documents](https://lib.rs/crates/bson#readme-bson-documents)\n    * [Modeling BSON with strongly typed data structures](https://lib.rs/crates/bson#readme-modeling-bson-with-strongly-typed-data-structures)\n    * [Working with datetimes](https://lib.rs/crates/bson#readme-working-with-datetimes)\n    * [Working with UUIDs](https://lib.rs/crates/bson#readme-working-with-uuids)\n    * [WASM support](https://lib.rs/crates/bson#readme-wasm-support)\n  * [Contributing](https://lib.rs/crates/bson#readme-contributing)\n  * [Running the Tests](https://lib.rs/crates/bson#readme-running-the-tests)\n  * [Continuous Integration](https://lib.rs/crates/bson#readme-continuous-integration)\n\n\n## Useful links\n  * [API Documentation](https://docs.rs/bson/)\n  * [Serde Documentation](https://serde.rs/)\n\n\n## Installation\n### Requirements\n  * Rust 1.48+\n\n\n### Importing\nThis crate is available on [crates.io](https://crates.io/crates/bson). To use it in your application, simply add it to your project's ``Cargo.toml``.\n```\n```[``dependencies``]`\n`bson ``=` ``\"`2.15.0`\"``\n``\n```\n\nNote that if you are using ``bson`` through the ``mongodb`` crate, you do not need to specify it in your ``Cargo.toml``, since the ``mongodb`` crate already re-exports it.\n#### Feature Flags\nFeature | Description | Extra dependencies | Default  \n---|---|---|---  \n``chrono-0_4`` | Enable support for v0.4 of the [``chrono``](https://docs.rs/chrono/0.4) crate in the public API. | n/a | no  \n``uuid-0_8`` | Enable support for v0.8 of the [``uuid``](https://docs.rs/uuid/0.8) crate in the public API. | n/a | no  \n``uuid-1`` | Enable support for v1.x of the [``uuid``](https://docs.rs/uuid/1.0) crate in the public API. | n/a | no  \n``time-0_3`` | Enable support for v0.3 of the [``time``](https://docs.rs/time/0.3) crate in the public API. | n/a | no  \n``serde_with`` | Enable [``serde_with``](https://docs.rs/serde_with/1.x) 1.x integrations for ```bson`::``DateTime`` and ```bson`::``Uuid``. | serde_with | no  \n``serde_with-3`` | Enable [``serde_with``](https://docs.rs/serde_with/3.x) 3.x integrations for ```bson`::``DateTime`` and ```bson`::``Uuid``. | serde_with | no  \n``serde_path_to_error`` | Enable support for error paths via integration with [``serde_path_to_error``](https://docs.rs/serde_path_to_err/latest). This is an unstable feature and any breaking changes to ``serde_path_to_error`` may affect usage of it via this feature. | serde_path_to_error | no  \n``hashable`` | Implement ```core`::```hash`::``Hash`` and ```std`::```cmp`::``Eq`` on ``Bson`` and ``Document``. | n/a | no  \n``uncapped_max_size`` | Increase the maximum document size from the MongoDB cap of 16 MB to the BSON spec maximum size of 2^31 - 1 bytes. | n/a | no  \n## Overview of the BSON Format\nBSON, short for Binary JSON, is a binary-encoded serialization of JSON-like documents. Like JSON, BSON supports the embedding of documents and arrays within other documents and arrays. BSON also contains extensions that allow representation of data types that are not part of the JSON spec. For example, BSON has a datetime type and a binary data type.\n```\n`// JSON equivalent\n{\"hello\": \"world\"}\n// BSON encoding\n\\x16\\x00\\x00\\x00          // total document size\n\\x02                // 0x02 = type String\nhello\\x00             // field name\n\\x06\\x00\\x00\\x00world\\x00     // field value\n\\x00                // 0x00 = type EOO ('end of object')\n`\n```\n\nBSON is the primary data representation for [MongoDB](https://www.mongodb.com/), and this crate is used in the [``mongodb``](https://docs.rs/mongodb/latest/mongodb/) driver crate in its API and implementation.\nFor more information about BSON itself, see [bsonspec.org](http://bsonspec.org).\n## Usage\n### BSON values\nMany different types can be represented as a BSON value, including 32-bit and 64-bit signed integers, 64 bit floating point numbers, strings, datetimes, embedded documents, and more. To see a full list of possible BSON values, see the [BSON specification](http://bsonspec.org/spec.html). The various possible BSON values are modeled in this crate by the [``Bson``](https://docs.rs/bson/latest/bson/enum.Bson.html) enum.\n#### Creating [``Bson``](https://docs.rs/bson/latest/bson/enum.Bson.html) instances\n[``Bson``](https://docs.rs/bson/latest/bson/enum.Bson.html) values can be instantiated directly or via the [``bson!``](https://docs.rs/bson/latest/bson/macro.bson.html) macro:\n```\n``let` string `=` `Bson`::``String`(```\"`hello world`\"```.``to_string``(``)``)``;`\n`let` int `=` `Bson`::``Int32`(``5``)``;`\n`let` array `=` `Bson`::``Array`(``vec!``[``Bson`::``Int32`(``5``)``,` `Bson`::``Boolean`(``false``)``]``)``;`\n`let` string`:` Bson `=` ``\"`hello world`\"```.``into``(``)``;`\n`let` int`:` Bson `=` `5``i32``.``into``(``)``;`\n`let` string `=` `bson!``(```\"`hello world`\"```)``;`\n`let` int `=` `bson!``(``5``)``;`\n`let` array `=` `bson!``(``[``5``,` `false``]``)``;`\n`\n```\n\n[``bson!``](https://docs.rs/bson/latest/bson/macro.bson.html) supports both array and object literals, and it automatically converts any values specified to [``Bson``](https://docs.rs/bson/latest/bson/enum.Bson.html), provided they are ````Into``<`Bson`>````.\n#### [``Bson``](https://docs.rs/bson/latest/bson/enum.Bson.html) value unwrapping\n[``Bson``](https://docs.rs/bson/latest/bson/enum.Bson.html) has a number of helper methods for accessing the underlying native Rust types. These helpers can be useful in circumstances in which the specific type of a BSON value is known ahead of time.\ne.g.:\n```\n``let` value `=` `Bson`::``Int32`(``5``)``;`\n`let` int `=` value`.``as_i32``(``)``;` ``//` Some(5)`\n`let` `bool` `=` value`.``as_bool``(``)``;` ``//` None`\n`let` value `=` `bson!``(``[``true``]``)``;`\n`let` array `=` value`.``as_array``(``)``;` ``//` Some(&Vec<Bson>)`\n`\n```\n\n### BSON documents\nBSON documents are ordered maps of UTF-8 encoded strings to BSON values. They are logically similar to JSON objects in that they can contain subdocuments, arrays, and values of several different types. This crate models BSON documents via the [``Document``](https://docs.rs/bson/latest/bson/document/struct.Document.html) struct.\n#### Creating [``Document``](https://docs.rs/bson/latest/bson/document/struct.Document.html)s\n[``Document``](https://docs.rs/bson/latest/bson/document/struct.Document.html)s can be created directly either from a byte reader containing BSON data or via the ``doc!`` macro:\n```\n``let` `mut` bytes `=` `hex`::``decode`(```\"`0C0000001069000100000000`\"```)``.``unwrap``(``)``;`\n`let` doc `=` `Document`::``from_reader`(``&``mut` bytes`.``as_slice``(``)``)``.``unwrap``(``)``;` ``//` { \"i\": 1 }`\n`let` doc `=` `doc!` ``{`\n  ``\"`hello`\"```:` ``\"`world`\"```,`\n  ``\"`int`\"```:` `5``,`\n  ``\"`subdoc`\"```:` `{` ``\"`cat`\"```:` `true` `}``,`\n```}```;`\n`\n```\n\n[``doc!``](https://docs.rs/bson/latest/bson/macro.doc.html) works similarly to [``bson!``](https://docs.rs/bson/latest/bson/macro.bson.html), except that it always returns a [``Document``](https://docs.rs/bson/latest/bson/document/struct.Document.html) rather than a [``Bson``](https://docs.rs/bson/latest/bson/enum.Bson.html).\n#### [``Document``](https://docs.rs/bson/latest/bson/document/struct.Document.html) member access\n[``Document``](https://docs.rs/bson/latest/bson/document/struct.Document.html) has a number of methods on it to facilitate member access:\n```\n``let` doc `=` `doc!` ``{`\n  ``\"`string`\"```:` ``\"`string`\"```,`\n  ``\"`bool`\"```:` `true``,`\n  ``\"`i32`\"```:` `5``,`\n  ``\"`doc`\"```:` `{` ``\"`x`\"```:` `true` `}``,`\n```}```;`\n``//` attempt get values as untyped Bson`\n`let` none `=` doc`.``get``(```\"`asdfadsf`\"```)``;` ``//` None`\n`let` value `=` doc`.``get``(```\"`string`\"```)``;` ``//` Some(&Bson::String(\"string\"))`\n``//` attempt to get values with explicit typing`\n`let` string `=` doc`.``get_str``(```\"`string`\"```)``;` ``//` Ok(\"string\")`\n`let` subdoc `=` doc`.``get_document``(```\"`doc`\"```)``;` ``//` Some(Document({ \"x\": true }))`\n`let` error `=` doc`.``get_i64``(```\"`i32`\"```)``;` ``//` Err(...)`\n`\n```\n\n### Modeling BSON with strongly typed data structures\nWhile it is possible to work with documents and BSON values directly, it will often introduce a lot of boilerplate for verifying the necessary keys are present and their values are the correct types. [``serde``](https://serde.rs/) provides a powerful way of mapping BSON data into Rust data structures largely automatically, removing the need for all that boilerplate.\ne.g.:\n```\n```#``[``derive```(```Serialize`,` Deserialize```)```]``\n``struct` ```Person` ````{`\n  `name``:` String,\n  `age``:` `i32`,\n  `phones``:` ``Vec``<``String``>``,\n```}```\n``//` Some BSON input data as a `Bson`.`\n`let` bson_data`:` Bson `=` `bson!``(```{`\n  ``\"`name`\"```:` ``\"`John Doe`\"```,`\n  ``\"`age`\"```:` `43``,`\n  ``\"`phones`\"```:` `[`\n    ``\"`+44 1234567`\"```,`\n    ``\"`+44 2345678`\"``\n  `]`\n```}```)``;`\n``//` Deserialize the Person struct from the BSON data, automatically`\n``//` verifying that the necessary keys are present and that they are of`\n``//` the correct types.`\n`let` `mut` person`:` Person `=` `bson`::``from_bson`(`bson_data`)``.``unwrap``(``)``;`\n``//` Do things just like with any other Rust data structure.`\n`println!``(```\"`Redacting `{}`'s record.`\"```,` person`.`name`)``;`\nperson`.`name `=` ``\"`REDACTED`\"```.``to_string``(``)``;`\n``//` Get a serialized version of the input data as a `Bson`.`\n`let` redacted_bson `=` `bson`::``to_bson`(``&`person`)``.``unwrap``(``)``;`\n`\n```\n\nAny types that implement ``Serialize`` and ``Deserialize`` can be used in this way. Doing so helps separate the \"business logic\" that operates over the data from the (de)serialization logic that translates the data to/from its serialized form. This can lead to more clear and concise code that is also less error prone.\nWhen serializing values that cannot be represented in BSON, or deserialzing from BSON that does not match the format expected by the type, the default error will only report the specific field that failed. To aid debugging, enabling the [``serde_path_to_error``](https://lib.rs/crates/bson#readme-feature-flags) feature will [augment errors](https://docs.rs/bson/latest/bson/de/enum.Error.html#variant.WithPath) with the full field path from root object to failing field. This feature does incur a small CPU and memory overhead during (de)serialization and should be enabled with care in performance-sensitive environments.\n### Working with datetimes\nThe BSON format includes a datetime type, which is modeled in this crate by the [```bson`::``DateTime``](https://docs.rs/bson/latest/bson/struct.DateTime.html) struct, and the ``Serialize`` and ``Deserialize`` implementations for this struct produce and parse BSON datetimes when serializing to or deserializing from BSON. The popular crate [``chrono``](https://docs.rs/chrono) also provides a ``DateTime`` type, but its ``Serialize`` and ``Deserialize`` implementations operate on strings instead, so when using it with BSON, the BSON datetime type is not used. To work around this, the ``chrono-0_4`` feature flag can be enabled. This flag exposes a number of convenient conversions between ```bson`::``DateTime`` and ```chrono`::``DateTime``, including the [``chrono_datetime_as_bson_datetime``](https://docs.rs/bson/latest/bson/serde_helpers/chrono_datetime_as_bson_datetime/index.html) serde helper, which can be used to (de)serialize ```chrono`::``DateTime``s to/from BSON datetimes, and the ````From``<``chrono`::``DateTime`>```` implementation for ``Bson``, which allows ```chrono`::``DateTime`` values to be used in the ``doc!`` and ``bson!`` macros.\ne.g.\n```\n``use` `serde`::````{`Serialize`,` Deserialize```}```;`\n``#``[``derive```(```Serialize`,` Deserialize```)```]``\n``struct` ```Foo` ````{`\n  ``//` serializes as a BSON datetime.`\n  `date_time``:` `bson`::``DateTime,\n  ``//` serializes as an RFC 3339 / ISO-8601 string.`\n  `chrono_datetime``:` `chrono`::```DateTime`<``chrono`::``Utc`>``,\n  ``//` serializes as a BSON datetime.`\n  ``//` this requires the \"chrono-0_4\" feature flag`\n  ``#``[``serde```(```with `=` ``\"`bson::serde_helpers::chrono_datetime_as_bson_datetime`\"`````)```]``\n  `chrono_as_bson``:` `chrono`::```DateTime`<``chrono`::``Utc`>``,\n```}```\n``//` this automatic conversion also requires the \"chrono-0_4\" feature flag`\n`let` query `=` `doc!` ``{`\n  ``\"`created_at`\"```:` `chrono`::```Utc`::``now`(``)``,`\n```}```;`\n`\n```\n\n### Working with UUIDs\nSee the module-level documentation for the [```bson`::``uuid`` module](https://docs.rs/bson/latest/bson/uuid).\n### WASM support\nThis crate compiles to the ``wasm32-unknown-unknown`` target; when doing so, the ``js-sys`` crate is used for the current timestamp component of ``ObjectId`` generation.\n## Minimum supported Rust version (MSRV)\nThe MSRV for this crate is currently 1.81. Increases to the MSRV will only happen in a minor or major version release, and will be to a Rust version at least six months old.\n## Contributing\nWe encourage and would happily accept contributions in the form of GitHub pull requests. Before opening one, be sure to run the tests locally; check out the [testing section](https://lib.rs/crates/bson#readme-running-the-tests) for information on how to do that. Once you open a pull request, your branch will be run against the same testing matrix that we use for our [continuous integration](https://lib.rs/crates/bson#readme-continuous-integration) system, so it is usually sufficient to only run the integration tests locally against a standalone. Remember to always run the linter tests before opening a pull request.\n## Running the tests\n### Integration and unit tests\nTo actually run the tests, you can use ``cargo`` like you would in any other crate:\n```\n```cargo``` test`` --`verbose ``#``` runs against localhost:27017\n````\n```\n\n### Linter Tests\nOur linter tests use the nightly version of ``rustfmt`` to verify that the source is formatted properly and the stable version of ``clippy`` to statically detect any common mistakes. You can use ``rustup`` to install them both:\n```\n```rustup``` component add clippy`` --`toolchain` stable`\n``rustup``` component add rustfmt`` --`toolchain` nightly`\n`\n```\n\nTo run the linter tests, run the ``check-clippy.sh`` and ``check-rustfmt.sh`` scripts in the ```.`evergreen`` directory:\n```\n```bash``` .evergreen/check-clippy.sh` `&&` ``bash``` .evergreen/check-rustfmt.sh`\n`\n```\n\n## Continuous Integration\nCommits to main are run automatically on [evergreen](https://evergreen.mongodb.com/waterfall/rust-bson).\n#### Dependencies\n~4.5\u20137MB  ~126K SLoC\n  * [ahash](https://lib.rs/crates/ahash \"0.8.0\")\n  * [base64](https://lib.rs/crates/base64 \"new\") 0.22.1\n  * [bitvec](https://lib.rs/crates/bitvec \"1.0.1\")\n  * [hex](https://lib.rs/crates/hex \"0.4.2\")\n  * [indexmap](https://lib.rs/crates/indexmap \"new\") 2.1\n  * [once_cell](https://lib.rs/crates/once_cell \"1.5.1\")\n  * [rand](https://lib.rs/crates/rand \"new\") 0.9\n  * [serde](https://lib.rs/crates/serde \"1.0\")[+derive](https://lib.rs/crates/serde/features#feature-derive)\n  * [serde_bytes](https://lib.rs/crates/serde_bytes \"0.11.5\")\n  * [serde_json](https://lib.rs/crates/serde_json \"1.0\")[+preserve_order](https://lib.rs/crates/serde_json/features#feature-preserve_order)\n  * [time](https://lib.rs/crates/time \"0.3.9\")[+formatting](https://lib.rs/crates/time/features#feature-formatting)[+parsing](https://lib.rs/crates/time/features#feature-parsing)[+macros](https://lib.rs/crates/time/features#feature-macros)[+large-dates](https://lib.rs/crates/time/features#feature-large-dates)\n  * [uuid](https://lib.rs/crates/uuid \"1.1.2\")[+serde](https://lib.rs/crates/uuid/features#feature-serde)[+v4](https://lib.rs/crates/uuid/features#feature-v4)\n  * [chrono-0_4?](https://lib.rs/crates/bson/features#feature-chrono-0_4 \"optional feature\") [chrono](https://lib.rs/crates/chrono \"0.4.15\")[+std](https://lib.rs/crates/chrono/features#feature-std)\n  * [getrandom](https://lib.rs/crates/getrandom \"outdated\") 0.2[+js](https://lib.rs/crates/getrandom/features#feature-js) wasm32 unknown\n  * [getrandom](https://lib.rs/crates/getrandom \"renamed getrandom_03, new\") 0.3[+wasm_js](https://lib.rs/crates/getrandom/features#feature-wasm_js) wasm32 unknown\n  * [js-sys](https://lib.rs/crates/js-sys \"0.3\") wasm32 unknown\n  * [ optional ](https://lib.rs/crates/bson/features#feature-serde_path_to_error \"serde_path_to_error is optional feature\") [serde_path_to_error](https://lib.rs/crates/serde_path_to_error \"0.1.16\")\n  * [ optional ](https://lib.rs/crates/bson/features#feature-serde_with \"serde_with is optional feature\") [serde_with](https://lib.rs/crates/serde_with \"obsolete\") 1.3\n  * [serde_with-3?](https://lib.rs/crates/bson/features#feature-serde_with-3 \"optional feature\") [serde_with](https://lib.rs/crates/serde_with \"renamed serde_with-3, new\") 3.1\n  * [uuid-0_8?](https://lib.rs/crates/bson/features#feature-uuid-0_8 \"optional feature\") [uuid](https://lib.rs/crates/uuid \"renamed uuid-0_8, obsolete\") 0.8.1[+serde](https://lib.rs/crates/uuid/features#feature-serde)[+v4](https://lib.rs/crates/uuid/features#feature-v4)\n\n\n  * dev  [assert_matches](https://lib.rs/crates/assert_matches \"1.2\")\n  * dev  [criterion](https://lib.rs/crates/criterion \"obsolete\") 0.3\n  * dev  [pretty_assertions](https://lib.rs/crates/pretty_assertions \"obsolete\") 0.6.1\n  * dev  [proptest](https://lib.rs/crates/proptest \"1.0.0\")\n\n\n#### [Other features](https://lib.rs/crates/bson/features)\n  * [hashable](https://lib.rs/crates/bson/features#feature-hashable)\n  * [time-0_3](https://lib.rs/crates/bson/features#feature-time-0_3)\n  * [uncapped_max_size](https://lib.rs/crates/bson/features#feature-uncapped_max_size)\n  * [uuid-1](https://lib.rs/crates/bson/features#feature-uuid-1)\n\n\n  *[SLoC]: approx. additional lines of code\n",
              "markdown_with_citations": "###  68 releases\u27e81\u27e9 (26 stable)\n2.15.0 |  May 20, 2025   \n---|---  \n2.14.0 |  Mar 13, 2025   \n2.13.0 |  Sep 19, 2024   \n2.11.0 |  Jun 5, 2024   \n0.1.2 |  Jun 24, 2015   \n#**13** in Encoding\u27e82\u27e9\nDownload history 81445/week @ 2025-03-09 82715/week @ 2025-03-16 73233/week @ 2025-03-23 68318/week @ 2025-03-30 73970/week @ 2025-04-06 68548/week @ 2025-04-13 69132/week @ 2025-04-20 75162/week @ 2025-04-27 72934/week @ 2025-05-04 73307/week @ 2025-05-11 82737/week @ 2025-05-18 76468/week @ 2025-05-25 77138/week @ 2025-06-01 82101/week @ 2025-06-08 82992/week @ 2025-06-15 89817/week @ 2025-06-22\n**335,406** downloads per month Used in **516** crates (252 directly)\u27e83\u27e9\n**MIT** license \n640KB  14K  SLoC\n# bson\n![crates.io\u27e84\u27e9](https://crates.io/crates/bson) ![docs.rs\u27e85\u27e9](https://docs.rs/bson) ![crates.io\u27e86\u27e9](https://crates.io/crates/bson)\nEncoding and decoding support for BSON in Rust\n## Index\n  * Installation\u27e87\u27e9\n    * Requirements\u27e88\u27e9\n    * Importing\u27e89\u27e9\n      * Feature flags\u27e810\u27e9\n  * Useful links\u27e811\u27e9\n  * Overview of BSON Format\u27e812\u27e9\n  * Usage\u27e813\u27e9\n    * BSON Values\u27e814\u27e9\n    * BSON Documents\u27e815\u27e9\n    * Modeling BSON with strongly typed data structures\u27e816\u27e9\n    * Working with datetimes\u27e817\u27e9\n    * Working with UUIDs\u27e818\u27e9\n    * WASM support\u27e819\u27e9\n  * Contributing\u27e820\u27e9\n  * Running the Tests\u27e821\u27e9\n  * Continuous Integration\u27e822\u27e9\n\n\n## Useful links\n  * API Documentation\u27e823\u27e9\n  * Serde Documentation\u27e824\u27e9\n\n\n## Installation\n### Requirements\n  * Rust 1.48+\n\n\n### Importing\nThis crate is available on crates.io\u27e825\u27e9. To use it in your application, simply add it to your project's ``Cargo.toml``.\n```\n```[``dependencies``]`\n`bson ``=` ``\"`2.15.0`\"``\n``\n```\n\nNote that if you are using ``bson`` through the ``mongodb`` crate, you do not need to specify it in your ``Cargo.toml``, since the ``mongodb`` crate already re-exports it.\n#### Feature Flags\nFeature | Description | Extra dependencies | Default  \n---|---|---|---  \n``chrono-0_4`` | Enable support for v0.4 of the ``chrono``\u27e826\u27e9 crate in the public API. | n/a | no  \n``uuid-0_8`` | Enable support for v0.8 of the ``uuid``\u27e827\u27e9 crate in the public API. | n/a | no  \n``uuid-1`` | Enable support for v1.x of the ``uuid``\u27e828\u27e9 crate in the public API. | n/a | no  \n``time-0_3`` | Enable support for v0.3 of the ``time``\u27e829\u27e9 crate in the public API. | n/a | no  \n``serde_with`` | Enable ``serde_with``\u27e830\u27e9 1.x integrations for ```bson`::``DateTime`` and ```bson`::``Uuid``. | serde_with | no  \n``serde_with-3`` | Enable ``serde_with``\u27e831\u27e9 3.x integrations for ```bson`::``DateTime`` and ```bson`::``Uuid``. | serde_with | no  \n``serde_path_to_error`` | Enable support for error paths via integration with ``serde_path_to_error``\u27e832\u27e9. This is an unstable feature and any breaking changes to ``serde_path_to_error`` may affect usage of it via this feature. | serde_path_to_error | no  \n``hashable`` | Implement ```core`::```hash`::``Hash`` and ```std`::```cmp`::``Eq`` on ``Bson`` and ``Document``. | n/a | no  \n``uncapped_max_size`` | Increase the maximum document size from the MongoDB cap of 16 MB to the BSON spec maximum size of 2^31 - 1 bytes. | n/a | no  \n## Overview of the BSON Format\nBSON, short for Binary JSON, is a binary-encoded serialization of JSON-like documents. Like JSON, BSON supports the embedding of documents and arrays within other documents and arrays. BSON also contains extensions that allow representation of data types that are not part of the JSON spec. For example, BSON has a datetime type and a binary data type.\n```\n`// JSON equivalent\n{\"hello\": \"world\"}\n// BSON encoding\n\\x16\\x00\\x00\\x00          // total document size\n\\x02                // 0x02 = type String\nhello\\x00             // field name\n\\x06\\x00\\x00\\x00world\\x00     // field value\n\\x00                // 0x00 = type EOO ('end of object')\n`\n```\n\nBSON is the primary data representation for MongoDB\u27e833\u27e9, and this crate is used in the ``mongodb``\u27e834\u27e9 driver crate in its API and implementation.\nFor more information about BSON itself, see bsonspec.org\u27e835\u27e9.\n## Usage\n### BSON values\nMany different types can be represented as a BSON value, including 32-bit and 64-bit signed integers, 64 bit floating point numbers, strings, datetimes, embedded documents, and more. To see a full list of possible BSON values, see the BSON specification\u27e836\u27e9. The various possible BSON values are modeled in this crate by the ``Bson``\u27e837\u27e9 enum.\n#### Creating ``Bson``\u27e837\u27e9 instances\n``Bson``\u27e837\u27e9 values can be instantiated directly or via the ``bson!``\u27e838\u27e9 macro:\n```\n``let` string `=` `Bson`::``String`(```\"`hello world`\"```.``to_string``(``)``)``;`\n`let` int `=` `Bson`::``Int32`(``5``)``;`\n`let` array `=` `Bson`::``Array`(``vec!``[``Bson`::``Int32`(``5``)``,` `Bson`::``Boolean`(``false``)``]``)``;`\n`let` string`:` Bson `=` ``\"`hello world`\"```.``into``(``)``;`\n`let` int`:` Bson `=` `5``i32``.``into``(``)``;`\n`let` string `=` `bson!``(```\"`hello world`\"```)``;`\n`let` int `=` `bson!``(``5``)``;`\n`let` array `=` `bson!``(``[``5``,` `false``]``)``;`\n`\n```\n\n``bson!``\u27e838\u27e9 supports both array and object literals, and it automatically converts any values specified to ``Bson``\u27e837\u27e9, provided they are ````Into``<`Bson`>````.\n#### ``Bson``\u27e837\u27e9 value unwrapping\n``Bson``\u27e837\u27e9 has a number of helper methods for accessing the underlying native Rust types. These helpers can be useful in circumstances in which the specific type of a BSON value is known ahead of time.\ne.g.:\n```\n``let` value `=` `Bson`::``Int32`(``5``)``;`\n`let` int `=` value`.``as_i32``(``)``;` ``//` Some(5)`\n`let` `bool` `=` value`.``as_bool``(``)``;` ``//` None`\n`let` value `=` `bson!``(``[``true``]``)``;`\n`let` array `=` value`.``as_array``(``)``;` ``//` Some(&Vec<Bson>)`\n`\n```\n\n### BSON documents\nBSON documents are ordered maps of UTF-8 encoded strings to BSON values. They are logically similar to JSON objects in that they can contain subdocuments, arrays, and values of several different types. This crate models BSON documents via the ``Document``\u27e839\u27e9 struct.\n#### Creating ``Document``\u27e839\u27e9s\n``Document``\u27e839\u27e9s can be created directly either from a byte reader containing BSON data or via the ``doc!`` macro:\n```\n``let` `mut` bytes `=` `hex`::``decode`(```\"`0C0000001069000100000000`\"```)``.``unwrap``(``)``;`\n`let` doc `=` `Document`::``from_reader`(``&``mut` bytes`.``as_slice``(``)``)``.``unwrap``(``)``;` ``//` { \"i\": 1 }`\n`let` doc `=` `doc!` ``{`\n  ``\"`hello`\"```:` ``\"`world`\"```,`\n  ``\"`int`\"```:` `5``,`\n  ``\"`subdoc`\"```:` `{` ``\"`cat`\"```:` `true` `}``,`\n```}```;`\n`\n```\n\n``doc!``\u27e840\u27e9 works similarly to ``bson!``\u27e838\u27e9, except that it always returns a ``Document``\u27e839\u27e9 rather than a ``Bson``\u27e837\u27e9.\n#### ``Document``\u27e839\u27e9 member access\n``Document``\u27e839\u27e9 has a number of methods on it to facilitate member access:\n```\n``let` doc `=` `doc!` ``{`\n  ``\"`string`\"```:` ``\"`string`\"```,`\n  ``\"`bool`\"```:` `true``,`\n  ``\"`i32`\"```:` `5``,`\n  ``\"`doc`\"```:` `{` ``\"`x`\"```:` `true` `}``,`\n```}```;`\n``//` attempt get values as untyped Bson`\n`let` none `=` doc`.``get``(```\"`asdfadsf`\"```)``;` ``//` None`\n`let` value `=` doc`.``get``(```\"`string`\"```)``;` ``//` Some(&Bson::String(\"string\"))`\n``//` attempt to get values with explicit typing`\n`let` string `=` doc`.``get_str``(```\"`string`\"```)``;` ``//` Ok(\"string\")`\n`let` subdoc `=` doc`.``get_document``(```\"`doc`\"```)``;` ``//` Some(Document({ \"x\": true }))`\n`let` error `=` doc`.``get_i64``(```\"`i32`\"```)``;` ``//` Err(...)`\n`\n```\n\n### Modeling BSON with strongly typed data structures\nWhile it is possible to work with documents and BSON values directly, it will often introduce a lot of boilerplate for verifying the necessary keys are present and their values are the correct types. ``serde``\u27e824\u27e9 provides a powerful way of mapping BSON data into Rust data structures largely automatically, removing the need for all that boilerplate.\ne.g.:\n```\n```#``[``derive```(```Serialize`,` Deserialize```)```]``\n``struct` ```Person` ````{`\n  `name``:` String,\n  `age``:` `i32`,\n  `phones``:` ``Vec``<``String``>``,\n```}```\n``//` Some BSON input data as a `Bson`.`\n`let` bson_data`:` Bson `=` `bson!``(```{`\n  ``\"`name`\"```:` ``\"`John Doe`\"```,`\n  ``\"`age`\"```:` `43``,`\n  ``\"`phones`\"```:` `[`\n    ``\"`+44 1234567`\"```,`\n    ``\"`+44 2345678`\"``\n  `]`\n```}```)``;`\n``//` Deserialize the Person struct from the BSON data, automatically`\n``//` verifying that the necessary keys are present and that they are of`\n``//` the correct types.`\n`let` `mut` person`:` Person `=` `bson`::``from_bson`(`bson_data`)``.``unwrap``(``)``;`\n``//` Do things just like with any other Rust data structure.`\n`println!``(```\"`Redacting `{}`'s record.`\"```,` person`.`name`)``;`\nperson`.`name `=` ``\"`REDACTED`\"```.``to_string``(``)``;`\n``//` Get a serialized version of the input data as a `Bson`.`\n`let` redacted_bson `=` `bson`::``to_bson`(``&`person`)``.``unwrap``(``)``;`\n`\n```\n\nAny types that implement ``Serialize`` and ``Deserialize`` can be used in this way. Doing so helps separate the \"business logic\" that operates over the data from the (de)serialization logic that translates the data to/from its serialized form. This can lead to more clear and concise code that is also less error prone.\nWhen serializing values that cannot be represented in BSON, or deserialzing from BSON that does not match the format expected by the type, the default error will only report the specific field that failed. To aid debugging, enabling the ``serde_path_to_error``\u27e810\u27e9 feature will augment errors\u27e841\u27e9 with the full field path from root object to failing field. This feature does incur a small CPU and memory overhead during (de)serialization and should be enabled with care in performance-sensitive environments.\n### Working with datetimes\nThe BSON format includes a datetime type, which is modeled in this crate by the ```bson`::``DateTime``\u27e842\u27e9 struct, and the ``Serialize`` and ``Deserialize`` implementations for this struct produce and parse BSON datetimes when serializing to or deserializing from BSON. The popular crate ``chrono``\u27e843\u27e9 also provides a ``DateTime`` type, but its ``Serialize`` and ``Deserialize`` implementations operate on strings instead, so when using it with BSON, the BSON datetime type is not used. To work around this, the ``chrono-0_4`` feature flag can be enabled. This flag exposes a number of convenient conversions between ```bson`::``DateTime`` and ```chrono`::``DateTime``, including the ``chrono_datetime_as_bson_datetime``\u27e844\u27e9 serde helper, which can be used to (de)serialize ```chrono`::``DateTime``s to/from BSON datetimes, and the ````From``<``chrono`::``DateTime`>```` implementation for ``Bson``, which allows ```chrono`::``DateTime`` values to be used in the ``doc!`` and ``bson!`` macros.\ne.g.\n```\n``use` `serde`::````{`Serialize`,` Deserialize```}```;`\n``#``[``derive```(```Serialize`,` Deserialize```)```]``\n``struct` ```Foo` ````{`\n  ``//` serializes as a BSON datetime.`\n  `date_time``:` `bson`::``DateTime,\n  ``//` serializes as an RFC 3339 / ISO-8601 string.`\n  `chrono_datetime``:` `chrono`::```DateTime`<``chrono`::``Utc`>``,\n  ``//` serializes as a BSON datetime.`\n  ``//` this requires the \"chrono-0_4\" feature flag`\n  ``#``[``serde```(```with `=` ``\"`bson::serde_helpers::chrono_datetime_as_bson_datetime`\"`````)```]``\n  `chrono_as_bson``:` `chrono`::```DateTime`<``chrono`::``Utc`>``,\n```}```\n``//` this automatic conversion also requires the \"chrono-0_4\" feature flag`\n`let` query `=` `doc!` ``{`\n  ``\"`created_at`\"```:` `chrono`::```Utc`::``now`(``)``,`\n```}```;`\n`\n```\n\n### Working with UUIDs\nSee the module-level documentation for the ```bson`::``uuid`` module\u27e845\u27e9.\n### WASM support\nThis crate compiles to the ``wasm32-unknown-unknown`` target; when doing so, the ``js-sys`` crate is used for the current timestamp component of ``ObjectId`` generation.\n## Minimum supported Rust version (MSRV)\nThe MSRV for this crate is currently 1.81. Increases to the MSRV will only happen in a minor or major version release, and will be to a Rust version at least six months old.\n## Contributing\nWe encourage and would happily accept contributions in the form of GitHub pull requests. Before opening one, be sure to run the tests locally; check out the testing section\u27e821\u27e9 for information on how to do that. Once you open a pull request, your branch will be run against the same testing matrix that we use for our continuous integration\u27e822\u27e9 system, so it is usually sufficient to only run the integration tests locally against a standalone. Remember to always run the linter tests before opening a pull request.\n## Running the tests\n### Integration and unit tests\nTo actually run the tests, you can use ``cargo`` like you would in any other crate:\n```\n```cargo``` test`` --`verbose ``#``` runs against localhost:27017\n````\n```\n\n### Linter Tests\nOur linter tests use the nightly version of ``rustfmt`` to verify that the source is formatted properly and the stable version of ``clippy`` to statically detect any common mistakes. You can use ``rustup`` to install them both:\n```\n```rustup``` component add clippy`` --`toolchain` stable`\n``rustup``` component add rustfmt`` --`toolchain` nightly`\n`\n```\n\nTo run the linter tests, run the ``check-clippy.sh`` and ``check-rustfmt.sh`` scripts in the ```.`evergreen`` directory:\n```\n```bash``` .evergreen/check-clippy.sh` `&&` ``bash``` .evergreen/check-rustfmt.sh`\n`\n```\n\n## Continuous Integration\nCommits to main are run automatically on evergreen\u27e846\u27e9.\n#### Dependencies\n~4.5\u20137MB  ~126K SLoC\n  * ahash\u27e847\u27e9\n  * base64\u27e848\u27e9 0.22.1\n  * bitvec\u27e849\u27e9\n  * hex\u27e850\u27e9\n  * indexmap\u27e851\u27e9 2.1\n  * once_cell\u27e852\u27e9\n  * rand\u27e853\u27e9 0.9\n  * serde\u27e854\u27e9+derive\u27e855\u27e9\n  * serde_bytes\u27e856\u27e9\n  * serde_json\u27e857\u27e9+preserve_order\u27e858\u27e9\n  * time\u27e859\u27e9+formatting\u27e860\u27e9+parsing\u27e861\u27e9+macros\u27e862\u27e9+large-dates\u27e863\u27e9\n  * uuid\u27e864\u27e9+serde\u27e865\u27e9+v4\u27e866\u27e9\n  * chrono-0_4?\u27e867\u27e9 chrono\u27e868\u27e9+std\u27e869\u27e9\n  * getrandom\u27e870\u27e9 0.2+js\u27e871\u27e9 wasm32 unknown\n  * getrandom\u27e870\u27e9 0.3+wasm_js\u27e872\u27e9 wasm32 unknown\n  * js-sys\u27e873\u27e9 wasm32 unknown\n  *  optional \u27e874\u27e9 serde_path_to_error\u27e875\u27e9\n  *  optional \u27e876\u27e9 serde_with\u27e877\u27e9 1.3\n  * serde_with-3?\u27e878\u27e9 serde_with\u27e877\u27e9 3.1\n  * uuid-0_8?\u27e879\u27e9 uuid\u27e864\u27e9 0.8.1+serde\u27e865\u27e9+v4\u27e866\u27e9\n\n\n  * dev  assert_matches\u27e880\u27e9\n  * dev  criterion\u27e881\u27e9 0.3\n  * dev  pretty_assertions\u27e882\u27e9 0.6.1\n  * dev  proptest\u27e883\u27e9\n\n\n#### Other features\u27e884\u27e9\n  * hashable\u27e885\u27e9\n  * time-0_3\u27e886\u27e9\n  * uncapped_max_size\u27e887\u27e9\n  * uuid-1\u27e888\u27e9\n\n\n  *[SLoC]: approx. additional lines of code\n",
              "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://lib.rs/crates/bson/versions: 68 releases\n\u27e82\u27e9 https://lib.rs/encoding: Encoding and/or decoding data from one data format to another. - Encoding\n\u27e83\u27e9 https://lib.rs/crates/bson/rev: **516** crates (252 directly)\n\u27e84\u27e9 https://img.shields.io/crates/v/bson.svg: ![crates.io\n\u27e85\u27e9 https://img.gs/czjpqfbdkz/full/https://docs.rs/mongodb/badge.svg: ![docs.rs\n\u27e86\u27e9 https://img.shields.io/crates/l/bson.svg: ![crates.io\n\u27e87\u27e9 https://lib.rs/crates/bson#readme-installation: Installation\n\u27e88\u27e9 https://lib.rs/crates/bson#readme-requirements: Requirements\n\u27e89\u27e9 https://lib.rs/crates/bson#readme-importing: Importing\n\u27e810\u27e9 https://lib.rs/crates/bson#readme-feature-flags: Feature flags\n\u27e811\u27e9 https://lib.rs/crates/bson#readme-useful-links: Useful links\n\u27e812\u27e9 https://lib.rs/crates/bson#readme-overview-of-the-bson-format: Overview of BSON Format\n\u27e813\u27e9 https://lib.rs/crates/bson#readme-usage: Usage\n\u27e814\u27e9 https://lib.rs/crates/bson#readme-bson-values: BSON Values\n\u27e815\u27e9 https://lib.rs/crates/bson#readme-bson-documents: BSON Documents\n\u27e816\u27e9 https://lib.rs/crates/bson#readme-modeling-bson-with-strongly-typed-data-structures: Modeling BSON with strongly typed data structures\n\u27e817\u27e9 https://lib.rs/crates/bson#readme-working-with-datetimes: Working with datetimes\n\u27e818\u27e9 https://lib.rs/crates/bson#readme-working-with-uuids: Working with UUIDs\n\u27e819\u27e9 https://lib.rs/crates/bson#readme-wasm-support: WASM support\n\u27e820\u27e9 https://lib.rs/crates/bson#readme-contributing: Contributing\n\u27e821\u27e9 https://lib.rs/crates/bson#readme-running-the-tests: Running the Tests\n\u27e822\u27e9 https://lib.rs/crates/bson#readme-continuous-integration: Continuous Integration\n\u27e823\u27e9 https://docs.rs/bson/: API Documentation\n\u27e824\u27e9 https://serde.rs/: Serde Documentation\n\u27e825\u27e9 https://crates.io/crates/bson: crates.io\n\u27e826\u27e9 https://docs.rs/chrono/0.4: ``chrono``\n\u27e827\u27e9 https://docs.rs/uuid/0.8: ``uuid``\n\u27e828\u27e9 https://docs.rs/uuid/1.0: ``uuid``\n\u27e829\u27e9 https://docs.rs/time/0.3: ``time``\n\u27e830\u27e9 https://docs.rs/serde_with/1.x: ``serde_with``\n\u27e831\u27e9 https://docs.rs/serde_with/3.x: ``serde_with``\n\u27e832\u27e9 https://docs.rs/serde_path_to_err/latest: ``serde_path_to_error``\n\u27e833\u27e9 https://www.mongodb.com/: MongoDB\n\u27e834\u27e9 https://docs.rs/mongodb/latest/mongodb/: ``mongodb``\n\u27e835\u27e9 http://bsonspec.org: bsonspec.org\n\u27e836\u27e9 http://bsonspec.org/spec.html: BSON specification\n\u27e837\u27e9 https://docs.rs/bson/latest/bson/enum.Bson.html: ``Bson``\n\u27e838\u27e9 https://docs.rs/bson/latest/bson/macro.bson.html: ``bson!``\n\u27e839\u27e9 https://docs.rs/bson/latest/bson/document/struct.Document.html: ``Document``\n\u27e840\u27e9 https://docs.rs/bson/latest/bson/macro.doc.html: ``doc!``\n\u27e841\u27e9 https://docs.rs/bson/latest/bson/de/enum.Error.html#variant.WithPath: augment errors\n\u27e842\u27e9 https://docs.rs/bson/latest/bson/struct.DateTime.html: ```bson`::``DateTime``\n\u27e843\u27e9 https://docs.rs/chrono: ``chrono``\n\u27e844\u27e9 https://docs.rs/bson/latest/bson/serde_helpers/chrono_datetime_as_bson_datetime/index.html: ``chrono_datetime_as_bson_datetime``\n\u27e845\u27e9 https://docs.rs/bson/latest/bson/uuid: ```bson`::``uuid`` module\n\u27e846\u27e9 https://evergreen.mongodb.com/waterfall/rust-bson: evergreen\n\u27e847\u27e9 https://lib.rs/crates/ahash: 0.8.0 - ahash\n\u27e848\u27e9 https://lib.rs/crates/base64: new - base64\n\u27e849\u27e9 https://lib.rs/crates/bitvec: 1.0.1 - bitvec\n\u27e850\u27e9 https://lib.rs/crates/hex: 0.4.2 - hex\n\u27e851\u27e9 https://lib.rs/crates/indexmap: new - indexmap\n\u27e852\u27e9 https://lib.rs/crates/once_cell: 1.5.1 - once_cell\n\u27e853\u27e9 https://lib.rs/crates/rand: new - rand\n\u27e854\u27e9 https://lib.rs/crates/serde: 1.0 - serde\n\u27e855\u27e9 https://lib.rs/crates/serde/features#feature-derive: +derive\n\u27e856\u27e9 https://lib.rs/crates/serde_bytes: 0.11.5 - serde_bytes\n\u27e857\u27e9 https://lib.rs/crates/serde_json: 1.0 - serde_json\n\u27e858\u27e9 https://lib.rs/crates/serde_json/features#feature-preserve_order: +preserve_order\n\u27e859\u27e9 https://lib.rs/crates/time: 0.3.9 - time\n\u27e860\u27e9 https://lib.rs/crates/time/features#feature-formatting: +formatting\n\u27e861\u27e9 https://lib.rs/crates/time/features#feature-parsing: +parsing\n\u27e862\u27e9 https://lib.rs/crates/time/features#feature-macros: +macros\n\u27e863\u27e9 https://lib.rs/crates/time/features#feature-large-dates: +large-dates\n\u27e864\u27e9 https://lib.rs/crates/uuid: 1.1.2 - uuid\n\u27e865\u27e9 https://lib.rs/crates/uuid/features#feature-serde: +serde\n\u27e866\u27e9 https://lib.rs/crates/uuid/features#feature-v4: +v4\n\u27e867\u27e9 https://lib.rs/crates/bson/features#feature-chrono-0_4: optional feature - chrono-0_4?\n\u27e868\u27e9 https://lib.rs/crates/chrono: 0.4.15 - chrono\n\u27e869\u27e9 https://lib.rs/crates/chrono/features#feature-std: +std\n\u27e870\u27e9 https://lib.rs/crates/getrandom: outdated - getrandom\n\u27e871\u27e9 https://lib.rs/crates/getrandom/features#feature-js: +js\n\u27e872\u27e9 https://lib.rs/crates/getrandom/features#feature-wasm_js: +wasm_js\n\u27e873\u27e9 https://lib.rs/crates/js-sys: 0.3 - js-sys\n\u27e874\u27e9 https://lib.rs/crates/bson/features#feature-serde_path_to_error: serde_path_to_error is optional feature -  optional \n\u27e875\u27e9 https://lib.rs/crates/serde_path_to_error: 0.1.16 - serde_path_to_error\n\u27e876\u27e9 https://lib.rs/crates/bson/features#feature-serde_with: serde_with is optional feature -  optional \n\u27e877\u27e9 https://lib.rs/crates/serde_with: obsolete - serde_with\n\u27e878\u27e9 https://lib.rs/crates/bson/features#feature-serde_with-3: optional feature - serde_with-3?\n\u27e879\u27e9 https://lib.rs/crates/bson/features#feature-uuid-0_8: optional feature - uuid-0_8?\n\u27e880\u27e9 https://lib.rs/crates/assert_matches: 1.2 - assert_matches\n\u27e881\u27e9 https://lib.rs/crates/criterion: obsolete - criterion\n\u27e882\u27e9 https://lib.rs/crates/pretty_assertions: obsolete - pretty_assertions\n\u27e883\u27e9 https://lib.rs/crates/proptest: 1.0.0 - proptest\n\u27e884\u27e9 https://lib.rs/crates/bson/features: Other features\n\u27e885\u27e9 https://lib.rs/crates/bson/features#feature-hashable: hashable\n\u27e886\u27e9 https://lib.rs/crates/bson/features#feature-time-0_3: time-0_3\n\u27e887\u27e9 https://lib.rs/crates/bson/features#feature-uncapped_max_size: uncapped_max_size\n\u27e888\u27e9 https://lib.rs/crates/bson/features#feature-uuid-1: uuid-1\n",
              "fit_markdown": "",
              "fit_html": ""
            },
            "structured_data": {},
            "quality_score": 4.0,
            "extraction_method": "crawl4ai",
            "error": null,
            "metadata": {
              "doc_type": "docs",
              "content_length": 19474,
              "has_structured_data": false,
              "crawl_success": true
            },
            "timestamp": "113163.0195336"
          }
        },
        "crate_analysis": {
          "status": "completed",
          "check": [
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#cfg-if@1.0.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\cfg-if-1.0.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "cfg_if",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\cfg-if-1.0.0\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphrjzoh4n\\bson-2.15.0\\target\\debug\\deps\\libcfg_if-f755e379589b9030.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#equivalent@1.0.2",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\equivalent-1.0.2\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "equivalent",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\equivalent-1.0.2\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphrjzoh4n\\bson-2.15.0\\target\\debug\\deps\\libequivalent-ebd39031dcab7414.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#unicode-ident@1.0.18",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\unicode-ident-1.0.18\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "unicode_ident",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\unicode-ident-1.0.18\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphrjzoh4n\\bson-2.15.0\\target\\debug\\deps\\libunicode_ident-f7db65657b8daa2b.rlib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphrjzoh4n\\bson-2.15.0\\target\\debug\\deps\\libunicode_ident-f7db65657b8daa2b.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#tap@1.0.1",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\tap-1.0.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "tap",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\tap-1.0.1\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphrjzoh4n\\bson-2.15.0\\target\\debug\\deps\\libtap-cd442e344c482fa2.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#itoa@1.0.15",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\itoa-1.0.15\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "itoa",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\itoa-1.0.15\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphrjzoh4n\\bson-2.15.0\\target\\debug\\deps\\libitoa-f4561faf083a6980.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#time-core@0.1.4",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\time-core-0.1.4\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "time_core",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\time-core-0.1.4\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphrjzoh4n\\bson-2.15.0\\target\\debug\\deps\\libtime_core-371dde0c02f99f3f.rlib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphrjzoh4n\\bson-2.15.0\\target\\debug\\deps\\libtime_core-371dde0c02f99f3f.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#num-conv@0.1.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-conv-0.1.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "num_conv",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-conv-0.1.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphrjzoh4n\\bson-2.15.0\\target\\debug\\deps\\libnum_conv-f55f3240717315a6.rlib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphrjzoh4n\\bson-2.15.0\\target\\debug\\deps\\libnum_conv-f55f3240717315a6.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#powerfmt@0.2.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\powerfmt-0.2.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "powerfmt",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\powerfmt-0.2.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphrjzoh4n\\bson-2.15.0\\target\\debug\\deps\\libpowerfmt-b5a769e72545940a.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#num-conv@0.1.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-conv-0.1.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "num_conv",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-conv-0.1.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphrjzoh4n\\bson-2.15.0\\target\\debug\\deps\\libnum_conv-44c875d5f379c963.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#serde_json@1.0.140",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde_json-1.0.140\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde_json-1.0.140\\build.rs",
                "edition": "2021",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "indexmap",
                "preserve_order",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphrjzoh4n\\bson-2.15.0\\target\\debug\\build\\serde_json-0200bb76df6cadc3\\build-script-build.exe",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphrjzoh4n\\bson-2.15.0\\target\\debug\\build\\serde_json-0200bb76df6cadc3\\build_script_build.pdb"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#radium@0.7.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\radium-0.7.0\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\radium-0.7.0\\build.rs",
                "edition": "2018",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphrjzoh4n\\bson-2.15.0\\target\\debug\\build\\radium-2aba7bd012de499c\\build-script-build.exe",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphrjzoh4n\\bson-2.15.0\\target\\debug\\build\\radium-2aba7bd012de499c\\build_script_build.pdb"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#time-core@0.1.4",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\time-core-0.1.4\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "time_core",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\time-core-0.1.4\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphrjzoh4n\\bson-2.15.0\\target\\debug\\deps\\libtime_core-e2e0645429daf40a.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "build-script-executed",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#serde_json@1.0.140",
              "linked_libs": [],
              "linked_paths": [],
              "cfgs": [
                "fast_arithmetic=\"64\""
              ],
              "env": [],
              "out_dir": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphrjzoh4n\\bson-2.15.0\\target\\debug\\build\\serde_json-af2207c7a242746b\\out"
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#serde@1.0.219",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde-1.0.219\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde-1.0.219\\build.rs",
                "edition": "2018",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "derive",
                "serde_derive",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphrjzoh4n\\bson-2.15.0\\target\\debug\\build\\serde-b78cd3409c4c00e1\\build-script-build.exe",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphrjzoh4n\\bson-2.15.0\\target\\debug\\build\\serde-b78cd3409c4c00e1\\build_script_build.pdb"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "build-script-executed",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#radium@0.7.0",
              "linked_libs": [],
              "linked_paths": [],
              "cfgs": [
                "radium_atomic_8",
                "radium_atomic_16",
                "radium_atomic_32",
                "radium_atomic_64",
                "radium_atomic_ptr"
              ],
              "env": [],
              "out_dir": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphrjzoh4n\\bson-2.15.0\\target\\debug\\build\\radium-5a7480046c32196f\\out"
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#proc-macro2@1.0.95",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\proc-macro2-1.0.95\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\proc-macro2-1.0.95\\build.rs",
                "edition": "2021",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "proc-macro"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphrjzoh4n\\bson-2.15.0\\target\\debug\\build\\proc-macro2-fc3323aef1101545\\build-script-build.exe",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphrjzoh4n\\bson-2.15.0\\target\\debug\\build\\proc-macro2-fc3323aef1101545\\build_script_build.pdb"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#getrandom@0.3.3",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\getrandom-0.3.3\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\getrandom-0.3.3\\build.rs",
                "edition": "2021",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphrjzoh4n\\bson-2.15.0\\target\\debug\\build\\getrandom-f4b5fb250a4cd334\\build-script-build.exe",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphrjzoh4n\\bson-2.15.0\\target\\debug\\build\\getrandom-f4b5fb250a4cd334\\build_script_build.pdb"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#once_cell@1.21.3",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.21.3\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "once_cell",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.21.3\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "alloc",
                "default",
                "race",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphrjzoh4n\\bson-2.15.0\\target\\debug\\deps\\libonce_cell-a60312d61ee7843e.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#wyz@0.5.1",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\wyz-0.5.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "wyz",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\wyz-0.5.1\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphrjzoh4n\\bson-2.15.0\\target\\debug\\deps\\libwyz-ed813c508cca17a3.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#ryu@1.0.20",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\ryu-1.0.20\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "ryu",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\ryu-1.0.20\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphrjzoh4n\\bson-2.15.0\\target\\debug\\deps\\libryu-b5eb7f50b0721bb1.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "build-script-executed",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#serde@1.0.219",
              "linked_libs": [],
              "linked_paths": [],
              "cfgs": [],
              "env": [],
              "out_dir": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphrjzoh4n\\bson-2.15.0\\target\\debug\\build\\serde-9332b0712131748b\\out"
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#version_check@0.9.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.9.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "version_check",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.9.5\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphrjzoh4n\\bson-2.15.0\\target\\debug\\deps\\libversion_check-8a7cb6ed787a6dad.rlib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphrjzoh4n\\bson-2.15.0\\target\\debug\\deps\\libversion_check-8a7cb6ed787a6dad.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#zerocopy@0.8.25",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\zerocopy-0.8.25\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\zerocopy-0.8.25\\build.rs",
                "edition": "2021",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "simd"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphrjzoh4n\\bson-2.15.0\\target\\debug\\build\\zerocopy-e11468a8281a2a9d\\build-script-build.exe",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphrjzoh4n\\bson-2.15.0\\target\\debug\\build\\zerocopy-e11468a8281a2a9d\\build_script_build.pdb"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "build-script-executed",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#getrandom@0.3.3",
              "linked_libs": [],
              "linked_paths": [],
              "cfgs": [],
              "env": [],
              "out_dir": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphrjzoh4n\\bson-2.15.0\\target\\debug\\build\\getrandom-97243ee7db1e04a7\\out"
            },
            {
              "reason": "build-script-executed",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#proc-macro2@1.0.95",
              "linked_libs": [],
              "linked_paths": [],
              "cfgs": [
                "wrap_proc_macro"
              ],
              "env": [],
              "out_dir": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphrjzoh4n\\bson-2.15.0\\target\\debug\\build\\proc-macro2-f3f556b4a3e65444\\out"
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#funty@2.0.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\funty-2.0.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "funty",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\funty-2.0.0\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphrjzoh4n\\bson-2.15.0\\target\\debug\\deps\\libfunty-d9e604f4a6b9cd3b.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#hex@0.4.3",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\hex-0.4.3\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "hex",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\hex-0.4.3\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "alloc",
                "default",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphrjzoh4n\\bson-2.15.0\\target\\debug\\deps\\libhex-2b77f2c473cad7be.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "build-script-executed",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#zerocopy@0.8.25",
              "linked_libs": [],
              "linked_paths": [],
              "cfgs": [
                "zerocopy_aarch64_simd_1_59_0",
                "zerocopy_core_error_1_81_0",
                "zerocopy_diagnostic_on_unimplemented_1_78_0",
                "zerocopy_generic_bounds_in_const_fn_1_61_0",
                "zerocopy_panic_in_const_and_vec_try_reserve_1_57_0",
                "zerocopy_target_has_atomics_1_60_0"
              ],
              "env": [],
              "out_dir": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphrjzoh4n\\bson-2.15.0\\target\\debug\\build\\zerocopy-a48dd86f5a21b343\\out"
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#radium@0.7.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\radium-0.7.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "radium",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\radium-0.7.0\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphrjzoh4n\\bson-2.15.0\\target\\debug\\deps\\libradium-fbbd66fa9cc88d63.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#hashbrown@0.15.3",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\hashbrown-0.15.3\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "hashbrown",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\hashbrown-0.15.3\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphrjzoh4n\\bson-2.15.0\\target\\debug\\deps\\libhashbrown-2cd728656909fd20.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#ahash@0.8.12",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\ahash-0.8.12\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\ahash-0.8.12\\build.rs",
                "edition": "2018",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "getrandom",
                "runtime-rng",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphrjzoh4n\\bson-2.15.0\\target\\debug\\build\\ahash-23f4e509cc70eefb\\build-script-build.exe",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphrjzoh4n\\bson-2.15.0\\target\\debug\\build\\ahash-23f4e509cc70eefb\\build_script_build.pdb"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#base64@0.22.1",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\base64-0.22.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "base64",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\base64-0.22.1\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "alloc",
                "default",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphrjzoh4n\\bson-2.15.0\\target\\debug\\deps\\libbase64-86bc57838984083e.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#getrandom@0.3.3",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\getrandom-0.3.3\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "getrandom",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\getrandom-0.3.3\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphrjzoh4n\\bson-2.15.0\\target\\debug\\deps\\libgetrandom-711538b7a5386b81.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "build-script-executed",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#ahash@0.8.12",
              "linked_libs": [],
              "linked_paths": [],
              "cfgs": [
                "folded_multiply"
              ],
              "env": [],
              "out_dir": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphrjzoh4n\\bson-2.15.0\\target\\debug\\build\\ahash-cb295828f306971c\\out"
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#memchr@2.7.4",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\memchr-2.7.4\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "memchr",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\memchr-2.7.4\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "alloc",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphrjzoh4n\\bson-2.15.0\\target\\debug\\deps\\libmemchr-1582e0d0cb00c2d8.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#deranged@0.4.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\deranged-0.4.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "deranged",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\deranged-0.4.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "alloc",
                "powerfmt",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphrjzoh4n\\bson-2.15.0\\target\\debug\\deps\\libderanged-33baf3a0f34f4450.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#rand_core@0.9.3",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\rand_core-0.9.3\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "rand_core",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\rand_core-0.9.3\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "os_rng",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphrjzoh4n\\bson-2.15.0\\target\\debug\\deps\\librand_core-3cb48a2816ad22ed.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#proc-macro2@1.0.95",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\proc-macro2-1.0.95\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "proc_macro2",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\proc-macro2-1.0.95\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "proc-macro"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphrjzoh4n\\bson-2.15.0\\target\\debug\\deps\\libproc_macro2-44d44d954847f2cc.rlib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphrjzoh4n\\bson-2.15.0\\target\\debug\\deps\\libproc_macro2-44d44d954847f2cc.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#quote@1.0.40",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\quote-1.0.40\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "quote",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\quote-1.0.40\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "proc-macro"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphrjzoh4n\\bson-2.15.0\\target\\debug\\deps\\libquote-3c21095bdf613223.rlib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphrjzoh4n\\bson-2.15.0\\target\\debug\\deps\\libquote-3c21095bdf613223.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#indexmap@2.9.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\indexmap-2.9.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "indexmap",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\indexmap-2.9.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphrjzoh4n\\bson-2.15.0\\target\\debug\\deps\\libindexmap-b8259dadb94a5807.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#time-macros@0.2.22",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\time-macros-0.2.22\\Cargo.toml",
              "target": {
                "kind": [
                  "proc-macro"
                ],
                "crate_types": [
                  "proc-macro"
                ],
                "name": "time_macros",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\time-macros-0.2.22\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "formatting",
                "large-dates",
                "parsing"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphrjzoh4n\\bson-2.15.0\\target\\debug\\deps\\time_macros-db7a1319b664460c.dll",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphrjzoh4n\\bson-2.15.0\\target\\debug\\deps\\time_macros-db7a1319b664460c.dll.lib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphrjzoh4n\\bson-2.15.0\\target\\debug\\deps\\time_macros-db7a1319b664460c.dll.exp",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphrjzoh4n\\bson-2.15.0\\target\\debug\\deps\\time_macros-db7a1319b664460c.pdb"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#zerocopy@0.8.25",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\zerocopy-0.8.25\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "zerocopy",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\zerocopy-0.8.25\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "simd"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphrjzoh4n\\bson-2.15.0\\target\\debug\\deps\\libzerocopy-67abba9bf6992bcc.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#ahash@0.8.12",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\ahash-0.8.12\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "ahash",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\ahash-0.8.12\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "getrandom",
                "runtime-rng",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphrjzoh4n\\bson-2.15.0\\target\\debug\\deps\\libahash-72f35a16467edbaa.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#ppv-lite86@0.2.21",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\ppv-lite86-0.2.21\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "ppv_lite86",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\ppv-lite86-0.2.21\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "simd",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphrjzoh4n\\bson-2.15.0\\target\\debug\\deps\\libppv_lite86-5629d057067a2bee.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#rand_chacha@0.9.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\rand_chacha-0.9.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "rand_chacha",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\rand_chacha-0.9.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphrjzoh4n\\bson-2.15.0\\target\\debug\\deps\\librand_chacha-86d5665d24c36a9a.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#syn@2.0.101",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\syn-2.0.101\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "syn",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\syn-2.0.101\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "clone-impls",
                "derive",
                "parsing",
                "printing",
                "proc-macro"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphrjzoh4n\\bson-2.15.0\\target\\debug\\deps\\libsyn-2639b3d37a9b3951.rlib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphrjzoh4n\\bson-2.15.0\\target\\debug\\deps\\libsyn-2639b3d37a9b3951.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#time@0.3.41",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\time-0.3.41\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "time",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\time-0.3.41\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "alloc",
                "default",
                "formatting",
                "large-dates",
                "macros",
                "parsing",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphrjzoh4n\\bson-2.15.0\\target\\debug\\deps\\libtime-de5e312561adb046.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#rand@0.9.1",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\rand-0.9.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "rand",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\rand-0.9.1\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "alloc",
                "default",
                "os_rng",
                "small_rng",
                "std",
                "std_rng",
                "thread_rng"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphrjzoh4n\\bson-2.15.0\\target\\debug\\deps\\librand-ef7d0ec8989cbfaa.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#bitvec@1.0.1",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\bitvec-1.0.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "bitvec",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\bitvec-1.0.1\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "alloc",
                "atomic",
                "default",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphrjzoh4n\\bson-2.15.0\\target\\debug\\deps\\libbitvec-8d8e2dc4ff78738d.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#serde_derive@1.0.219",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde_derive-1.0.219\\Cargo.toml",
              "target": {
                "kind": [
                  "proc-macro"
                ],
                "crate_types": [
                  "proc-macro"
                ],
                "name": "serde_derive",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde_derive-1.0.219\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphrjzoh4n\\bson-2.15.0\\target\\debug\\deps\\serde_derive-eb6c82ebbd767177.dll",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphrjzoh4n\\bson-2.15.0\\target\\debug\\deps\\serde_derive-eb6c82ebbd767177.dll.lib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphrjzoh4n\\bson-2.15.0\\target\\debug\\deps\\serde_derive-eb6c82ebbd767177.dll.exp",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphrjzoh4n\\bson-2.15.0\\target\\debug\\deps\\serde_derive-eb6c82ebbd767177.pdb"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#serde@1.0.219",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde-1.0.219\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "serde",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde-1.0.219\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "derive",
                "serde_derive",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphrjzoh4n\\bson-2.15.0\\target\\debug\\deps\\libserde-a3e721fc82aa070c.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#serde_bytes@0.11.17",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde_bytes-0.11.17\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "serde_bytes",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde_bytes-0.11.17\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphrjzoh4n\\bson-2.15.0\\target\\debug\\deps\\libserde_bytes-15e7235ea5989552.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#uuid@1.16.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\uuid-1.16.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "uuid",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\uuid-1.16.0\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "rng",
                "serde",
                "std",
                "v4"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphrjzoh4n\\bson-2.15.0\\target\\debug\\deps\\libuuid-6bd8baa5b5446129.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#serde_json@1.0.140",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde_json-1.0.140\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "serde_json",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde_json-1.0.140\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "indexmap",
                "preserve_order",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphrjzoh4n\\bson-2.15.0\\target\\debug\\deps\\libserde_json-2dbec6b66a206fd7.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmphrjzoh4n/bson-2.15.0#bson@2.15.0",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphrjzoh4n\\bson-2.15.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "bson",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphrjzoh4n\\bson-2.15.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphrjzoh4n\\bson-2.15.0\\target\\debug\\deps\\libbson-ac9ca006ba0d6b62.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "build-finished",
              "success": true
            }
          ],
          "clippy": [
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#proc-macro2@1.0.95",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\proc-macro2-1.0.95\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\proc-macro2-1.0.95\\build.rs",
                "edition": "2021",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "proc-macro"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphrjzoh4n\\bson-2.15.0\\target\\debug\\build\\proc-macro2-fc3323aef1101545\\build-script-build.exe",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphrjzoh4n\\bson-2.15.0\\target\\debug\\build\\proc-macro2-fc3323aef1101545\\build_script_build.pdb"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "build-script-executed",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#proc-macro2@1.0.95",
              "linked_libs": [],
              "linked_paths": [],
              "cfgs": [
                "wrap_proc_macro"
              ],
              "env": [],
              "out_dir": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphrjzoh4n\\bson-2.15.0\\target\\debug\\build\\proc-macro2-f3f556b4a3e65444\\out"
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#unicode-ident@1.0.18",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\unicode-ident-1.0.18\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "unicode_ident",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\unicode-ident-1.0.18\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphrjzoh4n\\bson-2.15.0\\target\\debug\\deps\\libunicode_ident-f7db65657b8daa2b.rlib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphrjzoh4n\\bson-2.15.0\\target\\debug\\deps\\libunicode_ident-f7db65657b8daa2b.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#getrandom@0.3.3",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\getrandom-0.3.3\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\getrandom-0.3.3\\build.rs",
                "edition": "2021",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphrjzoh4n\\bson-2.15.0\\target\\debug\\build\\getrandom-f4b5fb250a4cd334\\build-script-build.exe",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphrjzoh4n\\bson-2.15.0\\target\\debug\\build\\getrandom-f4b5fb250a4cd334\\build_script_build.pdb"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#cfg-if@1.0.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\cfg-if-1.0.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "cfg_if",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\cfg-if-1.0.0\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphrjzoh4n\\bson-2.15.0\\target\\debug\\deps\\libcfg_if-f755e379589b9030.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#zerocopy@0.8.25",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\zerocopy-0.8.25\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\zerocopy-0.8.25\\build.rs",
                "edition": "2021",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "simd"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphrjzoh4n\\bson-2.15.0\\target\\debug\\build\\zerocopy-e11468a8281a2a9d\\build-script-build.exe",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphrjzoh4n\\bson-2.15.0\\target\\debug\\build\\zerocopy-e11468a8281a2a9d\\build_script_build.pdb"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#serde@1.0.219",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde-1.0.219\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde-1.0.219\\build.rs",
                "edition": "2018",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "derive",
                "serde_derive",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphrjzoh4n\\bson-2.15.0\\target\\debug\\build\\serde-b78cd3409c4c00e1\\build-script-build.exe",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphrjzoh4n\\bson-2.15.0\\target\\debug\\build\\serde-b78cd3409c4c00e1\\build_script_build.pdb"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#version_check@0.9.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.9.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "version_check",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.9.5\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphrjzoh4n\\bson-2.15.0\\target\\debug\\deps\\libversion_check-8a7cb6ed787a6dad.rlib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphrjzoh4n\\bson-2.15.0\\target\\debug\\deps\\libversion_check-8a7cb6ed787a6dad.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#radium@0.7.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\radium-0.7.0\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\radium-0.7.0\\build.rs",
                "edition": "2018",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphrjzoh4n\\bson-2.15.0\\target\\debug\\build\\radium-2aba7bd012de499c\\build-script-build.exe",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphrjzoh4n\\bson-2.15.0\\target\\debug\\build\\radium-2aba7bd012de499c\\build_script_build.pdb"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#time-core@0.1.4",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\time-core-0.1.4\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "time_core",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\time-core-0.1.4\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphrjzoh4n\\bson-2.15.0\\target\\debug\\deps\\libtime_core-371dde0c02f99f3f.rlib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphrjzoh4n\\bson-2.15.0\\target\\debug\\deps\\libtime_core-371dde0c02f99f3f.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#tap@1.0.1",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\tap-1.0.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "tap",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\tap-1.0.1\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphrjzoh4n\\bson-2.15.0\\target\\debug\\deps\\libtap-cd442e344c482fa2.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#serde_json@1.0.140",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde_json-1.0.140\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde_json-1.0.140\\build.rs",
                "edition": "2021",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "indexmap",
                "preserve_order",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphrjzoh4n\\bson-2.15.0\\target\\debug\\build\\serde_json-0200bb76df6cadc3\\build-script-build.exe",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphrjzoh4n\\bson-2.15.0\\target\\debug\\build\\serde_json-0200bb76df6cadc3\\build_script_build.pdb"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#equivalent@1.0.2",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\equivalent-1.0.2\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "equivalent",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\equivalent-1.0.2\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphrjzoh4n\\bson-2.15.0\\target\\debug\\deps\\libequivalent-ebd39031dcab7414.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#powerfmt@0.2.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\powerfmt-0.2.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "powerfmt",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\powerfmt-0.2.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphrjzoh4n\\bson-2.15.0\\target\\debug\\deps\\libpowerfmt-b5a769e72545940a.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#num-conv@0.1.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-conv-0.1.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "num_conv",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-conv-0.1.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphrjzoh4n\\bson-2.15.0\\target\\debug\\deps\\libnum_conv-f55f3240717315a6.rlib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphrjzoh4n\\bson-2.15.0\\target\\debug\\deps\\libnum_conv-f55f3240717315a6.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#itoa@1.0.15",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\itoa-1.0.15\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "itoa",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\itoa-1.0.15\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphrjzoh4n\\bson-2.15.0\\target\\debug\\deps\\libitoa-f4561faf083a6980.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#hashbrown@0.15.3",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\hashbrown-0.15.3\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "hashbrown",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\hashbrown-0.15.3\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphrjzoh4n\\bson-2.15.0\\target\\debug\\deps\\libhashbrown-2cd728656909fd20.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#proc-macro2@1.0.95",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\proc-macro2-1.0.95\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "proc_macro2",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\proc-macro2-1.0.95\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "proc-macro"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphrjzoh4n\\bson-2.15.0\\target\\debug\\deps\\libproc_macro2-44d44d954847f2cc.rlib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphrjzoh4n\\bson-2.15.0\\target\\debug\\deps\\libproc_macro2-44d44d954847f2cc.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "build-script-executed",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#getrandom@0.3.3",
              "linked_libs": [],
              "linked_paths": [],
              "cfgs": [],
              "env": [],
              "out_dir": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphrjzoh4n\\bson-2.15.0\\target\\debug\\build\\getrandom-97243ee7db1e04a7\\out"
            },
            {
              "reason": "build-script-executed",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#zerocopy@0.8.25",
              "linked_libs": [],
              "linked_paths": [],
              "cfgs": [
                "zerocopy_aarch64_simd_1_59_0",
                "zerocopy_core_error_1_81_0",
                "zerocopy_diagnostic_on_unimplemented_1_78_0",
                "zerocopy_generic_bounds_in_const_fn_1_61_0",
                "zerocopy_panic_in_const_and_vec_try_reserve_1_57_0",
                "zerocopy_target_has_atomics_1_60_0"
              ],
              "env": [],
              "out_dir": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphrjzoh4n\\bson-2.15.0\\target\\debug\\build\\zerocopy-a48dd86f5a21b343\\out"
            },
            {
              "reason": "build-script-executed",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#serde@1.0.219",
              "linked_libs": [],
              "linked_paths": [],
              "cfgs": [],
              "env": [],
              "out_dir": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphrjzoh4n\\bson-2.15.0\\target\\debug\\build\\serde-9332b0712131748b\\out"
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#ahash@0.8.12",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\ahash-0.8.12\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\ahash-0.8.12\\build.rs",
                "edition": "2018",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "getrandom",
                "runtime-rng",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphrjzoh4n\\bson-2.15.0\\target\\debug\\build\\ahash-23f4e509cc70eefb\\build-script-build.exe",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphrjzoh4n\\bson-2.15.0\\target\\debug\\build\\ahash-23f4e509cc70eefb\\build_script_build.pdb"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "build-script-executed",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#radium@0.7.0",
              "linked_libs": [],
              "linked_paths": [],
              "cfgs": [
                "radium_atomic_8",
                "radium_atomic_16",
                "radium_atomic_32",
                "radium_atomic_64",
                "radium_atomic_ptr"
              ],
              "env": [],
              "out_dir": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphrjzoh4n\\bson-2.15.0\\target\\debug\\build\\radium-5a7480046c32196f\\out"
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#deranged@0.4.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\deranged-0.4.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "deranged",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\deranged-0.4.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "alloc",
                "powerfmt",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphrjzoh4n\\bson-2.15.0\\target\\debug\\deps\\libderanged-33baf3a0f34f4450.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#time-macros@0.2.22",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\time-macros-0.2.22\\Cargo.toml",
              "target": {
                "kind": [
                  "proc-macro"
                ],
                "crate_types": [
                  "proc-macro"
                ],
                "name": "time_macros",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\time-macros-0.2.22\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "formatting",
                "large-dates",
                "parsing"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphrjzoh4n\\bson-2.15.0\\target\\debug\\deps\\time_macros-db7a1319b664460c.dll",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphrjzoh4n\\bson-2.15.0\\target\\debug\\deps\\time_macros-db7a1319b664460c.dll.lib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphrjzoh4n\\bson-2.15.0\\target\\debug\\deps\\time_macros-db7a1319b664460c.dll.exp",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphrjzoh4n\\bson-2.15.0\\target\\debug\\deps\\time_macros-db7a1319b664460c.pdb"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#indexmap@2.9.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\indexmap-2.9.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "indexmap",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\indexmap-2.9.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphrjzoh4n\\bson-2.15.0\\target\\debug\\deps\\libindexmap-b8259dadb94a5807.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#wyz@0.5.1",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\wyz-0.5.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "wyz",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\wyz-0.5.1\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphrjzoh4n\\bson-2.15.0\\target\\debug\\deps\\libwyz-ed813c508cca17a3.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "build-script-executed",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#serde_json@1.0.140",
              "linked_libs": [],
              "linked_paths": [],
              "cfgs": [
                "fast_arithmetic=\"64\""
              ],
              "env": [],
              "out_dir": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphrjzoh4n\\bson-2.15.0\\target\\debug\\build\\serde_json-af2207c7a242746b\\out"
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#time-core@0.1.4",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\time-core-0.1.4\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "time_core",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\time-core-0.1.4\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphrjzoh4n\\bson-2.15.0\\target\\debug\\deps\\libtime_core-e2e0645429daf40a.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#memchr@2.7.4",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\memchr-2.7.4\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "memchr",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\memchr-2.7.4\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "alloc",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphrjzoh4n\\bson-2.15.0\\target\\debug\\deps\\libmemchr-1582e0d0cb00c2d8.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#funty@2.0.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\funty-2.0.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "funty",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\funty-2.0.0\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphrjzoh4n\\bson-2.15.0\\target\\debug\\deps\\libfunty-d9e604f4a6b9cd3b.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#once_cell@1.21.3",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.21.3\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "once_cell",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.21.3\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "alloc",
                "default",
                "race",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphrjzoh4n\\bson-2.15.0\\target\\debug\\deps\\libonce_cell-a60312d61ee7843e.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#num-conv@0.1.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-conv-0.1.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "num_conv",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num-conv-0.1.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphrjzoh4n\\bson-2.15.0\\target\\debug\\deps\\libnum_conv-44c875d5f379c963.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#quote@1.0.40",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\quote-1.0.40\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "quote",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\quote-1.0.40\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "proc-macro"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphrjzoh4n\\bson-2.15.0\\target\\debug\\deps\\libquote-3c21095bdf613223.rlib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphrjzoh4n\\bson-2.15.0\\target\\debug\\deps\\libquote-3c21095bdf613223.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#getrandom@0.3.3",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\getrandom-0.3.3\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "getrandom",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\getrandom-0.3.3\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphrjzoh4n\\bson-2.15.0\\target\\debug\\deps\\libgetrandom-711538b7a5386b81.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#zerocopy@0.8.25",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\zerocopy-0.8.25\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "zerocopy",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\zerocopy-0.8.25\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "simd"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphrjzoh4n\\bson-2.15.0\\target\\debug\\deps\\libzerocopy-67abba9bf6992bcc.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#radium@0.7.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\radium-0.7.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "radium",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\radium-0.7.0\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphrjzoh4n\\bson-2.15.0\\target\\debug\\deps\\libradium-fbbd66fa9cc88d63.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "build-script-executed",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#ahash@0.8.12",
              "linked_libs": [],
              "linked_paths": [],
              "cfgs": [
                "folded_multiply"
              ],
              "env": [],
              "out_dir": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphrjzoh4n\\bson-2.15.0\\target\\debug\\build\\ahash-cb295828f306971c\\out"
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#ryu@1.0.20",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\ryu-1.0.20\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "ryu",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\ryu-1.0.20\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphrjzoh4n\\bson-2.15.0\\target\\debug\\deps\\libryu-b5eb7f50b0721bb1.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#time@0.3.41",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\time-0.3.41\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "time",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\time-0.3.41\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "alloc",
                "default",
                "formatting",
                "large-dates",
                "macros",
                "parsing",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphrjzoh4n\\bson-2.15.0\\target\\debug\\deps\\libtime-de5e312561adb046.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#hex@0.4.3",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\hex-0.4.3\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "hex",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\hex-0.4.3\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "alloc",
                "default",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphrjzoh4n\\bson-2.15.0\\target\\debug\\deps\\libhex-2b77f2c473cad7be.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#base64@0.22.1",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\base64-0.22.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "base64",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\base64-0.22.1\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "alloc",
                "default",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphrjzoh4n\\bson-2.15.0\\target\\debug\\deps\\libbase64-86bc57838984083e.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#syn@2.0.101",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\syn-2.0.101\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "syn",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\syn-2.0.101\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "clone-impls",
                "derive",
                "parsing",
                "printing",
                "proc-macro"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphrjzoh4n\\bson-2.15.0\\target\\debug\\deps\\libsyn-2639b3d37a9b3951.rlib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphrjzoh4n\\bson-2.15.0\\target\\debug\\deps\\libsyn-2639b3d37a9b3951.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#rand_core@0.9.3",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\rand_core-0.9.3\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "rand_core",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\rand_core-0.9.3\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "os_rng",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphrjzoh4n\\bson-2.15.0\\target\\debug\\deps\\librand_core-3cb48a2816ad22ed.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#ppv-lite86@0.2.21",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\ppv-lite86-0.2.21\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "ppv_lite86",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\ppv-lite86-0.2.21\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "simd",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphrjzoh4n\\bson-2.15.0\\target\\debug\\deps\\libppv_lite86-5629d057067a2bee.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#bitvec@1.0.1",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\bitvec-1.0.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "bitvec",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\bitvec-1.0.1\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "alloc",
                "atomic",
                "default",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphrjzoh4n\\bson-2.15.0\\target\\debug\\deps\\libbitvec-8d8e2dc4ff78738d.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#ahash@0.8.12",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\ahash-0.8.12\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "ahash",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\ahash-0.8.12\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "getrandom",
                "runtime-rng",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphrjzoh4n\\bson-2.15.0\\target\\debug\\deps\\libahash-72f35a16467edbaa.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#serde_derive@1.0.219",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde_derive-1.0.219\\Cargo.toml",
              "target": {
                "kind": [
                  "proc-macro"
                ],
                "crate_types": [
                  "proc-macro"
                ],
                "name": "serde_derive",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde_derive-1.0.219\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphrjzoh4n\\bson-2.15.0\\target\\debug\\deps\\serde_derive-eb6c82ebbd767177.dll",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphrjzoh4n\\bson-2.15.0\\target\\debug\\deps\\serde_derive-eb6c82ebbd767177.dll.lib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphrjzoh4n\\bson-2.15.0\\target\\debug\\deps\\serde_derive-eb6c82ebbd767177.dll.exp",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphrjzoh4n\\bson-2.15.0\\target\\debug\\deps\\serde_derive-eb6c82ebbd767177.pdb"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#rand_chacha@0.9.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\rand_chacha-0.9.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "rand_chacha",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\rand_chacha-0.9.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphrjzoh4n\\bson-2.15.0\\target\\debug\\deps\\librand_chacha-86d5665d24c36a9a.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#serde@1.0.219",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde-1.0.219\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "serde",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde-1.0.219\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "derive",
                "serde_derive",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphrjzoh4n\\bson-2.15.0\\target\\debug\\deps\\libserde-a3e721fc82aa070c.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#rand@0.9.1",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\rand-0.9.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "rand",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\rand-0.9.1\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "alloc",
                "default",
                "os_rng",
                "small_rng",
                "std",
                "std_rng",
                "thread_rng"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphrjzoh4n\\bson-2.15.0\\target\\debug\\deps\\librand-ef7d0ec8989cbfaa.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#uuid@1.16.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\uuid-1.16.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "uuid",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\uuid-1.16.0\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "rng",
                "serde",
                "std",
                "v4"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphrjzoh4n\\bson-2.15.0\\target\\debug\\deps\\libuuid-6bd8baa5b5446129.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#serde_bytes@0.11.17",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde_bytes-0.11.17\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "serde_bytes",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde_bytes-0.11.17\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphrjzoh4n\\bson-2.15.0\\target\\debug\\deps\\libserde_bytes-15e7235ea5989552.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#serde_json@1.0.140",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde_json-1.0.140\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "serde_json",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde_json-1.0.140\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "indexmap",
                "preserve_order",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphrjzoh4n\\bson-2.15.0\\target\\debug\\deps\\libserde_json-2dbec6b66a206fd7.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmphrjzoh4n/bson-2.15.0#bson@2.15.0",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphrjzoh4n\\bson-2.15.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "bson",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphrjzoh4n\\bson-2.15.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: variables can be used directly in the `format!` string\n  --> src\\binary\\vector.rs:97:26\n   |\n97 |                 message: format!(\"padding must be within 0-7 inclusive, got {}\", padding),\n   |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args\n   = note: `#[warn(clippy::uninlined_format_args)]` on by default\nhelp: change this to\n   |\n97 -                 message: format!(\"padding must be within 0-7 inclusive, got {}\", padding),\n97 +                 message: format!(\"padding must be within 0-7 inclusive, got {padding}\"),\n   |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "`#[warn(clippy::uninlined_format_args)]` on by default",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "change this to",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 3185,
                        "byte_start": 3185,
                        "column_end": 78,
                        "column_start": 78,
                        "expansion": null,
                        "file_name": "src\\binary\\vector.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 97,
                        "line_start": 97,
                        "suggested_replacement": "padding",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 78,
                            "highlight_start": 78,
                            "text": "                message: format!(\"padding must be within 0-7 inclusive, got {}\", padding),"
                          }
                        ]
                      },
                      {
                        "byte_end": 3196,
                        "byte_start": 3187,
                        "column_end": 89,
                        "column_start": 80,
                        "expansion": null,
                        "file_name": "src\\binary\\vector.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 97,
                        "line_start": 97,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 89,
                            "highlight_start": 80,
                            "text": "                message: format!(\"padding must be within 0-7 inclusive, got {}\", padding),"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::uninlined_format_args",
                  "explanation": null
                },
                "level": "warning",
                "message": "variables can be used directly in the `format!` string",
                "spans": [
                  {
                    "byte_end": 3197,
                    "byte_start": 3133,
                    "column_end": 90,
                    "column_start": 26,
                    "expansion": null,
                    "file_name": "src\\binary\\vector.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 97,
                    "line_start": 97,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 90,
                        "highlight_start": 26,
                        "text": "                message: format!(\"padding must be within 0-7 inclusive, got {}\", padding),"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmphrjzoh4n/bson-2.15.0#bson@2.15.0",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphrjzoh4n\\bson-2.15.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "bson",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphrjzoh4n\\bson-2.15.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: variables can be used directly in the `format!` string\n   --> src\\binary\\vector.rs:102:26\n    |\n102 |                   message: format!(\n    |  __________________________^\n103 | |                     \"cannot specify non-zero padding if the provided vector is empty, got {}\",\n104 | |                     padding\n105 | |                 ),\n    | |_________________^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "change this to",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 3436,
                        "byte_start": 3436,
                        "column_end": 92,
                        "column_start": 92,
                        "expansion": null,
                        "file_name": "src\\binary\\vector.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 103,
                        "line_start": 103,
                        "suggested_replacement": "padding",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 92,
                            "highlight_start": 92,
                            "text": "                    \"cannot specify non-zero padding if the provided vector is empty, got {}\","
                          }
                        ]
                      },
                      {
                        "byte_end": 3467,
                        "byte_start": 3438,
                        "column_end": 28,
                        "column_start": 94,
                        "expansion": null,
                        "file_name": "src\\binary\\vector.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 104,
                        "line_start": 103,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 95,
                            "highlight_start": 94,
                            "text": "                    \"cannot specify non-zero padding if the provided vector is empty, got {}\","
                          },
                          {
                            "highlight_end": 28,
                            "highlight_start": 1,
                            "text": "                    padding"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::uninlined_format_args",
                  "explanation": null
                },
                "level": "warning",
                "message": "variables can be used directly in the `format!` string",
                "spans": [
                  {
                    "byte_end": 3485,
                    "byte_start": 3336,
                    "column_end": 18,
                    "column_start": 26,
                    "expansion": null,
                    "file_name": "src\\binary\\vector.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 105,
                    "line_start": 102,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 34,
                        "highlight_start": 26,
                        "text": "                message: format!("
                      },
                      {
                        "highlight_end": 95,
                        "highlight_start": 1,
                        "text": "                    \"cannot specify non-zero padding if the provided vector is empty, got {}\","
                      },
                      {
                        "highlight_end": 28,
                        "highlight_start": 1,
                        "text": "                    padding"
                      },
                      {
                        "highlight_end": 18,
                        "highlight_start": 1,
                        "text": "                ),"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmphrjzoh4n/bson-2.15.0#bson@2.15.0",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphrjzoh4n\\bson-2.15.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "bson",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphrjzoh4n\\bson-2.15.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: variables can be used directly in the `format!` string\n   --> src\\binary\\vector.rs:132:26\n    |\n132 |                   message: format!(\n    |  __________________________^\n133 | |                     \"padding can only be specified for a packed bit vector (data type {}), got \\\n134 | |                      type {}\",\n135 | |                     PACKED_BIT, d_type\n136 | |                 ),\n    | |_________________^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "change this to",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 4462,
                        "byte_start": 4462,
                        "column_end": 88,
                        "column_start": 88,
                        "expansion": null,
                        "file_name": "src\\binary\\vector.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 133,
                        "line_start": 133,
                        "suggested_replacement": "PACKED_BIT",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 88,
                            "highlight_start": 88,
                            "text": "                    \"padding can only be specified for a packed bit vector (data type {}), got \\"
                          }
                        ]
                      },
                      {
                        "byte_end": 4499,
                        "byte_start": 4499,
                        "column_end": 28,
                        "column_start": 28,
                        "expansion": null,
                        "file_name": "src\\binary\\vector.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 134,
                        "line_start": 134,
                        "suggested_replacement": "d_type",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 28,
                            "highlight_start": 28,
                            "text": "                     type {}\","
                          }
                        ]
                      },
                      {
                        "byte_end": 4533,
                        "byte_start": 4501,
                        "column_end": 31,
                        "column_start": 30,
                        "expansion": null,
                        "file_name": "src\\binary\\vector.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 135,
                        "line_start": 134,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 31,
                            "highlight_start": 30,
                            "text": "                     type {}\","
                          },
                          {
                            "highlight_end": 31,
                            "highlight_start": 1,
                            "text": "                    PACKED_BIT, d_type"
                          }
                        ]
                      },
                      {
                        "byte_end": 4541,
                        "byte_start": 4533,
                        "column_end": 39,
                        "column_start": 31,
                        "expansion": null,
                        "file_name": "src\\binary\\vector.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 135,
                        "line_start": 135,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 39,
                            "highlight_start": 31,
                            "text": "                    PACKED_BIT, d_type"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::uninlined_format_args",
                  "explanation": null
                },
                "level": "warning",
                "message": "variables can be used directly in the `format!` string",
                "spans": [
                  {
                    "byte_end": 4559,
                    "byte_start": 4366,
                    "column_end": 18,
                    "column_start": 26,
                    "expansion": null,
                    "file_name": "src\\binary\\vector.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 136,
                    "line_start": 132,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 34,
                        "highlight_start": 26,
                        "text": "                message: format!("
                      },
                      {
                        "highlight_end": 97,
                        "highlight_start": 1,
                        "text": "                    \"padding can only be specified for a packed bit vector (data type {}), got \\"
                      },
                      {
                        "highlight_end": 31,
                        "highlight_start": 1,
                        "text": "                     type {}\","
                      },
                      {
                        "highlight_end": 39,
                        "highlight_start": 1,
                        "text": "                    PACKED_BIT, d_type"
                      },
                      {
                        "highlight_end": 18,
                        "highlight_start": 1,
                        "text": "                ),"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmphrjzoh4n/bson-2.15.0#bson@2.15.0",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphrjzoh4n\\bson-2.15.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "bson",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphrjzoh4n\\bson-2.15.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: variables can be used directly in the `format!` string\n   --> src\\binary\\vector.rs:155:34\n    |\n155 |                           message: format!(\n    |  __________________________________^\n156 | |                             \"f32 vector values must be {} bytes, got {:?}\",\n157 | |                             F32_BYTES, chunk,\n158 | |                         ),\n    | |_________________________^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "change this to",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 5266,
                        "byte_start": 5266,
                        "column_end": 57,
                        "column_start": 57,
                        "expansion": null,
                        "file_name": "src\\binary\\vector.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 156,
                        "line_start": 156,
                        "suggested_replacement": "F32_BYTES",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 57,
                            "highlight_start": 57,
                            "text": "                            \"f32 vector values must be {} bytes, got {:?}\","
                          }
                        ]
                      },
                      {
                        "byte_end": 5280,
                        "byte_start": 5280,
                        "column_end": 71,
                        "column_start": 71,
                        "expansion": null,
                        "file_name": "src\\binary\\vector.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 156,
                        "line_start": 156,
                        "suggested_replacement": "chunk",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 71,
                            "highlight_start": 71,
                            "text": "                            \"f32 vector values must be {} bytes, got {:?}\","
                          }
                        ]
                      },
                      {
                        "byte_end": 5323,
                        "byte_start": 5284,
                        "column_end": 38,
                        "column_start": 75,
                        "expansion": null,
                        "file_name": "src\\binary\\vector.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 157,
                        "line_start": 156,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 76,
                            "highlight_start": 75,
                            "text": "                            \"f32 vector values must be {} bytes, got {:?}\","
                          },
                          {
                            "highlight_end": 38,
                            "highlight_start": 1,
                            "text": "                            F32_BYTES, chunk,"
                          }
                        ]
                      },
                      {
                        "byte_end": 5330,
                        "byte_start": 5323,
                        "column_end": 45,
                        "column_start": 38,
                        "expansion": null,
                        "file_name": "src\\binary\\vector.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 157,
                        "line_start": 157,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 45,
                            "highlight_start": 38,
                            "text": "                            F32_BYTES, chunk,"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::uninlined_format_args",
                  "explanation": null
                },
                "level": "warning",
                "message": "variables can be used directly in the `format!` string",
                "spans": [
                  {
                    "byte_end": 5357,
                    "byte_start": 5201,
                    "column_end": 26,
                    "column_start": 34,
                    "expansion": null,
                    "file_name": "src\\binary\\vector.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 158,
                    "line_start": 155,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 42,
                        "highlight_start": 34,
                        "text": "                        message: format!("
                      },
                      {
                        "highlight_end": 76,
                        "highlight_start": 1,
                        "text": "                            \"f32 vector values must be {} bytes, got {:?}\","
                      },
                      {
                        "highlight_end": 46,
                        "highlight_start": 1,
                        "text": "                            F32_BYTES, chunk,"
                      },
                      {
                        "highlight_end": 26,
                        "highlight_start": 1,
                        "text": "                        ),"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmphrjzoh4n/bson-2.15.0#bson@2.15.0",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphrjzoh4n\\bson-2.15.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "bson",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphrjzoh4n\\bson-2.15.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: variables can be used directly in the `format!` string\n   --> src\\binary\\vector.rs:169:26\n    |\n169 |                 message: format!(\"unsupported vector data type: {}\", other),\n    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args\nhelp: change this to\n    |\n169 -                 message: format!(\"unsupported vector data type: {}\", other),\n169 +                 message: format!(\"unsupported vector data type: {other}\"),\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "change this to",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 5816,
                        "byte_start": 5816,
                        "column_end": 66,
                        "column_start": 66,
                        "expansion": null,
                        "file_name": "src\\binary\\vector.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 169,
                        "line_start": 169,
                        "suggested_replacement": "other",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 66,
                            "highlight_start": 66,
                            "text": "                message: format!(\"unsupported vector data type: {}\", other),"
                          }
                        ]
                      },
                      {
                        "byte_end": 5825,
                        "byte_start": 5818,
                        "column_end": 75,
                        "column_start": 68,
                        "expansion": null,
                        "file_name": "src\\binary\\vector.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 169,
                        "line_start": 169,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 75,
                            "highlight_start": 68,
                            "text": "                message: format!(\"unsupported vector data type: {}\", other),"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::uninlined_format_args",
                  "explanation": null
                },
                "level": "warning",
                "message": "variables can be used directly in the `format!` string",
                "spans": [
                  {
                    "byte_end": 5826,
                    "byte_start": 5776,
                    "column_end": 76,
                    "column_start": 26,
                    "expansion": null,
                    "file_name": "src\\binary\\vector.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 169,
                    "line_start": 169,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 76,
                        "highlight_start": 26,
                        "text": "                message: format!(\"unsupported vector data type: {}\", other),"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmphrjzoh4n/bson-2.15.0#bson@2.15.0",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphrjzoh4n\\bson-2.15.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "bson",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphrjzoh4n\\bson-2.15.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: variables can be used directly in the `format!` string\n   --> src\\bson.rs:134:32\n    |\n134 |             Bson::Double(f) => write!(fmt, \"{}\", f),\n    |                                ^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args\nhelp: change this to\n    |\n134 -             Bson::Double(f) => write!(fmt, \"{}\", f),\n134 +             Bson::Double(f) => write!(fmt, \"{f}\"),\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "change this to",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 4445,
                        "byte_start": 4445,
                        "column_end": 46,
                        "column_start": 46,
                        "expansion": null,
                        "file_name": "src\\bson.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 134,
                        "line_start": 134,
                        "suggested_replacement": "f",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 46,
                            "highlight_start": 46,
                            "text": "            Bson::Double(f) => write!(fmt, \"{}\", f),"
                          }
                        ]
                      },
                      {
                        "byte_end": 4450,
                        "byte_start": 4447,
                        "column_end": 51,
                        "column_start": 48,
                        "expansion": null,
                        "file_name": "src\\bson.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 134,
                        "line_start": 134,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 51,
                            "highlight_start": 48,
                            "text": "            Bson::Double(f) => write!(fmt, \"{}\", f),"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::uninlined_format_args",
                  "explanation": null
                },
                "level": "warning",
                "message": "variables can be used directly in the `format!` string",
                "spans": [
                  {
                    "byte_end": 4451,
                    "byte_start": 4431,
                    "column_end": 52,
                    "column_start": 32,
                    "expansion": null,
                    "file_name": "src\\bson.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 134,
                    "line_start": 134,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 52,
                        "highlight_start": 32,
                        "text": "            Bson::Double(f) => write!(fmt, \"{}\", f),"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmphrjzoh4n/bson-2.15.0#bson@2.15.0",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphrjzoh4n\\bson-2.15.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "bson",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphrjzoh4n\\bson-2.15.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: variables can be used directly in the `format!` string\n   --> src\\bson.rs:135:36\n    |\n135 |             Bson::String(ref s) => write!(fmt, \"\\\"{}\\\"\", s),\n    |                                    ^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args\nhelp: change this to\n    |\n135 -             Bson::String(ref s) => write!(fmt, \"\\\"{}\\\"\", s),\n135 +             Bson::String(ref s) => write!(fmt, \"\\\"{s}\\\"\"),\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "change this to",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 4504,
                        "byte_start": 4504,
                        "column_end": 52,
                        "column_start": 52,
                        "expansion": null,
                        "file_name": "src\\bson.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 135,
                        "line_start": 135,
                        "suggested_replacement": "s",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 52,
                            "highlight_start": 52,
                            "text": "            Bson::String(ref s) => write!(fmt, \"\\\"{}\\\"\", s),"
                          }
                        ]
                      },
                      {
                        "byte_end": 4511,
                        "byte_start": 4508,
                        "column_end": 59,
                        "column_start": 56,
                        "expansion": null,
                        "file_name": "src\\bson.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 135,
                        "line_start": 135,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 59,
                            "highlight_start": 56,
                            "text": "            Bson::String(ref s) => write!(fmt, \"\\\"{}\\\"\", s),"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::uninlined_format_args",
                  "explanation": null
                },
                "level": "warning",
                "message": "variables can be used directly in the `format!` string",
                "spans": [
                  {
                    "byte_end": 4512,
                    "byte_start": 4488,
                    "column_end": 60,
                    "column_start": 36,
                    "expansion": null,
                    "file_name": "src\\bson.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 135,
                    "line_start": 135,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 60,
                        "highlight_start": 36,
                        "text": "            Bson::String(ref s) => write!(fmt, \"\\\"{}\\\"\", s),"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmphrjzoh4n/bson-2.15.0#bson@2.15.0",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphrjzoh4n\\bson-2.15.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "bson",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphrjzoh4n\\bson-2.15.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: variables can be used directly in the `format!` string\n   --> src\\bson.rs:159:33\n    |\n159 | ...                   write!(fmt, \"{}\", bson)?;\n    |                       ^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args\nhelp: change this to\n    |\n159 -                                 write!(fmt, \"{}\", bson)?;\n159 +                                 write!(fmt, \"{bson}\")?;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "change this to",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 5513,
                        "byte_start": 5513,
                        "column_end": 47,
                        "column_start": 47,
                        "expansion": null,
                        "file_name": "src\\bson.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 159,
                        "line_start": 159,
                        "suggested_replacement": "bson",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 47,
                            "highlight_start": 47,
                            "text": "                                write!(fmt, \"{}\", bson)?;"
                          }
                        ]
                      },
                      {
                        "byte_end": 5521,
                        "byte_start": 5515,
                        "column_end": 55,
                        "column_start": 49,
                        "expansion": null,
                        "file_name": "src\\bson.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 159,
                        "line_start": 159,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 55,
                            "highlight_start": 49,
                            "text": "                                write!(fmt, \"{}\", bson)?;"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::uninlined_format_args",
                  "explanation": null
                },
                "level": "warning",
                "message": "variables can be used directly in the `format!` string",
                "spans": [
                  {
                    "byte_end": 5522,
                    "byte_start": 5499,
                    "column_end": 56,
                    "column_start": 33,
                    "expansion": null,
                    "file_name": "src\\bson.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 159,
                    "line_start": 159,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 56,
                        "highlight_start": 33,
                        "text": "                                write!(fmt, \"{}\", bson)?;"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmphrjzoh4n/bson-2.15.0#bson@2.15.0",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphrjzoh4n\\bson-2.15.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "bson",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphrjzoh4n\\bson-2.15.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: variables can be used directly in the `format!` string\n   --> src\\bson.rs:163:25\n    |\n163 |                         write!(fmt, \"{}\", bson)?;\n    |                         ^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args\nhelp: change this to\n    |\n163 -                         write!(fmt, \"{}\", bson)?;\n163 +                         write!(fmt, \"{bson}\")?;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "change this to",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 5648,
                        "byte_start": 5648,
                        "column_end": 39,
                        "column_start": 39,
                        "expansion": null,
                        "file_name": "src\\bson.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 163,
                        "line_start": 163,
                        "suggested_replacement": "bson",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 39,
                            "highlight_start": 39,
                            "text": "                        write!(fmt, \"{}\", bson)?;"
                          }
                        ]
                      },
                      {
                        "byte_end": 5656,
                        "byte_start": 5650,
                        "column_end": 47,
                        "column_start": 41,
                        "expansion": null,
                        "file_name": "src\\bson.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 163,
                        "line_start": 163,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 47,
                            "highlight_start": 41,
                            "text": "                        write!(fmt, \"{}\", bson)?;"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::uninlined_format_args",
                  "explanation": null
                },
                "level": "warning",
                "message": "variables can be used directly in the `format!` string",
                "spans": [
                  {
                    "byte_end": 5657,
                    "byte_start": 5634,
                    "column_end": 48,
                    "column_start": 25,
                    "expansion": null,
                    "file_name": "src\\bson.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 163,
                    "line_start": 163,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 48,
                        "highlight_start": 25,
                        "text": "                        write!(fmt, \"{}\", bson)?;"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmphrjzoh4n/bson-2.15.0#bson@2.15.0",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphrjzoh4n\\bson-2.15.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "bson",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphrjzoh4n\\bson-2.15.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: variables can be used directly in the `format!` string\n   --> src\\bson.rs:181:33\n    |\n181 |             Bson::Boolean(b) => write!(fmt, \"{}\", b),\n    |                                 ^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args\nhelp: change this to\n    |\n181 -             Bson::Boolean(b) => write!(fmt, \"{}\", b),\n181 +             Bson::Boolean(b) => write!(fmt, \"{b}\"),\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "change this to",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 6296,
                        "byte_start": 6296,
                        "column_end": 47,
                        "column_start": 47,
                        "expansion": null,
                        "file_name": "src\\bson.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 181,
                        "line_start": 181,
                        "suggested_replacement": "b",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 47,
                            "highlight_start": 47,
                            "text": "            Bson::Boolean(b) => write!(fmt, \"{}\", b),"
                          }
                        ]
                      },
                      {
                        "byte_end": 6301,
                        "byte_start": 6298,
                        "column_end": 52,
                        "column_start": 49,
                        "expansion": null,
                        "file_name": "src\\bson.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 181,
                        "line_start": 181,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 52,
                            "highlight_start": 49,
                            "text": "            Bson::Boolean(b) => write!(fmt, \"{}\", b),"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::uninlined_format_args",
                  "explanation": null
                },
                "level": "warning",
                "message": "variables can be used directly in the `format!` string",
                "spans": [
                  {
                    "byte_end": 6302,
                    "byte_start": 6282,
                    "column_end": 53,
                    "column_start": 33,
                    "expansion": null,
                    "file_name": "src\\bson.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 181,
                    "line_start": 181,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 53,
                        "highlight_start": 33,
                        "text": "            Bson::Boolean(b) => write!(fmt, \"{}\", b),"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmphrjzoh4n/bson-2.15.0#bson@2.15.0",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphrjzoh4n\\bson-2.15.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "bson",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphrjzoh4n\\bson-2.15.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: variables can be used directly in the `format!` string\n   --> src\\bson.rs:183:47\n    |\n183 |             Bson::RegularExpression(ref x) => write!(fmt, \"{}\", x),\n    |                                               ^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args\nhelp: change this to\n    |\n183 -             Bson::RegularExpression(ref x) => write!(fmt, \"{}\", x),\n183 +             Bson::RegularExpression(ref x) => write!(fmt, \"{x}\"),\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "change this to",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 6411,
                        "byte_start": 6411,
                        "column_end": 61,
                        "column_start": 61,
                        "expansion": null,
                        "file_name": "src\\bson.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 183,
                        "line_start": 183,
                        "suggested_replacement": "x",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 61,
                            "highlight_start": 61,
                            "text": "            Bson::RegularExpression(ref x) => write!(fmt, \"{}\", x),"
                          }
                        ]
                      },
                      {
                        "byte_end": 6416,
                        "byte_start": 6413,
                        "column_end": 66,
                        "column_start": 63,
                        "expansion": null,
                        "file_name": "src\\bson.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 183,
                        "line_start": 183,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 66,
                            "highlight_start": 63,
                            "text": "            Bson::RegularExpression(ref x) => write!(fmt, \"{}\", x),"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::uninlined_format_args",
                  "explanation": null
                },
                "level": "warning",
                "message": "variables can be used directly in the `format!` string",
                "spans": [
                  {
                    "byte_end": 6417,
                    "byte_start": 6397,
                    "column_end": 67,
                    "column_start": 47,
                    "expansion": null,
                    "file_name": "src\\bson.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 183,
                    "line_start": 183,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 67,
                        "highlight_start": 47,
                        "text": "            Bson::RegularExpression(ref x) => write!(fmt, \"{}\", x),"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmphrjzoh4n/bson-2.15.0#bson@2.15.0",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphrjzoh4n\\bson-2.15.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "bson",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphrjzoh4n\\bson-2.15.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: variables can be used directly in the `format!` string\n   --> src\\bson.rs:188:31\n    |\n188 |             Bson::Int32(i) => write!(fmt, \"{}\", i),\n    |                               ^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args\nhelp: change this to\n    |\n188 -             Bson::Int32(i) => write!(fmt, \"{}\", i),\n188 +             Bson::Int32(i) => write!(fmt, \"{i}\"),\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "change this to",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 6647,
                        "byte_start": 6647,
                        "column_end": 45,
                        "column_start": 45,
                        "expansion": null,
                        "file_name": "src\\bson.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 188,
                        "line_start": 188,
                        "suggested_replacement": "i",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 45,
                            "highlight_start": 45,
                            "text": "            Bson::Int32(i) => write!(fmt, \"{}\", i),"
                          }
                        ]
                      },
                      {
                        "byte_end": 6652,
                        "byte_start": 6649,
                        "column_end": 50,
                        "column_start": 47,
                        "expansion": null,
                        "file_name": "src\\bson.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 188,
                        "line_start": 188,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 50,
                            "highlight_start": 47,
                            "text": "            Bson::Int32(i) => write!(fmt, \"{}\", i),"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::uninlined_format_args",
                  "explanation": null
                },
                "level": "warning",
                "message": "variables can be used directly in the `format!` string",
                "spans": [
                  {
                    "byte_end": 6653,
                    "byte_start": 6633,
                    "column_end": 51,
                    "column_start": 31,
                    "expansion": null,
                    "file_name": "src\\bson.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 188,
                    "line_start": 188,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 51,
                        "highlight_start": 31,
                        "text": "            Bson::Int32(i) => write!(fmt, \"{}\", i),"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmphrjzoh4n/bson-2.15.0#bson@2.15.0",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphrjzoh4n\\bson-2.15.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "bson",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphrjzoh4n\\bson-2.15.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: variables can be used directly in the `format!` string\n   --> src\\bson.rs:189:31\n    |\n189 |             Bson::Int64(i) => write!(fmt, \"{}\", i),\n    |                               ^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args\nhelp: change this to\n    |\n189 -             Bson::Int64(i) => write!(fmt, \"{}\", i),\n189 +             Bson::Int64(i) => write!(fmt, \"{i}\"),\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "change this to",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 6699,
                        "byte_start": 6699,
                        "column_end": 45,
                        "column_start": 45,
                        "expansion": null,
                        "file_name": "src\\bson.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 189,
                        "line_start": 189,
                        "suggested_replacement": "i",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 45,
                            "highlight_start": 45,
                            "text": "            Bson::Int64(i) => write!(fmt, \"{}\", i),"
                          }
                        ]
                      },
                      {
                        "byte_end": 6704,
                        "byte_start": 6701,
                        "column_end": 50,
                        "column_start": 47,
                        "expansion": null,
                        "file_name": "src\\bson.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 189,
                        "line_start": 189,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 50,
                            "highlight_start": 47,
                            "text": "            Bson::Int64(i) => write!(fmt, \"{}\", i),"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::uninlined_format_args",
                  "explanation": null
                },
                "level": "warning",
                "message": "variables can be used directly in the `format!` string",
                "spans": [
                  {
                    "byte_end": 6705,
                    "byte_start": 6685,
                    "column_end": 51,
                    "column_start": 31,
                    "expansion": null,
                    "file_name": "src\\bson.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 189,
                    "line_start": 189,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 51,
                        "highlight_start": 31,
                        "text": "            Bson::Int64(i) => write!(fmt, \"{}\", i),"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmphrjzoh4n/bson-2.15.0#bson@2.15.0",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphrjzoh4n\\bson-2.15.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "bson",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphrjzoh4n\\bson-2.15.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: variables can be used directly in the `format!` string\n   --> src\\bson.rs:190:39\n    |\n190 |             Bson::Timestamp(ref x) => write!(fmt, \"{}\", x),\n    |                                       ^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args\nhelp: change this to\n    |\n190 -             Bson::Timestamp(ref x) => write!(fmt, \"{}\", x),\n190 +             Bson::Timestamp(ref x) => write!(fmt, \"{x}\"),\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "change this to",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 6759,
                        "byte_start": 6759,
                        "column_end": 53,
                        "column_start": 53,
                        "expansion": null,
                        "file_name": "src\\bson.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 190,
                        "line_start": 190,
                        "suggested_replacement": "x",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 53,
                            "highlight_start": 53,
                            "text": "            Bson::Timestamp(ref x) => write!(fmt, \"{}\", x),"
                          }
                        ]
                      },
                      {
                        "byte_end": 6764,
                        "byte_start": 6761,
                        "column_end": 58,
                        "column_start": 55,
                        "expansion": null,
                        "file_name": "src\\bson.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 190,
                        "line_start": 190,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 58,
                            "highlight_start": 55,
                            "text": "            Bson::Timestamp(ref x) => write!(fmt, \"{}\", x),"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::uninlined_format_args",
                  "explanation": null
                },
                "level": "warning",
                "message": "variables can be used directly in the `format!` string",
                "spans": [
                  {
                    "byte_end": 6765,
                    "byte_start": 6745,
                    "column_end": 59,
                    "column_start": 39,
                    "expansion": null,
                    "file_name": "src\\bson.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 190,
                    "line_start": 190,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 59,
                        "highlight_start": 39,
                        "text": "            Bson::Timestamp(ref x) => write!(fmt, \"{}\", x),"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmphrjzoh4n/bson-2.15.0#bson@2.15.0",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphrjzoh4n\\bson-2.15.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "bson",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphrjzoh4n\\bson-2.15.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: variables can be used directly in the `format!` string\n   --> src\\bson.rs:191:36\n    |\n191 |             Bson::Binary(ref x) => write!(fmt, \"{}\", x),\n    |                                    ^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args\nhelp: change this to\n    |\n191 -             Bson::Binary(ref x) => write!(fmt, \"{}\", x),\n191 +             Bson::Binary(ref x) => write!(fmt, \"{x}\"),\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "change this to",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 6816,
                        "byte_start": 6816,
                        "column_end": 50,
                        "column_start": 50,
                        "expansion": null,
                        "file_name": "src\\bson.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 191,
                        "line_start": 191,
                        "suggested_replacement": "x",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 50,
                            "highlight_start": 50,
                            "text": "            Bson::Binary(ref x) => write!(fmt, \"{}\", x),"
                          }
                        ]
                      },
                      {
                        "byte_end": 6821,
                        "byte_start": 6818,
                        "column_end": 55,
                        "column_start": 52,
                        "expansion": null,
                        "file_name": "src\\bson.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 191,
                        "line_start": 191,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 55,
                            "highlight_start": 52,
                            "text": "            Bson::Binary(ref x) => write!(fmt, \"{}\", x),"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::uninlined_format_args",
                  "explanation": null
                },
                "level": "warning",
                "message": "variables can be used directly in the `format!` string",
                "spans": [
                  {
                    "byte_end": 6822,
                    "byte_start": 6802,
                    "column_end": 56,
                    "column_start": 36,
                    "expansion": null,
                    "file_name": "src\\bson.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 191,
                    "line_start": 191,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 56,
                        "highlight_start": 36,
                        "text": "            Bson::Binary(ref x) => write!(fmt, \"{}\", x),"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmphrjzoh4n/bson-2.15.0#bson@2.15.0",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphrjzoh4n\\bson-2.15.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "bson",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphrjzoh4n\\bson-2.15.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: variables can be used directly in the `format!` string\n   --> src\\bson.rs:192:39\n    |\n192 |             Bson::ObjectId(ref id) => write!(fmt, \"ObjectId(\\\"{}\\\")\", id),\n    |                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args\nhelp: change this to\n    |\n192 -             Bson::ObjectId(ref id) => write!(fmt, \"ObjectId(\\\"{}\\\")\", id),\n192 +             Bson::ObjectId(ref id) => write!(fmt, \"ObjectId(\\\"{id}\\\")\"),\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "change this to",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 6887,
                        "byte_start": 6887,
                        "column_end": 64,
                        "column_start": 64,
                        "expansion": null,
                        "file_name": "src\\bson.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 192,
                        "line_start": 192,
                        "suggested_replacement": "id",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 64,
                            "highlight_start": 64,
                            "text": "            Bson::ObjectId(ref id) => write!(fmt, \"ObjectId(\\\"{}\\\")\", id),"
                          }
                        ]
                      },
                      {
                        "byte_end": 6896,
                        "byte_start": 6892,
                        "column_end": 73,
                        "column_start": 69,
                        "expansion": null,
                        "file_name": "src\\bson.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 192,
                        "line_start": 192,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 73,
                            "highlight_start": 69,
                            "text": "            Bson::ObjectId(ref id) => write!(fmt, \"ObjectId(\\\"{}\\\")\", id),"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::uninlined_format_args",
                  "explanation": null
                },
                "level": "warning",
                "message": "variables can be used directly in the `format!` string",
                "spans": [
                  {
                    "byte_end": 6897,
                    "byte_start": 6862,
                    "column_end": 74,
                    "column_start": 39,
                    "expansion": null,
                    "file_name": "src\\bson.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 192,
                    "line_start": 192,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 74,
                        "highlight_start": 39,
                        "text": "            Bson::ObjectId(ref id) => write!(fmt, \"ObjectId(\\\"{}\\\")\", id),"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmphrjzoh4n/bson-2.15.0#bson@2.15.0",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphrjzoh4n\\bson-2.15.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "bson",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphrjzoh4n\\bson-2.15.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: variables can be used directly in the `format!` string\n   --> src\\bson.rs:193:42\n    |\n193 |             Bson::DateTime(date_time) => write!(fmt, \"DateTime(\\\"{}\\\")\", date_time),\n    |                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args\nhelp: change this to\n    |\n193 -             Bson::DateTime(date_time) => write!(fmt, \"DateTime(\\\"{}\\\")\", date_time),\n193 +             Bson::DateTime(date_time) => write!(fmt, \"DateTime(\\\"{date_time}\\\")\"),\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "change this to",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 6965,
                        "byte_start": 6965,
                        "column_end": 67,
                        "column_start": 67,
                        "expansion": null,
                        "file_name": "src\\bson.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 193,
                        "line_start": 193,
                        "suggested_replacement": "date_time",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 67,
                            "highlight_start": 67,
                            "text": "            Bson::DateTime(date_time) => write!(fmt, \"DateTime(\\\"{}\\\")\", date_time),"
                          }
                        ]
                      },
                      {
                        "byte_end": 6981,
                        "byte_start": 6970,
                        "column_end": 83,
                        "column_start": 72,
                        "expansion": null,
                        "file_name": "src\\bson.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 193,
                        "line_start": 193,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 83,
                            "highlight_start": 72,
                            "text": "            Bson::DateTime(date_time) => write!(fmt, \"DateTime(\\\"{}\\\")\", date_time),"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::uninlined_format_args",
                  "explanation": null
                },
                "level": "warning",
                "message": "variables can be used directly in the `format!` string",
                "spans": [
                  {
                    "byte_end": 6982,
                    "byte_start": 6940,
                    "column_end": 84,
                    "column_start": 42,
                    "expansion": null,
                    "file_name": "src\\bson.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 193,
                    "line_start": 193,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 84,
                        "highlight_start": 42,
                        "text": "            Bson::DateTime(date_time) => write!(fmt, \"DateTime(\\\"{}\\\")\", date_time),"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmphrjzoh4n/bson-2.15.0#bson@2.15.0",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphrjzoh4n\\bson-2.15.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "bson",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphrjzoh4n\\bson-2.15.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: variables can be used directly in the `format!` string\n   --> src\\bson.rs:194:38\n    |\n194 |             Bson::Symbol(ref sym) => write!(fmt, \"Symbol(\\\"{}\\\")\", sym),\n    |                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args\nhelp: change this to\n    |\n194 -             Bson::Symbol(ref sym) => write!(fmt, \"Symbol(\\\"{}\\\")\", sym),\n194 +             Bson::Symbol(ref sym) => write!(fmt, \"Symbol(\\\"{sym}\\\")\"),\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "change this to",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 7044,
                        "byte_start": 7044,
                        "column_end": 61,
                        "column_start": 61,
                        "expansion": null,
                        "file_name": "src\\bson.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 194,
                        "line_start": 194,
                        "suggested_replacement": "sym",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 61,
                            "highlight_start": 61,
                            "text": "            Bson::Symbol(ref sym) => write!(fmt, \"Symbol(\\\"{}\\\")\", sym),"
                          }
                        ]
                      },
                      {
                        "byte_end": 7054,
                        "byte_start": 7049,
                        "column_end": 71,
                        "column_start": 66,
                        "expansion": null,
                        "file_name": "src\\bson.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 194,
                        "line_start": 194,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 71,
                            "highlight_start": 66,
                            "text": "            Bson::Symbol(ref sym) => write!(fmt, \"Symbol(\\\"{}\\\")\", sym),"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::uninlined_format_args",
                  "explanation": null
                },
                "level": "warning",
                "message": "variables can be used directly in the `format!` string",
                "spans": [
                  {
                    "byte_end": 7055,
                    "byte_start": 7021,
                    "column_end": 72,
                    "column_start": 38,
                    "expansion": null,
                    "file_name": "src\\bson.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 194,
                    "line_start": 194,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 72,
                        "highlight_start": 38,
                        "text": "            Bson::Symbol(ref sym) => write!(fmt, \"Symbol(\\\"{}\\\")\", sym),"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmphrjzoh4n/bson-2.15.0#bson@2.15.0",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphrjzoh4n\\bson-2.15.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "bson",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphrjzoh4n\\bson-2.15.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: variables can be used directly in the `format!` string\n   --> src\\bson.rs:195:40\n    |\n195 |             Bson::Decimal128(ref d) => write!(fmt, \"{}\", d),\n    |                                        ^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args\nhelp: change this to\n    |\n195 -             Bson::Decimal128(ref d) => write!(fmt, \"{}\", d),\n195 +             Bson::Decimal128(ref d) => write!(fmt, \"{d}\"),\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "change this to",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 7110,
                        "byte_start": 7110,
                        "column_end": 54,
                        "column_start": 54,
                        "expansion": null,
                        "file_name": "src\\bson.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 195,
                        "line_start": 195,
                        "suggested_replacement": "d",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 54,
                            "highlight_start": 54,
                            "text": "            Bson::Decimal128(ref d) => write!(fmt, \"{}\", d),"
                          }
                        ]
                      },
                      {
                        "byte_end": 7115,
                        "byte_start": 7112,
                        "column_end": 59,
                        "column_start": 56,
                        "expansion": null,
                        "file_name": "src\\bson.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 195,
                        "line_start": 195,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 59,
                            "highlight_start": 56,
                            "text": "            Bson::Decimal128(ref d) => write!(fmt, \"{}\", d),"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::uninlined_format_args",
                  "explanation": null
                },
                "level": "warning",
                "message": "variables can be used directly in the `format!` string",
                "spans": [
                  {
                    "byte_end": 7116,
                    "byte_start": 7096,
                    "column_end": 60,
                    "column_start": 40,
                    "expansion": null,
                    "file_name": "src\\bson.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 195,
                    "line_start": 195,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 60,
                        "highlight_start": 40,
                        "text": "            Bson::Decimal128(ref d) => write!(fmt, \"{}\", d),"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmphrjzoh4n/bson-2.15.0#bson@2.15.0",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphrjzoh4n\\bson-2.15.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "bson",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphrjzoh4n\\bson-2.15.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: variables can be used directly in the `format!` string\n   --> src\\bson.rs:202:19\n    |\n202 |             }) => write!(fmt, \"DbPointer({}, {})\", namespace, id),\n    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args\nhelp: change this to\n    |\n202 -             }) => write!(fmt, \"DbPointer({}, {})\", namespace, id),\n202 +             }) => write!(fmt, \"DbPointer({namespace}, {id})\"),\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "change this to",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 7414,
                        "byte_start": 7414,
                        "column_end": 43,
                        "column_start": 43,
                        "expansion": null,
                        "file_name": "src\\bson.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 202,
                        "line_start": 202,
                        "suggested_replacement": "namespace",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 43,
                            "highlight_start": 43,
                            "text": "            }) => write!(fmt, \"DbPointer({}, {})\", namespace, id),"
                          }
                        ]
                      },
                      {
                        "byte_end": 7418,
                        "byte_start": 7418,
                        "column_end": 47,
                        "column_start": 47,
                        "expansion": null,
                        "file_name": "src\\bson.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 202,
                        "line_start": 202,
                        "suggested_replacement": "id",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 47,
                            "highlight_start": 47,
                            "text": "            }) => write!(fmt, \"DbPointer({}, {})\", namespace, id),"
                          }
                        ]
                      },
                      {
                        "byte_end": 7432,
                        "byte_start": 7421,
                        "column_end": 61,
                        "column_start": 50,
                        "expansion": null,
                        "file_name": "src\\bson.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 202,
                        "line_start": 202,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 61,
                            "highlight_start": 50,
                            "text": "            }) => write!(fmt, \"DbPointer({}, {})\", namespace, id),"
                          }
                        ]
                      },
                      {
                        "byte_end": 7436,
                        "byte_start": 7432,
                        "column_end": 65,
                        "column_start": 61,
                        "expansion": null,
                        "file_name": "src\\bson.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 202,
                        "line_start": 202,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 65,
                            "highlight_start": 61,
                            "text": "            }) => write!(fmt, \"DbPointer({}, {})\", namespace, id),"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::uninlined_format_args",
                  "explanation": null
                },
                "level": "warning",
                "message": "variables can be used directly in the `format!` string",
                "spans": [
                  {
                    "byte_end": 7437,
                    "byte_start": 7390,
                    "column_end": 66,
                    "column_start": 19,
                    "expansion": null,
                    "file_name": "src\\bson.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 202,
                    "line_start": 202,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 66,
                        "highlight_start": 19,
                        "text": "            }) => write!(fmt, \"DbPointer({}, {})\", namespace, id),"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmphrjzoh4n/bson-2.15.0#bson@2.15.0",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphrjzoh4n\\bson-2.15.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "bson",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphrjzoh4n\\bson-2.15.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: variables can be used directly in the `format!` string\n   --> src\\bson.rs:738:18\n    |\n738 |             _ => panic!(\"Attempted conversion of invalid data type: {}\", self),\n    |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args\nhelp: change this to\n    |\n738 -             _ => panic!(\"Attempted conversion of invalid data type: {}\", self),\n738 +             _ => panic!(\"Attempted conversion of invalid data type: {self}\"),\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "change this to",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 24386,
                        "byte_start": 24386,
                        "column_end": 70,
                        "column_start": 70,
                        "expansion": null,
                        "file_name": "src\\bson.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 738,
                        "line_start": 738,
                        "suggested_replacement": "self",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 70,
                            "highlight_start": 70,
                            "text": "            _ => panic!(\"Attempted conversion of invalid data type: {}\", self),"
                          }
                        ]
                      },
                      {
                        "byte_end": 24394,
                        "byte_start": 24388,
                        "column_end": 78,
                        "column_start": 72,
                        "expansion": null,
                        "file_name": "src\\bson.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 738,
                        "line_start": 738,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 78,
                            "highlight_start": 72,
                            "text": "            _ => panic!(\"Attempted conversion of invalid data type: {}\", self),"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::uninlined_format_args",
                  "explanation": null
                },
                "level": "warning",
                "message": "variables can be used directly in the `format!` string",
                "spans": [
                  {
                    "byte_end": 24395,
                    "byte_start": 24334,
                    "column_end": 79,
                    "column_start": 18,
                    "expansion": null,
                    "file_name": "src\\bson.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 738,
                    "line_start": 738,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 79,
                        "highlight_start": 18,
                        "text": "            _ => panic!(\"Attempted conversion of invalid data type: {}\", self),"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmphrjzoh4n/bson-2.15.0#bson@2.15.0",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphrjzoh4n\\bson-2.15.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "bson",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphrjzoh4n\\bson-2.15.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: variables can be used directly in the `format!` string\n   --> src\\datetime.rs:628:17\n    |\n628 |                 write!(fmt, \"{}\", message)\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args\nhelp: change this to\n    |\n628 -                 write!(fmt, \"{}\", message)\n628 +                 write!(fmt, \"{message}\")\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "change this to",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 22017,
                        "byte_start": 22017,
                        "column_end": 31,
                        "column_start": 31,
                        "expansion": null,
                        "file_name": "src\\datetime.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 628,
                        "line_start": 628,
                        "suggested_replacement": "message",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 31,
                            "highlight_start": 31,
                            "text": "                write!(fmt, \"{}\", message)"
                          }
                        ]
                      },
                      {
                        "byte_end": 22028,
                        "byte_start": 22019,
                        "column_end": 42,
                        "column_start": 33,
                        "expansion": null,
                        "file_name": "src\\datetime.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 628,
                        "line_start": 628,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 42,
                            "highlight_start": 33,
                            "text": "                write!(fmt, \"{}\", message)"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::uninlined_format_args",
                  "explanation": null
                },
                "level": "warning",
                "message": "variables can be used directly in the `format!` string",
                "spans": [
                  {
                    "byte_end": 22029,
                    "byte_start": 22003,
                    "column_end": 43,
                    "column_start": 17,
                    "expansion": null,
                    "file_name": "src\\datetime.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 628,
                    "line_start": 628,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 43,
                        "highlight_start": 17,
                        "text": "                write!(fmt, \"{}\", message)"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmphrjzoh4n/bson-2.15.0#bson@2.15.0",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphrjzoh4n\\bson-2.15.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "bson",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphrjzoh4n\\bson-2.15.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: variables can be used directly in the `format!` string\n  --> src\\de\\error.rs:90:77\n   |\n90 |               Error::UnrecognizedDocumentElementType { key, element_type } => write!(\n   |  _____________________________________________________________________________^\n91 | |                 fmt,\n92 | |                 \"unrecognized element type for key \\\"{}\\\": `{:#x}`\",\n93 | |                 key, element_type\n94 | |             ),\n   | |_____________^\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "change this to",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 2785,
                        "byte_start": 2785,
                        "column_end": 55,
                        "column_start": 55,
                        "expansion": null,
                        "file_name": "src\\de\\error.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 92,
                        "line_start": 92,
                        "suggested_replacement": "key",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 55,
                            "highlight_start": 55,
                            "text": "                \"unrecognized element type for key \\\"{}\\\": `{:#x}`\","
                          }
                        ]
                      },
                      {
                        "byte_end": 2792,
                        "byte_start": 2792,
                        "column_end": 62,
                        "column_start": 62,
                        "expansion": null,
                        "file_name": "src\\de\\error.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 92,
                        "line_start": 92,
                        "suggested_replacement": "element_type",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 62,
                            "highlight_start": 62,
                            "text": "                \"unrecognized element type for key \\\"{}\\\": `{:#x}`\","
                          }
                        ]
                      },
                      {
                        "byte_end": 2819,
                        "byte_start": 2798,
                        "column_end": 20,
                        "column_start": 68,
                        "expansion": null,
                        "file_name": "src\\de\\error.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 93,
                        "line_start": 92,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 69,
                            "highlight_start": 68,
                            "text": "                \"unrecognized element type for key \\\"{}\\\": `{:#x}`\","
                          },
                          {
                            "highlight_end": 20,
                            "highlight_start": 1,
                            "text": "                key, element_type"
                          }
                        ]
                      },
                      {
                        "byte_end": 2833,
                        "byte_start": 2819,
                        "column_end": 34,
                        "column_start": 20,
                        "expansion": null,
                        "file_name": "src\\de\\error.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 93,
                        "line_start": 93,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 34,
                            "highlight_start": 20,
                            "text": "                key, element_type"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::uninlined_format_args",
                  "explanation": null
                },
                "level": "warning",
                "message": "variables can be used directly in the `format!` string",
                "spans": [
                  {
                    "byte_end": 2847,
                    "byte_start": 2702,
                    "column_end": 14,
                    "column_start": 77,
                    "expansion": null,
                    "file_name": "src\\de\\error.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 94,
                    "line_start": 90,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 84,
                        "highlight_start": 77,
                        "text": "            Error::UnrecognizedDocumentElementType { key, element_type } => write!("
                      },
                      {
                        "highlight_end": 21,
                        "highlight_start": 1,
                        "text": "                fmt,"
                      },
                      {
                        "highlight_end": 69,
                        "highlight_start": 1,
                        "text": "                \"unrecognized element type for key \\\"{}\\\": `{:#x}`\","
                      },
                      {
                        "highlight_end": 34,
                        "highlight_start": 1,
                        "text": "                key, element_type"
                      },
                      {
                        "highlight_end": 14,
                        "highlight_start": 1,
                        "text": "            ),"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmphrjzoh4n/bson-2.15.0#bson@2.15.0",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphrjzoh4n\\bson-2.15.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "bson",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphrjzoh4n\\bson-2.15.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: variables can be used directly in the `format!` string\n   --> src\\de\\raw.rs:248:36\n    |\n248 |             t => Err(Error::custom(format!(\"expected enum, instead got {:?}\", t))),\n    |                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args\nhelp: change this to\n    |\n248 -             t => Err(Error::custom(format!(\"expected enum, instead got {:?}\", t))),\n248 +             t => Err(Error::custom(format!(\"expected enum, instead got {t:?}\"))),\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "change this to",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 9232,
                        "byte_start": 9232,
                        "column_end": 73,
                        "column_start": 73,
                        "expansion": null,
                        "file_name": "src\\de\\raw.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 248,
                        "line_start": 248,
                        "suggested_replacement": "t",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 73,
                            "highlight_start": 73,
                            "text": "            t => Err(Error::custom(format!(\"expected enum, instead got {:?}\", t))),"
                          }
                        ]
                      },
                      {
                        "byte_end": 9239,
                        "byte_start": 9236,
                        "column_end": 80,
                        "column_start": 77,
                        "expansion": null,
                        "file_name": "src\\de\\raw.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 248,
                        "line_start": 248,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 80,
                            "highlight_start": 77,
                            "text": "            t => Err(Error::custom(format!(\"expected enum, instead got {:?}\", t))),"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::uninlined_format_args",
                  "explanation": null
                },
                "level": "warning",
                "message": "variables can be used directly in the `format!` string",
                "spans": [
                  {
                    "byte_end": 9240,
                    "byte_start": 9195,
                    "column_end": 81,
                    "column_start": 36,
                    "expansion": null,
                    "file_name": "src\\de\\raw.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 248,
                    "line_start": 248,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 81,
                        "highlight_start": 36,
                        "text": "            t => Err(Error::custom(format!(\"expected enum, instead got {:?}\", t))),"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmphrjzoh4n/bson-2.15.0#bson@2.15.0",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphrjzoh4n\\bson-2.15.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "bson",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphrjzoh4n\\bson-2.15.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: variables can be used directly in the `format!` string\n  --> src\\de\\serde.rs:81:27\n   |\n81 |                   let err = format!(\n   |  ___________________________^\n82 | |                     \"expected map containing extended-JSON formatted ObjectId, instead found {}\",\n83 | |                     bson\n84 | |                 );\n   | |_________________^\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "change this to",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 2030,
                        "byte_start": 2030,
                        "column_end": 95,
                        "column_start": 95,
                        "expansion": null,
                        "file_name": "src\\de\\serde.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 82,
                        "line_start": 82,
                        "suggested_replacement": "bson",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 95,
                            "highlight_start": 95,
                            "text": "                    \"expected map containing extended-JSON formatted ObjectId, instead found {}\","
                          }
                        ]
                      },
                      {
                        "byte_end": 2058,
                        "byte_start": 2032,
                        "column_end": 25,
                        "column_start": 97,
                        "expansion": null,
                        "file_name": "src\\de\\serde.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 83,
                        "line_start": 82,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 98,
                            "highlight_start": 97,
                            "text": "                    \"expected map containing extended-JSON formatted ObjectId, instead found {}\","
                          },
                          {
                            "highlight_end": 25,
                            "highlight_start": 1,
                            "text": "                    bson"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::uninlined_format_args",
                  "explanation": null
                },
                "level": "warning",
                "message": "variables can be used directly in the `format!` string",
                "spans": [
                  {
                    "byte_end": 2076,
                    "byte_start": 1927,
                    "column_end": 18,
                    "column_start": 27,
                    "expansion": null,
                    "file_name": "src\\de\\serde.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 84,
                    "line_start": 81,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 35,
                        "highlight_start": 27,
                        "text": "                let err = format!("
                      },
                      {
                        "highlight_end": 98,
                        "highlight_start": 1,
                        "text": "                    \"expected map containing extended-JSON formatted ObjectId, instead found {}\","
                      },
                      {
                        "highlight_end": 25,
                        "highlight_start": 1,
                        "text": "                    bson"
                      },
                      {
                        "highlight_end": 18,
                        "highlight_start": 1,
                        "text": "                );"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmphrjzoh4n/bson-2.15.0#bson@2.15.0",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphrjzoh4n\\bson-2.15.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "bson",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphrjzoh4n\\bson-2.15.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: variables can be used directly in the `format!` string\n   --> src\\de\\serde.rs:114:27\n    |\n114 |                 let err = format!(\"expected document, found extended JSON data type: {}\", bson);\n    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args\nhelp: change this to\n    |\n114 -                 let err = format!(\"expected document, found extended JSON data type: {}\", bson);\n114 +                 let err = format!(\"expected document, found extended JSON data type: {bson}\");\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "change this to",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 2993,
                        "byte_start": 2993,
                        "column_end": 87,
                        "column_start": 87,
                        "expansion": null,
                        "file_name": "src\\de\\serde.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 114,
                        "line_start": 114,
                        "suggested_replacement": "bson",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 87,
                            "highlight_start": 87,
                            "text": "                let err = format!(\"expected document, found extended JSON data type: {}\", bson);"
                          }
                        ]
                      },
                      {
                        "byte_end": 3001,
                        "byte_start": 2995,
                        "column_end": 95,
                        "column_start": 89,
                        "expansion": null,
                        "file_name": "src\\de\\serde.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 114,
                        "line_start": 114,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 95,
                            "highlight_start": 89,
                            "text": "                let err = format!(\"expected document, found extended JSON data type: {}\", bson);"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::uninlined_format_args",
                  "explanation": null
                },
                "level": "warning",
                "message": "variables can be used directly in the `format!` string",
                "spans": [
                  {
                    "byte_end": 3002,
                    "byte_start": 2933,
                    "column_end": 96,
                    "column_start": 27,
                    "expansion": null,
                    "file_name": "src\\de\\serde.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 114,
                    "line_start": 114,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 96,
                        "highlight_start": 27,
                        "text": "                let err = format!(\"expected document, found extended JSON data type: {}\", bson);"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmphrjzoh4n/bson-2.15.0#bson@2.15.0",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphrjzoh4n\\bson-2.15.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "bson",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphrjzoh4n\\bson-2.15.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: variables can be used directly in the `format!` string\n   --> src\\de\\serde.rs:548:27\n    |\n548 |           Err(Error::custom(format!(\n    |  ___________________________^\n549 | |             \"cannot represent {} as a signed number\",\n550 | |             value\n551 | |         )))\n    | |_________^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "change this to",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 17039,
                        "byte_start": 17039,
                        "column_end": 32,
                        "column_start": 32,
                        "expansion": null,
                        "file_name": "src\\de\\serde.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 549,
                        "line_start": 549,
                        "suggested_replacement": "value",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 32,
                            "highlight_start": 32,
                            "text": "            \"cannot represent {} as a signed number\","
                          }
                        ]
                      },
                      {
                        "byte_end": 17079,
                        "byte_start": 17060,
                        "column_end": 18,
                        "column_start": 53,
                        "expansion": null,
                        "file_name": "src\\de\\serde.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 550,
                        "line_start": 549,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 54,
                            "highlight_start": 53,
                            "text": "            \"cannot represent {} as a signed number\","
                          },
                          {
                            "highlight_end": 18,
                            "highlight_start": 1,
                            "text": "            value"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::uninlined_format_args",
                  "explanation": null
                },
                "level": "warning",
                "message": "variables can be used directly in the `format!` string",
                "spans": [
                  {
                    "byte_end": 17089,
                    "byte_start": 16999,
                    "column_end": 10,
                    "column_start": 27,
                    "expansion": null,
                    "file_name": "src\\de\\serde.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 551,
                    "line_start": 548,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 35,
                        "highlight_start": 27,
                        "text": "        Err(Error::custom(format!("
                      },
                      {
                        "highlight_end": 54,
                        "highlight_start": 1,
                        "text": "            \"cannot represent {} as a signed number\","
                      },
                      {
                        "highlight_end": 18,
                        "highlight_start": 1,
                        "text": "            value"
                      },
                      {
                        "highlight_end": 10,
                        "highlight_start": 1,
                        "text": "        )))"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmphrjzoh4n/bson-2.15.0#bson@2.15.0",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphrjzoh4n\\bson-2.15.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "bson",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphrjzoh4n\\bson-2.15.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: variables can be used directly in the `format!` string\n   --> src\\de\\serde.rs:817:18\n    |\n817 |                 &format!(\"expected map with a single key, got extra key \\\"{}\\\"\", k).as_str(),\n    |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args\nhelp: change this to\n    |\n817 -                 &format!(\"expected map with a single key, got extra key \\\"{}\\\"\", k).as_str(),\n817 +                 &format!(\"expected map with a single key, got extra key \\\"{k}\\\"\").as_str(),\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "change this to",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 25159,
                        "byte_start": 25159,
                        "column_end": 76,
                        "column_start": 76,
                        "expansion": null,
                        "file_name": "src\\de\\serde.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 817,
                        "line_start": 817,
                        "suggested_replacement": "k",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 76,
                            "highlight_start": 76,
                            "text": "                &format!(\"expected map with a single key, got extra key \\\"{}\\\"\", k).as_str(),"
                          }
                        ]
                      },
                      {
                        "byte_end": 25166,
                        "byte_start": 25163,
                        "column_end": 83,
                        "column_start": 80,
                        "expansion": null,
                        "file_name": "src\\de\\serde.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 817,
                        "line_start": 817,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 83,
                            "highlight_start": 80,
                            "text": "                &format!(\"expected map with a single key, got extra key \\\"{}\\\"\", k).as_str(),"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::uninlined_format_args",
                  "explanation": null
                },
                "level": "warning",
                "message": "variables can be used directly in the `format!` string",
                "spans": [
                  {
                    "byte_end": 25167,
                    "byte_start": 25101,
                    "column_end": 84,
                    "column_start": 18,
                    "expansion": null,
                    "file_name": "src\\de\\serde.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 817,
                    "line_start": 817,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 84,
                        "highlight_start": 18,
                        "text": "                &format!(\"expected map with a single key, got extra key \\\"{}\\\"\", k).as_str(),"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmphrjzoh4n/bson-2.15.0#bson@2.15.0",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphrjzoh4n\\bson-2.15.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "bson",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphrjzoh4n\\bson-2.15.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: variables can be used directly in the `format!` string\n    --> src\\de\\serde.rs:1212:39\n     |\n1212 |               d => Err(D::Error::custom(format!(\n     |  _______________________________________^\n1213 | |                 \"expecting Binary but got {:?} instead\",\n1214 | |                 d\n1215 | |             ))),\n     | |_____________^\n     |\n     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "change this to",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 37036,
                        "byte_start": 37036,
                        "column_end": 44,
                        "column_start": 44,
                        "expansion": null,
                        "file_name": "src\\de\\serde.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 1213,
                        "line_start": 1213,
                        "suggested_replacement": "d",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 44,
                            "highlight_start": 44,
                            "text": "                \"expecting Binary but got {:?} instead\","
                          }
                        ]
                      },
                      {
                        "byte_end": 37067,
                        "byte_start": 37048,
                        "column_end": 18,
                        "column_start": 56,
                        "expansion": null,
                        "file_name": "src\\de\\serde.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 1214,
                        "line_start": 1213,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 57,
                            "highlight_start": 56,
                            "text": "                \"expecting Binary but got {:?} instead\","
                          },
                          {
                            "highlight_end": 18,
                            "highlight_start": 1,
                            "text": "                d"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::uninlined_format_args",
                  "explanation": null
                },
                "level": "warning",
                "message": "variables can be used directly in the `format!` string",
                "spans": [
                  {
                    "byte_end": 37081,
                    "byte_start": 36984,
                    "column_end": 14,
                    "column_start": 39,
                    "expansion": null,
                    "file_name": "src\\de\\serde.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 1215,
                    "line_start": 1212,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 47,
                        "highlight_start": 39,
                        "text": "            d => Err(D::Error::custom(format!("
                      },
                      {
                        "highlight_end": 57,
                        "highlight_start": 1,
                        "text": "                \"expecting Binary but got {:?} instead\","
                      },
                      {
                        "highlight_end": 18,
                        "highlight_start": 1,
                        "text": "                d"
                      },
                      {
                        "highlight_end": 14,
                        "highlight_start": 1,
                        "text": "            ))),"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmphrjzoh4n/bson-2.15.0#bson@2.15.0",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphrjzoh4n\\bson-2.15.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "bson",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphrjzoh4n\\bson-2.15.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: variables can be used directly in the `format!` string\n    --> src\\de\\serde.rs:1227:39\n     |\n1227 |               o => Err(D::Error::custom(format!(\n     |  _______________________________________^\n1228 | |                 \"expecting Decimal128, got {:?}\",\n1229 | |                 o\n1230 | |             ))),\n     | |_____________^\n     |\n     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "change this to",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 37451,
                        "byte_start": 37451,
                        "column_end": 45,
                        "column_start": 45,
                        "expansion": null,
                        "file_name": "src\\de\\serde.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 1228,
                        "line_start": 1228,
                        "suggested_replacement": "o",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 45,
                            "highlight_start": 45,
                            "text": "                \"expecting Decimal128, got {:?}\","
                          }
                        ]
                      },
                      {
                        "byte_end": 37474,
                        "byte_start": 37455,
                        "column_end": 18,
                        "column_start": 49,
                        "expansion": null,
                        "file_name": "src\\de\\serde.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 1229,
                        "line_start": 1228,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 50,
                            "highlight_start": 49,
                            "text": "                \"expecting Decimal128, got {:?}\","
                          },
                          {
                            "highlight_end": 18,
                            "highlight_start": 1,
                            "text": "                o"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::uninlined_format_args",
                  "explanation": null
                },
                "level": "warning",
                "message": "variables can be used directly in the `format!` string",
                "spans": [
                  {
                    "byte_end": 37488,
                    "byte_start": 37398,
                    "column_end": 14,
                    "column_start": 39,
                    "expansion": null,
                    "file_name": "src\\de\\serde.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 1230,
                    "line_start": 1227,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 47,
                        "highlight_start": 39,
                        "text": "            o => Err(D::Error::custom(format!("
                      },
                      {
                        "highlight_end": 50,
                        "highlight_start": 1,
                        "text": "                \"expecting Decimal128, got {:?}\","
                      },
                      {
                        "highlight_end": 18,
                        "highlight_start": 1,
                        "text": "                o"
                      },
                      {
                        "highlight_end": 14,
                        "highlight_start": 1,
                        "text": "            ))),"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmphrjzoh4n/bson-2.15.0#bson@2.15.0",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphrjzoh4n\\bson-2.15.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "bson",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphrjzoh4n\\bson-2.15.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: variables can be used directly in the `format!` string\n   --> src\\decimal128.rs:294:25\n    |\n294 |                         write!(f, \"{}\", coeff_str)?;\n    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args\nhelp: change this to\n    |\n294 -                         write!(f, \"{}\", coeff_str)?;\n294 +                         write!(f, \"{coeff_str}\")?;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "change this to",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 9633,
                        "byte_start": 9633,
                        "column_end": 37,
                        "column_start": 37,
                        "expansion": null,
                        "file_name": "src\\decimal128.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 294,
                        "line_start": 294,
                        "suggested_replacement": "coeff_str",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 37,
                            "highlight_start": 37,
                            "text": "                        write!(f, \"{}\", coeff_str)?;"
                          }
                        ]
                      },
                      {
                        "byte_end": 9646,
                        "byte_start": 9635,
                        "column_end": 50,
                        "column_start": 39,
                        "expansion": null,
                        "file_name": "src\\decimal128.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 294,
                        "line_start": 294,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 50,
                            "highlight_start": 39,
                            "text": "                        write!(f, \"{}\", coeff_str)?;"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::uninlined_format_args",
                  "explanation": null
                },
                "level": "warning",
                "message": "variables can be used directly in the `format!` string",
                "spans": [
                  {
                    "byte_end": 9647,
                    "byte_start": 9621,
                    "column_end": 51,
                    "column_start": 25,
                    "expansion": null,
                    "file_name": "src\\decimal128.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 294,
                    "line_start": 294,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 51,
                        "highlight_start": 25,
                        "text": "                        write!(f, \"{}\", coeff_str)?;"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmphrjzoh4n/bson-2.15.0#bson@2.15.0",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphrjzoh4n\\bson-2.15.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "bson",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphrjzoh4n\\bson-2.15.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: variables can be used directly in the `format!` string\n   --> src\\decimal128.rs:300:29\n    |\n300 | ...                   write!(f, \"{}\", coeff_str)?;\n    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args\nhelp: change this to\n    |\n300 -                             write!(f, \"{}\", coeff_str)?;\n300 +                             write!(f, \"{coeff_str}\")?;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "change this to",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 9989,
                        "byte_start": 9989,
                        "column_end": 41,
                        "column_start": 41,
                        "expansion": null,
                        "file_name": "src\\decimal128.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 300,
                        "line_start": 300,
                        "suggested_replacement": "coeff_str",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 41,
                            "highlight_start": 41,
                            "text": "                            write!(f, \"{}\", coeff_str)?;"
                          }
                        ]
                      },
                      {
                        "byte_end": 10002,
                        "byte_start": 9991,
                        "column_end": 54,
                        "column_start": 43,
                        "expansion": null,
                        "file_name": "src\\decimal128.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 300,
                        "line_start": 300,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 54,
                            "highlight_start": 43,
                            "text": "                            write!(f, \"{}\", coeff_str)?;"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::uninlined_format_args",
                  "explanation": null
                },
                "level": "warning",
                "message": "variables can be used directly in the `format!` string",
                "spans": [
                  {
                    "byte_end": 10003,
                    "byte_start": 9977,
                    "column_end": 55,
                    "column_start": 29,
                    "expansion": null,
                    "file_name": "src\\decimal128.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 300,
                    "line_start": 300,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 55,
                        "highlight_start": 29,
                        "text": "                            write!(f, \"{}\", coeff_str)?;"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmphrjzoh4n/bson-2.15.0#bson@2.15.0",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphrjzoh4n\\bson-2.15.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "bson",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphrjzoh4n\\bson-2.15.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: variables can be used directly in the `format!` string\n   --> src\\decimal128.rs:303:29\n    |\n303 | ...                   write!(f, \"{}\", pre)?;\n    |                       ^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args\nhelp: change this to\n    |\n303 -                             write!(f, \"{}\", pre)?;\n303 +                             write!(f, \"{pre}\")?;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "change this to",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 10176,
                        "byte_start": 10176,
                        "column_end": 41,
                        "column_start": 41,
                        "expansion": null,
                        "file_name": "src\\decimal128.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 303,
                        "line_start": 303,
                        "suggested_replacement": "pre",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 41,
                            "highlight_start": 41,
                            "text": "                            write!(f, \"{}\", pre)?;"
                          }
                        ]
                      },
                      {
                        "byte_end": 10183,
                        "byte_start": 10178,
                        "column_end": 48,
                        "column_start": 43,
                        "expansion": null,
                        "file_name": "src\\decimal128.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 303,
                        "line_start": 303,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 48,
                            "highlight_start": 43,
                            "text": "                            write!(f, \"{}\", pre)?;"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::uninlined_format_args",
                  "explanation": null
                },
                "level": "warning",
                "message": "variables can be used directly in the `format!` string",
                "spans": [
                  {
                    "byte_end": 10184,
                    "byte_start": 10164,
                    "column_end": 49,
                    "column_start": 29,
                    "expansion": null,
                    "file_name": "src\\decimal128.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 303,
                    "line_start": 303,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 49,
                        "highlight_start": 29,
                        "text": "                            write!(f, \"{}\", pre)?;"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmphrjzoh4n/bson-2.15.0#bson@2.15.0",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphrjzoh4n\\bson-2.15.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "bson",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphrjzoh4n\\bson-2.15.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: variables can be used directly in the `format!` string\n   --> src\\decimal128.rs:305:29\n    |\n305 | ...                   write!(f, \"{}\", post)?;\n    |                       ^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args\nhelp: change this to\n    |\n305 -                             write!(f, \"{}\", post)?;\n305 +                             write!(f, \"{post}\")?;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "change this to",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 10272,
                        "byte_start": 10272,
                        "column_end": 41,
                        "column_start": 41,
                        "expansion": null,
                        "file_name": "src\\decimal128.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 305,
                        "line_start": 305,
                        "suggested_replacement": "post",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 41,
                            "highlight_start": 41,
                            "text": "                            write!(f, \"{}\", post)?;"
                          }
                        ]
                      },
                      {
                        "byte_end": 10280,
                        "byte_start": 10274,
                        "column_end": 49,
                        "column_start": 43,
                        "expansion": null,
                        "file_name": "src\\decimal128.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 305,
                        "line_start": 305,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 49,
                            "highlight_start": 43,
                            "text": "                            write!(f, \"{}\", post)?;"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::uninlined_format_args",
                  "explanation": null
                },
                "level": "warning",
                "message": "variables can be used directly in the `format!` string",
                "spans": [
                  {
                    "byte_end": 10281,
                    "byte_start": 10260,
                    "column_end": 50,
                    "column_start": 29,
                    "expansion": null,
                    "file_name": "src\\decimal128.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 305,
                    "line_start": 305,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 50,
                        "highlight_start": 29,
                        "text": "                            write!(f, \"{}\", post)?;"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmphrjzoh4n/bson-2.15.0#bson@2.15.0",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphrjzoh4n\\bson-2.15.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "bson",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphrjzoh4n\\bson-2.15.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: variables can be used directly in the `format!` string\n   --> src\\decimal128.rs:311:21\n    |\n311 |                     write!(f, \"{}\", pre)?;\n    |                     ^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args\nhelp: change this to\n    |\n311 -                     write!(f, \"{}\", pre)?;\n311 +                     write!(f, \"{pre}\")?;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "change this to",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 10494,
                        "byte_start": 10494,
                        "column_end": 33,
                        "column_start": 33,
                        "expansion": null,
                        "file_name": "src\\decimal128.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 311,
                        "line_start": 311,
                        "suggested_replacement": "pre",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 33,
                            "highlight_start": 33,
                            "text": "                    write!(f, \"{}\", pre)?;"
                          }
                        ]
                      },
                      {
                        "byte_end": 10501,
                        "byte_start": 10496,
                        "column_end": 40,
                        "column_start": 35,
                        "expansion": null,
                        "file_name": "src\\decimal128.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 311,
                        "line_start": 311,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 40,
                            "highlight_start": 35,
                            "text": "                    write!(f, \"{}\", pre)?;"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::uninlined_format_args",
                  "explanation": null
                },
                "level": "warning",
                "message": "variables can be used directly in the `format!` string",
                "spans": [
                  {
                    "byte_end": 10502,
                    "byte_start": 10482,
                    "column_end": 41,
                    "column_start": 21,
                    "expansion": null,
                    "file_name": "src\\decimal128.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 311,
                    "line_start": 311,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 41,
                        "highlight_start": 21,
                        "text": "                    write!(f, \"{}\", pre)?;"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmphrjzoh4n/bson-2.15.0#bson@2.15.0",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphrjzoh4n\\bson-2.15.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "bson",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphrjzoh4n\\bson-2.15.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: variables can be used directly in the `format!` string\n   --> src\\decimal128.rs:313:25\n    |\n313 |                         write!(f, \".{}\", post)?;\n    |                         ^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args\nhelp: change this to\n    |\n313 -                         write!(f, \".{}\", post)?;\n313 +                         write!(f, \".{post}\")?;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "change this to",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 10584,
                        "byte_start": 10584,
                        "column_end": 38,
                        "column_start": 38,
                        "expansion": null,
                        "file_name": "src\\decimal128.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 313,
                        "line_start": 313,
                        "suggested_replacement": "post",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 38,
                            "highlight_start": 38,
                            "text": "                        write!(f, \".{}\", post)?;"
                          }
                        ]
                      },
                      {
                        "byte_end": 10592,
                        "byte_start": 10586,
                        "column_end": 46,
                        "column_start": 40,
                        "expansion": null,
                        "file_name": "src\\decimal128.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 313,
                        "line_start": 313,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 46,
                            "highlight_start": 40,
                            "text": "                        write!(f, \".{}\", post)?;"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::uninlined_format_args",
                  "explanation": null
                },
                "level": "warning",
                "message": "variables can be used directly in the `format!` string",
                "spans": [
                  {
                    "byte_end": 10593,
                    "byte_start": 10571,
                    "column_end": 47,
                    "column_start": 25,
                    "expansion": null,
                    "file_name": "src\\decimal128.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 313,
                    "line_start": 313,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 47,
                        "highlight_start": 25,
                        "text": "                        write!(f, \".{}\", post)?;"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmphrjzoh4n/bson-2.15.0#bson@2.15.0",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphrjzoh4n\\bson-2.15.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "bson",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphrjzoh4n\\bson-2.15.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: variables can be used directly in the `format!` string\n   --> src\\decimal128.rs:319:21\n    |\n319 |                     write!(f, \"{}\", adj_exp)?;\n    |                     ^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args\nhelp: change this to\n    |\n319 -                     write!(f, \"{}\", adj_exp)?;\n319 +                     write!(f, \"{adj_exp}\")?;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "change this to",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 10787,
                        "byte_start": 10787,
                        "column_end": 33,
                        "column_start": 33,
                        "expansion": null,
                        "file_name": "src\\decimal128.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 319,
                        "line_start": 319,
                        "suggested_replacement": "adj_exp",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 33,
                            "highlight_start": 33,
                            "text": "                    write!(f, \"{}\", adj_exp)?;"
                          }
                        ]
                      },
                      {
                        "byte_end": 10798,
                        "byte_start": 10789,
                        "column_end": 44,
                        "column_start": 35,
                        "expansion": null,
                        "file_name": "src\\decimal128.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 319,
                        "line_start": 319,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 44,
                            "highlight_start": 35,
                            "text": "                    write!(f, \"{}\", adj_exp)?;"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::uninlined_format_args",
                  "explanation": null
                },
                "level": "warning",
                "message": "variables can be used directly in the `format!` string",
                "spans": [
                  {
                    "byte_end": 10799,
                    "byte_start": 10775,
                    "column_end": 45,
                    "column_start": 21,
                    "expansion": null,
                    "file_name": "src\\decimal128.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 319,
                    "line_start": 319,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 45,
                        "highlight_start": 21,
                        "text": "                    write!(f, \"{}\", adj_exp)?;"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmphrjzoh4n/bson-2.15.0#bson@2.15.0",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphrjzoh4n\\bson-2.15.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "bson",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphrjzoh4n\\bson-2.15.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: variables can be used directly in the `format!` string\n   --> src\\decimal128.rs:343:47\n    |\n343 |             ParseError::InvalidExponent(e) => write!(f, \"invalid exponent: {}\", e),\n    |                                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args\nhelp: change this to\n    |\n343 -             ParseError::InvalidExponent(e) => write!(f, \"invalid exponent: {}\", e),\n343 +             ParseError::InvalidExponent(e) => write!(f, \"invalid exponent: {e}\"),\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "change this to",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 11374,
                        "byte_start": 11374,
                        "column_end": 77,
                        "column_start": 77,
                        "expansion": null,
                        "file_name": "src\\decimal128.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 343,
                        "line_start": 343,
                        "suggested_replacement": "e",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 77,
                            "highlight_start": 77,
                            "text": "            ParseError::InvalidExponent(e) => write!(f, \"invalid exponent: {}\", e),"
                          }
                        ]
                      },
                      {
                        "byte_end": 11379,
                        "byte_start": 11376,
                        "column_end": 82,
                        "column_start": 79,
                        "expansion": null,
                        "file_name": "src\\decimal128.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 343,
                        "line_start": 343,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 82,
                            "highlight_start": 79,
                            "text": "            ParseError::InvalidExponent(e) => write!(f, \"invalid exponent: {}\", e),"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::uninlined_format_args",
                  "explanation": null
                },
                "level": "warning",
                "message": "variables can be used directly in the `format!` string",
                "spans": [
                  {
                    "byte_end": 11380,
                    "byte_start": 11344,
                    "column_end": 83,
                    "column_start": 47,
                    "expansion": null,
                    "file_name": "src\\decimal128.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 343,
                    "line_start": 343,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 83,
                        "highlight_start": 47,
                        "text": "            ParseError::InvalidExponent(e) => write!(f, \"invalid exponent: {}\", e),"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmphrjzoh4n/bson-2.15.0#bson@2.15.0",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphrjzoh4n\\bson-2.15.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "bson",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphrjzoh4n\\bson-2.15.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: variables can be used directly in the `format!` string\n   --> src\\decimal128.rs:344:50\n    |\n344 |             ParseError::InvalidCoefficient(e) => write!(f, \"invalid coefficient: {}\", e),\n    |                                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args\nhelp: change this to\n    |\n344 -             ParseError::InvalidCoefficient(e) => write!(f, \"invalid coefficient: {}\", e),\n344 +             ParseError::InvalidCoefficient(e) => write!(f, \"invalid coefficient: {e}\"),\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "change this to",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 11464,
                        "byte_start": 11464,
                        "column_end": 83,
                        "column_start": 83,
                        "expansion": null,
                        "file_name": "src\\decimal128.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 344,
                        "line_start": 344,
                        "suggested_replacement": "e",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 83,
                            "highlight_start": 83,
                            "text": "            ParseError::InvalidCoefficient(e) => write!(f, \"invalid coefficient: {}\", e),"
                          }
                        ]
                      },
                      {
                        "byte_end": 11469,
                        "byte_start": 11466,
                        "column_end": 88,
                        "column_start": 85,
                        "expansion": null,
                        "file_name": "src\\decimal128.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 344,
                        "line_start": 344,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 88,
                            "highlight_start": 85,
                            "text": "            ParseError::InvalidCoefficient(e) => write!(f, \"invalid coefficient: {}\", e),"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::uninlined_format_args",
                  "explanation": null
                },
                "level": "warning",
                "message": "variables can be used directly in the `format!` string",
                "spans": [
                  {
                    "byte_end": 11470,
                    "byte_start": 11431,
                    "column_end": 89,
                    "column_start": 50,
                    "expansion": null,
                    "file_name": "src\\decimal128.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 344,
                    "line_start": 344,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 89,
                        "highlight_start": 50,
                        "text": "            ParseError::InvalidCoefficient(e) => write!(f, \"invalid coefficient: {}\", e),"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmphrjzoh4n/bson-2.15.0#bson@2.15.0",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphrjzoh4n\\bson-2.15.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "bson",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphrjzoh4n\\bson-2.15.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: variables can be used directly in the `format!` string\n   --> src\\decimal128.rs:402:34\n    |\n402 |                     joined_str = format!(\"{}{}\", pre, post);\n    |                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args\nhelp: change this to\n    |\n402 -                     joined_str = format!(\"{}{}\", pre, post);\n402 +                     joined_str = format!(\"{pre}{post}\");\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "change this to",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 13690,
                        "byte_start": 13690,
                        "column_end": 44,
                        "column_start": 44,
                        "expansion": null,
                        "file_name": "src\\decimal128.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 402,
                        "line_start": 402,
                        "suggested_replacement": "pre",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 44,
                            "highlight_start": 44,
                            "text": "                    joined_str = format!(\"{}{}\", pre, post);"
                          }
                        ]
                      },
                      {
                        "byte_end": 13692,
                        "byte_start": 13692,
                        "column_end": 46,
                        "column_start": 46,
                        "expansion": null,
                        "file_name": "src\\decimal128.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 402,
                        "line_start": 402,
                        "suggested_replacement": "post",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 46,
                            "highlight_start": 46,
                            "text": "                    joined_str = format!(\"{}{}\", pre, post);"
                          }
                        ]
                      },
                      {
                        "byte_end": 13699,
                        "byte_start": 13694,
                        "column_end": 53,
                        "column_start": 48,
                        "expansion": null,
                        "file_name": "src\\decimal128.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 402,
                        "line_start": 402,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 53,
                            "highlight_start": 48,
                            "text": "                    joined_str = format!(\"{}{}\", pre, post);"
                          }
                        ]
                      },
                      {
                        "byte_end": 13705,
                        "byte_start": 13699,
                        "column_end": 59,
                        "column_start": 53,
                        "expansion": null,
                        "file_name": "src\\decimal128.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 402,
                        "line_start": 402,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 59,
                            "highlight_start": 53,
                            "text": "                    joined_str = format!(\"{}{}\", pre, post);"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::uninlined_format_args",
                  "explanation": null
                },
                "level": "warning",
                "message": "variables can be used directly in the `format!` string",
                "spans": [
                  {
                    "byte_end": 13706,
                    "byte_start": 13680,
                    "column_end": 60,
                    "column_start": 34,
                    "expansion": null,
                    "file_name": "src\\decimal128.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 402,
                    "line_start": 402,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 60,
                        "highlight_start": 34,
                        "text": "                    joined_str = format!(\"{}{}\", pre, post);"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmphrjzoh4n/bson-2.15.0#bson@2.15.0",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphrjzoh4n\\bson-2.15.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "bson",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphrjzoh4n\\bson-2.15.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: variables can be used directly in the `format!` string\n   --> src\\document.rs:101:17\n    |\n101 |                 write!(fmt, \"\\\"{}\\\": {}\", k, v)?;\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args\nhelp: change this to\n    |\n101 -                 write!(fmt, \"\\\"{}\\\": {}\", k, v)?;\n101 +                 write!(fmt, \"\\\"{k}\\\": {v}\")?;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "change this to",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 2866,
                        "byte_start": 2866,
                        "column_end": 33,
                        "column_start": 33,
                        "expansion": null,
                        "file_name": "src\\document.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 101,
                        "line_start": 101,
                        "suggested_replacement": "k",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 33,
                            "highlight_start": 33,
                            "text": "                write!(fmt, \"\\\"{}\\\": {}\", k, v)?;"
                          }
                        ]
                      },
                      {
                        "byte_end": 2872,
                        "byte_start": 2872,
                        "column_end": 39,
                        "column_start": 39,
                        "expansion": null,
                        "file_name": "src\\document.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 101,
                        "line_start": 101,
                        "suggested_replacement": "v",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 39,
                            "highlight_start": 39,
                            "text": "                write!(fmt, \"\\\"{}\\\": {}\", k, v)?;"
                          }
                        ]
                      },
                      {
                        "byte_end": 2877,
                        "byte_start": 2874,
                        "column_end": 44,
                        "column_start": 41,
                        "expansion": null,
                        "file_name": "src\\document.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 101,
                        "line_start": 101,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 44,
                            "highlight_start": 41,
                            "text": "                write!(fmt, \"\\\"{}\\\": {}\", k, v)?;"
                          }
                        ]
                      },
                      {
                        "byte_end": 2880,
                        "byte_start": 2877,
                        "column_end": 47,
                        "column_start": 44,
                        "expansion": null,
                        "file_name": "src\\document.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 101,
                        "line_start": 101,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 47,
                            "highlight_start": 44,
                            "text": "                write!(fmt, \"\\\"{}\\\": {}\", k, v)?;"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::uninlined_format_args",
                  "explanation": null
                },
                "level": "warning",
                "message": "variables can be used directly in the `format!` string",
                "spans": [
                  {
                    "byte_end": 2881,
                    "byte_start": 2850,
                    "column_end": 48,
                    "column_start": 17,
                    "expansion": null,
                    "file_name": "src\\document.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 101,
                    "line_start": 101,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 48,
                        "highlight_start": 17,
                        "text": "                write!(fmt, \"\\\"{}\\\": {}\", k, v)?;"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmphrjzoh4n/bson-2.15.0#bson@2.15.0",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphrjzoh4n\\bson-2.15.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "bson",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphrjzoh4n\\bson-2.15.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: variables can be used directly in the `format!` string\n   --> src\\document.rs:113:25\n    |\n113 |                         write!(fmt, \"{indent_str}\\\"{}\\\": {doc:#new_indent$}\", k)?;\n    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args\nhelp: change this to\n    |\n113 -                         write!(fmt, \"{indent_str}\\\"{}\\\": {doc:#new_indent$}\", k)?;\n113 +                         write!(fmt, \"{indent_str}\\\"{k}\\\": {doc:#new_indent$}\")?;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "change this to",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 3260,
                        "byte_start": 3260,
                        "column_end": 53,
                        "column_start": 53,
                        "expansion": null,
                        "file_name": "src\\document.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 113,
                        "line_start": 113,
                        "suggested_replacement": "k",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 53,
                            "highlight_start": 53,
                            "text": "                        write!(fmt, \"{indent_str}\\\"{}\\\": {doc:#new_indent$}\", k)?;"
                          }
                        ]
                      },
                      {
                        "byte_end": 3287,
                        "byte_start": 3284,
                        "column_end": 80,
                        "column_start": 77,
                        "expansion": null,
                        "file_name": "src\\document.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 113,
                        "line_start": 113,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 80,
                            "highlight_start": 77,
                            "text": "                        write!(fmt, \"{indent_str}\\\"{}\\\": {doc:#new_indent$}\", k)?;"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::uninlined_format_args",
                  "explanation": null
                },
                "level": "warning",
                "message": "variables can be used directly in the `format!` string",
                "spans": [
                  {
                    "byte_end": 3288,
                    "byte_start": 3232,
                    "column_end": 81,
                    "column_start": 25,
                    "expansion": null,
                    "file_name": "src\\document.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 113,
                    "line_start": 113,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 81,
                        "highlight_start": 25,
                        "text": "                        write!(fmt, \"{indent_str}\\\"{}\\\": {doc:#new_indent$}\", k)?;"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmphrjzoh4n/bson-2.15.0#bson@2.15.0",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphrjzoh4n\\bson-2.15.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "bson",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphrjzoh4n\\bson-2.15.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: variables can be used directly in the `format!` string\n   --> src\\document.rs:117:25\n    |\n117 |                         write!(fmt, \"{indent_str}\\\"{}\\\": {v:#new_indent$}\", k)?;\n    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args\nhelp: change this to\n    |\n117 -                         write!(fmt, \"{indent_str}\\\"{}\\\": {v:#new_indent$}\", k)?;\n117 +                         write!(fmt, \"{indent_str}\\\"{k}\\\": {v:#new_indent$}\")?;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "change this to",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 3461,
                        "byte_start": 3461,
                        "column_end": 53,
                        "column_start": 53,
                        "expansion": null,
                        "file_name": "src\\document.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 117,
                        "line_start": 117,
                        "suggested_replacement": "k",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 53,
                            "highlight_start": 53,
                            "text": "                        write!(fmt, \"{indent_str}\\\"{}\\\": {v:#new_indent$}\", k)?;"
                          }
                        ]
                      },
                      {
                        "byte_end": 3486,
                        "byte_start": 3483,
                        "column_end": 78,
                        "column_start": 75,
                        "expansion": null,
                        "file_name": "src\\document.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 117,
                        "line_start": 117,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 78,
                            "highlight_start": 75,
                            "text": "                        write!(fmt, \"{indent_str}\\\"{}\\\": {v:#new_indent$}\", k)?;"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::uninlined_format_args",
                  "explanation": null
                },
                "level": "warning",
                "message": "variables can be used directly in the `format!` string",
                "spans": [
                  {
                    "byte_end": 3487,
                    "byte_start": 3433,
                    "column_end": 79,
                    "column_start": 25,
                    "expansion": null,
                    "file_name": "src\\document.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 117,
                    "line_start": 117,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 79,
                        "highlight_start": 25,
                        "text": "                        write!(fmt, \"{indent_str}\\\"{}\\\": {v:#new_indent$}\", k)?;"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmphrjzoh4n/bson-2.15.0#bson@2.15.0",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphrjzoh4n\\bson-2.15.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "bson",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphrjzoh4n\\bson-2.15.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: variables can be used directly in the `format!` string\n   --> src\\document.rs:120:25\n    |\n120 |                         write!(fmt, \"{indent_str}\\\"{}\\\": {}\", k, v)?;\n    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args\nhelp: change this to\n    |\n120 -                         write!(fmt, \"{indent_str}\\\"{}\\\": {}\", k, v)?;\n120 +                         write!(fmt, \"{indent_str}\\\"{k}\\\": {v}\")?;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "change this to",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 3591,
                        "byte_start": 3591,
                        "column_end": 53,
                        "column_start": 53,
                        "expansion": null,
                        "file_name": "src\\document.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 120,
                        "line_start": 120,
                        "suggested_replacement": "k",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 53,
                            "highlight_start": 53,
                            "text": "                        write!(fmt, \"{indent_str}\\\"{}\\\": {}\", k, v)?;"
                          }
                        ]
                      },
                      {
                        "byte_end": 3597,
                        "byte_start": 3597,
                        "column_end": 59,
                        "column_start": 59,
                        "expansion": null,
                        "file_name": "src\\document.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 120,
                        "line_start": 120,
                        "suggested_replacement": "v",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 59,
                            "highlight_start": 59,
                            "text": "                        write!(fmt, \"{indent_str}\\\"{}\\\": {}\", k, v)?;"
                          }
                        ]
                      },
                      {
                        "byte_end": 3602,
                        "byte_start": 3599,
                        "column_end": 64,
                        "column_start": 61,
                        "expansion": null,
                        "file_name": "src\\document.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 120,
                        "line_start": 120,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 64,
                            "highlight_start": 61,
                            "text": "                        write!(fmt, \"{indent_str}\\\"{}\\\": {}\", k, v)?;"
                          }
                        ]
                      },
                      {
                        "byte_end": 3605,
                        "byte_start": 3602,
                        "column_end": 67,
                        "column_start": 64,
                        "expansion": null,
                        "file_name": "src\\document.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 120,
                        "line_start": 120,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 67,
                            "highlight_start": 64,
                            "text": "                        write!(fmt, \"{indent_str}\\\"{}\\\": {}\", k, v)?;"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::uninlined_format_args",
                  "explanation": null
                },
                "level": "warning",
                "message": "variables can be used directly in the `format!` string",
                "spans": [
                  {
                    "byte_end": 3606,
                    "byte_start": 3563,
                    "column_end": 68,
                    "column_start": 25,
                    "expansion": null,
                    "file_name": "src\\document.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 120,
                    "line_start": 120,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 68,
                        "highlight_start": 25,
                        "text": "                        write!(fmt, \"{indent_str}\\\"{}\\\": {}\", k, v)?;"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmphrjzoh4n/bson-2.15.0#bson@2.15.0",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphrjzoh4n\\bson-2.15.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "bson",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphrjzoh4n\\bson-2.15.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: variables can be used directly in the `format!` string\n  --> src\\extjson\\de.rs:59:22\n   |\n59 |             message: format!(\"{}\", msg),\n   |                      ^^^^^^^^^^^^^^^^^^\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args\nhelp: change this to\n   |\n59 -             message: format!(\"{}\", msg),\n59 +             message: format!(\"{msg}\"),\n   |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "change this to",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 2125,
                        "byte_start": 2125,
                        "column_end": 32,
                        "column_start": 32,
                        "expansion": null,
                        "file_name": "src\\extjson\\de.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 59,
                        "line_start": 59,
                        "suggested_replacement": "msg",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 32,
                            "highlight_start": 32,
                            "text": "            message: format!(\"{}\", msg),"
                          }
                        ]
                      },
                      {
                        "byte_end": 2132,
                        "byte_start": 2127,
                        "column_end": 39,
                        "column_start": 34,
                        "expansion": null,
                        "file_name": "src\\extjson\\de.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 59,
                        "line_start": 59,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 39,
                            "highlight_start": 34,
                            "text": "            message: format!(\"{}\", msg),"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::uninlined_format_args",
                  "explanation": null
                },
                "level": "warning",
                "message": "variables can be used directly in the `format!` string",
                "spans": [
                  {
                    "byte_end": 2133,
                    "byte_start": 2115,
                    "column_end": 40,
                    "column_start": 22,
                    "expansion": null,
                    "file_name": "src\\extjson\\de.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 59,
                    "line_start": 59,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 40,
                        "highlight_start": 22,
                        "text": "            message: format!(\"{}\", msg),"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmphrjzoh4n/bson-2.15.0#bson@2.15.0",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphrjzoh4n\\bson-2.15.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "bson",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphrjzoh4n\\bson-2.15.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: variables can be used directly in the `format!` string\n   --> src\\extjson\\de.rs:194:43\n    |\n194 |                         Unexpected::Other(format!(\"{}\", x).as_str()),\n    |                                           ^^^^^^^^^^^^^^^^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args\nhelp: change this to\n    |\n194 -                         Unexpected::Other(format!(\"{}\", x).as_str()),\n194 +                         Unexpected::Other(format!(\"{x}\").as_str()),\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "change this to",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 6909,
                        "byte_start": 6909,
                        "column_end": 53,
                        "column_start": 53,
                        "expansion": null,
                        "file_name": "src\\extjson\\de.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 194,
                        "line_start": 194,
                        "suggested_replacement": "x",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 53,
                            "highlight_start": 53,
                            "text": "                        Unexpected::Other(format!(\"{}\", x).as_str()),"
                          }
                        ]
                      },
                      {
                        "byte_end": 6914,
                        "byte_start": 6911,
                        "column_end": 58,
                        "column_start": 55,
                        "expansion": null,
                        "file_name": "src\\extjson\\de.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 194,
                        "line_start": 194,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 58,
                            "highlight_start": 55,
                            "text": "                        Unexpected::Other(format!(\"{}\", x).as_str()),"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::uninlined_format_args",
                  "explanation": null
                },
                "level": "warning",
                "message": "variables can be used directly in the `format!` string",
                "spans": [
                  {
                    "byte_end": 6915,
                    "byte_start": 6899,
                    "column_end": 59,
                    "column_start": 43,
                    "expansion": null,
                    "file_name": "src\\extjson\\de.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 194,
                    "line_start": 194,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 59,
                        "highlight_start": 43,
                        "text": "                        Unexpected::Other(format!(\"{}\", x).as_str()),"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmphrjzoh4n/bson-2.15.0#bson@2.15.0",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphrjzoh4n\\bson-2.15.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "bson",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphrjzoh4n\\bson-2.15.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: variables can be used directly in the `format!` string\n  --> src\\oid.rs:54:17\n   |\n54 | /                 write!(\n55 | |                     fmt,\n56 | |                     \"invalid character '{}' was found at index {} in the provided hex string: \\\n57 | |                      \\\"{}\\\"\",\n58 | |                     c, index, hex\n59 | |                 )\n   | |_________________^\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "change this to",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 1773,
                        "byte_start": 1773,
                        "column_end": 42,
                        "column_start": 42,
                        "expansion": null,
                        "file_name": "src\\oid.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 56,
                        "line_start": 56,
                        "suggested_replacement": "c",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 42,
                            "highlight_start": 42,
                            "text": "                    \"invalid character '{}' was found at index {} in the provided hex string: \\"
                          }
                        ]
                      },
                      {
                        "byte_end": 1796,
                        "byte_start": 1796,
                        "column_end": 65,
                        "column_start": 65,
                        "expansion": null,
                        "file_name": "src\\oid.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 56,
                        "line_start": 56,
                        "suggested_replacement": "index",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 65,
                            "highlight_start": 65,
                            "text": "                    \"invalid character '{}' was found at index {} in the provided hex string: \\"
                          }
                        ]
                      },
                      {
                        "byte_end": 1852,
                        "byte_start": 1852,
                        "column_end": 25,
                        "column_start": 25,
                        "expansion": null,
                        "file_name": "src\\oid.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 57,
                        "line_start": 57,
                        "suggested_replacement": "hex",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 25,
                            "highlight_start": 25,
                            "text": "                     \\\"{}\\\"\","
                          }
                        ]
                      },
                      {
                        "byte_end": 1879,
                        "byte_start": 1856,
                        "column_end": 22,
                        "column_start": 29,
                        "expansion": null,
                        "file_name": "src\\oid.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 58,
                        "line_start": 57,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 30,
                            "highlight_start": 29,
                            "text": "                     \\\"{}\\\"\","
                          },
                          {
                            "highlight_end": 22,
                            "highlight_start": 1,
                            "text": "                    c, index, hex"
                          }
                        ]
                      },
                      {
                        "byte_end": 1886,
                        "byte_start": 1879,
                        "column_end": 29,
                        "column_start": 22,
                        "expansion": null,
                        "file_name": "src\\oid.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 58,
                        "line_start": 58,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 29,
                            "highlight_start": 22,
                            "text": "                    c, index, hex"
                          }
                        ]
                      },
                      {
                        "byte_end": 1891,
                        "byte_start": 1886,
                        "column_end": 34,
                        "column_start": 29,
                        "expansion": null,
                        "file_name": "src\\oid.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 58,
                        "line_start": 58,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 34,
                            "highlight_start": 29,
                            "text": "                    c, index, hex"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::uninlined_format_args",
                  "explanation": null
                },
                "level": "warning",
                "message": "variables can be used directly in the `format!` string",
                "spans": [
                  {
                    "byte_end": 1909,
                    "byte_start": 1699,
                    "column_end": 18,
                    "column_start": 17,
                    "expansion": null,
                    "file_name": "src\\oid.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 59,
                    "line_start": 54,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 24,
                        "highlight_start": 17,
                        "text": "                write!("
                      },
                      {
                        "highlight_end": 25,
                        "highlight_start": 1,
                        "text": "                    fmt,"
                      },
                      {
                        "highlight_end": 96,
                        "highlight_start": 1,
                        "text": "                    \"invalid character '{}' was found at index {} in the provided hex string: \\"
                      },
                      {
                        "highlight_end": 30,
                        "highlight_start": 1,
                        "text": "                     \\\"{}\\\"\","
                      },
                      {
                        "highlight_end": 34,
                        "highlight_start": 1,
                        "text": "                    c, index, hex"
                      },
                      {
                        "highlight_end": 18,
                        "highlight_start": 1,
                        "text": "                )"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmphrjzoh4n/bson-2.15.0#bson@2.15.0",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphrjzoh4n\\bson-2.15.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "bson",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphrjzoh4n\\bson-2.15.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: variables can be used directly in the `format!` string\n  --> src\\oid.rs:62:17\n   |\n62 | /                 write!(\n63 | |                     fmt,\n64 | |                     \"provided hex string representation must be exactly 12 bytes, instead got: \\\n65 | |                      \\\"{}\\\", length {}\",\n66 | |                     hex, length\n67 | |                 )\n   | |_________________^\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "change this to",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 2157,
                        "byte_start": 2157,
                        "column_end": 25,
                        "column_start": 25,
                        "expansion": null,
                        "file_name": "src\\oid.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 65,
                        "line_start": 65,
                        "suggested_replacement": "hex",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 25,
                            "highlight_start": 25,
                            "text": "                     \\\"{}\\\", length {}\","
                          }
                        ]
                      },
                      {
                        "byte_end": 2170,
                        "byte_start": 2170,
                        "column_end": 38,
                        "column_start": 38,
                        "expansion": null,
                        "file_name": "src\\oid.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 65,
                        "line_start": 65,
                        "suggested_replacement": "length",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 38,
                            "highlight_start": 38,
                            "text": "                     \\\"{}\\\", length {}\","
                          }
                        ]
                      },
                      {
                        "byte_end": 2197,
                        "byte_start": 2172,
                        "column_end": 24,
                        "column_start": 40,
                        "expansion": null,
                        "file_name": "src\\oid.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 66,
                        "line_start": 65,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 41,
                            "highlight_start": 40,
                            "text": "                     \\\"{}\\\", length {}\","
                          },
                          {
                            "highlight_end": 24,
                            "highlight_start": 1,
                            "text": "                    hex, length"
                          }
                        ]
                      },
                      {
                        "byte_end": 2205,
                        "byte_start": 2197,
                        "column_end": 32,
                        "column_start": 24,
                        "expansion": null,
                        "file_name": "src\\oid.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 66,
                        "line_start": 66,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 32,
                            "highlight_start": 24,
                            "text": "                    hex, length"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::uninlined_format_args",
                  "explanation": null
                },
                "level": "warning",
                "message": "variables can be used directly in the `format!` string",
                "spans": [
                  {
                    "byte_end": 2223,
                    "byte_start": 2003,
                    "column_end": 18,
                    "column_start": 17,
                    "expansion": null,
                    "file_name": "src\\oid.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 67,
                    "line_start": 62,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 24,
                        "highlight_start": 17,
                        "text": "                write!("
                      },
                      {
                        "highlight_end": 25,
                        "highlight_start": 1,
                        "text": "                    fmt,"
                      },
                      {
                        "highlight_end": 97,
                        "highlight_start": 1,
                        "text": "                    \"provided hex string representation must be exactly 12 bytes, instead got: \\"
                      },
                      {
                        "highlight_end": 41,
                        "highlight_start": 1,
                        "text": "                     \\\"{}\\\", length {}\","
                      },
                      {
                        "highlight_end": 32,
                        "highlight_start": 1,
                        "text": "                    hex, length"
                      },
                      {
                        "highlight_end": 18,
                        "highlight_start": 1,
                        "text": "                )"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmphrjzoh4n/bson-2.15.0#bson@2.15.0",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphrjzoh4n\\bson-2.15.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "bson",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphrjzoh4n\\bson-2.15.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: variables can be used directly in the `format!` string\n   --> src\\raw\\array.rs:299:47\n    |\n299 |               o => Err(serde::de::Error::custom(format!(\n    |  _______________________________________________^\n300 | |                 \"expected borrowed raw array, instead got owned {:?}\",\n301 | |                 o\n302 | |             ))),\n    | |_____________^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "change this to",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 10293,
                        "byte_start": 10293,
                        "column_end": 66,
                        "column_start": 66,
                        "expansion": null,
                        "file_name": "src\\raw\\array.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 300,
                        "line_start": 300,
                        "suggested_replacement": "o",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 66,
                            "highlight_start": 66,
                            "text": "                \"expected borrowed raw array, instead got owned {:?}\","
                          }
                        ]
                      },
                      {
                        "byte_end": 10316,
                        "byte_start": 10297,
                        "column_end": 18,
                        "column_start": 70,
                        "expansion": null,
                        "file_name": "src\\raw\\array.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 301,
                        "line_start": 300,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 71,
                            "highlight_start": 70,
                            "text": "                \"expected borrowed raw array, instead got owned {:?}\","
                          },
                          {
                            "highlight_end": 18,
                            "highlight_start": 1,
                            "text": "                o"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::uninlined_format_args",
                  "explanation": null
                },
                "level": "warning",
                "message": "variables can be used directly in the `format!` string",
                "spans": [
                  {
                    "byte_end": 10330,
                    "byte_start": 10219,
                    "column_end": 14,
                    "column_start": 47,
                    "expansion": null,
                    "file_name": "src\\raw\\array.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 302,
                    "line_start": 299,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 55,
                        "highlight_start": 47,
                        "text": "            o => Err(serde::de::Error::custom(format!("
                      },
                      {
                        "highlight_end": 71,
                        "highlight_start": 1,
                        "text": "                \"expected borrowed raw array, instead got owned {:?}\","
                      },
                      {
                        "highlight_end": 18,
                        "highlight_start": 1,
                        "text": "                o"
                      },
                      {
                        "highlight_end": 14,
                        "highlight_start": 1,
                        "text": "            ))),"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmphrjzoh4n/bson-2.15.0#bson@2.15.0",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphrjzoh4n\\bson-2.15.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "bson",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphrjzoh4n\\bson-2.15.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: variables can be used directly in the `format!` string\n   --> src\\raw\\bson.rs:541:47\n    |\n541 |               c => Err(serde::de::Error::custom(format!(\n    |  _______________________________________________^\n542 | |                 \"expected CodeWithScope, but got {:?} instead\",\n543 | |                 c\n544 | |             ))),\n    | |_____________^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "change this to",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 17665,
                        "byte_start": 17665,
                        "column_end": 51,
                        "column_start": 51,
                        "expansion": null,
                        "file_name": "src\\raw\\bson.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 542,
                        "line_start": 542,
                        "suggested_replacement": "c",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 51,
                            "highlight_start": 51,
                            "text": "                \"expected CodeWithScope, but got {:?} instead\","
                          }
                        ]
                      },
                      {
                        "byte_end": 17696,
                        "byte_start": 17677,
                        "column_end": 18,
                        "column_start": 63,
                        "expansion": null,
                        "file_name": "src\\raw\\bson.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 543,
                        "line_start": 542,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 64,
                            "highlight_start": 63,
                            "text": "                \"expected CodeWithScope, but got {:?} instead\","
                          },
                          {
                            "highlight_end": 18,
                            "highlight_start": 1,
                            "text": "                c"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::uninlined_format_args",
                  "explanation": null
                },
                "level": "warning",
                "message": "variables can be used directly in the `format!` string",
                "spans": [
                  {
                    "byte_end": 17710,
                    "byte_start": 17606,
                    "column_end": 14,
                    "column_start": 47,
                    "expansion": null,
                    "file_name": "src\\raw\\bson.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 544,
                    "line_start": 541,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 55,
                        "highlight_start": 47,
                        "text": "            c => Err(serde::de::Error::custom(format!("
                      },
                      {
                        "highlight_end": 64,
                        "highlight_start": 1,
                        "text": "                \"expected CodeWithScope, but got {:?} instead\","
                      },
                      {
                        "highlight_end": 18,
                        "highlight_start": 1,
                        "text": "                c"
                      },
                      {
                        "highlight_end": 14,
                        "highlight_start": 1,
                        "text": "            ))),"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmphrjzoh4n/bson-2.15.0#bson@2.15.0",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphrjzoh4n\\bson-2.15.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "bson",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphrjzoh4n\\bson-2.15.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: variables can be used directly in the `format!` string\n   --> src\\raw\\bson_ref.rs:308:47\n    |\n308 |               o => Err(serde::de::Error::custom(format!(\n    |  _______________________________________________^\n309 | |                 \"RawBson must be deserialized from borrowed content, instead got {:?}\",\n310 | |                 o\n311 | |             ))),\n    | |_____________^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "change this to",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 10709,
                        "byte_start": 10709,
                        "column_end": 83,
                        "column_start": 83,
                        "expansion": null,
                        "file_name": "src\\raw\\bson_ref.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 309,
                        "line_start": 309,
                        "suggested_replacement": "o",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 83,
                            "highlight_start": 83,
                            "text": "                \"RawBson must be deserialized from borrowed content, instead got {:?}\","
                          }
                        ]
                      },
                      {
                        "byte_end": 10732,
                        "byte_start": 10713,
                        "column_end": 18,
                        "column_start": 87,
                        "expansion": null,
                        "file_name": "src\\raw\\bson_ref.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 310,
                        "line_start": 309,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 88,
                            "highlight_start": 87,
                            "text": "                \"RawBson must be deserialized from borrowed content, instead got {:?}\","
                          },
                          {
                            "highlight_end": 18,
                            "highlight_start": 1,
                            "text": "                o"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::uninlined_format_args",
                  "explanation": null
                },
                "level": "warning",
                "message": "variables can be used directly in the `format!` string",
                "spans": [
                  {
                    "byte_end": 10746,
                    "byte_start": 10618,
                    "column_end": 14,
                    "column_start": 47,
                    "expansion": null,
                    "file_name": "src\\raw\\bson_ref.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 311,
                    "line_start": 308,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 55,
                        "highlight_start": 47,
                        "text": "            o => Err(serde::de::Error::custom(format!("
                      },
                      {
                        "highlight_end": 88,
                        "highlight_start": 1,
                        "text": "                \"RawBson must be deserialized from borrowed content, instead got {:?}\","
                      },
                      {
                        "highlight_end": 18,
                        "highlight_start": 1,
                        "text": "                o"
                      },
                      {
                        "highlight_end": 14,
                        "highlight_start": 1,
                        "text": "            ))),"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmphrjzoh4n/bson-2.15.0#bson@2.15.0",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphrjzoh4n\\bson-2.15.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "bson",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphrjzoh4n\\bson-2.15.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: variables can be used directly in the `format!` string\n   --> src\\raw\\bson_ref.rs:487:47\n    |\n487 |               c => Err(serde::de::Error::custom(format!(\n    |  _______________________________________________^\n488 | |                 \"expected binary, but got {:?} instead\",\n489 | |                 c\n490 | |             ))),\n    | |_____________^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "change this to",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 15954,
                        "byte_start": 15954,
                        "column_end": 44,
                        "column_start": 44,
                        "expansion": null,
                        "file_name": "src\\raw\\bson_ref.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 488,
                        "line_start": 488,
                        "suggested_replacement": "c",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 44,
                            "highlight_start": 44,
                            "text": "                \"expected binary, but got {:?} instead\","
                          }
                        ]
                      },
                      {
                        "byte_end": 15985,
                        "byte_start": 15966,
                        "column_end": 18,
                        "column_start": 56,
                        "expansion": null,
                        "file_name": "src\\raw\\bson_ref.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 489,
                        "line_start": 488,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 57,
                            "highlight_start": 56,
                            "text": "                \"expected binary, but got {:?} instead\","
                          },
                          {
                            "highlight_end": 18,
                            "highlight_start": 1,
                            "text": "                c"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::uninlined_format_args",
                  "explanation": null
                },
                "level": "warning",
                "message": "variables can be used directly in the `format!` string",
                "spans": [
                  {
                    "byte_end": 15999,
                    "byte_start": 15902,
                    "column_end": 14,
                    "column_start": 47,
                    "expansion": null,
                    "file_name": "src\\raw\\bson_ref.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 490,
                    "line_start": 487,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 55,
                        "highlight_start": 47,
                        "text": "            c => Err(serde::de::Error::custom(format!("
                      },
                      {
                        "highlight_end": 57,
                        "highlight_start": 1,
                        "text": "                \"expected binary, but got {:?} instead\","
                      },
                      {
                        "highlight_end": 18,
                        "highlight_start": 1,
                        "text": "                c"
                      },
                      {
                        "highlight_end": 14,
                        "highlight_start": 1,
                        "text": "            ))),"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmphrjzoh4n/bson-2.15.0#bson@2.15.0",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphrjzoh4n\\bson-2.15.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "bson",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphrjzoh4n\\bson-2.15.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: variables can be used directly in the `format!` string\n   --> src\\raw\\bson_ref.rs:565:47\n    |\n565 |               c => Err(serde::de::Error::custom(format!(\n    |  _______________________________________________^\n566 | |                 \"expected Regex, but got {:?} instead\",\n567 | |                 c\n568 | |             ))),\n    | |_____________^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "change this to",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 18488,
                        "byte_start": 18488,
                        "column_end": 43,
                        "column_start": 43,
                        "expansion": null,
                        "file_name": "src\\raw\\bson_ref.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 566,
                        "line_start": 566,
                        "suggested_replacement": "c",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 43,
                            "highlight_start": 43,
                            "text": "                \"expected Regex, but got {:?} instead\","
                          }
                        ]
                      },
                      {
                        "byte_end": 18519,
                        "byte_start": 18500,
                        "column_end": 18,
                        "column_start": 55,
                        "expansion": null,
                        "file_name": "src\\raw\\bson_ref.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 567,
                        "line_start": 566,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 56,
                            "highlight_start": 55,
                            "text": "                \"expected Regex, but got {:?} instead\","
                          },
                          {
                            "highlight_end": 18,
                            "highlight_start": 1,
                            "text": "                c"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::uninlined_format_args",
                  "explanation": null
                },
                "level": "warning",
                "message": "variables can be used directly in the `format!` string",
                "spans": [
                  {
                    "byte_end": 18533,
                    "byte_start": 18437,
                    "column_end": 14,
                    "column_start": 47,
                    "expansion": null,
                    "file_name": "src\\raw\\bson_ref.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 568,
                    "line_start": 565,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 55,
                        "highlight_start": 47,
                        "text": "            c => Err(serde::de::Error::custom(format!("
                      },
                      {
                        "highlight_end": 56,
                        "highlight_start": 1,
                        "text": "                \"expected Regex, but got {:?} instead\","
                      },
                      {
                        "highlight_end": 18,
                        "highlight_start": 1,
                        "text": "                c"
                      },
                      {
                        "highlight_end": 14,
                        "highlight_start": 1,
                        "text": "            ))),"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmphrjzoh4n/bson-2.15.0#bson@2.15.0",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphrjzoh4n\\bson-2.15.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "bson",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphrjzoh4n\\bson-2.15.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: variables can be used directly in the `format!` string\n   --> src\\raw\\bson_ref.rs:623:47\n    |\n623 |               c => Err(serde::de::Error::custom(format!(\n    |  _______________________________________________^\n624 | |                 \"expected CodeWithScope, but got {:?} instead\",\n625 | |                 c\n626 | |             ))),\n    | |_____________^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "change this to",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 20197,
                        "byte_start": 20197,
                        "column_end": 51,
                        "column_start": 51,
                        "expansion": null,
                        "file_name": "src\\raw\\bson_ref.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 624,
                        "line_start": 624,
                        "suggested_replacement": "c",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 51,
                            "highlight_start": 51,
                            "text": "                \"expected CodeWithScope, but got {:?} instead\","
                          }
                        ]
                      },
                      {
                        "byte_end": 20228,
                        "byte_start": 20209,
                        "column_end": 18,
                        "column_start": 63,
                        "expansion": null,
                        "file_name": "src\\raw\\bson_ref.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 625,
                        "line_start": 624,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 64,
                            "highlight_start": 63,
                            "text": "                \"expected CodeWithScope, but got {:?} instead\","
                          },
                          {
                            "highlight_end": 18,
                            "highlight_start": 1,
                            "text": "                c"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::uninlined_format_args",
                  "explanation": null
                },
                "level": "warning",
                "message": "variables can be used directly in the `format!` string",
                "spans": [
                  {
                    "byte_end": 20242,
                    "byte_start": 20138,
                    "column_end": 14,
                    "column_start": 47,
                    "expansion": null,
                    "file_name": "src\\raw\\bson_ref.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 626,
                    "line_start": 623,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 55,
                        "highlight_start": 47,
                        "text": "            c => Err(serde::de::Error::custom(format!("
                      },
                      {
                        "highlight_end": 64,
                        "highlight_start": 1,
                        "text": "                \"expected CodeWithScope, but got {:?} instead\","
                      },
                      {
                        "highlight_end": 18,
                        "highlight_start": 1,
                        "text": "                c"
                      },
                      {
                        "highlight_end": 14,
                        "highlight_start": 1,
                        "text": "            ))),"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmphrjzoh4n/bson-2.15.0#bson@2.15.0",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphrjzoh4n\\bson-2.15.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "bson",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphrjzoh4n\\bson-2.15.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: variables can be used directly in the `format!` string\n   --> src\\raw\\bson_ref.rs:663:47\n    |\n663 |               c => Err(serde::de::Error::custom(format!(\n    |  _______________________________________________^\n664 | |                 \"expected DbPointer, but got {:?} instead\",\n665 | |                 c\n666 | |             ))),\n    | |_____________^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "change this to",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 21473,
                        "byte_start": 21473,
                        "column_end": 47,
                        "column_start": 47,
                        "expansion": null,
                        "file_name": "src\\raw\\bson_ref.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 664,
                        "line_start": 664,
                        "suggested_replacement": "c",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 47,
                            "highlight_start": 47,
                            "text": "                \"expected DbPointer, but got {:?} instead\","
                          }
                        ]
                      },
                      {
                        "byte_end": 21504,
                        "byte_start": 21485,
                        "column_end": 18,
                        "column_start": 59,
                        "expansion": null,
                        "file_name": "src\\raw\\bson_ref.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 665,
                        "line_start": 664,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 60,
                            "highlight_start": 59,
                            "text": "                \"expected DbPointer, but got {:?} instead\","
                          },
                          {
                            "highlight_end": 18,
                            "highlight_start": 1,
                            "text": "                c"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::uninlined_format_args",
                  "explanation": null
                },
                "level": "warning",
                "message": "variables can be used directly in the `format!` string",
                "spans": [
                  {
                    "byte_end": 21518,
                    "byte_start": 21418,
                    "column_end": 14,
                    "column_start": 47,
                    "expansion": null,
                    "file_name": "src\\raw\\bson_ref.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 666,
                    "line_start": 663,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 55,
                        "highlight_start": 47,
                        "text": "            c => Err(serde::de::Error::custom(format!("
                      },
                      {
                        "highlight_end": 60,
                        "highlight_start": 1,
                        "text": "                \"expected DbPointer, but got {:?} instead\","
                      },
                      {
                        "highlight_end": 18,
                        "highlight_start": 1,
                        "text": "                c"
                      },
                      {
                        "highlight_end": 14,
                        "highlight_start": 1,
                        "text": "            ))),"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmphrjzoh4n/bson-2.15.0#bson@2.15.0",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphrjzoh4n\\bson-2.15.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "bson",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphrjzoh4n\\bson-2.15.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: variables can be used directly in the `format!` string\n   --> src\\raw\\document.rs:543:82\n    |\n543 |               OwnedOrBorrowedRawDocument::Owned(d) => Err(serde::de::Error::custom(format!(\n    |  __________________________________________________________________________________^\n544 | |                 \"expected borrowed raw document, instead got owned {:?}\",\n545 | |                 d\n546 | |             ))),\n    | |_____________^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "change this to",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 21021,
                        "byte_start": 21021,
                        "column_end": 69,
                        "column_start": 69,
                        "expansion": null,
                        "file_name": "src\\raw\\document.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 544,
                        "line_start": 544,
                        "suggested_replacement": "d",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 69,
                            "highlight_start": 69,
                            "text": "                \"expected borrowed raw document, instead got owned {:?}\","
                          }
                        ]
                      },
                      {
                        "byte_end": 21044,
                        "byte_start": 21025,
                        "column_end": 18,
                        "column_start": 73,
                        "expansion": null,
                        "file_name": "src\\raw\\document.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 545,
                        "line_start": 544,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 74,
                            "highlight_start": 73,
                            "text": "                \"expected borrowed raw document, instead got owned {:?}\","
                          },
                          {
                            "highlight_end": 18,
                            "highlight_start": 1,
                            "text": "                d"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::uninlined_format_args",
                  "explanation": null
                },
                "level": "warning",
                "message": "variables can be used directly in the `format!` string",
                "spans": [
                  {
                    "byte_end": 21058,
                    "byte_start": 20944,
                    "column_end": 14,
                    "column_start": 82,
                    "expansion": null,
                    "file_name": "src\\raw\\document.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 546,
                    "line_start": 543,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 90,
                        "highlight_start": 82,
                        "text": "            OwnedOrBorrowedRawDocument::Owned(d) => Err(serde::de::Error::custom(format!("
                      },
                      {
                        "highlight_end": 74,
                        "highlight_start": 1,
                        "text": "                \"expected borrowed raw document, instead got owned {:?}\","
                      },
                      {
                        "highlight_end": 18,
                        "highlight_start": 1,
                        "text": "                d"
                      },
                      {
                        "highlight_end": 14,
                        "highlight_start": 1,
                        "text": "            ))),"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmphrjzoh4n/bson-2.15.0#bson@2.15.0",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphrjzoh4n\\bson-2.15.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "bson",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphrjzoh4n\\bson-2.15.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: variables can be used directly in the `format!` string\n  --> src\\raw\\error.rs:55:22\n   |\n55 |             .map(|k| format!(\"error at key \\\"{}\\\": \", k));\n   |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args\nhelp: change this to\n   |\n55 -             .map(|k| format!(\"error at key \\\"{}\\\": \", k));\n55 +             .map(|k| format!(\"error at key \\\"{k}\\\": \"));\n   |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "change this to",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 1479,
                        "byte_start": 1479,
                        "column_end": 47,
                        "column_start": 47,
                        "expansion": null,
                        "file_name": "src\\raw\\error.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 55,
                        "line_start": 55,
                        "suggested_replacement": "k",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 47,
                            "highlight_start": 47,
                            "text": "            .map(|k| format!(\"error at key \\\"{}\\\": \", k));"
                          }
                        ]
                      },
                      {
                        "byte_end": 1488,
                        "byte_start": 1485,
                        "column_end": 56,
                        "column_start": 53,
                        "expansion": null,
                        "file_name": "src\\raw\\error.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 55,
                        "line_start": 55,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 56,
                            "highlight_start": 53,
                            "text": "            .map(|k| format!(\"error at key \\\"{}\\\": \", k));"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::uninlined_format_args",
                  "explanation": null
                },
                "level": "warning",
                "message": "variables can be used directly in the `format!` string",
                "spans": [
                  {
                    "byte_end": 1489,
                    "byte_start": 1454,
                    "column_end": 57,
                    "column_start": 22,
                    "expansion": null,
                    "file_name": "src\\raw\\error.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 55,
                    "line_start": 55,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 57,
                        "highlight_start": 22,
                        "text": "            .map(|k| format!(\"error at key \\\"{}\\\": \", k));"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmphrjzoh4n/bson-2.15.0#bson@2.15.0",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphrjzoh4n\\bson-2.15.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "bson",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphrjzoh4n\\bson-2.15.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: variables can be used directly in the `format!` string\n  --> src\\raw\\error.rs:61:17\n   |\n61 |                 write!(f, \"{}malformed value: {:?}\", prefix, message)\n   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args\nhelp: change this to\n   |\n61 -                 write!(f, \"{}malformed value: {:?}\", prefix, message)\n61 +                 write!(f, \"{prefix}malformed value: {message:?}\")\n   |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "change this to",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 1664,
                        "byte_start": 1664,
                        "column_end": 29,
                        "column_start": 29,
                        "expansion": null,
                        "file_name": "src\\raw\\error.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 61,
                        "line_start": 61,
                        "suggested_replacement": "prefix",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 29,
                            "highlight_start": 29,
                            "text": "                write!(f, \"{}malformed value: {:?}\", prefix, message)"
                          }
                        ]
                      },
                      {
                        "byte_end": 1683,
                        "byte_start": 1683,
                        "column_end": 48,
                        "column_start": 48,
                        "expansion": null,
                        "file_name": "src\\raw\\error.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 61,
                        "line_start": 61,
                        "suggested_replacement": "message",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 48,
                            "highlight_start": 48,
                            "text": "                write!(f, \"{}malformed value: {:?}\", prefix, message)"
                          }
                        ]
                      },
                      {
                        "byte_end": 1695,
                        "byte_start": 1687,
                        "column_end": 60,
                        "column_start": 52,
                        "expansion": null,
                        "file_name": "src\\raw\\error.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 61,
                        "line_start": 61,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 60,
                            "highlight_start": 52,
                            "text": "                write!(f, \"{}malformed value: {:?}\", prefix, message)"
                          }
                        ]
                      },
                      {
                        "byte_end": 1704,
                        "byte_start": 1695,
                        "column_end": 69,
                        "column_start": 60,
                        "expansion": null,
                        "file_name": "src\\raw\\error.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 61,
                        "line_start": 61,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 69,
                            "highlight_start": 60,
                            "text": "                write!(f, \"{}malformed value: {:?}\", prefix, message)"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::uninlined_format_args",
                  "explanation": null
                },
                "level": "warning",
                "message": "variables can be used directly in the `format!` string",
                "spans": [
                  {
                    "byte_end": 1705,
                    "byte_start": 1652,
                    "column_end": 70,
                    "column_start": 17,
                    "expansion": null,
                    "file_name": "src\\raw\\error.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 61,
                    "line_start": 61,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 70,
                        "highlight_start": 17,
                        "text": "                write!(f, \"{}malformed value: {:?}\", prefix, message)"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmphrjzoh4n/bson-2.15.0#bson@2.15.0",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphrjzoh4n\\bson-2.15.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "bson",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphrjzoh4n\\bson-2.15.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: variables can be used directly in the `format!` string\n  --> src\\raw\\error.rs:63:48\n   |\n63 |             ErrorKind::Utf8EncodingError(e) => write!(f, \"{}utf-8 encoding error: {}\", prefix, e),\n   |                                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args\nhelp: change this to\n   |\n63 -             ErrorKind::Utf8EncodingError(e) => write!(f, \"{}utf-8 encoding error: {}\", prefix, e),\n63 +             ErrorKind::Utf8EncodingError(e) => write!(f, \"{prefix}utf-8 encoding error: {e}\"),\n   |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "change this to",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 1779,
                        "byte_start": 1779,
                        "column_end": 60,
                        "column_start": 60,
                        "expansion": null,
                        "file_name": "src\\raw\\error.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 63,
                        "line_start": 63,
                        "suggested_replacement": "prefix",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 60,
                            "highlight_start": 60,
                            "text": "            ErrorKind::Utf8EncodingError(e) => write!(f, \"{}utf-8 encoding error: {}\", prefix, e),"
                          }
                        ]
                      },
                      {
                        "byte_end": 1803,
                        "byte_start": 1803,
                        "column_end": 84,
                        "column_start": 84,
                        "expansion": null,
                        "file_name": "src\\raw\\error.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 63,
                        "line_start": 63,
                        "suggested_replacement": "e",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 84,
                            "highlight_start": 84,
                            "text": "            ErrorKind::Utf8EncodingError(e) => write!(f, \"{}utf-8 encoding error: {}\", prefix, e),"
                          }
                        ]
                      },
                      {
                        "byte_end": 1813,
                        "byte_start": 1805,
                        "column_end": 94,
                        "column_start": 86,
                        "expansion": null,
                        "file_name": "src\\raw\\error.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 63,
                        "line_start": 63,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 94,
                            "highlight_start": 86,
                            "text": "            ErrorKind::Utf8EncodingError(e) => write!(f, \"{}utf-8 encoding error: {}\", prefix, e),"
                          }
                        ]
                      },
                      {
                        "byte_end": 1816,
                        "byte_start": 1813,
                        "column_end": 97,
                        "column_start": 94,
                        "expansion": null,
                        "file_name": "src\\raw\\error.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 63,
                        "line_start": 63,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 97,
                            "highlight_start": 94,
                            "text": "            ErrorKind::Utf8EncodingError(e) => write!(f, \"{}utf-8 encoding error: {}\", prefix, e),"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::uninlined_format_args",
                  "explanation": null
                },
                "level": "warning",
                "message": "variables can be used directly in the `format!` string",
                "spans": [
                  {
                    "byte_end": 1817,
                    "byte_start": 1767,
                    "column_end": 98,
                    "column_start": 48,
                    "expansion": null,
                    "file_name": "src\\raw\\error.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 63,
                    "line_start": 63,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 98,
                        "highlight_start": 48,
                        "text": "            ErrorKind::Utf8EncodingError(e) => write!(f, \"{}utf-8 encoding error: {}\", prefix, e),"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmphrjzoh4n/bson-2.15.0#bson@2.15.0",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphrjzoh4n\\bson-2.15.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "bson",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphrjzoh4n\\bson-2.15.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: variables can be used directly in the `format!` string\n   --> src\\raw\\error.rs:125:74\n    |\n125 |               ValueAccessErrorKind::UnexpectedType { actual, expected } => write!(\n    |  __________________________________________________________________________^\n126 | |                 f,\n127 | |                 \"{} unexpected element type: {:?}, expected: {:?}\",\n128 | |                 prefix, actual, expected\n129 | |             ),\n    | |_____________^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "change this to",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 3786,
                        "byte_start": 3786,
                        "column_end": 19,
                        "column_start": 19,
                        "expansion": null,
                        "file_name": "src\\raw\\error.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 127,
                        "line_start": 127,
                        "suggested_replacement": "prefix",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 19,
                            "highlight_start": 19,
                            "text": "                \"{} unexpected element type: {:?}, expected: {:?}\","
                          }
                        ]
                      },
                      {
                        "byte_end": 3814,
                        "byte_start": 3814,
                        "column_end": 47,
                        "column_start": 47,
                        "expansion": null,
                        "file_name": "src\\raw\\error.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 127,
                        "line_start": 127,
                        "suggested_replacement": "actual",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 47,
                            "highlight_start": 47,
                            "text": "                \"{} unexpected element type: {:?}, expected: {:?}\","
                          }
                        ]
                      },
                      {
                        "byte_end": 3830,
                        "byte_start": 3830,
                        "column_end": 63,
                        "column_start": 63,
                        "expansion": null,
                        "file_name": "src\\raw\\error.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 127,
                        "line_start": 127,
                        "suggested_replacement": "expected",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 63,
                            "highlight_start": 63,
                            "text": "                \"{} unexpected element type: {:?}, expected: {:?}\","
                          }
                        ]
                      },
                      {
                        "byte_end": 3858,
                        "byte_start": 3834,
                        "column_end": 23,
                        "column_start": 67,
                        "expansion": null,
                        "file_name": "src\\raw\\error.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 128,
                        "line_start": 127,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 68,
                            "highlight_start": 67,
                            "text": "                \"{} unexpected element type: {:?}, expected: {:?}\","
                          },
                          {
                            "highlight_end": 23,
                            "highlight_start": 1,
                            "text": "                prefix, actual, expected"
                          }
                        ]
                      },
                      {
                        "byte_end": 3866,
                        "byte_start": 3858,
                        "column_end": 31,
                        "column_start": 23,
                        "expansion": null,
                        "file_name": "src\\raw\\error.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 128,
                        "line_start": 128,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 31,
                            "highlight_start": 23,
                            "text": "                prefix, actual, expected"
                          }
                        ]
                      },
                      {
                        "byte_end": 3876,
                        "byte_start": 3866,
                        "column_end": 41,
                        "column_start": 31,
                        "expansion": null,
                        "file_name": "src\\raw\\error.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 128,
                        "line_start": 128,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 41,
                            "highlight_start": 31,
                            "text": "                prefix, actual, expected"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::uninlined_format_args",
                  "explanation": null
                },
                "level": "warning",
                "message": "variables can be used directly in the `format!` string",
                "spans": [
                  {
                    "byte_end": 3890,
                    "byte_start": 3741,
                    "column_end": 14,
                    "column_start": 74,
                    "expansion": null,
                    "file_name": "src\\raw\\error.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 129,
                    "line_start": 125,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 81,
                        "highlight_start": 74,
                        "text": "            ValueAccessErrorKind::UnexpectedType { actual, expected } => write!("
                      },
                      {
                        "highlight_end": 19,
                        "highlight_start": 1,
                        "text": "                f,"
                      },
                      {
                        "highlight_end": 68,
                        "highlight_start": 1,
                        "text": "                \"{} unexpected element type: {:?}, expected: {:?}\","
                      },
                      {
                        "highlight_end": 41,
                        "highlight_start": 1,
                        "text": "                prefix, actual, expected"
                      },
                      {
                        "highlight_end": 14,
                        "highlight_start": 1,
                        "text": "            ),"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmphrjzoh4n/bson-2.15.0#bson@2.15.0",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphrjzoh4n\\bson-2.15.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "bson",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphrjzoh4n\\bson-2.15.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: variables can be used directly in the `format!` string\n   --> src\\raw\\error.rs:131:17\n    |\n131 |                 write!(f, \"{}: {}\", prefix, error)\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args\nhelp: change this to\n    |\n131 -                 write!(f, \"{}: {}\", prefix, error)\n131 +                 write!(f, \"{prefix}: {error}\")\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "change this to",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 3978,
                        "byte_start": 3978,
                        "column_end": 29,
                        "column_start": 29,
                        "expansion": null,
                        "file_name": "src\\raw\\error.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 131,
                        "line_start": 131,
                        "suggested_replacement": "prefix",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 29,
                            "highlight_start": 29,
                            "text": "                write!(f, \"{}: {}\", prefix, error)"
                          }
                        ]
                      },
                      {
                        "byte_end": 3982,
                        "byte_start": 3982,
                        "column_end": 33,
                        "column_start": 33,
                        "expansion": null,
                        "file_name": "src\\raw\\error.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 131,
                        "line_start": 131,
                        "suggested_replacement": "error",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 33,
                            "highlight_start": 33,
                            "text": "                write!(f, \"{}: {}\", prefix, error)"
                          }
                        ]
                      },
                      {
                        "byte_end": 3992,
                        "byte_start": 3984,
                        "column_end": 43,
                        "column_start": 35,
                        "expansion": null,
                        "file_name": "src\\raw\\error.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 131,
                        "line_start": 131,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 43,
                            "highlight_start": 35,
                            "text": "                write!(f, \"{}: {}\", prefix, error)"
                          }
                        ]
                      },
                      {
                        "byte_end": 3999,
                        "byte_start": 3992,
                        "column_end": 50,
                        "column_start": 43,
                        "expansion": null,
                        "file_name": "src\\raw\\error.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 131,
                        "line_start": 131,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 50,
                            "highlight_start": 43,
                            "text": "                write!(f, \"{}: {}\", prefix, error)"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::uninlined_format_args",
                  "explanation": null
                },
                "level": "warning",
                "message": "variables can be used directly in the `format!` string",
                "spans": [
                  {
                    "byte_end": 4000,
                    "byte_start": 3966,
                    "column_end": 51,
                    "column_start": 17,
                    "expansion": null,
                    "file_name": "src\\raw\\error.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 131,
                    "line_start": 131,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 51,
                        "highlight_start": 17,
                        "text": "                write!(f, \"{}: {}\", prefix, error)"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmphrjzoh4n/bson-2.15.0#bson@2.15.0",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphrjzoh4n\\bson-2.15.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "bson",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphrjzoh4n\\bson-2.15.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: variables can be used directly in the `format!` string\n   --> src\\raw\\error.rs:133:49\n    |\n133 |             ValueAccessErrorKind::NotPresent => write!(f, \"{}value not present\", prefix),\n    |                                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args\nhelp: change this to\n    |\n133 -             ValueAccessErrorKind::NotPresent => write!(f, \"{}value not present\", prefix),\n133 +             ValueAccessErrorKind::NotPresent => write!(f, \"{prefix}value not present\"),\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "change this to",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 4075,
                        "byte_start": 4075,
                        "column_end": 61,
                        "column_start": 61,
                        "expansion": null,
                        "file_name": "src\\raw\\error.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 133,
                        "line_start": 133,
                        "suggested_replacement": "prefix",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 61,
                            "highlight_start": 61,
                            "text": "            ValueAccessErrorKind::NotPresent => write!(f, \"{}value not present\", prefix),"
                          }
                        ]
                      },
                      {
                        "byte_end": 4102,
                        "byte_start": 4094,
                        "column_end": 88,
                        "column_start": 80,
                        "expansion": null,
                        "file_name": "src\\raw\\error.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 133,
                        "line_start": 133,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 88,
                            "highlight_start": 80,
                            "text": "            ValueAccessErrorKind::NotPresent => write!(f, \"{}value not present\", prefix),"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::uninlined_format_args",
                  "explanation": null
                },
                "level": "warning",
                "message": "variables can be used directly in the `format!` string",
                "spans": [
                  {
                    "byte_end": 4103,
                    "byte_start": 4063,
                    "column_end": 89,
                    "column_start": 49,
                    "expansion": null,
                    "file_name": "src\\raw\\error.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 133,
                    "line_start": 133,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 89,
                        "highlight_start": 49,
                        "text": "            ValueAccessErrorKind::NotPresent => write!(f, \"{}value not present\", prefix),"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmphrjzoh4n/bson-2.15.0#bson@2.15.0",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphrjzoh4n\\bson-2.15.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "bson",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphrjzoh4n\\bson-2.15.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: variables can be used directly in the `format!` string\n   --> src\\raw\\iter.rs:99:41\n    |\n99  |               return Err(Error::malformed(format!(\n    |  _________________________________________^\n100 | |                 \"document too small: {} bytes\",\n101 | |                 size\n102 | |             )));\n    | |_____________^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "change this to",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 2577,
                        "byte_start": 2577,
                        "column_end": 39,
                        "column_start": 39,
                        "expansion": null,
                        "file_name": "src\\raw\\iter.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 100,
                        "line_start": 100,
                        "suggested_replacement": "size",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 39,
                            "highlight_start": 39,
                            "text": "                \"document too small: {} bytes\","
                          }
                        ]
                      },
                      {
                        "byte_end": 2607,
                        "byte_start": 2585,
                        "column_end": 21,
                        "column_start": 47,
                        "expansion": null,
                        "file_name": "src\\raw\\iter.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 101,
                        "line_start": 100,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 48,
                            "highlight_start": 47,
                            "text": "                \"document too small: {} bytes\","
                          },
                          {
                            "highlight_end": 21,
                            "highlight_start": 1,
                            "text": "                size"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::uninlined_format_args",
                  "explanation": null
                },
                "level": "warning",
                "message": "variables can be used directly in the `format!` string",
                "spans": [
                  {
                    "byte_end": 2621,
                    "byte_start": 2530,
                    "column_end": 14,
                    "column_start": 41,
                    "expansion": null,
                    "file_name": "src\\raw\\iter.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 102,
                    "line_start": 99,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 49,
                        "highlight_start": 41,
                        "text": "            return Err(Error::malformed(format!("
                      },
                      {
                        "highlight_end": 48,
                        "highlight_start": 1,
                        "text": "                \"document too small: {} bytes\","
                      },
                      {
                        "highlight_end": 21,
                        "highlight_start": 1,
                        "text": "                size"
                      },
                      {
                        "highlight_end": 14,
                        "highlight_start": 1,
                        "text": "            )));"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmphrjzoh4n/bson-2.15.0#bson@2.15.0",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphrjzoh4n\\bson-2.15.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "bson",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphrjzoh4n\\bson-2.15.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: variables can be used directly in the `format!` string\n   --> src\\raw\\iter.rs:226:46\n    |\n226 |                         self.malformed_error(format!(\"binary length exceeds maximum: {}\", len))\n    |                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args\nhelp: change this to\n    |\n226 -                         self.malformed_error(format!(\"binary length exceeds maximum: {}\", len))\n226 +                         self.malformed_error(format!(\"binary length exceeds maximum: {len}\"))\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "change this to",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 6963,
                        "byte_start": 6963,
                        "column_end": 87,
                        "column_start": 87,
                        "expansion": null,
                        "file_name": "src\\raw\\iter.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 226,
                        "line_start": 226,
                        "suggested_replacement": "len",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 87,
                            "highlight_start": 87,
                            "text": "                        self.malformed_error(format!(\"binary length exceeds maximum: {}\", len))"
                          }
                        ]
                      },
                      {
                        "byte_end": 6970,
                        "byte_start": 6965,
                        "column_end": 94,
                        "column_start": 89,
                        "expansion": null,
                        "file_name": "src\\raw\\iter.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 226,
                        "line_start": 226,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 94,
                            "highlight_start": 89,
                            "text": "                        self.malformed_error(format!(\"binary length exceeds maximum: {}\", len))"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::uninlined_format_args",
                  "explanation": null
                },
                "level": "warning",
                "message": "variables can be used directly in the `format!` string",
                "spans": [
                  {
                    "byte_end": 6971,
                    "byte_start": 6922,
                    "column_end": 95,
                    "column_start": 46,
                    "expansion": null,
                    "file_name": "src\\raw\\iter.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 226,
                    "line_start": 226,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 95,
                        "highlight_start": 46,
                        "text": "                        self.malformed_error(format!(\"binary length exceeds maximum: {}\", len))"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmphrjzoh4n/bson-2.15.0#bson@2.15.0",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphrjzoh4n\\bson-2.15.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "bson",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphrjzoh4n\\bson-2.15.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: variables can be used directly in the `format!` string\n   --> src\\raw\\serde\\seeded_visitor.rs:471:36\n    |\n471 |               Err(SerdeError::custom(format!(\n    |  ____________________________________^\n472 | |                 \"number is too large for BSON: {}\",\n473 | |                 n\n474 | |             )))\n    | |_____________^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "change this to",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 17903,
                        "byte_start": 17903,
                        "column_end": 49,
                        "column_start": 49,
                        "expansion": null,
                        "file_name": "src\\raw\\serde\\seeded_visitor.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 472,
                        "line_start": 472,
                        "suggested_replacement": "n",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 49,
                            "highlight_start": 49,
                            "text": "                \"number is too large for BSON: {}\","
                          }
                        ]
                      },
                      {
                        "byte_end": 17924,
                        "byte_start": 17905,
                        "column_end": 18,
                        "column_start": 51,
                        "expansion": null,
                        "file_name": "src\\raw\\serde\\seeded_visitor.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 473,
                        "line_start": 472,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 52,
                            "highlight_start": 51,
                            "text": "                \"number is too large for BSON: {}\","
                          },
                          {
                            "highlight_end": 18,
                            "highlight_start": 1,
                            "text": "                n"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::uninlined_format_args",
                  "explanation": null
                },
                "level": "warning",
                "message": "variables can be used directly in the `format!` string",
                "spans": [
                  {
                    "byte_end": 17938,
                    "byte_start": 17846,
                    "column_end": 14,
                    "column_start": 36,
                    "expansion": null,
                    "file_name": "src\\raw\\serde\\seeded_visitor.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 474,
                    "line_start": 471,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 44,
                        "highlight_start": 36,
                        "text": "            Err(SerdeError::custom(format!("
                      },
                      {
                        "highlight_end": 52,
                        "highlight_start": 1,
                        "text": "                \"number is too large for BSON: {}\","
                      },
                      {
                        "highlight_end": 18,
                        "highlight_start": 1,
                        "text": "                n"
                      },
                      {
                        "highlight_end": 14,
                        "highlight_start": 1,
                        "text": "            )))"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmphrjzoh4n/bson-2.15.0#bson@2.15.0",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphrjzoh4n\\bson-2.15.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "bson",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphrjzoh4n\\bson-2.15.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: variables can be used directly in the `format!` string\n   --> src\\raw\\serde.rs:148:41\n    |\n148 |               o => Err(SerdeError::custom(format!(\n    |  _________________________________________^\n149 | |                 \"expected raw document, instead got {:?}\",\n150 | |                 o\n151 | |             ))),\n    | |_____________^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "change this to",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 4709,
                        "byte_start": 4709,
                        "column_end": 54,
                        "column_start": 54,
                        "expansion": null,
                        "file_name": "src\\raw\\serde.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 149,
                        "line_start": 149,
                        "suggested_replacement": "o",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 54,
                            "highlight_start": 54,
                            "text": "                \"expected raw document, instead got {:?}\","
                          }
                        ]
                      },
                      {
                        "byte_end": 4732,
                        "byte_start": 4713,
                        "column_end": 18,
                        "column_start": 58,
                        "expansion": null,
                        "file_name": "src\\raw\\serde.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 150,
                        "line_start": 149,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 59,
                            "highlight_start": 58,
                            "text": "                \"expected raw document, instead got {:?}\","
                          },
                          {
                            "highlight_end": 18,
                            "highlight_start": 1,
                            "text": "                o"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::uninlined_format_args",
                  "explanation": null
                },
                "level": "warning",
                "message": "variables can be used directly in the `format!` string",
                "spans": [
                  {
                    "byte_end": 4746,
                    "byte_start": 4647,
                    "column_end": 14,
                    "column_start": 41,
                    "expansion": null,
                    "file_name": "src\\raw\\serde.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 151,
                    "line_start": 148,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 49,
                        "highlight_start": 41,
                        "text": "            o => Err(SerdeError::custom(format!("
                      },
                      {
                        "highlight_end": 59,
                        "highlight_start": 1,
                        "text": "                \"expected raw document, instead got {:?}\","
                      },
                      {
                        "highlight_end": 18,
                        "highlight_start": 1,
                        "text": "                o"
                      },
                      {
                        "highlight_end": 14,
                        "highlight_start": 1,
                        "text": "            ))),"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmphrjzoh4n/bson-2.15.0#bson@2.15.0",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphrjzoh4n\\bson-2.15.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "bson",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphrjzoh4n\\bson-2.15.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: variables can be used directly in the `format!` string\n   --> src\\raw\\serde.rs:199:41\n    |\n199 |               o => Err(SerdeError::custom(format!(\n    |  _________________________________________^\n200 | |                 \"expected raw array, instead got {:?}\",\n201 | |                 o\n202 | |             ))),\n    | |_____________^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "change this to",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 6655,
                        "byte_start": 6655,
                        "column_end": 51,
                        "column_start": 51,
                        "expansion": null,
                        "file_name": "src\\raw\\serde.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 200,
                        "line_start": 200,
                        "suggested_replacement": "o",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 51,
                            "highlight_start": 51,
                            "text": "                \"expected raw array, instead got {:?}\","
                          }
                        ]
                      },
                      {
                        "byte_end": 6678,
                        "byte_start": 6659,
                        "column_end": 18,
                        "column_start": 55,
                        "expansion": null,
                        "file_name": "src\\raw\\serde.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 201,
                        "line_start": 200,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 56,
                            "highlight_start": 55,
                            "text": "                \"expected raw array, instead got {:?}\","
                          },
                          {
                            "highlight_end": 18,
                            "highlight_start": 1,
                            "text": "                o"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::uninlined_format_args",
                  "explanation": null
                },
                "level": "warning",
                "message": "variables can be used directly in the `format!` string",
                "spans": [
                  {
                    "byte_end": 6692,
                    "byte_start": 6596,
                    "column_end": 14,
                    "column_start": 41,
                    "expansion": null,
                    "file_name": "src\\raw\\serde.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 202,
                    "line_start": 199,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 49,
                        "highlight_start": 41,
                        "text": "            o => Err(SerdeError::custom(format!("
                      },
                      {
                        "highlight_end": 56,
                        "highlight_start": 1,
                        "text": "                \"expected raw array, instead got {:?}\","
                      },
                      {
                        "highlight_end": 18,
                        "highlight_start": 1,
                        "text": "                o"
                      },
                      {
                        "highlight_end": 14,
                        "highlight_start": 1,
                        "text": "            ))),"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmphrjzoh4n/bson-2.15.0#bson@2.15.0",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphrjzoh4n\\bson-2.15.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "bson",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphrjzoh4n\\bson-2.15.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: variables can be used directly in the `format!` string\n   --> src\\raw\\mod.rs:220:37\n    |\n220 |           return Err(Error::malformed(format!(\n    |  _____________________________________^\n221 | |             \"boolean must be stored as 0 or 1, got {}\",\n222 | |             val\n223 | |         )));\n    | |_________^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "change this to",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 7012,
                        "byte_start": 7012,
                        "column_end": 53,
                        "column_start": 53,
                        "expansion": null,
                        "file_name": "src\\raw\\mod.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 221,
                        "line_start": 221,
                        "suggested_replacement": "val",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 53,
                            "highlight_start": 53,
                            "text": "            \"boolean must be stored as 0 or 1, got {}\","
                          }
                        ]
                      },
                      {
                        "byte_end": 7031,
                        "byte_start": 7014,
                        "column_end": 16,
                        "column_start": 55,
                        "expansion": null,
                        "file_name": "src\\raw\\mod.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 222,
                        "line_start": 221,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 56,
                            "highlight_start": 55,
                            "text": "            \"boolean must be stored as 0 or 1, got {}\","
                          },
                          {
                            "highlight_end": 16,
                            "highlight_start": 1,
                            "text": "            val"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::uninlined_format_args",
                  "explanation": null
                },
                "level": "warning",
                "message": "variables can be used directly in the `format!` string",
                "spans": [
                  {
                    "byte_end": 7041,
                    "byte_start": 6951,
                    "column_end": 10,
                    "column_start": 37,
                    "expansion": null,
                    "file_name": "src\\raw\\mod.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 223,
                    "line_start": 220,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 45,
                        "highlight_start": 37,
                        "text": "        return Err(Error::malformed(format!("
                      },
                      {
                        "highlight_end": 56,
                        "highlight_start": 1,
                        "text": "            \"boolean must be stored as 0 or 1, got {}\","
                      },
                      {
                        "highlight_end": 16,
                        "highlight_start": 1,
                        "text": "            val"
                      },
                      {
                        "highlight_end": 10,
                        "highlight_start": 1,
                        "text": "        )));"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmphrjzoh4n/bson-2.15.0#bson@2.15.0",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphrjzoh4n\\bson-2.15.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "bson",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphrjzoh4n\\bson-2.15.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: variables can be used directly in the `format!` string\n   --> src\\raw\\mod.rs:241:37\n    |\n241 |           return Err(Error::malformed(format!(\n    |  _____________________________________^\n242 | |             \"BSON length encoded string needs to be at least {} bytes, instead got {}\",\n243 | |             MIN_BSON_STRING_SIZE, end\n244 | |         )));\n    | |_________^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "change this to",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 7574,
                        "byte_start": 7574,
                        "column_end": 63,
                        "column_start": 63,
                        "expansion": null,
                        "file_name": "src\\raw\\mod.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 242,
                        "line_start": 242,
                        "suggested_replacement": "MIN_BSON_STRING_SIZE",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 63,
                            "highlight_start": 63,
                            "text": "            \"BSON length encoded string needs to be at least {} bytes, instead got {}\","
                          }
                        ]
                      },
                      {
                        "byte_end": 7596,
                        "byte_start": 7596,
                        "column_end": 85,
                        "column_start": 85,
                        "expansion": null,
                        "file_name": "src\\raw\\mod.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 242,
                        "line_start": 242,
                        "suggested_replacement": "end",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 85,
                            "highlight_start": 85,
                            "text": "            \"BSON length encoded string needs to be at least {} bytes, instead got {}\","
                          }
                        ]
                      },
                      {
                        "byte_end": 7632,
                        "byte_start": 7598,
                        "column_end": 33,
                        "column_start": 87,
                        "expansion": null,
                        "file_name": "src\\raw\\mod.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 243,
                        "line_start": 242,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 88,
                            "highlight_start": 87,
                            "text": "            \"BSON length encoded string needs to be at least {} bytes, instead got {}\","
                          },
                          {
                            "highlight_end": 33,
                            "highlight_start": 1,
                            "text": "            MIN_BSON_STRING_SIZE, end"
                          }
                        ]
                      },
                      {
                        "byte_end": 7637,
                        "byte_start": 7632,
                        "column_end": 38,
                        "column_start": 33,
                        "expansion": null,
                        "file_name": "src\\raw\\mod.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 243,
                        "line_start": 243,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 38,
                            "highlight_start": 33,
                            "text": "            MIN_BSON_STRING_SIZE, end"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::uninlined_format_args",
                  "explanation": null
                },
                "level": "warning",
                "message": "variables can be used directly in the `format!` string",
                "spans": [
                  {
                    "byte_end": 7647,
                    "byte_start": 7503,
                    "column_end": 10,
                    "column_start": 37,
                    "expansion": null,
                    "file_name": "src\\raw\\mod.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 244,
                    "line_start": 241,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 45,
                        "highlight_start": 37,
                        "text": "        return Err(Error::malformed(format!("
                      },
                      {
                        "highlight_end": 88,
                        "highlight_start": 1,
                        "text": "            \"BSON length encoded string needs to be at least {} bytes, instead got {}\","
                      },
                      {
                        "highlight_end": 38,
                        "highlight_start": 1,
                        "text": "            MIN_BSON_STRING_SIZE, end"
                      },
                      {
                        "highlight_end": 10,
                        "highlight_start": 1,
                        "text": "        )));"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmphrjzoh4n/bson-2.15.0#bson@2.15.0",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphrjzoh4n\\bson-2.15.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "bson",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphrjzoh4n\\bson-2.15.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: variables can be used directly in the `format!` string\n  --> src\\ser\\error.rs:75:47\n   |\n75 |             Error::InvalidDocumentKey(key) => write!(fmt, \"Invalid map key type: {}\", key),\n   |                                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args\nhelp: change this to\n   |\n75 -             Error::InvalidDocumentKey(key) => write!(fmt, \"Invalid map key type: {}\", key),\n75 +             Error::InvalidDocumentKey(key) => write!(fmt, \"Invalid map key type: {key}\"),\n   |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "change this to",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 2129,
                        "byte_start": 2129,
                        "column_end": 83,
                        "column_start": 83,
                        "expansion": null,
                        "file_name": "src\\ser\\error.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 75,
                        "line_start": 75,
                        "suggested_replacement": "key",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 83,
                            "highlight_start": 83,
                            "text": "            Error::InvalidDocumentKey(key) => write!(fmt, \"Invalid map key type: {}\", key),"
                          }
                        ]
                      },
                      {
                        "byte_end": 2136,
                        "byte_start": 2131,
                        "column_end": 90,
                        "column_start": 85,
                        "expansion": null,
                        "file_name": "src\\ser\\error.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 75,
                        "line_start": 75,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 90,
                            "highlight_start": 85,
                            "text": "            Error::InvalidDocumentKey(key) => write!(fmt, \"Invalid map key type: {}\", key),"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::uninlined_format_args",
                  "explanation": null
                },
                "level": "warning",
                "message": "variables can be used directly in the `format!` string",
                "spans": [
                  {
                    "byte_end": 2137,
                    "byte_start": 2093,
                    "column_end": 91,
                    "column_start": 47,
                    "expansion": null,
                    "file_name": "src\\ser\\error.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 75,
                    "line_start": 75,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 91,
                        "highlight_start": 47,
                        "text": "            Error::InvalidDocumentKey(key) => write!(fmt, \"Invalid map key type: {}\", key),"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmphrjzoh4n/bson-2.15.0#bson@2.15.0",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphrjzoh4n\\bson-2.15.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "bson",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphrjzoh4n\\bson-2.15.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: variables can be used directly in the `format!` string\n  --> src\\ser\\error.rs:77:17\n   |\n77 |                 write!(fmt, \"cstrings cannot contain null bytes: {:?}\", string)\n   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args\nhelp: change this to\n   |\n77 -                 write!(fmt, \"cstrings cannot contain null bytes: {:?}\", string)\n77 +                 write!(fmt, \"cstrings cannot contain null bytes: {string:?}\")\n   |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "change this to",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 2256,
                        "byte_start": 2256,
                        "column_end": 67,
                        "column_start": 67,
                        "expansion": null,
                        "file_name": "src\\ser\\error.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 77,
                        "line_start": 77,
                        "suggested_replacement": "string",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 67,
                            "highlight_start": 67,
                            "text": "                write!(fmt, \"cstrings cannot contain null bytes: {:?}\", string)"
                          }
                        ]
                      },
                      {
                        "byte_end": 2268,
                        "byte_start": 2260,
                        "column_end": 79,
                        "column_start": 71,
                        "expansion": null,
                        "file_name": "src\\ser\\error.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 77,
                        "line_start": 77,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 79,
                            "highlight_start": 71,
                            "text": "                write!(fmt, \"cstrings cannot contain null bytes: {:?}\", string)"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::uninlined_format_args",
                  "explanation": null
                },
                "level": "warning",
                "message": "variables can be used directly in the `format!` string",
                "spans": [
                  {
                    "byte_end": 2269,
                    "byte_start": 2206,
                    "column_end": 80,
                    "column_start": 17,
                    "expansion": null,
                    "file_name": "src\\ser\\error.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 77,
                    "line_start": 77,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 80,
                        "highlight_start": 17,
                        "text": "                write!(fmt, \"cstrings cannot contain null bytes: {:?}\", string)"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmphrjzoh4n/bson-2.15.0#bson@2.15.0",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphrjzoh4n\\bson-2.15.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "bson",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphrjzoh4n\\bson-2.15.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: variables can be used directly in the `format!` string\n  --> src\\ser\\error.rs:80:59\n   |\n80 |               Error::UnsignedIntegerExceededRange(value) => write!(\n   |  ___________________________________________________________^\n81 | |                 fmt,\n82 | |                 \"BSON does not support unsigned integers.\n83 | |                  An attempt to serialize the value: {} in a signed type failed due to the value's \\\n84 | |                  size.\",\n85 | |                 value\n86 | |             ),\n   | |_____________^\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "change this to",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 2553,
                        "byte_start": 2553,
                        "column_end": 54,
                        "column_start": 54,
                        "expansion": null,
                        "file_name": "src\\ser\\error.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 83,
                        "line_start": 83,
                        "suggested_replacement": "value",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 54,
                            "highlight_start": 54,
                            "text": "                 An attempt to serialize the value: {} in a signed type failed due to the value's \\"
                          }
                        ]
                      },
                      {
                        "byte_end": 2646,
                        "byte_start": 2623,
                        "column_end": 22,
                        "column_start": 24,
                        "expansion": null,
                        "file_name": "src\\ser\\error.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 85,
                        "line_start": 84,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 25,
                            "highlight_start": 24,
                            "text": "                 size.\","
                          },
                          {
                            "highlight_end": 22,
                            "highlight_start": 1,
                            "text": "                value"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::uninlined_format_args",
                  "explanation": null
                },
                "level": "warning",
                "message": "variables can be used directly in the `format!` string",
                "spans": [
                  {
                    "byte_end": 2660,
                    "byte_start": 2413,
                    "column_end": 14,
                    "column_start": 59,
                    "expansion": null,
                    "file_name": "src\\ser\\error.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 86,
                    "line_start": 80,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 66,
                        "highlight_start": 59,
                        "text": "            Error::UnsignedIntegerExceededRange(value) => write!("
                      },
                      {
                        "highlight_end": 21,
                        "highlight_start": 1,
                        "text": "                fmt,"
                      },
                      {
                        "highlight_end": 58,
                        "highlight_start": 1,
                        "text": "                \"BSON does not support unsigned integers."
                      },
                      {
                        "highlight_end": 100,
                        "highlight_start": 1,
                        "text": "                 An attempt to serialize the value: {} in a signed type failed due to the value's \\"
                      },
                      {
                        "highlight_end": 25,
                        "highlight_start": 1,
                        "text": "                 size.\","
                      },
                      {
                        "highlight_end": 22,
                        "highlight_start": 1,
                        "text": "                value"
                      },
                      {
                        "highlight_end": 14,
                        "highlight_start": 1,
                        "text": "            ),"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmphrjzoh4n/bson-2.15.0#bson@2.15.0",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphrjzoh4n\\bson-2.15.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "bson",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphrjzoh4n\\bson-2.15.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: variables can be used directly in the `format!` string\n  --> src\\ser\\raw\\document_serializer.rs:81:13\n   |\n81 |             write!(&mut rs.bytes, \"{}\", index)?;\n   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args\nhelp: change this to\n   |\n81 -             write!(&mut rs.bytes, \"{}\", index)?;\n81 +             write!(&mut rs.bytes, \"{index}\")?;\n   |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "change this to",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 2357,
                        "byte_start": 2357,
                        "column_end": 37,
                        "column_start": 37,
                        "expansion": null,
                        "file_name": "src\\ser\\raw\\document_serializer.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 81,
                        "line_start": 81,
                        "suggested_replacement": "index",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 37,
                            "highlight_start": 37,
                            "text": "            write!(&mut rs.bytes, \"{}\", index)?;"
                          }
                        ]
                      },
                      {
                        "byte_end": 2366,
                        "byte_start": 2359,
                        "column_end": 46,
                        "column_start": 39,
                        "expansion": null,
                        "file_name": "src\\ser\\raw\\document_serializer.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 81,
                        "line_start": 81,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 46,
                            "highlight_start": 39,
                            "text": "            write!(&mut rs.bytes, \"{}\", index)?;"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::uninlined_format_args",
                  "explanation": null
                },
                "level": "warning",
                "message": "variables can be used directly in the `format!` string",
                "spans": [
                  {
                    "byte_end": 2367,
                    "byte_start": 2333,
                    "column_end": 47,
                    "column_start": 13,
                    "expansion": null,
                    "file_name": "src\\ser\\raw\\document_serializer.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 81,
                    "line_start": 81,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 47,
                        "highlight_start": 13,
                        "text": "            write!(&mut rs.bytes, \"{}\", index)?;"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmphrjzoh4n/bson-2.15.0#bson@2.15.0",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphrjzoh4n\\bson-2.15.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "bson",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphrjzoh4n\\bson-2.15.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: variables can be used directly in the `format!` string\n   --> src\\ser\\raw\\value_serializer.rs:291:42\n    |\n291 |                   return Err(Error::custom(format!(\n    |  __________________________________________^\n292 | |                     \"can't serialize string for step {:?}\",\n293 | |                     s\n294 | |                 )))\n    | |_________________^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "change this to",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 9049,
                        "byte_start": 9049,
                        "column_end": 55,
                        "column_start": 55,
                        "expansion": null,
                        "file_name": "src\\ser\\raw\\value_serializer.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 292,
                        "line_start": 292,
                        "suggested_replacement": "s",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 55,
                            "highlight_start": 55,
                            "text": "                    \"can't serialize string for step {:?}\","
                          }
                        ]
                      },
                      {
                        "byte_end": 9076,
                        "byte_start": 9053,
                        "column_end": 22,
                        "column_start": 59,
                        "expansion": null,
                        "file_name": "src\\ser\\raw\\value_serializer.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 293,
                        "line_start": 292,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 60,
                            "highlight_start": 59,
                            "text": "                    \"can't serialize string for step {:?}\","
                          },
                          {
                            "highlight_end": 22,
                            "highlight_start": 1,
                            "text": "                    s"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::uninlined_format_args",
                  "explanation": null
                },
                "level": "warning",
                "message": "variables can be used directly in the `format!` string",
                "spans": [
                  {
                    "byte_end": 9094,
                    "byte_start": 8986,
                    "column_end": 18,
                    "column_start": 42,
                    "expansion": null,
                    "file_name": "src\\ser\\raw\\value_serializer.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 294,
                    "line_start": 291,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 50,
                        "highlight_start": 42,
                        "text": "                return Err(Error::custom(format!("
                      },
                      {
                        "highlight_end": 60,
                        "highlight_start": 1,
                        "text": "                    \"can't serialize string for step {:?}\","
                      },
                      {
                        "highlight_end": 22,
                        "highlight_start": 1,
                        "text": "                    s"
                      },
                      {
                        "highlight_end": 18,
                        "highlight_start": 1,
                        "text": "                )))"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmphrjzoh4n/bson-2.15.0#bson@2.15.0",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphrjzoh4n\\bson-2.15.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "bson",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphrjzoh4n\\bson-2.15.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: variables can be used directly in the `format!` string\n   --> src\\ser\\raw\\value_serializer.rs:562:42\n    |\n562 |                   return Err(Error::custom(format!(\n    |  __________________________________________^\n563 | |                     \"expected to end serialization of type, got extra key \\\"{}\\\"\",\n564 | |                     k\n565 | |                 )));\n    | |_________________^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "change this to",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 18297,
                        "byte_start": 18297,
                        "column_end": 78,
                        "column_start": 78,
                        "expansion": null,
                        "file_name": "src\\ser\\raw\\value_serializer.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 563,
                        "line_start": 563,
                        "suggested_replacement": "k",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 78,
                            "highlight_start": 78,
                            "text": "                    \"expected to end serialization of type, got extra key \\\"{}\\\"\","
                          }
                        ]
                      },
                      {
                        "byte_end": 18324,
                        "byte_start": 18301,
                        "column_end": 22,
                        "column_start": 82,
                        "expansion": null,
                        "file_name": "src\\ser\\raw\\value_serializer.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 564,
                        "line_start": 563,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 83,
                            "highlight_start": 82,
                            "text": "                    \"expected to end serialization of type, got extra key \\\"{}\\\"\","
                          },
                          {
                            "highlight_end": 22,
                            "highlight_start": 1,
                            "text": "                    k"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::uninlined_format_args",
                  "explanation": null
                },
                "level": "warning",
                "message": "variables can be used directly in the `format!` string",
                "spans": [
                  {
                    "byte_end": 18342,
                    "byte_start": 18211,
                    "column_end": 18,
                    "column_start": 42,
                    "expansion": null,
                    "file_name": "src\\ser\\raw\\value_serializer.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 565,
                    "line_start": 562,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 50,
                        "highlight_start": 42,
                        "text": "                return Err(Error::custom(format!("
                      },
                      {
                        "highlight_end": 83,
                        "highlight_start": 1,
                        "text": "                    \"expected to end serialization of type, got extra key \\\"{}\\\"\","
                      },
                      {
                        "highlight_end": 22,
                        "highlight_start": 1,
                        "text": "                    k"
                      },
                      {
                        "highlight_end": 18,
                        "highlight_start": 1,
                        "text": "                )));"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmphrjzoh4n/bson-2.15.0#bson@2.15.0",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphrjzoh4n\\bson-2.15.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "bson",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphrjzoh4n\\bson-2.15.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: variables can be used directly in the `format!` string\n   --> src\\ser\\raw\\value_serializer.rs:568:42\n    |\n568 |                   return Err(Error::custom(format!(\n    |  __________________________________________^\n569 | |                     \"mismatched serialization step and next key: {:?} + \\\"{}\\\"\",\n570 | |                     state, k\n571 | |                 )));\n    | |_________________^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "change this to",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 18504,
                        "byte_start": 18504,
                        "column_end": 67,
                        "column_start": 67,
                        "expansion": null,
                        "file_name": "src\\ser\\raw\\value_serializer.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 569,
                        "line_start": 569,
                        "suggested_replacement": "state",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 67,
                            "highlight_start": 67,
                            "text": "                    \"mismatched serialization step and next key: {:?} + \\\"{}\\\"\","
                          }
                        ]
                      },
                      {
                        "byte_end": 18513,
                        "byte_start": 18513,
                        "column_end": 76,
                        "column_start": 76,
                        "expansion": null,
                        "file_name": "src\\ser\\raw\\value_serializer.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 569,
                        "line_start": 569,
                        "suggested_replacement": "k",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 76,
                            "highlight_start": 76,
                            "text": "                    \"mismatched serialization step and next key: {:?} + \\\"{}\\\"\","
                          }
                        ]
                      },
                      {
                        "byte_end": 18544,
                        "byte_start": 18517,
                        "column_end": 26,
                        "column_start": 80,
                        "expansion": null,
                        "file_name": "src\\ser\\raw\\value_serializer.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 570,
                        "line_start": 569,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 81,
                            "highlight_start": 80,
                            "text": "                    \"mismatched serialization step and next key: {:?} + \\\"{}\\\"\","
                          },
                          {
                            "highlight_end": 26,
                            "highlight_start": 1,
                            "text": "                    state, k"
                          }
                        ]
                      },
                      {
                        "byte_end": 18547,
                        "byte_start": 18544,
                        "column_end": 29,
                        "column_start": 26,
                        "expansion": null,
                        "file_name": "src\\ser\\raw\\value_serializer.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 570,
                        "line_start": 570,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 29,
                            "highlight_start": 26,
                            "text": "                    state, k"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::uninlined_format_args",
                  "explanation": null
                },
                "level": "warning",
                "message": "variables can be used directly in the `format!` string",
                "spans": [
                  {
                    "byte_end": 18565,
                    "byte_start": 18429,
                    "column_end": 18,
                    "column_start": 42,
                    "expansion": null,
                    "file_name": "src\\ser\\raw\\value_serializer.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 571,
                    "line_start": 568,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 50,
                        "highlight_start": 42,
                        "text": "                return Err(Error::custom(format!("
                      },
                      {
                        "highlight_end": 81,
                        "highlight_start": 1,
                        "text": "                    \"mismatched serialization step and next key: {:?} + \\\"{}\\\"\","
                      },
                      {
                        "highlight_end": 29,
                        "highlight_start": 1,
                        "text": "                    state, k"
                      },
                      {
                        "highlight_end": 18,
                        "highlight_start": 1,
                        "text": "                )));"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmphrjzoh4n/bson-2.15.0#bson@2.15.0",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphrjzoh4n\\bson-2.15.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "bson",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphrjzoh4n\\bson-2.15.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: variables can be used directly in the `format!` string\n  --> src\\ser\\raw\\mod.rs:90:42\n   |\n90 |                   return Err(Error::custom(format!(\n   |  __________________________________________^\n91 | |                     \"attempted to encode a non-document type at the top level: {:?}\",\n92 | |                     t\n93 | |                 )));\n   | |_________________^\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "change this to",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 2891,
                        "byte_start": 2891,
                        "column_end": 81,
                        "column_start": 81,
                        "expansion": null,
                        "file_name": "src\\ser\\raw\\mod.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 91,
                        "line_start": 91,
                        "suggested_replacement": "t",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 81,
                            "highlight_start": 81,
                            "text": "                    \"attempted to encode a non-document type at the top level: {:?}\","
                          }
                        ]
                      },
                      {
                        "byte_end": 2918,
                        "byte_start": 2895,
                        "column_end": 22,
                        "column_start": 85,
                        "expansion": null,
                        "file_name": "src\\ser\\raw\\mod.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 92,
                        "line_start": 91,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 86,
                            "highlight_start": 85,
                            "text": "                    \"attempted to encode a non-document type at the top level: {:?}\","
                          },
                          {
                            "highlight_end": 22,
                            "highlight_start": 1,
                            "text": "                    t"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::uninlined_format_args",
                  "explanation": null
                },
                "level": "warning",
                "message": "variables can be used directly in the `format!` string",
                "spans": [
                  {
                    "byte_end": 2936,
                    "byte_start": 2802,
                    "column_end": 18,
                    "column_start": 42,
                    "expansion": null,
                    "file_name": "src\\ser\\raw\\mod.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 93,
                    "line_start": 90,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 50,
                        "highlight_start": 42,
                        "text": "                return Err(Error::custom(format!("
                      },
                      {
                        "highlight_end": 86,
                        "highlight_start": 1,
                        "text": "                    \"attempted to encode a non-document type at the top level: {:?}\","
                      },
                      {
                        "highlight_end": 22,
                        "highlight_start": 1,
                        "text": "                    t"
                      },
                      {
                        "highlight_end": 18,
                        "highlight_start": 1,
                        "text": "                )));"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmphrjzoh4n/bson-2.15.0#bson@2.15.0",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphrjzoh4n\\bson-2.15.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "bson",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphrjzoh4n\\bson-2.15.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: variables can be used directly in the `format!` string\n   --> src\\ser\\serde.rs:326:43\n    |\n326 |                           Err(Error::custom(format!(\n    |  ___________________________________________^\n327 | |                             \"expected UUID to be serialized as {} but got {:?} instead\",\n328 | |                             expectation, b\n329 | |                         )))\n    | |_________________________^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "change this to",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 9964,
                        "byte_start": 9964,
                        "column_end": 65,
                        "column_start": 65,
                        "expansion": null,
                        "file_name": "src\\ser\\serde.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 327,
                        "line_start": 327,
                        "suggested_replacement": "expectation",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 65,
                            "highlight_start": 65,
                            "text": "                            \"expected UUID to be serialized as {} but got {:?} instead\","
                          }
                        ]
                      },
                      {
                        "byte_end": 9975,
                        "byte_start": 9975,
                        "column_end": 76,
                        "column_start": 76,
                        "expansion": null,
                        "file_name": "src\\ser\\serde.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 327,
                        "line_start": 327,
                        "suggested_replacement": "b",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 76,
                            "highlight_start": 76,
                            "text": "                            \"expected UUID to be serialized as {} but got {:?} instead\","
                          }
                        ]
                      },
                      {
                        "byte_end": 10028,
                        "byte_start": 9987,
                        "column_end": 40,
                        "column_start": 88,
                        "expansion": null,
                        "file_name": "src\\ser\\serde.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 328,
                        "line_start": 327,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 89,
                            "highlight_start": 88,
                            "text": "                            \"expected UUID to be serialized as {} but got {:?} instead\","
                          },
                          {
                            "highlight_end": 40,
                            "highlight_start": 1,
                            "text": "                            expectation, b"
                          }
                        ]
                      },
                      {
                        "byte_end": 10031,
                        "byte_start": 10028,
                        "column_end": 43,
                        "column_start": 40,
                        "expansion": null,
                        "file_name": "src\\ser\\serde.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 328,
                        "line_start": 328,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 43,
                            "highlight_start": 40,
                            "text": "                            expectation, b"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::uninlined_format_args",
                  "explanation": null
                },
                "level": "warning",
                "message": "variables can be used directly in the `format!` string",
                "spans": [
                  {
                    "byte_end": 10057,
                    "byte_start": 9891,
                    "column_end": 26,
                    "column_start": 43,
                    "expansion": null,
                    "file_name": "src\\ser\\serde.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 329,
                    "line_start": 326,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 51,
                        "highlight_start": 43,
                        "text": "                        Err(Error::custom(format!("
                      },
                      {
                        "highlight_end": 89,
                        "highlight_start": 1,
                        "text": "                            \"expected UUID to be serialized as {} but got {:?} instead\","
                      },
                      {
                        "highlight_end": 43,
                        "highlight_start": 1,
                        "text": "                            expectation, b"
                      },
                      {
                        "highlight_end": 26,
                        "highlight_start": 1,
                        "text": "                        )))"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmphrjzoh4n/bson-2.15.0#bson@2.15.0",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphrjzoh4n\\bson-2.15.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "bson",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphrjzoh4n\\bson-2.15.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: variables can be used directly in the `format!` string\n   --> src\\ser\\serde.rs:346:40\n    |\n346 |                   b => Err(Error::custom(format!(\n    |  ________________________________________^\n347 | |                     \"expected raw document or array to be serialized as bytes but got {:?} instead\",\n348 | |                     b\n349 | |                 ))),\n    | |_________________^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "change this to",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 10882,
                        "byte_start": 10882,
                        "column_end": 88,
                        "column_start": 88,
                        "expansion": null,
                        "file_name": "src\\ser\\serde.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 347,
                        "line_start": 347,
                        "suggested_replacement": "b",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 88,
                            "highlight_start": 88,
                            "text": "                    \"expected raw document or array to be serialized as bytes but got {:?} instead\","
                          }
                        ]
                      },
                      {
                        "byte_end": 10917,
                        "byte_start": 10894,
                        "column_end": 22,
                        "column_start": 100,
                        "expansion": null,
                        "file_name": "src\\ser\\serde.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 348,
                        "line_start": 347,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 101,
                            "highlight_start": 100,
                            "text": "                    \"expected raw document or array to be serialized as bytes but got {:?} instead\","
                          },
                          {
                            "highlight_end": 22,
                            "highlight_start": 1,
                            "text": "                    b"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::uninlined_format_args",
                  "explanation": null
                },
                "level": "warning",
                "message": "variables can be used directly in the `format!` string",
                "spans": [
                  {
                    "byte_end": 10935,
                    "byte_start": 10786,
                    "column_end": 18,
                    "column_start": 40,
                    "expansion": null,
                    "file_name": "src\\ser\\serde.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 349,
                    "line_start": 346,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 48,
                        "highlight_start": 40,
                        "text": "                b => Err(Error::custom(format!("
                      },
                      {
                        "highlight_end": 101,
                        "highlight_start": 1,
                        "text": "                    \"expected raw document or array to be serialized as bytes but got {:?} instead\","
                      },
                      {
                        "highlight_end": 22,
                        "highlight_start": 1,
                        "text": "                    b"
                      },
                      {
                        "highlight_end": 18,
                        "highlight_start": 1,
                        "text": "                ))),"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmphrjzoh4n/bson-2.15.0#bson@2.15.0",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphrjzoh4n\\bson-2.15.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "bson",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphrjzoh4n\\bson-2.15.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: variables can be used directly in the `format!` string\n   --> src\\serde_helpers.rs:115:42\n    |\n115 |         Err(_) => Err(ser::Error::custom(format!(\"cannot convert {} to i32\", val))),\n    |                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args\nhelp: change this to\n    |\n115 -         Err(_) => Err(ser::Error::custom(format!(\"cannot convert {} to i32\", val))),\n115 +         Err(_) => Err(ser::Error::custom(format!(\"cannot convert {val} to i32\"))),\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "change this to",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 4090,
                        "byte_start": 4090,
                        "column_end": 67,
                        "column_start": 67,
                        "expansion": null,
                        "file_name": "src\\serde_helpers.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 115,
                        "line_start": 115,
                        "suggested_replacement": "val",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 67,
                            "highlight_start": 67,
                            "text": "        Err(_) => Err(ser::Error::custom(format!(\"cannot convert {} to i32\", val))),"
                          }
                        ]
                      },
                      {
                        "byte_end": 4104,
                        "byte_start": 4099,
                        "column_end": 81,
                        "column_start": 76,
                        "expansion": null,
                        "file_name": "src\\serde_helpers.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 115,
                        "line_start": 115,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 81,
                            "highlight_start": 76,
                            "text": "        Err(_) => Err(ser::Error::custom(format!(\"cannot convert {} to i32\", val))),"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::uninlined_format_args",
                  "explanation": null
                },
                "level": "warning",
                "message": "variables can be used directly in the `format!` string",
                "spans": [
                  {
                    "byte_end": 4105,
                    "byte_start": 4065,
                    "column_end": 82,
                    "column_start": 42,
                    "expansion": null,
                    "file_name": "src\\serde_helpers.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 115,
                    "line_start": 115,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 82,
                        "highlight_start": 42,
                        "text": "        Err(_) => Err(ser::Error::custom(format!(\"cannot convert {} to i32\", val))),"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmphrjzoh4n/bson-2.15.0#bson@2.15.0",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphrjzoh4n\\bson-2.15.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "bson",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphrjzoh4n\\bson-2.15.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: variables can be used directly in the `format!` string\n   --> src\\serde_helpers.rs:128:42\n    |\n128 |         Err(_) => Err(ser::Error::custom(format!(\"cannot convert {} to i32\", val))),\n    |                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args\nhelp: change this to\n    |\n128 -         Err(_) => Err(ser::Error::custom(format!(\"cannot convert {} to i32\", val))),\n128 +         Err(_) => Err(ser::Error::custom(format!(\"cannot convert {val} to i32\"))),\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "change this to",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 4629,
                        "byte_start": 4629,
                        "column_end": 67,
                        "column_start": 67,
                        "expansion": null,
                        "file_name": "src\\serde_helpers.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 128,
                        "line_start": 128,
                        "suggested_replacement": "val",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 67,
                            "highlight_start": 67,
                            "text": "        Err(_) => Err(ser::Error::custom(format!(\"cannot convert {} to i32\", val))),"
                          }
                        ]
                      },
                      {
                        "byte_end": 4643,
                        "byte_start": 4638,
                        "column_end": 81,
                        "column_start": 76,
                        "expansion": null,
                        "file_name": "src\\serde_helpers.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 128,
                        "line_start": 128,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 81,
                            "highlight_start": 76,
                            "text": "        Err(_) => Err(ser::Error::custom(format!(\"cannot convert {} to i32\", val))),"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::uninlined_format_args",
                  "explanation": null
                },
                "level": "warning",
                "message": "variables can be used directly in the `format!` string",
                "spans": [
                  {
                    "byte_end": 4644,
                    "byte_start": 4604,
                    "column_end": 82,
                    "column_start": 42,
                    "expansion": null,
                    "file_name": "src\\serde_helpers.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 128,
                    "line_start": 128,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 82,
                        "highlight_start": 42,
                        "text": "        Err(_) => Err(ser::Error::custom(format!(\"cannot convert {} to i32\", val))),"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmphrjzoh4n/bson-2.15.0#bson@2.15.0",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphrjzoh4n\\bson-2.15.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "bson",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphrjzoh4n\\bson-2.15.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: variables can be used directly in the `format!` string\n   --> src\\serde_helpers.rs:136:42\n    |\n136 |         Err(_) => Err(ser::Error::custom(format!(\"cannot convert {} to i64\", val))),\n    |                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args\nhelp: change this to\n    |\n136 -         Err(_) => Err(ser::Error::custom(format!(\"cannot convert {} to i64\", val))),\n136 +         Err(_) => Err(ser::Error::custom(format!(\"cannot convert {val} to i64\"))),\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "change this to",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 4993,
                        "byte_start": 4993,
                        "column_end": 67,
                        "column_start": 67,
                        "expansion": null,
                        "file_name": "src\\serde_helpers.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 136,
                        "line_start": 136,
                        "suggested_replacement": "val",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 67,
                            "highlight_start": 67,
                            "text": "        Err(_) => Err(ser::Error::custom(format!(\"cannot convert {} to i64\", val))),"
                          }
                        ]
                      },
                      {
                        "byte_end": 5007,
                        "byte_start": 5002,
                        "column_end": 81,
                        "column_start": 76,
                        "expansion": null,
                        "file_name": "src\\serde_helpers.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 136,
                        "line_start": 136,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 81,
                            "highlight_start": 76,
                            "text": "        Err(_) => Err(ser::Error::custom(format!(\"cannot convert {} to i64\", val))),"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::uninlined_format_args",
                  "explanation": null
                },
                "level": "warning",
                "message": "variables can be used directly in the `format!` string",
                "spans": [
                  {
                    "byte_end": 5008,
                    "byte_start": 4968,
                    "column_end": 82,
                    "column_start": 42,
                    "expansion": null,
                    "file_name": "src\\serde_helpers.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 136,
                    "line_start": 136,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 82,
                        "highlight_start": 42,
                        "text": "        Err(_) => Err(ser::Error::custom(format!(\"cannot convert {} to i64\", val))),"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmphrjzoh4n/bson-2.15.0#bson@2.15.0",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphrjzoh4n\\bson-2.15.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "bson",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphrjzoh4n\\bson-2.15.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: variables can be used directly in the `format!` string\n   --> src\\serde_helpers.rs:172:35\n    |\n172 |               Err(de::Error::custom(format!(\n    |  ___________________________________^\n173 | |                 \"cannot convert f64 (BSON double) {} to u32\",\n174 | |                 f\n175 | |             )))\n    | |_____________^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "change this to",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 6144,
                        "byte_start": 6144,
                        "column_end": 52,
                        "column_start": 52,
                        "expansion": null,
                        "file_name": "src\\serde_helpers.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 173,
                        "line_start": 173,
                        "suggested_replacement": "f",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 52,
                            "highlight_start": 52,
                            "text": "                \"cannot convert f64 (BSON double) {} to u32\","
                          }
                        ]
                      },
                      {
                        "byte_end": 6172,
                        "byte_start": 6153,
                        "column_end": 18,
                        "column_start": 61,
                        "expansion": null,
                        "file_name": "src\\serde_helpers.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 174,
                        "line_start": 173,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 62,
                            "highlight_start": 61,
                            "text": "                \"cannot convert f64 (BSON double) {} to u32\","
                          },
                          {
                            "highlight_end": 18,
                            "highlight_start": 1,
                            "text": "                f"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::uninlined_format_args",
                  "explanation": null
                },
                "level": "warning",
                "message": "variables can be used directly in the `format!` string",
                "spans": [
                  {
                    "byte_end": 6186,
                    "byte_start": 6084,
                    "column_end": 14,
                    "column_start": 35,
                    "expansion": null,
                    "file_name": "src\\serde_helpers.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 175,
                    "line_start": 172,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 43,
                        "highlight_start": 35,
                        "text": "            Err(de::Error::custom(format!("
                      },
                      {
                        "highlight_end": 62,
                        "highlight_start": 1,
                        "text": "                \"cannot convert f64 (BSON double) {} to u32\","
                      },
                      {
                        "highlight_end": 18,
                        "highlight_start": 1,
                        "text": "                f"
                      },
                      {
                        "highlight_end": 14,
                        "highlight_start": 1,
                        "text": "            )))"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmphrjzoh4n/bson-2.15.0#bson@2.15.0",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphrjzoh4n\\bson-2.15.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "bson",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphrjzoh4n\\bson-2.15.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: variables can be used directly in the `format!` string\n   --> src\\serde_helpers.rs:209:35\n    |\n209 |               Err(de::Error::custom(format!(\n    |  ___________________________________^\n210 | |                 \"cannot convert f64 (BSON double) {} to u64\",\n211 | |                 f\n212 | |             )))\n    | |_____________^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "change this to",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 7313,
                        "byte_start": 7313,
                        "column_end": 52,
                        "column_start": 52,
                        "expansion": null,
                        "file_name": "src\\serde_helpers.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 210,
                        "line_start": 210,
                        "suggested_replacement": "f",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 52,
                            "highlight_start": 52,
                            "text": "                \"cannot convert f64 (BSON double) {} to u64\","
                          }
                        ]
                      },
                      {
                        "byte_end": 7341,
                        "byte_start": 7322,
                        "column_end": 18,
                        "column_start": 61,
                        "expansion": null,
                        "file_name": "src\\serde_helpers.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 211,
                        "line_start": 210,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 62,
                            "highlight_start": 61,
                            "text": "                \"cannot convert f64 (BSON double) {} to u64\","
                          },
                          {
                            "highlight_end": 18,
                            "highlight_start": 1,
                            "text": "                f"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::uninlined_format_args",
                  "explanation": null
                },
                "level": "warning",
                "message": "variables can be used directly in the `format!` string",
                "spans": [
                  {
                    "byte_end": 7355,
                    "byte_start": 7253,
                    "column_end": 14,
                    "column_start": 35,
                    "expansion": null,
                    "file_name": "src\\serde_helpers.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 212,
                    "line_start": 209,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 43,
                        "highlight_start": 35,
                        "text": "            Err(de::Error::custom(format!("
                      },
                      {
                        "highlight_end": 62,
                        "highlight_start": 1,
                        "text": "                \"cannot convert f64 (BSON double) {} to u64\","
                      },
                      {
                        "highlight_end": 18,
                        "highlight_start": 1,
                        "text": "                f"
                      },
                      {
                        "highlight_end": 14,
                        "highlight_start": 1,
                        "text": "            )))"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmphrjzoh4n/bson-2.15.0#bson@2.15.0",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphrjzoh4n\\bson-2.15.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "bson",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphrjzoh4n\\bson-2.15.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: variables can be used directly in the `format!` string\n   --> src\\serde_helpers.rs:221:36\n    |\n221 |               Err(ser::Error::custom(format!(\n    |  ____________________________________^\n222 | |                 \"cannot convert u64 {} to f64 (BSON double)\",\n223 | |                 val\n224 | |             )))\n    | |_____________^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "change this to",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 7770,
                        "byte_start": 7770,
                        "column_end": 38,
                        "column_start": 38,
                        "expansion": null,
                        "file_name": "src\\serde_helpers.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 222,
                        "line_start": 222,
                        "suggested_replacement": "val",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 38,
                            "highlight_start": 38,
                            "text": "                \"cannot convert u64 {} to f64 (BSON double)\","
                          }
                        ]
                      },
                      {
                        "byte_end": 7814,
                        "byte_start": 7793,
                        "column_end": 20,
                        "column_start": 61,
                        "expansion": null,
                        "file_name": "src\\serde_helpers.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 223,
                        "line_start": 222,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 62,
                            "highlight_start": 61,
                            "text": "                \"cannot convert u64 {} to f64 (BSON double)\","
                          },
                          {
                            "highlight_end": 20,
                            "highlight_start": 1,
                            "text": "                val"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::uninlined_format_args",
                  "explanation": null
                },
                "level": "warning",
                "message": "variables can be used directly in the `format!` string",
                "spans": [
                  {
                    "byte_end": 7828,
                    "byte_start": 7724,
                    "column_end": 14,
                    "column_start": 36,
                    "expansion": null,
                    "file_name": "src\\serde_helpers.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 224,
                    "line_start": 221,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 44,
                        "highlight_start": 36,
                        "text": "            Err(ser::Error::custom(format!("
                      },
                      {
                        "highlight_end": 62,
                        "highlight_start": 1,
                        "text": "                \"cannot convert u64 {} to f64 (BSON double)\","
                      },
                      {
                        "highlight_end": 20,
                        "highlight_start": 1,
                        "text": "                val"
                      },
                      {
                        "highlight_end": 14,
                        "highlight_start": 1,
                        "text": "            )))"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmphrjzoh4n/bson-2.15.0#bson@2.15.0",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphrjzoh4n\\bson-2.15.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "bson",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphrjzoh4n\\bson-2.15.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: variables can be used directly in the `format!` string\n   --> src\\serde_helpers.rs:385:44\n    |\n385 |             .map_err(|e| de::Error::custom(format!(\"cannot format {} as RFC 3339: {}\", date, e)))\n    |                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args\nhelp: change this to\n    |\n385 -             .map_err(|e| de::Error::custom(format!(\"cannot format {} as RFC 3339: {}\", date, e)))\n385 +             .map_err(|e| de::Error::custom(format!(\"cannot format {date} as RFC 3339: {e}\")))\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "change this to",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 13516,
                        "byte_start": 13516,
                        "column_end": 68,
                        "column_start": 68,
                        "expansion": null,
                        "file_name": "src\\serde_helpers.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 385,
                        "line_start": 385,
                        "suggested_replacement": "date",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 68,
                            "highlight_start": 68,
                            "text": "            .map_err(|e| de::Error::custom(format!(\"cannot format {} as RFC 3339: {}\", date, e)))"
                          }
                        ]
                      },
                      {
                        "byte_end": 13532,
                        "byte_start": 13532,
                        "column_end": 84,
                        "column_start": 84,
                        "expansion": null,
                        "file_name": "src\\serde_helpers.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 385,
                        "line_start": 385,
                        "suggested_replacement": "e",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 84,
                            "highlight_start": 84,
                            "text": "            .map_err(|e| de::Error::custom(format!(\"cannot format {} as RFC 3339: {}\", date, e)))"
                          }
                        ]
                      },
                      {
                        "byte_end": 13540,
                        "byte_start": 13534,
                        "column_end": 92,
                        "column_start": 86,
                        "expansion": null,
                        "file_name": "src\\serde_helpers.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 385,
                        "line_start": 385,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 92,
                            "highlight_start": 86,
                            "text": "            .map_err(|e| de::Error::custom(format!(\"cannot format {} as RFC 3339: {}\", date, e)))"
                          }
                        ]
                      },
                      {
                        "byte_end": 13543,
                        "byte_start": 13540,
                        "column_end": 95,
                        "column_start": 92,
                        "expansion": null,
                        "file_name": "src\\serde_helpers.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 385,
                        "line_start": 385,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 95,
                            "highlight_start": 92,
                            "text": "            .map_err(|e| de::Error::custom(format!(\"cannot format {} as RFC 3339: {}\", date, e)))"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::uninlined_format_args",
                  "explanation": null
                },
                "level": "warning",
                "message": "variables can be used directly in the `format!` string",
                "spans": [
                  {
                    "byte_end": 13544,
                    "byte_start": 13492,
                    "column_end": 96,
                    "column_start": 44,
                    "expansion": null,
                    "file_name": "src\\serde_helpers.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 385,
                    "line_start": 385,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 96,
                        "highlight_start": 44,
                        "text": "            .map_err(|e| de::Error::custom(format!(\"cannot format {} as RFC 3339: {}\", date, e)))"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmphrjzoh4n/bson-2.15.0#bson@2.15.0",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphrjzoh4n\\bson-2.15.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "bson",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphrjzoh4n\\bson-2.15.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: variables can be used directly in the `format!` string\n   --> src\\serde_helpers.rs:391:45\n    |\n391 |             .map_err(|_| ser::Error::custom(format!(\"cannot convert {} to DateTime\", val)))?;\n    |                                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args\nhelp: change this to\n    |\n391 -             .map_err(|_| ser::Error::custom(format!(\"cannot convert {} to DateTime\", val)))?;\n391 +             .map_err(|_| ser::Error::custom(format!(\"cannot convert {val} to DateTime\")))?;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "change this to",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 13821,
                        "byte_start": 13821,
                        "column_end": 70,
                        "column_start": 70,
                        "expansion": null,
                        "file_name": "src\\serde_helpers.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 391,
                        "line_start": 391,
                        "suggested_replacement": "val",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 70,
                            "highlight_start": 70,
                            "text": "            .map_err(|_| ser::Error::custom(format!(\"cannot convert {} to DateTime\", val)))?;"
                          }
                        ]
                      },
                      {
                        "byte_end": 13840,
                        "byte_start": 13835,
                        "column_end": 89,
                        "column_start": 84,
                        "expansion": null,
                        "file_name": "src\\serde_helpers.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 391,
                        "line_start": 391,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 89,
                            "highlight_start": 84,
                            "text": "            .map_err(|_| ser::Error::custom(format!(\"cannot convert {} to DateTime\", val)))?;"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::uninlined_format_args",
                  "explanation": null
                },
                "level": "warning",
                "message": "variables can be used directly in the `format!` string",
                "spans": [
                  {
                    "byte_end": 13841,
                    "byte_start": 13796,
                    "column_end": 90,
                    "column_start": 45,
                    "expansion": null,
                    "file_name": "src\\serde_helpers.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 391,
                    "line_start": 391,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 90,
                        "highlight_start": 45,
                        "text": "            .map_err(|_| ser::Error::custom(format!(\"cannot convert {} to DateTime\", val)))?;"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmphrjzoh4n/bson-2.15.0#bson@2.15.0",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphrjzoh4n\\bson-2.15.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "bson",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphrjzoh4n\\bson-2.15.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: variables can be used directly in the `format!` string\n   --> src\\serde_helpers.rs:420:31\n    |\n420 |             de::Error::custom(format!(\"cannot parse RFC 3339 datetime from \\\"{}\\\"\", iso))\n    |                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args\nhelp: change this to\n    |\n420 -             de::Error::custom(format!(\"cannot parse RFC 3339 datetime from \\\"{}\\\"\", iso))\n420 +             de::Error::custom(format!(\"cannot parse RFC 3339 datetime from \\\"{iso}\\\"\"))\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "change this to",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 14952,
                        "byte_start": 14952,
                        "column_end": 79,
                        "column_start": 79,
                        "expansion": null,
                        "file_name": "src\\serde_helpers.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 420,
                        "line_start": 420,
                        "suggested_replacement": "iso",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 79,
                            "highlight_start": 79,
                            "text": "            de::Error::custom(format!(\"cannot parse RFC 3339 datetime from \\\"{}\\\"\", iso))"
                          }
                        ]
                      },
                      {
                        "byte_end": 14961,
                        "byte_start": 14956,
                        "column_end": 88,
                        "column_start": 83,
                        "expansion": null,
                        "file_name": "src\\serde_helpers.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 420,
                        "line_start": 420,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 88,
                            "highlight_start": 83,
                            "text": "            de::Error::custom(format!(\"cannot parse RFC 3339 datetime from \\\"{}\\\"\", iso))"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::uninlined_format_args",
                  "explanation": null
                },
                "level": "warning",
                "message": "variables can be used directly in the `format!` string",
                "spans": [
                  {
                    "byte_end": 14962,
                    "byte_start": 14904,
                    "column_end": 89,
                    "column_start": 31,
                    "expansion": null,
                    "file_name": "src\\serde_helpers.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 420,
                    "line_start": 420,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 89,
                        "highlight_start": 31,
                        "text": "            de::Error::custom(format!(\"cannot parse RFC 3339 datetime from \\\"{}\\\"\", iso))"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmphrjzoh4n/bson-2.15.0#bson@2.15.0",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphrjzoh4n\\bson-2.15.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "bson",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphrjzoh4n\\bson-2.15.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: variables can be used directly in the `format!` string\n   --> src\\serde_helpers.rs:429:45\n    |\n429 |             .map_err(|e| ser::Error::custom(format!(\"cannot format {} as RFC 3339: {}\", val, e)))?;\n    |                                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args\nhelp: change this to\n    |\n429 -             .map_err(|e| ser::Error::custom(format!(\"cannot format {} as RFC 3339: {}\", val, e)))?;\n429 +             .map_err(|e| ser::Error::custom(format!(\"cannot format {val} as RFC 3339: {e}\")))?;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "change this to",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 15315,
                        "byte_start": 15315,
                        "column_end": 69,
                        "column_start": 69,
                        "expansion": null,
                        "file_name": "src\\serde_helpers.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 429,
                        "line_start": 429,
                        "suggested_replacement": "val",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 69,
                            "highlight_start": 69,
                            "text": "            .map_err(|e| ser::Error::custom(format!(\"cannot format {} as RFC 3339: {}\", val, e)))?;"
                          }
                        ]
                      },
                      {
                        "byte_end": 15331,
                        "byte_start": 15331,
                        "column_end": 85,
                        "column_start": 85,
                        "expansion": null,
                        "file_name": "src\\serde_helpers.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 429,
                        "line_start": 429,
                        "suggested_replacement": "e",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 85,
                            "highlight_start": 85,
                            "text": "            .map_err(|e| ser::Error::custom(format!(\"cannot format {} as RFC 3339: {}\", val, e)))?;"
                          }
                        ]
                      },
                      {
                        "byte_end": 15338,
                        "byte_start": 15333,
                        "column_end": 92,
                        "column_start": 87,
                        "expansion": null,
                        "file_name": "src\\serde_helpers.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 429,
                        "line_start": 429,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 92,
                            "highlight_start": 87,
                            "text": "            .map_err(|e| ser::Error::custom(format!(\"cannot format {} as RFC 3339: {}\", val, e)))?;"
                          }
                        ]
                      },
                      {
                        "byte_end": 15341,
                        "byte_start": 15338,
                        "column_end": 95,
                        "column_start": 92,
                        "expansion": null,
                        "file_name": "src\\serde_helpers.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 429,
                        "line_start": 429,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 95,
                            "highlight_start": 92,
                            "text": "            .map_err(|e| ser::Error::custom(format!(\"cannot format {} as RFC 3339: {}\", val, e)))?;"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::uninlined_format_args",
                  "explanation": null
                },
                "level": "warning",
                "message": "variables can be used directly in the `format!` string",
                "spans": [
                  {
                    "byte_end": 15342,
                    "byte_start": 15291,
                    "column_end": 96,
                    "column_start": 45,
                    "expansion": null,
                    "file_name": "src\\serde_helpers.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 429,
                    "line_start": 429,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 96,
                        "highlight_start": 45,
                        "text": "            .map_err(|e| ser::Error::custom(format!(\"cannot format {} as RFC 3339: {}\", val, e)))?;"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmphrjzoh4n/bson-2.15.0#bson@2.15.0",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphrjzoh4n\\bson-2.15.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "bson",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphrjzoh4n\\bson-2.15.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: variables can be used directly in the `format!` string\n   --> src\\serde_helpers.rs:463:46\n    |\n463 |               Err(_) => Err(ser::Error::custom(format!(\n    |  ______________________________________________^\n464 | |                 \"cannot convert {} to ObjectId\",\n465 | |                 val\n466 | |             ))),\n    | |_____________^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "change this to",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 16503,
                        "byte_start": 16503,
                        "column_end": 34,
                        "column_start": 34,
                        "expansion": null,
                        "file_name": "src\\serde_helpers.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 464,
                        "line_start": 464,
                        "suggested_replacement": "val",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 34,
                            "highlight_start": 34,
                            "text": "                \"cannot convert {} to ObjectId\","
                          }
                        ]
                      },
                      {
                        "byte_end": 16538,
                        "byte_start": 16517,
                        "column_end": 20,
                        "column_start": 48,
                        "expansion": null,
                        "file_name": "src\\serde_helpers.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 465,
                        "line_start": 464,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 49,
                            "highlight_start": 48,
                            "text": "                \"cannot convert {} to ObjectId\","
                          },
                          {
                            "highlight_end": 20,
                            "highlight_start": 1,
                            "text": "                val"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::uninlined_format_args",
                  "explanation": null
                },
                "level": "warning",
                "message": "variables can be used directly in the `format!` string",
                "spans": [
                  {
                    "byte_end": 16552,
                    "byte_start": 16461,
                    "column_end": 14,
                    "column_start": 46,
                    "expansion": null,
                    "file_name": "src\\serde_helpers.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 466,
                    "line_start": 463,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 54,
                        "highlight_start": 46,
                        "text": "            Err(_) => Err(ser::Error::custom(format!("
                      },
                      {
                        "highlight_end": 49,
                        "highlight_start": 1,
                        "text": "                \"cannot convert {} to ObjectId\","
                      },
                      {
                        "highlight_end": 20,
                        "highlight_start": 1,
                        "text": "                val"
                      },
                      {
                        "highlight_end": 14,
                        "highlight_start": 1,
                        "text": "            ))),"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmphrjzoh4n/bson-2.15.0#bson@2.15.0",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphrjzoh4n\\bson-2.15.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "bson",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphrjzoh4n\\bson-2.15.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: variables can be used directly in the `format!` string\n   --> src\\uuid\\mod.rs:578:17\n    |\n578 |                 write!(fmt, \"{}\", message)\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args\nhelp: change this to\n    |\n578 -                 write!(fmt, \"{}\", message)\n578 +                 write!(fmt, \"{message}\")\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "change this to",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 20766,
                        "byte_start": 20766,
                        "column_end": 31,
                        "column_start": 31,
                        "expansion": null,
                        "file_name": "src\\uuid\\mod.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 578,
                        "line_start": 578,
                        "suggested_replacement": "message",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 31,
                            "highlight_start": 31,
                            "text": "                write!(fmt, \"{}\", message)"
                          }
                        ]
                      },
                      {
                        "byte_end": 20777,
                        "byte_start": 20768,
                        "column_end": 42,
                        "column_start": 33,
                        "expansion": null,
                        "file_name": "src\\uuid\\mod.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 578,
                        "line_start": 578,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 42,
                            "highlight_start": 33,
                            "text": "                write!(fmt, \"{}\", message)"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::uninlined_format_args",
                  "explanation": null
                },
                "level": "warning",
                "message": "variables can be used directly in the `format!` string",
                "spans": [
                  {
                    "byte_end": 20778,
                    "byte_start": 20752,
                    "column_end": 43,
                    "column_start": 17,
                    "expansion": null,
                    "file_name": "src\\uuid\\mod.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 578,
                    "line_start": 578,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 43,
                        "highlight_start": 17,
                        "text": "                write!(fmt, \"{}\", message)"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmphrjzoh4n/bson-2.15.0#bson@2.15.0",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphrjzoh4n\\bson-2.15.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "bson",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphrjzoh4n\\bson-2.15.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: variables can be used directly in the `format!` string\n   --> src\\uuid\\mod.rs:585:17\n    |\n585 | /                 write!(\n586 | |                     fmt,\n587 | |                     \"expected {:?} when converting to UUID with {:?}, isntead got {:?}\",\n588 | |                     expected_binary_subtype, requested_representation, actual_binary_subtype\n589 | |                 )\n    | |_________________^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "change this to",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 21058,
                        "byte_start": 21058,
                        "column_end": 32,
                        "column_start": 32,
                        "expansion": null,
                        "file_name": "src\\uuid\\mod.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 587,
                        "line_start": 587,
                        "suggested_replacement": "expected_binary_subtype",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 32,
                            "highlight_start": 32,
                            "text": "                    \"expected {:?} when converting to UUID with {:?}, isntead got {:?}\","
                          }
                        ]
                      },
                      {
                        "byte_end": 21092,
                        "byte_start": 21092,
                        "column_end": 66,
                        "column_start": 66,
                        "expansion": null,
                        "file_name": "src\\uuid\\mod.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 587,
                        "line_start": 587,
                        "suggested_replacement": "requested_representation",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 66,
                            "highlight_start": 66,
                            "text": "                    \"expected {:?} when converting to UUID with {:?}, isntead got {:?}\","
                          }
                        ]
                      },
                      {
                        "byte_end": 21110,
                        "byte_start": 21110,
                        "column_end": 84,
                        "column_start": 84,
                        "expansion": null,
                        "file_name": "src\\uuid\\mod.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 587,
                        "line_start": 587,
                        "suggested_replacement": "actual_binary_subtype",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 84,
                            "highlight_start": 84,
                            "text": "                    \"expected {:?} when converting to UUID with {:?}, isntead got {:?}\","
                          }
                        ]
                      },
                      {
                        "byte_end": 21159,
                        "byte_start": 21114,
                        "column_end": 44,
                        "column_start": 88,
                        "expansion": null,
                        "file_name": "src\\uuid\\mod.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 588,
                        "line_start": 587,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 89,
                            "highlight_start": 88,
                            "text": "                    \"expected {:?} when converting to UUID with {:?}, isntead got {:?}\","
                          },
                          {
                            "highlight_end": 44,
                            "highlight_start": 1,
                            "text": "                    expected_binary_subtype, requested_representation, actual_binary_subtype"
                          }
                        ]
                      },
                      {
                        "byte_end": 21185,
                        "byte_start": 21159,
                        "column_end": 70,
                        "column_start": 44,
                        "expansion": null,
                        "file_name": "src\\uuid\\mod.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 588,
                        "line_start": 588,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 70,
                            "highlight_start": 44,
                            "text": "                    expected_binary_subtype, requested_representation, actual_binary_subtype"
                          }
                        ]
                      },
                      {
                        "byte_end": 21208,
                        "byte_start": 21185,
                        "column_end": 93,
                        "column_start": 70,
                        "expansion": null,
                        "file_name": "src\\uuid\\mod.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 588,
                        "line_start": 588,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 93,
                            "highlight_start": 70,
                            "text": "                    expected_binary_subtype, requested_representation, actual_binary_subtype"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::uninlined_format_args",
                  "explanation": null
                },
                "level": "warning",
                "message": "variables can be used directly in the `format!` string",
                "spans": [
                  {
                    "byte_end": 21226,
                    "byte_start": 20994,
                    "column_end": 18,
                    "column_start": 17,
                    "expansion": null,
                    "file_name": "src\\uuid\\mod.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 589,
                    "line_start": 585,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 24,
                        "highlight_start": 17,
                        "text": "                write!("
                      },
                      {
                        "highlight_end": 25,
                        "highlight_start": 1,
                        "text": "                    fmt,"
                      },
                      {
                        "highlight_end": 89,
                        "highlight_start": 1,
                        "text": "                    \"expected {:?} when converting to UUID with {:?}, isntead got {:?}\","
                      },
                      {
                        "highlight_end": 93,
                        "highlight_start": 1,
                        "text": "                    expected_binary_subtype, requested_representation, actual_binary_subtype"
                      },
                      {
                        "highlight_end": 18,
                        "highlight_start": 1,
                        "text": "                )"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmphrjzoh4n/bson-2.15.0#bson@2.15.0",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphrjzoh4n\\bson-2.15.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "bson",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphrjzoh4n\\bson-2.15.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: variables can be used directly in the `format!` string\n   --> src\\uuid\\mod.rs:592:17\n    |\n592 | /                 write!(\n593 | |                     fmt,\n594 | |                     \"expected UUID to contain 16 bytes, instead got {}\",\n595 | |                     length\n596 | |                 )\n    | |_________________^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "change this to",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 21408,
                        "byte_start": 21408,
                        "column_end": 70,
                        "column_start": 70,
                        "expansion": null,
                        "file_name": "src\\uuid\\mod.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 594,
                        "line_start": 594,
                        "suggested_replacement": "length",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 70,
                            "highlight_start": 70,
                            "text": "                    \"expected UUID to contain 16 bytes, instead got {}\","
                          }
                        ]
                      },
                      {
                        "byte_end": 21438,
                        "byte_start": 21410,
                        "column_end": 27,
                        "column_start": 72,
                        "expansion": null,
                        "file_name": "src\\uuid\\mod.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 595,
                        "line_start": 594,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 73,
                            "highlight_start": 72,
                            "text": "                    \"expected UUID to contain 16 bytes, instead got {}\","
                          },
                          {
                            "highlight_end": 27,
                            "highlight_start": 1,
                            "text": "                    length"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::uninlined_format_args",
                  "explanation": null
                },
                "level": "warning",
                "message": "variables can be used directly in the `format!` string",
                "spans": [
                  {
                    "byte_end": 21456,
                    "byte_start": 21306,
                    "column_end": 18,
                    "column_start": 17,
                    "expansion": null,
                    "file_name": "src\\uuid\\mod.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 596,
                    "line_start": 592,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 24,
                        "highlight_start": 17,
                        "text": "                write!("
                      },
                      {
                        "highlight_end": 25,
                        "highlight_start": 1,
                        "text": "                    fmt,"
                      },
                      {
                        "highlight_end": 73,
                        "highlight_start": 1,
                        "text": "                    \"expected UUID to contain 16 bytes, instead got {}\","
                      },
                      {
                        "highlight_end": 27,
                        "highlight_start": 1,
                        "text": "                    length"
                      },
                      {
                        "highlight_end": 18,
                        "highlight_start": 1,
                        "text": "                )"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-artifact",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmphrjzoh4n/bson-2.15.0#bson@2.15.0",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphrjzoh4n\\bson-2.15.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "bson",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphrjzoh4n\\bson-2.15.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphrjzoh4n\\bson-2.15.0\\target\\debug\\deps\\libbson-2d30ff5d23e5f18a.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "build-finished",
              "success": true
            }
          ],
          "audit": {
            "database": {
              "advisory-count": 787,
              "last-commit": "7573f55ba337263f61167dbb0ea926cdc7c8eb5d",
              "last-updated": "2025-06-17T11:04:25+02:00"
            },
            "lockfile": {
              "dependency-count": 160
            },
            "settings": {
              "target_arch": [],
              "target_os": [],
              "severity": null,
              "ignore": [],
              "informational_warnings": [
                "unmaintained",
                "unsound",
                "notice"
              ]
            },
            "vulnerabilities": {
              "found": false,
              "count": 0,
              "list": []
            },
            "warnings": {
              "unmaintained": [
                {
                  "kind": "unmaintained",
                  "package": {
                    "name": "ansi_term",
                    "version": "0.11.0",
                    "source": "registry+https://github.com/rust-lang/crates.io-index",
                    "checksum": "ee49baf6cb617b853aa8d93bf420db2383fab46d314482ca2803b40d5fde979b",
                    "dependencies": [
                      {
                        "name": "winapi",
                        "version": "0.3.9",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      }
                    ],
                    "replace": null
                  },
                  "advisory": {
                    "id": "RUSTSEC-2021-0139",
                    "package": "ansi_term",
                    "title": "ansi_term is Unmaintained",
                    "description": "The maintainer has advised that this crate is deprecated and will not receive any maintenance.\n\nThe crate does not seem to have much dependencies and may or may not be ok to use as-is.\n\nLast release seems to have been three years ago.\n\n## Possible Alternative(s)\n\n The below list has not been vetted in any way and may or may not contain alternatives;\n\n - [ansiterm](https://crates.io/crates/ansiterm)\n - [anstyle](https://github.com/epage/anstyle)\n - [console](https://crates.io/crates/console)\n - [nu-ansi-term](https://crates.io/crates/nu-ansi-term)\n - [owo-colors](https://crates.io/crates/owo-colors)\n - [stylish](https://crates.io/crates/stylish)\n - [yansi](https://crates.io/crates/yansi)\n\n## Dependency Specific Migration(s)\n\n - [structopt, clap2](https://github.com/clap-rs/clap/discussions/4172)",
                    "date": "2021-08-18",
                    "aliases": [],
                    "related": [],
                    "collection": "crates",
                    "categories": [],
                    "keywords": [],
                    "cvss": null,
                    "informational": "unmaintained",
                    "references": [],
                    "source": null,
                    "url": "https://github.com/ogham/rust-ansi-term/issues/72",
                    "withdrawn": null,
                    "license": "CC0-1.0"
                  },
                  "affected": null,
                  "versions": {
                    "patched": [],
                    "unaffected": []
                  }
                },
                {
                  "kind": "unmaintained",
                  "package": {
                    "name": "atty",
                    "version": "0.2.14",
                    "source": "registry+https://github.com/rust-lang/crates.io-index",
                    "checksum": "d9b39be18770d11421cdb1b9947a45dd3f37e93092cbf377614828a319d5fee8",
                    "dependencies": [
                      {
                        "name": "hermit-abi",
                        "version": "0.1.19",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "libc",
                        "version": "0.2.172",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "winapi",
                        "version": "0.3.9",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      }
                    ],
                    "replace": null
                  },
                  "advisory": {
                    "id": "RUSTSEC-2024-0375",
                    "package": "atty",
                    "title": "`atty` is unmaintained",
                    "description": "The maintainer of `atty` has [published](https://github.com/softprops/atty/commit/5bfdbe9e48c6ca6a4909e8d5b04f5e843a257e93) an official notice that the crate is no longer\nunder development, and that users should instead rely on the functionality in the standard library's [`IsTerminal`](https://doc.rust-lang.org/std/io/trait.IsTerminal.html) trait.\n\n## Alternative(s)\n\n- [std::io::IsTerminal](https://doc.rust-lang.org/stable/std/io/trait.IsTerminal.html) - Stable since Rust 1.70.0 and the recommended replacement per the `atty` maintainer.\n- [is-terminal](https://crates.io/crates/is-terminal) - Standalone crate supporting Rust older than 1.70.0",
                    "date": "2024-09-25",
                    "aliases": [],
                    "related": [],
                    "collection": "crates",
                    "categories": [],
                    "keywords": [],
                    "cvss": null,
                    "informational": "unmaintained",
                    "references": [],
                    "source": null,
                    "url": "https://github.com/softprops/atty/issues/57",
                    "withdrawn": null,
                    "license": "CC0-1.0"
                  },
                  "affected": null,
                  "versions": {
                    "patched": [],
                    "unaffected": []
                  }
                },
                {
                  "kind": "unmaintained",
                  "package": {
                    "name": "difference",
                    "version": "2.0.0",
                    "source": "registry+https://github.com/rust-lang/crates.io-index",
                    "checksum": "524cbf6897b527295dff137cec09ecf3a05f4fddffd7dfcd1585403449e74198",
                    "replace": null
                  },
                  "advisory": {
                    "id": "RUSTSEC-2020-0095",
                    "package": "difference",
                    "title": "difference is unmaintained",
                    "description": "The author of the `difference` crate is unresponsive.\n\nMaintained alternatives:\n\n- [`dissimilar`](https://crates.io/crates/dissimilar)\n\n- [`similar`](https://crates.io/crates/similar)\n\n- [`treediff`](https://crates.io/crates/treediff)\n\n- [`diffus`](https://crates.io/crates/diffus)",
                    "date": "2020-12-20",
                    "aliases": [],
                    "related": [],
                    "collection": "crates",
                    "categories": [],
                    "keywords": [],
                    "cvss": null,
                    "informational": "unmaintained",
                    "references": [],
                    "source": null,
                    "url": "https://github.com/johannhof/difference.rs/issues/45",
                    "withdrawn": null,
                    "license": "CC0-1.0"
                  },
                  "affected": null,
                  "versions": {
                    "patched": [],
                    "unaffected": [
                      ">2.0.0"
                    ]
                  }
                },
                {
                  "kind": "unmaintained",
                  "package": {
                    "name": "serde_cbor",
                    "version": "0.11.2",
                    "source": "registry+https://github.com/rust-lang/crates.io-index",
                    "checksum": "2bef2ebfde456fb76bbcf9f59315333decc4fda0b2b44b420243c11e0f5ec1f5",
                    "dependencies": [
                      {
                        "name": "half",
                        "version": "1.8.3",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "serde",
                        "version": "1.0.219",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      }
                    ],
                    "replace": null
                  },
                  "advisory": {
                    "id": "RUSTSEC-2021-0127",
                    "package": "serde_cbor",
                    "title": "serde_cbor is unmaintained",
                    "description": "The `serde_cbor` crate is unmaintained. The author has archived the github repository.\n\nAlternatives proposed by the author:\n\n * [`ciborium`](https://crates.io/crates/ciborium)\n * [`minicbor`](https://crates.io/crates/minicbor)",
                    "date": "2021-08-15",
                    "aliases": [],
                    "related": [],
                    "collection": "crates",
                    "categories": [],
                    "keywords": [],
                    "cvss": null,
                    "informational": "unmaintained",
                    "references": [],
                    "source": null,
                    "url": "https://github.com/pyfisch/cbor",
                    "withdrawn": null,
                    "license": "CC0-1.0"
                  },
                  "affected": null,
                  "versions": {
                    "patched": [],
                    "unaffected": []
                  }
                }
              ],
              "unsound": [
                {
                  "kind": "unsound",
                  "package": {
                    "name": "atty",
                    "version": "0.2.14",
                    "source": "registry+https://github.com/rust-lang/crates.io-index",
                    "checksum": "d9b39be18770d11421cdb1b9947a45dd3f37e93092cbf377614828a319d5fee8",
                    "dependencies": [
                      {
                        "name": "hermit-abi",
                        "version": "0.1.19",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "libc",
                        "version": "0.2.172",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "winapi",
                        "version": "0.3.9",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      }
                    ],
                    "replace": null
                  },
                  "advisory": {
                    "id": "RUSTSEC-2021-0145",
                    "package": "atty",
                    "title": "Potential unaligned read",
                    "description": "On windows, `atty` dereferences a potentially unaligned pointer.\n\nIn practice however, the pointer won't be unaligned unless a custom global allocator is used.\n\nIn particular, the `System` allocator on windows uses `HeapAlloc`, which guarantees a large enough alignment.\n\n# atty is Unmaintained\n\nA Pull Request with a fix has been provided over a year ago but the maintainer seems to be unreachable.\n\nLast release of `atty` was almost 3 years ago.\n\n## Possible Alternative(s)\n\nThe below list has not been vetted in any way and may or may not contain alternatives;\n\n - [std::io::IsTerminal](https://doc.rust-lang.org/stable/std/io/trait.IsTerminal.html) - Stable since Rust 1.70.0\n - [is-terminal](https://crates.io/crates/is-terminal) - Standalone crate supporting Rust older than 1.70.0",
                    "date": "2021-07-04",
                    "aliases": [
                      "GHSA-g98v-hv3f-hcfr"
                    ],
                    "related": [],
                    "collection": "crates",
                    "categories": [],
                    "keywords": [
                      "unaligned-read"
                    ],
                    "cvss": null,
                    "informational": "unsound",
                    "references": [
                      "https://github.com/softprops/atty/pull/51",
                      "https://github.com/softprops/atty/issues/57"
                    ],
                    "source": null,
                    "url": "https://github.com/softprops/atty/issues/50",
                    "withdrawn": null,
                    "license": "CC0-1.0"
                  },
                  "affected": {
                    "arch": [],
                    "os": [
                      "windows"
                    ],
                    "functions": {}
                  },
                  "versions": {
                    "patched": [],
                    "unaffected": []
                  }
                }
              ]
            }
          },
          "note": "Crate analysis performed with stable toolchain."
        },
        "crate_metadata": {
          "name": "bson",
          "version": "2.15.0",
          "description": "ALLOW: Positive community sentiment",
          "repository": "",
          "keywords": [],
          "categories": [],
          "readme": {
            "raw_markdown": "[](https://docs.rs/bson/latest/bson/all.html \"show sidebar\")\n# Crate bsonCopy item path\n[Settings](https://docs.rs/bson/latest/settings.html)\n[Help](https://docs.rs/bson/latest/help.html)\nSummary[Source](https://docs.rs/bson/latest/src/bson/lib.rs.html#22-350)\nExpand description\nBSON, short for Binary JSON, is a binary-encoded serialization of JSON-like documents. Like JSON, BSON supports the embedding of documents and arrays within other documents and arrays. BSON also contains extensions that allow representation of data types that are not part of the JSON spec. For example, BSON has a datetime type and a binary data type.\n```\n// JSON equivalent\n{\"hello\": \"world\"}\n// BSON encoding\n\\x16\\x00\\x00\\x00          // total document size\n\\x02                // 0x02 = type String\nhello\\x00             // field name\n\\x06\\x00\\x00\\x00world\\x00     // field value\n\\x00                // 0x00 = type EOO ('end of object')\n```\n\nBSON is the primary data representation for [MongoDB](https://www.mongodb.com/), and this crate is used in the [`mongodb`](https://docs.rs/mongodb/latest/mongodb/) driver crate in its API and implementation.\nFor more information about BSON itself, see [bsonspec.org](http://bsonspec.org).\n### [\u00a7](https://docs.rs/bson/latest/bson/#installation)Installation\n#### [\u00a7](https://docs.rs/bson/latest/bson/#requirements)Requirements\n  * Rust 1.64+\n\n\n#### [\u00a7](https://docs.rs/bson/latest/bson/#importing)Importing\nThis crate is available on [crates.io](https://crates.io/crates/bson). To use it in your application, simply add it to your project\u2019s `Cargo.toml`.\n```\n[dependencies]\nbson = \"2.15.0\"\n```\n\nNote that if you are using `bson` through the `mongodb` crate, you do not need to specify it in your `Cargo.toml`, since the `mongodb` crate already re-exports it.\n##### [\u00a7](https://docs.rs/bson/latest/bson/#feature-flags)Feature Flags\nFeature| Description| Default  \n---|---|---  \n`chrono-0_4`| Enable support for v0.4 of the [`chrono`](https://docs.rs/chrono/0.4) crate in the public API.| no  \n`uuid-0_8`| Enable support for v0.8 of the [`uuid`](https://docs.rs/uuid/0.8) crate in the public API.| no  \n`uuid-1`| Enable support for v1.x of the [`uuid`](https://docs.rs/uuid/1.x) crate in the public API.| no  \n`time-0_3`| Enable support for v0.3 of the [`time`](https://docs.rs/time/0.3) crate in the public API.| no  \n`serde_with`| Enable [`serde_with`](https://docs.rs/serde_with/1.x) 1.x integrations for [`DateTime`](https://docs.rs/bson/latest/bson/struct.DateTime.html \"struct bson::DateTime\") and [`Uuid`](https://docs.rs/bson/latest/bson/struct.Uuid.html \"struct bson::Uuid\").| no  \n`serde_with-3`| Enable [`serde_with`](https://docs.rs/serde_with/3.x) 3.x integrations for [`DateTime`](https://docs.rs/bson/latest/bson/struct.DateTime.html \"struct bson::DateTime\") and [`Uuid`](https://docs.rs/bson/latest/bson/struct.Uuid.html \"struct bson::Uuid\").| no  \n`serde_path_to_error`| Enable support for error paths via integration with [`serde_path_to_error`](https://docs.rs/serde_path_to_err/latest). This is an unstable feature and any breaking changes to `serde_path_to_error` may affect usage of it via this feature.| no  \n### [\u00a7](https://docs.rs/bson/latest/bson/#bson-values)BSON values\nMany different types can be represented as a BSON value, including 32-bit and 64-bit signed integers, 64 bit floating point numbers, strings, datetimes, embedded documents, and more. To see a full list of possible BSON values, see the [BSON specification](http://bsonspec.org/spec.html). The various possible BSON values are modeled in this crate by the [`Bson`](https://docs.rs/bson/latest/bson/enum.Bson.html) enum.\n#### [\u00a7](https://docs.rs/bson/latest/bson/#creating-bson-instances)Creating [`Bson`](https://docs.rs/bson/latest/bson/enum.Bson.html) instances\n[`Bson`](https://docs.rs/bson/latest/bson/enum.Bson.html) values can be instantiated directly or via the [`bson!`](https://docs.rs/bson/latest/bson/macro.bson.html) macro:\n```\nuse bson::{bson, Bson};\nlet string = Bson::String(\"hello world\".to_string());\nlet int = Bson::Int32(5);\nlet array = Bson::Array(vec![Bson::Int32(5), Bson::Boolean(false)]);\nlet string: Bson = \"hello world\".into();\nlet int: Bson = 5i32.into();\nlet string = bson!(\"hello world\");\nlet int = bson!(5);\nlet array = bson!([5, false]);\n```\n\n[`bson!`](https://docs.rs/bson/latest/bson/macro.bson.html) has supports both array and object literals, and it automatically converts any values specified to [`Bson`](https://docs.rs/bson/latest/bson/enum.Bson.html), provided they are `Into<Bson>`.\n#### [\u00a7](https://docs.rs/bson/latest/bson/#bson-value-unwrapping)[`Bson`](https://docs.rs/bson/latest/bson/enum.Bson.html) value unwrapping\n[`Bson`](https://docs.rs/bson/latest/bson/enum.Bson.html) has a number of helper methods for accessing the underlying native Rust types. These helpers can be useful in circumstances in which the specific type of a BSON value is known ahead of time.\ne.g.:\n```\nuse bson::{bson, Bson};\nlet value = Bson::Int32(5);\nlet int = value.as_i32(); // Some(5)\nlet bool = value.as_bool(); // None\nlet value = bson!([true]);\nlet array = value.as_array(); // Some(&Vec<Bson>)\n```\n\n### [\u00a7](https://docs.rs/bson/latest/bson/#bson-documents)BSON documents\nBSON documents are ordered maps of UTF-8 encoded strings to BSON values. They are logically similar to JSON objects in that they can contain subdocuments, arrays, and values of several different types. This crate models BSON documents via the [`Document`](https://docs.rs/bson/latest/bson/document/struct.Document.html) struct.\n#### [\u00a7](https://docs.rs/bson/latest/bson/#creating-documents)Creating [`Document`](https://docs.rs/bson/latest/bson/document/struct.Document.html)s\n[`Document`](https://docs.rs/bson/latest/bson/document/struct.Document.html)s can be created directly either from a byte reader containing BSON data or via the `doc!` macro:\n```\nuse bson::{doc, Document};\nuse std::io::Read;\nlet mut bytes = hex::decode(\"0C0000001069000100000000\").unwrap();\nlet doc = Document::from_reader(&mut bytes.as_slice()).unwrap(); // { \"i\": 1 }\nlet doc = doc! {\n  \"hello\": \"world\",\n  \"int\": 5,\n  \"subdoc\": { \"cat\": true },\n};\n```\n\n[`doc!`](https://docs.rs/bson/latest/bson/macro.doc.html) works similarly to [`bson!`](https://docs.rs/bson/latest/bson/macro.bson.html), except that it always returns a [`Document`](https://docs.rs/bson/latest/bson/document/struct.Document.html) rather than a [`Bson`](https://docs.rs/bson/latest/bson/enum.Bson.html).\n#### [\u00a7](https://docs.rs/bson/latest/bson/#document-member-access)[`Document`](https://docs.rs/bson/latest/bson/document/struct.Document.html) member access\n[`Document`](https://docs.rs/bson/latest/bson/document/struct.Document.html) has a number of methods on it to facilitate member access:\n```\nuse bson::doc;\nlet doc = doc! {\n  \"string\": \"string\",\n  \"bool\": true,\n  \"i32\": 5,\n  \"doc\": { \"x\": true },\n};\n// attempt get values as untyped Bson\nlet none = doc.get(\"asdfadsf\"); // None\nlet value = doc.get(\"string\"); // Some(&Bson::String(\"string\"))\n// attempt to get values with explicit typing\nlet string = doc.get_str(\"string\"); // Ok(\"string\")\nlet subdoc = doc.get_document(\"doc\"); // Some(Document({ \"x\": true }))\nlet error = doc.get_i64(\"i32\"); // Err(...)\n```\n\n### [\u00a7](https://docs.rs/bson/latest/bson/#modeling-bson-with-strongly-typed-data-structures)Modeling BSON with strongly typed data structures\nWhile it is possible to work with documents and BSON values directly, it will often introduce a lot of boilerplate for verifying the necessary keys are present and their values are the correct types. [`serde`](https://serde.rs/) provides a powerful way of mapping BSON data into Rust data structures largely automatically, removing the need for all that boilerplate.\ne.g.:\n```\nuse serde::{Deserialize, Serialize};\nuse bson::{bson, Bson};\n#[derive(Serialize, Deserialize)]\nstruct Person {\n  name: String,\n  age: i32,\n  phones: Vec<String>,\n}\n// Some BSON input data as a [`Bson`].\nlet bson_data: Bson = bson!({\n  \"name\": \"John Doe\",\n  \"age\": 43,\n  \"phones\": [\n    \"+44 1234567\",\n    \"+44 2345678\"\n  ]\n});\n// Deserialize the Person struct from the BSON data, automatically\n// verifying that the necessary keys are present and that they are of\n// the correct types.\nlet mut person: Person = bson::from_bson(bson_data).unwrap();\n// Do things just like with any other Rust data structure.\nprintln!(\"Redacting {}'s record.\", person.name);\nperson.name = \"REDACTED\".to_string();\n// Get a serialized version of the input data as a [`Bson`].\nlet redacted_bson = bson::to_bson(&person).unwrap();\n```\n\nAny types that implement [`Serialize`](https://docs.rs/serde/1.0.219/x86_64-unknown-linux-gnu/serde/ser/trait.Serialize.html \"trait serde::ser::Serialize\") and [`Deserialize`](https://docs.rs/serde/1.0.219/x86_64-unknown-linux-gnu/serde/de/trait.Deserialize.html \"trait serde::de::Deserialize\") can be used in this way. Doing so helps separate the \u201cbusiness logic\u201d that operates over the data from the (de)serialization logic that translates the data to/from its serialized form. This can lead to more clear and concise code that is also less error prone.\nWhen serializing values that cannot be represented in BSON, or deserialzing from BSON that does not match the format expected by the type, the default error will only report the specific field that failed. To aid debugging, enabling the `serde_path_to_error` feature will [augment errors](https://docs.rs/bson/latest/bson/de/enum.Error.html#variant.WithPath \"variant bson::de::Error::WithPath\") with the full field path from root object to failing field. This feature does incur a small CPU and memory overhead during (de)serialization and should be enabled with care in performance-sensitive environments.\n### [\u00a7](https://docs.rs/bson/latest/bson/#working-with-datetimes)Working with datetimes\nThe BSON format includes a datetime type, which is modeled in this crate by the [`DateTime`](https://docs.rs/bson/latest/bson/struct.DateTime.html \"struct bson::DateTime\") struct, and the [`Serialize`](https://docs.rs/serde/1.0.219/x86_64-unknown-linux-gnu/serde/ser/trait.Serialize.html \"trait serde::ser::Serialize\") and [`Deserialize`](https://docs.rs/serde/1.0.219/x86_64-unknown-linux-gnu/serde/de/trait.Deserialize.html \"trait serde::de::Deserialize\") implementations for this struct produce and parse BSON datetimes when serializing to or deserializing from BSON. The popular crate [`chrono`](https://docs.rs/bson/latest/bson/docs.rs/chrono) also provides a [`DateTime`](https://docs.rs/bson/latest/bson/struct.DateTime.html \"struct bson::DateTime\") type, but its [`Serialize`](https://docs.rs/serde/1.0.219/x86_64-unknown-linux-gnu/serde/ser/trait.Serialize.html \"trait serde::ser::Serialize\") and [`Deserialize`](https://docs.rs/serde/1.0.219/x86_64-unknown-linux-gnu/serde/de/trait.Deserialize.html \"trait serde::de::Deserialize\") implementations operate on strings instead, so when using it with BSON, the BSON datetime type is not used. To work around this, the `chrono-0_4` feature flag can be enabled. This flag exposes a number of convenient conversions between [`bson::DateTime`](https://docs.rs/bson/latest/bson/struct.DateTime.html \"struct bson::DateTime\") and [`chrono::DateTime`](https://docs.rs/chrono/0.4.41/x86_64-unknown-linux-gnu/chrono/datetime/struct.DateTime.html \"struct chrono::datetime::DateTime\"), including the [`serde_helpers::chrono_datetime_as_bson_datetime`](https://docs.rs/bson/latest/bson/serde_helpers/chrono_datetime_as_bson_datetime/index.html \"mod bson::serde_helpers::chrono_datetime_as_bson_datetime\") serde helper, which can be used to (de)serialize [`chrono::DateTime`](https://docs.rs/chrono/0.4.41/x86_64-unknown-linux-gnu/chrono/datetime/struct.DateTime.html \"struct chrono::datetime::DateTime\")s to/from BSON datetimes, and the `From<chrono::DateTime>` implementation for [`Bson`](https://docs.rs/bson/latest/bson/enum.Bson.html \"enum bson::Bson\"), which allows [`chrono::DateTime`](https://docs.rs/chrono/0.4.41/x86_64-unknown-linux-gnu/chrono/datetime/struct.DateTime.html \"struct chrono::datetime::DateTime\") values to be used in the `doc!` and `bson!` macros.\ne.g.\n```\nuse serde::{Serialize, Deserialize};\nuse bson::doc;\n#[derive(Serialize, Deserialize)]\nstruct Foo {\n  // serializes as a BSON datetime.\n  date_time: bson::DateTime,\n  // serializes as an RFC 3339 / ISO-8601 string.\n  chrono_datetime: chrono::DateTime<chrono::Utc>,\n  // serializes as a BSON datetime.\n  // this requires the \"chrono-0_4\" feature flag\n  #[serde(with = \"bson::serde_helpers::chrono_datetime_as_bson_datetime\")]\n  chrono_as_bson: chrono::DateTime<chrono::Utc>,\n}\n// this automatic conversion also requires the \"chrono-0_4\" feature flag\nlet query = doc! {\n  \"created_at\": chrono::Utc::now(),\n};\n```\n\n### [\u00a7](https://docs.rs/bson/latest/bson/#working-with-uuids)Working with UUIDs\nSee the module level documentation for the [`uuid`](https://docs.rs/bson/latest/bson/uuid/index.html \"mod bson::uuid\") module.\n### [\u00a7](https://docs.rs/bson/latest/bson/#wasm-support)WASM support\nThis crate compiles to the `wasm32-unknown-unknown` target; when doing so, the `js-sys` crate is used for the current timestamp component of `ObjectId` generation.\n### [\u00a7](https://docs.rs/bson/latest/bson/#minimum-supported-rust-version-msrv)Minimum supported Rust version (MSRV)\nThe MSRV for this crate is currently 1.81. This will be rarely be increased, and if it ever is, it will only happen in a minor or major version release.\n## Re-exports[\u00a7](https://docs.rs/bson/latest/bson/#reexports)\n\n`pub use self::de::from_reader_utf8_lossy[](https://docs.rs/bson/latest/bson/de/fn.from_reader_utf8_lossy.html \"fn bson::de::from_reader_utf8_lossy\");`\n\n\n`pub use self::de::from_slice_utf8_lossy[](https://docs.rs/bson/latest/bson/de/fn.from_slice_utf8_lossy.html \"fn bson::de::from_slice_utf8_lossy\");`\n\n## Modules[\u00a7](https://docs.rs/bson/latest/bson/#modules)\n\n[binary](https://docs.rs/bson/latest/bson/binary/index.html \"mod bson::binary\")\n\n\n[datetime](https://docs.rs/bson/latest/bson/datetime/index.html \"mod bson::datetime\")\n    Module containing functionality related to BSON DateTimes. For more information, see the documentation for the [`DateTime`](https://docs.rs/bson/latest/bson/struct.DateTime.html \"struct bson::DateTime\") type.\n\n[de](https://docs.rs/bson/latest/bson/de/index.html \"mod bson::de\")\n    Deserializer\n\n[decimal128](https://docs.rs/bson/latest/bson/decimal128/index.html \"mod bson::decimal128\")\n    [BSON Decimal128](https://github.com/mongodb/specifications/blob/master/source/bson-decimal128/decimal128.rst) data type representation\n\n[document](https://docs.rs/bson/latest/bson/document/index.html \"mod bson::document\")\n    A BSON document represented as an associative HashMap with insertion ordering.\n\n[extjson](https://docs.rs/bson/latest/bson/extjson/index.html \"mod bson::extjson\")\n    Deserialization and serialization of [MongoDB Extended JSON v2](https://www.mongodb.com/docs/manual/reference/mongodb-extended-json/)\n\n[oid](https://docs.rs/bson/latest/bson/oid/index.html \"mod bson::oid\")\n    Module containing functionality related to BSON ObjectIds. For more information, see the documentation for the [`ObjectId`](https://docs.rs/bson/latest/bson/oid/struct.ObjectId.html \"struct bson::oid::ObjectId\") type.\n\n[raw](https://docs.rs/bson/latest/bson/raw/index.html \"mod bson::raw\")\n    An API for interacting with raw BSON bytes.\n\n[ser](https://docs.rs/bson/latest/bson/ser/index.html \"mod bson::ser\")\n    Serializer\n\n[serde_helpers](https://docs.rs/bson/latest/bson/serde_helpers/index.html \"mod bson::serde_helpers\")\n    Collection of helper functions for serializing to and deserializing from BSON using Serde\n\n[spec](https://docs.rs/bson/latest/bson/spec/index.html \"mod bson::spec\")\n    Constants derived from the [BSON Specification Version 1.1](http://bsonspec.org/spec.html).\n\n[uuid](https://docs.rs/bson/latest/bson/uuid/index.html \"mod bson::uuid\")\n    UUID support for BSON.\n## Macros[\u00a7](https://docs.rs/bson/latest/bson/#macros)\n\n[bson](https://docs.rs/bson/latest/bson/macro.bson.html \"macro bson::bson\")\n    Construct a bson::BSON value from a literal.\n\n[doc](https://docs.rs/bson/latest/bson/macro.doc.html \"macro bson::doc\")\n    Construct a bson::Document value.\n\n[rawbson](https://docs.rs/bson/latest/bson/macro.rawbson.html \"macro bson::rawbson\")\n    Construct a [`crate::RawBson`](https://docs.rs/bson/latest/bson/enum.RawBson.html \"enum bson::RawBson\") value from a literal.\n\n[rawdoc](https://docs.rs/bson/latest/bson/macro.rawdoc.html \"macro bson::rawdoc\")\n    Construct a [`crate::RawDocumentBuf`](https://docs.rs/bson/latest/bson/struct.RawDocumentBuf.html \"struct bson::RawDocumentBuf\") value.\n## Structs[\u00a7](https://docs.rs/bson/latest/bson/#structs)\n\n[Binary](https://docs.rs/bson/latest/bson/struct.Binary.html \"struct bson::Binary\")\n    Represents a BSON binary value.\n\n[DateTime](https://docs.rs/bson/latest/bson/struct.DateTime.html \"struct bson::DateTime\")\n    Struct representing a BSON datetime. Note: BSON datetimes have millisecond precision.\n\n[DbPointer](https://docs.rs/bson/latest/bson/struct.DbPointer.html \"struct bson::DbPointer\")\n    Represents a DBPointer. (Deprecated)\n\n[Decimal128](https://docs.rs/bson/latest/bson/struct.Decimal128.html \"struct bson::Decimal128\")\n    Struct representing a BSON Decimal128 type.\n\n[Deserializer](https://docs.rs/bson/latest/bson/struct.Deserializer.html \"struct bson::Deserializer\")\n    Serde Deserializer\n\n[DeserializerOptions](https://docs.rs/bson/latest/bson/struct.DeserializerOptions.html \"struct bson::DeserializerOptions\")\n    Options used to configure a [`Deserializer`](https://docs.rs/bson/latest/bson/struct.Deserializer.html \"struct bson::Deserializer\"). These can also be passed into [`crate::from_bson_with_options`](https://docs.rs/bson/latest/bson/fn.from_bson_with_options.html \"fn bson::from_bson_with_options\") and [`crate::from_document_with_options`](https://docs.rs/bson/latest/bson/fn.from_document_with_options.html \"fn bson::from_document_with_options\").\n\n[Document](https://docs.rs/bson/latest/bson/struct.Document.html \"struct bson::Document\")\n    A BSON document represented as an associative HashMap with insertion ordering.\n\n[JavaScriptCodeWithScope](https://docs.rs/bson/latest/bson/struct.JavaScriptCodeWithScope.html \"struct bson::JavaScriptCodeWithScope\")\n    Represents a BSON code with scope value.\n\n[RawArray](https://docs.rs/bson/latest/bson/struct.RawArray.html \"struct bson::RawArray\")\n    A slice of a BSON document containing a BSON array value (akin to [`std::str`](https://doc.rust-lang.org/nightly/alloc/str/index.html \"mod alloc::str\")). This can be retrieved from a [`RawDocument`](https://docs.rs/bson/latest/bson/struct.RawDocument.html \"struct bson::RawDocument\") via [`RawDocument::get`](https://docs.rs/bson/latest/bson/struct.RawDocument.html#method.get \"method bson::RawDocument::get\").\n\n[RawArrayBuf](https://docs.rs/bson/latest/bson/struct.RawArrayBuf.html \"struct bson::RawArrayBuf\")\n    An owned BSON array value (akin to [`std::path::PathBuf`](https://doc.rust-lang.org/nightly/std/path/struct.PathBuf.html \"struct std::path::PathBuf\")), backed by a buffer of raw BSON bytes. This type can be used to construct owned array values, which can be used to append to [`RawDocumentBuf`](https://docs.rs/bson/latest/bson/struct.RawDocumentBuf.html \"struct bson::RawDocumentBuf\") or as a field in a [`Deserialize`](https://docs.rs/serde/1.0.219/x86_64-unknown-linux-gnu/serde/de/trait.Deserialize.html \"trait serde::de::Deserialize\") struct.\n\n[RawBinaryRef](https://docs.rs/bson/latest/bson/struct.RawBinaryRef.html \"struct bson::RawBinaryRef\")\n    A BSON binary value referencing raw bytes stored elsewhere.\n\n[RawDbPointerRef](https://docs.rs/bson/latest/bson/struct.RawDbPointerRef.html \"struct bson::RawDbPointerRef\")\n    A BSON DB pointer value referencing raw bytes stored elesewhere.\n\n[RawDocument](https://docs.rs/bson/latest/bson/struct.RawDocument.html \"struct bson::RawDocument\")\n    A slice of a BSON document (akin to [`std::str`](https://doc.rust-lang.org/nightly/alloc/str/index.html \"mod alloc::str\")). This can be created from a [`RawDocumentBuf`](https://docs.rs/bson/latest/bson/struct.RawDocumentBuf.html \"struct bson::RawDocumentBuf\") or any type that contains valid BSON data, including static binary literals, [`Vec<u8>`](https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html \"struct alloc::vec::Vec\"), or arrays.\n\n[RawDocumentBuf](https://docs.rs/bson/latest/bson/struct.RawDocumentBuf.html \"struct bson::RawDocumentBuf\")\n    An owned BSON document (akin to [`std::path::PathBuf`](https://doc.rust-lang.org/nightly/std/path/struct.PathBuf.html \"struct std::path::PathBuf\")), backed by a buffer of raw BSON bytes. This can be created from a `Vec<u8>` or a [`crate::Document`](https://docs.rs/bson/latest/bson/struct.Document.html \"struct bson::Document\").\n\n[RawJavaScriptCodeWithScope](https://docs.rs/bson/latest/bson/struct.RawJavaScriptCodeWithScope.html \"struct bson::RawJavaScriptCodeWithScope\")\n    A BSON \u201ccode with scope\u201d value backed by owned raw BSON.\n\n[RawJavaScriptCodeWithScopeRef](https://docs.rs/bson/latest/bson/struct.RawJavaScriptCodeWithScopeRef.html \"struct bson::RawJavaScriptCodeWithScopeRef\")\n    A BSON \u201ccode with scope\u201d value referencing raw bytes stored elsewhere.\n\n[RawRegexRef](https://docs.rs/bson/latest/bson/struct.RawRegexRef.html \"struct bson::RawRegexRef\")\n    A BSON regex referencing raw bytes stored elsewhere.\n\n[Regex](https://docs.rs/bson/latest/bson/struct.Regex.html \"struct bson::Regex\")\n    Represents a BSON regular expression value.\n\n[Serializer](https://docs.rs/bson/latest/bson/struct.Serializer.html \"struct bson::Serializer\")\n    Serde Serializer\n\n[SerializerOptions](https://docs.rs/bson/latest/bson/struct.SerializerOptions.html \"struct bson::SerializerOptions\")\n    Options used to configure a [`Serializer`](https://docs.rs/bson/latest/bson/struct.Serializer.html \"struct bson::Serializer\").\n\n[Timestamp](https://docs.rs/bson/latest/bson/struct.Timestamp.html \"struct bson::Timestamp\")\n    Represents a BSON timestamp value.\n\n[Uuid](https://docs.rs/bson/latest/bson/struct.Uuid.html \"struct bson::Uuid\")\n    A struct modeling a BSON UUID value (i.e. a Binary value with subtype 4).\n## Enums[\u00a7](https://docs.rs/bson/latest/bson/#enums)\n\n[Bson](https://docs.rs/bson/latest/bson/enum.Bson.html \"enum bson::Bson\")\n    Possible BSON value types.\n\n[RawBson](https://docs.rs/bson/latest/bson/enum.RawBson.html \"enum bson::RawBson\")\n    A BSON value backed by owned raw BSON bytes.\n\n[RawBsonRef](https://docs.rs/bson/latest/bson/enum.RawBsonRef.html \"enum bson::RawBsonRef\")\n    A BSON value referencing raw bytes stored elsewhere.\n\n[UuidRepresentation](https://docs.rs/bson/latest/bson/enum.UuidRepresentation.html \"enum bson::UuidRepresentation\")\n    Enum of the possible representations to use when converting between [`Uuid`](https://docs.rs/bson/latest/bson/struct.Uuid.html \"struct bson::Uuid\") and [`Binary`](https://docs.rs/bson/latest/bson/struct.Binary.html \"struct bson::Binary\"). This enum is necessary because the different drivers used to have different ways of encoding UUIDs, with the BSON subtype: 0x03 (UUID old). If a UUID has been serialized with a particular representation, it MUST be deserialized with the same representation.\n## Functions[\u00a7](https://docs.rs/bson/latest/bson/#functions)\n\n[from_bson](https://docs.rs/bson/latest/bson/fn.from_bson.html \"fn bson::from_bson\")\n    Deserialize a `T` from the provided [`Bson`](https://docs.rs/bson/latest/bson/enum.Bson.html \"enum bson::Bson\") value.\n\n[from_bson_with_options](https://docs.rs/bson/latest/bson/fn.from_bson_with_options.html \"fn bson::from_bson_with_options\")\n    Deserialize a `T` from the provided [`Bson`](https://docs.rs/bson/latest/bson/enum.Bson.html \"enum bson::Bson\") value, configuring the underlying deserializer with the provided options.\n\n[from_document](https://docs.rs/bson/latest/bson/fn.from_document.html \"fn bson::from_document\")\n    Deserialize a `T` from the provided [`Document`](https://docs.rs/bson/latest/bson/struct.Document.html \"struct bson::Document\").\n\n[from_document_with_options](https://docs.rs/bson/latest/bson/fn.from_document_with_options.html \"fn bson::from_document_with_options\")\n    Deserialize a `T` from the provided [`Document`](https://docs.rs/bson/latest/bson/struct.Document.html \"struct bson::Document\"), configuring the underlying deserializer with the provided options.\n\n[from_reader](https://docs.rs/bson/latest/bson/fn.from_reader.html \"fn bson::from_reader\")\n    Deserialize an instance of type `T` from an I/O stream of BSON.\n\n[from_slice](https://docs.rs/bson/latest/bson/fn.from_slice.html \"fn bson::from_slice\")\n    Deserialize an instance of type `T` from a slice of BSON bytes.\n\n[to_bson](https://docs.rs/bson/latest/bson/fn.to_bson.html \"fn bson::to_bson\")\n    Encode a `T` Serializable into a [`Bson`](https://docs.rs/bson/latest/bson/enum.Bson.html \"enum bson::Bson\") value.\n\n[to_bson_with_options](https://docs.rs/bson/latest/bson/fn.to_bson_with_options.html \"fn bson::to_bson_with_options\")\n    Encode a `T` into a [`Bson`](https://docs.rs/bson/latest/bson/enum.Bson.html \"enum bson::Bson\") value, configuring the underlying serializer with the provided options.\n\n[to_document](https://docs.rs/bson/latest/bson/fn.to_document.html \"fn bson::to_document\")\n    Encode a `T` Serializable into a BSON [`Document`](https://docs.rs/bson/latest/bson/struct.Document.html \"struct bson::Document\").\n\n[to_document_with_options](https://docs.rs/bson/latest/bson/fn.to_document_with_options.html \"fn bson::to_document_with_options\")\n    Encode a `T` into a [`Document`](https://docs.rs/bson/latest/bson/struct.Document.html \"struct bson::Document\"), configuring the underlying serializer with the provided options.\n\n[to_raw_document_buf](https://docs.rs/bson/latest/bson/fn.to_raw_document_buf.html \"fn bson::to_raw_document_buf\")\n    Serialize the given `T` as a [`RawDocumentBuf`](https://docs.rs/bson/latest/bson/struct.RawDocumentBuf.html \"struct bson::RawDocumentBuf\").\n\n[to_vec](https://docs.rs/bson/latest/bson/fn.to_vec.html \"fn bson::to_vec\")\n    Serialize the given `T` as a BSON byte vector.\n## Type Aliases[\u00a7](https://docs.rs/bson/latest/bson/#types)\n\n[Array](https://docs.rs/bson/latest/bson/type.Array.html \"type bson::Array\")\n    Alias for `Vec<Bson>`.\n",
            "markdown_with_citations": "[](https://docs.rs/bson/latest/bson/all.html \"show sidebar\")\n# Crate bsonCopy item path\nSettings\u27e81\u27e9\nHelp\u27e82\u27e9\nSummarySource\u27e83\u27e9\nExpand description\nBSON, short for Binary JSON, is a binary-encoded serialization of JSON-like documents. Like JSON, BSON supports the embedding of documents and arrays within other documents and arrays. BSON also contains extensions that allow representation of data types that are not part of the JSON spec. For example, BSON has a datetime type and a binary data type.\n```\n// JSON equivalent\n{\"hello\": \"world\"}\n// BSON encoding\n\\x16\\x00\\x00\\x00          // total document size\n\\x02                // 0x02 = type String\nhello\\x00             // field name\n\\x06\\x00\\x00\\x00world\\x00     // field value\n\\x00                // 0x00 = type EOO ('end of object')\n```\n\nBSON is the primary data representation for MongoDB\u27e84\u27e9, and this crate is used in the `mongodb`\u27e85\u27e9 driver crate in its API and implementation.\nFor more information about BSON itself, see bsonspec.org\u27e86\u27e9.\n### \u00a7\u27e87\u27e9Installation\n#### \u00a7\u27e88\u27e9Requirements\n  * Rust 1.64+\n\n\n#### \u00a7\u27e89\u27e9Importing\nThis crate is available on crates.io\u27e810\u27e9. To use it in your application, simply add it to your project\u2019s `Cargo.toml`.\n```\n[dependencies]\nbson = \"2.15.0\"\n```\n\nNote that if you are using `bson` through the `mongodb` crate, you do not need to specify it in your `Cargo.toml`, since the `mongodb` crate already re-exports it.\n##### \u00a7\u27e811\u27e9Feature Flags\nFeature| Description| Default  \n---|---|---  \n`chrono-0_4`| Enable support for v0.4 of the `chrono`\u27e812\u27e9 crate in the public API.| no  \n`uuid-0_8`| Enable support for v0.8 of the `uuid`\u27e813\u27e9 crate in the public API.| no  \n`uuid-1`| Enable support for v1.x of the `uuid`\u27e814\u27e9 crate in the public API.| no  \n`time-0_3`| Enable support for v0.3 of the `time`\u27e815\u27e9 crate in the public API.| no  \n`serde_with`| Enable `serde_with`\u27e816\u27e9 1.x integrations for `DateTime`\u27e817\u27e9 and `Uuid`\u27e818\u27e9.| no  \n`serde_with-3`| Enable `serde_with`\u27e819\u27e9 3.x integrations for `DateTime`\u27e817\u27e9 and `Uuid`\u27e818\u27e9.| no  \n`serde_path_to_error`| Enable support for error paths via integration with `serde_path_to_error`\u27e820\u27e9. This is an unstable feature and any breaking changes to `serde_path_to_error` may affect usage of it via this feature.| no  \n### \u00a7\u27e821\u27e9BSON values\nMany different types can be represented as a BSON value, including 32-bit and 64-bit signed integers, 64 bit floating point numbers, strings, datetimes, embedded documents, and more. To see a full list of possible BSON values, see the BSON specification\u27e822\u27e9. The various possible BSON values are modeled in this crate by the `Bson`\u27e823\u27e9 enum.\n#### \u00a7\u27e824\u27e9Creating `Bson`\u27e823\u27e9 instances\n`Bson`\u27e823\u27e9 values can be instantiated directly or via the `bson!`\u27e825\u27e9 macro:\n```\nuse bson::{bson, Bson};\nlet string = Bson::String(\"hello world\".to_string());\nlet int = Bson::Int32(5);\nlet array = Bson::Array(vec![Bson::Int32(5), Bson::Boolean(false)]);\nlet string: Bson = \"hello world\".into();\nlet int: Bson = 5i32.into();\nlet string = bson!(\"hello world\");\nlet int = bson!(5);\nlet array = bson!([5, false]);\n```\n\n`bson!`\u27e825\u27e9 has supports both array and object literals, and it automatically converts any values specified to `Bson`\u27e823\u27e9, provided they are `Into<Bson>`.\n#### \u00a7\u27e826\u27e9`Bson`\u27e823\u27e9 value unwrapping\n`Bson`\u27e823\u27e9 has a number of helper methods for accessing the underlying native Rust types. These helpers can be useful in circumstances in which the specific type of a BSON value is known ahead of time.\ne.g.:\n```\nuse bson::{bson, Bson};\nlet value = Bson::Int32(5);\nlet int = value.as_i32(); // Some(5)\nlet bool = value.as_bool(); // None\nlet value = bson!([true]);\nlet array = value.as_array(); // Some(&Vec<Bson>)\n```\n\n### \u00a7\u27e827\u27e9BSON documents\nBSON documents are ordered maps of UTF-8 encoded strings to BSON values. They are logically similar to JSON objects in that they can contain subdocuments, arrays, and values of several different types. This crate models BSON documents via the `Document`\u27e828\u27e9 struct.\n#### \u00a7\u27e829\u27e9Creating `Document`\u27e828\u27e9s\n`Document`\u27e828\u27e9s can be created directly either from a byte reader containing BSON data or via the `doc!` macro:\n```\nuse bson::{doc, Document};\nuse std::io::Read;\nlet mut bytes = hex::decode(\"0C0000001069000100000000\").unwrap();\nlet doc = Document::from_reader(&mut bytes.as_slice()).unwrap(); // { \"i\": 1 }\nlet doc = doc! {\n  \"hello\": \"world\",\n  \"int\": 5,\n  \"subdoc\": { \"cat\": true },\n};\n```\n\n`doc!`\u27e830\u27e9 works similarly to `bson!`\u27e825\u27e9, except that it always returns a `Document`\u27e828\u27e9 rather than a `Bson`\u27e823\u27e9.\n#### \u00a7\u27e831\u27e9`Document`\u27e828\u27e9 member access\n`Document`\u27e828\u27e9 has a number of methods on it to facilitate member access:\n```\nuse bson::doc;\nlet doc = doc! {\n  \"string\": \"string\",\n  \"bool\": true,\n  \"i32\": 5,\n  \"doc\": { \"x\": true },\n};\n// attempt get values as untyped Bson\nlet none = doc.get(\"asdfadsf\"); // None\nlet value = doc.get(\"string\"); // Some(&Bson::String(\"string\"))\n// attempt to get values with explicit typing\nlet string = doc.get_str(\"string\"); // Ok(\"string\")\nlet subdoc = doc.get_document(\"doc\"); // Some(Document({ \"x\": true }))\nlet error = doc.get_i64(\"i32\"); // Err(...)\n```\n\n### \u00a7\u27e832\u27e9Modeling BSON with strongly typed data structures\nWhile it is possible to work with documents and BSON values directly, it will often introduce a lot of boilerplate for verifying the necessary keys are present and their values are the correct types. `serde`\u27e833\u27e9 provides a powerful way of mapping BSON data into Rust data structures largely automatically, removing the need for all that boilerplate.\ne.g.:\n```\nuse serde::{Deserialize, Serialize};\nuse bson::{bson, Bson};\n#[derive(Serialize, Deserialize)]\nstruct Person {\n  name: String,\n  age: i32,\n  phones: Vec<String>,\n}\n// Some BSON input data as a [`Bson`].\nlet bson_data: Bson = bson!({\n  \"name\": \"John Doe\",\n  \"age\": 43,\n  \"phones\": [\n    \"+44 1234567\",\n    \"+44 2345678\"\n  ]\n});\n// Deserialize the Person struct from the BSON data, automatically\n// verifying that the necessary keys are present and that they are of\n// the correct types.\nlet mut person: Person = bson::from_bson(bson_data).unwrap();\n// Do things just like with any other Rust data structure.\nprintln!(\"Redacting {}'s record.\", person.name);\nperson.name = \"REDACTED\".to_string();\n// Get a serialized version of the input data as a [`Bson`].\nlet redacted_bson = bson::to_bson(&person).unwrap();\n```\n\nAny types that implement `Serialize`\u27e834\u27e9 and `Deserialize`\u27e835\u27e9 can be used in this way. Doing so helps separate the \u201cbusiness logic\u201d that operates over the data from the (de)serialization logic that translates the data to/from its serialized form. This can lead to more clear and concise code that is also less error prone.\nWhen serializing values that cannot be represented in BSON, or deserialzing from BSON that does not match the format expected by the type, the default error will only report the specific field that failed. To aid debugging, enabling the `serde_path_to_error` feature will augment errors\u27e836\u27e9 with the full field path from root object to failing field. This feature does incur a small CPU and memory overhead during (de)serialization and should be enabled with care in performance-sensitive environments.\n### \u00a7\u27e837\u27e9Working with datetimes\nThe BSON format includes a datetime type, which is modeled in this crate by the `DateTime`\u27e817\u27e9 struct, and the `Serialize`\u27e834\u27e9 and `Deserialize`\u27e835\u27e9 implementations for this struct produce and parse BSON datetimes when serializing to or deserializing from BSON. The popular crate `chrono`\u27e838\u27e9 also provides a `DateTime`\u27e817\u27e9 type, but its `Serialize`\u27e834\u27e9 and `Deserialize`\u27e835\u27e9 implementations operate on strings instead, so when using it with BSON, the BSON datetime type is not used. To work around this, the `chrono-0_4` feature flag can be enabled. This flag exposes a number of convenient conversions between `bson::DateTime`\u27e817\u27e9 and `chrono::DateTime`\u27e839\u27e9, including the `serde_helpers::chrono_datetime_as_bson_datetime`\u27e840\u27e9 serde helper, which can be used to (de)serialize `chrono::DateTime`\u27e839\u27e9s to/from BSON datetimes, and the `From<chrono::DateTime>` implementation for `Bson`\u27e823\u27e9, which allows `chrono::DateTime`\u27e839\u27e9 values to be used in the `doc!` and `bson!` macros.\ne.g.\n```\nuse serde::{Serialize, Deserialize};\nuse bson::doc;\n#[derive(Serialize, Deserialize)]\nstruct Foo {\n  // serializes as a BSON datetime.\n  date_time: bson::DateTime,\n  // serializes as an RFC 3339 / ISO-8601 string.\n  chrono_datetime: chrono::DateTime<chrono::Utc>,\n  // serializes as a BSON datetime.\n  // this requires the \"chrono-0_4\" feature flag\n  #[serde(with = \"bson::serde_helpers::chrono_datetime_as_bson_datetime\")]\n  chrono_as_bson: chrono::DateTime<chrono::Utc>,\n}\n// this automatic conversion also requires the \"chrono-0_4\" feature flag\nlet query = doc! {\n  \"created_at\": chrono::Utc::now(),\n};\n```\n\n### \u00a7\u27e841\u27e9Working with UUIDs\nSee the module level documentation for the `uuid`\u27e842\u27e9 module.\n### \u00a7\u27e843\u27e9WASM support\nThis crate compiles to the `wasm32-unknown-unknown` target; when doing so, the `js-sys` crate is used for the current timestamp component of `ObjectId` generation.\n### \u00a7\u27e844\u27e9Minimum supported Rust version (MSRV)\nThe MSRV for this crate is currently 1.81. This will be rarely be increased, and if it ever is, it will only happen in a minor or major version release.\n## Re-exports\u00a7\u27e845\u27e9\n\n`pub use self::de::from_reader_utf8_lossy[](https://docs.rs/bson/latest/bson/de/fn.from_reader_utf8_lossy.html \"fn bson::de::from_reader_utf8_lossy\");`\n\n\n`pub use self::de::from_slice_utf8_lossy[](https://docs.rs/bson/latest/bson/de/fn.from_slice_utf8_lossy.html \"fn bson::de::from_slice_utf8_lossy\");`\n\n## Modules\u00a7\u27e846\u27e9\n\nbinary\u27e847\u27e9\n\n\ndatetime\u27e848\u27e9\n    Module containing functionality related to BSON DateTimes. For more information, see the documentation for the `DateTime`\u27e817\u27e9 type.\n\nde\u27e849\u27e9\n    Deserializer\n\ndecimal128\u27e850\u27e9\n    BSON Decimal128\u27e851\u27e9 data type representation\n\ndocument\u27e852\u27e9\n    A BSON document represented as an associative HashMap with insertion ordering.\n\nextjson\u27e853\u27e9\n    Deserialization and serialization of MongoDB Extended JSON v2\u27e854\u27e9\n\noid\u27e855\u27e9\n    Module containing functionality related to BSON ObjectIds. For more information, see the documentation for the `ObjectId`\u27e856\u27e9 type.\n\nraw\u27e857\u27e9\n    An API for interacting with raw BSON bytes.\n\nser\u27e858\u27e9\n    Serializer\n\nserde_helpers\u27e859\u27e9\n    Collection of helper functions for serializing to and deserializing from BSON using Serde\n\nspec\u27e860\u27e9\n    Constants derived from the BSON Specification Version 1.1\u27e822\u27e9.\n\nuuid\u27e842\u27e9\n    UUID support for BSON.\n## Macros\u00a7\u27e861\u27e9\n\nbson\u27e825\u27e9\n    Construct a bson::BSON value from a literal.\n\ndoc\u27e830\u27e9\n    Construct a bson::Document value.\n\nrawbson\u27e862\u27e9\n    Construct a `crate::RawBson`\u27e863\u27e9 value from a literal.\n\nrawdoc\u27e864\u27e9\n    Construct a `crate::RawDocumentBuf`\u27e865\u27e9 value.\n## Structs\u00a7\u27e866\u27e9\n\nBinary\u27e867\u27e9\n    Represents a BSON binary value.\n\nDateTime\u27e817\u27e9\n    Struct representing a BSON datetime. Note: BSON datetimes have millisecond precision.\n\nDbPointer\u27e868\u27e9\n    Represents a DBPointer. (Deprecated)\n\nDecimal128\u27e869\u27e9\n    Struct representing a BSON Decimal128 type.\n\nDeserializer\u27e870\u27e9\n    Serde Deserializer\n\nDeserializerOptions\u27e871\u27e9\n    Options used to configure a `Deserializer`\u27e870\u27e9. These can also be passed into `crate::from_bson_with_options`\u27e872\u27e9 and `crate::from_document_with_options`\u27e873\u27e9.\n\nDocument\u27e874\u27e9\n    A BSON document represented as an associative HashMap with insertion ordering.\n\nJavaScriptCodeWithScope\u27e875\u27e9\n    Represents a BSON code with scope value.\n\nRawArray\u27e876\u27e9\n    A slice of a BSON document containing a BSON array value (akin to `std::str`\u27e877\u27e9). This can be retrieved from a `RawDocument`\u27e878\u27e9 via `RawDocument::get`\u27e879\u27e9.\n\nRawArrayBuf\u27e880\u27e9\n    An owned BSON array value (akin to `std::path::PathBuf`\u27e881\u27e9), backed by a buffer of raw BSON bytes. This type can be used to construct owned array values, which can be used to append to `RawDocumentBuf`\u27e865\u27e9 or as a field in a `Deserialize`\u27e835\u27e9 struct.\n\nRawBinaryRef\u27e882\u27e9\n    A BSON binary value referencing raw bytes stored elsewhere.\n\nRawDbPointerRef\u27e883\u27e9\n    A BSON DB pointer value referencing raw bytes stored elesewhere.\n\nRawDocument\u27e878\u27e9\n    A slice of a BSON document (akin to `std::str`\u27e877\u27e9). This can be created from a `RawDocumentBuf`\u27e865\u27e9 or any type that contains valid BSON data, including static binary literals, `Vec<u8>`\u27e884\u27e9, or arrays.\n\nRawDocumentBuf\u27e865\u27e9\n    An owned BSON document (akin to `std::path::PathBuf`\u27e881\u27e9), backed by a buffer of raw BSON bytes. This can be created from a `Vec<u8>` or a `crate::Document`\u27e874\u27e9.\n\nRawJavaScriptCodeWithScope\u27e885\u27e9\n    A BSON \u201ccode with scope\u201d value backed by owned raw BSON.\n\nRawJavaScriptCodeWithScopeRef\u27e886\u27e9\n    A BSON \u201ccode with scope\u201d value referencing raw bytes stored elsewhere.\n\nRawRegexRef\u27e887\u27e9\n    A BSON regex referencing raw bytes stored elsewhere.\n\nRegex\u27e888\u27e9\n    Represents a BSON regular expression value.\n\nSerializer\u27e889\u27e9\n    Serde Serializer\n\nSerializerOptions\u27e890\u27e9\n    Options used to configure a `Serializer`\u27e889\u27e9.\n\nTimestamp\u27e891\u27e9\n    Represents a BSON timestamp value.\n\nUuid\u27e818\u27e9\n    A struct modeling a BSON UUID value (i.e. a Binary value with subtype 4).\n## Enums\u00a7\u27e892\u27e9\n\nBson\u27e823\u27e9\n    Possible BSON value types.\n\nRawBson\u27e863\u27e9\n    A BSON value backed by owned raw BSON bytes.\n\nRawBsonRef\u27e893\u27e9\n    A BSON value referencing raw bytes stored elsewhere.\n\nUuidRepresentation\u27e894\u27e9\n    Enum of the possible representations to use when converting between `Uuid`\u27e818\u27e9 and `Binary`\u27e867\u27e9. This enum is necessary because the different drivers used to have different ways of encoding UUIDs, with the BSON subtype: 0x03 (UUID old). If a UUID has been serialized with a particular representation, it MUST be deserialized with the same representation.\n## Functions\u00a7\u27e895\u27e9\n\nfrom_bson\u27e896\u27e9\n    Deserialize a `T` from the provided `Bson`\u27e823\u27e9 value.\n\nfrom_bson_with_options\u27e872\u27e9\n    Deserialize a `T` from the provided `Bson`\u27e823\u27e9 value, configuring the underlying deserializer with the provided options.\n\nfrom_document\u27e897\u27e9\n    Deserialize a `T` from the provided `Document`\u27e874\u27e9.\n\nfrom_document_with_options\u27e873\u27e9\n    Deserialize a `T` from the provided `Document`\u27e874\u27e9, configuring the underlying deserializer with the provided options.\n\nfrom_reader\u27e898\u27e9\n    Deserialize an instance of type `T` from an I/O stream of BSON.\n\nfrom_slice\u27e899\u27e9\n    Deserialize an instance of type `T` from a slice of BSON bytes.\n\nto_bson\u27e8100\u27e9\n    Encode a `T` Serializable into a `Bson`\u27e823\u27e9 value.\n\nto_bson_with_options\u27e8101\u27e9\n    Encode a `T` into a `Bson`\u27e823\u27e9 value, configuring the underlying serializer with the provided options.\n\nto_document\u27e8102\u27e9\n    Encode a `T` Serializable into a BSON `Document`\u27e874\u27e9.\n\nto_document_with_options\u27e8103\u27e9\n    Encode a `T` into a `Document`\u27e874\u27e9, configuring the underlying serializer with the provided options.\n\nto_raw_document_buf\u27e8104\u27e9\n    Serialize the given `T` as a `RawDocumentBuf`\u27e865\u27e9.\n\nto_vec\u27e8105\u27e9\n    Serialize the given `T` as a BSON byte vector.\n## Type Aliases\u00a7\u27e8106\u27e9\n\nArray\u27e8107\u27e9\n    Alias for `Vec<Bson>`.\n",
            "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://docs.rs/bson/latest/settings.html: Settings\n\u27e82\u27e9 https://docs.rs/bson/latest/help.html: Help\n\u27e83\u27e9 https://docs.rs/bson/latest/src/bson/lib.rs.html#22-350: Source\n\u27e84\u27e9 https://www.mongodb.com/: MongoDB\n\u27e85\u27e9 https://docs.rs/mongodb/latest/mongodb/: `mongodb`\n\u27e86\u27e9 http://bsonspec.org: bsonspec.org\n\u27e87\u27e9 https://docs.rs/bson/latest/bson/#installation: \u00a7\n\u27e88\u27e9 https://docs.rs/bson/latest/bson/#requirements: \u00a7\n\u27e89\u27e9 https://docs.rs/bson/latest/bson/#importing: \u00a7\n\u27e810\u27e9 https://crates.io/crates/bson: crates.io\n\u27e811\u27e9 https://docs.rs/bson/latest/bson/#feature-flags: \u00a7\n\u27e812\u27e9 https://docs.rs/chrono/0.4: `chrono`\n\u27e813\u27e9 https://docs.rs/uuid/0.8: `uuid`\n\u27e814\u27e9 https://docs.rs/uuid/1.x: `uuid`\n\u27e815\u27e9 https://docs.rs/time/0.3: `time`\n\u27e816\u27e9 https://docs.rs/serde_with/1.x: `serde_with`\n\u27e817\u27e9 https://docs.rs/bson/latest/bson/struct.DateTime.html: struct bson::DateTime - `DateTime`\n\u27e818\u27e9 https://docs.rs/bson/latest/bson/struct.Uuid.html: struct bson::Uuid - `Uuid`\n\u27e819\u27e9 https://docs.rs/serde_with/3.x: `serde_with`\n\u27e820\u27e9 https://docs.rs/serde_path_to_err/latest: `serde_path_to_error`\n\u27e821\u27e9 https://docs.rs/bson/latest/bson/#bson-values: \u00a7\n\u27e822\u27e9 http://bsonspec.org/spec.html: BSON specification\n\u27e823\u27e9 https://docs.rs/bson/latest/bson/enum.Bson.html: `Bson`\n\u27e824\u27e9 https://docs.rs/bson/latest/bson/#creating-bson-instances: \u00a7\n\u27e825\u27e9 https://docs.rs/bson/latest/bson/macro.bson.html: `bson!`\n\u27e826\u27e9 https://docs.rs/bson/latest/bson/#bson-value-unwrapping: \u00a7\n\u27e827\u27e9 https://docs.rs/bson/latest/bson/#bson-documents: \u00a7\n\u27e828\u27e9 https://docs.rs/bson/latest/bson/document/struct.Document.html: `Document`\n\u27e829\u27e9 https://docs.rs/bson/latest/bson/#creating-documents: \u00a7\n\u27e830\u27e9 https://docs.rs/bson/latest/bson/macro.doc.html: `doc!`\n\u27e831\u27e9 https://docs.rs/bson/latest/bson/#document-member-access: \u00a7\n\u27e832\u27e9 https://docs.rs/bson/latest/bson/#modeling-bson-with-strongly-typed-data-structures: \u00a7\n\u27e833\u27e9 https://serde.rs/: `serde`\n\u27e834\u27e9 https://docs.rs/serde/1.0.219/x86_64-unknown-linux-gnu/serde/ser/trait.Serialize.html: trait serde::ser::Serialize - `Serialize`\n\u27e835\u27e9 https://docs.rs/serde/1.0.219/x86_64-unknown-linux-gnu/serde/de/trait.Deserialize.html: trait serde::de::Deserialize - `Deserialize`\n\u27e836\u27e9 https://docs.rs/bson/latest/bson/de/enum.Error.html#variant.WithPath: variant bson::de::Error::WithPath - augment errors\n\u27e837\u27e9 https://docs.rs/bson/latest/bson/#working-with-datetimes: \u00a7\n\u27e838\u27e9 https://docs.rs/bson/latest/bson/docs.rs/chrono: `chrono`\n\u27e839\u27e9 https://docs.rs/chrono/0.4.41/x86_64-unknown-linux-gnu/chrono/datetime/struct.DateTime.html: struct chrono::datetime::DateTime - `chrono::DateTime`\n\u27e840\u27e9 https://docs.rs/bson/latest/bson/serde_helpers/chrono_datetime_as_bson_datetime/index.html: mod bson::serde_helpers::chrono_datetime_as_bson_datetime - `serde_helpers::chrono_datetime_as_bson_datetime`\n\u27e841\u27e9 https://docs.rs/bson/latest/bson/#working-with-uuids: \u00a7\n\u27e842\u27e9 https://docs.rs/bson/latest/bson/uuid/index.html: mod bson::uuid - `uuid`\n\u27e843\u27e9 https://docs.rs/bson/latest/bson/#wasm-support: \u00a7\n\u27e844\u27e9 https://docs.rs/bson/latest/bson/#minimum-supported-rust-version-msrv: \u00a7\n\u27e845\u27e9 https://docs.rs/bson/latest/bson/#reexports: \u00a7\n\u27e846\u27e9 https://docs.rs/bson/latest/bson/#modules: \u00a7\n\u27e847\u27e9 https://docs.rs/bson/latest/bson/binary/index.html: mod bson::binary - binary\n\u27e848\u27e9 https://docs.rs/bson/latest/bson/datetime/index.html: mod bson::datetime - datetime\n\u27e849\u27e9 https://docs.rs/bson/latest/bson/de/index.html: mod bson::de - de\n\u27e850\u27e9 https://docs.rs/bson/latest/bson/decimal128/index.html: mod bson::decimal128 - decimal128\n\u27e851\u27e9 https://github.com/mongodb/specifications/blob/master/source/bson-decimal128/decimal128.rst: BSON Decimal128\n\u27e852\u27e9 https://docs.rs/bson/latest/bson/document/index.html: mod bson::document - document\n\u27e853\u27e9 https://docs.rs/bson/latest/bson/extjson/index.html: mod bson::extjson - extjson\n\u27e854\u27e9 https://www.mongodb.com/docs/manual/reference/mongodb-extended-json/: MongoDB Extended JSON v2\n\u27e855\u27e9 https://docs.rs/bson/latest/bson/oid/index.html: mod bson::oid - oid\n\u27e856\u27e9 https://docs.rs/bson/latest/bson/oid/struct.ObjectId.html: struct bson::oid::ObjectId - `ObjectId`\n\u27e857\u27e9 https://docs.rs/bson/latest/bson/raw/index.html: mod bson::raw - raw\n\u27e858\u27e9 https://docs.rs/bson/latest/bson/ser/index.html: mod bson::ser - ser\n\u27e859\u27e9 https://docs.rs/bson/latest/bson/serde_helpers/index.html: mod bson::serde_helpers - serde_helpers\n\u27e860\u27e9 https://docs.rs/bson/latest/bson/spec/index.html: mod bson::spec - spec\n\u27e861\u27e9 https://docs.rs/bson/latest/bson/#macros: \u00a7\n\u27e862\u27e9 https://docs.rs/bson/latest/bson/macro.rawbson.html: macro bson::rawbson - rawbson\n\u27e863\u27e9 https://docs.rs/bson/latest/bson/enum.RawBson.html: enum bson::RawBson - `crate::RawBson`\n\u27e864\u27e9 https://docs.rs/bson/latest/bson/macro.rawdoc.html: macro bson::rawdoc - rawdoc\n\u27e865\u27e9 https://docs.rs/bson/latest/bson/struct.RawDocumentBuf.html: struct bson::RawDocumentBuf - `crate::RawDocumentBuf`\n\u27e866\u27e9 https://docs.rs/bson/latest/bson/#structs: \u00a7\n\u27e867\u27e9 https://docs.rs/bson/latest/bson/struct.Binary.html: struct bson::Binary - Binary\n\u27e868\u27e9 https://docs.rs/bson/latest/bson/struct.DbPointer.html: struct bson::DbPointer - DbPointer\n\u27e869\u27e9 https://docs.rs/bson/latest/bson/struct.Decimal128.html: struct bson::Decimal128 - Decimal128\n\u27e870\u27e9 https://docs.rs/bson/latest/bson/struct.Deserializer.html: struct bson::Deserializer - Deserializer\n\u27e871\u27e9 https://docs.rs/bson/latest/bson/struct.DeserializerOptions.html: struct bson::DeserializerOptions - DeserializerOptions\n\u27e872\u27e9 https://docs.rs/bson/latest/bson/fn.from_bson_with_options.html: fn bson::from_bson_with_options - `crate::from_bson_with_options`\n\u27e873\u27e9 https://docs.rs/bson/latest/bson/fn.from_document_with_options.html: fn bson::from_document_with_options - `crate::from_document_with_options`\n\u27e874\u27e9 https://docs.rs/bson/latest/bson/struct.Document.html: struct bson::Document - Document\n\u27e875\u27e9 https://docs.rs/bson/latest/bson/struct.JavaScriptCodeWithScope.html: struct bson::JavaScriptCodeWithScope - JavaScriptCodeWithScope\n\u27e876\u27e9 https://docs.rs/bson/latest/bson/struct.RawArray.html: struct bson::RawArray - RawArray\n\u27e877\u27e9 https://doc.rust-lang.org/nightly/alloc/str/index.html: mod alloc::str - `std::str`\n\u27e878\u27e9 https://docs.rs/bson/latest/bson/struct.RawDocument.html: struct bson::RawDocument - `RawDocument`\n\u27e879\u27e9 https://docs.rs/bson/latest/bson/struct.RawDocument.html#method.get: method bson::RawDocument::get - `RawDocument::get`\n\u27e880\u27e9 https://docs.rs/bson/latest/bson/struct.RawArrayBuf.html: struct bson::RawArrayBuf - RawArrayBuf\n\u27e881\u27e9 https://doc.rust-lang.org/nightly/std/path/struct.PathBuf.html: struct std::path::PathBuf - `std::path::PathBuf`\n\u27e882\u27e9 https://docs.rs/bson/latest/bson/struct.RawBinaryRef.html: struct bson::RawBinaryRef - RawBinaryRef\n\u27e883\u27e9 https://docs.rs/bson/latest/bson/struct.RawDbPointerRef.html: struct bson::RawDbPointerRef - RawDbPointerRef\n\u27e884\u27e9 https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html: struct alloc::vec::Vec - `Vec<u8>`\n\u27e885\u27e9 https://docs.rs/bson/latest/bson/struct.RawJavaScriptCodeWithScope.html: struct bson::RawJavaScriptCodeWithScope - RawJavaScriptCodeWithScope\n\u27e886\u27e9 https://docs.rs/bson/latest/bson/struct.RawJavaScriptCodeWithScopeRef.html: struct bson::RawJavaScriptCodeWithScopeRef - RawJavaScriptCodeWithScopeRef\n\u27e887\u27e9 https://docs.rs/bson/latest/bson/struct.RawRegexRef.html: struct bson::RawRegexRef - RawRegexRef\n\u27e888\u27e9 https://docs.rs/bson/latest/bson/struct.Regex.html: struct bson::Regex - Regex\n\u27e889\u27e9 https://docs.rs/bson/latest/bson/struct.Serializer.html: struct bson::Serializer - Serializer\n\u27e890\u27e9 https://docs.rs/bson/latest/bson/struct.SerializerOptions.html: struct bson::SerializerOptions - SerializerOptions\n\u27e891\u27e9 https://docs.rs/bson/latest/bson/struct.Timestamp.html: struct bson::Timestamp - Timestamp\n\u27e892\u27e9 https://docs.rs/bson/latest/bson/#enums: \u00a7\n\u27e893\u27e9 https://docs.rs/bson/latest/bson/enum.RawBsonRef.html: enum bson::RawBsonRef - RawBsonRef\n\u27e894\u27e9 https://docs.rs/bson/latest/bson/enum.UuidRepresentation.html: enum bson::UuidRepresentation - UuidRepresentation\n\u27e895\u27e9 https://docs.rs/bson/latest/bson/#functions: \u00a7\n\u27e896\u27e9 https://docs.rs/bson/latest/bson/fn.from_bson.html: fn bson::from_bson - from_bson\n\u27e897\u27e9 https://docs.rs/bson/latest/bson/fn.from_document.html: fn bson::from_document - from_document\n\u27e898\u27e9 https://docs.rs/bson/latest/bson/fn.from_reader.html: fn bson::from_reader - from_reader\n\u27e899\u27e9 https://docs.rs/bson/latest/bson/fn.from_slice.html: fn bson::from_slice - from_slice\n\u27e8100\u27e9 https://docs.rs/bson/latest/bson/fn.to_bson.html: fn bson::to_bson - to_bson\n\u27e8101\u27e9 https://docs.rs/bson/latest/bson/fn.to_bson_with_options.html: fn bson::to_bson_with_options - to_bson_with_options\n\u27e8102\u27e9 https://docs.rs/bson/latest/bson/fn.to_document.html: fn bson::to_document - to_document\n\u27e8103\u27e9 https://docs.rs/bson/latest/bson/fn.to_document_with_options.html: fn bson::to_document_with_options - to_document_with_options\n\u27e8104\u27e9 https://docs.rs/bson/latest/bson/fn.to_raw_document_buf.html: fn bson::to_raw_document_buf - to_raw_document_buf\n\u27e8105\u27e9 https://docs.rs/bson/latest/bson/fn.to_vec.html: fn bson::to_vec - to_vec\n\u27e8106\u27e9 https://docs.rs/bson/latest/bson/#types: \u00a7\n\u27e8107\u27e9 https://docs.rs/bson/latest/bson/type.Array.html: type bson::Array - Array\n",
            "fit_markdown": "",
            "fit_html": ""
          },
          "downloads": 0,
          "github_stars": 0,
          "dependencies": [],
          "features": {},
          "code_snippets": [],
          "readme_sections": {},
          "librs_downloads": null,
          "source": "crates.io",
          "enhanced_scraping": {},
          "enhanced_features": [],
          "enhanced_dependencies": []
        },
        "enriched_crate": {
          "name": "bson",
          "version": "2.15.0",
          "description": "ALLOW: Positive community sentiment",
          "repository": "",
          "keywords": [],
          "categories": [],
          "readme": {
            "raw_markdown": "[](https://docs.rs/bson/latest/bson/all.html \"show sidebar\")\n# Crate bsonCopy item path\n[Settings](https://docs.rs/bson/latest/settings.html)\n[Help](https://docs.rs/bson/latest/help.html)\nSummary[Source](https://docs.rs/bson/latest/src/bson/lib.rs.html#22-350)\nExpand description\nBSON, short for Binary JSON, is a binary-encoded serialization of JSON-like documents. Like JSON, BSON supports the embedding of documents and arrays within other documents and arrays. BSON also contains extensions that allow representation of data types that are not part of the JSON spec. For example, BSON has a datetime type and a binary data type.\n```\n// JSON equivalent\n{\"hello\": \"world\"}\n// BSON encoding\n\\x16\\x00\\x00\\x00          // total document size\n\\x02                // 0x02 = type String\nhello\\x00             // field name\n\\x06\\x00\\x00\\x00world\\x00     // field value\n\\x00                // 0x00 = type EOO ('end of object')\n```\n\nBSON is the primary data representation for [MongoDB](https://www.mongodb.com/), and this crate is used in the [`mongodb`](https://docs.rs/mongodb/latest/mongodb/) driver crate in its API and implementation.\nFor more information about BSON itself, see [bsonspec.org](http://bsonspec.org).\n### [\u00a7](https://docs.rs/bson/latest/bson/#installation)Installation\n#### [\u00a7](https://docs.rs/bson/latest/bson/#requirements)Requirements\n  * Rust 1.64+\n\n\n#### [\u00a7](https://docs.rs/bson/latest/bson/#importing)Importing\nThis crate is available on [crates.io](https://crates.io/crates/bson). To use it in your application, simply add it to your project\u2019s `Cargo.toml`.\n```\n[dependencies]\nbson = \"2.15.0\"\n```\n\nNote that if you are using `bson` through the `mongodb` crate, you do not need to specify it in your `Cargo.toml`, since the `mongodb` crate already re-exports it.\n##### [\u00a7](https://docs.rs/bson/latest/bson/#feature-flags)Feature Flags\nFeature| Description| Default  \n---|---|---  \n`chrono-0_4`| Enable support for v0.4 of the [`chrono`](https://docs.rs/chrono/0.4) crate in the public API.| no  \n`uuid-0_8`| Enable support for v0.8 of the [`uuid`](https://docs.rs/uuid/0.8) crate in the public API.| no  \n`uuid-1`| Enable support for v1.x of the [`uuid`](https://docs.rs/uuid/1.x) crate in the public API.| no  \n`time-0_3`| Enable support for v0.3 of the [`time`](https://docs.rs/time/0.3) crate in the public API.| no  \n`serde_with`| Enable [`serde_with`](https://docs.rs/serde_with/1.x) 1.x integrations for [`DateTime`](https://docs.rs/bson/latest/bson/struct.DateTime.html \"struct bson::DateTime\") and [`Uuid`](https://docs.rs/bson/latest/bson/struct.Uuid.html \"struct bson::Uuid\").| no  \n`serde_with-3`| Enable [`serde_with`](https://docs.rs/serde_with/3.x) 3.x integrations for [`DateTime`](https://docs.rs/bson/latest/bson/struct.DateTime.html \"struct bson::DateTime\") and [`Uuid`](https://docs.rs/bson/latest/bson/struct.Uuid.html \"struct bson::Uuid\").| no  \n`serde_path_to_error`| Enable support for error paths via integration with [`serde_path_to_error`](https://docs.rs/serde_path_to_err/latest). This is an unstable feature and any breaking changes to `serde_path_to_error` may affect usage of it via this feature.| no  \n### [\u00a7](https://docs.rs/bson/latest/bson/#bson-values)BSON values\nMany different types can be represented as a BSON value, including 32-bit and 64-bit signed integers, 64 bit floating point numbers, strings, datetimes, embedded documents, and more. To see a full list of possible BSON values, see the [BSON specification](http://bsonspec.org/spec.html). The various possible BSON values are modeled in this crate by the [`Bson`](https://docs.rs/bson/latest/bson/enum.Bson.html) enum.\n#### [\u00a7](https://docs.rs/bson/latest/bson/#creating-bson-instances)Creating [`Bson`](https://docs.rs/bson/latest/bson/enum.Bson.html) instances\n[`Bson`](https://docs.rs/bson/latest/bson/enum.Bson.html) values can be instantiated directly or via the [`bson!`](https://docs.rs/bson/latest/bson/macro.bson.html) macro:\n```\nuse bson::{bson, Bson};\nlet string = Bson::String(\"hello world\".to_string());\nlet int = Bson::Int32(5);\nlet array = Bson::Array(vec![Bson::Int32(5), Bson::Boolean(false)]);\nlet string: Bson = \"hello world\".into();\nlet int: Bson = 5i32.into();\nlet string = bson!(\"hello world\");\nlet int = bson!(5);\nlet array = bson!([5, false]);\n```\n\n[`bson!`](https://docs.rs/bson/latest/bson/macro.bson.html) has supports both array and object literals, and it automatically converts any values specified to [`Bson`](https://docs.rs/bson/latest/bson/enum.Bson.html), provided they are `Into<Bson>`.\n#### [\u00a7](https://docs.rs/bson/latest/bson/#bson-value-unwrapping)[`Bson`](https://docs.rs/bson/latest/bson/enum.Bson.html) value unwrapping\n[`Bson`](https://docs.rs/bson/latest/bson/enum.Bson.html) has a number of helper methods for accessing the underlying native Rust types. These helpers can be useful in circumstances in which the specific type of a BSON value is known ahead of time.\ne.g.:\n```\nuse bson::{bson, Bson};\nlet value = Bson::Int32(5);\nlet int = value.as_i32(); // Some(5)\nlet bool = value.as_bool(); // None\nlet value = bson!([true]);\nlet array = value.as_array(); // Some(&Vec<Bson>)\n```\n\n### [\u00a7](https://docs.rs/bson/latest/bson/#bson-documents)BSON documents\nBSON documents are ordered maps of UTF-8 encoded strings to BSON values. They are logically similar to JSON objects in that they can contain subdocuments, arrays, and values of several different types. This crate models BSON documents via the [`Document`](https://docs.rs/bson/latest/bson/document/struct.Document.html) struct.\n#### [\u00a7](https://docs.rs/bson/latest/bson/#creating-documents)Creating [`Document`](https://docs.rs/bson/latest/bson/document/struct.Document.html)s\n[`Document`](https://docs.rs/bson/latest/bson/document/struct.Document.html)s can be created directly either from a byte reader containing BSON data or via the `doc!` macro:\n```\nuse bson::{doc, Document};\nuse std::io::Read;\nlet mut bytes = hex::decode(\"0C0000001069000100000000\").unwrap();\nlet doc = Document::from_reader(&mut bytes.as_slice()).unwrap(); // { \"i\": 1 }\nlet doc = doc! {\n  \"hello\": \"world\",\n  \"int\": 5,\n  \"subdoc\": { \"cat\": true },\n};\n```\n\n[`doc!`](https://docs.rs/bson/latest/bson/macro.doc.html) works similarly to [`bson!`](https://docs.rs/bson/latest/bson/macro.bson.html), except that it always returns a [`Document`](https://docs.rs/bson/latest/bson/document/struct.Document.html) rather than a [`Bson`](https://docs.rs/bson/latest/bson/enum.Bson.html).\n#### [\u00a7](https://docs.rs/bson/latest/bson/#document-member-access)[`Document`](https://docs.rs/bson/latest/bson/document/struct.Document.html) member access\n[`Document`](https://docs.rs/bson/latest/bson/document/struct.Document.html) has a number of methods on it to facilitate member access:\n```\nuse bson::doc;\nlet doc = doc! {\n  \"string\": \"string\",\n  \"bool\": true,\n  \"i32\": 5,\n  \"doc\": { \"x\": true },\n};\n// attempt get values as untyped Bson\nlet none = doc.get(\"asdfadsf\"); // None\nlet value = doc.get(\"string\"); // Some(&Bson::String(\"string\"))\n// attempt to get values with explicit typing\nlet string = doc.get_str(\"string\"); // Ok(\"string\")\nlet subdoc = doc.get_document(\"doc\"); // Some(Document({ \"x\": true }))\nlet error = doc.get_i64(\"i32\"); // Err(...)\n```\n\n### [\u00a7](https://docs.rs/bson/latest/bson/#modeling-bson-with-strongly-typed-data-structures)Modeling BSON with strongly typed data structures\nWhile it is possible to work with documents and BSON values directly, it will often introduce a lot of boilerplate for verifying the necessary keys are present and their values are the correct types. [`serde`](https://serde.rs/) provides a powerful way of mapping BSON data into Rust data structures largely automatically, removing the need for all that boilerplate.\ne.g.:\n```\nuse serde::{Deserialize, Serialize};\nuse bson::{bson, Bson};\n#[derive(Serialize, Deserialize)]\nstruct Person {\n  name: String,\n  age: i32,\n  phones: Vec<String>,\n}\n// Some BSON input data as a [`Bson`].\nlet bson_data: Bson = bson!({\n  \"name\": \"John Doe\",\n  \"age\": 43,\n  \"phones\": [\n    \"+44 1234567\",\n    \"+44 2345678\"\n  ]\n});\n// Deserialize the Person struct from the BSON data, automatically\n// verifying that the necessary keys are present and that they are of\n// the correct types.\nlet mut person: Person = bson::from_bson(bson_data).unwrap();\n// Do things just like with any other Rust data structure.\nprintln!(\"Redacting {}'s record.\", person.name);\nperson.name = \"REDACTED\".to_string();\n// Get a serialized version of the input data as a [`Bson`].\nlet redacted_bson = bson::to_bson(&person).unwrap();\n```\n\nAny types that implement [`Serialize`](https://docs.rs/serde/1.0.219/x86_64-unknown-linux-gnu/serde/ser/trait.Serialize.html \"trait serde::ser::Serialize\") and [`Deserialize`](https://docs.rs/serde/1.0.219/x86_64-unknown-linux-gnu/serde/de/trait.Deserialize.html \"trait serde::de::Deserialize\") can be used in this way. Doing so helps separate the \u201cbusiness logic\u201d that operates over the data from the (de)serialization logic that translates the data to/from its serialized form. This can lead to more clear and concise code that is also less error prone.\nWhen serializing values that cannot be represented in BSON, or deserialzing from BSON that does not match the format expected by the type, the default error will only report the specific field that failed. To aid debugging, enabling the `serde_path_to_error` feature will [augment errors](https://docs.rs/bson/latest/bson/de/enum.Error.html#variant.WithPath \"variant bson::de::Error::WithPath\") with the full field path from root object to failing field. This feature does incur a small CPU and memory overhead during (de)serialization and should be enabled with care in performance-sensitive environments.\n### [\u00a7](https://docs.rs/bson/latest/bson/#working-with-datetimes)Working with datetimes\nThe BSON format includes a datetime type, which is modeled in this crate by the [`DateTime`](https://docs.rs/bson/latest/bson/struct.DateTime.html \"struct bson::DateTime\") struct, and the [`Serialize`](https://docs.rs/serde/1.0.219/x86_64-unknown-linux-gnu/serde/ser/trait.Serialize.html \"trait serde::ser::Serialize\") and [`Deserialize`](https://docs.rs/serde/1.0.219/x86_64-unknown-linux-gnu/serde/de/trait.Deserialize.html \"trait serde::de::Deserialize\") implementations for this struct produce and parse BSON datetimes when serializing to or deserializing from BSON. The popular crate [`chrono`](https://docs.rs/bson/latest/bson/docs.rs/chrono) also provides a [`DateTime`](https://docs.rs/bson/latest/bson/struct.DateTime.html \"struct bson::DateTime\") type, but its [`Serialize`](https://docs.rs/serde/1.0.219/x86_64-unknown-linux-gnu/serde/ser/trait.Serialize.html \"trait serde::ser::Serialize\") and [`Deserialize`](https://docs.rs/serde/1.0.219/x86_64-unknown-linux-gnu/serde/de/trait.Deserialize.html \"trait serde::de::Deserialize\") implementations operate on strings instead, so when using it with BSON, the BSON datetime type is not used. To work around this, the `chrono-0_4` feature flag can be enabled. This flag exposes a number of convenient conversions between [`bson::DateTime`](https://docs.rs/bson/latest/bson/struct.DateTime.html \"struct bson::DateTime\") and [`chrono::DateTime`](https://docs.rs/chrono/0.4.41/x86_64-unknown-linux-gnu/chrono/datetime/struct.DateTime.html \"struct chrono::datetime::DateTime\"), including the [`serde_helpers::chrono_datetime_as_bson_datetime`](https://docs.rs/bson/latest/bson/serde_helpers/chrono_datetime_as_bson_datetime/index.html \"mod bson::serde_helpers::chrono_datetime_as_bson_datetime\") serde helper, which can be used to (de)serialize [`chrono::DateTime`](https://docs.rs/chrono/0.4.41/x86_64-unknown-linux-gnu/chrono/datetime/struct.DateTime.html \"struct chrono::datetime::DateTime\")s to/from BSON datetimes, and the `From<chrono::DateTime>` implementation for [`Bson`](https://docs.rs/bson/latest/bson/enum.Bson.html \"enum bson::Bson\"), which allows [`chrono::DateTime`](https://docs.rs/chrono/0.4.41/x86_64-unknown-linux-gnu/chrono/datetime/struct.DateTime.html \"struct chrono::datetime::DateTime\") values to be used in the `doc!` and `bson!` macros.\ne.g.\n```\nuse serde::{Serialize, Deserialize};\nuse bson::doc;\n#[derive(Serialize, Deserialize)]\nstruct Foo {\n  // serializes as a BSON datetime.\n  date_time: bson::DateTime,\n  // serializes as an RFC 3339 / ISO-8601 string.\n  chrono_datetime: chrono::DateTime<chrono::Utc>,\n  // serializes as a BSON datetime.\n  // this requires the \"chrono-0_4\" feature flag\n  #[serde(with = \"bson::serde_helpers::chrono_datetime_as_bson_datetime\")]\n  chrono_as_bson: chrono::DateTime<chrono::Utc>,\n}\n// this automatic conversion also requires the \"chrono-0_4\" feature flag\nlet query = doc! {\n  \"created_at\": chrono::Utc::now(),\n};\n```\n\n### [\u00a7](https://docs.rs/bson/latest/bson/#working-with-uuids)Working with UUIDs\nSee the module level documentation for the [`uuid`](https://docs.rs/bson/latest/bson/uuid/index.html \"mod bson::uuid\") module.\n### [\u00a7](https://docs.rs/bson/latest/bson/#wasm-support)WASM support\nThis crate compiles to the `wasm32-unknown-unknown` target; when doing so, the `js-sys` crate is used for the current timestamp component of `ObjectId` generation.\n### [\u00a7](https://docs.rs/bson/latest/bson/#minimum-supported-rust-version-msrv)Minimum supported Rust version (MSRV)\nThe MSRV for this crate is currently 1.81. This will be rarely be increased, and if it ever is, it will only happen in a minor or major version release.\n## Re-exports[\u00a7](https://docs.rs/bson/latest/bson/#reexports)\n\n`pub use self::de::from_reader_utf8_lossy[](https://docs.rs/bson/latest/bson/de/fn.from_reader_utf8_lossy.html \"fn bson::de::from_reader_utf8_lossy\");`\n\n\n`pub use self::de::from_slice_utf8_lossy[](https://docs.rs/bson/latest/bson/de/fn.from_slice_utf8_lossy.html \"fn bson::de::from_slice_utf8_lossy\");`\n\n## Modules[\u00a7](https://docs.rs/bson/latest/bson/#modules)\n\n[binary](https://docs.rs/bson/latest/bson/binary/index.html \"mod bson::binary\")\n\n\n[datetime](https://docs.rs/bson/latest/bson/datetime/index.html \"mod bson::datetime\")\n    Module containing functionality related to BSON DateTimes. For more information, see the documentation for the [`DateTime`](https://docs.rs/bson/latest/bson/struct.DateTime.html \"struct bson::DateTime\") type.\n\n[de](https://docs.rs/bson/latest/bson/de/index.html \"mod bson::de\")\n    Deserializer\n\n[decimal128](https://docs.rs/bson/latest/bson/decimal128/index.html \"mod bson::decimal128\")\n    [BSON Decimal128](https://github.com/mongodb/specifications/blob/master/source/bson-decimal128/decimal128.rst) data type representation\n\n[document](https://docs.rs/bson/latest/bson/document/index.html \"mod bson::document\")\n    A BSON document represented as an associative HashMap with insertion ordering.\n\n[extjson](https://docs.rs/bson/latest/bson/extjson/index.html \"mod bson::extjson\")\n    Deserialization and serialization of [MongoDB Extended JSON v2](https://www.mongodb.com/docs/manual/reference/mongodb-extended-json/)\n\n[oid](https://docs.rs/bson/latest/bson/oid/index.html \"mod bson::oid\")\n    Module containing functionality related to BSON ObjectIds. For more information, see the documentation for the [`ObjectId`](https://docs.rs/bson/latest/bson/oid/struct.ObjectId.html \"struct bson::oid::ObjectId\") type.\n\n[raw](https://docs.rs/bson/latest/bson/raw/index.html \"mod bson::raw\")\n    An API for interacting with raw BSON bytes.\n\n[ser](https://docs.rs/bson/latest/bson/ser/index.html \"mod bson::ser\")\n    Serializer\n\n[serde_helpers](https://docs.rs/bson/latest/bson/serde_helpers/index.html \"mod bson::serde_helpers\")\n    Collection of helper functions for serializing to and deserializing from BSON using Serde\n\n[spec](https://docs.rs/bson/latest/bson/spec/index.html \"mod bson::spec\")\n    Constants derived from the [BSON Specification Version 1.1](http://bsonspec.org/spec.html).\n\n[uuid](https://docs.rs/bson/latest/bson/uuid/index.html \"mod bson::uuid\")\n    UUID support for BSON.\n## Macros[\u00a7](https://docs.rs/bson/latest/bson/#macros)\n\n[bson](https://docs.rs/bson/latest/bson/macro.bson.html \"macro bson::bson\")\n    Construct a bson::BSON value from a literal.\n\n[doc](https://docs.rs/bson/latest/bson/macro.doc.html \"macro bson::doc\")\n    Construct a bson::Document value.\n\n[rawbson](https://docs.rs/bson/latest/bson/macro.rawbson.html \"macro bson::rawbson\")\n    Construct a [`crate::RawBson`](https://docs.rs/bson/latest/bson/enum.RawBson.html \"enum bson::RawBson\") value from a literal.\n\n[rawdoc](https://docs.rs/bson/latest/bson/macro.rawdoc.html \"macro bson::rawdoc\")\n    Construct a [`crate::RawDocumentBuf`](https://docs.rs/bson/latest/bson/struct.RawDocumentBuf.html \"struct bson::RawDocumentBuf\") value.\n## Structs[\u00a7](https://docs.rs/bson/latest/bson/#structs)\n\n[Binary](https://docs.rs/bson/latest/bson/struct.Binary.html \"struct bson::Binary\")\n    Represents a BSON binary value.\n\n[DateTime](https://docs.rs/bson/latest/bson/struct.DateTime.html \"struct bson::DateTime\")\n    Struct representing a BSON datetime. Note: BSON datetimes have millisecond precision.\n\n[DbPointer](https://docs.rs/bson/latest/bson/struct.DbPointer.html \"struct bson::DbPointer\")\n    Represents a DBPointer. (Deprecated)\n\n[Decimal128](https://docs.rs/bson/latest/bson/struct.Decimal128.html \"struct bson::Decimal128\")\n    Struct representing a BSON Decimal128 type.\n\n[Deserializer](https://docs.rs/bson/latest/bson/struct.Deserializer.html \"struct bson::Deserializer\")\n    Serde Deserializer\n\n[DeserializerOptions](https://docs.rs/bson/latest/bson/struct.DeserializerOptions.html \"struct bson::DeserializerOptions\")\n    Options used to configure a [`Deserializer`](https://docs.rs/bson/latest/bson/struct.Deserializer.html \"struct bson::Deserializer\"). These can also be passed into [`crate::from_bson_with_options`](https://docs.rs/bson/latest/bson/fn.from_bson_with_options.html \"fn bson::from_bson_with_options\") and [`crate::from_document_with_options`](https://docs.rs/bson/latest/bson/fn.from_document_with_options.html \"fn bson::from_document_with_options\").\n\n[Document](https://docs.rs/bson/latest/bson/struct.Document.html \"struct bson::Document\")\n    A BSON document represented as an associative HashMap with insertion ordering.\n\n[JavaScriptCodeWithScope](https://docs.rs/bson/latest/bson/struct.JavaScriptCodeWithScope.html \"struct bson::JavaScriptCodeWithScope\")\n    Represents a BSON code with scope value.\n\n[RawArray](https://docs.rs/bson/latest/bson/struct.RawArray.html \"struct bson::RawArray\")\n    A slice of a BSON document containing a BSON array value (akin to [`std::str`](https://doc.rust-lang.org/nightly/alloc/str/index.html \"mod alloc::str\")). This can be retrieved from a [`RawDocument`](https://docs.rs/bson/latest/bson/struct.RawDocument.html \"struct bson::RawDocument\") via [`RawDocument::get`](https://docs.rs/bson/latest/bson/struct.RawDocument.html#method.get \"method bson::RawDocument::get\").\n\n[RawArrayBuf](https://docs.rs/bson/latest/bson/struct.RawArrayBuf.html \"struct bson::RawArrayBuf\")\n    An owned BSON array value (akin to [`std::path::PathBuf`](https://doc.rust-lang.org/nightly/std/path/struct.PathBuf.html \"struct std::path::PathBuf\")), backed by a buffer of raw BSON bytes. This type can be used to construct owned array values, which can be used to append to [`RawDocumentBuf`](https://docs.rs/bson/latest/bson/struct.RawDocumentBuf.html \"struct bson::RawDocumentBuf\") or as a field in a [`Deserialize`](https://docs.rs/serde/1.0.219/x86_64-unknown-linux-gnu/serde/de/trait.Deserialize.html \"trait serde::de::Deserialize\") struct.\n\n[RawBinaryRef](https://docs.rs/bson/latest/bson/struct.RawBinaryRef.html \"struct bson::RawBinaryRef\")\n    A BSON binary value referencing raw bytes stored elsewhere.\n\n[RawDbPointerRef](https://docs.rs/bson/latest/bson/struct.RawDbPointerRef.html \"struct bson::RawDbPointerRef\")\n    A BSON DB pointer value referencing raw bytes stored elesewhere.\n\n[RawDocument](https://docs.rs/bson/latest/bson/struct.RawDocument.html \"struct bson::RawDocument\")\n    A slice of a BSON document (akin to [`std::str`](https://doc.rust-lang.org/nightly/alloc/str/index.html \"mod alloc::str\")). This can be created from a [`RawDocumentBuf`](https://docs.rs/bson/latest/bson/struct.RawDocumentBuf.html \"struct bson::RawDocumentBuf\") or any type that contains valid BSON data, including static binary literals, [`Vec<u8>`](https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html \"struct alloc::vec::Vec\"), or arrays.\n\n[RawDocumentBuf](https://docs.rs/bson/latest/bson/struct.RawDocumentBuf.html \"struct bson::RawDocumentBuf\")\n    An owned BSON document (akin to [`std::path::PathBuf`](https://doc.rust-lang.org/nightly/std/path/struct.PathBuf.html \"struct std::path::PathBuf\")), backed by a buffer of raw BSON bytes. This can be created from a `Vec<u8>` or a [`crate::Document`](https://docs.rs/bson/latest/bson/struct.Document.html \"struct bson::Document\").\n\n[RawJavaScriptCodeWithScope](https://docs.rs/bson/latest/bson/struct.RawJavaScriptCodeWithScope.html \"struct bson::RawJavaScriptCodeWithScope\")\n    A BSON \u201ccode with scope\u201d value backed by owned raw BSON.\n\n[RawJavaScriptCodeWithScopeRef](https://docs.rs/bson/latest/bson/struct.RawJavaScriptCodeWithScopeRef.html \"struct bson::RawJavaScriptCodeWithScopeRef\")\n    A BSON \u201ccode with scope\u201d value referencing raw bytes stored elsewhere.\n\n[RawRegexRef](https://docs.rs/bson/latest/bson/struct.RawRegexRef.html \"struct bson::RawRegexRef\")\n    A BSON regex referencing raw bytes stored elsewhere.\n\n[Regex](https://docs.rs/bson/latest/bson/struct.Regex.html \"struct bson::Regex\")\n    Represents a BSON regular expression value.\n\n[Serializer](https://docs.rs/bson/latest/bson/struct.Serializer.html \"struct bson::Serializer\")\n    Serde Serializer\n\n[SerializerOptions](https://docs.rs/bson/latest/bson/struct.SerializerOptions.html \"struct bson::SerializerOptions\")\n    Options used to configure a [`Serializer`](https://docs.rs/bson/latest/bson/struct.Serializer.html \"struct bson::Serializer\").\n\n[Timestamp](https://docs.rs/bson/latest/bson/struct.Timestamp.html \"struct bson::Timestamp\")\n    Represents a BSON timestamp value.\n\n[Uuid](https://docs.rs/bson/latest/bson/struct.Uuid.html \"struct bson::Uuid\")\n    A struct modeling a BSON UUID value (i.e. a Binary value with subtype 4).\n## Enums[\u00a7](https://docs.rs/bson/latest/bson/#enums)\n\n[Bson](https://docs.rs/bson/latest/bson/enum.Bson.html \"enum bson::Bson\")\n    Possible BSON value types.\n\n[RawBson](https://docs.rs/bson/latest/bson/enum.RawBson.html \"enum bson::RawBson\")\n    A BSON value backed by owned raw BSON bytes.\n\n[RawBsonRef](https://docs.rs/bson/latest/bson/enum.RawBsonRef.html \"enum bson::RawBsonRef\")\n    A BSON value referencing raw bytes stored elsewhere.\n\n[UuidRepresentation](https://docs.rs/bson/latest/bson/enum.UuidRepresentation.html \"enum bson::UuidRepresentation\")\n    Enum of the possible representations to use when converting between [`Uuid`](https://docs.rs/bson/latest/bson/struct.Uuid.html \"struct bson::Uuid\") and [`Binary`](https://docs.rs/bson/latest/bson/struct.Binary.html \"struct bson::Binary\"). This enum is necessary because the different drivers used to have different ways of encoding UUIDs, with the BSON subtype: 0x03 (UUID old). If a UUID has been serialized with a particular representation, it MUST be deserialized with the same representation.\n## Functions[\u00a7](https://docs.rs/bson/latest/bson/#functions)\n\n[from_bson](https://docs.rs/bson/latest/bson/fn.from_bson.html \"fn bson::from_bson\")\n    Deserialize a `T` from the provided [`Bson`](https://docs.rs/bson/latest/bson/enum.Bson.html \"enum bson::Bson\") value.\n\n[from_bson_with_options](https://docs.rs/bson/latest/bson/fn.from_bson_with_options.html \"fn bson::from_bson_with_options\")\n    Deserialize a `T` from the provided [`Bson`](https://docs.rs/bson/latest/bson/enum.Bson.html \"enum bson::Bson\") value, configuring the underlying deserializer with the provided options.\n\n[from_document](https://docs.rs/bson/latest/bson/fn.from_document.html \"fn bson::from_document\")\n    Deserialize a `T` from the provided [`Document`](https://docs.rs/bson/latest/bson/struct.Document.html \"struct bson::Document\").\n\n[from_document_with_options](https://docs.rs/bson/latest/bson/fn.from_document_with_options.html \"fn bson::from_document_with_options\")\n    Deserialize a `T` from the provided [`Document`](https://docs.rs/bson/latest/bson/struct.Document.html \"struct bson::Document\"), configuring the underlying deserializer with the provided options.\n\n[from_reader](https://docs.rs/bson/latest/bson/fn.from_reader.html \"fn bson::from_reader\")\n    Deserialize an instance of type `T` from an I/O stream of BSON.\n\n[from_slice](https://docs.rs/bson/latest/bson/fn.from_slice.html \"fn bson::from_slice\")\n    Deserialize an instance of type `T` from a slice of BSON bytes.\n\n[to_bson](https://docs.rs/bson/latest/bson/fn.to_bson.html \"fn bson::to_bson\")\n    Encode a `T` Serializable into a [`Bson`](https://docs.rs/bson/latest/bson/enum.Bson.html \"enum bson::Bson\") value.\n\n[to_bson_with_options](https://docs.rs/bson/latest/bson/fn.to_bson_with_options.html \"fn bson::to_bson_with_options\")\n    Encode a `T` into a [`Bson`](https://docs.rs/bson/latest/bson/enum.Bson.html \"enum bson::Bson\") value, configuring the underlying serializer with the provided options.\n\n[to_document](https://docs.rs/bson/latest/bson/fn.to_document.html \"fn bson::to_document\")\n    Encode a `T` Serializable into a BSON [`Document`](https://docs.rs/bson/latest/bson/struct.Document.html \"struct bson::Document\").\n\n[to_document_with_options](https://docs.rs/bson/latest/bson/fn.to_document_with_options.html \"fn bson::to_document_with_options\")\n    Encode a `T` into a [`Document`](https://docs.rs/bson/latest/bson/struct.Document.html \"struct bson::Document\"), configuring the underlying serializer with the provided options.\n\n[to_raw_document_buf](https://docs.rs/bson/latest/bson/fn.to_raw_document_buf.html \"fn bson::to_raw_document_buf\")\n    Serialize the given `T` as a [`RawDocumentBuf`](https://docs.rs/bson/latest/bson/struct.RawDocumentBuf.html \"struct bson::RawDocumentBuf\").\n\n[to_vec](https://docs.rs/bson/latest/bson/fn.to_vec.html \"fn bson::to_vec\")\n    Serialize the given `T` as a BSON byte vector.\n## Type Aliases[\u00a7](https://docs.rs/bson/latest/bson/#types)\n\n[Array](https://docs.rs/bson/latest/bson/type.Array.html \"type bson::Array\")\n    Alias for `Vec<Bson>`.\n",
            "markdown_with_citations": "[](https://docs.rs/bson/latest/bson/all.html \"show sidebar\")\n# Crate bsonCopy item path\nSettings\u27e81\u27e9\nHelp\u27e82\u27e9\nSummarySource\u27e83\u27e9\nExpand description\nBSON, short for Binary JSON, is a binary-encoded serialization of JSON-like documents. Like JSON, BSON supports the embedding of documents and arrays within other documents and arrays. BSON also contains extensions that allow representation of data types that are not part of the JSON spec. For example, BSON has a datetime type and a binary data type.\n```\n// JSON equivalent\n{\"hello\": \"world\"}\n// BSON encoding\n\\x16\\x00\\x00\\x00          // total document size\n\\x02                // 0x02 = type String\nhello\\x00             // field name\n\\x06\\x00\\x00\\x00world\\x00     // field value\n\\x00                // 0x00 = type EOO ('end of object')\n```\n\nBSON is the primary data representation for MongoDB\u27e84\u27e9, and this crate is used in the `mongodb`\u27e85\u27e9 driver crate in its API and implementation.\nFor more information about BSON itself, see bsonspec.org\u27e86\u27e9.\n### \u00a7\u27e87\u27e9Installation\n#### \u00a7\u27e88\u27e9Requirements\n  * Rust 1.64+\n\n\n#### \u00a7\u27e89\u27e9Importing\nThis crate is available on crates.io\u27e810\u27e9. To use it in your application, simply add it to your project\u2019s `Cargo.toml`.\n```\n[dependencies]\nbson = \"2.15.0\"\n```\n\nNote that if you are using `bson` through the `mongodb` crate, you do not need to specify it in your `Cargo.toml`, since the `mongodb` crate already re-exports it.\n##### \u00a7\u27e811\u27e9Feature Flags\nFeature| Description| Default  \n---|---|---  \n`chrono-0_4`| Enable support for v0.4 of the `chrono`\u27e812\u27e9 crate in the public API.| no  \n`uuid-0_8`| Enable support for v0.8 of the `uuid`\u27e813\u27e9 crate in the public API.| no  \n`uuid-1`| Enable support for v1.x of the `uuid`\u27e814\u27e9 crate in the public API.| no  \n`time-0_3`| Enable support for v0.3 of the `time`\u27e815\u27e9 crate in the public API.| no  \n`serde_with`| Enable `serde_with`\u27e816\u27e9 1.x integrations for `DateTime`\u27e817\u27e9 and `Uuid`\u27e818\u27e9.| no  \n`serde_with-3`| Enable `serde_with`\u27e819\u27e9 3.x integrations for `DateTime`\u27e817\u27e9 and `Uuid`\u27e818\u27e9.| no  \n`serde_path_to_error`| Enable support for error paths via integration with `serde_path_to_error`\u27e820\u27e9. This is an unstable feature and any breaking changes to `serde_path_to_error` may affect usage of it via this feature.| no  \n### \u00a7\u27e821\u27e9BSON values\nMany different types can be represented as a BSON value, including 32-bit and 64-bit signed integers, 64 bit floating point numbers, strings, datetimes, embedded documents, and more. To see a full list of possible BSON values, see the BSON specification\u27e822\u27e9. The various possible BSON values are modeled in this crate by the `Bson`\u27e823\u27e9 enum.\n#### \u00a7\u27e824\u27e9Creating `Bson`\u27e823\u27e9 instances\n`Bson`\u27e823\u27e9 values can be instantiated directly or via the `bson!`\u27e825\u27e9 macro:\n```\nuse bson::{bson, Bson};\nlet string = Bson::String(\"hello world\".to_string());\nlet int = Bson::Int32(5);\nlet array = Bson::Array(vec![Bson::Int32(5), Bson::Boolean(false)]);\nlet string: Bson = \"hello world\".into();\nlet int: Bson = 5i32.into();\nlet string = bson!(\"hello world\");\nlet int = bson!(5);\nlet array = bson!([5, false]);\n```\n\n`bson!`\u27e825\u27e9 has supports both array and object literals, and it automatically converts any values specified to `Bson`\u27e823\u27e9, provided they are `Into<Bson>`.\n#### \u00a7\u27e826\u27e9`Bson`\u27e823\u27e9 value unwrapping\n`Bson`\u27e823\u27e9 has a number of helper methods for accessing the underlying native Rust types. These helpers can be useful in circumstances in which the specific type of a BSON value is known ahead of time.\ne.g.:\n```\nuse bson::{bson, Bson};\nlet value = Bson::Int32(5);\nlet int = value.as_i32(); // Some(5)\nlet bool = value.as_bool(); // None\nlet value = bson!([true]);\nlet array = value.as_array(); // Some(&Vec<Bson>)\n```\n\n### \u00a7\u27e827\u27e9BSON documents\nBSON documents are ordered maps of UTF-8 encoded strings to BSON values. They are logically similar to JSON objects in that they can contain subdocuments, arrays, and values of several different types. This crate models BSON documents via the `Document`\u27e828\u27e9 struct.\n#### \u00a7\u27e829\u27e9Creating `Document`\u27e828\u27e9s\n`Document`\u27e828\u27e9s can be created directly either from a byte reader containing BSON data or via the `doc!` macro:\n```\nuse bson::{doc, Document};\nuse std::io::Read;\nlet mut bytes = hex::decode(\"0C0000001069000100000000\").unwrap();\nlet doc = Document::from_reader(&mut bytes.as_slice()).unwrap(); // { \"i\": 1 }\nlet doc = doc! {\n  \"hello\": \"world\",\n  \"int\": 5,\n  \"subdoc\": { \"cat\": true },\n};\n```\n\n`doc!`\u27e830\u27e9 works similarly to `bson!`\u27e825\u27e9, except that it always returns a `Document`\u27e828\u27e9 rather than a `Bson`\u27e823\u27e9.\n#### \u00a7\u27e831\u27e9`Document`\u27e828\u27e9 member access\n`Document`\u27e828\u27e9 has a number of methods on it to facilitate member access:\n```\nuse bson::doc;\nlet doc = doc! {\n  \"string\": \"string\",\n  \"bool\": true,\n  \"i32\": 5,\n  \"doc\": { \"x\": true },\n};\n// attempt get values as untyped Bson\nlet none = doc.get(\"asdfadsf\"); // None\nlet value = doc.get(\"string\"); // Some(&Bson::String(\"string\"))\n// attempt to get values with explicit typing\nlet string = doc.get_str(\"string\"); // Ok(\"string\")\nlet subdoc = doc.get_document(\"doc\"); // Some(Document({ \"x\": true }))\nlet error = doc.get_i64(\"i32\"); // Err(...)\n```\n\n### \u00a7\u27e832\u27e9Modeling BSON with strongly typed data structures\nWhile it is possible to work with documents and BSON values directly, it will often introduce a lot of boilerplate for verifying the necessary keys are present and their values are the correct types. `serde`\u27e833\u27e9 provides a powerful way of mapping BSON data into Rust data structures largely automatically, removing the need for all that boilerplate.\ne.g.:\n```\nuse serde::{Deserialize, Serialize};\nuse bson::{bson, Bson};\n#[derive(Serialize, Deserialize)]\nstruct Person {\n  name: String,\n  age: i32,\n  phones: Vec<String>,\n}\n// Some BSON input data as a [`Bson`].\nlet bson_data: Bson = bson!({\n  \"name\": \"John Doe\",\n  \"age\": 43,\n  \"phones\": [\n    \"+44 1234567\",\n    \"+44 2345678\"\n  ]\n});\n// Deserialize the Person struct from the BSON data, automatically\n// verifying that the necessary keys are present and that they are of\n// the correct types.\nlet mut person: Person = bson::from_bson(bson_data).unwrap();\n// Do things just like with any other Rust data structure.\nprintln!(\"Redacting {}'s record.\", person.name);\nperson.name = \"REDACTED\".to_string();\n// Get a serialized version of the input data as a [`Bson`].\nlet redacted_bson = bson::to_bson(&person).unwrap();\n```\n\nAny types that implement `Serialize`\u27e834\u27e9 and `Deserialize`\u27e835\u27e9 can be used in this way. Doing so helps separate the \u201cbusiness logic\u201d that operates over the data from the (de)serialization logic that translates the data to/from its serialized form. This can lead to more clear and concise code that is also less error prone.\nWhen serializing values that cannot be represented in BSON, or deserialzing from BSON that does not match the format expected by the type, the default error will only report the specific field that failed. To aid debugging, enabling the `serde_path_to_error` feature will augment errors\u27e836\u27e9 with the full field path from root object to failing field. This feature does incur a small CPU and memory overhead during (de)serialization and should be enabled with care in performance-sensitive environments.\n### \u00a7\u27e837\u27e9Working with datetimes\nThe BSON format includes a datetime type, which is modeled in this crate by the `DateTime`\u27e817\u27e9 struct, and the `Serialize`\u27e834\u27e9 and `Deserialize`\u27e835\u27e9 implementations for this struct produce and parse BSON datetimes when serializing to or deserializing from BSON. The popular crate `chrono`\u27e838\u27e9 also provides a `DateTime`\u27e817\u27e9 type, but its `Serialize`\u27e834\u27e9 and `Deserialize`\u27e835\u27e9 implementations operate on strings instead, so when using it with BSON, the BSON datetime type is not used. To work around this, the `chrono-0_4` feature flag can be enabled. This flag exposes a number of convenient conversions between `bson::DateTime`\u27e817\u27e9 and `chrono::DateTime`\u27e839\u27e9, including the `serde_helpers::chrono_datetime_as_bson_datetime`\u27e840\u27e9 serde helper, which can be used to (de)serialize `chrono::DateTime`\u27e839\u27e9s to/from BSON datetimes, and the `From<chrono::DateTime>` implementation for `Bson`\u27e823\u27e9, which allows `chrono::DateTime`\u27e839\u27e9 values to be used in the `doc!` and `bson!` macros.\ne.g.\n```\nuse serde::{Serialize, Deserialize};\nuse bson::doc;\n#[derive(Serialize, Deserialize)]\nstruct Foo {\n  // serializes as a BSON datetime.\n  date_time: bson::DateTime,\n  // serializes as an RFC 3339 / ISO-8601 string.\n  chrono_datetime: chrono::DateTime<chrono::Utc>,\n  // serializes as a BSON datetime.\n  // this requires the \"chrono-0_4\" feature flag\n  #[serde(with = \"bson::serde_helpers::chrono_datetime_as_bson_datetime\")]\n  chrono_as_bson: chrono::DateTime<chrono::Utc>,\n}\n// this automatic conversion also requires the \"chrono-0_4\" feature flag\nlet query = doc! {\n  \"created_at\": chrono::Utc::now(),\n};\n```\n\n### \u00a7\u27e841\u27e9Working with UUIDs\nSee the module level documentation for the `uuid`\u27e842\u27e9 module.\n### \u00a7\u27e843\u27e9WASM support\nThis crate compiles to the `wasm32-unknown-unknown` target; when doing so, the `js-sys` crate is used for the current timestamp component of `ObjectId` generation.\n### \u00a7\u27e844\u27e9Minimum supported Rust version (MSRV)\nThe MSRV for this crate is currently 1.81. This will be rarely be increased, and if it ever is, it will only happen in a minor or major version release.\n## Re-exports\u00a7\u27e845\u27e9\n\n`pub use self::de::from_reader_utf8_lossy[](https://docs.rs/bson/latest/bson/de/fn.from_reader_utf8_lossy.html \"fn bson::de::from_reader_utf8_lossy\");`\n\n\n`pub use self::de::from_slice_utf8_lossy[](https://docs.rs/bson/latest/bson/de/fn.from_slice_utf8_lossy.html \"fn bson::de::from_slice_utf8_lossy\");`\n\n## Modules\u00a7\u27e846\u27e9\n\nbinary\u27e847\u27e9\n\n\ndatetime\u27e848\u27e9\n    Module containing functionality related to BSON DateTimes. For more information, see the documentation for the `DateTime`\u27e817\u27e9 type.\n\nde\u27e849\u27e9\n    Deserializer\n\ndecimal128\u27e850\u27e9\n    BSON Decimal128\u27e851\u27e9 data type representation\n\ndocument\u27e852\u27e9\n    A BSON document represented as an associative HashMap with insertion ordering.\n\nextjson\u27e853\u27e9\n    Deserialization and serialization of MongoDB Extended JSON v2\u27e854\u27e9\n\noid\u27e855\u27e9\n    Module containing functionality related to BSON ObjectIds. For more information, see the documentation for the `ObjectId`\u27e856\u27e9 type.\n\nraw\u27e857\u27e9\n    An API for interacting with raw BSON bytes.\n\nser\u27e858\u27e9\n    Serializer\n\nserde_helpers\u27e859\u27e9\n    Collection of helper functions for serializing to and deserializing from BSON using Serde\n\nspec\u27e860\u27e9\n    Constants derived from the BSON Specification Version 1.1\u27e822\u27e9.\n\nuuid\u27e842\u27e9\n    UUID support for BSON.\n## Macros\u00a7\u27e861\u27e9\n\nbson\u27e825\u27e9\n    Construct a bson::BSON value from a literal.\n\ndoc\u27e830\u27e9\n    Construct a bson::Document value.\n\nrawbson\u27e862\u27e9\n    Construct a `crate::RawBson`\u27e863\u27e9 value from a literal.\n\nrawdoc\u27e864\u27e9\n    Construct a `crate::RawDocumentBuf`\u27e865\u27e9 value.\n## Structs\u00a7\u27e866\u27e9\n\nBinary\u27e867\u27e9\n    Represents a BSON binary value.\n\nDateTime\u27e817\u27e9\n    Struct representing a BSON datetime. Note: BSON datetimes have millisecond precision.\n\nDbPointer\u27e868\u27e9\n    Represents a DBPointer. (Deprecated)\n\nDecimal128\u27e869\u27e9\n    Struct representing a BSON Decimal128 type.\n\nDeserializer\u27e870\u27e9\n    Serde Deserializer\n\nDeserializerOptions\u27e871\u27e9\n    Options used to configure a `Deserializer`\u27e870\u27e9. These can also be passed into `crate::from_bson_with_options`\u27e872\u27e9 and `crate::from_document_with_options`\u27e873\u27e9.\n\nDocument\u27e874\u27e9\n    A BSON document represented as an associative HashMap with insertion ordering.\n\nJavaScriptCodeWithScope\u27e875\u27e9\n    Represents a BSON code with scope value.\n\nRawArray\u27e876\u27e9\n    A slice of a BSON document containing a BSON array value (akin to `std::str`\u27e877\u27e9). This can be retrieved from a `RawDocument`\u27e878\u27e9 via `RawDocument::get`\u27e879\u27e9.\n\nRawArrayBuf\u27e880\u27e9\n    An owned BSON array value (akin to `std::path::PathBuf`\u27e881\u27e9), backed by a buffer of raw BSON bytes. This type can be used to construct owned array values, which can be used to append to `RawDocumentBuf`\u27e865\u27e9 or as a field in a `Deserialize`\u27e835\u27e9 struct.\n\nRawBinaryRef\u27e882\u27e9\n    A BSON binary value referencing raw bytes stored elsewhere.\n\nRawDbPointerRef\u27e883\u27e9\n    A BSON DB pointer value referencing raw bytes stored elesewhere.\n\nRawDocument\u27e878\u27e9\n    A slice of a BSON document (akin to `std::str`\u27e877\u27e9). This can be created from a `RawDocumentBuf`\u27e865\u27e9 or any type that contains valid BSON data, including static binary literals, `Vec<u8>`\u27e884\u27e9, or arrays.\n\nRawDocumentBuf\u27e865\u27e9\n    An owned BSON document (akin to `std::path::PathBuf`\u27e881\u27e9), backed by a buffer of raw BSON bytes. This can be created from a `Vec<u8>` or a `crate::Document`\u27e874\u27e9.\n\nRawJavaScriptCodeWithScope\u27e885\u27e9\n    A BSON \u201ccode with scope\u201d value backed by owned raw BSON.\n\nRawJavaScriptCodeWithScopeRef\u27e886\u27e9\n    A BSON \u201ccode with scope\u201d value referencing raw bytes stored elsewhere.\n\nRawRegexRef\u27e887\u27e9\n    A BSON regex referencing raw bytes stored elsewhere.\n\nRegex\u27e888\u27e9\n    Represents a BSON regular expression value.\n\nSerializer\u27e889\u27e9\n    Serde Serializer\n\nSerializerOptions\u27e890\u27e9\n    Options used to configure a `Serializer`\u27e889\u27e9.\n\nTimestamp\u27e891\u27e9\n    Represents a BSON timestamp value.\n\nUuid\u27e818\u27e9\n    A struct modeling a BSON UUID value (i.e. a Binary value with subtype 4).\n## Enums\u00a7\u27e892\u27e9\n\nBson\u27e823\u27e9\n    Possible BSON value types.\n\nRawBson\u27e863\u27e9\n    A BSON value backed by owned raw BSON bytes.\n\nRawBsonRef\u27e893\u27e9\n    A BSON value referencing raw bytes stored elsewhere.\n\nUuidRepresentation\u27e894\u27e9\n    Enum of the possible representations to use when converting between `Uuid`\u27e818\u27e9 and `Binary`\u27e867\u27e9. This enum is necessary because the different drivers used to have different ways of encoding UUIDs, with the BSON subtype: 0x03 (UUID old). If a UUID has been serialized with a particular representation, it MUST be deserialized with the same representation.\n## Functions\u00a7\u27e895\u27e9\n\nfrom_bson\u27e896\u27e9\n    Deserialize a `T` from the provided `Bson`\u27e823\u27e9 value.\n\nfrom_bson_with_options\u27e872\u27e9\n    Deserialize a `T` from the provided `Bson`\u27e823\u27e9 value, configuring the underlying deserializer with the provided options.\n\nfrom_document\u27e897\u27e9\n    Deserialize a `T` from the provided `Document`\u27e874\u27e9.\n\nfrom_document_with_options\u27e873\u27e9\n    Deserialize a `T` from the provided `Document`\u27e874\u27e9, configuring the underlying deserializer with the provided options.\n\nfrom_reader\u27e898\u27e9\n    Deserialize an instance of type `T` from an I/O stream of BSON.\n\nfrom_slice\u27e899\u27e9\n    Deserialize an instance of type `T` from a slice of BSON bytes.\n\nto_bson\u27e8100\u27e9\n    Encode a `T` Serializable into a `Bson`\u27e823\u27e9 value.\n\nto_bson_with_options\u27e8101\u27e9\n    Encode a `T` into a `Bson`\u27e823\u27e9 value, configuring the underlying serializer with the provided options.\n\nto_document\u27e8102\u27e9\n    Encode a `T` Serializable into a BSON `Document`\u27e874\u27e9.\n\nto_document_with_options\u27e8103\u27e9\n    Encode a `T` into a `Document`\u27e874\u27e9, configuring the underlying serializer with the provided options.\n\nto_raw_document_buf\u27e8104\u27e9\n    Serialize the given `T` as a `RawDocumentBuf`\u27e865\u27e9.\n\nto_vec\u27e8105\u27e9\n    Serialize the given `T` as a BSON byte vector.\n## Type Aliases\u00a7\u27e8106\u27e9\n\nArray\u27e8107\u27e9\n    Alias for `Vec<Bson>`.\n",
            "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://docs.rs/bson/latest/settings.html: Settings\n\u27e82\u27e9 https://docs.rs/bson/latest/help.html: Help\n\u27e83\u27e9 https://docs.rs/bson/latest/src/bson/lib.rs.html#22-350: Source\n\u27e84\u27e9 https://www.mongodb.com/: MongoDB\n\u27e85\u27e9 https://docs.rs/mongodb/latest/mongodb/: `mongodb`\n\u27e86\u27e9 http://bsonspec.org: bsonspec.org\n\u27e87\u27e9 https://docs.rs/bson/latest/bson/#installation: \u00a7\n\u27e88\u27e9 https://docs.rs/bson/latest/bson/#requirements: \u00a7\n\u27e89\u27e9 https://docs.rs/bson/latest/bson/#importing: \u00a7\n\u27e810\u27e9 https://crates.io/crates/bson: crates.io\n\u27e811\u27e9 https://docs.rs/bson/latest/bson/#feature-flags: \u00a7\n\u27e812\u27e9 https://docs.rs/chrono/0.4: `chrono`\n\u27e813\u27e9 https://docs.rs/uuid/0.8: `uuid`\n\u27e814\u27e9 https://docs.rs/uuid/1.x: `uuid`\n\u27e815\u27e9 https://docs.rs/time/0.3: `time`\n\u27e816\u27e9 https://docs.rs/serde_with/1.x: `serde_with`\n\u27e817\u27e9 https://docs.rs/bson/latest/bson/struct.DateTime.html: struct bson::DateTime - `DateTime`\n\u27e818\u27e9 https://docs.rs/bson/latest/bson/struct.Uuid.html: struct bson::Uuid - `Uuid`\n\u27e819\u27e9 https://docs.rs/serde_with/3.x: `serde_with`\n\u27e820\u27e9 https://docs.rs/serde_path_to_err/latest: `serde_path_to_error`\n\u27e821\u27e9 https://docs.rs/bson/latest/bson/#bson-values: \u00a7\n\u27e822\u27e9 http://bsonspec.org/spec.html: BSON specification\n\u27e823\u27e9 https://docs.rs/bson/latest/bson/enum.Bson.html: `Bson`\n\u27e824\u27e9 https://docs.rs/bson/latest/bson/#creating-bson-instances: \u00a7\n\u27e825\u27e9 https://docs.rs/bson/latest/bson/macro.bson.html: `bson!`\n\u27e826\u27e9 https://docs.rs/bson/latest/bson/#bson-value-unwrapping: \u00a7\n\u27e827\u27e9 https://docs.rs/bson/latest/bson/#bson-documents: \u00a7\n\u27e828\u27e9 https://docs.rs/bson/latest/bson/document/struct.Document.html: `Document`\n\u27e829\u27e9 https://docs.rs/bson/latest/bson/#creating-documents: \u00a7\n\u27e830\u27e9 https://docs.rs/bson/latest/bson/macro.doc.html: `doc!`\n\u27e831\u27e9 https://docs.rs/bson/latest/bson/#document-member-access: \u00a7\n\u27e832\u27e9 https://docs.rs/bson/latest/bson/#modeling-bson-with-strongly-typed-data-structures: \u00a7\n\u27e833\u27e9 https://serde.rs/: `serde`\n\u27e834\u27e9 https://docs.rs/serde/1.0.219/x86_64-unknown-linux-gnu/serde/ser/trait.Serialize.html: trait serde::ser::Serialize - `Serialize`\n\u27e835\u27e9 https://docs.rs/serde/1.0.219/x86_64-unknown-linux-gnu/serde/de/trait.Deserialize.html: trait serde::de::Deserialize - `Deserialize`\n\u27e836\u27e9 https://docs.rs/bson/latest/bson/de/enum.Error.html#variant.WithPath: variant bson::de::Error::WithPath - augment errors\n\u27e837\u27e9 https://docs.rs/bson/latest/bson/#working-with-datetimes: \u00a7\n\u27e838\u27e9 https://docs.rs/bson/latest/bson/docs.rs/chrono: `chrono`\n\u27e839\u27e9 https://docs.rs/chrono/0.4.41/x86_64-unknown-linux-gnu/chrono/datetime/struct.DateTime.html: struct chrono::datetime::DateTime - `chrono::DateTime`\n\u27e840\u27e9 https://docs.rs/bson/latest/bson/serde_helpers/chrono_datetime_as_bson_datetime/index.html: mod bson::serde_helpers::chrono_datetime_as_bson_datetime - `serde_helpers::chrono_datetime_as_bson_datetime`\n\u27e841\u27e9 https://docs.rs/bson/latest/bson/#working-with-uuids: \u00a7\n\u27e842\u27e9 https://docs.rs/bson/latest/bson/uuid/index.html: mod bson::uuid - `uuid`\n\u27e843\u27e9 https://docs.rs/bson/latest/bson/#wasm-support: \u00a7\n\u27e844\u27e9 https://docs.rs/bson/latest/bson/#minimum-supported-rust-version-msrv: \u00a7\n\u27e845\u27e9 https://docs.rs/bson/latest/bson/#reexports: \u00a7\n\u27e846\u27e9 https://docs.rs/bson/latest/bson/#modules: \u00a7\n\u27e847\u27e9 https://docs.rs/bson/latest/bson/binary/index.html: mod bson::binary - binary\n\u27e848\u27e9 https://docs.rs/bson/latest/bson/datetime/index.html: mod bson::datetime - datetime\n\u27e849\u27e9 https://docs.rs/bson/latest/bson/de/index.html: mod bson::de - de\n\u27e850\u27e9 https://docs.rs/bson/latest/bson/decimal128/index.html: mod bson::decimal128 - decimal128\n\u27e851\u27e9 https://github.com/mongodb/specifications/blob/master/source/bson-decimal128/decimal128.rst: BSON Decimal128\n\u27e852\u27e9 https://docs.rs/bson/latest/bson/document/index.html: mod bson::document - document\n\u27e853\u27e9 https://docs.rs/bson/latest/bson/extjson/index.html: mod bson::extjson - extjson\n\u27e854\u27e9 https://www.mongodb.com/docs/manual/reference/mongodb-extended-json/: MongoDB Extended JSON v2\n\u27e855\u27e9 https://docs.rs/bson/latest/bson/oid/index.html: mod bson::oid - oid\n\u27e856\u27e9 https://docs.rs/bson/latest/bson/oid/struct.ObjectId.html: struct bson::oid::ObjectId - `ObjectId`\n\u27e857\u27e9 https://docs.rs/bson/latest/bson/raw/index.html: mod bson::raw - raw\n\u27e858\u27e9 https://docs.rs/bson/latest/bson/ser/index.html: mod bson::ser - ser\n\u27e859\u27e9 https://docs.rs/bson/latest/bson/serde_helpers/index.html: mod bson::serde_helpers - serde_helpers\n\u27e860\u27e9 https://docs.rs/bson/latest/bson/spec/index.html: mod bson::spec - spec\n\u27e861\u27e9 https://docs.rs/bson/latest/bson/#macros: \u00a7\n\u27e862\u27e9 https://docs.rs/bson/latest/bson/macro.rawbson.html: macro bson::rawbson - rawbson\n\u27e863\u27e9 https://docs.rs/bson/latest/bson/enum.RawBson.html: enum bson::RawBson - `crate::RawBson`\n\u27e864\u27e9 https://docs.rs/bson/latest/bson/macro.rawdoc.html: macro bson::rawdoc - rawdoc\n\u27e865\u27e9 https://docs.rs/bson/latest/bson/struct.RawDocumentBuf.html: struct bson::RawDocumentBuf - `crate::RawDocumentBuf`\n\u27e866\u27e9 https://docs.rs/bson/latest/bson/#structs: \u00a7\n\u27e867\u27e9 https://docs.rs/bson/latest/bson/struct.Binary.html: struct bson::Binary - Binary\n\u27e868\u27e9 https://docs.rs/bson/latest/bson/struct.DbPointer.html: struct bson::DbPointer - DbPointer\n\u27e869\u27e9 https://docs.rs/bson/latest/bson/struct.Decimal128.html: struct bson::Decimal128 - Decimal128\n\u27e870\u27e9 https://docs.rs/bson/latest/bson/struct.Deserializer.html: struct bson::Deserializer - Deserializer\n\u27e871\u27e9 https://docs.rs/bson/latest/bson/struct.DeserializerOptions.html: struct bson::DeserializerOptions - DeserializerOptions\n\u27e872\u27e9 https://docs.rs/bson/latest/bson/fn.from_bson_with_options.html: fn bson::from_bson_with_options - `crate::from_bson_with_options`\n\u27e873\u27e9 https://docs.rs/bson/latest/bson/fn.from_document_with_options.html: fn bson::from_document_with_options - `crate::from_document_with_options`\n\u27e874\u27e9 https://docs.rs/bson/latest/bson/struct.Document.html: struct bson::Document - Document\n\u27e875\u27e9 https://docs.rs/bson/latest/bson/struct.JavaScriptCodeWithScope.html: struct bson::JavaScriptCodeWithScope - JavaScriptCodeWithScope\n\u27e876\u27e9 https://docs.rs/bson/latest/bson/struct.RawArray.html: struct bson::RawArray - RawArray\n\u27e877\u27e9 https://doc.rust-lang.org/nightly/alloc/str/index.html: mod alloc::str - `std::str`\n\u27e878\u27e9 https://docs.rs/bson/latest/bson/struct.RawDocument.html: struct bson::RawDocument - `RawDocument`\n\u27e879\u27e9 https://docs.rs/bson/latest/bson/struct.RawDocument.html#method.get: method bson::RawDocument::get - `RawDocument::get`\n\u27e880\u27e9 https://docs.rs/bson/latest/bson/struct.RawArrayBuf.html: struct bson::RawArrayBuf - RawArrayBuf\n\u27e881\u27e9 https://doc.rust-lang.org/nightly/std/path/struct.PathBuf.html: struct std::path::PathBuf - `std::path::PathBuf`\n\u27e882\u27e9 https://docs.rs/bson/latest/bson/struct.RawBinaryRef.html: struct bson::RawBinaryRef - RawBinaryRef\n\u27e883\u27e9 https://docs.rs/bson/latest/bson/struct.RawDbPointerRef.html: struct bson::RawDbPointerRef - RawDbPointerRef\n\u27e884\u27e9 https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html: struct alloc::vec::Vec - `Vec<u8>`\n\u27e885\u27e9 https://docs.rs/bson/latest/bson/struct.RawJavaScriptCodeWithScope.html: struct bson::RawJavaScriptCodeWithScope - RawJavaScriptCodeWithScope\n\u27e886\u27e9 https://docs.rs/bson/latest/bson/struct.RawJavaScriptCodeWithScopeRef.html: struct bson::RawJavaScriptCodeWithScopeRef - RawJavaScriptCodeWithScopeRef\n\u27e887\u27e9 https://docs.rs/bson/latest/bson/struct.RawRegexRef.html: struct bson::RawRegexRef - RawRegexRef\n\u27e888\u27e9 https://docs.rs/bson/latest/bson/struct.Regex.html: struct bson::Regex - Regex\n\u27e889\u27e9 https://docs.rs/bson/latest/bson/struct.Serializer.html: struct bson::Serializer - Serializer\n\u27e890\u27e9 https://docs.rs/bson/latest/bson/struct.SerializerOptions.html: struct bson::SerializerOptions - SerializerOptions\n\u27e891\u27e9 https://docs.rs/bson/latest/bson/struct.Timestamp.html: struct bson::Timestamp - Timestamp\n\u27e892\u27e9 https://docs.rs/bson/latest/bson/#enums: \u00a7\n\u27e893\u27e9 https://docs.rs/bson/latest/bson/enum.RawBsonRef.html: enum bson::RawBsonRef - RawBsonRef\n\u27e894\u27e9 https://docs.rs/bson/latest/bson/enum.UuidRepresentation.html: enum bson::UuidRepresentation - UuidRepresentation\n\u27e895\u27e9 https://docs.rs/bson/latest/bson/#functions: \u00a7\n\u27e896\u27e9 https://docs.rs/bson/latest/bson/fn.from_bson.html: fn bson::from_bson - from_bson\n\u27e897\u27e9 https://docs.rs/bson/latest/bson/fn.from_document.html: fn bson::from_document - from_document\n\u27e898\u27e9 https://docs.rs/bson/latest/bson/fn.from_reader.html: fn bson::from_reader - from_reader\n\u27e899\u27e9 https://docs.rs/bson/latest/bson/fn.from_slice.html: fn bson::from_slice - from_slice\n\u27e8100\u27e9 https://docs.rs/bson/latest/bson/fn.to_bson.html: fn bson::to_bson - to_bson\n\u27e8101\u27e9 https://docs.rs/bson/latest/bson/fn.to_bson_with_options.html: fn bson::to_bson_with_options - to_bson_with_options\n\u27e8102\u27e9 https://docs.rs/bson/latest/bson/fn.to_document.html: fn bson::to_document - to_document\n\u27e8103\u27e9 https://docs.rs/bson/latest/bson/fn.to_document_with_options.html: fn bson::to_document_with_options - to_document_with_options\n\u27e8104\u27e9 https://docs.rs/bson/latest/bson/fn.to_raw_document_buf.html: fn bson::to_raw_document_buf - to_raw_document_buf\n\u27e8105\u27e9 https://docs.rs/bson/latest/bson/fn.to_vec.html: fn bson::to_vec - to_vec\n\u27e8106\u27e9 https://docs.rs/bson/latest/bson/#types: \u00a7\n\u27e8107\u27e9 https://docs.rs/bson/latest/bson/type.Array.html: type bson::Array - Array\n",
            "fit_markdown": "",
            "fit_html": ""
          },
          "downloads": 0,
          "github_stars": 0,
          "dependencies": [],
          "features": {},
          "code_snippets": [],
          "readme_sections": {},
          "librs_downloads": null,
          "source": "crates.io",
          "enhanced_scraping": {},
          "enhanced_features": [],
          "enhanced_dependencies": [],
          "readme_summary": "The `bson` crate provides functionality for working with BSON (Binary JSON), a binary-encoded serialization format primarily used by MongoDB. It supports creating, manipulating, and serializing BSON values and documents, modeled via the `Bson` enum and `Document` struct, with convenient macros (`bson!` and `doc!`) for instantiation. The crate includes type conversion helpers, supports various data types, and offers optional integrations with libraries like `chrono`, `uuid`, and `serde_with` via feature flags.",
          "feature_summary": null,
          "use_case": "Serialization",
          "score": 6.0,
          "factual_counterfactual": "### Pair 1: Feature Flags  \n\u2705 Factual: The `bson` crate provides feature flags such as `chrono-0_4` and `uuid-1` to enable integration with specific versions of external crates like `chrono` and `uuid`. These features are disabled by default.  \n\u274c Counterfactual: The `bson` crate automatically enables all feature flags, including `chrono-0_4` and `uuid-1`, to simplify integration with external crates.  \n\n---\n\n### Pair 2: BSON Value Representation  \n\u2705 Factual: The `bson` crate models BSON values using the `Bson` enum, which supports various types such as integers, strings, arrays, and embedded documents.  \n\u274c Counterfactual: The `bson` crate uses a struct instead of an enum to represent BSON values, requiring manual type handling for each BSON value.  \n\n---\n\n### Pair 3: `bson!` Macro  \n\u2705 Factual: The `bson!` macro in the `bson` crate simplifies the creation of BSON values by automatically converting Rust types into `Bson` values, provided they implement `Into<Bson>`.  \n\u274c Counterfactual: The `bson!` macro requires explicit type annotations for each value to convert them into `Bson` instances, making it less ergonomic for developers.",
          "source_analysis": null,
          "user_behavior": null,
          "security": null
        }
      },
      "irl_score": 8.6,
      "execution_id": "exec-da12ac53-d179d4f4-1751259371",
      "timestamp": "2025-06-30T04:56:11.958053+00:00",
      "canon_version": "1.3.0"
    },
    "rule_zero_compliant": true
  }
]