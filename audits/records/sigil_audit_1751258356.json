[
  {
    "execution_id": "exec-434de5e6-4f56e2ee-1751258347",
    "timestamp": "2025-06-30T04:39:07.408821+00:00",
    "sacred_chain": {
      "input_data": "tokio",
      "context_sources": [
        "crates.io",
        "github.com",
        "lib.rs",
        "docs.rs"
      ],
      "reasoning_steps": [
        "Input canonicalized: 'tokio' -> 'tokio'",
        "Context gathered from 4 validated sources",
        "Metadata extracted: 4 fields",
        "Documentation analyzed: quality 7.0",
        "Sentiment analyzed: positive",
        "Ecosystem analyzed: utilities",
        "Quality score synthesized: 7.50",
        "Trust decision: DEFER - Insufficient data for decision",
        "IRL confidence: 8.600"
      ],
      "suggestion": "ALLOW: Positive community sentiment",
      "verdict": "DEFER",
      "audit_info": {
        "metadata": {
          "name": "tokio",
          "type": "rust_crate",
          "source": "manual_input",
          "extraction_method": "irl_engine"
        },
        "sentiment": {
          "quality_score": 7.0,
          "completeness": 0.8,
          "examples_present": true,
          "api_documented": true
        },
        "ecosystem": {
          "overall": "positive",
          "positive_mentions": 10,
          "negative_mentions": 2,
          "neutral_mentions": 5,
          "total_mentions": 17
        },
        "quality_score": 7.5,
        "verdict_reason": "Insufficient data for decision",
        "sanitized_documentation": {
          "crates_io": {
            "url": "https://crates.io/crates/tokio",
            "title": "tokio v1.45.1",
            "content": {
              "raw_markdown": "#  tokio v1.45.1\nAn event-driven, non-blocking I/O platform for writing asynchronous I/O backed applications. \n  * [ #async ](https://crates.io/keywords/async)\n  * [ #futures ](https://crates.io/keywords/futures)\n  * [ #io ](https://crates.io/keywords/io)\n  * [ #non-blocking ](https://crates.io/keywords/non-blocking)\n\n\n  * [ Readme ](https://crates.io/crates/tokio)\n  * [ 169 Versions ](https://crates.io/crates/tokio/versions)\n  * [ Dependencies ](https://crates.io/crates/tokio/dependencies)\n  * [ Dependents ](https://crates.io/crates/tokio/reverse_dependencies)\n\n\n## Metadata\nabout 1 month ago \nv1.70.0 \n[ MIT ](https://choosealicense.com/licenses/mit)\n793 KiB \n## Install\nRun the following Cargo command in your project directory:\ncargo add tokio\nOr add the following line to your Cargo.toml:\ntokio = \"1.45.1\"\n## Homepage\n[ tokio.rs ](https://tokio.rs)\n## Repository\n[ github.com/tokio-rs/tokio ](https://github.com/tokio-rs/tokio)\n## Owners\n## Categories\n  * [Network programming](https://crates.io/categories/network-programming)\n  * [Asynchronous](https://crates.io/categories/asynchronous)\n\n\n[ Report crate ](https://crates.io/support?crate=tokio&inquire=crate-violation)\n### Stats Overview\n342,332,300 Downloads all time\n169 Versions published\n#### Downloads over the last 90 days\nDisplay as \nStacked \n  * Stacked \n  * Unstacked \n\n\nLoading\u2026\n",
              "markdown_with_citations": "#  tokio v1.45.1\nAn event-driven, non-blocking I/O platform for writing asynchronous I/O backed applications. \n  *  #async \u27e81\u27e9\n  *  #futures \u27e82\u27e9\n  *  #io \u27e83\u27e9\n  *  #non-blocking \u27e84\u27e9\n\n\n  *  Readme \u27e85\u27e9\n  *  169 Versions \u27e86\u27e9\n  *  Dependencies \u27e87\u27e9\n  *  Dependents \u27e88\u27e9\n\n\n## Metadata\nabout 1 month ago \nv1.70.0 \n MIT \u27e89\u27e9\n793 KiB \n## Install\nRun the following Cargo command in your project directory:\ncargo add tokio\nOr add the following line to your Cargo.toml:\ntokio = \"1.45.1\"\n## Homepage\n tokio.rs \u27e810\u27e9\n## Repository\n github.com/tokio-rs/tokio \u27e811\u27e9\n## Owners\n## Categories\n  * Network programming\u27e812\u27e9\n  * Asynchronous\u27e813\u27e9\n\n\n Report crate \u27e814\u27e9\n### Stats Overview\n342,332,300 Downloads all time\n169 Versions published\n#### Downloads over the last 90 days\nDisplay as \nStacked \n  * Stacked \n  * Unstacked \n\n\nLoading\u2026\n",
              "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://crates.io/keywords/async:  #async \n\u27e82\u27e9 https://crates.io/keywords/futures:  #futures \n\u27e83\u27e9 https://crates.io/keywords/io:  #io \n\u27e84\u27e9 https://crates.io/keywords/non-blocking:  #non-blocking \n\u27e85\u27e9 https://crates.io/crates/tokio:  Readme \n\u27e86\u27e9 https://crates.io/crates/tokio/versions:  169 Versions \n\u27e87\u27e9 https://crates.io/crates/tokio/dependencies:  Dependencies \n\u27e88\u27e9 https://crates.io/crates/tokio/reverse_dependencies:  Dependents \n\u27e89\u27e9 https://choosealicense.com/licenses/mit:  MIT \n\u27e810\u27e9 https://tokio.rs:  tokio.rs \n\u27e811\u27e9 https://github.com/tokio-rs/tokio:  github.com/tokio-rs/tokio \n\u27e812\u27e9 https://crates.io/categories/network-programming: Network programming\n\u27e813\u27e9 https://crates.io/categories/asynchronous: Asynchronous\n\u27e814\u27e9 https://crates.io/support?crate=tokio&inquire=crate-violation:  Report crate \n",
              "fit_markdown": "",
              "fit_html": ""
            },
            "structured_data": {},
            "quality_score": 3.0,
            "extraction_method": "crawl4ai",
            "error": null,
            "metadata": {
              "doc_type": "docs",
              "content_length": 1353,
              "has_structured_data": false,
              "crawl_success": true
            },
            "timestamp": "112136.8896797"
          },
          "docs_rs": {
            "url": "https://docs.rs/tokio",
            "title": "Crate tokioCopy item path",
            "content": {
              "raw_markdown": "[](https://docs.rs/tokio/latest/tokio/all.html \"show sidebar\")\n# Crate tokioCopy item path\n[Settings](https://docs.rs/tokio/latest/settings.html)\n[Help](https://docs.rs/tokio/latest/help.html)\nSummary[Source](https://docs.rs/tokio/latest/src/tokio/lib.rs.html#1-698)\nExpand description\nA runtime for writing reliable network applications without compromising speed.\nTokio is an event-driven, non-blocking I/O platform for writing asynchronous applications with the Rust programming language. At a high level, it provides a few major components:\n  * Tools for [working with asynchronous tasks](https://docs.rs/tokio/latest/tokio/#working-with-tasks), including [synchronization primitives and channels](https://docs.rs/tokio/latest/tokio/sync/index.html \"mod tokio::sync\") and [timeouts, sleeps, and intervals](https://docs.rs/tokio/latest/tokio/time/index.html \"mod tokio::time\").\n  * APIs for [performing asynchronous I/O](https://docs.rs/tokio/latest/tokio/#asynchronous-io), including [TCP and UDP](https://docs.rs/tokio/latest/tokio/net/index.html \"mod tokio::net\") sockets, [filesystem](https://docs.rs/tokio/latest/tokio/fs/index.html \"mod tokio::fs\") operations, and [process](https://docs.rs/tokio/latest/tokio/process/index.html \"mod tokio::process\") and [signal](https://docs.rs/tokio/latest/tokio/signal/index.html \"mod tokio::signal\") management.\n  * A [runtime](https://docs.rs/tokio/latest/tokio/runtime/index.html \"mod tokio::runtime\") for executing asynchronous code, including a task scheduler, an I/O driver backed by the operating system\u2019s event queue (`epoll`, `kqueue`, `IOCP`, etc\u2026), and a high performance timer.\n\n\nGuide level documentation is found on the [website](https://tokio.rs/tokio/tutorial).\n## [\u00a7](https://docs.rs/tokio/latest/tokio/#a-tour-of-tokio)A Tour of Tokio\nTokio consists of a number of modules that provide a range of functionality essential for implementing asynchronous applications in Rust. In this section, we will take a brief tour of Tokio, summarizing the major APIs and their uses.\nThe easiest way to get started is to enable all features. Do this by enabling the `full` feature flag:\n```\ntokio = { version = \"1\", features = [\"full\"] }\n```\n\n#### [\u00a7](https://docs.rs/tokio/latest/tokio/#authoring-applications)Authoring applications\nTokio is great for writing applications and most users in this case shouldn\u2019t worry too much about what features they should pick. If you\u2019re unsure, we suggest going with `full` to ensure that you don\u2019t run into any road blocks while you\u2019re building your application.\n##### [\u00a7](https://docs.rs/tokio/latest/tokio/#example)Example\nThis example shows the quickest way to get started with Tokio.\n```\ntokio = { version = \"1\", features = [\"full\"] }\n```\n\n#### [\u00a7](https://docs.rs/tokio/latest/tokio/#authoring-libraries)Authoring libraries\nAs a library author your goal should be to provide the lightest weight crate that is based on Tokio. To achieve this you should ensure that you only enable the features you need. This allows users to pick up your crate without having to enable unnecessary features.\n##### [\u00a7](https://docs.rs/tokio/latest/tokio/#example-1)Example\nThis example shows how you may want to import features for a library that just needs to `tokio::spawn` and use a `TcpStream`.\n```\ntokio = { version = \"1\", features = [\"rt\", \"net\"] }\n```\n\n### [\u00a7](https://docs.rs/tokio/latest/tokio/#working-with-tasks)Working With Tasks\nAsynchronous programs in Rust are based around lightweight, non-blocking units of execution called [_tasks_](https://docs.rs/tokio/latest/tokio/#working-with-tasks). The [`tokio::task`](https://docs.rs/tokio/latest/tokio/task/index.html \"mod tokio::task\") module provides important tools for working with tasks:\n  * The [`spawn`](https://docs.rs/tokio/latest/tokio/task/fn.spawn.html \"fn tokio::task::spawn\") function and [`JoinHandle`](https://docs.rs/tokio/latest/tokio/task/struct.JoinHandle.html \"struct tokio::task::JoinHandle\") type, for scheduling a new task on the Tokio runtime and awaiting the output of a spawned task, respectively,\n  * Functions for [running blocking operations](https://docs.rs/tokio/latest/tokio/task/index.html#blocking-and-yielding) in an asynchronous task context.\n\n\nThe [`tokio::task`](https://docs.rs/tokio/latest/tokio/task/index.html \"mod tokio::task\") module is present only when the \u201crt\u201d feature flag is enabled.\nThe [`tokio::sync`](https://docs.rs/tokio/latest/tokio/sync/index.html \"mod tokio::sync\") module contains synchronization primitives to use when needing to communicate or share data. These include:\n  * channels ([`oneshot`](https://docs.rs/tokio/latest/tokio/sync/oneshot/index.html \"mod tokio::sync::oneshot\"), [`mpsc`](https://docs.rs/tokio/latest/tokio/sync/mpsc/index.html \"mod tokio::sync::mpsc\"), [`watch`](https://docs.rs/tokio/latest/tokio/sync/watch/index.html \"mod tokio::sync::watch\"), and [`broadcast`](https://docs.rs/tokio/latest/tokio/sync/broadcast/index.html \"mod tokio::sync::broadcast\")), for sending values between tasks,\n  * a non-blocking [`Mutex`](https://docs.rs/tokio/latest/tokio/sync/struct.Mutex.html \"struct tokio::sync::Mutex\"), for controlling access to a shared, mutable value,\n  * an asynchronous [`Barrier`](https://docs.rs/tokio/latest/tokio/sync/struct.Barrier.html \"struct tokio::sync::Barrier\") type, for multiple tasks to synchronize before beginning a computation.\n\n\nThe `tokio::sync` module is present only when the \u201csync\u201d feature flag is enabled.\nThe [`tokio::time`](https://docs.rs/tokio/latest/tokio/time/index.html \"mod tokio::time\") module provides utilities for tracking time and scheduling work. This includes functions for setting [timeouts](https://docs.rs/tokio/latest/tokio/time/fn.timeout.html \"fn tokio::time::timeout\") for tasks, [sleeping](https://docs.rs/tokio/latest/tokio/time/fn.sleep.html \"fn tokio::time::sleep\") work to run in the future, or [repeating an operation at an interval](https://docs.rs/tokio/latest/tokio/time/fn.interval.html \"fn tokio::time::interval\").\nIn order to use `tokio::time`, the \u201ctime\u201d feature flag must be enabled.\nFinally, Tokio provides a _runtime_ for executing asynchronous tasks. Most applications can use the [`#[tokio::main]`](https://docs.rs/tokio/latest/tokio/attr.main.html) macro to run their code on the Tokio runtime. However, this macro provides only basic configuration options. As an alternative, the [`tokio::runtime`](https://docs.rs/tokio/latest/tokio/runtime/index.html \"mod tokio::runtime\") module provides more powerful APIs for configuring and managing runtimes. You should use that module if the `#[tokio::main]` macro doesn\u2019t provide the functionality you need.\nUsing the runtime requires the \u201crt\u201d or \u201crt-multi-thread\u201d feature flags, to enable the current-thread [single-threaded scheduler](https://docs.rs/tokio/latest/tokio/runtime/index.html#current-thread-scheduler) and the [multi-thread scheduler](https://docs.rs/tokio/latest/tokio/runtime/index.html#multi-thread-scheduler), respectively. See the [`runtime` module documentation](https://docs.rs/tokio/latest/tokio/runtime/index.html#runtime-scheduler) for details. In addition, the \u201cmacros\u201d feature flag enables the `#[tokio::main]` and `#[tokio::test]` attributes.\n### [\u00a7](https://docs.rs/tokio/latest/tokio/#cpu-bound-tasks-and-blocking-code)CPU-bound tasks and blocking code\nTokio is able to concurrently run many tasks on a few threads by repeatedly swapping the currently running task on each thread. However, this kind of swapping can only happen at `.await` points, so code that spends a long time without reaching an `.await` will prevent other tasks from running. To combat this, Tokio provides two kinds of threads: Core threads and blocking threads.\nThe core threads are where all asynchronous code runs, and Tokio will by default spawn one for each CPU core. You can use the environment variable `TOKIO_WORKER_THREADS` to override the default value.\nThe blocking threads are spawned on demand, can be used to run blocking code that would otherwise block other tasks from running and are kept alive when not used for a certain amount of time which can be configured with [`thread_keep_alive`](https://docs.rs/tokio/latest/tokio/runtime/struct.Builder.html#method.thread_keep_alive \"method tokio::runtime::Builder::thread_keep_alive\"). Since it is not possible for Tokio to swap out blocking tasks, like it can do with asynchronous code, the upper limit on the number of blocking threads is very large. These limits can be configured on the [`Builder`](https://docs.rs/tokio/latest/tokio/runtime/struct.Builder.html \"struct tokio::runtime::Builder\").\nTo spawn a blocking task, you should use the [`spawn_blocking`](https://docs.rs/tokio/latest/tokio/task/fn.spawn_blocking.html \"fn tokio::task::spawn_blocking\") function.\n```\n#[tokio::main]\nasync fn main() {\n  // This is running on a core thread.\n  let blocking_task = tokio::task::spawn_blocking(|| {\n    // This is running on a blocking thread.\n    // Blocking here is ok.\n  });\n  // We can wait for the blocking task like this:\n  // If the blocking task panics, the unwrap below will propagate the\n  // panic.\n  blocking_task.await.unwrap();\n}\n```\n\nIf your code is CPU-bound and you wish to limit the number of threads used to run it, you should use a separate thread pool dedicated to CPU bound tasks. For example, you could consider using the [rayon](https://docs.rs/rayon) library for CPU-bound tasks. It is also possible to create an extra Tokio runtime dedicated to CPU-bound tasks, but if you do this, you should be careful that the extra runtime runs _only_ CPU-bound tasks, as IO-bound tasks on that runtime will behave poorly.\nHint: If using rayon, you can use a [`oneshot`](https://docs.rs/tokio/latest/tokio/sync/oneshot/index.html \"mod tokio::sync::oneshot\") channel to send the result back to Tokio when the rayon task finishes.\n### [\u00a7](https://docs.rs/tokio/latest/tokio/#asynchronous-io)Asynchronous IO\nAs well as scheduling and running tasks, Tokio provides everything you need to perform input and output asynchronously.\nThe [`tokio::io`](https://docs.rs/tokio/latest/tokio/io/index.html \"mod tokio::io\") module provides Tokio\u2019s asynchronous core I/O primitives, the [`AsyncRead`](https://docs.rs/tokio/latest/tokio/io/trait.AsyncRead.html \"trait tokio::io::AsyncRead\"), [`AsyncWrite`](https://docs.rs/tokio/latest/tokio/io/trait.AsyncWrite.html \"trait tokio::io::AsyncWrite\"), and [`AsyncBufRead`](https://docs.rs/tokio/latest/tokio/io/trait.AsyncBufRead.html \"trait tokio::io::AsyncBufRead\") traits. In addition, when the \u201cio-util\u201d feature flag is enabled, it also provides combinators and functions for working with these traits, forming as an asynchronous counterpart to [`std::io`](https://doc.rust-lang.org/nightly/std/io/index.html \"mod std::io\").\nTokio also includes APIs for performing various kinds of I/O and interacting with the operating system asynchronously. These include:\n  * [`tokio::net`](https://docs.rs/tokio/latest/tokio/net/index.html \"mod tokio::net\"), which contains non-blocking versions of [TCP](https://docs.rs/tokio/latest/tokio/net/tcp/index.html \"mod tokio::net::tcp\"), [UDP](https://docs.rs/tokio/latest/tokio/net/struct.UdpSocket.html \"struct tokio::net::UdpSocket\"), and [Unix Domain Sockets](https://docs.rs/tokio/latest/tokio/net/unix/index.html \"mod tokio::net::unix\") (enabled by the \u201cnet\u201d feature flag),\n  * [`tokio::fs`](https://docs.rs/tokio/latest/tokio/fs/index.html \"mod tokio::fs\"), similar to [`std::fs`](https://doc.rust-lang.org/nightly/std/fs/index.html \"mod std::fs\") but for performing filesystem I/O asynchronously (enabled by the \u201cfs\u201d feature flag),\n  * [`tokio::signal`](https://docs.rs/tokio/latest/tokio/signal/index.html \"mod tokio::signal\"), for asynchronously handling Unix and Windows OS signals (enabled by the \u201csignal\u201d feature flag),\n  * [`tokio::process`](https://docs.rs/tokio/latest/tokio/process/index.html \"mod tokio::process\"), for spawning and managing child processes (enabled by the \u201cprocess\u201d feature flag).\n\n\n## [\u00a7](https://docs.rs/tokio/latest/tokio/#examples)Examples\nA simple TCP echo server:\n```\nuse tokio::net::TcpListener;\nuse tokio::io::{AsyncReadExt, AsyncWriteExt};\n#[tokio::main]\nasync fn main() -> Result<(), Box<dyn std::error::Error>> {\n  let listener = TcpListener::bind(\"127.0.0.1:8080\").await?;\n  loop {\n    let (mut socket, _) = listener.accept().await?;\n    tokio::spawn(async move {\n      let mut buf = [0; 1024];\n      // In a loop, read data from the socket and write the data back.\n      loop {\n        let n = match socket.read(&mut buf).await {\n          // socket closed\n          Ok(0) => return,\n          Ok(n) => n,\n          Err(e) => {\n            eprintln!(\"failed to read from socket; err = {:?}\", e);\n            return;\n          }\n        };\n        // Write the data back\n        if let Err(e) = socket.write_all(&buf[0..n]).await {\n          eprintln!(\"failed to write to socket; err = {:?}\", e);\n          return;\n        }\n      }\n    });\n  }\n}\n```\n\n## [\u00a7](https://docs.rs/tokio/latest/tokio/#feature-flags)Feature flags\nTokio uses a set of [feature flags](https://doc.rust-lang.org/cargo/reference/manifest.html#the-features-section) to reduce the amount of compiled code. It is possible to just enable certain features over others. By default, Tokio does not enable any features but allows one to enable a subset for their use case. Below is a list of the available feature flags. You may also notice above each function, struct and trait there is listed one or more feature flags that are required for that item to be used. If you are new to Tokio it is recommended that you use the `full` feature flag which will enable all public APIs. Beware though that this will pull in many extra dependencies that you may not need.\n  * `full`: Enables all features listed below except `test-util` and `tracing`.\n  * `rt`: Enables `tokio::spawn`, the current-thread scheduler, and non-scheduler utilities.\n  * `rt-multi-thread`: Enables the heavier, multi-threaded, work-stealing scheduler.\n  * `io-util`: Enables the IO based `Ext` traits.\n  * `io-std`: Enable `Stdout`, `Stdin` and `Stderr` types.\n  * `net`: Enables `tokio::net` types such as `TcpStream`, `UnixStream` and `UdpSocket`, as well as (on Unix-like systems) `AsyncFd` and (on FreeBSD) `PollAio`.\n  * `time`: Enables `tokio::time` types and allows the schedulers to enable the built in timer.\n  * `process`: Enables `tokio::process` types.\n  * `macros`: Enables `#[tokio::main]` and `#[tokio::test]` macros.\n  * `sync`: Enables all `tokio::sync` types.\n  * `signal`: Enables all `tokio::signal` types.\n  * `fs`: Enables `tokio::fs` types.\n  * `test-util`: Enables testing based infrastructure for the Tokio runtime.\n  * `parking_lot`: As a potential optimization, use the `_parking_lot_` crate\u2019s synchronization primitives internally. Also, this dependency is necessary to construct some of our primitives in a `const` context. `MSRV` may increase according to the `_parking_lot_` release in use.\n\n\n_Note:`AsyncRead` and `AsyncWrite` traits do not require any features and are always available._\n### [\u00a7](https://docs.rs/tokio/latest/tokio/#unstable-features)Unstable features\nSome feature flags are only available when specifying the `tokio_unstable` flag:\n  * `tracing`: Enables tracing events.\n\n\nLikewise, some parts of the API are only available with the same flag:\n  * [`task::Builder`](https://docs.rs/tokio/latest/tokio/task/struct.Builder.html \"struct tokio::task::Builder\")\n  * Some methods on [`task::JoinSet`](https://docs.rs/tokio/latest/tokio/task/struct.JoinSet.html \"struct tokio::task::JoinSet\")\n  * [`runtime::RuntimeMetrics`](https://docs.rs/tokio/latest/tokio/runtime/struct.RuntimeMetrics.html \"struct tokio::runtime::RuntimeMetrics\")\n  * [`runtime::Builder::on_task_spawn`](https://docs.rs/tokio/latest/tokio/runtime/struct.Builder.html#method.on_task_spawn \"method tokio::runtime::Builder::on_task_spawn\")\n  * [`runtime::Builder::on_task_terminate`](https://docs.rs/tokio/latest/tokio/runtime/struct.Builder.html#method.on_task_terminate \"method tokio::runtime::Builder::on_task_terminate\")\n  * [`runtime::Builder::unhandled_panic`](https://docs.rs/tokio/latest/tokio/runtime/struct.Builder.html#method.unhandled_panic \"method tokio::runtime::Builder::unhandled_panic\")\n  * [`runtime::TaskMeta`](https://docs.rs/tokio/latest/tokio/runtime/struct.TaskMeta.html \"struct tokio::runtime::TaskMeta\")\n\n\nThis flag enables **unstable** features. The public API of these features may break in 1.x releases. To enable these features, the `--cfg tokio_unstable` argument must be passed to `rustc` when compiling. This serves to explicitly opt-in to features which may break semver conventions, since Cargo [does not yet directly support such opt-ins](https://internals.rust-lang.org/t/feature-request-unstable-opt-in-non-transitive-crate-features/16193#why-not-a-crate-feature-2).\nYou can specify it in your project\u2019s `.cargo/config.toml` file:\n```\n[build]\nrustflags = [\"--cfg\", \"tokio_unstable\"]\n```\n\nThe `[build]` section does **not** go in a `Cargo.toml` file. Instead it must be placed in the Cargo config file `.cargo/config.toml`. \nAlternatively, you can specify it with an environment variable:\n```\n## Many *nix shells:\nexport RUSTFLAGS=\"--cfg tokio_unstable\"\ncargo build\n```\n\n```\n## Windows PowerShell:\n$Env:RUSTFLAGS=\"--cfg tokio_unstable\"\ncargo build\n```\n\n## [\u00a7](https://docs.rs/tokio/latest/tokio/#supported-platforms)Supported platforms\nTokio currently guarantees support for the following platforms:\n  * Linux\n  * Windows\n  * Android (API level 21)\n  * macOS\n  * iOS\n  * FreeBSD\n\n\nTokio will continue to support these platforms in the future. However, future releases may change requirements such as the minimum required libc version on Linux, the API level on Android, or the supported FreeBSD release.\nBeyond the above platforms, Tokio is intended to work on all platforms supported by the mio crate. You can find a longer list [in mio\u2019s documentation](https://crates.io/crates/mio#platforms). However, these additional platforms may become unsupported in the future.\nNote that Wine is considered to be a different platform from Windows. See mio\u2019s documentation for more information on Wine support.\n### [\u00a7](https://docs.rs/tokio/latest/tokio/#wasm-support)`WASM` support\nTokio has some limited support for the `WASM` platform. Without the `tokio_unstable` flag, the following features are supported:\n  * `sync`\n  * `macros`\n  * `io-util`\n  * `rt`\n  * `time`\n\n\nEnabling any other feature (including `full`) will cause a compilation failure.\nThe `time` module will only work on `WASM` platforms that have support for timers (e.g. wasm32-wasi). The timing functions will panic if used on a `WASM` platform that does not support timers.\nNote also that if the runtime becomes indefinitely idle, it will panic immediately instead of blocking forever. On platforms that don\u2019t support time, this means that the runtime can never be idle in any way.\n### [\u00a7](https://docs.rs/tokio/latest/tokio/#unstable-wasm-support)Unstable `WASM` support\nTokio also has unstable support for some additional `WASM` features. This requires the use of the `tokio_unstable` flag.\nUsing this flag enables the use of `tokio::net` on the wasm32-wasi target. However, not all methods are available on the networking types as `WASI` currently does not support the creation of new sockets from within `WASM`. Because of this, sockets must currently be created via the `FromRawFd` trait.\n## Re-exports[\u00a7](https://docs.rs/tokio/latest/tokio/#reexports)\n\n`pub use task::spawn[](https://docs.rs/tokio/latest/tokio/task/fn.spawn.html \"fn tokio::task::spawn\");``rt`\n\n## Modules[\u00a7](https://docs.rs/tokio/latest/tokio/#modules)\n\n[doc](https://docs.rs/tokio/latest/tokio/doc/index.html \"mod tokio::doc\")\n    Types which are documented locally in the Tokio crate, but does not actually live here.\n\n[fs](https://docs.rs/tokio/latest/tokio/fs/index.html \"mod tokio::fs\")`fs`\n    Asynchronous file utilities.\n\n[io](https://docs.rs/tokio/latest/tokio/io/index.html \"mod tokio::io\")\n    Traits, helpers, and type definitions for asynchronous I/O functionality.\n\n[net](https://docs.rs/tokio/latest/tokio/net/index.html \"mod tokio::net\")\n    TCP/UDP/Unix bindings for `tokio`.\n\n[process](https://docs.rs/tokio/latest/tokio/process/index.html \"mod tokio::process\")`process`\n    An implementation of asynchronous process management for Tokio.\n\n[runtime](https://docs.rs/tokio/latest/tokio/runtime/index.html \"mod tokio::runtime\")`rt`\n    The Tokio runtime.\n\n[signal](https://docs.rs/tokio/latest/tokio/signal/index.html \"mod tokio::signal\")`signal`\n    Asynchronous signal handling for Tokio.\n\n[stream](https://docs.rs/tokio/latest/tokio/stream/index.html \"mod tokio::stream\")\n    Due to the `Stream` trait\u2019s inclusion in `std` landing later than Tokio\u2019s 1.0 release, most of the Tokio stream utilities have been moved into the [`tokio-stream`](https://docs.rs/tokio-stream) crate.\n\n[sync](https://docs.rs/tokio/latest/tokio/sync/index.html \"mod tokio::sync\")`sync`\n    Synchronization primitives for use in asynchronous contexts.\n\n[task](https://docs.rs/tokio/latest/tokio/task/index.html \"mod tokio::task\")\n    Asynchronous green-threads.\n\n[time](https://docs.rs/tokio/latest/tokio/time/index.html \"mod tokio::time\")`time`\n    Utilities for tracking time.\n## Macros[\u00a7](https://docs.rs/tokio/latest/tokio/#macros)\n\n[join](https://docs.rs/tokio/latest/tokio/macro.join.html \"macro tokio::join\")`macros`\n    Waits on multiple concurrent branches, returning when **all** branches complete.\n\n[pin](https://docs.rs/tokio/latest/tokio/macro.pin.html \"macro tokio::pin\")\n    Pins a value on the stack.\n\n[select](https://docs.rs/tokio/latest/tokio/macro.select.html \"macro tokio::select\")`macros`\n    Waits on multiple concurrent branches, returning when the **first** branch completes, cancelling the remaining branches.\n\n[task_local](https://docs.rs/tokio/latest/tokio/macro.task_local.html \"macro tokio::task_local\")`rt`\n    Declares a new task-local key of type [`tokio::task::LocalKey`](https://docs.rs/tokio/latest/tokio/task/struct.LocalKey.html \"struct tokio::task::LocalKey\").\n\n[try_join](https://docs.rs/tokio/latest/tokio/macro.try_join.html \"macro tokio::try_join\")`macros`\n    Waits on multiple concurrent branches, returning when **all** branches complete with `Ok(_)` or on the first `Err(_)`.\n## Attribute Macros[\u00a7](https://docs.rs/tokio/latest/tokio/#attributes)\n\n[main](https://docs.rs/tokio/latest/tokio/attr.main.html \"attr tokio::main\")`rt` and `macros`\n    Marks async function to be executed by the selected runtime. This macro helps set up a `Runtime` without requiring the user to use [Runtime](https://docs.rs/tokio/latest/tokio/runtime/struct.Runtime.html) or [Builder](https://docs.rs/tokio/latest/tokio/runtime/struct.Builder.html) directly.\n\n[test](https://docs.rs/tokio/latest/tokio/attr.test.html \"attr tokio::test\")`rt` and `macros`\n    Marks async function to be executed by runtime, suitable to test environment. This macro helps set up a `Runtime` without requiring the user to use [Runtime](https://docs.rs/tokio/latest/tokio/runtime/struct.Runtime.html) or [Builder](https://docs.rs/tokio/latest/tokio/runtime/struct.Builder.html) directly.\n",
              "markdown_with_citations": "[](https://docs.rs/tokio/latest/tokio/all.html \"show sidebar\")\n# Crate tokioCopy item path\nSettings\u27e81\u27e9\nHelp\u27e82\u27e9\nSummarySource\u27e83\u27e9\nExpand description\nA runtime for writing reliable network applications without compromising speed.\nTokio is an event-driven, non-blocking I/O platform for writing asynchronous applications with the Rust programming language. At a high level, it provides a few major components:\n  * Tools for working with asynchronous tasks\u27e84\u27e9, including synchronization primitives and channels\u27e85\u27e9 and timeouts, sleeps, and intervals\u27e86\u27e9.\n  * APIs for performing asynchronous I/O\u27e87\u27e9, including TCP and UDP\u27e88\u27e9 sockets, filesystem\u27e89\u27e9 operations, and process\u27e810\u27e9 and signal\u27e811\u27e9 management.\n  * A runtime\u27e812\u27e9 for executing asynchronous code, including a task scheduler, an I/O driver backed by the operating system\u2019s event queue (`epoll`, `kqueue`, `IOCP`, etc\u2026), and a high performance timer.\n\n\nGuide level documentation is found on the website\u27e813\u27e9.\n## \u00a7\u27e814\u27e9A Tour of Tokio\nTokio consists of a number of modules that provide a range of functionality essential for implementing asynchronous applications in Rust. In this section, we will take a brief tour of Tokio, summarizing the major APIs and their uses.\nThe easiest way to get started is to enable all features. Do this by enabling the `full` feature flag:\n```\ntokio = { version = \"1\", features = [\"full\"] }\n```\n\n#### \u00a7\u27e815\u27e9Authoring applications\nTokio is great for writing applications and most users in this case shouldn\u2019t worry too much about what features they should pick. If you\u2019re unsure, we suggest going with `full` to ensure that you don\u2019t run into any road blocks while you\u2019re building your application.\n##### \u00a7\u27e816\u27e9Example\nThis example shows the quickest way to get started with Tokio.\n```\ntokio = { version = \"1\", features = [\"full\"] }\n```\n\n#### \u00a7\u27e817\u27e9Authoring libraries\nAs a library author your goal should be to provide the lightest weight crate that is based on Tokio. To achieve this you should ensure that you only enable the features you need. This allows users to pick up your crate without having to enable unnecessary features.\n##### \u00a7\u27e818\u27e9Example\nThis example shows how you may want to import features for a library that just needs to `tokio::spawn` and use a `TcpStream`.\n```\ntokio = { version = \"1\", features = [\"rt\", \"net\"] }\n```\n\n### \u00a7\u27e84\u27e9Working With Tasks\nAsynchronous programs in Rust are based around lightweight, non-blocking units of execution called _tasks_\u27e84\u27e9. The `tokio::task`\u27e819\u27e9 module provides important tools for working with tasks:\n  * The `spawn`\u27e820\u27e9 function and `JoinHandle`\u27e821\u27e9 type, for scheduling a new task on the Tokio runtime and awaiting the output of a spawned task, respectively,\n  * Functions for running blocking operations\u27e822\u27e9 in an asynchronous task context.\n\n\nThe `tokio::task`\u27e819\u27e9 module is present only when the \u201crt\u201d feature flag is enabled.\nThe `tokio::sync`\u27e85\u27e9 module contains synchronization primitives to use when needing to communicate or share data. These include:\n  * channels (`oneshot`\u27e823\u27e9, `mpsc`\u27e824\u27e9, `watch`\u27e825\u27e9, and `broadcast`\u27e826\u27e9), for sending values between tasks,\n  * a non-blocking `Mutex`\u27e827\u27e9, for controlling access to a shared, mutable value,\n  * an asynchronous `Barrier`\u27e828\u27e9 type, for multiple tasks to synchronize before beginning a computation.\n\n\nThe `tokio::sync` module is present only when the \u201csync\u201d feature flag is enabled.\nThe `tokio::time`\u27e86\u27e9 module provides utilities for tracking time and scheduling work. This includes functions for setting timeouts\u27e829\u27e9 for tasks, sleeping\u27e830\u27e9 work to run in the future, or repeating an operation at an interval\u27e831\u27e9.\nIn order to use `tokio::time`, the \u201ctime\u201d feature flag must be enabled.\nFinally, Tokio provides a _runtime_ for executing asynchronous tasks. Most applications can use the [`#[tokio::main]`](https://docs.rs/tokio/latest/tokio/attr.main.html) macro to run their code on the Tokio runtime. However, this macro provides only basic configuration options. As an alternative, the `tokio::runtime`\u27e812\u27e9 module provides more powerful APIs for configuring and managing runtimes. You should use that module if the `#[tokio::main]` macro doesn\u2019t provide the functionality you need.\nUsing the runtime requires the \u201crt\u201d or \u201crt-multi-thread\u201d feature flags, to enable the current-thread single-threaded scheduler\u27e832\u27e9 and the multi-thread scheduler\u27e833\u27e9, respectively. See the `runtime` module documentation\u27e834\u27e9 for details. In addition, the \u201cmacros\u201d feature flag enables the `#[tokio::main]` and `#[tokio::test]` attributes.\n### \u00a7\u27e835\u27e9CPU-bound tasks and blocking code\nTokio is able to concurrently run many tasks on a few threads by repeatedly swapping the currently running task on each thread. However, this kind of swapping can only happen at `.await` points, so code that spends a long time without reaching an `.await` will prevent other tasks from running. To combat this, Tokio provides two kinds of threads: Core threads and blocking threads.\nThe core threads are where all asynchronous code runs, and Tokio will by default spawn one for each CPU core. You can use the environment variable `TOKIO_WORKER_THREADS` to override the default value.\nThe blocking threads are spawned on demand, can be used to run blocking code that would otherwise block other tasks from running and are kept alive when not used for a certain amount of time which can be configured with `thread_keep_alive`\u27e836\u27e9. Since it is not possible for Tokio to swap out blocking tasks, like it can do with asynchronous code, the upper limit on the number of blocking threads is very large. These limits can be configured on the `Builder`\u27e837\u27e9.\nTo spawn a blocking task, you should use the `spawn_blocking`\u27e838\u27e9 function.\n```\n#[tokio::main]\nasync fn main() {\n  // This is running on a core thread.\n  let blocking_task = tokio::task::spawn_blocking(|| {\n    // This is running on a blocking thread.\n    // Blocking here is ok.\n  });\n  // We can wait for the blocking task like this:\n  // If the blocking task panics, the unwrap below will propagate the\n  // panic.\n  blocking_task.await.unwrap();\n}\n```\n\nIf your code is CPU-bound and you wish to limit the number of threads used to run it, you should use a separate thread pool dedicated to CPU bound tasks. For example, you could consider using the rayon\u27e839\u27e9 library for CPU-bound tasks. It is also possible to create an extra Tokio runtime dedicated to CPU-bound tasks, but if you do this, you should be careful that the extra runtime runs _only_ CPU-bound tasks, as IO-bound tasks on that runtime will behave poorly.\nHint: If using rayon, you can use a `oneshot`\u27e823\u27e9 channel to send the result back to Tokio when the rayon task finishes.\n### \u00a7\u27e87\u27e9Asynchronous IO\nAs well as scheduling and running tasks, Tokio provides everything you need to perform input and output asynchronously.\nThe `tokio::io`\u27e840\u27e9 module provides Tokio\u2019s asynchronous core I/O primitives, the `AsyncRead`\u27e841\u27e9, `AsyncWrite`\u27e842\u27e9, and `AsyncBufRead`\u27e843\u27e9 traits. In addition, when the \u201cio-util\u201d feature flag is enabled, it also provides combinators and functions for working with these traits, forming as an asynchronous counterpart to `std::io`\u27e844\u27e9.\nTokio also includes APIs for performing various kinds of I/O and interacting with the operating system asynchronously. These include:\n  * `tokio::net`\u27e88\u27e9, which contains non-blocking versions of TCP\u27e845\u27e9, UDP\u27e846\u27e9, and Unix Domain Sockets\u27e847\u27e9 (enabled by the \u201cnet\u201d feature flag),\n  * `tokio::fs`\u27e89\u27e9, similar to `std::fs`\u27e848\u27e9 but for performing filesystem I/O asynchronously (enabled by the \u201cfs\u201d feature flag),\n  * `tokio::signal`\u27e811\u27e9, for asynchronously handling Unix and Windows OS signals (enabled by the \u201csignal\u201d feature flag),\n  * `tokio::process`\u27e810\u27e9, for spawning and managing child processes (enabled by the \u201cprocess\u201d feature flag).\n\n\n## \u00a7\u27e849\u27e9Examples\nA simple TCP echo server:\n```\nuse tokio::net::TcpListener;\nuse tokio::io::{AsyncReadExt, AsyncWriteExt};\n#[tokio::main]\nasync fn main() -> Result<(), Box<dyn std::error::Error>> {\n  let listener = TcpListener::bind(\"127.0.0.1:8080\").await?;\n  loop {\n    let (mut socket, _) = listener.accept().await?;\n    tokio::spawn(async move {\n      let mut buf = [0; 1024];\n      // In a loop, read data from the socket and write the data back.\n      loop {\n        let n = match socket.read(&mut buf).await {\n          // socket closed\n          Ok(0) => return,\n          Ok(n) => n,\n          Err(e) => {\n            eprintln!(\"failed to read from socket; err = {:?}\", e);\n            return;\n          }\n        };\n        // Write the data back\n        if let Err(e) = socket.write_all(&buf[0..n]).await {\n          eprintln!(\"failed to write to socket; err = {:?}\", e);\n          return;\n        }\n      }\n    });\n  }\n}\n```\n\n## \u00a7\u27e850\u27e9Feature flags\nTokio uses a set of feature flags\u27e851\u27e9 to reduce the amount of compiled code. It is possible to just enable certain features over others. By default, Tokio does not enable any features but allows one to enable a subset for their use case. Below is a list of the available feature flags. You may also notice above each function, struct and trait there is listed one or more feature flags that are required for that item to be used. If you are new to Tokio it is recommended that you use the `full` feature flag which will enable all public APIs. Beware though that this will pull in many extra dependencies that you may not need.\n  * `full`: Enables all features listed below except `test-util` and `tracing`.\n  * `rt`: Enables `tokio::spawn`, the current-thread scheduler, and non-scheduler utilities.\n  * `rt-multi-thread`: Enables the heavier, multi-threaded, work-stealing scheduler.\n  * `io-util`: Enables the IO based `Ext` traits.\n  * `io-std`: Enable `Stdout`, `Stdin` and `Stderr` types.\n  * `net`: Enables `tokio::net` types such as `TcpStream`, `UnixStream` and `UdpSocket`, as well as (on Unix-like systems) `AsyncFd` and (on FreeBSD) `PollAio`.\n  * `time`: Enables `tokio::time` types and allows the schedulers to enable the built in timer.\n  * `process`: Enables `tokio::process` types.\n  * `macros`: Enables `#[tokio::main]` and `#[tokio::test]` macros.\n  * `sync`: Enables all `tokio::sync` types.\n  * `signal`: Enables all `tokio::signal` types.\n  * `fs`: Enables `tokio::fs` types.\n  * `test-util`: Enables testing based infrastructure for the Tokio runtime.\n  * `parking_lot`: As a potential optimization, use the `_parking_lot_` crate\u2019s synchronization primitives internally. Also, this dependency is necessary to construct some of our primitives in a `const` context. `MSRV` may increase according to the `_parking_lot_` release in use.\n\n\n_Note:`AsyncRead` and `AsyncWrite` traits do not require any features and are always available._\n### \u00a7\u27e852\u27e9Unstable features\nSome feature flags are only available when specifying the `tokio_unstable` flag:\n  * `tracing`: Enables tracing events.\n\n\nLikewise, some parts of the API are only available with the same flag:\n  * `task::Builder`\u27e853\u27e9\n  * Some methods on `task::JoinSet`\u27e854\u27e9\n  * `runtime::RuntimeMetrics`\u27e855\u27e9\n  * `runtime::Builder::on_task_spawn`\u27e856\u27e9\n  * `runtime::Builder::on_task_terminate`\u27e857\u27e9\n  * `runtime::Builder::unhandled_panic`\u27e858\u27e9\n  * `runtime::TaskMeta`\u27e859\u27e9\n\n\nThis flag enables **unstable** features. The public API of these features may break in 1.x releases. To enable these features, the `--cfg tokio_unstable` argument must be passed to `rustc` when compiling. This serves to explicitly opt-in to features which may break semver conventions, since Cargo does not yet directly support such opt-ins\u27e860\u27e9.\nYou can specify it in your project\u2019s `.cargo/config.toml` file:\n```\n[build]\nrustflags = [\"--cfg\", \"tokio_unstable\"]\n```\n\nThe `[build]` section does **not** go in a `Cargo.toml` file. Instead it must be placed in the Cargo config file `.cargo/config.toml`. \nAlternatively, you can specify it with an environment variable:\n```\n## Many *nix shells:\nexport RUSTFLAGS=\"--cfg tokio_unstable\"\ncargo build\n```\n\n```\n## Windows PowerShell:\n$Env:RUSTFLAGS=\"--cfg tokio_unstable\"\ncargo build\n```\n\n## \u00a7\u27e861\u27e9Supported platforms\nTokio currently guarantees support for the following platforms:\n  * Linux\n  * Windows\n  * Android (API level 21)\n  * macOS\n  * iOS\n  * FreeBSD\n\n\nTokio will continue to support these platforms in the future. However, future releases may change requirements such as the minimum required libc version on Linux, the API level on Android, or the supported FreeBSD release.\nBeyond the above platforms, Tokio is intended to work on all platforms supported by the mio crate. You can find a longer list in mio\u2019s documentation\u27e862\u27e9. However, these additional platforms may become unsupported in the future.\nNote that Wine is considered to be a different platform from Windows. See mio\u2019s documentation for more information on Wine support.\n### \u00a7\u27e863\u27e9`WASM` support\nTokio has some limited support for the `WASM` platform. Without the `tokio_unstable` flag, the following features are supported:\n  * `sync`\n  * `macros`\n  * `io-util`\n  * `rt`\n  * `time`\n\n\nEnabling any other feature (including `full`) will cause a compilation failure.\nThe `time` module will only work on `WASM` platforms that have support for timers (e.g. wasm32-wasi). The timing functions will panic if used on a `WASM` platform that does not support timers.\nNote also that if the runtime becomes indefinitely idle, it will panic immediately instead of blocking forever. On platforms that don\u2019t support time, this means that the runtime can never be idle in any way.\n### \u00a7\u27e864\u27e9Unstable `WASM` support\nTokio also has unstable support for some additional `WASM` features. This requires the use of the `tokio_unstable` flag.\nUsing this flag enables the use of `tokio::net` on the wasm32-wasi target. However, not all methods are available on the networking types as `WASI` currently does not support the creation of new sockets from within `WASM`. Because of this, sockets must currently be created via the `FromRawFd` trait.\n## Re-exports\u00a7\u27e865\u27e9\n\n`pub use task::spawn[](https://docs.rs/tokio/latest/tokio/task/fn.spawn.html \"fn tokio::task::spawn\");``rt`\n\n## Modules\u00a7\u27e866\u27e9\n\ndoc\u27e867\u27e9\n    Types which are documented locally in the Tokio crate, but does not actually live here.\n\nfs\u27e89\u27e9`fs`\n    Asynchronous file utilities.\n\nio\u27e840\u27e9\n    Traits, helpers, and type definitions for asynchronous I/O functionality.\n\nnet\u27e88\u27e9\n    TCP/UDP/Unix bindings for `tokio`.\n\nprocess\u27e810\u27e9`process`\n    An implementation of asynchronous process management for Tokio.\n\nruntime\u27e812\u27e9`rt`\n    The Tokio runtime.\n\nsignal\u27e811\u27e9`signal`\n    Asynchronous signal handling for Tokio.\n\nstream\u27e868\u27e9\n    Due to the `Stream` trait\u2019s inclusion in `std` landing later than Tokio\u2019s 1.0 release, most of the Tokio stream utilities have been moved into the `tokio-stream`\u27e869\u27e9 crate.\n\nsync\u27e85\u27e9`sync`\n    Synchronization primitives for use in asynchronous contexts.\n\ntask\u27e819\u27e9\n    Asynchronous green-threads.\n\ntime\u27e86\u27e9`time`\n    Utilities for tracking time.\n## Macros\u00a7\u27e870\u27e9\n\njoin\u27e871\u27e9`macros`\n    Waits on multiple concurrent branches, returning when **all** branches complete.\n\npin\u27e872\u27e9\n    Pins a value on the stack.\n\nselect\u27e873\u27e9`macros`\n    Waits on multiple concurrent branches, returning when the **first** branch completes, cancelling the remaining branches.\n\ntask_local\u27e874\u27e9`rt`\n    Declares a new task-local key of type `tokio::task::LocalKey`\u27e875\u27e9.\n\ntry_join\u27e876\u27e9`macros`\n    Waits on multiple concurrent branches, returning when **all** branches complete with `Ok(_)` or on the first `Err(_)`.\n## Attribute Macros\u00a7\u27e877\u27e9\n\nmain\u27e878\u27e9`rt` and `macros`\n    Marks async function to be executed by the selected runtime. This macro helps set up a `Runtime` without requiring the user to use Runtime\u27e879\u27e9 or Builder\u27e837\u27e9 directly.\n\ntest\u27e880\u27e9`rt` and `macros`\n    Marks async function to be executed by runtime, suitable to test environment. This macro helps set up a `Runtime` without requiring the user to use Runtime\u27e879\u27e9 or Builder\u27e837\u27e9 directly.\n",
              "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://docs.rs/tokio/latest/settings.html: Settings\n\u27e82\u27e9 https://docs.rs/tokio/latest/help.html: Help\n\u27e83\u27e9 https://docs.rs/tokio/latest/src/tokio/lib.rs.html#1-698: Source\n\u27e84\u27e9 https://docs.rs/tokio/latest/tokio/#working-with-tasks: working with asynchronous tasks\n\u27e85\u27e9 https://docs.rs/tokio/latest/tokio/sync/index.html: mod tokio::sync - synchronization primitives and channels\n\u27e86\u27e9 https://docs.rs/tokio/latest/tokio/time/index.html: mod tokio::time - timeouts, sleeps, and intervals\n\u27e87\u27e9 https://docs.rs/tokio/latest/tokio/#asynchronous-io: performing asynchronous I/O\n\u27e88\u27e9 https://docs.rs/tokio/latest/tokio/net/index.html: mod tokio::net - TCP and UDP\n\u27e89\u27e9 https://docs.rs/tokio/latest/tokio/fs/index.html: mod tokio::fs - filesystem\n\u27e810\u27e9 https://docs.rs/tokio/latest/tokio/process/index.html: mod tokio::process - process\n\u27e811\u27e9 https://docs.rs/tokio/latest/tokio/signal/index.html: mod tokio::signal - signal\n\u27e812\u27e9 https://docs.rs/tokio/latest/tokio/runtime/index.html: mod tokio::runtime - runtime\n\u27e813\u27e9 https://tokio.rs/tokio/tutorial: website\n\u27e814\u27e9 https://docs.rs/tokio/latest/tokio/#a-tour-of-tokio: \u00a7\n\u27e815\u27e9 https://docs.rs/tokio/latest/tokio/#authoring-applications: \u00a7\n\u27e816\u27e9 https://docs.rs/tokio/latest/tokio/#example: \u00a7\n\u27e817\u27e9 https://docs.rs/tokio/latest/tokio/#authoring-libraries: \u00a7\n\u27e818\u27e9 https://docs.rs/tokio/latest/tokio/#example-1: \u00a7\n\u27e819\u27e9 https://docs.rs/tokio/latest/tokio/task/index.html: mod tokio::task - `tokio::task`\n\u27e820\u27e9 https://docs.rs/tokio/latest/tokio/task/fn.spawn.html: fn tokio::task::spawn - `spawn`\n\u27e821\u27e9 https://docs.rs/tokio/latest/tokio/task/struct.JoinHandle.html: struct tokio::task::JoinHandle - `JoinHandle`\n\u27e822\u27e9 https://docs.rs/tokio/latest/tokio/task/index.html#blocking-and-yielding: running blocking operations\n\u27e823\u27e9 https://docs.rs/tokio/latest/tokio/sync/oneshot/index.html: mod tokio::sync::oneshot - `oneshot`\n\u27e824\u27e9 https://docs.rs/tokio/latest/tokio/sync/mpsc/index.html: mod tokio::sync::mpsc - `mpsc`\n\u27e825\u27e9 https://docs.rs/tokio/latest/tokio/sync/watch/index.html: mod tokio::sync::watch - `watch`\n\u27e826\u27e9 https://docs.rs/tokio/latest/tokio/sync/broadcast/index.html: mod tokio::sync::broadcast - `broadcast`\n\u27e827\u27e9 https://docs.rs/tokio/latest/tokio/sync/struct.Mutex.html: struct tokio::sync::Mutex - `Mutex`\n\u27e828\u27e9 https://docs.rs/tokio/latest/tokio/sync/struct.Barrier.html: struct tokio::sync::Barrier - `Barrier`\n\u27e829\u27e9 https://docs.rs/tokio/latest/tokio/time/fn.timeout.html: fn tokio::time::timeout - timeouts\n\u27e830\u27e9 https://docs.rs/tokio/latest/tokio/time/fn.sleep.html: fn tokio::time::sleep - sleeping\n\u27e831\u27e9 https://docs.rs/tokio/latest/tokio/time/fn.interval.html: fn tokio::time::interval - repeating an operation at an interval\n\u27e832\u27e9 https://docs.rs/tokio/latest/tokio/runtime/index.html#current-thread-scheduler: single-threaded scheduler\n\u27e833\u27e9 https://docs.rs/tokio/latest/tokio/runtime/index.html#multi-thread-scheduler: multi-thread scheduler\n\u27e834\u27e9 https://docs.rs/tokio/latest/tokio/runtime/index.html#runtime-scheduler: `runtime` module documentation\n\u27e835\u27e9 https://docs.rs/tokio/latest/tokio/#cpu-bound-tasks-and-blocking-code: \u00a7\n\u27e836\u27e9 https://docs.rs/tokio/latest/tokio/runtime/struct.Builder.html#method.thread_keep_alive: method tokio::runtime::Builder::thread_keep_alive - `thread_keep_alive`\n\u27e837\u27e9 https://docs.rs/tokio/latest/tokio/runtime/struct.Builder.html: struct tokio::runtime::Builder - `Builder`\n\u27e838\u27e9 https://docs.rs/tokio/latest/tokio/task/fn.spawn_blocking.html: fn tokio::task::spawn_blocking - `spawn_blocking`\n\u27e839\u27e9 https://docs.rs/rayon: rayon\n\u27e840\u27e9 https://docs.rs/tokio/latest/tokio/io/index.html: mod tokio::io - `tokio::io`\n\u27e841\u27e9 https://docs.rs/tokio/latest/tokio/io/trait.AsyncRead.html: trait tokio::io::AsyncRead - `AsyncRead`\n\u27e842\u27e9 https://docs.rs/tokio/latest/tokio/io/trait.AsyncWrite.html: trait tokio::io::AsyncWrite - `AsyncWrite`\n\u27e843\u27e9 https://docs.rs/tokio/latest/tokio/io/trait.AsyncBufRead.html: trait tokio::io::AsyncBufRead - `AsyncBufRead`\n\u27e844\u27e9 https://doc.rust-lang.org/nightly/std/io/index.html: mod std::io - `std::io`\n\u27e845\u27e9 https://docs.rs/tokio/latest/tokio/net/tcp/index.html: mod tokio::net::tcp - TCP\n\u27e846\u27e9 https://docs.rs/tokio/latest/tokio/net/struct.UdpSocket.html: struct tokio::net::UdpSocket - UDP\n\u27e847\u27e9 https://docs.rs/tokio/latest/tokio/net/unix/index.html: mod tokio::net::unix - Unix Domain Sockets\n\u27e848\u27e9 https://doc.rust-lang.org/nightly/std/fs/index.html: mod std::fs - `std::fs`\n\u27e849\u27e9 https://docs.rs/tokio/latest/tokio/#examples: \u00a7\n\u27e850\u27e9 https://docs.rs/tokio/latest/tokio/#feature-flags: \u00a7\n\u27e851\u27e9 https://doc.rust-lang.org/cargo/reference/manifest.html#the-features-section: feature flags\n\u27e852\u27e9 https://docs.rs/tokio/latest/tokio/#unstable-features: \u00a7\n\u27e853\u27e9 https://docs.rs/tokio/latest/tokio/task/struct.Builder.html: struct tokio::task::Builder - `task::Builder`\n\u27e854\u27e9 https://docs.rs/tokio/latest/tokio/task/struct.JoinSet.html: struct tokio::task::JoinSet - `task::JoinSet`\n\u27e855\u27e9 https://docs.rs/tokio/latest/tokio/runtime/struct.RuntimeMetrics.html: struct tokio::runtime::RuntimeMetrics - `runtime::RuntimeMetrics`\n\u27e856\u27e9 https://docs.rs/tokio/latest/tokio/runtime/struct.Builder.html#method.on_task_spawn: method tokio::runtime::Builder::on_task_spawn - `runtime::Builder::on_task_spawn`\n\u27e857\u27e9 https://docs.rs/tokio/latest/tokio/runtime/struct.Builder.html#method.on_task_terminate: method tokio::runtime::Builder::on_task_terminate - `runtime::Builder::on_task_terminate`\n\u27e858\u27e9 https://docs.rs/tokio/latest/tokio/runtime/struct.Builder.html#method.unhandled_panic: method tokio::runtime::Builder::unhandled_panic - `runtime::Builder::unhandled_panic`\n\u27e859\u27e9 https://docs.rs/tokio/latest/tokio/runtime/struct.TaskMeta.html: struct tokio::runtime::TaskMeta - `runtime::TaskMeta`\n\u27e860\u27e9 https://internals.rust-lang.org/t/feature-request-unstable-opt-in-non-transitive-crate-features/16193#why-not-a-crate-feature-2: does not yet directly support such opt-ins\n\u27e861\u27e9 https://docs.rs/tokio/latest/tokio/#supported-platforms: \u00a7\n\u27e862\u27e9 https://crates.io/crates/mio#platforms: in mio\u2019s documentation\n\u27e863\u27e9 https://docs.rs/tokio/latest/tokio/#wasm-support: \u00a7\n\u27e864\u27e9 https://docs.rs/tokio/latest/tokio/#unstable-wasm-support: \u00a7\n\u27e865\u27e9 https://docs.rs/tokio/latest/tokio/#reexports: \u00a7\n\u27e866\u27e9 https://docs.rs/tokio/latest/tokio/#modules: \u00a7\n\u27e867\u27e9 https://docs.rs/tokio/latest/tokio/doc/index.html: mod tokio::doc - doc\n\u27e868\u27e9 https://docs.rs/tokio/latest/tokio/stream/index.html: mod tokio::stream - stream\n\u27e869\u27e9 https://docs.rs/tokio-stream: `tokio-stream`\n\u27e870\u27e9 https://docs.rs/tokio/latest/tokio/#macros: \u00a7\n\u27e871\u27e9 https://docs.rs/tokio/latest/tokio/macro.join.html: macro tokio::join - join\n\u27e872\u27e9 https://docs.rs/tokio/latest/tokio/macro.pin.html: macro tokio::pin - pin\n\u27e873\u27e9 https://docs.rs/tokio/latest/tokio/macro.select.html: macro tokio::select - select\n\u27e874\u27e9 https://docs.rs/tokio/latest/tokio/macro.task_local.html: macro tokio::task_local - task_local\n\u27e875\u27e9 https://docs.rs/tokio/latest/tokio/task/struct.LocalKey.html: struct tokio::task::LocalKey - `tokio::task::LocalKey`\n\u27e876\u27e9 https://docs.rs/tokio/latest/tokio/macro.try_join.html: macro tokio::try_join - try_join\n\u27e877\u27e9 https://docs.rs/tokio/latest/tokio/#attributes: \u00a7\n\u27e878\u27e9 https://docs.rs/tokio/latest/tokio/attr.main.html: attr tokio::main - main\n\u27e879\u27e9 https://docs.rs/tokio/latest/tokio/runtime/struct.Runtime.html: Runtime\n\u27e880\u27e9 https://docs.rs/tokio/latest/tokio/attr.test.html: attr tokio::test - test\n",
              "fit_markdown": "",
              "fit_html": ""
            },
            "structured_data": {},
            "quality_score": 4.0,
            "extraction_method": "crawl4ai",
            "error": null,
            "metadata": {
              "doc_type": "docs",
              "content_length": 23235,
              "has_structured_data": false,
              "crawl_success": true
            },
            "timestamp": "112137.7573767"
          },
          "lib_rs": {
            "url": "https://lib.rs/crates/tokio",
            "title": "Untitled",
            "content": {
              "raw_markdown": "###  [164 releases](https://lib.rs/crates/tokio/versions) (101 stable)\n1.45.1 |  May 24, 2025   \n---|---  \n1.44.2 |  Apr 5, 2025   \n1.44.1 |  Mar 13, 2025   \n1.42.0 |  Dec 3, 2024   \n0.0.0 |  Jul 1, 2016   \n#**4** in [Asynchronous](https://lib.rs/asynchronous \"Crates to help you deal with events independently of the main program flow, using techniques like futures, promises, waiting, or eventing.\")\nDownload history 3737875/week @ 2025-03-10 4026694/week @ 2025-03-17 3980568/week @ 2025-03-24 3548016/week @ 2025-03-31 3833083/week @ 2025-04-07 3453852/week @ 2025-04-14 3332461/week @ 2025-04-21 3253139/week @ 2025-04-28 3451764/week @ 2025-05-05 3528699/week @ 2025-05-12 3528465/week @ 2025-05-19 3331305/week @ 2025-05-26 3667069/week @ 2025-06-02 3811845/week @ 2025-06-09 4147915/week @ 2025-06-16 3865045/week @ 2025-06-23\n**15,690,823** downloads per month Used in [**41,885** crates (28,848 directly)](https://lib.rs/crates/tokio/rev)\n**MIT** license \n3MB  **44K** SLoC\n# Tokio\nA runtime for writing reliable, asynchronous, and slim applications with the Rust programming language. It is:\n  * **Fast** : Tokio's zero-cost abstractions give you bare-metal performance.\n  * **Reliable** : Tokio leverages Rust's ownership, type system, and concurrency model to reduce bugs and ensure thread safety.\n  * **Scalable** : Tokio has a minimal footprint, and handles backpressure and cancellation naturally.\n\n\n[![Crates.io](https://img.shields.io/crates/v/tokio.svg)](https://crates.io/crates/tokio) [![MIT licensed](https://img.shields.io/badge/license-MIT-blue.svg)](https://github.com/tokio-rs/tokio/blob/master/LICENSE) [![Build Status](https://img.gs/czjpqfbdkz/full/https://github.com/tokio-rs/tokio/workflows/CI/badge.svg)](https://github.com/tokio-rs/tokio/actions?query=workflow%3ACI+branch%3Amaster) [![Discord chat](https://img.shields.io/discord/500028886025895936.svg?logo=discord&style=flat-square)](https://discord.gg/tokio)\n[Website](https://tokio.rs) | [Guides](https://tokio.rs/tokio/tutorial) | [API Docs](https://docs.rs/tokio/latest/tokio) | [Chat](https://discord.gg/tokio)\n## Overview\nTokio is an event-driven, non-blocking I/O platform for writing asynchronous applications with the Rust programming language. At a high level, it provides a few major components:\n  * A multithreaded, work-stealing based task [scheduler](https://docs.rs/tokio/latest/tokio/runtime/index.html).\n  * A reactor backed by the operating system's event queue (epoll, kqueue, IOCP, etc...).\n  * Asynchronous [TCP and UDP](https://docs.rs/tokio/latest/tokio/net/index.html) sockets.\n\n\nThese components provide the runtime components necessary for building an asynchronous application.\n## Example\nA basic TCP echo server with Tokio.\nMake sure you activated the full features of the tokio crate on Cargo.toml:\n```\n```[``dependencies``]`\n`tokio = { version = \"1.45.1\", features ``=` ``[```\"`full`\"```]`` }\n``\n```\n\nThen, on your main.rs:\n```\n``use` `tokio`::```net`::``TcpListener`;`\n`use` `tokio`::```io`::````{`AsyncReadExt`,` AsyncWriteExt```}```;`\n``#``[``tokio`::`main``]``\nasync ``fn` `main`````(````)```` ``->` ``Result``<``(``)`, `Box``<`dyn `std`::```error`::``Error`>``>``` ````{`\n  `let` listener `=` `TcpListener`::``bind`(```\"`127.0.0.1:8080`\"```)``.`await`?``;`\n  `loop` `{`\n    `let` `(``mut` socket`,` `_``)` `=` listener`.``accept``(``)``.`await`?``;`\n    `tokio`::``spawn`(`async `move` `{`\n      `let` `mut` buf `=` `[``0``;` `1024``]``;`\n      ``//` In a loop, read data from the socket and write the data back.`\n      `loop` `{`\n        `let` n `=` `match` socket`.``read``(``&``mut` buf`)``.`await `{`\n          ``//` socket closed`\n          `Ok``(``0``)` `=>` `return``,`\n          `Ok``(`n`)` `=>` n`,`\n          `Err``(`e`)` `=>` `{`\n            `eprintln!``(```\"`failed to read from socket; err = `{:?}``\"```,` e`)``;`\n            `return``;`\n          `}`\n        `}``;`\n        ``//` Write the data back`\n        `if` `let` `Err``(`e`)` `=` socket`.``write_all``(``&`buf`[``0``..`n`]``)``.`await `{`\n          `eprintln!``(```\"`failed to write to socket; err = `{:?}``\"```,` e`)``;`\n          `return``;`\n        `}`\n      `}`\n    `}``)``;`\n  `}`\n```}```\n`\n```\n\nMore examples can be found [here](https://github.com/tokio-rs/tokio/tree/master/examples). For a larger \"real world\" example, see the [mini-redis](https://github.com/tokio-rs/mini-redis/) repository.\nTo see a list of the available features flags that can be enabled, check our [docs](https://docs.rs/tokio/#feature-flags).\n## Getting Help\nFirst, see if the answer to your question can be found in the [Guides](https://tokio.rs/tokio/tutorial) or the [API documentation](https://docs.rs/tokio/latest/tokio). If the answer is not there, there is an active community in the [Tokio Discord server](https://discord.gg/tokio). We would be happy to try to answer your question. You can also ask your question on [the discussions page](https://github.com/tokio-rs/tokio/discussions).\n## Contributing\n\ud83c\udf88 Thanks for your help improving the project! We are so happy to have you! We have a [contributing guide](https://github.com/tokio-rs/tokio/blob/master/CONTRIBUTING.md) to help you get involved in the Tokio project.\n## Related Projects\nIn addition to the crates in this repository, the Tokio project also maintains several other libraries, including:\n  * [``axum``](https://github.com/tokio-rs/axum): A web application framework that focuses on ergonomics and modularity.\n  * [``hyper``](https://github.com/hyperium/hyper): A fast and correct HTTP/1.1 and HTTP/2 implementation for Rust.\n  * [``tonic``](https://github.com/hyperium/tonic): A gRPC over HTTP/2 implementation focused on high performance, interoperability, and flexibility.\n  * [``warp``](https://github.com/seanmonstar/warp): A super-easy, composable, web server framework for warp speeds.\n  * [``tower``](https://github.com/tower-rs/tower): A library of modular and reusable components for building robust networking clients and servers.\n  * [``tracing``](https://github.com/tokio-rs/tracing) (formerly ``tokio-trace``): A framework for application-level tracing and async-aware diagnostics.\n  * [``mio``](https://github.com/tokio-rs/mio): A low-level, cross-platform abstraction over OS I/O APIs that powers ``tokio``.\n  * [``bytes``](https://github.com/tokio-rs/bytes): Utilities for working with bytes, including efficient byte buffers.\n  * [``loom``](https://github.com/tokio-rs/loom): A testing tool for concurrent Rust code.\n\n\n## Changelog\nThe Tokio repository contains multiple crates. Each crate has its own changelog.\n  * ``tokio`` - [view changelog](https://github.com/tokio-rs/tokio/blob/master/tokio/CHANGELOG.md)\n  * ``tokio-util`` - [view changelog](https://github.com/tokio-rs/tokio/blob/master/tokio-util/CHANGELOG.md)\n  * ``tokio-stream`` - [view changelog](https://github.com/tokio-rs/tokio/blob/master/tokio-stream/CHANGELOG.md)\n  * ``tokio-macros`` - [view changelog](https://github.com/tokio-rs/tokio/blob/master/tokio-macros/CHANGELOG.md)\n  * ``tokio-test`` - [view changelog](https://github.com/tokio-rs/tokio/blob/master/tokio-test/CHANGELOG.md)\n\n\n## Supported Rust Versions\nTokio will keep a rolling MSRV (minimum supported rust version) policy of **at least** 6 months. When increasing the MSRV, the new Rust version must have been released at least six months ago. The current MSRV is 1.70.\nNote that the MSRV is not increased automatically, and only as part of a minor release. The MSRV history for past minor releases can be found below:\n  * 1.39 to now - Rust 1.70\n  * 1.30 to 1.38 - Rust 1.63\n  * 1.27 to 1.29 - Rust 1.56\n  * 1.17 to 1.26 - Rust 1.49\n  * 1.15 to 1.16 - Rust 1.46\n  * 1.0 to 1.14 - Rust 1.45\n\n\nNote that although we try to avoid the situation where a dependency transitively increases the MSRV of Tokio, we do not guarantee that this does not happen. However, every minor release will have some set of versions of dependencies that works with the MSRV of that minor release.\n## Release schedule\nTokio doesn't follow a fixed release schedule, but we typically make one minor release each month. We make patch releases for bugfixes as necessary.\n## Bug patching policy\nFor the purposes of making patch releases with bugfixes, we have designated certain minor releases as LTS (long term support) releases. Whenever a bug warrants a patch release with a fix for the bug, it will be backported and released as a new patch release for each LTS minor version. Our current LTS releases are:\n  * ```1.``38``.`x`` - LTS release until July 2025. (MSRV 1.63)\n  * ```1.``43``.`x`` - LTS release until March 2026. (MSRV 1.70)\n\n\nEach LTS release will continue to receive backported fixes for at least a year. If you wish to use a fixed minor release in your project, we recommend that you use an LTS release.\nTo use a fixed minor version, you can specify the version with a tilde. For example, to specify that you wish to use the newest ```1.``32``.`x`` patch release, you can use the following dependency specification:\n```\n`tokio = { version = \"~1.38\", features = [...] }\n`\n```\n\n### Previous LTS releases\n  * ```1.``8``.`x`` - LTS release until February 2022.\n  * ```1.``14``.`x`` - LTS release until June 2022.\n  * ```1.``18``.`x`` - LTS release until June 2023.\n  * ```1.``20``.`x`` - LTS release until September 2023.\n  * ```1.``25``.`x`` - LTS release until March 2024.\n  * ```1.``32``.`x`` - LTS release until September 2024.\n  * ```1.``36``.`x`` - LTS release until March 2025.\n\n\n## License\nThis project is licensed under the [MIT license](https://github.com/tokio-rs/tokio/blob/master/LICENSE).\n### Contribution\nUnless you explicitly state otherwise, any contribution intentionally submitted for inclusion in Tokio by you, shall be licensed as MIT, without any additional terms or conditions.\n#### Dependencies\n~0\u201310MB  ~98K SLoC\n  * [backtrace](https://lib.rs/crates/backtrace \"0.3.58\") tokio_taskdump\n  * [io-util?](https://lib.rs/crates/tokio/features#feature-io-util \"optional feature\") [bytes](https://lib.rs/crates/bytes \"1.2.1\")\n  * [net?](https://lib.rs/crates/tokio/features#feature-net \"optional feature\") [libc](https://lib.rs/crates/libc \"0.2.168\") unix\n  * [net?](https://lib.rs/crates/tokio/features#feature-net \"optional feature\") [process?](https://lib.rs/crates/tokio/features#feature-process \"optional feature\") [signal?](https://lib.rs/crates/tokio/features#feature-signal \"optional feature\") [mio](https://lib.rs/crates/mio \"1.0.1\")\n  * [net?](https://lib.rs/crates/tokio/features#feature-net \"optional feature\") [socket2](https://lib.rs/crates/socket2 \"0.5.5\")[+all](https://lib.rs/crates/socket2/features#feature-all) not wasm\n  * [net?](https://lib.rs/crates/tokio/features#feature-net \"optional feature\") [process?](https://lib.rs/crates/tokio/features#feature-process \"optional feature\") [signal?](https://lib.rs/crates/tokio/features#feature-signal \"optional feature\") [windows-sys](https://lib.rs/crates/windows-sys \"obsolete\") 0.52 win\n  * [process?](https://lib.rs/crates/tokio/features#feature-process \"optional feature\") [signal-hook-registry](https://lib.rs/crates/signal-hook-registry \"1.1.1\") unix\n  * [full?](https://lib.rs/crates/tokio/features#feature-full \"optional feature\") [parking_lot](https://lib.rs/crates/parking_lot \"0.12.0\")\n  * [pin-project-lite](https://lib.rs/crates/pin-project-lite \"0.2.11\")\n  * [macros?](https://lib.rs/crates/tokio/features#feature-macros \"optional feature\") [tokio-macros](https://lib.rs/crates/tokio-macros \"~2.5.0\")\n  * [ optional ](https://lib.rs/crates/tokio/features#feature-tracing \"tracing is optional feature\") [tracing](https://lib.rs/crates/tracing \"0.1.29\")[+std](https://lib.rs/crates/tracing/features#feature-std) tokio_unstable\n\n\n  * dev  [async-stream](https://lib.rs/crates/async-stream \"0.3\")\n  * dev  [futures](https://lib.rs/crates/futures \"0.3.0\")[+async-await](https://lib.rs/crates/futures/features#feature-async-await)\n  * dev  [futures-concurrency](https://lib.rs/crates/futures-concurrency \"7.6.3\")\n  * dev  [mockall](https://lib.rs/crates/mockall \"new\") 0.13\n  * dev  [proptest](https://lib.rs/crates/proptest \"1\") not wasm\n  * dev  [rand](https://lib.rs/crates/rand \"outdated\") 0.8 not wasm not unknown\n  * dev  [tempfile](https://lib.rs/crates/tempfile \"3.1.0\") not wasm\n  * dev  [tokio-stream](https://lib.rs/crates/tokio-stream \"0.1\")\n  * dev  [tokio-test](https://lib.rs/crates/tokio-test \"0.4.0\")\n  * dev  [loom](https://lib.rs/crates/loom \"new\") 0.7[+futures](https://lib.rs/crates/loom/features#feature-futures)[+checkpoint](https://lib.rs/crates/loom/features#feature-checkpoint) loom\n  * dev  [mio-aio](https://lib.rs/crates/mio-aio \"new\") 1.0[+tokio](https://lib.rs/crates/mio-aio/features#feature-tokio) freebsd\n  * dev  [nix](https://lib.rs/crates/nix \"obsolete\") 0.29[+aio](https://lib.rs/crates/nix/features#feature-aio)[+fs](https://lib.rs/crates/nix/features#feature-fs)[+socket](https://lib.rs/crates/nix/features#feature-socket) unix\n  * dev  [tracing-mock](https://lib.rs/crates/tracing-mock \"= 0.1.0-beta.1\") tokio_unstable atomic 64\n  * dev  [wasm-bindgen-test](https://lib.rs/crates/wasm-bindgen-test \"0.3.0\") wasm not wasi\n\n\n#### [Other features](https://lib.rs/crates/tokio/features)\n  * [fs](https://lib.rs/crates/tokio/features#feature-fs)\n  * [io-std](https://lib.rs/crates/tokio/features#feature-io-std)\n  * [rt](https://lib.rs/crates/tokio/features#feature-rt)\n  * [rt-multi-thread](https://lib.rs/crates/tokio/features#feature-rt-multi-thread)\n  * [sync](https://lib.rs/crates/tokio/features#feature-sync)\n  * [test-util](https://lib.rs/crates/tokio/features#feature-test-util)\n  * [time](https://lib.rs/crates/tokio/features#feature-time)\n\n\n  *[SLoC]: approx. additional lines of code\n",
              "markdown_with_citations": "###  164 releases\u27e81\u27e9 (101 stable)\n1.45.1 |  May 24, 2025   \n---|---  \n1.44.2 |  Apr 5, 2025   \n1.44.1 |  Mar 13, 2025   \n1.42.0 |  Dec 3, 2024   \n0.0.0 |  Jul 1, 2016   \n#**4** in Asynchronous\u27e82\u27e9\nDownload history 3737875/week @ 2025-03-10 4026694/week @ 2025-03-17 3980568/week @ 2025-03-24 3548016/week @ 2025-03-31 3833083/week @ 2025-04-07 3453852/week @ 2025-04-14 3332461/week @ 2025-04-21 3253139/week @ 2025-04-28 3451764/week @ 2025-05-05 3528699/week @ 2025-05-12 3528465/week @ 2025-05-19 3331305/week @ 2025-05-26 3667069/week @ 2025-06-02 3811845/week @ 2025-06-09 4147915/week @ 2025-06-16 3865045/week @ 2025-06-23\n**15,690,823** downloads per month Used in **41,885** crates (28,848 directly)\u27e83\u27e9\n**MIT** license \n3MB  **44K** SLoC\n# Tokio\nA runtime for writing reliable, asynchronous, and slim applications with the Rust programming language. It is:\n  * **Fast** : Tokio's zero-cost abstractions give you bare-metal performance.\n  * **Reliable** : Tokio leverages Rust's ownership, type system, and concurrency model to reduce bugs and ensure thread safety.\n  * **Scalable** : Tokio has a minimal footprint, and handles backpressure and cancellation naturally.\n\n\n![Crates.io\u27e84\u27e9](https://crates.io/crates/tokio) ![MIT licensed\u27e85\u27e9](https://github.com/tokio-rs/tokio/blob/master/LICENSE) ![Build Status\u27e86\u27e9](https://github.com/tokio-rs/tokio/actions?query=workflow%3ACI+branch%3Amaster) ![Discord chat\u27e87\u27e9](https://discord.gg/tokio)\nWebsite\u27e88\u27e9 | Guides\u27e89\u27e9 | API Docs\u27e810\u27e9 | Chat\u27e811\u27e9\n## Overview\nTokio is an event-driven, non-blocking I/O platform for writing asynchronous applications with the Rust programming language. At a high level, it provides a few major components:\n  * A multithreaded, work-stealing based task scheduler\u27e812\u27e9.\n  * A reactor backed by the operating system's event queue (epoll, kqueue, IOCP, etc...).\n  * Asynchronous TCP and UDP\u27e813\u27e9 sockets.\n\n\nThese components provide the runtime components necessary for building an asynchronous application.\n## Example\nA basic TCP echo server with Tokio.\nMake sure you activated the full features of the tokio crate on Cargo.toml:\n```\n```[``dependencies``]`\n`tokio = { version = \"1.45.1\", features ``=` ``[```\"`full`\"```]`` }\n``\n```\n\nThen, on your main.rs:\n```\n``use` `tokio`::```net`::``TcpListener`;`\n`use` `tokio`::```io`::````{`AsyncReadExt`,` AsyncWriteExt```}```;`\n``#``[``tokio`::`main``]``\nasync ``fn` `main`````(````)```` ``->` ``Result``<``(``)`, `Box``<`dyn `std`::```error`::``Error`>``>``` ````{`\n  `let` listener `=` `TcpListener`::``bind`(```\"`127.0.0.1:8080`\"```)``.`await`?``;`\n  `loop` `{`\n    `let` `(``mut` socket`,` `_``)` `=` listener`.``accept``(``)``.`await`?``;`\n    `tokio`::``spawn`(`async `move` `{`\n      `let` `mut` buf `=` `[``0``;` `1024``]``;`\n      ``//` In a loop, read data from the socket and write the data back.`\n      `loop` `{`\n        `let` n `=` `match` socket`.``read``(``&``mut` buf`)``.`await `{`\n          ``//` socket closed`\n          `Ok``(``0``)` `=>` `return``,`\n          `Ok``(`n`)` `=>` n`,`\n          `Err``(`e`)` `=>` `{`\n            `eprintln!``(```\"`failed to read from socket; err = `{:?}``\"```,` e`)``;`\n            `return``;`\n          `}`\n        `}``;`\n        ``//` Write the data back`\n        `if` `let` `Err``(`e`)` `=` socket`.``write_all``(``&`buf`[``0``..`n`]``)``.`await `{`\n          `eprintln!``(```\"`failed to write to socket; err = `{:?}``\"```,` e`)``;`\n          `return``;`\n        `}`\n      `}`\n    `}``)``;`\n  `}`\n```}```\n`\n```\n\nMore examples can be found here\u27e814\u27e9. For a larger \"real world\" example, see the mini-redis\u27e815\u27e9 repository.\nTo see a list of the available features flags that can be enabled, check our docs\u27e816\u27e9.\n## Getting Help\nFirst, see if the answer to your question can be found in the Guides\u27e89\u27e9 or the API documentation\u27e810\u27e9. If the answer is not there, there is an active community in the Tokio Discord server\u27e811\u27e9. We would be happy to try to answer your question. You can also ask your question on the discussions page\u27e817\u27e9.\n## Contributing\n\ud83c\udf88 Thanks for your help improving the project! We are so happy to have you! We have a contributing guide\u27e818\u27e9 to help you get involved in the Tokio project.\n## Related Projects\nIn addition to the crates in this repository, the Tokio project also maintains several other libraries, including:\n  * ``axum``\u27e819\u27e9: A web application framework that focuses on ergonomics and modularity.\n  * ``hyper``\u27e820\u27e9: A fast and correct HTTP/1.1 and HTTP/2 implementation for Rust.\n  * ``tonic``\u27e821\u27e9: A gRPC over HTTP/2 implementation focused on high performance, interoperability, and flexibility.\n  * ``warp``\u27e822\u27e9: A super-easy, composable, web server framework for warp speeds.\n  * ``tower``\u27e823\u27e9: A library of modular and reusable components for building robust networking clients and servers.\n  * ``tracing``\u27e824\u27e9 (formerly ``tokio-trace``): A framework for application-level tracing and async-aware diagnostics.\n  * ``mio``\u27e825\u27e9: A low-level, cross-platform abstraction over OS I/O APIs that powers ``tokio``.\n  * ``bytes``\u27e826\u27e9: Utilities for working with bytes, including efficient byte buffers.\n  * ``loom``\u27e827\u27e9: A testing tool for concurrent Rust code.\n\n\n## Changelog\nThe Tokio repository contains multiple crates. Each crate has its own changelog.\n  * ``tokio`` - view changelog\u27e828\u27e9\n  * ``tokio-util`` - view changelog\u27e829\u27e9\n  * ``tokio-stream`` - view changelog\u27e830\u27e9\n  * ``tokio-macros`` - view changelog\u27e831\u27e9\n  * ``tokio-test`` - view changelog\u27e832\u27e9\n\n\n## Supported Rust Versions\nTokio will keep a rolling MSRV (minimum supported rust version) policy of **at least** 6 months. When increasing the MSRV, the new Rust version must have been released at least six months ago. The current MSRV is 1.70.\nNote that the MSRV is not increased automatically, and only as part of a minor release. The MSRV history for past minor releases can be found below:\n  * 1.39 to now - Rust 1.70\n  * 1.30 to 1.38 - Rust 1.63\n  * 1.27 to 1.29 - Rust 1.56\n  * 1.17 to 1.26 - Rust 1.49\n  * 1.15 to 1.16 - Rust 1.46\n  * 1.0 to 1.14 - Rust 1.45\n\n\nNote that although we try to avoid the situation where a dependency transitively increases the MSRV of Tokio, we do not guarantee that this does not happen. However, every minor release will have some set of versions of dependencies that works with the MSRV of that minor release.\n## Release schedule\nTokio doesn't follow a fixed release schedule, but we typically make one minor release each month. We make patch releases for bugfixes as necessary.\n## Bug patching policy\nFor the purposes of making patch releases with bugfixes, we have designated certain minor releases as LTS (long term support) releases. Whenever a bug warrants a patch release with a fix for the bug, it will be backported and released as a new patch release for each LTS minor version. Our current LTS releases are:\n  * ```1.``38``.`x`` - LTS release until July 2025. (MSRV 1.63)\n  * ```1.``43``.`x`` - LTS release until March 2026. (MSRV 1.70)\n\n\nEach LTS release will continue to receive backported fixes for at least a year. If you wish to use a fixed minor release in your project, we recommend that you use an LTS release.\nTo use a fixed minor version, you can specify the version with a tilde. For example, to specify that you wish to use the newest ```1.``32``.`x`` patch release, you can use the following dependency specification:\n```\n`tokio = { version = \"~1.38\", features = [...] }\n`\n```\n\n### Previous LTS releases\n  * ```1.``8``.`x`` - LTS release until February 2022.\n  * ```1.``14``.`x`` - LTS release until June 2022.\n  * ```1.``18``.`x`` - LTS release until June 2023.\n  * ```1.``20``.`x`` - LTS release until September 2023.\n  * ```1.``25``.`x`` - LTS release until March 2024.\n  * ```1.``32``.`x`` - LTS release until September 2024.\n  * ```1.``36``.`x`` - LTS release until March 2025.\n\n\n## License\nThis project is licensed under the MIT license\u27e833\u27e9.\n### Contribution\nUnless you explicitly state otherwise, any contribution intentionally submitted for inclusion in Tokio by you, shall be licensed as MIT, without any additional terms or conditions.\n#### Dependencies\n~0\u201310MB  ~98K SLoC\n  * backtrace\u27e834\u27e9 tokio_taskdump\n  * io-util?\u27e835\u27e9 bytes\u27e836\u27e9\n  * net?\u27e837\u27e9 libc\u27e838\u27e9 unix\n  * net?\u27e837\u27e9 process?\u27e839\u27e9 signal?\u27e840\u27e9 mio\u27e841\u27e9\n  * net?\u27e837\u27e9 socket2\u27e842\u27e9+all\u27e843\u27e9 not wasm\n  * net?\u27e837\u27e9 process?\u27e839\u27e9 signal?\u27e840\u27e9 windows-sys\u27e844\u27e9 0.52 win\n  * process?\u27e839\u27e9 signal-hook-registry\u27e845\u27e9 unix\n  * full?\u27e846\u27e9 parking_lot\u27e847\u27e9\n  * pin-project-lite\u27e848\u27e9\n  * macros?\u27e849\u27e9 tokio-macros\u27e850\u27e9\n  *  optional \u27e851\u27e9 tracing\u27e852\u27e9+std\u27e853\u27e9 tokio_unstable\n\n\n  * dev  async-stream\u27e854\u27e9\n  * dev  futures\u27e855\u27e9+async-await\u27e856\u27e9\n  * dev  futures-concurrency\u27e857\u27e9\n  * dev  mockall\u27e858\u27e9 0.13\n  * dev  proptest\u27e859\u27e9 not wasm\n  * dev  rand\u27e860\u27e9 0.8 not wasm not unknown\n  * dev  tempfile\u27e861\u27e9 not wasm\n  * dev  tokio-stream\u27e862\u27e9\n  * dev  tokio-test\u27e863\u27e9\n  * dev  loom\u27e864\u27e9 0.7+futures\u27e865\u27e9+checkpoint\u27e866\u27e9 loom\n  * dev  mio-aio\u27e867\u27e9 1.0+tokio\u27e868\u27e9 freebsd\n  * dev  nix\u27e869\u27e9 0.29+aio\u27e870\u27e9+fs\u27e871\u27e9+socket\u27e872\u27e9 unix\n  * dev  tracing-mock\u27e873\u27e9 tokio_unstable atomic 64\n  * dev  wasm-bindgen-test\u27e874\u27e9 wasm not wasi\n\n\n#### Other features\u27e875\u27e9\n  * fs\u27e876\u27e9\n  * io-std\u27e877\u27e9\n  * rt\u27e878\u27e9\n  * rt-multi-thread\u27e879\u27e9\n  * sync\u27e880\u27e9\n  * test-util\u27e881\u27e9\n  * time\u27e882\u27e9\n\n\n  *[SLoC]: approx. additional lines of code\n",
              "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://lib.rs/crates/tokio/versions: 164 releases\n\u27e82\u27e9 https://lib.rs/asynchronous: Crates to help you deal with events independently of the main program flow, using techniques like futures, promises, waiting, or eventing. - Asynchronous\n\u27e83\u27e9 https://lib.rs/crates/tokio/rev: **41,885** crates (28,848 directly)\n\u27e84\u27e9 https://img.shields.io/crates/v/tokio.svg: ![Crates.io\n\u27e85\u27e9 https://img.shields.io/badge/license-MIT-blue.svg: ![MIT licensed\n\u27e86\u27e9 https://img.gs/czjpqfbdkz/full/https://github.com/tokio-rs/tokio/workflows/CI/badge.svg: ![Build Status\n\u27e87\u27e9 https://img.shields.io/discord/500028886025895936.svg?logo=discord&style=flat-square: ![Discord chat\n\u27e88\u27e9 https://tokio.rs: Website\n\u27e89\u27e9 https://tokio.rs/tokio/tutorial: Guides\n\u27e810\u27e9 https://docs.rs/tokio/latest/tokio: API Docs\n\u27e811\u27e9 https://discord.gg/tokio: Chat\n\u27e812\u27e9 https://docs.rs/tokio/latest/tokio/runtime/index.html: scheduler\n\u27e813\u27e9 https://docs.rs/tokio/latest/tokio/net/index.html: TCP and UDP\n\u27e814\u27e9 https://github.com/tokio-rs/tokio/tree/master/examples: here\n\u27e815\u27e9 https://github.com/tokio-rs/mini-redis/: mini-redis\n\u27e816\u27e9 https://docs.rs/tokio/#feature-flags: docs\n\u27e817\u27e9 https://github.com/tokio-rs/tokio/discussions: the discussions page\n\u27e818\u27e9 https://github.com/tokio-rs/tokio/blob/master/CONTRIBUTING.md: contributing guide\n\u27e819\u27e9 https://github.com/tokio-rs/axum: ``axum``\n\u27e820\u27e9 https://github.com/hyperium/hyper: ``hyper``\n\u27e821\u27e9 https://github.com/hyperium/tonic: ``tonic``\n\u27e822\u27e9 https://github.com/seanmonstar/warp: ``warp``\n\u27e823\u27e9 https://github.com/tower-rs/tower: ``tower``\n\u27e824\u27e9 https://github.com/tokio-rs/tracing: ``tracing``\n\u27e825\u27e9 https://github.com/tokio-rs/mio: ``mio``\n\u27e826\u27e9 https://github.com/tokio-rs/bytes: ``bytes``\n\u27e827\u27e9 https://github.com/tokio-rs/loom: ``loom``\n\u27e828\u27e9 https://github.com/tokio-rs/tokio/blob/master/tokio/CHANGELOG.md: view changelog\n\u27e829\u27e9 https://github.com/tokio-rs/tokio/blob/master/tokio-util/CHANGELOG.md: view changelog\n\u27e830\u27e9 https://github.com/tokio-rs/tokio/blob/master/tokio-stream/CHANGELOG.md: view changelog\n\u27e831\u27e9 https://github.com/tokio-rs/tokio/blob/master/tokio-macros/CHANGELOG.md: view changelog\n\u27e832\u27e9 https://github.com/tokio-rs/tokio/blob/master/tokio-test/CHANGELOG.md: view changelog\n\u27e833\u27e9 https://github.com/tokio-rs/tokio/blob/master/LICENSE: MIT license\n\u27e834\u27e9 https://lib.rs/crates/backtrace: 0.3.58 - backtrace\n\u27e835\u27e9 https://lib.rs/crates/tokio/features#feature-io-util: optional feature - io-util?\n\u27e836\u27e9 https://lib.rs/crates/bytes: 1.2.1 - bytes\n\u27e837\u27e9 https://lib.rs/crates/tokio/features#feature-net: optional feature - net?\n\u27e838\u27e9 https://lib.rs/crates/libc: 0.2.168 - libc\n\u27e839\u27e9 https://lib.rs/crates/tokio/features#feature-process: optional feature - process?\n\u27e840\u27e9 https://lib.rs/crates/tokio/features#feature-signal: optional feature - signal?\n\u27e841\u27e9 https://lib.rs/crates/mio: 1.0.1 - mio\n\u27e842\u27e9 https://lib.rs/crates/socket2: 0.5.5 - socket2\n\u27e843\u27e9 https://lib.rs/crates/socket2/features#feature-all: +all\n\u27e844\u27e9 https://lib.rs/crates/windows-sys: obsolete - windows-sys\n\u27e845\u27e9 https://lib.rs/crates/signal-hook-registry: 1.1.1 - signal-hook-registry\n\u27e846\u27e9 https://lib.rs/crates/tokio/features#feature-full: optional feature - full?\n\u27e847\u27e9 https://lib.rs/crates/parking_lot: 0.12.0 - parking_lot\n\u27e848\u27e9 https://lib.rs/crates/pin-project-lite: 0.2.11 - pin-project-lite\n\u27e849\u27e9 https://lib.rs/crates/tokio/features#feature-macros: optional feature - macros?\n\u27e850\u27e9 https://lib.rs/crates/tokio-macros: ~2.5.0 - tokio-macros\n\u27e851\u27e9 https://lib.rs/crates/tokio/features#feature-tracing: tracing is optional feature -  optional \n\u27e852\u27e9 https://lib.rs/crates/tracing: 0.1.29 - tracing\n\u27e853\u27e9 https://lib.rs/crates/tracing/features#feature-std: +std\n\u27e854\u27e9 https://lib.rs/crates/async-stream: 0.3 - async-stream\n\u27e855\u27e9 https://lib.rs/crates/futures: 0.3.0 - futures\n\u27e856\u27e9 https://lib.rs/crates/futures/features#feature-async-await: +async-await\n\u27e857\u27e9 https://lib.rs/crates/futures-concurrency: 7.6.3 - futures-concurrency\n\u27e858\u27e9 https://lib.rs/crates/mockall: new - mockall\n\u27e859\u27e9 https://lib.rs/crates/proptest: 1 - proptest\n\u27e860\u27e9 https://lib.rs/crates/rand: outdated - rand\n\u27e861\u27e9 https://lib.rs/crates/tempfile: 3.1.0 - tempfile\n\u27e862\u27e9 https://lib.rs/crates/tokio-stream: 0.1 - tokio-stream\n\u27e863\u27e9 https://lib.rs/crates/tokio-test: 0.4.0 - tokio-test\n\u27e864\u27e9 https://lib.rs/crates/loom: new - loom\n\u27e865\u27e9 https://lib.rs/crates/loom/features#feature-futures: +futures\n\u27e866\u27e9 https://lib.rs/crates/loom/features#feature-checkpoint: +checkpoint\n\u27e867\u27e9 https://lib.rs/crates/mio-aio: new - mio-aio\n\u27e868\u27e9 https://lib.rs/crates/mio-aio/features#feature-tokio: +tokio\n\u27e869\u27e9 https://lib.rs/crates/nix: obsolete - nix\n\u27e870\u27e9 https://lib.rs/crates/nix/features#feature-aio: +aio\n\u27e871\u27e9 https://lib.rs/crates/nix/features#feature-fs: +fs\n\u27e872\u27e9 https://lib.rs/crates/nix/features#feature-socket: +socket\n\u27e873\u27e9 https://lib.rs/crates/tracing-mock: = 0.1.0-beta.1 - tracing-mock\n\u27e874\u27e9 https://lib.rs/crates/wasm-bindgen-test: 0.3.0 - wasm-bindgen-test\n\u27e875\u27e9 https://lib.rs/crates/tokio/features: Other features\n\u27e876\u27e9 https://lib.rs/crates/tokio/features#feature-fs: fs\n\u27e877\u27e9 https://lib.rs/crates/tokio/features#feature-io-std: io-std\n\u27e878\u27e9 https://lib.rs/crates/tokio/features#feature-rt: rt\n\u27e879\u27e9 https://lib.rs/crates/tokio/features#feature-rt-multi-thread: rt-multi-thread\n\u27e880\u27e9 https://lib.rs/crates/tokio/features#feature-sync: sync\n\u27e881\u27e9 https://lib.rs/crates/tokio/features#feature-test-util: test-util\n\u27e882\u27e9 https://lib.rs/crates/tokio/features#feature-time: time\n",
              "fit_markdown": "",
              "fit_html": ""
            },
            "structured_data": {},
            "quality_score": 3.0,
            "extraction_method": "crawl4ai",
            "error": null,
            "metadata": {
              "doc_type": "docs",
              "content_length": 13706,
              "has_structured_data": false,
              "crawl_success": true
            },
            "timestamp": "112138.4589467"
          }
        },
        "crate_analysis": {
          "status": "completed",
          "check": [
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#pin-project-lite@0.2.16",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\pin-project-lite-0.2.16\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "pin_project_lite",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\pin-project-lite-0.2.16\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmplui_to9n\\tokio-1.45.1\\target\\debug\\deps\\libpin_project_lite-c1a285380b388093.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmplui_to9n/tokio-1.45.1#tokio@1.45.1",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmplui_to9n\\tokio-1.45.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "tokio",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmplui_to9n\\tokio-1.45.1\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmplui_to9n\\tokio-1.45.1\\target\\debug\\deps\\libtokio-bd7c88a320a19a10.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "build-finished",
              "success": true
            }
          ],
          "clippy": [
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#pin-project-lite@0.2.16",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\pin-project-lite-0.2.16\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "pin_project_lite",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\pin-project-lite-0.2.16\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmplui_to9n\\tokio-1.45.1\\target\\debug\\deps\\libpin_project_lite-c1a285380b388093.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmplui_to9n/tokio-1.45.1#tokio@1.45.1",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmplui_to9n\\tokio-1.45.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "tokio",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmplui_to9n\\tokio-1.45.1\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: unneeded unit expression\n   --> src\\runtime\\driver.rs:339:9\n    |\n339 |         ()\n    |         ^^ help: remove the final `()`\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unused_unit\n    = note: `#[warn(clippy::unused_unit)]` on by default\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unused_unit",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "`#[warn(clippy::unused_unit)]` on by default",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "remove the final `()`",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 9826,
                        "byte_start": 9824,
                        "column_end": 11,
                        "column_start": 9,
                        "expansion": null,
                        "file_name": "src\\runtime\\driver.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 339,
                        "line_start": 339,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 11,
                            "highlight_start": 9,
                            "text": "        ()"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::unused_unit",
                  "explanation": null
                },
                "level": "warning",
                "message": "unneeded unit expression",
                "spans": [
                  {
                    "byte_end": 9826,
                    "byte_start": 9824,
                    "column_end": 11,
                    "column_start": 9,
                    "expansion": null,
                    "file_name": "src\\runtime\\driver.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 339,
                    "line_start": 339,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 11,
                        "highlight_start": 9,
                        "text": "        ()"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmplui_to9n/tokio-1.45.1#tokio@1.45.1",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmplui_to9n\\tokio-1.45.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "tokio",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmplui_to9n\\tokio-1.45.1\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: doc list item overindented\n   --> src\\lib.rs:319:5\n    |\n319 | //!         and non-scheduler utilities.\n    |     ^^^^^^^^ help: try using `  ` (2 spaces)\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#doc_overindented_list_items\n    = note: `#[warn(clippy::doc_overindented_list_items)]` on by default\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#doc_overindented_list_items",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "`#[warn(clippy::doc_overindented_list_items)]` on by default",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "try using `  ` (2 spaces)",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 12969,
                        "byte_start": 12961,
                        "column_end": 13,
                        "column_start": 5,
                        "expansion": null,
                        "file_name": "src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 319,
                        "line_start": 319,
                        "suggested_replacement": "  ",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 13,
                            "highlight_start": 5,
                            "text": "//!         and non-scheduler utilities."
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::doc_overindented_list_items",
                  "explanation": null
                },
                "level": "warning",
                "message": "doc list item overindented",
                "spans": [
                  {
                    "byte_end": 12969,
                    "byte_start": 12961,
                    "column_end": 13,
                    "column_start": 5,
                    "expansion": null,
                    "file_name": "src\\lib.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 319,
                    "line_start": 319,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 13,
                        "highlight_start": 5,
                        "text": "//!         and non-scheduler utilities."
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmplui_to9n/tokio-1.45.1#tokio@1.45.1",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmplui_to9n\\tokio-1.45.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "tokio",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmplui_to9n\\tokio-1.45.1\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: doc list item overindented\n   --> src\\lib.rs:324:5\n    |\n324 | //!          `UdpSocket`, as well as (on Unix-like systems) `AsyncFd` and (on\n    |     ^^^^^^^^^ help: try using `  ` (2 spaces)\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#doc_overindented_list_items\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#doc_overindented_list_items",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "try using `  ` (2 spaces)",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 13289,
                        "byte_start": 13280,
                        "column_end": 14,
                        "column_start": 5,
                        "expansion": null,
                        "file_name": "src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 324,
                        "line_start": 324,
                        "suggested_replacement": "  ",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 14,
                            "highlight_start": 5,
                            "text": "//!          `UdpSocket`, as well as (on Unix-like systems) `AsyncFd` and (on"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::doc_overindented_list_items",
                  "explanation": null
                },
                "level": "warning",
                "message": "doc list item overindented",
                "spans": [
                  {
                    "byte_end": 13289,
                    "byte_start": 13280,
                    "column_end": 14,
                    "column_start": 5,
                    "expansion": null,
                    "file_name": "src\\lib.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 324,
                    "line_start": 324,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 14,
                        "highlight_start": 5,
                        "text": "//!          `UdpSocket`, as well as (on Unix-like systems) `AsyncFd` and (on"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmplui_to9n/tokio-1.45.1#tokio@1.45.1",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmplui_to9n\\tokio-1.45.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "tokio",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmplui_to9n\\tokio-1.45.1\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: doc list item overindented\n   --> src\\lib.rs:325:5\n    |\n325 | //!          FreeBSD) `PollAio`.\n    |     ^^^^^^^^^ help: try using `  ` (2 spaces)\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#doc_overindented_list_items\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#doc_overindented_list_items",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "try using `  ` (2 spaces)",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 13367,
                        "byte_start": 13358,
                        "column_end": 14,
                        "column_start": 5,
                        "expansion": null,
                        "file_name": "src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 325,
                        "line_start": 325,
                        "suggested_replacement": "  ",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 14,
                            "highlight_start": 5,
                            "text": "//!          FreeBSD) `PollAio`."
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::doc_overindented_list_items",
                  "explanation": null
                },
                "level": "warning",
                "message": "doc list item overindented",
                "spans": [
                  {
                    "byte_end": 13367,
                    "byte_start": 13358,
                    "column_end": 14,
                    "column_start": 5,
                    "expansion": null,
                    "file_name": "src\\lib.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 325,
                    "line_start": 325,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 14,
                        "highlight_start": 5,
                        "text": "//!          FreeBSD) `PollAio`."
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmplui_to9n/tokio-1.45.1#tokio@1.45.1",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmplui_to9n\\tokio-1.45.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "tokio",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmplui_to9n\\tokio-1.45.1\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: doc list item overindented\n   --> src\\lib.rs:327:5\n    |\n327 | //!           the built in timer.\n    |     ^^^^^^^^^^ help: try using `  ` (2 spaces)\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#doc_overindented_list_items\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#doc_overindented_list_items",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "try using `  ` (2 spaces)",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 13479,
                        "byte_start": 13469,
                        "column_end": 15,
                        "column_start": 5,
                        "expansion": null,
                        "file_name": "src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 327,
                        "line_start": 327,
                        "suggested_replacement": "  ",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 15,
                            "highlight_start": 5,
                            "text": "//!           the built in timer."
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::doc_overindented_list_items",
                  "explanation": null
                },
                "level": "warning",
                "message": "doc list item overindented",
                "spans": [
                  {
                    "byte_end": 13479,
                    "byte_start": 13469,
                    "column_end": 15,
                    "column_start": 5,
                    "expansion": null,
                    "file_name": "src\\lib.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 327,
                    "line_start": 327,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 15,
                        "highlight_start": 5,
                        "text": "//!           the built in timer."
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmplui_to9n/tokio-1.45.1#tokio@1.45.1",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmplui_to9n\\tokio-1.45.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "tokio",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmplui_to9n\\tokio-1.45.1\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: doc list item overindented\n   --> src\\lib.rs:335:5\n    |\n335 | //!                  synchronization primitives internally. Also, this\n    |     ^^^^^^^^^^^^^^^^^ help: try using `  ` (2 spaces)\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#doc_overindented_list_items\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#doc_overindented_list_items",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "try using `  ` (2 spaces)",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 13937,
                        "byte_start": 13920,
                        "column_end": 22,
                        "column_start": 5,
                        "expansion": null,
                        "file_name": "src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 335,
                        "line_start": 335,
                        "suggested_replacement": "  ",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 22,
                            "highlight_start": 5,
                            "text": "//!                  synchronization primitives internally. Also, this"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::doc_overindented_list_items",
                  "explanation": null
                },
                "level": "warning",
                "message": "doc list item overindented",
                "spans": [
                  {
                    "byte_end": 13937,
                    "byte_start": 13920,
                    "column_end": 22,
                    "column_start": 5,
                    "expansion": null,
                    "file_name": "src\\lib.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 335,
                    "line_start": 335,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 22,
                        "highlight_start": 5,
                        "text": "//!                  synchronization primitives internally. Also, this"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmplui_to9n/tokio-1.45.1#tokio@1.45.1",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmplui_to9n\\tokio-1.45.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "tokio",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmplui_to9n\\tokio-1.45.1\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: doc list item overindented\n   --> src\\lib.rs:336:5\n    |\n336 | //!                  dependency is necessary to construct some of our primitives\n    |     ^^^^^^^^^^^^^^^^^ help: try using `  ` (2 spaces)\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#doc_overindented_list_items\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#doc_overindented_list_items",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "try using `  ` (2 spaces)",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 14008,
                        "byte_start": 13991,
                        "column_end": 22,
                        "column_start": 5,
                        "expansion": null,
                        "file_name": "src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 336,
                        "line_start": 336,
                        "suggested_replacement": "  ",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 22,
                            "highlight_start": 5,
                            "text": "//!                  dependency is necessary to construct some of our primitives"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::doc_overindented_list_items",
                  "explanation": null
                },
                "level": "warning",
                "message": "doc list item overindented",
                "spans": [
                  {
                    "byte_end": 14008,
                    "byte_start": 13991,
                    "column_end": 22,
                    "column_start": 5,
                    "expansion": null,
                    "file_name": "src\\lib.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 336,
                    "line_start": 336,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 22,
                        "highlight_start": 5,
                        "text": "//!                  dependency is necessary to construct some of our primitives"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmplui_to9n/tokio-1.45.1#tokio@1.45.1",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmplui_to9n\\tokio-1.45.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "tokio",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmplui_to9n\\tokio-1.45.1\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: doc list item overindented\n   --> src\\lib.rs:337:5\n    |\n337 | //!                  in a `const` context. `MSRV` may increase according to the\n    |     ^^^^^^^^^^^^^^^^^ help: try using `  ` (2 spaces)\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#doc_overindented_list_items\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#doc_overindented_list_items",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "try using `  ` (2 spaces)",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 14089,
                        "byte_start": 14072,
                        "column_end": 22,
                        "column_start": 5,
                        "expansion": null,
                        "file_name": "src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 337,
                        "line_start": 337,
                        "suggested_replacement": "  ",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 22,
                            "highlight_start": 5,
                            "text": "//!                  in a `const` context. `MSRV` may increase according to the"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::doc_overindented_list_items",
                  "explanation": null
                },
                "level": "warning",
                "message": "doc list item overindented",
                "spans": [
                  {
                    "byte_end": 14089,
                    "byte_start": 14072,
                    "column_end": 22,
                    "column_start": 5,
                    "expansion": null,
                    "file_name": "src\\lib.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 337,
                    "line_start": 337,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 22,
                        "highlight_start": 5,
                        "text": "//!                  in a `const` context. `MSRV` may increase according to the"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmplui_to9n/tokio-1.45.1#tokio@1.45.1",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmplui_to9n\\tokio-1.45.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "tokio",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmplui_to9n\\tokio-1.45.1\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: doc list item overindented\n   --> src\\lib.rs:338:5\n    |\n338 | //!                  `_parking_lot_` release in use.\n    |     ^^^^^^^^^^^^^^^^^ help: try using `  ` (2 spaces)\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#doc_overindented_list_items\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#doc_overindented_list_items",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "try using `  ` (2 spaces)",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 14169,
                        "byte_start": 14152,
                        "column_end": 22,
                        "column_start": 5,
                        "expansion": null,
                        "file_name": "src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 338,
                        "line_start": 338,
                        "suggested_replacement": "  ",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 22,
                            "highlight_start": 5,
                            "text": "//!                  `_parking_lot_` release in use."
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::doc_overindented_list_items",
                  "explanation": null
                },
                "level": "warning",
                "message": "doc list item overindented",
                "spans": [
                  {
                    "byte_end": 14169,
                    "byte_start": 14152,
                    "column_end": 22,
                    "column_start": 5,
                    "expansion": null,
                    "file_name": "src\\lib.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 338,
                    "line_start": 338,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 22,
                        "highlight_start": 5,
                        "text": "//!                  `_parking_lot_` release in use."
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmplui_to9n/tokio-1.45.1#tokio@1.45.1",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmplui_to9n\\tokio-1.45.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "tokio",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmplui_to9n\\tokio-1.45.1\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: doc list item without indentation\n  --> src\\net\\mod.rs:13:5\n   |\n13 | //! Unix Domain Stream Socket **(available on Unix only)**\n   |     ^\n   |\n   = help: if this is supposed to be its own paragraph, add a blank line\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#doc_lazy_continuation\n   = note: `#[warn(clippy::doc_lazy_continuation)]` on by default\nhelp: indent this line\n   |\n13 | //!   Unix Domain Stream Socket **(available on Unix only)**\n   |     ++\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "if this is supposed to be its own paragraph, add a blank line",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#doc_lazy_continuation",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "`#[warn(clippy::doc_lazy_continuation)]` on by default",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "indent this line",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 492,
                        "byte_start": 492,
                        "column_end": 5,
                        "column_start": 5,
                        "expansion": null,
                        "file_name": "src\\net\\mod.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 13,
                        "line_start": 13,
                        "suggested_replacement": "  ",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 5,
                            "highlight_start": 5,
                            "text": "//! Unix Domain Stream Socket **(available on Unix only)**"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::doc_lazy_continuation",
                  "explanation": null
                },
                "level": "warning",
                "message": "doc list item without indentation",
                "spans": [
                  {
                    "byte_end": 492,
                    "byte_start": 492,
                    "column_end": 5,
                    "column_start": 5,
                    "expansion": null,
                    "file_name": "src\\net\\mod.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 13,
                    "line_start": 13,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 5,
                        "highlight_start": 5,
                        "text": "//! Unix Domain Stream Socket **(available on Unix only)**"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmplui_to9n/tokio-1.45.1#tokio@1.45.1",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmplui_to9n\\tokio-1.45.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "tokio",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmplui_to9n\\tokio-1.45.1\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: doc list item without indentation\n  --> src\\net\\mod.rs:15:5\n   |\n15 | //! over Unix Domain Datagram Socket **(available on Unix only)**\n   |     ^\n   |\n   = help: if this is supposed to be its own paragraph, add a blank line\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#doc_lazy_continuation\nhelp: indent this line\n   |\n15 | //!   over Unix Domain Datagram Socket **(available on Unix only)**\n   |     ++\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "if this is supposed to be its own paragraph, add a blank line",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#doc_lazy_continuation",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "indent this line",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 615,
                        "byte_start": 615,
                        "column_end": 5,
                        "column_start": 5,
                        "expansion": null,
                        "file_name": "src\\net\\mod.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 15,
                        "line_start": 15,
                        "suggested_replacement": "  ",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 5,
                            "highlight_start": 5,
                            "text": "//! over Unix Domain Datagram Socket **(available on Unix only)**"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::doc_lazy_continuation",
                  "explanation": null
                },
                "level": "warning",
                "message": "doc list item without indentation",
                "spans": [
                  {
                    "byte_end": 615,
                    "byte_start": 615,
                    "column_end": 5,
                    "column_start": 5,
                    "expansion": null,
                    "file_name": "src\\net\\mod.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 15,
                    "line_start": 15,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 5,
                        "highlight_start": 5,
                        "text": "//! over Unix Domain Datagram Socket **(available on Unix only)**"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmplui_to9n/tokio-1.45.1#tokio@1.45.1",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmplui_to9n\\tokio-1.45.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "tokio",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmplui_to9n\\tokio-1.45.1\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: this let-binding has unit value\n  --> src\\runtime\\driver.rs:49:9\n   |\n49 |         let clock = create_clock(cfg.enable_pause_time, cfg.start_paused);\n   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_unit_value\n   = note: `#[warn(clippy::let_unit_value)]` on by default\nhelp: omit the `let` binding and replace variable usages with `()`\n   |\n49 ~         create_clock(cfg.enable_pause_time, cfg.start_paused);\n50 |\n51 ~         let (time_driver, time_handle) = create_time_driver(cfg.enable_time, io_stack, &());\n52 |\n...\n58 |                 time: time_handle,\n59 ~                 (),\n   |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_unit_value",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "`#[warn(clippy::let_unit_value)]` on by default",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "omit the `let` binding and replace variable usages with `()`",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 1401,
                        "byte_start": 1335,
                        "column_end": 75,
                        "column_start": 9,
                        "expansion": null,
                        "file_name": "src\\runtime\\driver.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 49,
                        "line_start": 49,
                        "suggested_replacement": "create_clock(cfg.enable_pause_time, cfg.start_paused);",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 75,
                            "highlight_start": 9,
                            "text": "        let clock = create_clock(cfg.enable_pause_time, cfg.start_paused);"
                          }
                        ]
                      },
                      {
                        "byte_end": 1496,
                        "byte_start": 1491,
                        "column_end": 94,
                        "column_start": 89,
                        "expansion": null,
                        "file_name": "src\\runtime\\driver.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 51,
                        "line_start": 51,
                        "suggested_replacement": "()",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 94,
                            "highlight_start": 89,
                            "text": "        let (time_driver, time_handle) = create_time_driver(cfg.enable_time, io_stack, &clock);"
                          }
                        ]
                      },
                      {
                        "byte_end": 1701,
                        "byte_start": 1696,
                        "column_end": 22,
                        "column_start": 17,
                        "expansion": null,
                        "file_name": "src\\runtime\\driver.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 59,
                        "line_start": 59,
                        "suggested_replacement": "()",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 22,
                            "highlight_start": 17,
                            "text": "                clock,"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::let_unit_value",
                  "explanation": null
                },
                "level": "warning",
                "message": "this let-binding has unit value",
                "spans": [
                  {
                    "byte_end": 1401,
                    "byte_start": 1335,
                    "column_end": 75,
                    "column_start": 9,
                    "expansion": null,
                    "file_name": "src\\runtime\\driver.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 49,
                    "line_start": 49,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 75,
                        "highlight_start": 9,
                        "text": "        let clock = create_clock(cfg.enable_pause_time, cfg.start_paused);"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-artifact",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmplui_to9n/tokio-1.45.1#tokio@1.45.1",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmplui_to9n\\tokio-1.45.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "tokio",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmplui_to9n\\tokio-1.45.1\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmplui_to9n\\tokio-1.45.1\\target\\debug\\deps\\libtokio-34f0dbe7bccb7dd3.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "build-finished",
              "success": true
            }
          ],
          "audit": {
            "database": {
              "advisory-count": 787,
              "last-commit": "7573f55ba337263f61167dbb0ea926cdc7c8eb5d",
              "last-updated": "2025-06-17T11:04:25+02:00"
            },
            "lockfile": {
              "dependency-count": 162
            },
            "settings": {
              "target_arch": [],
              "target_os": [],
              "severity": null,
              "ignore": [],
              "informational_warnings": [
                "unmaintained",
                "unsound",
                "notice"
              ]
            },
            "vulnerabilities": {
              "found": false,
              "count": 0,
              "list": []
            },
            "warnings": {}
          },
          "note": "Crate analysis performed with stable toolchain."
        },
        "crate_metadata": {
          "name": "tokio",
          "version": "1.45.1",
          "description": "ALLOW: Positive community sentiment",
          "repository": "",
          "keywords": [],
          "categories": [],
          "readme": {
            "raw_markdown": "[](https://docs.rs/tokio/latest/tokio/all.html \"show sidebar\")\n# Crate tokioCopy item path\n[Settings](https://docs.rs/tokio/latest/settings.html)\n[Help](https://docs.rs/tokio/latest/help.html)\nSummary[Source](https://docs.rs/tokio/latest/src/tokio/lib.rs.html#1-698)\nExpand description\nA runtime for writing reliable network applications without compromising speed.\nTokio is an event-driven, non-blocking I/O platform for writing asynchronous applications with the Rust programming language. At a high level, it provides a few major components:\n  * Tools for [working with asynchronous tasks](https://docs.rs/tokio/latest/tokio/#working-with-tasks), including [synchronization primitives and channels](https://docs.rs/tokio/latest/tokio/sync/index.html \"mod tokio::sync\") and [timeouts, sleeps, and intervals](https://docs.rs/tokio/latest/tokio/time/index.html \"mod tokio::time\").\n  * APIs for [performing asynchronous I/O](https://docs.rs/tokio/latest/tokio/#asynchronous-io), including [TCP and UDP](https://docs.rs/tokio/latest/tokio/net/index.html \"mod tokio::net\") sockets, [filesystem](https://docs.rs/tokio/latest/tokio/fs/index.html \"mod tokio::fs\") operations, and [process](https://docs.rs/tokio/latest/tokio/process/index.html \"mod tokio::process\") and [signal](https://docs.rs/tokio/latest/tokio/signal/index.html \"mod tokio::signal\") management.\n  * A [runtime](https://docs.rs/tokio/latest/tokio/runtime/index.html \"mod tokio::runtime\") for executing asynchronous code, including a task scheduler, an I/O driver backed by the operating system\u2019s event queue (`epoll`, `kqueue`, `IOCP`, etc\u2026), and a high performance timer.\n\n\nGuide level documentation is found on the [website](https://tokio.rs/tokio/tutorial).\n## [\u00a7](https://docs.rs/tokio/latest/tokio/#a-tour-of-tokio)A Tour of Tokio\nTokio consists of a number of modules that provide a range of functionality essential for implementing asynchronous applications in Rust. In this section, we will take a brief tour of Tokio, summarizing the major APIs and their uses.\nThe easiest way to get started is to enable all features. Do this by enabling the `full` feature flag:\n```\ntokio = { version = \"1\", features = [\"full\"] }\n```\n\n#### [\u00a7](https://docs.rs/tokio/latest/tokio/#authoring-applications)Authoring applications\nTokio is great for writing applications and most users in this case shouldn\u2019t worry too much about what features they should pick. If you\u2019re unsure, we suggest going with `full` to ensure that you don\u2019t run into any road blocks while you\u2019re building your application.\n##### [\u00a7](https://docs.rs/tokio/latest/tokio/#example)Example\nThis example shows the quickest way to get started with Tokio.\n```\ntokio = { version = \"1\", features = [\"full\"] }\n```\n\n#### [\u00a7](https://docs.rs/tokio/latest/tokio/#authoring-libraries)Authoring libraries\nAs a library author your goal should be to provide the lightest weight crate that is based on Tokio. To achieve this you should ensure that you only enable the features you need. This allows users to pick up your crate without having to enable unnecessary features.\n##### [\u00a7](https://docs.rs/tokio/latest/tokio/#example-1)Example\nThis example shows how you may want to import features for a library that just needs to `tokio::spawn` and use a `TcpStream`.\n```\ntokio = { version = \"1\", features = [\"rt\", \"net\"] }\n```\n\n### [\u00a7](https://docs.rs/tokio/latest/tokio/#working-with-tasks)Working With Tasks\nAsynchronous programs in Rust are based around lightweight, non-blocking units of execution called [_tasks_](https://docs.rs/tokio/latest/tokio/#working-with-tasks). The [`tokio::task`](https://docs.rs/tokio/latest/tokio/task/index.html \"mod tokio::task\") module provides important tools for working with tasks:\n  * The [`spawn`](https://docs.rs/tokio/latest/tokio/task/fn.spawn.html \"fn tokio::task::spawn\") function and [`JoinHandle`](https://docs.rs/tokio/latest/tokio/task/struct.JoinHandle.html \"struct tokio::task::JoinHandle\") type, for scheduling a new task on the Tokio runtime and awaiting the output of a spawned task, respectively,\n  * Functions for [running blocking operations](https://docs.rs/tokio/latest/tokio/task/index.html#blocking-and-yielding) in an asynchronous task context.\n\n\nThe [`tokio::task`](https://docs.rs/tokio/latest/tokio/task/index.html \"mod tokio::task\") module is present only when the \u201crt\u201d feature flag is enabled.\nThe [`tokio::sync`](https://docs.rs/tokio/latest/tokio/sync/index.html \"mod tokio::sync\") module contains synchronization primitives to use when needing to communicate or share data. These include:\n  * channels ([`oneshot`](https://docs.rs/tokio/latest/tokio/sync/oneshot/index.html \"mod tokio::sync::oneshot\"), [`mpsc`](https://docs.rs/tokio/latest/tokio/sync/mpsc/index.html \"mod tokio::sync::mpsc\"), [`watch`](https://docs.rs/tokio/latest/tokio/sync/watch/index.html \"mod tokio::sync::watch\"), and [`broadcast`](https://docs.rs/tokio/latest/tokio/sync/broadcast/index.html \"mod tokio::sync::broadcast\")), for sending values between tasks,\n  * a non-blocking [`Mutex`](https://docs.rs/tokio/latest/tokio/sync/struct.Mutex.html \"struct tokio::sync::Mutex\"), for controlling access to a shared, mutable value,\n  * an asynchronous [`Barrier`](https://docs.rs/tokio/latest/tokio/sync/struct.Barrier.html \"struct tokio::sync::Barrier\") type, for multiple tasks to synchronize before beginning a computation.\n\n\nThe `tokio::sync` module is present only when the \u201csync\u201d feature flag is enabled.\nThe [`tokio::time`](https://docs.rs/tokio/latest/tokio/time/index.html \"mod tokio::time\") module provides utilities for tracking time and scheduling work. This includes functions for setting [timeouts](https://docs.rs/tokio/latest/tokio/time/fn.timeout.html \"fn tokio::time::timeout\") for tasks, [sleeping](https://docs.rs/tokio/latest/tokio/time/fn.sleep.html \"fn tokio::time::sleep\") work to run in the future, or [repeating an operation at an interval](https://docs.rs/tokio/latest/tokio/time/fn.interval.html \"fn tokio::time::interval\").\nIn order to use `tokio::time`, the \u201ctime\u201d feature flag must be enabled.\nFinally, Tokio provides a _runtime_ for executing asynchronous tasks. Most applications can use the [`#[tokio::main]`](https://docs.rs/tokio/latest/tokio/attr.main.html) macro to run their code on the Tokio runtime. However, this macro provides only basic configuration options. As an alternative, the [`tokio::runtime`](https://docs.rs/tokio/latest/tokio/runtime/index.html \"mod tokio::runtime\") module provides more powerful APIs for configuring and managing runtimes. You should use that module if the `#[tokio::main]` macro doesn\u2019t provide the functionality you need.\nUsing the runtime requires the \u201crt\u201d or \u201crt-multi-thread\u201d feature flags, to enable the current-thread [single-threaded scheduler](https://docs.rs/tokio/latest/tokio/runtime/index.html#current-thread-scheduler) and the [multi-thread scheduler](https://docs.rs/tokio/latest/tokio/runtime/index.html#multi-thread-scheduler), respectively. See the [`runtime` module documentation](https://docs.rs/tokio/latest/tokio/runtime/index.html#runtime-scheduler) for details. In addition, the \u201cmacros\u201d feature flag enables the `#[tokio::main]` and `#[tokio::test]` attributes.\n### [\u00a7](https://docs.rs/tokio/latest/tokio/#cpu-bound-tasks-and-blocking-code)CPU-bound tasks and blocking code\nTokio is able to concurrently run many tasks on a few threads by repeatedly swapping the currently running task on each thread. However, this kind of swapping can only happen at `.await` points, so code that spends a long time without reaching an `.await` will prevent other tasks from running. To combat this, Tokio provides two kinds of threads: Core threads and blocking threads.\nThe core threads are where all asynchronous code runs, and Tokio will by default spawn one for each CPU core. You can use the environment variable `TOKIO_WORKER_THREADS` to override the default value.\nThe blocking threads are spawned on demand, can be used to run blocking code that would otherwise block other tasks from running and are kept alive when not used for a certain amount of time which can be configured with [`thread_keep_alive`](https://docs.rs/tokio/latest/tokio/runtime/struct.Builder.html#method.thread_keep_alive \"method tokio::runtime::Builder::thread_keep_alive\"). Since it is not possible for Tokio to swap out blocking tasks, like it can do with asynchronous code, the upper limit on the number of blocking threads is very large. These limits can be configured on the [`Builder`](https://docs.rs/tokio/latest/tokio/runtime/struct.Builder.html \"struct tokio::runtime::Builder\").\nTo spawn a blocking task, you should use the [`spawn_blocking`](https://docs.rs/tokio/latest/tokio/task/fn.spawn_blocking.html \"fn tokio::task::spawn_blocking\") function.\n```\n#[tokio::main]\nasync fn main() {\n  // This is running on a core thread.\n  let blocking_task = tokio::task::spawn_blocking(|| {\n    // This is running on a blocking thread.\n    // Blocking here is ok.\n  });\n  // We can wait for the blocking task like this:\n  // If the blocking task panics, the unwrap below will propagate the\n  // panic.\n  blocking_task.await.unwrap();\n}\n```\n\nIf your code is CPU-bound and you wish to limit the number of threads used to run it, you should use a separate thread pool dedicated to CPU bound tasks. For example, you could consider using the [rayon](https://docs.rs/rayon) library for CPU-bound tasks. It is also possible to create an extra Tokio runtime dedicated to CPU-bound tasks, but if you do this, you should be careful that the extra runtime runs _only_ CPU-bound tasks, as IO-bound tasks on that runtime will behave poorly.\nHint: If using rayon, you can use a [`oneshot`](https://docs.rs/tokio/latest/tokio/sync/oneshot/index.html \"mod tokio::sync::oneshot\") channel to send the result back to Tokio when the rayon task finishes.\n### [\u00a7](https://docs.rs/tokio/latest/tokio/#asynchronous-io)Asynchronous IO\nAs well as scheduling and running tasks, Tokio provides everything you need to perform input and output asynchronously.\nThe [`tokio::io`](https://docs.rs/tokio/latest/tokio/io/index.html \"mod tokio::io\") module provides Tokio\u2019s asynchronous core I/O primitives, the [`AsyncRead`](https://docs.rs/tokio/latest/tokio/io/trait.AsyncRead.html \"trait tokio::io::AsyncRead\"), [`AsyncWrite`](https://docs.rs/tokio/latest/tokio/io/trait.AsyncWrite.html \"trait tokio::io::AsyncWrite\"), and [`AsyncBufRead`](https://docs.rs/tokio/latest/tokio/io/trait.AsyncBufRead.html \"trait tokio::io::AsyncBufRead\") traits. In addition, when the \u201cio-util\u201d feature flag is enabled, it also provides combinators and functions for working with these traits, forming as an asynchronous counterpart to [`std::io`](https://doc.rust-lang.org/nightly/std/io/index.html \"mod std::io\").\nTokio also includes APIs for performing various kinds of I/O and interacting with the operating system asynchronously. These include:\n  * [`tokio::net`](https://docs.rs/tokio/latest/tokio/net/index.html \"mod tokio::net\"), which contains non-blocking versions of [TCP](https://docs.rs/tokio/latest/tokio/net/tcp/index.html \"mod tokio::net::tcp\"), [UDP](https://docs.rs/tokio/latest/tokio/net/struct.UdpSocket.html \"struct tokio::net::UdpSocket\"), and [Unix Domain Sockets](https://docs.rs/tokio/latest/tokio/net/unix/index.html \"mod tokio::net::unix\") (enabled by the \u201cnet\u201d feature flag),\n  * [`tokio::fs`](https://docs.rs/tokio/latest/tokio/fs/index.html \"mod tokio::fs\"), similar to [`std::fs`](https://doc.rust-lang.org/nightly/std/fs/index.html \"mod std::fs\") but for performing filesystem I/O asynchronously (enabled by the \u201cfs\u201d feature flag),\n  * [`tokio::signal`](https://docs.rs/tokio/latest/tokio/signal/index.html \"mod tokio::signal\"), for asynchronously handling Unix and Windows OS signals (enabled by the \u201csignal\u201d feature flag),\n  * [`tokio::process`](https://docs.rs/tokio/latest/tokio/process/index.html \"mod tokio::process\"), for spawning and managing child processes (enabled by the \u201cprocess\u201d feature flag).\n\n\n## [\u00a7](https://docs.rs/tokio/latest/tokio/#examples)Examples\nA simple TCP echo server:\n```\nuse tokio::net::TcpListener;\nuse tokio::io::{AsyncReadExt, AsyncWriteExt};\n#[tokio::main]\nasync fn main() -> Result<(), Box<dyn std::error::Error>> {\n  let listener = TcpListener::bind(\"127.0.0.1:8080\").await?;\n  loop {\n    let (mut socket, _) = listener.accept().await?;\n    tokio::spawn(async move {\n      let mut buf = [0; 1024];\n      // In a loop, read data from the socket and write the data back.\n      loop {\n        let n = match socket.read(&mut buf).await {\n          // socket closed\n          Ok(0) => return,\n          Ok(n) => n,\n          Err(e) => {\n            eprintln!(\"failed to read from socket; err = {:?}\", e);\n            return;\n          }\n        };\n        // Write the data back\n        if let Err(e) = socket.write_all(&buf[0..n]).await {\n          eprintln!(\"failed to write to socket; err = {:?}\", e);\n          return;\n        }\n      }\n    });\n  }\n}\n```\n\n## [\u00a7](https://docs.rs/tokio/latest/tokio/#feature-flags)Feature flags\nTokio uses a set of [feature flags](https://doc.rust-lang.org/cargo/reference/manifest.html#the-features-section) to reduce the amount of compiled code. It is possible to just enable certain features over others. By default, Tokio does not enable any features but allows one to enable a subset for their use case. Below is a list of the available feature flags. You may also notice above each function, struct and trait there is listed one or more feature flags that are required for that item to be used. If you are new to Tokio it is recommended that you use the `full` feature flag which will enable all public APIs. Beware though that this will pull in many extra dependencies that you may not need.\n  * `full`: Enables all features listed below except `test-util` and `tracing`.\n  * `rt`: Enables `tokio::spawn`, the current-thread scheduler, and non-scheduler utilities.\n  * `rt-multi-thread`: Enables the heavier, multi-threaded, work-stealing scheduler.\n  * `io-util`: Enables the IO based `Ext` traits.\n  * `io-std`: Enable `Stdout`, `Stdin` and `Stderr` types.\n  * `net`: Enables `tokio::net` types such as `TcpStream`, `UnixStream` and `UdpSocket`, as well as (on Unix-like systems) `AsyncFd` and (on FreeBSD) `PollAio`.\n  * `time`: Enables `tokio::time` types and allows the schedulers to enable the built in timer.\n  * `process`: Enables `tokio::process` types.\n  * `macros`: Enables `#[tokio::main]` and `#[tokio::test]` macros.\n  * `sync`: Enables all `tokio::sync` types.\n  * `signal`: Enables all `tokio::signal` types.\n  * `fs`: Enables `tokio::fs` types.\n  * `test-util`: Enables testing based infrastructure for the Tokio runtime.\n  * `parking_lot`: As a potential optimization, use the `_parking_lot_` crate\u2019s synchronization primitives internally. Also, this dependency is necessary to construct some of our primitives in a `const` context. `MSRV` may increase according to the `_parking_lot_` release in use.\n\n\n_Note:`AsyncRead` and `AsyncWrite` traits do not require any features and are always available._\n### [\u00a7](https://docs.rs/tokio/latest/tokio/#unstable-features)Unstable features\nSome feature flags are only available when specifying the `tokio_unstable` flag:\n  * `tracing`: Enables tracing events.\n\n\nLikewise, some parts of the API are only available with the same flag:\n  * [`task::Builder`](https://docs.rs/tokio/latest/tokio/task/struct.Builder.html \"struct tokio::task::Builder\")\n  * Some methods on [`task::JoinSet`](https://docs.rs/tokio/latest/tokio/task/struct.JoinSet.html \"struct tokio::task::JoinSet\")\n  * [`runtime::RuntimeMetrics`](https://docs.rs/tokio/latest/tokio/runtime/struct.RuntimeMetrics.html \"struct tokio::runtime::RuntimeMetrics\")\n  * [`runtime::Builder::on_task_spawn`](https://docs.rs/tokio/latest/tokio/runtime/struct.Builder.html#method.on_task_spawn \"method tokio::runtime::Builder::on_task_spawn\")\n  * [`runtime::Builder::on_task_terminate`](https://docs.rs/tokio/latest/tokio/runtime/struct.Builder.html#method.on_task_terminate \"method tokio::runtime::Builder::on_task_terminate\")\n  * [`runtime::Builder::unhandled_panic`](https://docs.rs/tokio/latest/tokio/runtime/struct.Builder.html#method.unhandled_panic \"method tokio::runtime::Builder::unhandled_panic\")\n  * [`runtime::TaskMeta`](https://docs.rs/tokio/latest/tokio/runtime/struct.TaskMeta.html \"struct tokio::runtime::TaskMeta\")\n\n\nThis flag enables **unstable** features. The public API of these features may break in 1.x releases. To enable these features, the `--cfg tokio_unstable` argument must be passed to `rustc` when compiling. This serves to explicitly opt-in to features which may break semver conventions, since Cargo [does not yet directly support such opt-ins](https://internals.rust-lang.org/t/feature-request-unstable-opt-in-non-transitive-crate-features/16193#why-not-a-crate-feature-2).\nYou can specify it in your project\u2019s `.cargo/config.toml` file:\n```\n[build]\nrustflags = [\"--cfg\", \"tokio_unstable\"]\n```\n\nThe `[build]` section does **not** go in a `Cargo.toml` file. Instead it must be placed in the Cargo config file `.cargo/config.toml`. \nAlternatively, you can specify it with an environment variable:\n```\n## Many *nix shells:\nexport RUSTFLAGS=\"--cfg tokio_unstable\"\ncargo build\n```\n\n```\n## Windows PowerShell:\n$Env:RUSTFLAGS=\"--cfg tokio_unstable\"\ncargo build\n```\n\n## [\u00a7](https://docs.rs/tokio/latest/tokio/#supported-platforms)Supported platforms\nTokio currently guarantees support for the following platforms:\n  * Linux\n  * Windows\n  * Android (API level 21)\n  * macOS\n  * iOS\n  * FreeBSD\n\n\nTokio will continue to support these platforms in the future. However, future releases may change requirements such as the minimum required libc version on Linux, the API level on Android, or the supported FreeBSD release.\nBeyond the above platforms, Tokio is intended to work on all platforms supported by the mio crate. You can find a longer list [in mio\u2019s documentation](https://crates.io/crates/mio#platforms). However, these additional platforms may become unsupported in the future.\nNote that Wine is considered to be a different platform from Windows. See mio\u2019s documentation for more information on Wine support.\n### [\u00a7](https://docs.rs/tokio/latest/tokio/#wasm-support)`WASM` support\nTokio has some limited support for the `WASM` platform. Without the `tokio_unstable` flag, the following features are supported:\n  * `sync`\n  * `macros`\n  * `io-util`\n  * `rt`\n  * `time`\n\n\nEnabling any other feature (including `full`) will cause a compilation failure.\nThe `time` module will only work on `WASM` platforms that have support for timers (e.g. wasm32-wasi). The timing functions will panic if used on a `WASM` platform that does not support timers.\nNote also that if the runtime becomes indefinitely idle, it will panic immediately instead of blocking forever. On platforms that don\u2019t support time, this means that the runtime can never be idle in any way.\n### [\u00a7](https://docs.rs/tokio/latest/tokio/#unstable-wasm-support)Unstable `WASM` support\nTokio also has unstable support for some additional `WASM` features. This requires the use of the `tokio_unstable` flag.\nUsing this flag enables the use of `tokio::net` on the wasm32-wasi target. However, not all methods are available on the networking types as `WASI` currently does not support the creation of new sockets from within `WASM`. Because of this, sockets must currently be created via the `FromRawFd` trait.\n## Re-exports[\u00a7](https://docs.rs/tokio/latest/tokio/#reexports)\n\n`pub use task::spawn[](https://docs.rs/tokio/latest/tokio/task/fn.spawn.html \"fn tokio::task::spawn\");``rt`\n\n## Modules[\u00a7](https://docs.rs/tokio/latest/tokio/#modules)\n\n[doc](https://docs.rs/tokio/latest/tokio/doc/index.html \"mod tokio::doc\")\n    Types which are documented locally in the Tokio crate, but does not actually live here.\n\n[fs](https://docs.rs/tokio/latest/tokio/fs/index.html \"mod tokio::fs\")`fs`\n    Asynchronous file utilities.\n\n[io](https://docs.rs/tokio/latest/tokio/io/index.html \"mod tokio::io\")\n    Traits, helpers, and type definitions for asynchronous I/O functionality.\n\n[net](https://docs.rs/tokio/latest/tokio/net/index.html \"mod tokio::net\")\n    TCP/UDP/Unix bindings for `tokio`.\n\n[process](https://docs.rs/tokio/latest/tokio/process/index.html \"mod tokio::process\")`process`\n    An implementation of asynchronous process management for Tokio.\n\n[runtime](https://docs.rs/tokio/latest/tokio/runtime/index.html \"mod tokio::runtime\")`rt`\n    The Tokio runtime.\n\n[signal](https://docs.rs/tokio/latest/tokio/signal/index.html \"mod tokio::signal\")`signal`\n    Asynchronous signal handling for Tokio.\n\n[stream](https://docs.rs/tokio/latest/tokio/stream/index.html \"mod tokio::stream\")\n    Due to the `Stream` trait\u2019s inclusion in `std` landing later than Tokio\u2019s 1.0 release, most of the Tokio stream utilities have been moved into the [`tokio-stream`](https://docs.rs/tokio-stream) crate.\n\n[sync](https://docs.rs/tokio/latest/tokio/sync/index.html \"mod tokio::sync\")`sync`\n    Synchronization primitives for use in asynchronous contexts.\n\n[task](https://docs.rs/tokio/latest/tokio/task/index.html \"mod tokio::task\")\n    Asynchronous green-threads.\n\n[time](https://docs.rs/tokio/latest/tokio/time/index.html \"mod tokio::time\")`time`\n    Utilities for tracking time.\n## Macros[\u00a7](https://docs.rs/tokio/latest/tokio/#macros)\n\n[join](https://docs.rs/tokio/latest/tokio/macro.join.html \"macro tokio::join\")`macros`\n    Waits on multiple concurrent branches, returning when **all** branches complete.\n\n[pin](https://docs.rs/tokio/latest/tokio/macro.pin.html \"macro tokio::pin\")\n    Pins a value on the stack.\n\n[select](https://docs.rs/tokio/latest/tokio/macro.select.html \"macro tokio::select\")`macros`\n    Waits on multiple concurrent branches, returning when the **first** branch completes, cancelling the remaining branches.\n\n[task_local](https://docs.rs/tokio/latest/tokio/macro.task_local.html \"macro tokio::task_local\")`rt`\n    Declares a new task-local key of type [`tokio::task::LocalKey`](https://docs.rs/tokio/latest/tokio/task/struct.LocalKey.html \"struct tokio::task::LocalKey\").\n\n[try_join](https://docs.rs/tokio/latest/tokio/macro.try_join.html \"macro tokio::try_join\")`macros`\n    Waits on multiple concurrent branches, returning when **all** branches complete with `Ok(_)` or on the first `Err(_)`.\n## Attribute Macros[\u00a7](https://docs.rs/tokio/latest/tokio/#attributes)\n\n[main](https://docs.rs/tokio/latest/tokio/attr.main.html \"attr tokio::main\")`rt` and `macros`\n    Marks async function to be executed by the selected runtime. This macro helps set up a `Runtime` without requiring the user to use [Runtime](https://docs.rs/tokio/latest/tokio/runtime/struct.Runtime.html) or [Builder](https://docs.rs/tokio/latest/tokio/runtime/struct.Builder.html) directly.\n\n[test](https://docs.rs/tokio/latest/tokio/attr.test.html \"attr tokio::test\")`rt` and `macros`\n    Marks async function to be executed by runtime, suitable to test environment. This macro helps set up a `Runtime` without requiring the user to use [Runtime](https://docs.rs/tokio/latest/tokio/runtime/struct.Runtime.html) or [Builder](https://docs.rs/tokio/latest/tokio/runtime/struct.Builder.html) directly.\n",
            "markdown_with_citations": "[](https://docs.rs/tokio/latest/tokio/all.html \"show sidebar\")\n# Crate tokioCopy item path\nSettings\u27e81\u27e9\nHelp\u27e82\u27e9\nSummarySource\u27e83\u27e9\nExpand description\nA runtime for writing reliable network applications without compromising speed.\nTokio is an event-driven, non-blocking I/O platform for writing asynchronous applications with the Rust programming language. At a high level, it provides a few major components:\n  * Tools for working with asynchronous tasks\u27e84\u27e9, including synchronization primitives and channels\u27e85\u27e9 and timeouts, sleeps, and intervals\u27e86\u27e9.\n  * APIs for performing asynchronous I/O\u27e87\u27e9, including TCP and UDP\u27e88\u27e9 sockets, filesystem\u27e89\u27e9 operations, and process\u27e810\u27e9 and signal\u27e811\u27e9 management.\n  * A runtime\u27e812\u27e9 for executing asynchronous code, including a task scheduler, an I/O driver backed by the operating system\u2019s event queue (`epoll`, `kqueue`, `IOCP`, etc\u2026), and a high performance timer.\n\n\nGuide level documentation is found on the website\u27e813\u27e9.\n## \u00a7\u27e814\u27e9A Tour of Tokio\nTokio consists of a number of modules that provide a range of functionality essential for implementing asynchronous applications in Rust. In this section, we will take a brief tour of Tokio, summarizing the major APIs and their uses.\nThe easiest way to get started is to enable all features. Do this by enabling the `full` feature flag:\n```\ntokio = { version = \"1\", features = [\"full\"] }\n```\n\n#### \u00a7\u27e815\u27e9Authoring applications\nTokio is great for writing applications and most users in this case shouldn\u2019t worry too much about what features they should pick. If you\u2019re unsure, we suggest going with `full` to ensure that you don\u2019t run into any road blocks while you\u2019re building your application.\n##### \u00a7\u27e816\u27e9Example\nThis example shows the quickest way to get started with Tokio.\n```\ntokio = { version = \"1\", features = [\"full\"] }\n```\n\n#### \u00a7\u27e817\u27e9Authoring libraries\nAs a library author your goal should be to provide the lightest weight crate that is based on Tokio. To achieve this you should ensure that you only enable the features you need. This allows users to pick up your crate without having to enable unnecessary features.\n##### \u00a7\u27e818\u27e9Example\nThis example shows how you may want to import features for a library that just needs to `tokio::spawn` and use a `TcpStream`.\n```\ntokio = { version = \"1\", features = [\"rt\", \"net\"] }\n```\n\n### \u00a7\u27e84\u27e9Working With Tasks\nAsynchronous programs in Rust are based around lightweight, non-blocking units of execution called _tasks_\u27e84\u27e9. The `tokio::task`\u27e819\u27e9 module provides important tools for working with tasks:\n  * The `spawn`\u27e820\u27e9 function and `JoinHandle`\u27e821\u27e9 type, for scheduling a new task on the Tokio runtime and awaiting the output of a spawned task, respectively,\n  * Functions for running blocking operations\u27e822\u27e9 in an asynchronous task context.\n\n\nThe `tokio::task`\u27e819\u27e9 module is present only when the \u201crt\u201d feature flag is enabled.\nThe `tokio::sync`\u27e85\u27e9 module contains synchronization primitives to use when needing to communicate or share data. These include:\n  * channels (`oneshot`\u27e823\u27e9, `mpsc`\u27e824\u27e9, `watch`\u27e825\u27e9, and `broadcast`\u27e826\u27e9), for sending values between tasks,\n  * a non-blocking `Mutex`\u27e827\u27e9, for controlling access to a shared, mutable value,\n  * an asynchronous `Barrier`\u27e828\u27e9 type, for multiple tasks to synchronize before beginning a computation.\n\n\nThe `tokio::sync` module is present only when the \u201csync\u201d feature flag is enabled.\nThe `tokio::time`\u27e86\u27e9 module provides utilities for tracking time and scheduling work. This includes functions for setting timeouts\u27e829\u27e9 for tasks, sleeping\u27e830\u27e9 work to run in the future, or repeating an operation at an interval\u27e831\u27e9.\nIn order to use `tokio::time`, the \u201ctime\u201d feature flag must be enabled.\nFinally, Tokio provides a _runtime_ for executing asynchronous tasks. Most applications can use the [`#[tokio::main]`](https://docs.rs/tokio/latest/tokio/attr.main.html) macro to run their code on the Tokio runtime. However, this macro provides only basic configuration options. As an alternative, the `tokio::runtime`\u27e812\u27e9 module provides more powerful APIs for configuring and managing runtimes. You should use that module if the `#[tokio::main]` macro doesn\u2019t provide the functionality you need.\nUsing the runtime requires the \u201crt\u201d or \u201crt-multi-thread\u201d feature flags, to enable the current-thread single-threaded scheduler\u27e832\u27e9 and the multi-thread scheduler\u27e833\u27e9, respectively. See the `runtime` module documentation\u27e834\u27e9 for details. In addition, the \u201cmacros\u201d feature flag enables the `#[tokio::main]` and `#[tokio::test]` attributes.\n### \u00a7\u27e835\u27e9CPU-bound tasks and blocking code\nTokio is able to concurrently run many tasks on a few threads by repeatedly swapping the currently running task on each thread. However, this kind of swapping can only happen at `.await` points, so code that spends a long time without reaching an `.await` will prevent other tasks from running. To combat this, Tokio provides two kinds of threads: Core threads and blocking threads.\nThe core threads are where all asynchronous code runs, and Tokio will by default spawn one for each CPU core. You can use the environment variable `TOKIO_WORKER_THREADS` to override the default value.\nThe blocking threads are spawned on demand, can be used to run blocking code that would otherwise block other tasks from running and are kept alive when not used for a certain amount of time which can be configured with `thread_keep_alive`\u27e836\u27e9. Since it is not possible for Tokio to swap out blocking tasks, like it can do with asynchronous code, the upper limit on the number of blocking threads is very large. These limits can be configured on the `Builder`\u27e837\u27e9.\nTo spawn a blocking task, you should use the `spawn_blocking`\u27e838\u27e9 function.\n```\n#[tokio::main]\nasync fn main() {\n  // This is running on a core thread.\n  let blocking_task = tokio::task::spawn_blocking(|| {\n    // This is running on a blocking thread.\n    // Blocking here is ok.\n  });\n  // We can wait for the blocking task like this:\n  // If the blocking task panics, the unwrap below will propagate the\n  // panic.\n  blocking_task.await.unwrap();\n}\n```\n\nIf your code is CPU-bound and you wish to limit the number of threads used to run it, you should use a separate thread pool dedicated to CPU bound tasks. For example, you could consider using the rayon\u27e839\u27e9 library for CPU-bound tasks. It is also possible to create an extra Tokio runtime dedicated to CPU-bound tasks, but if you do this, you should be careful that the extra runtime runs _only_ CPU-bound tasks, as IO-bound tasks on that runtime will behave poorly.\nHint: If using rayon, you can use a `oneshot`\u27e823\u27e9 channel to send the result back to Tokio when the rayon task finishes.\n### \u00a7\u27e87\u27e9Asynchronous IO\nAs well as scheduling and running tasks, Tokio provides everything you need to perform input and output asynchronously.\nThe `tokio::io`\u27e840\u27e9 module provides Tokio\u2019s asynchronous core I/O primitives, the `AsyncRead`\u27e841\u27e9, `AsyncWrite`\u27e842\u27e9, and `AsyncBufRead`\u27e843\u27e9 traits. In addition, when the \u201cio-util\u201d feature flag is enabled, it also provides combinators and functions for working with these traits, forming as an asynchronous counterpart to `std::io`\u27e844\u27e9.\nTokio also includes APIs for performing various kinds of I/O and interacting with the operating system asynchronously. These include:\n  * `tokio::net`\u27e88\u27e9, which contains non-blocking versions of TCP\u27e845\u27e9, UDP\u27e846\u27e9, and Unix Domain Sockets\u27e847\u27e9 (enabled by the \u201cnet\u201d feature flag),\n  * `tokio::fs`\u27e89\u27e9, similar to `std::fs`\u27e848\u27e9 but for performing filesystem I/O asynchronously (enabled by the \u201cfs\u201d feature flag),\n  * `tokio::signal`\u27e811\u27e9, for asynchronously handling Unix and Windows OS signals (enabled by the \u201csignal\u201d feature flag),\n  * `tokio::process`\u27e810\u27e9, for spawning and managing child processes (enabled by the \u201cprocess\u201d feature flag).\n\n\n## \u00a7\u27e849\u27e9Examples\nA simple TCP echo server:\n```\nuse tokio::net::TcpListener;\nuse tokio::io::{AsyncReadExt, AsyncWriteExt};\n#[tokio::main]\nasync fn main() -> Result<(), Box<dyn std::error::Error>> {\n  let listener = TcpListener::bind(\"127.0.0.1:8080\").await?;\n  loop {\n    let (mut socket, _) = listener.accept().await?;\n    tokio::spawn(async move {\n      let mut buf = [0; 1024];\n      // In a loop, read data from the socket and write the data back.\n      loop {\n        let n = match socket.read(&mut buf).await {\n          // socket closed\n          Ok(0) => return,\n          Ok(n) => n,\n          Err(e) => {\n            eprintln!(\"failed to read from socket; err = {:?}\", e);\n            return;\n          }\n        };\n        // Write the data back\n        if let Err(e) = socket.write_all(&buf[0..n]).await {\n          eprintln!(\"failed to write to socket; err = {:?}\", e);\n          return;\n        }\n      }\n    });\n  }\n}\n```\n\n## \u00a7\u27e850\u27e9Feature flags\nTokio uses a set of feature flags\u27e851\u27e9 to reduce the amount of compiled code. It is possible to just enable certain features over others. By default, Tokio does not enable any features but allows one to enable a subset for their use case. Below is a list of the available feature flags. You may also notice above each function, struct and trait there is listed one or more feature flags that are required for that item to be used. If you are new to Tokio it is recommended that you use the `full` feature flag which will enable all public APIs. Beware though that this will pull in many extra dependencies that you may not need.\n  * `full`: Enables all features listed below except `test-util` and `tracing`.\n  * `rt`: Enables `tokio::spawn`, the current-thread scheduler, and non-scheduler utilities.\n  * `rt-multi-thread`: Enables the heavier, multi-threaded, work-stealing scheduler.\n  * `io-util`: Enables the IO based `Ext` traits.\n  * `io-std`: Enable `Stdout`, `Stdin` and `Stderr` types.\n  * `net`: Enables `tokio::net` types such as `TcpStream`, `UnixStream` and `UdpSocket`, as well as (on Unix-like systems) `AsyncFd` and (on FreeBSD) `PollAio`.\n  * `time`: Enables `tokio::time` types and allows the schedulers to enable the built in timer.\n  * `process`: Enables `tokio::process` types.\n  * `macros`: Enables `#[tokio::main]` and `#[tokio::test]` macros.\n  * `sync`: Enables all `tokio::sync` types.\n  * `signal`: Enables all `tokio::signal` types.\n  * `fs`: Enables `tokio::fs` types.\n  * `test-util`: Enables testing based infrastructure for the Tokio runtime.\n  * `parking_lot`: As a potential optimization, use the `_parking_lot_` crate\u2019s synchronization primitives internally. Also, this dependency is necessary to construct some of our primitives in a `const` context. `MSRV` may increase according to the `_parking_lot_` release in use.\n\n\n_Note:`AsyncRead` and `AsyncWrite` traits do not require any features and are always available._\n### \u00a7\u27e852\u27e9Unstable features\nSome feature flags are only available when specifying the `tokio_unstable` flag:\n  * `tracing`: Enables tracing events.\n\n\nLikewise, some parts of the API are only available with the same flag:\n  * `task::Builder`\u27e853\u27e9\n  * Some methods on `task::JoinSet`\u27e854\u27e9\n  * `runtime::RuntimeMetrics`\u27e855\u27e9\n  * `runtime::Builder::on_task_spawn`\u27e856\u27e9\n  * `runtime::Builder::on_task_terminate`\u27e857\u27e9\n  * `runtime::Builder::unhandled_panic`\u27e858\u27e9\n  * `runtime::TaskMeta`\u27e859\u27e9\n\n\nThis flag enables **unstable** features. The public API of these features may break in 1.x releases. To enable these features, the `--cfg tokio_unstable` argument must be passed to `rustc` when compiling. This serves to explicitly opt-in to features which may break semver conventions, since Cargo does not yet directly support such opt-ins\u27e860\u27e9.\nYou can specify it in your project\u2019s `.cargo/config.toml` file:\n```\n[build]\nrustflags = [\"--cfg\", \"tokio_unstable\"]\n```\n\nThe `[build]` section does **not** go in a `Cargo.toml` file. Instead it must be placed in the Cargo config file `.cargo/config.toml`. \nAlternatively, you can specify it with an environment variable:\n```\n## Many *nix shells:\nexport RUSTFLAGS=\"--cfg tokio_unstable\"\ncargo build\n```\n\n```\n## Windows PowerShell:\n$Env:RUSTFLAGS=\"--cfg tokio_unstable\"\ncargo build\n```\n\n## \u00a7\u27e861\u27e9Supported platforms\nTokio currently guarantees support for the following platforms:\n  * Linux\n  * Windows\n  * Android (API level 21)\n  * macOS\n  * iOS\n  * FreeBSD\n\n\nTokio will continue to support these platforms in the future. However, future releases may change requirements such as the minimum required libc version on Linux, the API level on Android, or the supported FreeBSD release.\nBeyond the above platforms, Tokio is intended to work on all platforms supported by the mio crate. You can find a longer list in mio\u2019s documentation\u27e862\u27e9. However, these additional platforms may become unsupported in the future.\nNote that Wine is considered to be a different platform from Windows. See mio\u2019s documentation for more information on Wine support.\n### \u00a7\u27e863\u27e9`WASM` support\nTokio has some limited support for the `WASM` platform. Without the `tokio_unstable` flag, the following features are supported:\n  * `sync`\n  * `macros`\n  * `io-util`\n  * `rt`\n  * `time`\n\n\nEnabling any other feature (including `full`) will cause a compilation failure.\nThe `time` module will only work on `WASM` platforms that have support for timers (e.g. wasm32-wasi). The timing functions will panic if used on a `WASM` platform that does not support timers.\nNote also that if the runtime becomes indefinitely idle, it will panic immediately instead of blocking forever. On platforms that don\u2019t support time, this means that the runtime can never be idle in any way.\n### \u00a7\u27e864\u27e9Unstable `WASM` support\nTokio also has unstable support for some additional `WASM` features. This requires the use of the `tokio_unstable` flag.\nUsing this flag enables the use of `tokio::net` on the wasm32-wasi target. However, not all methods are available on the networking types as `WASI` currently does not support the creation of new sockets from within `WASM`. Because of this, sockets must currently be created via the `FromRawFd` trait.\n## Re-exports\u00a7\u27e865\u27e9\n\n`pub use task::spawn[](https://docs.rs/tokio/latest/tokio/task/fn.spawn.html \"fn tokio::task::spawn\");``rt`\n\n## Modules\u00a7\u27e866\u27e9\n\ndoc\u27e867\u27e9\n    Types which are documented locally in the Tokio crate, but does not actually live here.\n\nfs\u27e89\u27e9`fs`\n    Asynchronous file utilities.\n\nio\u27e840\u27e9\n    Traits, helpers, and type definitions for asynchronous I/O functionality.\n\nnet\u27e88\u27e9\n    TCP/UDP/Unix bindings for `tokio`.\n\nprocess\u27e810\u27e9`process`\n    An implementation of asynchronous process management for Tokio.\n\nruntime\u27e812\u27e9`rt`\n    The Tokio runtime.\n\nsignal\u27e811\u27e9`signal`\n    Asynchronous signal handling for Tokio.\n\nstream\u27e868\u27e9\n    Due to the `Stream` trait\u2019s inclusion in `std` landing later than Tokio\u2019s 1.0 release, most of the Tokio stream utilities have been moved into the `tokio-stream`\u27e869\u27e9 crate.\n\nsync\u27e85\u27e9`sync`\n    Synchronization primitives for use in asynchronous contexts.\n\ntask\u27e819\u27e9\n    Asynchronous green-threads.\n\ntime\u27e86\u27e9`time`\n    Utilities for tracking time.\n## Macros\u00a7\u27e870\u27e9\n\njoin\u27e871\u27e9`macros`\n    Waits on multiple concurrent branches, returning when **all** branches complete.\n\npin\u27e872\u27e9\n    Pins a value on the stack.\n\nselect\u27e873\u27e9`macros`\n    Waits on multiple concurrent branches, returning when the **first** branch completes, cancelling the remaining branches.\n\ntask_local\u27e874\u27e9`rt`\n    Declares a new task-local key of type `tokio::task::LocalKey`\u27e875\u27e9.\n\ntry_join\u27e876\u27e9`macros`\n    Waits on multiple concurrent branches, returning when **all** branches complete with `Ok(_)` or on the first `Err(_)`.\n## Attribute Macros\u00a7\u27e877\u27e9\n\nmain\u27e878\u27e9`rt` and `macros`\n    Marks async function to be executed by the selected runtime. This macro helps set up a `Runtime` without requiring the user to use Runtime\u27e879\u27e9 or Builder\u27e837\u27e9 directly.\n\ntest\u27e880\u27e9`rt` and `macros`\n    Marks async function to be executed by runtime, suitable to test environment. This macro helps set up a `Runtime` without requiring the user to use Runtime\u27e879\u27e9 or Builder\u27e837\u27e9 directly.\n",
            "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://docs.rs/tokio/latest/settings.html: Settings\n\u27e82\u27e9 https://docs.rs/tokio/latest/help.html: Help\n\u27e83\u27e9 https://docs.rs/tokio/latest/src/tokio/lib.rs.html#1-698: Source\n\u27e84\u27e9 https://docs.rs/tokio/latest/tokio/#working-with-tasks: working with asynchronous tasks\n\u27e85\u27e9 https://docs.rs/tokio/latest/tokio/sync/index.html: mod tokio::sync - synchronization primitives and channels\n\u27e86\u27e9 https://docs.rs/tokio/latest/tokio/time/index.html: mod tokio::time - timeouts, sleeps, and intervals\n\u27e87\u27e9 https://docs.rs/tokio/latest/tokio/#asynchronous-io: performing asynchronous I/O\n\u27e88\u27e9 https://docs.rs/tokio/latest/tokio/net/index.html: mod tokio::net - TCP and UDP\n\u27e89\u27e9 https://docs.rs/tokio/latest/tokio/fs/index.html: mod tokio::fs - filesystem\n\u27e810\u27e9 https://docs.rs/tokio/latest/tokio/process/index.html: mod tokio::process - process\n\u27e811\u27e9 https://docs.rs/tokio/latest/tokio/signal/index.html: mod tokio::signal - signal\n\u27e812\u27e9 https://docs.rs/tokio/latest/tokio/runtime/index.html: mod tokio::runtime - runtime\n\u27e813\u27e9 https://tokio.rs/tokio/tutorial: website\n\u27e814\u27e9 https://docs.rs/tokio/latest/tokio/#a-tour-of-tokio: \u00a7\n\u27e815\u27e9 https://docs.rs/tokio/latest/tokio/#authoring-applications: \u00a7\n\u27e816\u27e9 https://docs.rs/tokio/latest/tokio/#example: \u00a7\n\u27e817\u27e9 https://docs.rs/tokio/latest/tokio/#authoring-libraries: \u00a7\n\u27e818\u27e9 https://docs.rs/tokio/latest/tokio/#example-1: \u00a7\n\u27e819\u27e9 https://docs.rs/tokio/latest/tokio/task/index.html: mod tokio::task - `tokio::task`\n\u27e820\u27e9 https://docs.rs/tokio/latest/tokio/task/fn.spawn.html: fn tokio::task::spawn - `spawn`\n\u27e821\u27e9 https://docs.rs/tokio/latest/tokio/task/struct.JoinHandle.html: struct tokio::task::JoinHandle - `JoinHandle`\n\u27e822\u27e9 https://docs.rs/tokio/latest/tokio/task/index.html#blocking-and-yielding: running blocking operations\n\u27e823\u27e9 https://docs.rs/tokio/latest/tokio/sync/oneshot/index.html: mod tokio::sync::oneshot - `oneshot`\n\u27e824\u27e9 https://docs.rs/tokio/latest/tokio/sync/mpsc/index.html: mod tokio::sync::mpsc - `mpsc`\n\u27e825\u27e9 https://docs.rs/tokio/latest/tokio/sync/watch/index.html: mod tokio::sync::watch - `watch`\n\u27e826\u27e9 https://docs.rs/tokio/latest/tokio/sync/broadcast/index.html: mod tokio::sync::broadcast - `broadcast`\n\u27e827\u27e9 https://docs.rs/tokio/latest/tokio/sync/struct.Mutex.html: struct tokio::sync::Mutex - `Mutex`\n\u27e828\u27e9 https://docs.rs/tokio/latest/tokio/sync/struct.Barrier.html: struct tokio::sync::Barrier - `Barrier`\n\u27e829\u27e9 https://docs.rs/tokio/latest/tokio/time/fn.timeout.html: fn tokio::time::timeout - timeouts\n\u27e830\u27e9 https://docs.rs/tokio/latest/tokio/time/fn.sleep.html: fn tokio::time::sleep - sleeping\n\u27e831\u27e9 https://docs.rs/tokio/latest/tokio/time/fn.interval.html: fn tokio::time::interval - repeating an operation at an interval\n\u27e832\u27e9 https://docs.rs/tokio/latest/tokio/runtime/index.html#current-thread-scheduler: single-threaded scheduler\n\u27e833\u27e9 https://docs.rs/tokio/latest/tokio/runtime/index.html#multi-thread-scheduler: multi-thread scheduler\n\u27e834\u27e9 https://docs.rs/tokio/latest/tokio/runtime/index.html#runtime-scheduler: `runtime` module documentation\n\u27e835\u27e9 https://docs.rs/tokio/latest/tokio/#cpu-bound-tasks-and-blocking-code: \u00a7\n\u27e836\u27e9 https://docs.rs/tokio/latest/tokio/runtime/struct.Builder.html#method.thread_keep_alive: method tokio::runtime::Builder::thread_keep_alive - `thread_keep_alive`\n\u27e837\u27e9 https://docs.rs/tokio/latest/tokio/runtime/struct.Builder.html: struct tokio::runtime::Builder - `Builder`\n\u27e838\u27e9 https://docs.rs/tokio/latest/tokio/task/fn.spawn_blocking.html: fn tokio::task::spawn_blocking - `spawn_blocking`\n\u27e839\u27e9 https://docs.rs/rayon: rayon\n\u27e840\u27e9 https://docs.rs/tokio/latest/tokio/io/index.html: mod tokio::io - `tokio::io`\n\u27e841\u27e9 https://docs.rs/tokio/latest/tokio/io/trait.AsyncRead.html: trait tokio::io::AsyncRead - `AsyncRead`\n\u27e842\u27e9 https://docs.rs/tokio/latest/tokio/io/trait.AsyncWrite.html: trait tokio::io::AsyncWrite - `AsyncWrite`\n\u27e843\u27e9 https://docs.rs/tokio/latest/tokio/io/trait.AsyncBufRead.html: trait tokio::io::AsyncBufRead - `AsyncBufRead`\n\u27e844\u27e9 https://doc.rust-lang.org/nightly/std/io/index.html: mod std::io - `std::io`\n\u27e845\u27e9 https://docs.rs/tokio/latest/tokio/net/tcp/index.html: mod tokio::net::tcp - TCP\n\u27e846\u27e9 https://docs.rs/tokio/latest/tokio/net/struct.UdpSocket.html: struct tokio::net::UdpSocket - UDP\n\u27e847\u27e9 https://docs.rs/tokio/latest/tokio/net/unix/index.html: mod tokio::net::unix - Unix Domain Sockets\n\u27e848\u27e9 https://doc.rust-lang.org/nightly/std/fs/index.html: mod std::fs - `std::fs`\n\u27e849\u27e9 https://docs.rs/tokio/latest/tokio/#examples: \u00a7\n\u27e850\u27e9 https://docs.rs/tokio/latest/tokio/#feature-flags: \u00a7\n\u27e851\u27e9 https://doc.rust-lang.org/cargo/reference/manifest.html#the-features-section: feature flags\n\u27e852\u27e9 https://docs.rs/tokio/latest/tokio/#unstable-features: \u00a7\n\u27e853\u27e9 https://docs.rs/tokio/latest/tokio/task/struct.Builder.html: struct tokio::task::Builder - `task::Builder`\n\u27e854\u27e9 https://docs.rs/tokio/latest/tokio/task/struct.JoinSet.html: struct tokio::task::JoinSet - `task::JoinSet`\n\u27e855\u27e9 https://docs.rs/tokio/latest/tokio/runtime/struct.RuntimeMetrics.html: struct tokio::runtime::RuntimeMetrics - `runtime::RuntimeMetrics`\n\u27e856\u27e9 https://docs.rs/tokio/latest/tokio/runtime/struct.Builder.html#method.on_task_spawn: method tokio::runtime::Builder::on_task_spawn - `runtime::Builder::on_task_spawn`\n\u27e857\u27e9 https://docs.rs/tokio/latest/tokio/runtime/struct.Builder.html#method.on_task_terminate: method tokio::runtime::Builder::on_task_terminate - `runtime::Builder::on_task_terminate`\n\u27e858\u27e9 https://docs.rs/tokio/latest/tokio/runtime/struct.Builder.html#method.unhandled_panic: method tokio::runtime::Builder::unhandled_panic - `runtime::Builder::unhandled_panic`\n\u27e859\u27e9 https://docs.rs/tokio/latest/tokio/runtime/struct.TaskMeta.html: struct tokio::runtime::TaskMeta - `runtime::TaskMeta`\n\u27e860\u27e9 https://internals.rust-lang.org/t/feature-request-unstable-opt-in-non-transitive-crate-features/16193#why-not-a-crate-feature-2: does not yet directly support such opt-ins\n\u27e861\u27e9 https://docs.rs/tokio/latest/tokio/#supported-platforms: \u00a7\n\u27e862\u27e9 https://crates.io/crates/mio#platforms: in mio\u2019s documentation\n\u27e863\u27e9 https://docs.rs/tokio/latest/tokio/#wasm-support: \u00a7\n\u27e864\u27e9 https://docs.rs/tokio/latest/tokio/#unstable-wasm-support: \u00a7\n\u27e865\u27e9 https://docs.rs/tokio/latest/tokio/#reexports: \u00a7\n\u27e866\u27e9 https://docs.rs/tokio/latest/tokio/#modules: \u00a7\n\u27e867\u27e9 https://docs.rs/tokio/latest/tokio/doc/index.html: mod tokio::doc - doc\n\u27e868\u27e9 https://docs.rs/tokio/latest/tokio/stream/index.html: mod tokio::stream - stream\n\u27e869\u27e9 https://docs.rs/tokio-stream: `tokio-stream`\n\u27e870\u27e9 https://docs.rs/tokio/latest/tokio/#macros: \u00a7\n\u27e871\u27e9 https://docs.rs/tokio/latest/tokio/macro.join.html: macro tokio::join - join\n\u27e872\u27e9 https://docs.rs/tokio/latest/tokio/macro.pin.html: macro tokio::pin - pin\n\u27e873\u27e9 https://docs.rs/tokio/latest/tokio/macro.select.html: macro tokio::select - select\n\u27e874\u27e9 https://docs.rs/tokio/latest/tokio/macro.task_local.html: macro tokio::task_local - task_local\n\u27e875\u27e9 https://docs.rs/tokio/latest/tokio/task/struct.LocalKey.html: struct tokio::task::LocalKey - `tokio::task::LocalKey`\n\u27e876\u27e9 https://docs.rs/tokio/latest/tokio/macro.try_join.html: macro tokio::try_join - try_join\n\u27e877\u27e9 https://docs.rs/tokio/latest/tokio/#attributes: \u00a7\n\u27e878\u27e9 https://docs.rs/tokio/latest/tokio/attr.main.html: attr tokio::main - main\n\u27e879\u27e9 https://docs.rs/tokio/latest/tokio/runtime/struct.Runtime.html: Runtime\n\u27e880\u27e9 https://docs.rs/tokio/latest/tokio/attr.test.html: attr tokio::test - test\n",
            "fit_markdown": "",
            "fit_html": ""
          },
          "downloads": 0,
          "github_stars": 0,
          "dependencies": [],
          "features": {},
          "code_snippets": [],
          "readme_sections": {},
          "librs_downloads": null,
          "source": "crates.io",
          "enhanced_scraping": {},
          "enhanced_features": [],
          "enhanced_dependencies": []
        },
        "enriched_crate": {
          "name": "tokio",
          "version": "1.45.1",
          "description": "ALLOW: Positive community sentiment",
          "repository": "",
          "keywords": [],
          "categories": [],
          "readme": {
            "raw_markdown": "[](https://docs.rs/tokio/latest/tokio/all.html \"show sidebar\")\n# Crate tokioCopy item path\n[Settings](https://docs.rs/tokio/latest/settings.html)\n[Help](https://docs.rs/tokio/latest/help.html)\nSummary[Source](https://docs.rs/tokio/latest/src/tokio/lib.rs.html#1-698)\nExpand description\nA runtime for writing reliable network applications without compromising speed.\nTokio is an event-driven, non-blocking I/O platform for writing asynchronous applications with the Rust programming language. At a high level, it provides a few major components:\n  * Tools for [working with asynchronous tasks](https://docs.rs/tokio/latest/tokio/#working-with-tasks), including [synchronization primitives and channels](https://docs.rs/tokio/latest/tokio/sync/index.html \"mod tokio::sync\") and [timeouts, sleeps, and intervals](https://docs.rs/tokio/latest/tokio/time/index.html \"mod tokio::time\").\n  * APIs for [performing asynchronous I/O](https://docs.rs/tokio/latest/tokio/#asynchronous-io), including [TCP and UDP](https://docs.rs/tokio/latest/tokio/net/index.html \"mod tokio::net\") sockets, [filesystem](https://docs.rs/tokio/latest/tokio/fs/index.html \"mod tokio::fs\") operations, and [process](https://docs.rs/tokio/latest/tokio/process/index.html \"mod tokio::process\") and [signal](https://docs.rs/tokio/latest/tokio/signal/index.html \"mod tokio::signal\") management.\n  * A [runtime](https://docs.rs/tokio/latest/tokio/runtime/index.html \"mod tokio::runtime\") for executing asynchronous code, including a task scheduler, an I/O driver backed by the operating system\u2019s event queue (`epoll`, `kqueue`, `IOCP`, etc\u2026), and a high performance timer.\n\n\nGuide level documentation is found on the [website](https://tokio.rs/tokio/tutorial).\n## [\u00a7](https://docs.rs/tokio/latest/tokio/#a-tour-of-tokio)A Tour of Tokio\nTokio consists of a number of modules that provide a range of functionality essential for implementing asynchronous applications in Rust. In this section, we will take a brief tour of Tokio, summarizing the major APIs and their uses.\nThe easiest way to get started is to enable all features. Do this by enabling the `full` feature flag:\n```\ntokio = { version = \"1\", features = [\"full\"] }\n```\n\n#### [\u00a7](https://docs.rs/tokio/latest/tokio/#authoring-applications)Authoring applications\nTokio is great for writing applications and most users in this case shouldn\u2019t worry too much about what features they should pick. If you\u2019re unsure, we suggest going with `full` to ensure that you don\u2019t run into any road blocks while you\u2019re building your application.\n##### [\u00a7](https://docs.rs/tokio/latest/tokio/#example)Example\nThis example shows the quickest way to get started with Tokio.\n```\ntokio = { version = \"1\", features = [\"full\"] }\n```\n\n#### [\u00a7](https://docs.rs/tokio/latest/tokio/#authoring-libraries)Authoring libraries\nAs a library author your goal should be to provide the lightest weight crate that is based on Tokio. To achieve this you should ensure that you only enable the features you need. This allows users to pick up your crate without having to enable unnecessary features.\n##### [\u00a7](https://docs.rs/tokio/latest/tokio/#example-1)Example\nThis example shows how you may want to import features for a library that just needs to `tokio::spawn` and use a `TcpStream`.\n```\ntokio = { version = \"1\", features = [\"rt\", \"net\"] }\n```\n\n### [\u00a7](https://docs.rs/tokio/latest/tokio/#working-with-tasks)Working With Tasks\nAsynchronous programs in Rust are based around lightweight, non-blocking units of execution called [_tasks_](https://docs.rs/tokio/latest/tokio/#working-with-tasks). The [`tokio::task`](https://docs.rs/tokio/latest/tokio/task/index.html \"mod tokio::task\") module provides important tools for working with tasks:\n  * The [`spawn`](https://docs.rs/tokio/latest/tokio/task/fn.spawn.html \"fn tokio::task::spawn\") function and [`JoinHandle`](https://docs.rs/tokio/latest/tokio/task/struct.JoinHandle.html \"struct tokio::task::JoinHandle\") type, for scheduling a new task on the Tokio runtime and awaiting the output of a spawned task, respectively,\n  * Functions for [running blocking operations](https://docs.rs/tokio/latest/tokio/task/index.html#blocking-and-yielding) in an asynchronous task context.\n\n\nThe [`tokio::task`](https://docs.rs/tokio/latest/tokio/task/index.html \"mod tokio::task\") module is present only when the \u201crt\u201d feature flag is enabled.\nThe [`tokio::sync`](https://docs.rs/tokio/latest/tokio/sync/index.html \"mod tokio::sync\") module contains synchronization primitives to use when needing to communicate or share data. These include:\n  * channels ([`oneshot`](https://docs.rs/tokio/latest/tokio/sync/oneshot/index.html \"mod tokio::sync::oneshot\"), [`mpsc`](https://docs.rs/tokio/latest/tokio/sync/mpsc/index.html \"mod tokio::sync::mpsc\"), [`watch`](https://docs.rs/tokio/latest/tokio/sync/watch/index.html \"mod tokio::sync::watch\"), and [`broadcast`](https://docs.rs/tokio/latest/tokio/sync/broadcast/index.html \"mod tokio::sync::broadcast\")), for sending values between tasks,\n  * a non-blocking [`Mutex`](https://docs.rs/tokio/latest/tokio/sync/struct.Mutex.html \"struct tokio::sync::Mutex\"), for controlling access to a shared, mutable value,\n  * an asynchronous [`Barrier`](https://docs.rs/tokio/latest/tokio/sync/struct.Barrier.html \"struct tokio::sync::Barrier\") type, for multiple tasks to synchronize before beginning a computation.\n\n\nThe `tokio::sync` module is present only when the \u201csync\u201d feature flag is enabled.\nThe [`tokio::time`](https://docs.rs/tokio/latest/tokio/time/index.html \"mod tokio::time\") module provides utilities for tracking time and scheduling work. This includes functions for setting [timeouts](https://docs.rs/tokio/latest/tokio/time/fn.timeout.html \"fn tokio::time::timeout\") for tasks, [sleeping](https://docs.rs/tokio/latest/tokio/time/fn.sleep.html \"fn tokio::time::sleep\") work to run in the future, or [repeating an operation at an interval](https://docs.rs/tokio/latest/tokio/time/fn.interval.html \"fn tokio::time::interval\").\nIn order to use `tokio::time`, the \u201ctime\u201d feature flag must be enabled.\nFinally, Tokio provides a _runtime_ for executing asynchronous tasks. Most applications can use the [`#[tokio::main]`](https://docs.rs/tokio/latest/tokio/attr.main.html) macro to run their code on the Tokio runtime. However, this macro provides only basic configuration options. As an alternative, the [`tokio::runtime`](https://docs.rs/tokio/latest/tokio/runtime/index.html \"mod tokio::runtime\") module provides more powerful APIs for configuring and managing runtimes. You should use that module if the `#[tokio::main]` macro doesn\u2019t provide the functionality you need.\nUsing the runtime requires the \u201crt\u201d or \u201crt-multi-thread\u201d feature flags, to enable the current-thread [single-threaded scheduler](https://docs.rs/tokio/latest/tokio/runtime/index.html#current-thread-scheduler) and the [multi-thread scheduler](https://docs.rs/tokio/latest/tokio/runtime/index.html#multi-thread-scheduler), respectively. See the [`runtime` module documentation](https://docs.rs/tokio/latest/tokio/runtime/index.html#runtime-scheduler) for details. In addition, the \u201cmacros\u201d feature flag enables the `#[tokio::main]` and `#[tokio::test]` attributes.\n### [\u00a7](https://docs.rs/tokio/latest/tokio/#cpu-bound-tasks-and-blocking-code)CPU-bound tasks and blocking code\nTokio is able to concurrently run many tasks on a few threads by repeatedly swapping the currently running task on each thread. However, this kind of swapping can only happen at `.await` points, so code that spends a long time without reaching an `.await` will prevent other tasks from running. To combat this, Tokio provides two kinds of threads: Core threads and blocking threads.\nThe core threads are where all asynchronous code runs, and Tokio will by default spawn one for each CPU core. You can use the environment variable `TOKIO_WORKER_THREADS` to override the default value.\nThe blocking threads are spawned on demand, can be used to run blocking code that would otherwise block other tasks from running and are kept alive when not used for a certain amount of time which can be configured with [`thread_keep_alive`](https://docs.rs/tokio/latest/tokio/runtime/struct.Builder.html#method.thread_keep_alive \"method tokio::runtime::Builder::thread_keep_alive\"). Since it is not possible for Tokio to swap out blocking tasks, like it can do with asynchronous code, the upper limit on the number of blocking threads is very large. These limits can be configured on the [`Builder`](https://docs.rs/tokio/latest/tokio/runtime/struct.Builder.html \"struct tokio::runtime::Builder\").\nTo spawn a blocking task, you should use the [`spawn_blocking`](https://docs.rs/tokio/latest/tokio/task/fn.spawn_blocking.html \"fn tokio::task::spawn_blocking\") function.\n```\n#[tokio::main]\nasync fn main() {\n  // This is running on a core thread.\n  let blocking_task = tokio::task::spawn_blocking(|| {\n    // This is running on a blocking thread.\n    // Blocking here is ok.\n  });\n  // We can wait for the blocking task like this:\n  // If the blocking task panics, the unwrap below will propagate the\n  // panic.\n  blocking_task.await.unwrap();\n}\n```\n\nIf your code is CPU-bound and you wish to limit the number of threads used to run it, you should use a separate thread pool dedicated to CPU bound tasks. For example, you could consider using the [rayon](https://docs.rs/rayon) library for CPU-bound tasks. It is also possible to create an extra Tokio runtime dedicated to CPU-bound tasks, but if you do this, you should be careful that the extra runtime runs _only_ CPU-bound tasks, as IO-bound tasks on that runtime will behave poorly.\nHint: If using rayon, you can use a [`oneshot`](https://docs.rs/tokio/latest/tokio/sync/oneshot/index.html \"mod tokio::sync::oneshot\") channel to send the result back to Tokio when the rayon task finishes.\n### [\u00a7](https://docs.rs/tokio/latest/tokio/#asynchronous-io)Asynchronous IO\nAs well as scheduling and running tasks, Tokio provides everything you need to perform input and output asynchronously.\nThe [`tokio::io`](https://docs.rs/tokio/latest/tokio/io/index.html \"mod tokio::io\") module provides Tokio\u2019s asynchronous core I/O primitives, the [`AsyncRead`](https://docs.rs/tokio/latest/tokio/io/trait.AsyncRead.html \"trait tokio::io::AsyncRead\"), [`AsyncWrite`](https://docs.rs/tokio/latest/tokio/io/trait.AsyncWrite.html \"trait tokio::io::AsyncWrite\"), and [`AsyncBufRead`](https://docs.rs/tokio/latest/tokio/io/trait.AsyncBufRead.html \"trait tokio::io::AsyncBufRead\") traits. In addition, when the \u201cio-util\u201d feature flag is enabled, it also provides combinators and functions for working with these traits, forming as an asynchronous counterpart to [`std::io`](https://doc.rust-lang.org/nightly/std/io/index.html \"mod std::io\").\nTokio also includes APIs for performing various kinds of I/O and interacting with the operating system asynchronously. These include:\n  * [`tokio::net`](https://docs.rs/tokio/latest/tokio/net/index.html \"mod tokio::net\"), which contains non-blocking versions of [TCP](https://docs.rs/tokio/latest/tokio/net/tcp/index.html \"mod tokio::net::tcp\"), [UDP](https://docs.rs/tokio/latest/tokio/net/struct.UdpSocket.html \"struct tokio::net::UdpSocket\"), and [Unix Domain Sockets](https://docs.rs/tokio/latest/tokio/net/unix/index.html \"mod tokio::net::unix\") (enabled by the \u201cnet\u201d feature flag),\n  * [`tokio::fs`](https://docs.rs/tokio/latest/tokio/fs/index.html \"mod tokio::fs\"), similar to [`std::fs`](https://doc.rust-lang.org/nightly/std/fs/index.html \"mod std::fs\") but for performing filesystem I/O asynchronously (enabled by the \u201cfs\u201d feature flag),\n  * [`tokio::signal`](https://docs.rs/tokio/latest/tokio/signal/index.html \"mod tokio::signal\"), for asynchronously handling Unix and Windows OS signals (enabled by the \u201csignal\u201d feature flag),\n  * [`tokio::process`](https://docs.rs/tokio/latest/tokio/process/index.html \"mod tokio::process\"), for spawning and managing child processes (enabled by the \u201cprocess\u201d feature flag).\n\n\n## [\u00a7](https://docs.rs/tokio/latest/tokio/#examples)Examples\nA simple TCP echo server:\n```\nuse tokio::net::TcpListener;\nuse tokio::io::{AsyncReadExt, AsyncWriteExt};\n#[tokio::main]\nasync fn main() -> Result<(), Box<dyn std::error::Error>> {\n  let listener = TcpListener::bind(\"127.0.0.1:8080\").await?;\n  loop {\n    let (mut socket, _) = listener.accept().await?;\n    tokio::spawn(async move {\n      let mut buf = [0; 1024];\n      // In a loop, read data from the socket and write the data back.\n      loop {\n        let n = match socket.read(&mut buf).await {\n          // socket closed\n          Ok(0) => return,\n          Ok(n) => n,\n          Err(e) => {\n            eprintln!(\"failed to read from socket; err = {:?}\", e);\n            return;\n          }\n        };\n        // Write the data back\n        if let Err(e) = socket.write_all(&buf[0..n]).await {\n          eprintln!(\"failed to write to socket; err = {:?}\", e);\n          return;\n        }\n      }\n    });\n  }\n}\n```\n\n## [\u00a7](https://docs.rs/tokio/latest/tokio/#feature-flags)Feature flags\nTokio uses a set of [feature flags](https://doc.rust-lang.org/cargo/reference/manifest.html#the-features-section) to reduce the amount of compiled code. It is possible to just enable certain features over others. By default, Tokio does not enable any features but allows one to enable a subset for their use case. Below is a list of the available feature flags. You may also notice above each function, struct and trait there is listed one or more feature flags that are required for that item to be used. If you are new to Tokio it is recommended that you use the `full` feature flag which will enable all public APIs. Beware though that this will pull in many extra dependencies that you may not need.\n  * `full`: Enables all features listed below except `test-util` and `tracing`.\n  * `rt`: Enables `tokio::spawn`, the current-thread scheduler, and non-scheduler utilities.\n  * `rt-multi-thread`: Enables the heavier, multi-threaded, work-stealing scheduler.\n  * `io-util`: Enables the IO based `Ext` traits.\n  * `io-std`: Enable `Stdout`, `Stdin` and `Stderr` types.\n  * `net`: Enables `tokio::net` types such as `TcpStream`, `UnixStream` and `UdpSocket`, as well as (on Unix-like systems) `AsyncFd` and (on FreeBSD) `PollAio`.\n  * `time`: Enables `tokio::time` types and allows the schedulers to enable the built in timer.\n  * `process`: Enables `tokio::process` types.\n  * `macros`: Enables `#[tokio::main]` and `#[tokio::test]` macros.\n  * `sync`: Enables all `tokio::sync` types.\n  * `signal`: Enables all `tokio::signal` types.\n  * `fs`: Enables `tokio::fs` types.\n  * `test-util`: Enables testing based infrastructure for the Tokio runtime.\n  * `parking_lot`: As a potential optimization, use the `_parking_lot_` crate\u2019s synchronization primitives internally. Also, this dependency is necessary to construct some of our primitives in a `const` context. `MSRV` may increase according to the `_parking_lot_` release in use.\n\n\n_Note:`AsyncRead` and `AsyncWrite` traits do not require any features and are always available._\n### [\u00a7](https://docs.rs/tokio/latest/tokio/#unstable-features)Unstable features\nSome feature flags are only available when specifying the `tokio_unstable` flag:\n  * `tracing`: Enables tracing events.\n\n\nLikewise, some parts of the API are only available with the same flag:\n  * [`task::Builder`](https://docs.rs/tokio/latest/tokio/task/struct.Builder.html \"struct tokio::task::Builder\")\n  * Some methods on [`task::JoinSet`](https://docs.rs/tokio/latest/tokio/task/struct.JoinSet.html \"struct tokio::task::JoinSet\")\n  * [`runtime::RuntimeMetrics`](https://docs.rs/tokio/latest/tokio/runtime/struct.RuntimeMetrics.html \"struct tokio::runtime::RuntimeMetrics\")\n  * [`runtime::Builder::on_task_spawn`](https://docs.rs/tokio/latest/tokio/runtime/struct.Builder.html#method.on_task_spawn \"method tokio::runtime::Builder::on_task_spawn\")\n  * [`runtime::Builder::on_task_terminate`](https://docs.rs/tokio/latest/tokio/runtime/struct.Builder.html#method.on_task_terminate \"method tokio::runtime::Builder::on_task_terminate\")\n  * [`runtime::Builder::unhandled_panic`](https://docs.rs/tokio/latest/tokio/runtime/struct.Builder.html#method.unhandled_panic \"method tokio::runtime::Builder::unhandled_panic\")\n  * [`runtime::TaskMeta`](https://docs.rs/tokio/latest/tokio/runtime/struct.TaskMeta.html \"struct tokio::runtime::TaskMeta\")\n\n\nThis flag enables **unstable** features. The public API of these features may break in 1.x releases. To enable these features, the `--cfg tokio_unstable` argument must be passed to `rustc` when compiling. This serves to explicitly opt-in to features which may break semver conventions, since Cargo [does not yet directly support such opt-ins](https://internals.rust-lang.org/t/feature-request-unstable-opt-in-non-transitive-crate-features/16193#why-not-a-crate-feature-2).\nYou can specify it in your project\u2019s `.cargo/config.toml` file:\n```\n[build]\nrustflags = [\"--cfg\", \"tokio_unstable\"]\n```\n\nThe `[build]` section does **not** go in a `Cargo.toml` file. Instead it must be placed in the Cargo config file `.cargo/config.toml`. \nAlternatively, you can specify it with an environment variable:\n```\n## Many *nix shells:\nexport RUSTFLAGS=\"--cfg tokio_unstable\"\ncargo build\n```\n\n```\n## Windows PowerShell:\n$Env:RUSTFLAGS=\"--cfg tokio_unstable\"\ncargo build\n```\n\n## [\u00a7](https://docs.rs/tokio/latest/tokio/#supported-platforms)Supported platforms\nTokio currently guarantees support for the following platforms:\n  * Linux\n  * Windows\n  * Android (API level 21)\n  * macOS\n  * iOS\n  * FreeBSD\n\n\nTokio will continue to support these platforms in the future. However, future releases may change requirements such as the minimum required libc version on Linux, the API level on Android, or the supported FreeBSD release.\nBeyond the above platforms, Tokio is intended to work on all platforms supported by the mio crate. You can find a longer list [in mio\u2019s documentation](https://crates.io/crates/mio#platforms). However, these additional platforms may become unsupported in the future.\nNote that Wine is considered to be a different platform from Windows. See mio\u2019s documentation for more information on Wine support.\n### [\u00a7](https://docs.rs/tokio/latest/tokio/#wasm-support)`WASM` support\nTokio has some limited support for the `WASM` platform. Without the `tokio_unstable` flag, the following features are supported:\n  * `sync`\n  * `macros`\n  * `io-util`\n  * `rt`\n  * `time`\n\n\nEnabling any other feature (including `full`) will cause a compilation failure.\nThe `time` module will only work on `WASM` platforms that have support for timers (e.g. wasm32-wasi). The timing functions will panic if used on a `WASM` platform that does not support timers.\nNote also that if the runtime becomes indefinitely idle, it will panic immediately instead of blocking forever. On platforms that don\u2019t support time, this means that the runtime can never be idle in any way.\n### [\u00a7](https://docs.rs/tokio/latest/tokio/#unstable-wasm-support)Unstable `WASM` support\nTokio also has unstable support for some additional `WASM` features. This requires the use of the `tokio_unstable` flag.\nUsing this flag enables the use of `tokio::net` on the wasm32-wasi target. However, not all methods are available on the networking types as `WASI` currently does not support the creation of new sockets from within `WASM`. Because of this, sockets must currently be created via the `FromRawFd` trait.\n## Re-exports[\u00a7](https://docs.rs/tokio/latest/tokio/#reexports)\n\n`pub use task::spawn[](https://docs.rs/tokio/latest/tokio/task/fn.spawn.html \"fn tokio::task::spawn\");``rt`\n\n## Modules[\u00a7](https://docs.rs/tokio/latest/tokio/#modules)\n\n[doc](https://docs.rs/tokio/latest/tokio/doc/index.html \"mod tokio::doc\")\n    Types which are documented locally in the Tokio crate, but does not actually live here.\n\n[fs](https://docs.rs/tokio/latest/tokio/fs/index.html \"mod tokio::fs\")`fs`\n    Asynchronous file utilities.\n\n[io](https://docs.rs/tokio/latest/tokio/io/index.html \"mod tokio::io\")\n    Traits, helpers, and type definitions for asynchronous I/O functionality.\n\n[net](https://docs.rs/tokio/latest/tokio/net/index.html \"mod tokio::net\")\n    TCP/UDP/Unix bindings for `tokio`.\n\n[process](https://docs.rs/tokio/latest/tokio/process/index.html \"mod tokio::process\")`process`\n    An implementation of asynchronous process management for Tokio.\n\n[runtime](https://docs.rs/tokio/latest/tokio/runtime/index.html \"mod tokio::runtime\")`rt`\n    The Tokio runtime.\n\n[signal](https://docs.rs/tokio/latest/tokio/signal/index.html \"mod tokio::signal\")`signal`\n    Asynchronous signal handling for Tokio.\n\n[stream](https://docs.rs/tokio/latest/tokio/stream/index.html \"mod tokio::stream\")\n    Due to the `Stream` trait\u2019s inclusion in `std` landing later than Tokio\u2019s 1.0 release, most of the Tokio stream utilities have been moved into the [`tokio-stream`](https://docs.rs/tokio-stream) crate.\n\n[sync](https://docs.rs/tokio/latest/tokio/sync/index.html \"mod tokio::sync\")`sync`\n    Synchronization primitives for use in asynchronous contexts.\n\n[task](https://docs.rs/tokio/latest/tokio/task/index.html \"mod tokio::task\")\n    Asynchronous green-threads.\n\n[time](https://docs.rs/tokio/latest/tokio/time/index.html \"mod tokio::time\")`time`\n    Utilities for tracking time.\n## Macros[\u00a7](https://docs.rs/tokio/latest/tokio/#macros)\n\n[join](https://docs.rs/tokio/latest/tokio/macro.join.html \"macro tokio::join\")`macros`\n    Waits on multiple concurrent branches, returning when **all** branches complete.\n\n[pin](https://docs.rs/tokio/latest/tokio/macro.pin.html \"macro tokio::pin\")\n    Pins a value on the stack.\n\n[select](https://docs.rs/tokio/latest/tokio/macro.select.html \"macro tokio::select\")`macros`\n    Waits on multiple concurrent branches, returning when the **first** branch completes, cancelling the remaining branches.\n\n[task_local](https://docs.rs/tokio/latest/tokio/macro.task_local.html \"macro tokio::task_local\")`rt`\n    Declares a new task-local key of type [`tokio::task::LocalKey`](https://docs.rs/tokio/latest/tokio/task/struct.LocalKey.html \"struct tokio::task::LocalKey\").\n\n[try_join](https://docs.rs/tokio/latest/tokio/macro.try_join.html \"macro tokio::try_join\")`macros`\n    Waits on multiple concurrent branches, returning when **all** branches complete with `Ok(_)` or on the first `Err(_)`.\n## Attribute Macros[\u00a7](https://docs.rs/tokio/latest/tokio/#attributes)\n\n[main](https://docs.rs/tokio/latest/tokio/attr.main.html \"attr tokio::main\")`rt` and `macros`\n    Marks async function to be executed by the selected runtime. This macro helps set up a `Runtime` without requiring the user to use [Runtime](https://docs.rs/tokio/latest/tokio/runtime/struct.Runtime.html) or [Builder](https://docs.rs/tokio/latest/tokio/runtime/struct.Builder.html) directly.\n\n[test](https://docs.rs/tokio/latest/tokio/attr.test.html \"attr tokio::test\")`rt` and `macros`\n    Marks async function to be executed by runtime, suitable to test environment. This macro helps set up a `Runtime` without requiring the user to use [Runtime](https://docs.rs/tokio/latest/tokio/runtime/struct.Runtime.html) or [Builder](https://docs.rs/tokio/latest/tokio/runtime/struct.Builder.html) directly.\n",
            "markdown_with_citations": "[](https://docs.rs/tokio/latest/tokio/all.html \"show sidebar\")\n# Crate tokioCopy item path\nSettings\u27e81\u27e9\nHelp\u27e82\u27e9\nSummarySource\u27e83\u27e9\nExpand description\nA runtime for writing reliable network applications without compromising speed.\nTokio is an event-driven, non-blocking I/O platform for writing asynchronous applications with the Rust programming language. At a high level, it provides a few major components:\n  * Tools for working with asynchronous tasks\u27e84\u27e9, including synchronization primitives and channels\u27e85\u27e9 and timeouts, sleeps, and intervals\u27e86\u27e9.\n  * APIs for performing asynchronous I/O\u27e87\u27e9, including TCP and UDP\u27e88\u27e9 sockets, filesystem\u27e89\u27e9 operations, and process\u27e810\u27e9 and signal\u27e811\u27e9 management.\n  * A runtime\u27e812\u27e9 for executing asynchronous code, including a task scheduler, an I/O driver backed by the operating system\u2019s event queue (`epoll`, `kqueue`, `IOCP`, etc\u2026), and a high performance timer.\n\n\nGuide level documentation is found on the website\u27e813\u27e9.\n## \u00a7\u27e814\u27e9A Tour of Tokio\nTokio consists of a number of modules that provide a range of functionality essential for implementing asynchronous applications in Rust. In this section, we will take a brief tour of Tokio, summarizing the major APIs and their uses.\nThe easiest way to get started is to enable all features. Do this by enabling the `full` feature flag:\n```\ntokio = { version = \"1\", features = [\"full\"] }\n```\n\n#### \u00a7\u27e815\u27e9Authoring applications\nTokio is great for writing applications and most users in this case shouldn\u2019t worry too much about what features they should pick. If you\u2019re unsure, we suggest going with `full` to ensure that you don\u2019t run into any road blocks while you\u2019re building your application.\n##### \u00a7\u27e816\u27e9Example\nThis example shows the quickest way to get started with Tokio.\n```\ntokio = { version = \"1\", features = [\"full\"] }\n```\n\n#### \u00a7\u27e817\u27e9Authoring libraries\nAs a library author your goal should be to provide the lightest weight crate that is based on Tokio. To achieve this you should ensure that you only enable the features you need. This allows users to pick up your crate without having to enable unnecessary features.\n##### \u00a7\u27e818\u27e9Example\nThis example shows how you may want to import features for a library that just needs to `tokio::spawn` and use a `TcpStream`.\n```\ntokio = { version = \"1\", features = [\"rt\", \"net\"] }\n```\n\n### \u00a7\u27e84\u27e9Working With Tasks\nAsynchronous programs in Rust are based around lightweight, non-blocking units of execution called _tasks_\u27e84\u27e9. The `tokio::task`\u27e819\u27e9 module provides important tools for working with tasks:\n  * The `spawn`\u27e820\u27e9 function and `JoinHandle`\u27e821\u27e9 type, for scheduling a new task on the Tokio runtime and awaiting the output of a spawned task, respectively,\n  * Functions for running blocking operations\u27e822\u27e9 in an asynchronous task context.\n\n\nThe `tokio::task`\u27e819\u27e9 module is present only when the \u201crt\u201d feature flag is enabled.\nThe `tokio::sync`\u27e85\u27e9 module contains synchronization primitives to use when needing to communicate or share data. These include:\n  * channels (`oneshot`\u27e823\u27e9, `mpsc`\u27e824\u27e9, `watch`\u27e825\u27e9, and `broadcast`\u27e826\u27e9), for sending values between tasks,\n  * a non-blocking `Mutex`\u27e827\u27e9, for controlling access to a shared, mutable value,\n  * an asynchronous `Barrier`\u27e828\u27e9 type, for multiple tasks to synchronize before beginning a computation.\n\n\nThe `tokio::sync` module is present only when the \u201csync\u201d feature flag is enabled.\nThe `tokio::time`\u27e86\u27e9 module provides utilities for tracking time and scheduling work. This includes functions for setting timeouts\u27e829\u27e9 for tasks, sleeping\u27e830\u27e9 work to run in the future, or repeating an operation at an interval\u27e831\u27e9.\nIn order to use `tokio::time`, the \u201ctime\u201d feature flag must be enabled.\nFinally, Tokio provides a _runtime_ for executing asynchronous tasks. Most applications can use the [`#[tokio::main]`](https://docs.rs/tokio/latest/tokio/attr.main.html) macro to run their code on the Tokio runtime. However, this macro provides only basic configuration options. As an alternative, the `tokio::runtime`\u27e812\u27e9 module provides more powerful APIs for configuring and managing runtimes. You should use that module if the `#[tokio::main]` macro doesn\u2019t provide the functionality you need.\nUsing the runtime requires the \u201crt\u201d or \u201crt-multi-thread\u201d feature flags, to enable the current-thread single-threaded scheduler\u27e832\u27e9 and the multi-thread scheduler\u27e833\u27e9, respectively. See the `runtime` module documentation\u27e834\u27e9 for details. In addition, the \u201cmacros\u201d feature flag enables the `#[tokio::main]` and `#[tokio::test]` attributes.\n### \u00a7\u27e835\u27e9CPU-bound tasks and blocking code\nTokio is able to concurrently run many tasks on a few threads by repeatedly swapping the currently running task on each thread. However, this kind of swapping can only happen at `.await` points, so code that spends a long time without reaching an `.await` will prevent other tasks from running. To combat this, Tokio provides two kinds of threads: Core threads and blocking threads.\nThe core threads are where all asynchronous code runs, and Tokio will by default spawn one for each CPU core. You can use the environment variable `TOKIO_WORKER_THREADS` to override the default value.\nThe blocking threads are spawned on demand, can be used to run blocking code that would otherwise block other tasks from running and are kept alive when not used for a certain amount of time which can be configured with `thread_keep_alive`\u27e836\u27e9. Since it is not possible for Tokio to swap out blocking tasks, like it can do with asynchronous code, the upper limit on the number of blocking threads is very large. These limits can be configured on the `Builder`\u27e837\u27e9.\nTo spawn a blocking task, you should use the `spawn_blocking`\u27e838\u27e9 function.\n```\n#[tokio::main]\nasync fn main() {\n  // This is running on a core thread.\n  let blocking_task = tokio::task::spawn_blocking(|| {\n    // This is running on a blocking thread.\n    // Blocking here is ok.\n  });\n  // We can wait for the blocking task like this:\n  // If the blocking task panics, the unwrap below will propagate the\n  // panic.\n  blocking_task.await.unwrap();\n}\n```\n\nIf your code is CPU-bound and you wish to limit the number of threads used to run it, you should use a separate thread pool dedicated to CPU bound tasks. For example, you could consider using the rayon\u27e839\u27e9 library for CPU-bound tasks. It is also possible to create an extra Tokio runtime dedicated to CPU-bound tasks, but if you do this, you should be careful that the extra runtime runs _only_ CPU-bound tasks, as IO-bound tasks on that runtime will behave poorly.\nHint: If using rayon, you can use a `oneshot`\u27e823\u27e9 channel to send the result back to Tokio when the rayon task finishes.\n### \u00a7\u27e87\u27e9Asynchronous IO\nAs well as scheduling and running tasks, Tokio provides everything you need to perform input and output asynchronously.\nThe `tokio::io`\u27e840\u27e9 module provides Tokio\u2019s asynchronous core I/O primitives, the `AsyncRead`\u27e841\u27e9, `AsyncWrite`\u27e842\u27e9, and `AsyncBufRead`\u27e843\u27e9 traits. In addition, when the \u201cio-util\u201d feature flag is enabled, it also provides combinators and functions for working with these traits, forming as an asynchronous counterpart to `std::io`\u27e844\u27e9.\nTokio also includes APIs for performing various kinds of I/O and interacting with the operating system asynchronously. These include:\n  * `tokio::net`\u27e88\u27e9, which contains non-blocking versions of TCP\u27e845\u27e9, UDP\u27e846\u27e9, and Unix Domain Sockets\u27e847\u27e9 (enabled by the \u201cnet\u201d feature flag),\n  * `tokio::fs`\u27e89\u27e9, similar to `std::fs`\u27e848\u27e9 but for performing filesystem I/O asynchronously (enabled by the \u201cfs\u201d feature flag),\n  * `tokio::signal`\u27e811\u27e9, for asynchronously handling Unix and Windows OS signals (enabled by the \u201csignal\u201d feature flag),\n  * `tokio::process`\u27e810\u27e9, for spawning and managing child processes (enabled by the \u201cprocess\u201d feature flag).\n\n\n## \u00a7\u27e849\u27e9Examples\nA simple TCP echo server:\n```\nuse tokio::net::TcpListener;\nuse tokio::io::{AsyncReadExt, AsyncWriteExt};\n#[tokio::main]\nasync fn main() -> Result<(), Box<dyn std::error::Error>> {\n  let listener = TcpListener::bind(\"127.0.0.1:8080\").await?;\n  loop {\n    let (mut socket, _) = listener.accept().await?;\n    tokio::spawn(async move {\n      let mut buf = [0; 1024];\n      // In a loop, read data from the socket and write the data back.\n      loop {\n        let n = match socket.read(&mut buf).await {\n          // socket closed\n          Ok(0) => return,\n          Ok(n) => n,\n          Err(e) => {\n            eprintln!(\"failed to read from socket; err = {:?}\", e);\n            return;\n          }\n        };\n        // Write the data back\n        if let Err(e) = socket.write_all(&buf[0..n]).await {\n          eprintln!(\"failed to write to socket; err = {:?}\", e);\n          return;\n        }\n      }\n    });\n  }\n}\n```\n\n## \u00a7\u27e850\u27e9Feature flags\nTokio uses a set of feature flags\u27e851\u27e9 to reduce the amount of compiled code. It is possible to just enable certain features over others. By default, Tokio does not enable any features but allows one to enable a subset for their use case. Below is a list of the available feature flags. You may also notice above each function, struct and trait there is listed one or more feature flags that are required for that item to be used. If you are new to Tokio it is recommended that you use the `full` feature flag which will enable all public APIs. Beware though that this will pull in many extra dependencies that you may not need.\n  * `full`: Enables all features listed below except `test-util` and `tracing`.\n  * `rt`: Enables `tokio::spawn`, the current-thread scheduler, and non-scheduler utilities.\n  * `rt-multi-thread`: Enables the heavier, multi-threaded, work-stealing scheduler.\n  * `io-util`: Enables the IO based `Ext` traits.\n  * `io-std`: Enable `Stdout`, `Stdin` and `Stderr` types.\n  * `net`: Enables `tokio::net` types such as `TcpStream`, `UnixStream` and `UdpSocket`, as well as (on Unix-like systems) `AsyncFd` and (on FreeBSD) `PollAio`.\n  * `time`: Enables `tokio::time` types and allows the schedulers to enable the built in timer.\n  * `process`: Enables `tokio::process` types.\n  * `macros`: Enables `#[tokio::main]` and `#[tokio::test]` macros.\n  * `sync`: Enables all `tokio::sync` types.\n  * `signal`: Enables all `tokio::signal` types.\n  * `fs`: Enables `tokio::fs` types.\n  * `test-util`: Enables testing based infrastructure for the Tokio runtime.\n  * `parking_lot`: As a potential optimization, use the `_parking_lot_` crate\u2019s synchronization primitives internally. Also, this dependency is necessary to construct some of our primitives in a `const` context. `MSRV` may increase according to the `_parking_lot_` release in use.\n\n\n_Note:`AsyncRead` and `AsyncWrite` traits do not require any features and are always available._\n### \u00a7\u27e852\u27e9Unstable features\nSome feature flags are only available when specifying the `tokio_unstable` flag:\n  * `tracing`: Enables tracing events.\n\n\nLikewise, some parts of the API are only available with the same flag:\n  * `task::Builder`\u27e853\u27e9\n  * Some methods on `task::JoinSet`\u27e854\u27e9\n  * `runtime::RuntimeMetrics`\u27e855\u27e9\n  * `runtime::Builder::on_task_spawn`\u27e856\u27e9\n  * `runtime::Builder::on_task_terminate`\u27e857\u27e9\n  * `runtime::Builder::unhandled_panic`\u27e858\u27e9\n  * `runtime::TaskMeta`\u27e859\u27e9\n\n\nThis flag enables **unstable** features. The public API of these features may break in 1.x releases. To enable these features, the `--cfg tokio_unstable` argument must be passed to `rustc` when compiling. This serves to explicitly opt-in to features which may break semver conventions, since Cargo does not yet directly support such opt-ins\u27e860\u27e9.\nYou can specify it in your project\u2019s `.cargo/config.toml` file:\n```\n[build]\nrustflags = [\"--cfg\", \"tokio_unstable\"]\n```\n\nThe `[build]` section does **not** go in a `Cargo.toml` file. Instead it must be placed in the Cargo config file `.cargo/config.toml`. \nAlternatively, you can specify it with an environment variable:\n```\n## Many *nix shells:\nexport RUSTFLAGS=\"--cfg tokio_unstable\"\ncargo build\n```\n\n```\n## Windows PowerShell:\n$Env:RUSTFLAGS=\"--cfg tokio_unstable\"\ncargo build\n```\n\n## \u00a7\u27e861\u27e9Supported platforms\nTokio currently guarantees support for the following platforms:\n  * Linux\n  * Windows\n  * Android (API level 21)\n  * macOS\n  * iOS\n  * FreeBSD\n\n\nTokio will continue to support these platforms in the future. However, future releases may change requirements such as the minimum required libc version on Linux, the API level on Android, or the supported FreeBSD release.\nBeyond the above platforms, Tokio is intended to work on all platforms supported by the mio crate. You can find a longer list in mio\u2019s documentation\u27e862\u27e9. However, these additional platforms may become unsupported in the future.\nNote that Wine is considered to be a different platform from Windows. See mio\u2019s documentation for more information on Wine support.\n### \u00a7\u27e863\u27e9`WASM` support\nTokio has some limited support for the `WASM` platform. Without the `tokio_unstable` flag, the following features are supported:\n  * `sync`\n  * `macros`\n  * `io-util`\n  * `rt`\n  * `time`\n\n\nEnabling any other feature (including `full`) will cause a compilation failure.\nThe `time` module will only work on `WASM` platforms that have support for timers (e.g. wasm32-wasi). The timing functions will panic if used on a `WASM` platform that does not support timers.\nNote also that if the runtime becomes indefinitely idle, it will panic immediately instead of blocking forever. On platforms that don\u2019t support time, this means that the runtime can never be idle in any way.\n### \u00a7\u27e864\u27e9Unstable `WASM` support\nTokio also has unstable support for some additional `WASM` features. This requires the use of the `tokio_unstable` flag.\nUsing this flag enables the use of `tokio::net` on the wasm32-wasi target. However, not all methods are available on the networking types as `WASI` currently does not support the creation of new sockets from within `WASM`. Because of this, sockets must currently be created via the `FromRawFd` trait.\n## Re-exports\u00a7\u27e865\u27e9\n\n`pub use task::spawn[](https://docs.rs/tokio/latest/tokio/task/fn.spawn.html \"fn tokio::task::spawn\");``rt`\n\n## Modules\u00a7\u27e866\u27e9\n\ndoc\u27e867\u27e9\n    Types which are documented locally in the Tokio crate, but does not actually live here.\n\nfs\u27e89\u27e9`fs`\n    Asynchronous file utilities.\n\nio\u27e840\u27e9\n    Traits, helpers, and type definitions for asynchronous I/O functionality.\n\nnet\u27e88\u27e9\n    TCP/UDP/Unix bindings for `tokio`.\n\nprocess\u27e810\u27e9`process`\n    An implementation of asynchronous process management for Tokio.\n\nruntime\u27e812\u27e9`rt`\n    The Tokio runtime.\n\nsignal\u27e811\u27e9`signal`\n    Asynchronous signal handling for Tokio.\n\nstream\u27e868\u27e9\n    Due to the `Stream` trait\u2019s inclusion in `std` landing later than Tokio\u2019s 1.0 release, most of the Tokio stream utilities have been moved into the `tokio-stream`\u27e869\u27e9 crate.\n\nsync\u27e85\u27e9`sync`\n    Synchronization primitives for use in asynchronous contexts.\n\ntask\u27e819\u27e9\n    Asynchronous green-threads.\n\ntime\u27e86\u27e9`time`\n    Utilities for tracking time.\n## Macros\u00a7\u27e870\u27e9\n\njoin\u27e871\u27e9`macros`\n    Waits on multiple concurrent branches, returning when **all** branches complete.\n\npin\u27e872\u27e9\n    Pins a value on the stack.\n\nselect\u27e873\u27e9`macros`\n    Waits on multiple concurrent branches, returning when the **first** branch completes, cancelling the remaining branches.\n\ntask_local\u27e874\u27e9`rt`\n    Declares a new task-local key of type `tokio::task::LocalKey`\u27e875\u27e9.\n\ntry_join\u27e876\u27e9`macros`\n    Waits on multiple concurrent branches, returning when **all** branches complete with `Ok(_)` or on the first `Err(_)`.\n## Attribute Macros\u00a7\u27e877\u27e9\n\nmain\u27e878\u27e9`rt` and `macros`\n    Marks async function to be executed by the selected runtime. This macro helps set up a `Runtime` without requiring the user to use Runtime\u27e879\u27e9 or Builder\u27e837\u27e9 directly.\n\ntest\u27e880\u27e9`rt` and `macros`\n    Marks async function to be executed by runtime, suitable to test environment. This macro helps set up a `Runtime` without requiring the user to use Runtime\u27e879\u27e9 or Builder\u27e837\u27e9 directly.\n",
            "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://docs.rs/tokio/latest/settings.html: Settings\n\u27e82\u27e9 https://docs.rs/tokio/latest/help.html: Help\n\u27e83\u27e9 https://docs.rs/tokio/latest/src/tokio/lib.rs.html#1-698: Source\n\u27e84\u27e9 https://docs.rs/tokio/latest/tokio/#working-with-tasks: working with asynchronous tasks\n\u27e85\u27e9 https://docs.rs/tokio/latest/tokio/sync/index.html: mod tokio::sync - synchronization primitives and channels\n\u27e86\u27e9 https://docs.rs/tokio/latest/tokio/time/index.html: mod tokio::time - timeouts, sleeps, and intervals\n\u27e87\u27e9 https://docs.rs/tokio/latest/tokio/#asynchronous-io: performing asynchronous I/O\n\u27e88\u27e9 https://docs.rs/tokio/latest/tokio/net/index.html: mod tokio::net - TCP and UDP\n\u27e89\u27e9 https://docs.rs/tokio/latest/tokio/fs/index.html: mod tokio::fs - filesystem\n\u27e810\u27e9 https://docs.rs/tokio/latest/tokio/process/index.html: mod tokio::process - process\n\u27e811\u27e9 https://docs.rs/tokio/latest/tokio/signal/index.html: mod tokio::signal - signal\n\u27e812\u27e9 https://docs.rs/tokio/latest/tokio/runtime/index.html: mod tokio::runtime - runtime\n\u27e813\u27e9 https://tokio.rs/tokio/tutorial: website\n\u27e814\u27e9 https://docs.rs/tokio/latest/tokio/#a-tour-of-tokio: \u00a7\n\u27e815\u27e9 https://docs.rs/tokio/latest/tokio/#authoring-applications: \u00a7\n\u27e816\u27e9 https://docs.rs/tokio/latest/tokio/#example: \u00a7\n\u27e817\u27e9 https://docs.rs/tokio/latest/tokio/#authoring-libraries: \u00a7\n\u27e818\u27e9 https://docs.rs/tokio/latest/tokio/#example-1: \u00a7\n\u27e819\u27e9 https://docs.rs/tokio/latest/tokio/task/index.html: mod tokio::task - `tokio::task`\n\u27e820\u27e9 https://docs.rs/tokio/latest/tokio/task/fn.spawn.html: fn tokio::task::spawn - `spawn`\n\u27e821\u27e9 https://docs.rs/tokio/latest/tokio/task/struct.JoinHandle.html: struct tokio::task::JoinHandle - `JoinHandle`\n\u27e822\u27e9 https://docs.rs/tokio/latest/tokio/task/index.html#blocking-and-yielding: running blocking operations\n\u27e823\u27e9 https://docs.rs/tokio/latest/tokio/sync/oneshot/index.html: mod tokio::sync::oneshot - `oneshot`\n\u27e824\u27e9 https://docs.rs/tokio/latest/tokio/sync/mpsc/index.html: mod tokio::sync::mpsc - `mpsc`\n\u27e825\u27e9 https://docs.rs/tokio/latest/tokio/sync/watch/index.html: mod tokio::sync::watch - `watch`\n\u27e826\u27e9 https://docs.rs/tokio/latest/tokio/sync/broadcast/index.html: mod tokio::sync::broadcast - `broadcast`\n\u27e827\u27e9 https://docs.rs/tokio/latest/tokio/sync/struct.Mutex.html: struct tokio::sync::Mutex - `Mutex`\n\u27e828\u27e9 https://docs.rs/tokio/latest/tokio/sync/struct.Barrier.html: struct tokio::sync::Barrier - `Barrier`\n\u27e829\u27e9 https://docs.rs/tokio/latest/tokio/time/fn.timeout.html: fn tokio::time::timeout - timeouts\n\u27e830\u27e9 https://docs.rs/tokio/latest/tokio/time/fn.sleep.html: fn tokio::time::sleep - sleeping\n\u27e831\u27e9 https://docs.rs/tokio/latest/tokio/time/fn.interval.html: fn tokio::time::interval - repeating an operation at an interval\n\u27e832\u27e9 https://docs.rs/tokio/latest/tokio/runtime/index.html#current-thread-scheduler: single-threaded scheduler\n\u27e833\u27e9 https://docs.rs/tokio/latest/tokio/runtime/index.html#multi-thread-scheduler: multi-thread scheduler\n\u27e834\u27e9 https://docs.rs/tokio/latest/tokio/runtime/index.html#runtime-scheduler: `runtime` module documentation\n\u27e835\u27e9 https://docs.rs/tokio/latest/tokio/#cpu-bound-tasks-and-blocking-code: \u00a7\n\u27e836\u27e9 https://docs.rs/tokio/latest/tokio/runtime/struct.Builder.html#method.thread_keep_alive: method tokio::runtime::Builder::thread_keep_alive - `thread_keep_alive`\n\u27e837\u27e9 https://docs.rs/tokio/latest/tokio/runtime/struct.Builder.html: struct tokio::runtime::Builder - `Builder`\n\u27e838\u27e9 https://docs.rs/tokio/latest/tokio/task/fn.spawn_blocking.html: fn tokio::task::spawn_blocking - `spawn_blocking`\n\u27e839\u27e9 https://docs.rs/rayon: rayon\n\u27e840\u27e9 https://docs.rs/tokio/latest/tokio/io/index.html: mod tokio::io - `tokio::io`\n\u27e841\u27e9 https://docs.rs/tokio/latest/tokio/io/trait.AsyncRead.html: trait tokio::io::AsyncRead - `AsyncRead`\n\u27e842\u27e9 https://docs.rs/tokio/latest/tokio/io/trait.AsyncWrite.html: trait tokio::io::AsyncWrite - `AsyncWrite`\n\u27e843\u27e9 https://docs.rs/tokio/latest/tokio/io/trait.AsyncBufRead.html: trait tokio::io::AsyncBufRead - `AsyncBufRead`\n\u27e844\u27e9 https://doc.rust-lang.org/nightly/std/io/index.html: mod std::io - `std::io`\n\u27e845\u27e9 https://docs.rs/tokio/latest/tokio/net/tcp/index.html: mod tokio::net::tcp - TCP\n\u27e846\u27e9 https://docs.rs/tokio/latest/tokio/net/struct.UdpSocket.html: struct tokio::net::UdpSocket - UDP\n\u27e847\u27e9 https://docs.rs/tokio/latest/tokio/net/unix/index.html: mod tokio::net::unix - Unix Domain Sockets\n\u27e848\u27e9 https://doc.rust-lang.org/nightly/std/fs/index.html: mod std::fs - `std::fs`\n\u27e849\u27e9 https://docs.rs/tokio/latest/tokio/#examples: \u00a7\n\u27e850\u27e9 https://docs.rs/tokio/latest/tokio/#feature-flags: \u00a7\n\u27e851\u27e9 https://doc.rust-lang.org/cargo/reference/manifest.html#the-features-section: feature flags\n\u27e852\u27e9 https://docs.rs/tokio/latest/tokio/#unstable-features: \u00a7\n\u27e853\u27e9 https://docs.rs/tokio/latest/tokio/task/struct.Builder.html: struct tokio::task::Builder - `task::Builder`\n\u27e854\u27e9 https://docs.rs/tokio/latest/tokio/task/struct.JoinSet.html: struct tokio::task::JoinSet - `task::JoinSet`\n\u27e855\u27e9 https://docs.rs/tokio/latest/tokio/runtime/struct.RuntimeMetrics.html: struct tokio::runtime::RuntimeMetrics - `runtime::RuntimeMetrics`\n\u27e856\u27e9 https://docs.rs/tokio/latest/tokio/runtime/struct.Builder.html#method.on_task_spawn: method tokio::runtime::Builder::on_task_spawn - `runtime::Builder::on_task_spawn`\n\u27e857\u27e9 https://docs.rs/tokio/latest/tokio/runtime/struct.Builder.html#method.on_task_terminate: method tokio::runtime::Builder::on_task_terminate - `runtime::Builder::on_task_terminate`\n\u27e858\u27e9 https://docs.rs/tokio/latest/tokio/runtime/struct.Builder.html#method.unhandled_panic: method tokio::runtime::Builder::unhandled_panic - `runtime::Builder::unhandled_panic`\n\u27e859\u27e9 https://docs.rs/tokio/latest/tokio/runtime/struct.TaskMeta.html: struct tokio::runtime::TaskMeta - `runtime::TaskMeta`\n\u27e860\u27e9 https://internals.rust-lang.org/t/feature-request-unstable-opt-in-non-transitive-crate-features/16193#why-not-a-crate-feature-2: does not yet directly support such opt-ins\n\u27e861\u27e9 https://docs.rs/tokio/latest/tokio/#supported-platforms: \u00a7\n\u27e862\u27e9 https://crates.io/crates/mio#platforms: in mio\u2019s documentation\n\u27e863\u27e9 https://docs.rs/tokio/latest/tokio/#wasm-support: \u00a7\n\u27e864\u27e9 https://docs.rs/tokio/latest/tokio/#unstable-wasm-support: \u00a7\n\u27e865\u27e9 https://docs.rs/tokio/latest/tokio/#reexports: \u00a7\n\u27e866\u27e9 https://docs.rs/tokio/latest/tokio/#modules: \u00a7\n\u27e867\u27e9 https://docs.rs/tokio/latest/tokio/doc/index.html: mod tokio::doc - doc\n\u27e868\u27e9 https://docs.rs/tokio/latest/tokio/stream/index.html: mod tokio::stream - stream\n\u27e869\u27e9 https://docs.rs/tokio-stream: `tokio-stream`\n\u27e870\u27e9 https://docs.rs/tokio/latest/tokio/#macros: \u00a7\n\u27e871\u27e9 https://docs.rs/tokio/latest/tokio/macro.join.html: macro tokio::join - join\n\u27e872\u27e9 https://docs.rs/tokio/latest/tokio/macro.pin.html: macro tokio::pin - pin\n\u27e873\u27e9 https://docs.rs/tokio/latest/tokio/macro.select.html: macro tokio::select - select\n\u27e874\u27e9 https://docs.rs/tokio/latest/tokio/macro.task_local.html: macro tokio::task_local - task_local\n\u27e875\u27e9 https://docs.rs/tokio/latest/tokio/task/struct.LocalKey.html: struct tokio::task::LocalKey - `tokio::task::LocalKey`\n\u27e876\u27e9 https://docs.rs/tokio/latest/tokio/macro.try_join.html: macro tokio::try_join - try_join\n\u27e877\u27e9 https://docs.rs/tokio/latest/tokio/#attributes: \u00a7\n\u27e878\u27e9 https://docs.rs/tokio/latest/tokio/attr.main.html: attr tokio::main - main\n\u27e879\u27e9 https://docs.rs/tokio/latest/tokio/runtime/struct.Runtime.html: Runtime\n\u27e880\u27e9 https://docs.rs/tokio/latest/tokio/attr.test.html: attr tokio::test - test\n",
            "fit_markdown": "",
            "fit_html": ""
          },
          "downloads": 0,
          "github_stars": 0,
          "dependencies": [],
          "features": {},
          "code_snippets": [],
          "readme_sections": {},
          "librs_downloads": null,
          "source": "crates.io",
          "enhanced_scraping": {},
          "enhanced_features": [],
          "enhanced_dependencies": [],
          "readme_summary": "The `tokio` crate is a high-performance asynchronous runtime for Rust, designed for building reliable and fast network applications. It provides non-blocking I/O utilities, including support for TCP/UDP sockets, filesystem operations, and timers, along with tools for task scheduling, synchronization primitives, and process management. Its modular design allows users to enable specific features via flags, with the `full` feature offering access to all APIs.",
          "feature_summary": null,
          "use_case": "Networking",
          "score": 9.5,
          "factual_counterfactual": "### Pair 1: Feature Flags  \n\u2705 Factual: The `full` feature flag in Tokio enables all public APIs except `test-util` and `tracing`, making it suitable for applications requiring comprehensive functionality.  \n\u274c Counterfactual: The `full` feature flag in Tokio automatically enables `test-util` and `tracing`, providing complete testing and logging capabilities by default.  \n\n---\n\n### Pair 2: Asynchronous I/O  \n\u2705 Factual: Tokio provides asynchronous I/O APIs, including support for `TcpStream`, `UdpSocket`, and `UnixStream`, which allow developers to build non-blocking network applications.  \n\u274c Counterfactual: Tokio's asynchronous I/O APIs only support `TcpStream` and `UdpSocket` but lack support for Unix-specific types like `UnixStream`.  \n\n---\n\n### Pair 3: Runtime Scheduling  \n\u2705 Factual: Tokio includes a multi-threaded, work-stealing scheduler enabled via the `rt-multi-thread` feature, which is ideal for high-performance applications requiring parallel task execution.  \n\u274c Counterfactual: Tokio's runtime scheduling is limited to single-threaded execution and does not support multi-threaded task scheduling, even with feature flags.",
          "source_analysis": null,
          "user_behavior": null,
          "security": null
        }
      },
      "irl_score": 8.6,
      "execution_id": "exec-434de5e6-4f56e2ee-1751258347",
      "timestamp": "2025-06-30T04:39:07.408821+00:00",
      "canon_version": "1.3.0"
    },
    "rule_zero_compliant": true
  }
]