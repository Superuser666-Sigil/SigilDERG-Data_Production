[
  {
    "execution_id": "exec-9f9281cf-9e89b98b-1751261024",
    "timestamp": "2025-06-30T05:23:44.443581+00:00",
    "sacred_chain": {
      "input_data": "xxhash-rust",
      "context_sources": [
        "crates.io",
        "github.com",
        "lib.rs",
        "docs.rs"
      ],
      "reasoning_steps": [
        "Input canonicalized: 'xxhash-rust' -> 'xxhash-rust'",
        "Context gathered from 4 validated sources",
        "Metadata extracted: 4 fields",
        "Documentation analyzed: quality 7.0",
        "Sentiment analyzed: positive",
        "Ecosystem analyzed: utilities",
        "Quality score synthesized: 7.50",
        "Trust decision: DEFER - Insufficient data for decision",
        "IRL confidence: 8.600"
      ],
      "suggestion": "ALLOW: Positive community sentiment",
      "verdict": "DEFER",
      "audit_info": {
        "metadata": {
          "name": "xxhash-rust",
          "type": "rust_crate",
          "source": "manual_input",
          "extraction_method": "irl_engine"
        },
        "sentiment": {
          "quality_score": 7.0,
          "completeness": 0.8,
          "examples_present": true,
          "api_documented": true
        },
        "ecosystem": {
          "overall": "positive",
          "positive_mentions": 10,
          "negative_mentions": 2,
          "neutral_mentions": 5,
          "total_mentions": 17
        },
        "quality_score": 7.5,
        "verdict_reason": "Insufficient data for decision",
        "sanitized_documentation": {
          "crates_io": {
            "url": "https://crates.io/crates/xxhash-rust",
            "title": "xxhash-rust v0.8.15",
            "content": {
              "raw_markdown": "#  xxhash-rust v0.8.15\nImplementation of xxhash \n  * [ #hash ](https://crates.io/keywords/hash)\n  * [ #hasher ](https://crates.io/keywords/hasher)\n  * [ #no-std ](https://crates.io/keywords/no-std)\n  * [ #xxh3 ](https://crates.io/keywords/xxh3)\n  * [ #xxhash ](https://crates.io/keywords/xxhash)\n\n\n  * [ Readme ](https://crates.io/crates/xxhash-rust)\n  * [ 22 Versions ](https://crates.io/crates/xxhash-rust/versions)\n  * [ Dependencies ](https://crates.io/crates/xxhash-rust/dependencies)\n  * [ Dependents ](https://crates.io/crates/xxhash-rust/reverse_dependencies)\n\n\n## Metadata\n6 months ago \n2018 edition \n[ BSL-1.0 ](https://choosealicense.com/licenses/bsl-1.0)\n21 KiB \n## Install\nRun the following Cargo command in your project directory:\ncargo add xxhash-rust\nOr add the following line to your Cargo.toml:\nxxhash-rust = \"0.8.15\"\n## Repository\n[ github.com/DoumanAsh/xxhash-rust ](https://github.com/DoumanAsh/xxhash-rust)\n## Owners\n## Categories\n  * [Algorithms](https://crates.io/categories/algorithms)\n  * [No dynamic allocation](https://crates.io/categories/no-std::no-alloc)\n\n\n[ Report crate ](https://crates.io/support?crate=xxhash-rust&inquire=crate-violation)\n### Stats Overview\n23,112,979 Downloads all time\n22 Versions published\n#### Downloads over the last 90 days\nDisplay as \nStacked \n  * Stacked \n  * Unstacked \n\n\nLoading\u2026\n",
              "markdown_with_citations": "#  xxhash-rust v0.8.15\nImplementation of xxhash \n  *  #hash \u27e81\u27e9\n  *  #hasher \u27e82\u27e9\n  *  #no-std \u27e83\u27e9\n  *  #xxh3 \u27e84\u27e9\n  *  #xxhash \u27e85\u27e9\n\n\n  *  Readme \u27e86\u27e9\n  *  22 Versions \u27e87\u27e9\n  *  Dependencies \u27e88\u27e9\n  *  Dependents \u27e89\u27e9\n\n\n## Metadata\n6 months ago \n2018 edition \n BSL-1.0 \u27e810\u27e9\n21 KiB \n## Install\nRun the following Cargo command in your project directory:\ncargo add xxhash-rust\nOr add the following line to your Cargo.toml:\nxxhash-rust = \"0.8.15\"\n## Repository\n github.com/DoumanAsh/xxhash-rust \u27e811\u27e9\n## Owners\n## Categories\n  * Algorithms\u27e812\u27e9\n  * No dynamic allocation\u27e813\u27e9\n\n\n Report crate \u27e814\u27e9\n### Stats Overview\n23,112,979 Downloads all time\n22 Versions published\n#### Downloads over the last 90 days\nDisplay as \nStacked \n  * Stacked \n  * Unstacked \n\n\nLoading\u2026\n",
              "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://crates.io/keywords/hash:  #hash \n\u27e82\u27e9 https://crates.io/keywords/hasher:  #hasher \n\u27e83\u27e9 https://crates.io/keywords/no-std:  #no-std \n\u27e84\u27e9 https://crates.io/keywords/xxh3:  #xxh3 \n\u27e85\u27e9 https://crates.io/keywords/xxhash:  #xxhash \n\u27e86\u27e9 https://crates.io/crates/xxhash-rust:  Readme \n\u27e87\u27e9 https://crates.io/crates/xxhash-rust/versions:  22 Versions \n\u27e88\u27e9 https://crates.io/crates/xxhash-rust/dependencies:  Dependencies \n\u27e89\u27e9 https://crates.io/crates/xxhash-rust/reverse_dependencies:  Dependents \n\u27e810\u27e9 https://choosealicense.com/licenses/bsl-1.0:  BSL-1.0 \n\u27e811\u27e9 https://github.com/DoumanAsh/xxhash-rust:  github.com/DoumanAsh/xxhash-rust \n\u27e812\u27e9 https://crates.io/categories/algorithms: Algorithms\n\u27e813\u27e9 https://crates.io/categories/no-std::no-alloc: No dynamic allocation\n\u27e814\u27e9 https://crates.io/support?crate=xxhash-rust&inquire=crate-violation:  Report crate \n",
              "fit_markdown": "",
              "fit_html": ""
            },
            "structured_data": {},
            "quality_score": 3.0,
            "extraction_method": "crawl4ai",
            "error": null,
            "metadata": {
              "doc_type": "docs",
              "content_length": 1342,
              "has_structured_data": false,
              "crawl_success": true
            },
            "timestamp": "114813.688367"
          },
          "docs_rs": {
            "url": "https://docs.rs/xxhash-rust",
            "title": "Crate xxhash_rustCopy item path",
            "content": {
              "raw_markdown": "[](https://docs.rs/xxhash-rust/latest/xxhash_rust/all.html \"show sidebar\")\n# Crate xxhash_rustCopy item path\n[Settings](https://docs.rs/xxhash-rust/latest/settings.html)\n[Help](https://docs.rs/xxhash-rust/latest/help.html)\nSummary[Source](https://docs.rs/xxhash-rust/latest/src/xxhash_rust/lib.rs.html#1-106)\nExpand description\nImplementation of [xxHash](https://github.com/Cyan4973/xxHash) in Rust\nVersion corresponds to xxHash [releases](https://github.com/Cyan4973/xxHash/releases)\nEach algorithm is implemented via feature, allowing precise control over code size.\n### [\u00a7](https://docs.rs/xxhash-rust/latest/xxhash_rust/#example)Example\n  * Cargo.toml\n\n\n```\n[dependencies.xxhash-rust]\nversion = \"0.8.5\"\nfeatures = [\"xxh3\", \"const_xxh3\"]\n```\n\n  * main.rs\n\n\n```\nuse xxhash_rust::const_xxh3::xxh3_64 as const_xxh3;\nuse xxhash_rust::xxh3::xxh3_64;\nconst TEST: u64 = const_xxh3(b\"TEST\");\nfn test_input(text: &str) -> bool {\n  match xxh3_64(text.as_bytes()) {\n    TEST => true,\n    _ => false\n  }\n}\nassert!(!test_input(\"tEST\"));\nassert!(test_input(\"TEST\"));\n```\n\n### [\u00a7](https://docs.rs/xxhash-rust/latest/xxhash_rust/#features)Features:\nBy default all features are off.\n  * `std` - Enables `std::io::Write` trait implementation\n  * `xxh32` - Enables 32bit algorithm. Suitable for x86 targets\n  * `const_xxh32` - `const fn` version of `xxh32` algorithm\n  * `xxh64` - Enables 64 algorithm. Suitable for x86_64 targets\n  * `const_xxh64` - `const fn` version of `xxh64` algorithm\n  * `xxh3` - Enables `xxh3` family of algorithms, superior to `xxh32` and `xxh64` in terms of performance.\n  * `const_xxh3` - `const fn` version of `xxh3` algorithm\n\n\n### [\u00a7](https://docs.rs/xxhash-rust/latest/xxhash_rust/#hw-acceleration)HW acceleration\nSimilar to reference implementation, crate implements various SIMDs in `xxh3` depending on provided flags. All checks are performed only at compile time, hence user is encouraged to enable these accelerations (for example via `-C target_cpu=native`)\nUsed SIMD acceleration:\n  * SSE2 - widely available, can be safely enabled in 99% of cases. Enabled by default in `x86_64` targets.\n  * AVX2;\n  * Neon - Enabled by default on aarch64 targets (most likely);\n  * Wasm SIMD128 - Has to be enabled via rust flag: `-Ctarget-feature=+simd128`\n\n\n### [\u00a7](https://docs.rs/xxhash-rust/latest/xxhash_rust/#streaming-vs-one-shot)Streaming vs One-shot\nFor performance reasons one-shot version of algorithm does not re-use streaming version. Unless needed, user is advised to use one-shot version which tends to be more optimal.\n### [\u00a7](https://docs.rs/xxhash-rust/latest/xxhash_rust/#cosnt-fn-version)`cosnt fn` version\nWhile `const fn` provides compile time implementation, it does so at performance cost. Hence you should only use it at _compile_ time.\nTo guarantee that something is computed at compile time make sure to initialize hash output as `const` or `static` variable, otherwise it is possible function is executed at runtime, which would be worse than regular algorithm.\n`const fn` is implemented in best possible way while conforming to limitations of Rust `const fn`, but these limitations are quite strict making any high performance code impossible.\n## Modules[\u00a7](https://docs.rs/xxhash-rust/latest/xxhash_rust/#modules)\n\n[const_xxh3](https://docs.rs/xxhash-rust/latest/xxhash_rust/const_xxh3/index.html \"mod xxhash_rust::const_xxh3\")\n    Xxh3 `const fn` implementation\n\n[const_xxh32](https://docs.rs/xxhash-rust/latest/xxhash_rust/const_xxh32/index.html \"mod xxhash_rust::const_xxh32\")\n    Const eval friendly xxh32 implementation.\n\n[const_xxh64](https://docs.rs/xxhash-rust/latest/xxhash_rust/const_xxh64/index.html \"mod xxhash_rust::const_xxh64\")\n    Const 64 bit version of xxhash algorithm\n\n[xxh3](https://docs.rs/xxhash-rust/latest/xxhash_rust/xxh3/index.html \"mod xxhash_rust::xxh3\")\n    XXH3 implementation\n\n[xxh32](https://docs.rs/xxhash-rust/latest/xxhash_rust/xxh32/index.html \"mod xxhash_rust::xxh32\")\n    32 bit version of xxhash algorithm\n\n[xxh64](https://docs.rs/xxhash-rust/latest/xxhash_rust/xxh64/index.html \"mod xxhash_rust::xxh64\")\n    64 bit version of xxhash algorithm\n",
              "markdown_with_citations": "[](https://docs.rs/xxhash-rust/latest/xxhash_rust/all.html \"show sidebar\")\n# Crate xxhash_rustCopy item path\nSettings\u27e81\u27e9\nHelp\u27e82\u27e9\nSummarySource\u27e83\u27e9\nExpand description\nImplementation of xxHash\u27e84\u27e9 in Rust\nVersion corresponds to xxHash releases\u27e85\u27e9\nEach algorithm is implemented via feature, allowing precise control over code size.\n### \u00a7\u27e86\u27e9Example\n  * Cargo.toml\n\n\n```\n[dependencies.xxhash-rust]\nversion = \"0.8.5\"\nfeatures = [\"xxh3\", \"const_xxh3\"]\n```\n\n  * main.rs\n\n\n```\nuse xxhash_rust::const_xxh3::xxh3_64 as const_xxh3;\nuse xxhash_rust::xxh3::xxh3_64;\nconst TEST: u64 = const_xxh3(b\"TEST\");\nfn test_input(text: &str) -> bool {\n  match xxh3_64(text.as_bytes()) {\n    TEST => true,\n    _ => false\n  }\n}\nassert!(!test_input(\"tEST\"));\nassert!(test_input(\"TEST\"));\n```\n\n### \u00a7\u27e87\u27e9Features:\nBy default all features are off.\n  * `std` - Enables `std::io::Write` trait implementation\n  * `xxh32` - Enables 32bit algorithm. Suitable for x86 targets\n  * `const_xxh32` - `const fn` version of `xxh32` algorithm\n  * `xxh64` - Enables 64 algorithm. Suitable for x86_64 targets\n  * `const_xxh64` - `const fn` version of `xxh64` algorithm\n  * `xxh3` - Enables `xxh3` family of algorithms, superior to `xxh32` and `xxh64` in terms of performance.\n  * `const_xxh3` - `const fn` version of `xxh3` algorithm\n\n\n### \u00a7\u27e88\u27e9HW acceleration\nSimilar to reference implementation, crate implements various SIMDs in `xxh3` depending on provided flags. All checks are performed only at compile time, hence user is encouraged to enable these accelerations (for example via `-C target_cpu=native`)\nUsed SIMD acceleration:\n  * SSE2 - widely available, can be safely enabled in 99% of cases. Enabled by default in `x86_64` targets.\n  * AVX2;\n  * Neon - Enabled by default on aarch64 targets (most likely);\n  * Wasm SIMD128 - Has to be enabled via rust flag: `-Ctarget-feature=+simd128`\n\n\n### \u00a7\u27e89\u27e9Streaming vs One-shot\nFor performance reasons one-shot version of algorithm does not re-use streaming version. Unless needed, user is advised to use one-shot version which tends to be more optimal.\n### \u00a7\u27e810\u27e9`cosnt fn` version\nWhile `const fn` provides compile time implementation, it does so at performance cost. Hence you should only use it at _compile_ time.\nTo guarantee that something is computed at compile time make sure to initialize hash output as `const` or `static` variable, otherwise it is possible function is executed at runtime, which would be worse than regular algorithm.\n`const fn` is implemented in best possible way while conforming to limitations of Rust `const fn`, but these limitations are quite strict making any high performance code impossible.\n## Modules\u00a7\u27e811\u27e9\n\nconst_xxh3\u27e812\u27e9\n    Xxh3 `const fn` implementation\n\nconst_xxh32\u27e813\u27e9\n    Const eval friendly xxh32 implementation.\n\nconst_xxh64\u27e814\u27e9\n    Const 64 bit version of xxhash algorithm\n\nxxh3\u27e815\u27e9\n    XXH3 implementation\n\nxxh32\u27e816\u27e9\n    32 bit version of xxhash algorithm\n\nxxh64\u27e817\u27e9\n    64 bit version of xxhash algorithm\n",
              "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://docs.rs/xxhash-rust/latest/settings.html: Settings\n\u27e82\u27e9 https://docs.rs/xxhash-rust/latest/help.html: Help\n\u27e83\u27e9 https://docs.rs/xxhash-rust/latest/src/xxhash_rust/lib.rs.html#1-106: Source\n\u27e84\u27e9 https://github.com/Cyan4973/xxHash: xxHash\n\u27e85\u27e9 https://github.com/Cyan4973/xxHash/releases: releases\n\u27e86\u27e9 https://docs.rs/xxhash-rust/latest/xxhash_rust/#example: \u00a7\n\u27e87\u27e9 https://docs.rs/xxhash-rust/latest/xxhash_rust/#features: \u00a7\n\u27e88\u27e9 https://docs.rs/xxhash-rust/latest/xxhash_rust/#hw-acceleration: \u00a7\n\u27e89\u27e9 https://docs.rs/xxhash-rust/latest/xxhash_rust/#streaming-vs-one-shot: \u00a7\n\u27e810\u27e9 https://docs.rs/xxhash-rust/latest/xxhash_rust/#cosnt-fn-version: \u00a7\n\u27e811\u27e9 https://docs.rs/xxhash-rust/latest/xxhash_rust/#modules: \u00a7\n\u27e812\u27e9 https://docs.rs/xxhash-rust/latest/xxhash_rust/const_xxh3/index.html: mod xxhash_rust::const_xxh3 - const_xxh3\n\u27e813\u27e9 https://docs.rs/xxhash-rust/latest/xxhash_rust/const_xxh32/index.html: mod xxhash_rust::const_xxh32 - const_xxh32\n\u27e814\u27e9 https://docs.rs/xxhash-rust/latest/xxhash_rust/const_xxh64/index.html: mod xxhash_rust::const_xxh64 - const_xxh64\n\u27e815\u27e9 https://docs.rs/xxhash-rust/latest/xxhash_rust/xxh3/index.html: mod xxhash_rust::xxh3 - xxh3\n\u27e816\u27e9 https://docs.rs/xxhash-rust/latest/xxhash_rust/xxh32/index.html: mod xxhash_rust::xxh32 - xxh32\n\u27e817\u27e9 https://docs.rs/xxhash-rust/latest/xxhash_rust/xxh64/index.html: mod xxhash_rust::xxh64 - xxh64\n",
              "fit_markdown": "",
              "fit_html": ""
            },
            "structured_data": {},
            "quality_score": 4.0,
            "extraction_method": "crawl4ai",
            "error": null,
            "metadata": {
              "doc_type": "docs",
              "content_length": 4123,
              "has_structured_data": false,
              "crawl_success": true
            },
            "timestamp": "114814.5215685"
          },
          "lib_rs": {
            "url": "https://lib.rs/crates/xxhash-rust",
            "title": "Untitled",
            "content": {
              "raw_markdown": "###  [12 releases](https://lib.rs/crates/xxhash-rust/versions)\n0.8.15 |  Dec 30, 2024   \n---|---  \n0.8.12 |  Jul 26, 2024   \n0.8.10 |  Feb 17, 2024   \n0.8.8 |  Dec 20, 2023   \n0.8.0-beta.5 |  ~~Nov 18, 2020~~  \n#**8** in [Algorithms](https://lib.rs/algorithms \"Rust implementations of core algorithms such as hashing, sorting, searching, and more.\")\nDownload history 413474/week @ 2025-03-08 430587/week @ 2025-03-15 424974/week @ 2025-03-22 401501/week @ 2025-03-29 396463/week @ 2025-04-05 371185/week @ 2025-04-12 359302/week @ 2025-04-19 361306/week @ 2025-04-26 360896/week @ 2025-05-03 365411/week @ 2025-05-10 365669/week @ 2025-05-17 333147/week @ 2025-05-24 392975/week @ 2025-05-31 396763/week @ 2025-06-07 366378/week @ 2025-06-14 442302/week @ 2025-06-21\n**1,665,152** downloads per month Used in [**1,625** crates (221 directly)](https://lib.rs/crates/xxhash-rust/rev)\n**BSL-1.0** license \n105KB  2K  SLoC\n# xxhash-rust\n[![Rust](https://img.gs/czjpqfbdkz/full/https://github.com/DoumanAsh/xxhash-rust/actions/workflows/rust.yml/badge.svg)](https://github.com/DoumanAsh/xxhash-rust/actions/workflows/rust.yml) [![Crates.io](https://img.shields.io/crates/v/xxhash-rust.svg)](https://crates.io/crates/xxhash-rust) [![Documentation](https://img.gs/czjpqfbdkz/full/https://docs.rs/xxhash-rust/badge.svg)](https://docs.rs/crate/xxhash-rust/)\nImplementation of [xxHash](https://github.com/Cyan4973/xxHash) in Rust\nEach algorithm is implemented via feature, allowing precise control over code size.\n## Example\n  * Cargo.toml\n\n```\n```[``dependencies.xxhash-rust``]`\n`version ``=` ``\"`0.8.12`\"``\n`features ``=` ``[```\"`xxh3`\"``, ``\"`const_xxh3`\"```]``\n``\n```\n\n  * main.rs\n\n```\n``use` `xxhash_rust`::```const_xxh3`::``xxh3_64 `as` const_xxh3`;`\n`use` `xxhash_rust`::```xxh3`::``xxh3_64`;`\n`const` `TEST``:` `u64` `=` `const_xxh3``(```b``\"`TEST`\"```)``;`\n``fn` `test_input`````(``text``:` `&``str````)```` ``->` `bool`` ````{`\n  `match` `xxh3_64``(`text`.``as_bytes``(``)``)` `{`\n    `TEST` `=>` `true``,`\n    `_` `=>` `false`\n  `}`\n```}```\n`assert!``(``!``test_input``(```\"`tEST`\"```)``)``;`\n`assert!``(``test_input``(```\"`TEST`\"```)``)``;`\n`\n```\n\n## Features:\nBy default all features are off.\n  * ``std`` - Enables ```std`::```io`::``Write`` trait implementation\n  * ``xxh32`` - Enables 32bit algorithm. Suitable for x86 targets\n  * ``const_xxh32`` - ```const` `fn``` version of ``xxh32`` algorithm\n  * ``xxh64`` - Enables 64 algorithm. Suitable for x86_64 targets\n  * ``const_xxh64`` - ```const` `fn``` version of ``xxh64`` algorithm\n  * ``xxh3`` - Enables ``xxh3`` family of algorithms, superior to ``xxh32`` and ``xxh64`` in terms of performance.\n  * ``const_xxh3`` - ```const` `fn``` version of ``xxh3`` algorithm\n\n\n## HW acceleration\nSimilar to reference implementation, crate implements various SIMDs in ``xxh3`` depending on provided flags. All checks are performed only at compile time, hence user is encouraged to enable these accelerations (for example via ```-`C target_cpu`=`native``)\nUsed SIMD acceleration:\n  * SSE2 - widely available, can be safely enabled in 99% of cases. Enabled by default in ``x86_64`` targets.\n  * AVX2;\n  * Neon - Enabled by default on aarch64 targets (most likely)\n  * Wasm SIMD128 - Has to be enabled via rust flag: ```-`Ctarget`-`feature`=``+`simd128``\n\n\n## Streaming vs One-shot\nFor performance reasons one-shot version of algorithm does not re-use streaming version. Unless needed, user is advised to use one-shot version which tends to be more optimal.\n## ```const` `fn``` version\nWhile ```const` `fn``` provides compile time implementation, it does so at performance cost. Hence you should only use it at _compile_ time.\nTo guarantee that something is computed at compile time make sure to initialize hash output as ```const``` or ```static``` variable, otherwise it is possible function is executed at runtime, which would be worse than regular algorithm.\n```const` `fn``` is implemented in best possible way while conforming to limitations of Rust ```const` `fn```, but these limitations are quite strict making any high performance code impossible.\n## Version note\n  * ``0.8.*`` corresponds to C's ``0.8.*``\n\n\nIn order to keep up with original implementation version I'm not planning to bump major/minor until C implementation does so.\n#### No runtime deps\n  * dev  [getrandom](https://lib.rs/crates/getrandom \"outdated\") 0.2\n  * dev  [xxhash-c-sys](https://lib.rs/crates/xxhash-c-sys \"0.8.6\")\n\n\n#### [Other features](https://lib.rs/crates/xxhash-rust/features)\n  * [const_xxh3](https://lib.rs/crates/xxhash-rust/features#feature-const_xxh3)\n  * [const_xxh32](https://lib.rs/crates/xxhash-rust/features#feature-const_xxh32)\n  * [const_xxh64](https://lib.rs/crates/xxhash-rust/features#feature-const_xxh64)\n  * [std](https://lib.rs/crates/xxhash-rust/features#feature-std)\n  * [xxh3](https://lib.rs/crates/xxhash-rust/features#feature-xxh3)\n  * [xxh32](https://lib.rs/crates/xxhash-rust/features#feature-xxh32)\n  * [xxh64](https://lib.rs/crates/xxhash-rust/features#feature-xxh64)\n\n\n  *[SLoC]: Lines of code, excluding comments\n",
              "markdown_with_citations": "###  12 releases\u27e81\u27e9\n0.8.15 |  Dec 30, 2024   \n---|---  \n0.8.12 |  Jul 26, 2024   \n0.8.10 |  Feb 17, 2024   \n0.8.8 |  Dec 20, 2023   \n0.8.0-beta.5 |  ~~Nov 18, 2020~~  \n#**8** in Algorithms\u27e82\u27e9\nDownload history 413474/week @ 2025-03-08 430587/week @ 2025-03-15 424974/week @ 2025-03-22 401501/week @ 2025-03-29 396463/week @ 2025-04-05 371185/week @ 2025-04-12 359302/week @ 2025-04-19 361306/week @ 2025-04-26 360896/week @ 2025-05-03 365411/week @ 2025-05-10 365669/week @ 2025-05-17 333147/week @ 2025-05-24 392975/week @ 2025-05-31 396763/week @ 2025-06-07 366378/week @ 2025-06-14 442302/week @ 2025-06-21\n**1,665,152** downloads per month Used in **1,625** crates (221 directly)\u27e83\u27e9\n**BSL-1.0** license \n105KB  2K  SLoC\n# xxhash-rust\n![Rust\u27e84\u27e9](https://github.com/DoumanAsh/xxhash-rust/actions/workflows/rust.yml) ![Crates.io\u27e85\u27e9](https://crates.io/crates/xxhash-rust) ![Documentation\u27e86\u27e9](https://docs.rs/crate/xxhash-rust/)\nImplementation of xxHash\u27e87\u27e9 in Rust\nEach algorithm is implemented via feature, allowing precise control over code size.\n## Example\n  * Cargo.toml\n\n```\n```[``dependencies.xxhash-rust``]`\n`version ``=` ``\"`0.8.12`\"``\n`features ``=` ``[```\"`xxh3`\"``, ``\"`const_xxh3`\"```]``\n``\n```\n\n  * main.rs\n\n```\n``use` `xxhash_rust`::```const_xxh3`::``xxh3_64 `as` const_xxh3`;`\n`use` `xxhash_rust`::```xxh3`::``xxh3_64`;`\n`const` `TEST``:` `u64` `=` `const_xxh3``(```b``\"`TEST`\"```)``;`\n``fn` `test_input`````(``text``:` `&``str````)```` ``->` `bool`` ````{`\n  `match` `xxh3_64``(`text`.``as_bytes``(``)``)` `{`\n    `TEST` `=>` `true``,`\n    `_` `=>` `false`\n  `}`\n```}```\n`assert!``(``!``test_input``(```\"`tEST`\"```)``)``;`\n`assert!``(``test_input``(```\"`TEST`\"```)``)``;`\n`\n```\n\n## Features:\nBy default all features are off.\n  * ``std`` - Enables ```std`::```io`::``Write`` trait implementation\n  * ``xxh32`` - Enables 32bit algorithm. Suitable for x86 targets\n  * ``const_xxh32`` - ```const` `fn``` version of ``xxh32`` algorithm\n  * ``xxh64`` - Enables 64 algorithm. Suitable for x86_64 targets\n  * ``const_xxh64`` - ```const` `fn``` version of ``xxh64`` algorithm\n  * ``xxh3`` - Enables ``xxh3`` family of algorithms, superior to ``xxh32`` and ``xxh64`` in terms of performance.\n  * ``const_xxh3`` - ```const` `fn``` version of ``xxh3`` algorithm\n\n\n## HW acceleration\nSimilar to reference implementation, crate implements various SIMDs in ``xxh3`` depending on provided flags. All checks are performed only at compile time, hence user is encouraged to enable these accelerations (for example via ```-`C target_cpu`=`native``)\nUsed SIMD acceleration:\n  * SSE2 - widely available, can be safely enabled in 99% of cases. Enabled by default in ``x86_64`` targets.\n  * AVX2;\n  * Neon - Enabled by default on aarch64 targets (most likely)\n  * Wasm SIMD128 - Has to be enabled via rust flag: ```-`Ctarget`-`feature`=``+`simd128``\n\n\n## Streaming vs One-shot\nFor performance reasons one-shot version of algorithm does not re-use streaming version. Unless needed, user is advised to use one-shot version which tends to be more optimal.\n## ```const` `fn``` version\nWhile ```const` `fn``` provides compile time implementation, it does so at performance cost. Hence you should only use it at _compile_ time.\nTo guarantee that something is computed at compile time make sure to initialize hash output as ```const``` or ```static``` variable, otherwise it is possible function is executed at runtime, which would be worse than regular algorithm.\n```const` `fn``` is implemented in best possible way while conforming to limitations of Rust ```const` `fn```, but these limitations are quite strict making any high performance code impossible.\n## Version note\n  * ``0.8.*`` corresponds to C's ``0.8.*``\n\n\nIn order to keep up with original implementation version I'm not planning to bump major/minor until C implementation does so.\n#### No runtime deps\n  * dev  getrandom\u27e88\u27e9 0.2\n  * dev  xxhash-c-sys\u27e89\u27e9\n\n\n#### Other features\u27e810\u27e9\n  * const_xxh3\u27e811\u27e9\n  * const_xxh32\u27e812\u27e9\n  * const_xxh64\u27e813\u27e9\n  * std\u27e814\u27e9\n  * xxh3\u27e815\u27e9\n  * xxh32\u27e816\u27e9\n  * xxh64\u27e817\u27e9\n\n\n  *[SLoC]: Lines of code, excluding comments\n",
              "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://lib.rs/crates/xxhash-rust/versions: 12 releases\n\u27e82\u27e9 https://lib.rs/algorithms: Rust implementations of core algorithms such as hashing, sorting, searching, and more. - Algorithms\n\u27e83\u27e9 https://lib.rs/crates/xxhash-rust/rev: **1,625** crates (221 directly)\n\u27e84\u27e9 https://img.gs/czjpqfbdkz/full/https://github.com/DoumanAsh/xxhash-rust/actions/workflows/rust.yml/badge.svg: ![Rust\n\u27e85\u27e9 https://img.shields.io/crates/v/xxhash-rust.svg: ![Crates.io\n\u27e86\u27e9 https://img.gs/czjpqfbdkz/full/https://docs.rs/xxhash-rust/badge.svg: ![Documentation\n\u27e87\u27e9 https://github.com/Cyan4973/xxHash: xxHash\n\u27e88\u27e9 https://lib.rs/crates/getrandom: outdated - getrandom\n\u27e89\u27e9 https://lib.rs/crates/xxhash-c-sys: 0.8.6 - xxhash-c-sys\n\u27e810\u27e9 https://lib.rs/crates/xxhash-rust/features: Other features\n\u27e811\u27e9 https://lib.rs/crates/xxhash-rust/features#feature-const_xxh3: const_xxh3\n\u27e812\u27e9 https://lib.rs/crates/xxhash-rust/features#feature-const_xxh32: const_xxh32\n\u27e813\u27e9 https://lib.rs/crates/xxhash-rust/features#feature-const_xxh64: const_xxh64\n\u27e814\u27e9 https://lib.rs/crates/xxhash-rust/features#feature-std: std\n\u27e815\u27e9 https://lib.rs/crates/xxhash-rust/features#feature-xxh3: xxh3\n\u27e816\u27e9 https://lib.rs/crates/xxhash-rust/features#feature-xxh32: xxh32\n\u27e817\u27e9 https://lib.rs/crates/xxhash-rust/features#feature-xxh64: xxh64\n",
              "fit_markdown": "",
              "fit_html": ""
            },
            "structured_data": {},
            "quality_score": 3.0,
            "extraction_method": "crawl4ai",
            "error": null,
            "metadata": {
              "doc_type": "docs",
              "content_length": 5078,
              "has_structured_data": false,
              "crawl_success": true
            },
            "timestamp": "114815.5230253"
          }
        },
        "crate_analysis": {
          "status": "completed",
          "check": [
            {
              "reason": "compiler-artifact",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmp0s4iuq5e/xxhash-rust-0.8.15#xxhash-rust@0.8.15",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp0s4iuq5e\\xxhash-rust-0.8.15\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "xxhash_rust",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp0s4iuq5e\\xxhash-rust-0.8.15\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp0s4iuq5e\\xxhash-rust-0.8.15\\target\\debug\\deps\\libxxhash_rust-7303e3526abc0a17.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "build-finished",
              "success": true
            }
          ],
          "clippy": [
            {
              "reason": "compiler-artifact",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmp0s4iuq5e/xxhash-rust-0.8.15#xxhash-rust@0.8.15",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp0s4iuq5e\\xxhash-rust-0.8.15\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "xxhash_rust",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp0s4iuq5e\\xxhash-rust-0.8.15\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp0s4iuq5e\\xxhash-rust-0.8.15\\target\\debug\\deps\\libxxhash_rust-d3e09c2a90abf24f.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "build-finished",
              "success": true
            }
          ],
          "audit": {
            "database": {
              "advisory-count": 787,
              "last-commit": "7573f55ba337263f61167dbb0ea926cdc7c8eb5d",
              "last-updated": "2025-06-17T11:04:25+02:00"
            },
            "lockfile": {
              "dependency-count": 8
            },
            "settings": {
              "target_arch": [],
              "target_os": [],
              "severity": null,
              "ignore": [],
              "informational_warnings": [
                "unmaintained",
                "unsound",
                "notice"
              ]
            },
            "vulnerabilities": {
              "found": false,
              "count": 0,
              "list": []
            },
            "warnings": {}
          },
          "note": "Crate analysis performed with stable toolchain."
        },
        "crate_metadata": {
          "name": "xxhash-rust",
          "version": "0.8.15",
          "description": "ALLOW: Positive community sentiment",
          "repository": "",
          "keywords": [],
          "categories": [],
          "readme": {
            "raw_markdown": "[](https://docs.rs/xxhash-rust/latest/xxhash_rust/all.html \"show sidebar\")\n# Crate xxhash_rustCopy item path\n[Settings](https://docs.rs/xxhash-rust/latest/settings.html)\n[Help](https://docs.rs/xxhash-rust/latest/help.html)\nSummary[Source](https://docs.rs/xxhash-rust/latest/src/xxhash_rust/lib.rs.html#1-106)\nExpand description\nImplementation of [xxHash](https://github.com/Cyan4973/xxHash) in Rust\nVersion corresponds to xxHash [releases](https://github.com/Cyan4973/xxHash/releases)\nEach algorithm is implemented via feature, allowing precise control over code size.\n### [\u00a7](https://docs.rs/xxhash-rust/latest/xxhash_rust/#example)Example\n  * Cargo.toml\n\n\n```\n[dependencies.xxhash-rust]\nversion = \"0.8.5\"\nfeatures = [\"xxh3\", \"const_xxh3\"]\n```\n\n  * main.rs\n\n\n```\nuse xxhash_rust::const_xxh3::xxh3_64 as const_xxh3;\nuse xxhash_rust::xxh3::xxh3_64;\nconst TEST: u64 = const_xxh3(b\"TEST\");\nfn test_input(text: &str) -> bool {\n  match xxh3_64(text.as_bytes()) {\n    TEST => true,\n    _ => false\n  }\n}\nassert!(!test_input(\"tEST\"));\nassert!(test_input(\"TEST\"));\n```\n\n### [\u00a7](https://docs.rs/xxhash-rust/latest/xxhash_rust/#features)Features:\nBy default all features are off.\n  * `std` - Enables `std::io::Write` trait implementation\n  * `xxh32` - Enables 32bit algorithm. Suitable for x86 targets\n  * `const_xxh32` - `const fn` version of `xxh32` algorithm\n  * `xxh64` - Enables 64 algorithm. Suitable for x86_64 targets\n  * `const_xxh64` - `const fn` version of `xxh64` algorithm\n  * `xxh3` - Enables `xxh3` family of algorithms, superior to `xxh32` and `xxh64` in terms of performance.\n  * `const_xxh3` - `const fn` version of `xxh3` algorithm\n\n\n### [\u00a7](https://docs.rs/xxhash-rust/latest/xxhash_rust/#hw-acceleration)HW acceleration\nSimilar to reference implementation, crate implements various SIMDs in `xxh3` depending on provided flags. All checks are performed only at compile time, hence user is encouraged to enable these accelerations (for example via `-C target_cpu=native`)\nUsed SIMD acceleration:\n  * SSE2 - widely available, can be safely enabled in 99% of cases. Enabled by default in `x86_64` targets.\n  * AVX2;\n  * Neon - Enabled by default on aarch64 targets (most likely);\n  * Wasm SIMD128 - Has to be enabled via rust flag: `-Ctarget-feature=+simd128`\n\n\n### [\u00a7](https://docs.rs/xxhash-rust/latest/xxhash_rust/#streaming-vs-one-shot)Streaming vs One-shot\nFor performance reasons one-shot version of algorithm does not re-use streaming version. Unless needed, user is advised to use one-shot version which tends to be more optimal.\n### [\u00a7](https://docs.rs/xxhash-rust/latest/xxhash_rust/#cosnt-fn-version)`cosnt fn` version\nWhile `const fn` provides compile time implementation, it does so at performance cost. Hence you should only use it at _compile_ time.\nTo guarantee that something is computed at compile time make sure to initialize hash output as `const` or `static` variable, otherwise it is possible function is executed at runtime, which would be worse than regular algorithm.\n`const fn` is implemented in best possible way while conforming to limitations of Rust `const fn`, but these limitations are quite strict making any high performance code impossible.\n## Modules[\u00a7](https://docs.rs/xxhash-rust/latest/xxhash_rust/#modules)\n\n[const_xxh3](https://docs.rs/xxhash-rust/latest/xxhash_rust/const_xxh3/index.html \"mod xxhash_rust::const_xxh3\")\n    Xxh3 `const fn` implementation\n\n[const_xxh32](https://docs.rs/xxhash-rust/latest/xxhash_rust/const_xxh32/index.html \"mod xxhash_rust::const_xxh32\")\n    Const eval friendly xxh32 implementation.\n\n[const_xxh64](https://docs.rs/xxhash-rust/latest/xxhash_rust/const_xxh64/index.html \"mod xxhash_rust::const_xxh64\")\n    Const 64 bit version of xxhash algorithm\n\n[xxh3](https://docs.rs/xxhash-rust/latest/xxhash_rust/xxh3/index.html \"mod xxhash_rust::xxh3\")\n    XXH3 implementation\n\n[xxh32](https://docs.rs/xxhash-rust/latest/xxhash_rust/xxh32/index.html \"mod xxhash_rust::xxh32\")\n    32 bit version of xxhash algorithm\n\n[xxh64](https://docs.rs/xxhash-rust/latest/xxhash_rust/xxh64/index.html \"mod xxhash_rust::xxh64\")\n    64 bit version of xxhash algorithm\n",
            "markdown_with_citations": "[](https://docs.rs/xxhash-rust/latest/xxhash_rust/all.html \"show sidebar\")\n# Crate xxhash_rustCopy item path\nSettings\u27e81\u27e9\nHelp\u27e82\u27e9\nSummarySource\u27e83\u27e9\nExpand description\nImplementation of xxHash\u27e84\u27e9 in Rust\nVersion corresponds to xxHash releases\u27e85\u27e9\nEach algorithm is implemented via feature, allowing precise control over code size.\n### \u00a7\u27e86\u27e9Example\n  * Cargo.toml\n\n\n```\n[dependencies.xxhash-rust]\nversion = \"0.8.5\"\nfeatures = [\"xxh3\", \"const_xxh3\"]\n```\n\n  * main.rs\n\n\n```\nuse xxhash_rust::const_xxh3::xxh3_64 as const_xxh3;\nuse xxhash_rust::xxh3::xxh3_64;\nconst TEST: u64 = const_xxh3(b\"TEST\");\nfn test_input(text: &str) -> bool {\n  match xxh3_64(text.as_bytes()) {\n    TEST => true,\n    _ => false\n  }\n}\nassert!(!test_input(\"tEST\"));\nassert!(test_input(\"TEST\"));\n```\n\n### \u00a7\u27e87\u27e9Features:\nBy default all features are off.\n  * `std` - Enables `std::io::Write` trait implementation\n  * `xxh32` - Enables 32bit algorithm. Suitable for x86 targets\n  * `const_xxh32` - `const fn` version of `xxh32` algorithm\n  * `xxh64` - Enables 64 algorithm. Suitable for x86_64 targets\n  * `const_xxh64` - `const fn` version of `xxh64` algorithm\n  * `xxh3` - Enables `xxh3` family of algorithms, superior to `xxh32` and `xxh64` in terms of performance.\n  * `const_xxh3` - `const fn` version of `xxh3` algorithm\n\n\n### \u00a7\u27e88\u27e9HW acceleration\nSimilar to reference implementation, crate implements various SIMDs in `xxh3` depending on provided flags. All checks are performed only at compile time, hence user is encouraged to enable these accelerations (for example via `-C target_cpu=native`)\nUsed SIMD acceleration:\n  * SSE2 - widely available, can be safely enabled in 99% of cases. Enabled by default in `x86_64` targets.\n  * AVX2;\n  * Neon - Enabled by default on aarch64 targets (most likely);\n  * Wasm SIMD128 - Has to be enabled via rust flag: `-Ctarget-feature=+simd128`\n\n\n### \u00a7\u27e89\u27e9Streaming vs One-shot\nFor performance reasons one-shot version of algorithm does not re-use streaming version. Unless needed, user is advised to use one-shot version which tends to be more optimal.\n### \u00a7\u27e810\u27e9`cosnt fn` version\nWhile `const fn` provides compile time implementation, it does so at performance cost. Hence you should only use it at _compile_ time.\nTo guarantee that something is computed at compile time make sure to initialize hash output as `const` or `static` variable, otherwise it is possible function is executed at runtime, which would be worse than regular algorithm.\n`const fn` is implemented in best possible way while conforming to limitations of Rust `const fn`, but these limitations are quite strict making any high performance code impossible.\n## Modules\u00a7\u27e811\u27e9\n\nconst_xxh3\u27e812\u27e9\n    Xxh3 `const fn` implementation\n\nconst_xxh32\u27e813\u27e9\n    Const eval friendly xxh32 implementation.\n\nconst_xxh64\u27e814\u27e9\n    Const 64 bit version of xxhash algorithm\n\nxxh3\u27e815\u27e9\n    XXH3 implementation\n\nxxh32\u27e816\u27e9\n    32 bit version of xxhash algorithm\n\nxxh64\u27e817\u27e9\n    64 bit version of xxhash algorithm\n",
            "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://docs.rs/xxhash-rust/latest/settings.html: Settings\n\u27e82\u27e9 https://docs.rs/xxhash-rust/latest/help.html: Help\n\u27e83\u27e9 https://docs.rs/xxhash-rust/latest/src/xxhash_rust/lib.rs.html#1-106: Source\n\u27e84\u27e9 https://github.com/Cyan4973/xxHash: xxHash\n\u27e85\u27e9 https://github.com/Cyan4973/xxHash/releases: releases\n\u27e86\u27e9 https://docs.rs/xxhash-rust/latest/xxhash_rust/#example: \u00a7\n\u27e87\u27e9 https://docs.rs/xxhash-rust/latest/xxhash_rust/#features: \u00a7\n\u27e88\u27e9 https://docs.rs/xxhash-rust/latest/xxhash_rust/#hw-acceleration: \u00a7\n\u27e89\u27e9 https://docs.rs/xxhash-rust/latest/xxhash_rust/#streaming-vs-one-shot: \u00a7\n\u27e810\u27e9 https://docs.rs/xxhash-rust/latest/xxhash_rust/#cosnt-fn-version: \u00a7\n\u27e811\u27e9 https://docs.rs/xxhash-rust/latest/xxhash_rust/#modules: \u00a7\n\u27e812\u27e9 https://docs.rs/xxhash-rust/latest/xxhash_rust/const_xxh3/index.html: mod xxhash_rust::const_xxh3 - const_xxh3\n\u27e813\u27e9 https://docs.rs/xxhash-rust/latest/xxhash_rust/const_xxh32/index.html: mod xxhash_rust::const_xxh32 - const_xxh32\n\u27e814\u27e9 https://docs.rs/xxhash-rust/latest/xxhash_rust/const_xxh64/index.html: mod xxhash_rust::const_xxh64 - const_xxh64\n\u27e815\u27e9 https://docs.rs/xxhash-rust/latest/xxhash_rust/xxh3/index.html: mod xxhash_rust::xxh3 - xxh3\n\u27e816\u27e9 https://docs.rs/xxhash-rust/latest/xxhash_rust/xxh32/index.html: mod xxhash_rust::xxh32 - xxh32\n\u27e817\u27e9 https://docs.rs/xxhash-rust/latest/xxhash_rust/xxh64/index.html: mod xxhash_rust::xxh64 - xxh64\n",
            "fit_markdown": "",
            "fit_html": ""
          },
          "downloads": 0,
          "github_stars": 0,
          "dependencies": [],
          "features": {},
          "code_snippets": [],
          "readme_sections": {},
          "librs_downloads": null,
          "source": "crates.io",
          "enhanced_scraping": {},
          "enhanced_features": [],
          "enhanced_dependencies": []
        },
        "enriched_crate": {
          "name": "xxhash-rust",
          "version": "0.8.15",
          "description": "ALLOW: Positive community sentiment",
          "repository": "",
          "keywords": [],
          "categories": [],
          "readme": {
            "raw_markdown": "[](https://docs.rs/xxhash-rust/latest/xxhash_rust/all.html \"show sidebar\")\n# Crate xxhash_rustCopy item path\n[Settings](https://docs.rs/xxhash-rust/latest/settings.html)\n[Help](https://docs.rs/xxhash-rust/latest/help.html)\nSummary[Source](https://docs.rs/xxhash-rust/latest/src/xxhash_rust/lib.rs.html#1-106)\nExpand description\nImplementation of [xxHash](https://github.com/Cyan4973/xxHash) in Rust\nVersion corresponds to xxHash [releases](https://github.com/Cyan4973/xxHash/releases)\nEach algorithm is implemented via feature, allowing precise control over code size.\n### [\u00a7](https://docs.rs/xxhash-rust/latest/xxhash_rust/#example)Example\n  * Cargo.toml\n\n\n```\n[dependencies.xxhash-rust]\nversion = \"0.8.5\"\nfeatures = [\"xxh3\", \"const_xxh3\"]\n```\n\n  * main.rs\n\n\n```\nuse xxhash_rust::const_xxh3::xxh3_64 as const_xxh3;\nuse xxhash_rust::xxh3::xxh3_64;\nconst TEST: u64 = const_xxh3(b\"TEST\");\nfn test_input(text: &str) -> bool {\n  match xxh3_64(text.as_bytes()) {\n    TEST => true,\n    _ => false\n  }\n}\nassert!(!test_input(\"tEST\"));\nassert!(test_input(\"TEST\"));\n```\n\n### [\u00a7](https://docs.rs/xxhash-rust/latest/xxhash_rust/#features)Features:\nBy default all features are off.\n  * `std` - Enables `std::io::Write` trait implementation\n  * `xxh32` - Enables 32bit algorithm. Suitable for x86 targets\n  * `const_xxh32` - `const fn` version of `xxh32` algorithm\n  * `xxh64` - Enables 64 algorithm. Suitable for x86_64 targets\n  * `const_xxh64` - `const fn` version of `xxh64` algorithm\n  * `xxh3` - Enables `xxh3` family of algorithms, superior to `xxh32` and `xxh64` in terms of performance.\n  * `const_xxh3` - `const fn` version of `xxh3` algorithm\n\n\n### [\u00a7](https://docs.rs/xxhash-rust/latest/xxhash_rust/#hw-acceleration)HW acceleration\nSimilar to reference implementation, crate implements various SIMDs in `xxh3` depending on provided flags. All checks are performed only at compile time, hence user is encouraged to enable these accelerations (for example via `-C target_cpu=native`)\nUsed SIMD acceleration:\n  * SSE2 - widely available, can be safely enabled in 99% of cases. Enabled by default in `x86_64` targets.\n  * AVX2;\n  * Neon - Enabled by default on aarch64 targets (most likely);\n  * Wasm SIMD128 - Has to be enabled via rust flag: `-Ctarget-feature=+simd128`\n\n\n### [\u00a7](https://docs.rs/xxhash-rust/latest/xxhash_rust/#streaming-vs-one-shot)Streaming vs One-shot\nFor performance reasons one-shot version of algorithm does not re-use streaming version. Unless needed, user is advised to use one-shot version which tends to be more optimal.\n### [\u00a7](https://docs.rs/xxhash-rust/latest/xxhash_rust/#cosnt-fn-version)`cosnt fn` version\nWhile `const fn` provides compile time implementation, it does so at performance cost. Hence you should only use it at _compile_ time.\nTo guarantee that something is computed at compile time make sure to initialize hash output as `const` or `static` variable, otherwise it is possible function is executed at runtime, which would be worse than regular algorithm.\n`const fn` is implemented in best possible way while conforming to limitations of Rust `const fn`, but these limitations are quite strict making any high performance code impossible.\n## Modules[\u00a7](https://docs.rs/xxhash-rust/latest/xxhash_rust/#modules)\n\n[const_xxh3](https://docs.rs/xxhash-rust/latest/xxhash_rust/const_xxh3/index.html \"mod xxhash_rust::const_xxh3\")\n    Xxh3 `const fn` implementation\n\n[const_xxh32](https://docs.rs/xxhash-rust/latest/xxhash_rust/const_xxh32/index.html \"mod xxhash_rust::const_xxh32\")\n    Const eval friendly xxh32 implementation.\n\n[const_xxh64](https://docs.rs/xxhash-rust/latest/xxhash_rust/const_xxh64/index.html \"mod xxhash_rust::const_xxh64\")\n    Const 64 bit version of xxhash algorithm\n\n[xxh3](https://docs.rs/xxhash-rust/latest/xxhash_rust/xxh3/index.html \"mod xxhash_rust::xxh3\")\n    XXH3 implementation\n\n[xxh32](https://docs.rs/xxhash-rust/latest/xxhash_rust/xxh32/index.html \"mod xxhash_rust::xxh32\")\n    32 bit version of xxhash algorithm\n\n[xxh64](https://docs.rs/xxhash-rust/latest/xxhash_rust/xxh64/index.html \"mod xxhash_rust::xxh64\")\n    64 bit version of xxhash algorithm\n",
            "markdown_with_citations": "[](https://docs.rs/xxhash-rust/latest/xxhash_rust/all.html \"show sidebar\")\n# Crate xxhash_rustCopy item path\nSettings\u27e81\u27e9\nHelp\u27e82\u27e9\nSummarySource\u27e83\u27e9\nExpand description\nImplementation of xxHash\u27e84\u27e9 in Rust\nVersion corresponds to xxHash releases\u27e85\u27e9\nEach algorithm is implemented via feature, allowing precise control over code size.\n### \u00a7\u27e86\u27e9Example\n  * Cargo.toml\n\n\n```\n[dependencies.xxhash-rust]\nversion = \"0.8.5\"\nfeatures = [\"xxh3\", \"const_xxh3\"]\n```\n\n  * main.rs\n\n\n```\nuse xxhash_rust::const_xxh3::xxh3_64 as const_xxh3;\nuse xxhash_rust::xxh3::xxh3_64;\nconst TEST: u64 = const_xxh3(b\"TEST\");\nfn test_input(text: &str) -> bool {\n  match xxh3_64(text.as_bytes()) {\n    TEST => true,\n    _ => false\n  }\n}\nassert!(!test_input(\"tEST\"));\nassert!(test_input(\"TEST\"));\n```\n\n### \u00a7\u27e87\u27e9Features:\nBy default all features are off.\n  * `std` - Enables `std::io::Write` trait implementation\n  * `xxh32` - Enables 32bit algorithm. Suitable for x86 targets\n  * `const_xxh32` - `const fn` version of `xxh32` algorithm\n  * `xxh64` - Enables 64 algorithm. Suitable for x86_64 targets\n  * `const_xxh64` - `const fn` version of `xxh64` algorithm\n  * `xxh3` - Enables `xxh3` family of algorithms, superior to `xxh32` and `xxh64` in terms of performance.\n  * `const_xxh3` - `const fn` version of `xxh3` algorithm\n\n\n### \u00a7\u27e88\u27e9HW acceleration\nSimilar to reference implementation, crate implements various SIMDs in `xxh3` depending on provided flags. All checks are performed only at compile time, hence user is encouraged to enable these accelerations (for example via `-C target_cpu=native`)\nUsed SIMD acceleration:\n  * SSE2 - widely available, can be safely enabled in 99% of cases. Enabled by default in `x86_64` targets.\n  * AVX2;\n  * Neon - Enabled by default on aarch64 targets (most likely);\n  * Wasm SIMD128 - Has to be enabled via rust flag: `-Ctarget-feature=+simd128`\n\n\n### \u00a7\u27e89\u27e9Streaming vs One-shot\nFor performance reasons one-shot version of algorithm does not re-use streaming version. Unless needed, user is advised to use one-shot version which tends to be more optimal.\n### \u00a7\u27e810\u27e9`cosnt fn` version\nWhile `const fn` provides compile time implementation, it does so at performance cost. Hence you should only use it at _compile_ time.\nTo guarantee that something is computed at compile time make sure to initialize hash output as `const` or `static` variable, otherwise it is possible function is executed at runtime, which would be worse than regular algorithm.\n`const fn` is implemented in best possible way while conforming to limitations of Rust `const fn`, but these limitations are quite strict making any high performance code impossible.\n## Modules\u00a7\u27e811\u27e9\n\nconst_xxh3\u27e812\u27e9\n    Xxh3 `const fn` implementation\n\nconst_xxh32\u27e813\u27e9\n    Const eval friendly xxh32 implementation.\n\nconst_xxh64\u27e814\u27e9\n    Const 64 bit version of xxhash algorithm\n\nxxh3\u27e815\u27e9\n    XXH3 implementation\n\nxxh32\u27e816\u27e9\n    32 bit version of xxhash algorithm\n\nxxh64\u27e817\u27e9\n    64 bit version of xxhash algorithm\n",
            "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://docs.rs/xxhash-rust/latest/settings.html: Settings\n\u27e82\u27e9 https://docs.rs/xxhash-rust/latest/help.html: Help\n\u27e83\u27e9 https://docs.rs/xxhash-rust/latest/src/xxhash_rust/lib.rs.html#1-106: Source\n\u27e84\u27e9 https://github.com/Cyan4973/xxHash: xxHash\n\u27e85\u27e9 https://github.com/Cyan4973/xxHash/releases: releases\n\u27e86\u27e9 https://docs.rs/xxhash-rust/latest/xxhash_rust/#example: \u00a7\n\u27e87\u27e9 https://docs.rs/xxhash-rust/latest/xxhash_rust/#features: \u00a7\n\u27e88\u27e9 https://docs.rs/xxhash-rust/latest/xxhash_rust/#hw-acceleration: \u00a7\n\u27e89\u27e9 https://docs.rs/xxhash-rust/latest/xxhash_rust/#streaming-vs-one-shot: \u00a7\n\u27e810\u27e9 https://docs.rs/xxhash-rust/latest/xxhash_rust/#cosnt-fn-version: \u00a7\n\u27e811\u27e9 https://docs.rs/xxhash-rust/latest/xxhash_rust/#modules: \u00a7\n\u27e812\u27e9 https://docs.rs/xxhash-rust/latest/xxhash_rust/const_xxh3/index.html: mod xxhash_rust::const_xxh3 - const_xxh3\n\u27e813\u27e9 https://docs.rs/xxhash-rust/latest/xxhash_rust/const_xxh32/index.html: mod xxhash_rust::const_xxh32 - const_xxh32\n\u27e814\u27e9 https://docs.rs/xxhash-rust/latest/xxhash_rust/const_xxh64/index.html: mod xxhash_rust::const_xxh64 - const_xxh64\n\u27e815\u27e9 https://docs.rs/xxhash-rust/latest/xxhash_rust/xxh3/index.html: mod xxhash_rust::xxh3 - xxh3\n\u27e816\u27e9 https://docs.rs/xxhash-rust/latest/xxhash_rust/xxh32/index.html: mod xxhash_rust::xxh32 - xxh32\n\u27e817\u27e9 https://docs.rs/xxhash-rust/latest/xxhash_rust/xxh64/index.html: mod xxhash_rust::xxh64 - xxh64\n",
            "fit_markdown": "",
            "fit_html": ""
          },
          "downloads": 0,
          "github_stars": 0,
          "dependencies": [],
          "features": {},
          "code_snippets": [],
          "readme_sections": {},
          "librs_downloads": null,
          "source": "crates.io",
          "enhanced_scraping": {},
          "enhanced_features": [],
          "enhanced_dependencies": [],
          "readme_summary": "The `xxhash-rust` crate provides a high-performance Rust implementation of the `xxHash` algorithm, including support for 32-bit, 64-bit, and the faster `xxh3` variants. It offers both runtime and `const fn` versions for compile-time hashing, with optional hardware acceleration via SIMD (e.g., SSE2, AVX2, Neon, Wasm SIMD128). Features are modular, allowing users to enable only the algorithms and optimizations they need for precise control over code size and performance.",
          "feature_summary": null,
          "use_case": "Utilities",
          "score": 6.5,
          "factual_counterfactual": "### Pair 1: Feature Control  \n\u2705 Factual: The `xxhash-rust` crate allows users to enable specific algorithms like `xxh32`, `xxh64`, and `xxh3` via feature flags to control code size and optimize performance for particular use cases.  \n\u274c Counterfactual: The `xxhash-rust` crate automatically enables all algorithms (`xxh32`, `xxh64`, and `xxh3`) by default, regardless of the user's configuration, to ensure maximum compatibility.  \n\n---\n\n### Pair 2: SIMD Hardware Acceleration  \n\u2705 Factual: The `xxhash-rust` crate supports SIMD hardware acceleration, including SSE2 for x86_64 targets, Neon for aarch64 targets, and Wasm SIMD128, which must be explicitly enabled via Rust compiler flags.  \n\u274c Counterfactual: The `xxhash-rust` crate dynamically detects and enables SIMD hardware acceleration at runtime, ensuring optimal performance without requiring compile-time flags.  \n\n---\n\n### Pair 3: Streaming vs One-shot Algorithms  \n\u2705 Factual: The `xxhash-rust` crate provides both streaming and one-shot versions of its algorithms, with the one-shot versions being more optimal for performance-sensitive applications.  \n\u274c Counterfactual: The `xxhash-rust` crate only supports streaming versions of its algorithms, as they are universally faster and more efficient than one-shot implementations.",
          "source_analysis": null,
          "user_behavior": null,
          "security": null
        }
      },
      "irl_score": 8.6,
      "execution_id": "exec-9f9281cf-9e89b98b-1751261024",
      "timestamp": "2025-06-30T05:23:44.443581+00:00",
      "canon_version": "1.3.0"
    },
    "rule_zero_compliant": true
  }
]