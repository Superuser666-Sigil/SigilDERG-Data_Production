[
  {
    "execution_id": "exec-dbf529c6-6553de48-1751260820",
    "timestamp": "2025-06-30T05:20:20.701889+00:00",
    "sacred_chain": {
      "input_data": "indexmap",
      "context_sources": [
        "crates.io",
        "github.com",
        "lib.rs",
        "docs.rs"
      ],
      "reasoning_steps": [
        "Input canonicalized: 'indexmap' -> 'indexmap'",
        "Context gathered from 4 validated sources",
        "Metadata extracted: 4 fields",
        "Documentation analyzed: quality 7.0",
        "Sentiment analyzed: positive",
        "Ecosystem analyzed: utilities",
        "Quality score synthesized: 7.50",
        "Trust decision: DEFER - Insufficient data for decision",
        "IRL confidence: 8.600"
      ],
      "suggestion": "ALLOW: Positive community sentiment",
      "verdict": "DEFER",
      "audit_info": {
        "metadata": {
          "name": "indexmap",
          "type": "rust_crate",
          "source": "manual_input",
          "extraction_method": "irl_engine"
        },
        "sentiment": {
          "quality_score": 7.0,
          "completeness": 0.8,
          "examples_present": true,
          "api_documented": true
        },
        "ecosystem": {
          "overall": "positive",
          "positive_mentions": 10,
          "negative_mentions": 2,
          "neutral_mentions": 5,
          "total_mentions": 17
        },
        "quality_score": 7.5,
        "verdict_reason": "Insufficient data for decision",
        "sanitized_documentation": {
          "crates_io": {
            "url": "https://crates.io/crates/indexmap",
            "title": "indexmap v2.10.0",
            "content": {
              "raw_markdown": "#  indexmap v2.10.0\nA hash table with consistent order and fast iteration. \n  * [ #hashmap ](https://crates.io/keywords/hashmap)\n  * [ #no_std ](https://crates.io/keywords/no_std)\n\n\n  * [ Readme ](https://crates.io/crates/indexmap)\n  * [ 45 Versions ](https://crates.io/crates/indexmap/versions)\n  * [ Dependencies ](https://crates.io/crates/indexmap/dependencies)\n  * [ Dependents ](https://crates.io/crates/indexmap/reverse_dependencies)\n\n\n## Metadata\n3 days ago \nv1.63.0 \n[ Apache-2.0 ](https://choosealicense.com/licenses/apache-2.0) OR [ MIT ](https://choosealicense.com/licenses/mit)\n93.6 KiB \n## Install\nRun the following Cargo command in your project directory:\ncargo add indexmap\nOr add the following line to your Cargo.toml:\nindexmap = \"2.10.0\"\n## Documentation\n[ docs.rs/indexmap ](https://docs.rs/indexmap/)\n## Repository\n[ github.com/indexmap-rs/indexmap ](https://github.com/indexmap-rs/indexmap)\n## Owners\n## Categories\n  * [Data structures](https://crates.io/categories/data-structures)\n  * [No standard library](https://crates.io/categories/no-std)\n\n\n[ Report crate ](https://crates.io/support?crate=indexmap&inquire=crate-violation)\n### Stats Overview\n540,617,854 Downloads all time\n45 Versions published\n#### Downloads over the last 90 days\nDisplay as \nStacked \n  * Stacked \n  * Unstacked \n\n\nLoading\u2026\n",
              "markdown_with_citations": "#  indexmap v2.10.0\nA hash table with consistent order and fast iteration. \n  *  #hashmap \u27e81\u27e9\n  *  #no_std \u27e82\u27e9\n\n\n  *  Readme \u27e83\u27e9\n  *  45 Versions \u27e84\u27e9\n  *  Dependencies \u27e85\u27e9\n  *  Dependents \u27e86\u27e9\n\n\n## Metadata\n3 days ago \nv1.63.0 \n Apache-2.0 \u27e87\u27e9 OR  MIT \u27e88\u27e9\n93.6 KiB \n## Install\nRun the following Cargo command in your project directory:\ncargo add indexmap\nOr add the following line to your Cargo.toml:\nindexmap = \"2.10.0\"\n## Documentation\n docs.rs/indexmap \u27e89\u27e9\n## Repository\n github.com/indexmap-rs/indexmap \u27e810\u27e9\n## Owners\n## Categories\n  * Data structures\u27e811\u27e9\n  * No standard library\u27e812\u27e9\n\n\n Report crate \u27e813\u27e9\n### Stats Overview\n540,617,854 Downloads all time\n45 Versions published\n#### Downloads over the last 90 days\nDisplay as \nStacked \n  * Stacked \n  * Unstacked \n\n\nLoading\u2026\n",
              "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://crates.io/keywords/hashmap:  #hashmap \n\u27e82\u27e9 https://crates.io/keywords/no_std:  #no_std \n\u27e83\u27e9 https://crates.io/crates/indexmap:  Readme \n\u27e84\u27e9 https://crates.io/crates/indexmap/versions:  45 Versions \n\u27e85\u27e9 https://crates.io/crates/indexmap/dependencies:  Dependencies \n\u27e86\u27e9 https://crates.io/crates/indexmap/reverse_dependencies:  Dependents \n\u27e87\u27e9 https://choosealicense.com/licenses/apache-2.0:  Apache-2.0 \n\u27e88\u27e9 https://choosealicense.com/licenses/mit:  MIT \n\u27e89\u27e9 https://docs.rs/indexmap/:  docs.rs/indexmap \n\u27e810\u27e9 https://github.com/indexmap-rs/indexmap:  github.com/indexmap-rs/indexmap \n\u27e811\u27e9 https://crates.io/categories/data-structures: Data structures\n\u27e812\u27e9 https://crates.io/categories/no-std: No standard library\n\u27e813\u27e9 https://crates.io/support?crate=indexmap&inquire=crate-violation:  Report crate \n",
              "fit_markdown": "",
              "fit_html": ""
            },
            "structured_data": {},
            "quality_score": 3.0,
            "extraction_method": "crawl4ai",
            "error": null,
            "metadata": {
              "doc_type": "docs",
              "content_length": 1320,
              "has_structured_data": false,
              "crawl_success": true
            },
            "timestamp": "114610.5428385"
          },
          "docs_rs": {
            "url": "https://docs.rs/indexmap",
            "title": "Crate indexmapCopy item path",
            "content": {
              "raw_markdown": "[](https://docs.rs/indexmap/latest/indexmap/all.html \"show sidebar\")\n# Crate indexmapCopy item path\n[Settings](https://docs.rs/indexmap/latest/settings.html)\n[Help](https://docs.rs/indexmap/latest/help.html)\nSummary[Source](https://docs.rs/indexmap/latest/src/indexmap/lib.rs.html#2-288)\nExpand description\n[`IndexMap`](https://docs.rs/indexmap/latest/indexmap/map/struct.IndexMap.html \"struct indexmap::map::IndexMap\") is a hash table where the iteration order of the key-value pairs is independent of the hash values of the keys.\n[`IndexSet`](https://docs.rs/indexmap/latest/indexmap/set/struct.IndexSet.html \"struct indexmap::set::IndexSet\") is a corresponding hash set using the same implementation and with similar properties.\n#### [\u00a7](https://docs.rs/indexmap/latest/indexmap/#highlights)Highlights\n[`IndexMap`](https://docs.rs/indexmap/latest/indexmap/map/struct.IndexMap.html \"struct indexmap::map::IndexMap\") and [`IndexSet`](https://docs.rs/indexmap/latest/indexmap/set/struct.IndexSet.html \"struct indexmap::set::IndexSet\") are drop-in compatible with the std `HashMap` and `HashSet`, but they also have some features of note:\n  * The ordering semantics (see their documentation for details)\n  * Sorting methods and the [`.pop()`](https://docs.rs/indexmap/latest/indexmap/map/struct.IndexMap.html#method.pop \"method indexmap::map::IndexMap::pop\") methods.\n  * The [`Equivalent`](https://docs.rs/indexmap/latest/indexmap/trait.Equivalent.html \"trait indexmap::Equivalent\") trait, which offers more flexible equality definitions between borrowed and owned versions of keys.\n  * The [`MutableKeys`](https://docs.rs/indexmap/latest/indexmap/map/trait.MutableKeys.html \"trait indexmap::map::MutableKeys\") trait, which gives opt-in mutable access to map keys, and [`MutableValues`](https://docs.rs/indexmap/latest/indexmap/set/trait.MutableValues.html \"trait indexmap::set::MutableValues\") for sets.\n\n\n#### [\u00a7](https://docs.rs/indexmap/latest/indexmap/#feature-flags)Feature Flags\nTo reduce the amount of compiled code in the crate by default, certain features are gated behind [feature flags](https://doc.rust-lang.org/cargo/reference/manifest.html#the-features-section). These allow you to opt in to (or out of) functionality. Below is a list of the features available in this crate.\n  * `std`: Enables features which require the Rust standard library. For more information see the section on [`no_std`](https://docs.rs/indexmap/latest/indexmap/#no-standard-library-targets).\n  * `rayon`: Enables parallel iteration and other parallel methods.\n  * `serde`: Adds implementations for [`Serialize`](https://docs.rs/serde/1.0.219/x86_64-unknown-linux-gnu/serde/ser/trait.Serialize.html \"trait serde::ser::Serialize\") and [`Deserialize`](https://docs.rs/serde/1.0.219/x86_64-unknown-linux-gnu/serde/de/trait.Deserialize.html \"trait serde::de::Deserialize\") to [`IndexMap`](https://docs.rs/indexmap/latest/indexmap/map/struct.IndexMap.html \"struct indexmap::map::IndexMap\") and [`IndexSet`](https://docs.rs/indexmap/latest/indexmap/set/struct.IndexSet.html \"struct indexmap::set::IndexSet\"). Alternative implementations for (de)serializing [`IndexMap`](https://docs.rs/indexmap/latest/indexmap/map/struct.IndexMap.html \"struct indexmap::map::IndexMap\") as an ordered sequence are available in the [`map::serde_seq`](https://docs.rs/indexmap/latest/indexmap/map/serde_seq/index.html \"mod indexmap::map::serde_seq\") module.\n  * `arbitrary`: Adds implementations for the [`arbitrary::Arbitrary`](https://docs.rs/arbitrary/1.4.1/x86_64-unknown-linux-gnu/arbitrary/trait.Arbitrary.html \"trait arbitrary::Arbitrary\") trait to [`IndexMap`](https://docs.rs/indexmap/latest/indexmap/map/struct.IndexMap.html \"struct indexmap::map::IndexMap\") and [`IndexSet`](https://docs.rs/indexmap/latest/indexmap/set/struct.IndexSet.html \"struct indexmap::set::IndexSet\").\n  * `quickcheck`: Adds implementations for the [`quickcheck::Arbitrary`](https://docs.rs/quickcheck/1.0.3/x86_64-unknown-linux-gnu/quickcheck/arbitrary/trait.Arbitrary.html \"trait quickcheck::arbitrary::Arbitrary\") trait to [`IndexMap`](https://docs.rs/indexmap/latest/indexmap/map/struct.IndexMap.html \"struct indexmap::map::IndexMap\") and [`IndexSet`](https://docs.rs/indexmap/latest/indexmap/set/struct.IndexSet.html \"struct indexmap::set::IndexSet\").\n  * `borsh` (**deprecated**): Adds implementations for [`BorshSerialize`](https://docs.rs/borsh/1.5.7/x86_64-unknown-linux-gnu/borsh/ser/trait.BorshSerialize.html \"trait borsh::ser::BorshSerialize\") and [`BorshDeserialize`](https://docs.rs/borsh/1.5.7/x86_64-unknown-linux-gnu/borsh/de/trait.BorshDeserialize.html \"trait borsh::de::BorshDeserialize\") to [`IndexMap`](https://docs.rs/indexmap/latest/indexmap/map/struct.IndexMap.html \"struct indexmap::map::IndexMap\") and [`IndexSet`](https://docs.rs/indexmap/latest/indexmap/set/struct.IndexSet.html \"struct indexmap::set::IndexSet\"). Due to a cyclic dependency that arose between [`borsh`](https://docs.rs/borsh/1.5.7/x86_64-unknown-linux-gnu/borsh/index.html \"mod borsh\") and `indexmap`, `borsh v1.5.6` added an `indexmap` feature that should be used instead of enabling the feature here.\n\n\n_Note: only the`std` feature is enabled by default._\n#### [\u00a7](https://docs.rs/indexmap/latest/indexmap/#alternate-hashers)Alternate Hashers\n[`IndexMap`](https://docs.rs/indexmap/latest/indexmap/map/struct.IndexMap.html \"struct indexmap::map::IndexMap\") and [`IndexSet`](https://docs.rs/indexmap/latest/indexmap/set/struct.IndexSet.html \"struct indexmap::set::IndexSet\") have a default hasher type [`S = RandomState`](https://doc.rust-lang.org/nightly/std/hash/random/struct.RandomState.html \"struct std::hash::random::RandomState\"), just like the standard `HashMap` and `HashSet`, which is resistant to HashDoS attacks but not the most performant. Type aliases can make it easier to use alternate hashers:\n```\nuse fnv::FnvBuildHasher;\nuse indexmap::{IndexMap, IndexSet};\ntype FnvIndexMap<K, V> = IndexMap<K, V, FnvBuildHasher>;\ntype FnvIndexSet<T> = IndexSet<T, FnvBuildHasher>;\nlet std: IndexSet<i32> = (0..100).collect();\nlet fnv: FnvIndexSet<i32> = (0..100).collect();\nassert_eq!(std, fnv);\n```\n\n#### [\u00a7](https://docs.rs/indexmap/latest/indexmap/#rust-version)Rust Version\nThis version of indexmap requires Rust 1.63 or later.\nThe indexmap 2.x release series will use a carefully considered version upgrade policy, where in a later 2.x version, we will raise the minimum required Rust version.\n### [\u00a7](https://docs.rs/indexmap/latest/indexmap/#no-standard-library-targets)No Standard Library Targets\nThis crate supports being built without `std`, requiring `alloc` instead. This is chosen by disabling the default \u201cstd\u201d cargo feature, by adding `default-features = false` to your dependency specification.\n  * Creating maps and sets using [`new`](https://docs.rs/indexmap/latest/indexmap/map/struct.IndexMap.html#method.new \"associated function indexmap::map::IndexMap::new\") and [`with_capacity`](https://docs.rs/indexmap/latest/indexmap/map/struct.IndexMap.html#method.with_capacity \"associated function indexmap::map::IndexMap::with_capacity\") is unavailable without `std`. Use methods [`IndexMap::default`](https://docs.rs/indexmap/latest/indexmap/map/struct.IndexMap.html#method.default \"associated function indexmap::map::IndexMap::default\"), [`with_hasher`](https://docs.rs/indexmap/latest/indexmap/map/struct.IndexMap.html#method.with_hasher \"associated function indexmap::map::IndexMap::with_hasher\"), [`with_capacity_and_hasher`](https://docs.rs/indexmap/latest/indexmap/map/struct.IndexMap.html#method.with_capacity_and_hasher \"associated function indexmap::map::IndexMap::with_capacity_and_hasher\") instead. A no-std compatible hasher will be needed as well, for example from the crate `twox-hash`.\n  * Macros [`indexmap!`](https://docs.rs/indexmap/latest/indexmap/macro.indexmap.html \"macro indexmap::indexmap\") and [`indexset!`](https://docs.rs/indexmap/latest/indexmap/macro.indexset.html \"macro indexmap::indexset\") are unavailable without `std`. Use the macros [`indexmap_with_default!`](https://docs.rs/indexmap/latest/indexmap/macro.indexmap_with_default.html \"macro indexmap::indexmap_with_default\") and [`indexset_with_default!`](https://docs.rs/indexmap/latest/indexmap/macro.indexset_with_default.html \"macro indexmap::indexset_with_default\") instead.\n\n\n## Re-exports[\u00a7](https://docs.rs/indexmap/latest/indexmap/#reexports)\n\n`pub use crate::map::IndexMap[](https://docs.rs/indexmap/latest/indexmap/map/struct.IndexMap.html \"struct indexmap::map::IndexMap\");`\n\n\n`pub use crate::set::IndexSet[](https://docs.rs/indexmap/latest/indexmap/set/struct.IndexSet.html \"struct indexmap::set::IndexSet\");`\n\n## Modules[\u00a7](https://docs.rs/indexmap/latest/indexmap/#modules)\n\n[map](https://docs.rs/indexmap/latest/indexmap/map/index.html \"mod indexmap::map\")\n    [`IndexMap`](https://docs.rs/indexmap/latest/indexmap/map/struct.IndexMap.html \"struct indexmap::map::IndexMap\") is a hash table where the iteration order of the key-value pairs is independent of the hash values of the keys.\n\n[set](https://docs.rs/indexmap/latest/indexmap/set/index.html \"mod indexmap::set\")\n    A hash set implemented using [`IndexMap`](https://docs.rs/indexmap/latest/indexmap/map/struct.IndexMap.html \"struct indexmap::map::IndexMap\")\n## Macros[\u00a7](https://docs.rs/indexmap/latest/indexmap/#macros)\n\n[indexmap](https://docs.rs/indexmap/latest/indexmap/macro.indexmap.html \"macro indexmap::indexmap\")`std`\n    Create an [`IndexMap`](https://docs.rs/indexmap/latest/indexmap/map/struct.IndexMap.html \"struct indexmap::map::IndexMap\") from a list of key-value pairs\n\n[indexmap_with_default](https://docs.rs/indexmap/latest/indexmap/macro.indexmap_with_default.html \"macro indexmap::indexmap_with_default\")\n    Create an [`IndexMap`](https://docs.rs/indexmap/latest/indexmap/map/struct.IndexMap.html \"struct indexmap::map::IndexMap\") from a list of key-value pairs and a [`BuildHasherDefault`](https://doc.rust-lang.org/nightly/core/hash/struct.BuildHasherDefault.html \"struct core::hash::BuildHasherDefault\")-wrapped custom hasher.\n\n[indexset](https://docs.rs/indexmap/latest/indexmap/macro.indexset.html \"macro indexmap::indexset\")`std`\n    Create an [`IndexSet`](https://docs.rs/indexmap/latest/indexmap/set/struct.IndexSet.html \"struct indexmap::set::IndexSet\") from a list of values\n\n[indexset_with_default](https://docs.rs/indexmap/latest/indexmap/macro.indexset_with_default.html \"macro indexmap::indexset_with_default\")\n    Create an [`IndexSet`](https://docs.rs/indexmap/latest/indexmap/set/struct.IndexSet.html \"struct indexmap::set::IndexSet\") from a list of values and a [`BuildHasherDefault`](https://doc.rust-lang.org/nightly/core/hash/struct.BuildHasherDefault.html \"struct core::hash::BuildHasherDefault\")-wrapped custom hasher.\n## Structs[\u00a7](https://docs.rs/indexmap/latest/indexmap/#structs)\n\n[TryReserveError](https://docs.rs/indexmap/latest/indexmap/struct.TryReserveError.html \"struct indexmap::TryReserveError\")\n    The error type for [`try_reserve`](https://docs.rs/indexmap/latest/indexmap/map/struct.IndexMap.html#method.try_reserve \"method indexmap::map::IndexMap::try_reserve\") methods.\n## Enums[\u00a7](https://docs.rs/indexmap/latest/indexmap/#enums)\n\n[GetDisjointMutError](https://docs.rs/indexmap/latest/indexmap/enum.GetDisjointMutError.html \"enum indexmap::GetDisjointMutError\")\n    The error type returned by [`get_disjoint_indices_mut`](https://docs.rs/indexmap/latest/indexmap/map/struct.IndexMap.html#method.get_disjoint_indices_mut \"method indexmap::map::IndexMap::get_disjoint_indices_mut\").\n## Traits[\u00a7](https://docs.rs/indexmap/latest/indexmap/#traits)\n\n[Equivalent](https://docs.rs/indexmap/latest/indexmap/trait.Equivalent.html \"trait indexmap::Equivalent\")\n    Key equivalence trait.\n",
              "markdown_with_citations": "[](https://docs.rs/indexmap/latest/indexmap/all.html \"show sidebar\")\n# Crate indexmapCopy item path\nSettings\u27e81\u27e9\nHelp\u27e82\u27e9\nSummarySource\u27e83\u27e9\nExpand description\n`IndexMap`\u27e84\u27e9 is a hash table where the iteration order of the key-value pairs is independent of the hash values of the keys.\n`IndexSet`\u27e85\u27e9 is a corresponding hash set using the same implementation and with similar properties.\n#### \u00a7\u27e86\u27e9Highlights\n`IndexMap`\u27e84\u27e9 and `IndexSet`\u27e85\u27e9 are drop-in compatible with the std `HashMap` and `HashSet`, but they also have some features of note:\n  * The ordering semantics (see their documentation for details)\n  * Sorting methods and the `.pop()`\u27e87\u27e9 methods.\n  * The `Equivalent`\u27e88\u27e9 trait, which offers more flexible equality definitions between borrowed and owned versions of keys.\n  * The `MutableKeys`\u27e89\u27e9 trait, which gives opt-in mutable access to map keys, and `MutableValues`\u27e810\u27e9 for sets.\n\n\n#### \u00a7\u27e811\u27e9Feature Flags\nTo reduce the amount of compiled code in the crate by default, certain features are gated behind feature flags\u27e812\u27e9. These allow you to opt in to (or out of) functionality. Below is a list of the features available in this crate.\n  * `std`: Enables features which require the Rust standard library. For more information see the section on `no_std`\u27e813\u27e9.\n  * `rayon`: Enables parallel iteration and other parallel methods.\n  * `serde`: Adds implementations for `Serialize`\u27e814\u27e9 and `Deserialize`\u27e815\u27e9 to `IndexMap`\u27e84\u27e9 and `IndexSet`\u27e85\u27e9. Alternative implementations for (de)serializing `IndexMap`\u27e84\u27e9 as an ordered sequence are available in the `map::serde_seq`\u27e816\u27e9 module.\n  * `arbitrary`: Adds implementations for the `arbitrary::Arbitrary`\u27e817\u27e9 trait to `IndexMap`\u27e84\u27e9 and `IndexSet`\u27e85\u27e9.\n  * `quickcheck`: Adds implementations for the `quickcheck::Arbitrary`\u27e818\u27e9 trait to `IndexMap`\u27e84\u27e9 and `IndexSet`\u27e85\u27e9.\n  * `borsh` (**deprecated**): Adds implementations for `BorshSerialize`\u27e819\u27e9 and `BorshDeserialize`\u27e820\u27e9 to `IndexMap`\u27e84\u27e9 and `IndexSet`\u27e85\u27e9. Due to a cyclic dependency that arose between `borsh`\u27e821\u27e9 and `indexmap`, `borsh v1.5.6` added an `indexmap` feature that should be used instead of enabling the feature here.\n\n\n_Note: only the`std` feature is enabled by default._\n#### \u00a7\u27e822\u27e9Alternate Hashers\n`IndexMap`\u27e84\u27e9 and `IndexSet`\u27e85\u27e9 have a default hasher type `S = RandomState`\u27e823\u27e9, just like the standard `HashMap` and `HashSet`, which is resistant to HashDoS attacks but not the most performant. Type aliases can make it easier to use alternate hashers:\n```\nuse fnv::FnvBuildHasher;\nuse indexmap::{IndexMap, IndexSet};\ntype FnvIndexMap<K, V> = IndexMap<K, V, FnvBuildHasher>;\ntype FnvIndexSet<T> = IndexSet<T, FnvBuildHasher>;\nlet std: IndexSet<i32> = (0..100).collect();\nlet fnv: FnvIndexSet<i32> = (0..100).collect();\nassert_eq!(std, fnv);\n```\n\n#### \u00a7\u27e824\u27e9Rust Version\nThis version of indexmap requires Rust 1.63 or later.\nThe indexmap 2.x release series will use a carefully considered version upgrade policy, where in a later 2.x version, we will raise the minimum required Rust version.\n### \u00a7\u27e813\u27e9No Standard Library Targets\nThis crate supports being built without `std`, requiring `alloc` instead. This is chosen by disabling the default \u201cstd\u201d cargo feature, by adding `default-features = false` to your dependency specification.\n  * Creating maps and sets using `new`\u27e825\u27e9 and `with_capacity`\u27e826\u27e9 is unavailable without `std`. Use methods `IndexMap::default`\u27e827\u27e9, `with_hasher`\u27e828\u27e9, `with_capacity_and_hasher`\u27e829\u27e9 instead. A no-std compatible hasher will be needed as well, for example from the crate `twox-hash`.\n  * Macros `indexmap!`\u27e830\u27e9 and `indexset!`\u27e831\u27e9 are unavailable without `std`. Use the macros `indexmap_with_default!`\u27e832\u27e9 and `indexset_with_default!`\u27e833\u27e9 instead.\n\n\n## Re-exports\u00a7\u27e834\u27e9\n\n`pub use crate::map::IndexMap[](https://docs.rs/indexmap/latest/indexmap/map/struct.IndexMap.html \"struct indexmap::map::IndexMap\");`\n\n\n`pub use crate::set::IndexSet[](https://docs.rs/indexmap/latest/indexmap/set/struct.IndexSet.html \"struct indexmap::set::IndexSet\");`\n\n## Modules\u00a7\u27e835\u27e9\n\nmap\u27e836\u27e9\n    `IndexMap`\u27e84\u27e9 is a hash table where the iteration order of the key-value pairs is independent of the hash values of the keys.\n\nset\u27e837\u27e9\n    A hash set implemented using `IndexMap`\u27e84\u27e9\n## Macros\u00a7\u27e838\u27e9\n\nindexmap\u27e830\u27e9`std`\n    Create an `IndexMap`\u27e84\u27e9 from a list of key-value pairs\n\nindexmap_with_default\u27e832\u27e9\n    Create an `IndexMap`\u27e84\u27e9 from a list of key-value pairs and a `BuildHasherDefault`\u27e839\u27e9-wrapped custom hasher.\n\nindexset\u27e831\u27e9`std`\n    Create an `IndexSet`\u27e85\u27e9 from a list of values\n\nindexset_with_default\u27e833\u27e9\n    Create an `IndexSet`\u27e85\u27e9 from a list of values and a `BuildHasherDefault`\u27e839\u27e9-wrapped custom hasher.\n## Structs\u00a7\u27e840\u27e9\n\nTryReserveError\u27e841\u27e9\n    The error type for `try_reserve`\u27e842\u27e9 methods.\n## Enums\u00a7\u27e843\u27e9\n\nGetDisjointMutError\u27e844\u27e9\n    The error type returned by `get_disjoint_indices_mut`\u27e845\u27e9.\n## Traits\u00a7\u27e846\u27e9\n\nEquivalent\u27e88\u27e9\n    Key equivalence trait.\n",
              "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://docs.rs/indexmap/latest/settings.html: Settings\n\u27e82\u27e9 https://docs.rs/indexmap/latest/help.html: Help\n\u27e83\u27e9 https://docs.rs/indexmap/latest/src/indexmap/lib.rs.html#2-288: Source\n\u27e84\u27e9 https://docs.rs/indexmap/latest/indexmap/map/struct.IndexMap.html: struct indexmap::map::IndexMap - `IndexMap`\n\u27e85\u27e9 https://docs.rs/indexmap/latest/indexmap/set/struct.IndexSet.html: struct indexmap::set::IndexSet - `IndexSet`\n\u27e86\u27e9 https://docs.rs/indexmap/latest/indexmap/#highlights: \u00a7\n\u27e87\u27e9 https://docs.rs/indexmap/latest/indexmap/map/struct.IndexMap.html#method.pop: method indexmap::map::IndexMap::pop - `.pop()`\n\u27e88\u27e9 https://docs.rs/indexmap/latest/indexmap/trait.Equivalent.html: trait indexmap::Equivalent - `Equivalent`\n\u27e89\u27e9 https://docs.rs/indexmap/latest/indexmap/map/trait.MutableKeys.html: trait indexmap::map::MutableKeys - `MutableKeys`\n\u27e810\u27e9 https://docs.rs/indexmap/latest/indexmap/set/trait.MutableValues.html: trait indexmap::set::MutableValues - `MutableValues`\n\u27e811\u27e9 https://docs.rs/indexmap/latest/indexmap/#feature-flags: \u00a7\n\u27e812\u27e9 https://doc.rust-lang.org/cargo/reference/manifest.html#the-features-section: feature flags\n\u27e813\u27e9 https://docs.rs/indexmap/latest/indexmap/#no-standard-library-targets: `no_std`\n\u27e814\u27e9 https://docs.rs/serde/1.0.219/x86_64-unknown-linux-gnu/serde/ser/trait.Serialize.html: trait serde::ser::Serialize - `Serialize`\n\u27e815\u27e9 https://docs.rs/serde/1.0.219/x86_64-unknown-linux-gnu/serde/de/trait.Deserialize.html: trait serde::de::Deserialize - `Deserialize`\n\u27e816\u27e9 https://docs.rs/indexmap/latest/indexmap/map/serde_seq/index.html: mod indexmap::map::serde_seq - `map::serde_seq`\n\u27e817\u27e9 https://docs.rs/arbitrary/1.4.1/x86_64-unknown-linux-gnu/arbitrary/trait.Arbitrary.html: trait arbitrary::Arbitrary - `arbitrary::Arbitrary`\n\u27e818\u27e9 https://docs.rs/quickcheck/1.0.3/x86_64-unknown-linux-gnu/quickcheck/arbitrary/trait.Arbitrary.html: trait quickcheck::arbitrary::Arbitrary - `quickcheck::Arbitrary`\n\u27e819\u27e9 https://docs.rs/borsh/1.5.7/x86_64-unknown-linux-gnu/borsh/ser/trait.BorshSerialize.html: trait borsh::ser::BorshSerialize - `BorshSerialize`\n\u27e820\u27e9 https://docs.rs/borsh/1.5.7/x86_64-unknown-linux-gnu/borsh/de/trait.BorshDeserialize.html: trait borsh::de::BorshDeserialize - `BorshDeserialize`\n\u27e821\u27e9 https://docs.rs/borsh/1.5.7/x86_64-unknown-linux-gnu/borsh/index.html: mod borsh - `borsh`\n\u27e822\u27e9 https://docs.rs/indexmap/latest/indexmap/#alternate-hashers: \u00a7\n\u27e823\u27e9 https://doc.rust-lang.org/nightly/std/hash/random/struct.RandomState.html: struct std::hash::random::RandomState - `S = RandomState`\n\u27e824\u27e9 https://docs.rs/indexmap/latest/indexmap/#rust-version: \u00a7\n\u27e825\u27e9 https://docs.rs/indexmap/latest/indexmap/map/struct.IndexMap.html#method.new: associated function indexmap::map::IndexMap::new - `new`\n\u27e826\u27e9 https://docs.rs/indexmap/latest/indexmap/map/struct.IndexMap.html#method.with_capacity: associated function indexmap::map::IndexMap::with_capacity - `with_capacity`\n\u27e827\u27e9 https://docs.rs/indexmap/latest/indexmap/map/struct.IndexMap.html#method.default: associated function indexmap::map::IndexMap::default - `IndexMap::default`\n\u27e828\u27e9 https://docs.rs/indexmap/latest/indexmap/map/struct.IndexMap.html#method.with_hasher: associated function indexmap::map::IndexMap::with_hasher - `with_hasher`\n\u27e829\u27e9 https://docs.rs/indexmap/latest/indexmap/map/struct.IndexMap.html#method.with_capacity_and_hasher: associated function indexmap::map::IndexMap::with_capacity_and_hasher - `with_capacity_and_hasher`\n\u27e830\u27e9 https://docs.rs/indexmap/latest/indexmap/macro.indexmap.html: macro indexmap::indexmap - `indexmap!`\n\u27e831\u27e9 https://docs.rs/indexmap/latest/indexmap/macro.indexset.html: macro indexmap::indexset - `indexset!`\n\u27e832\u27e9 https://docs.rs/indexmap/latest/indexmap/macro.indexmap_with_default.html: macro indexmap::indexmap_with_default - `indexmap_with_default!`\n\u27e833\u27e9 https://docs.rs/indexmap/latest/indexmap/macro.indexset_with_default.html: macro indexmap::indexset_with_default - `indexset_with_default!`\n\u27e834\u27e9 https://docs.rs/indexmap/latest/indexmap/#reexports: \u00a7\n\u27e835\u27e9 https://docs.rs/indexmap/latest/indexmap/#modules: \u00a7\n\u27e836\u27e9 https://docs.rs/indexmap/latest/indexmap/map/index.html: mod indexmap::map - map\n\u27e837\u27e9 https://docs.rs/indexmap/latest/indexmap/set/index.html: mod indexmap::set - set\n\u27e838\u27e9 https://docs.rs/indexmap/latest/indexmap/#macros: \u00a7\n\u27e839\u27e9 https://doc.rust-lang.org/nightly/core/hash/struct.BuildHasherDefault.html: struct core::hash::BuildHasherDefault - `BuildHasherDefault`\n\u27e840\u27e9 https://docs.rs/indexmap/latest/indexmap/#structs: \u00a7\n\u27e841\u27e9 https://docs.rs/indexmap/latest/indexmap/struct.TryReserveError.html: struct indexmap::TryReserveError - TryReserveError\n\u27e842\u27e9 https://docs.rs/indexmap/latest/indexmap/map/struct.IndexMap.html#method.try_reserve: method indexmap::map::IndexMap::try_reserve - `try_reserve`\n\u27e843\u27e9 https://docs.rs/indexmap/latest/indexmap/#enums: \u00a7\n\u27e844\u27e9 https://docs.rs/indexmap/latest/indexmap/enum.GetDisjointMutError.html: enum indexmap::GetDisjointMutError - GetDisjointMutError\n\u27e845\u27e9 https://docs.rs/indexmap/latest/indexmap/map/struct.IndexMap.html#method.get_disjoint_indices_mut: method indexmap::map::IndexMap::get_disjoint_indices_mut - `get_disjoint_indices_mut`\n\u27e846\u27e9 https://docs.rs/indexmap/latest/indexmap/#traits: \u00a7\n",
              "fit_markdown": "",
              "fit_html": ""
            },
            "structured_data": {},
            "quality_score": 4.0,
            "extraction_method": "crawl4ai",
            "error": null,
            "metadata": {
              "doc_type": "docs",
              "content_length": 11763,
              "has_structured_data": false,
              "crawl_success": true
            },
            "timestamp": "114611.2052607"
          },
          "lib_rs": {
            "url": "https://lib.rs/crates/indexmap",
            "title": "Untitled",
            "content": {
              "raw_markdown": "###  [42 stable releases](https://lib.rs/crates/indexmap/versions)\nnew 2.10.0 |  Jun 26, 2025   \n---|---  \n2.8.0 |  Mar 10, 2025   \n2.7.0 |  Dec 1, 2024   \n2.6.0 |  Oct 1, 2024   \n0.4.1 |  Feb 14, 2018   \n#**2** in [Data structures](https://lib.rs/data-structures \"Rust implementations of particular ways of organizing data suited for specific purposes.\")\nDownload history 7095952/week @ 2025-03-10 7727195/week @ 2025-03-17 7768582/week @ 2025-03-24 6915078/week @ 2025-03-31 7347342/week @ 2025-04-07 6593840/week @ 2025-04-14 6351523/week @ 2025-04-21 6250013/week @ 2025-04-28 6410191/week @ 2025-05-05 6623720/week @ 2025-05-12 6677976/week @ 2025-05-19 5876512/week @ 2025-05-26 6299683/week @ 2025-06-02 6825590/week @ 2025-06-09 7514296/week @ 2025-06-16 6900022/week @ 2025-06-23\n**27,878,242** downloads per month Used in [**47,280** crates (2,860 directly)](https://lib.rs/crates/indexmap/rev)\n**Apache-2.0 OR MIT**\n405KB  8K  SLoC\n# indexmap\n[![build status](https://img.gs/czjpqfbdkz/full/https://github.com/indexmap-rs/indexmap/actions/workflows/ci.yml/badge.svg?branch=main)](https://github.com/indexmap-rs/indexmap/actions) [![crates.io](https://img.shields.io/crates/v/indexmap.svg)](https://crates.io/crates/indexmap) [![docs](https://img.gs/czjpqfbdkz/full/https://docs.rs/indexmap/badge.svg)](https://docs.rs/indexmap) [![rustc](https://img.shields.io/badge/rust-1.63%2B-orange.svg)](https://img.shields.io/badge/rust-1.63%2B-orange.svg)\nA pure-Rust hash table which preserves (in a limited sense) insertion order.\nThis crate implements compact map and set data-structures, where the iteration order of the keys is independent from their hash or value. It preserves insertion order (except after removals), and it allows lookup of entries by either hash table key or numerical index.\nNote: this crate was originally released under the name ``ordermap``, but it was renamed to ``indexmap`` to better reflect its features. The [``ordermap``](https://lib.rs/crates/ordermap) crate now exists as a wrapper over ``indexmap`` with stronger ordering properties.\n# Background\nThis was inspired by Python 3.6's new dict implementation (which remembers the insertion order and is fast to iterate, and is compact in memory).\nSome of those features were translated to Rust, and some were not. The result was indexmap, a hash table that has following properties:\n  * Order is **independent of hash function** and hash values of keys.\n  * Fast to iterate.\n  * Indexed in compact space.\n  * Preserves insertion order **as long** as you don't call ```.``remove``(``)```, ```.``swap_remove``(``)```, or other methods that explicitly change order. The alternate ```.``shift_remove``(``)``` does preserve relative order.\n  * Uses hashbrown for the inner table, just like Rust's libstd ``HashMap`` does.\n\n\n## Performance\n``IndexMap`` derives a couple of performance facts directly from how it is constructed, which is roughly:\n> A raw hash table of key-value indices, and a vector of key-value pairs.\n  * Iteration is very fast since it is on the dense key-values.\n  * Removal is fast since it moves memory areas only in the table, and uses a single swap in the vector.\n  * Lookup is fast-ish because the initial 7-bit hash lookup uses SIMD, and indices are densely stored. Lookup also is slow-ish since the actual key-value pairs are stored separately. (Visible when cpu caches size is limiting.)\n  * In practice, ``IndexMap`` has been tested out as the hashmap in rustc in [PR45282](https://github.com/rust-lang/rust/pull/45282) and the performance was roughly on par across the whole workload.\n  * If you want the properties of ``IndexMap``, or its strongest performance points fits your workload, it might be the best hash table implementation.\n\n\n# Recent Changes\nSee [RELEASES.md](https://github.com/indexmap-rs/indexmap/blob/main/RELEASES.md).\n#### Dependencies\n~0.5\u20131.3MB  ~22K SLoC\n  * [ optional ](https://lib.rs/crates/indexmap/features#feature-arbitrary \"arbitrary is optional feature\") [arbitrary](https://lib.rs/crates/arbitrary \"1.0\")\n  * [ optional ](https://lib.rs/crates/indexmap/features#feature-borsh \"borsh is optional feature\") [borsh](https://lib.rs/crates/borsh \"new\") 1.2\n  * [equivalent](https://lib.rs/crates/equivalent \"1.0\")\n  * [hashbrown](https://lib.rs/crates/hashbrown \"new\") 0.15\n  * [ optional ](https://lib.rs/crates/indexmap/features#feature-quickcheck \"quickcheck is optional feature\") [quickcheck](https://lib.rs/crates/quickcheck \"new\") 1.0\n  * [ optional ](https://lib.rs/crates/indexmap/features#feature-rayon \"rayon is optional feature\") [rayon](https://lib.rs/crates/rayon \"1.9\")\n  * [ optional ](https://lib.rs/crates/indexmap/features#feature-serde \"serde is optional feature\") [serde](https://lib.rs/crates/serde \"1.0\")\n\n\n  * dev  [fastrand](https://lib.rs/crates/fastrand \"2\")\n  * dev  [fnv](https://lib.rs/crates/fnv \"1.0\")\n  * dev  [itertools](https://lib.rs/crates/itertools \"new\") 0.14\n  * dev  [serde_derive](https://lib.rs/crates/serde_derive \"1.0\")\n\n\n#### [Other features](https://lib.rs/crates/indexmap/features)\n  * [std](https://lib.rs/crates/indexmap/features#feature-std)\n  * [test_debug](https://lib.rs/crates/indexmap/features#feature-test_debug)\n\n\n  *[SLoC]: approx. additional lines of code\n",
              "markdown_with_citations": "###  42 stable releases\u27e81\u27e9\nnew 2.10.0 |  Jun 26, 2025   \n---|---  \n2.8.0 |  Mar 10, 2025   \n2.7.0 |  Dec 1, 2024   \n2.6.0 |  Oct 1, 2024   \n0.4.1 |  Feb 14, 2018   \n#**2** in Data structures\u27e82\u27e9\nDownload history 7095952/week @ 2025-03-10 7727195/week @ 2025-03-17 7768582/week @ 2025-03-24 6915078/week @ 2025-03-31 7347342/week @ 2025-04-07 6593840/week @ 2025-04-14 6351523/week @ 2025-04-21 6250013/week @ 2025-04-28 6410191/week @ 2025-05-05 6623720/week @ 2025-05-12 6677976/week @ 2025-05-19 5876512/week @ 2025-05-26 6299683/week @ 2025-06-02 6825590/week @ 2025-06-09 7514296/week @ 2025-06-16 6900022/week @ 2025-06-23\n**27,878,242** downloads per month Used in **47,280** crates (2,860 directly)\u27e83\u27e9\n**Apache-2.0 OR MIT**\n405KB  8K  SLoC\n# indexmap\n![build status\u27e84\u27e9](https://github.com/indexmap-rs/indexmap/actions) ![crates.io\u27e85\u27e9](https://crates.io/crates/indexmap) ![docs\u27e86\u27e9](https://docs.rs/indexmap) ![rustc\u27e87\u27e9](https://img.shields.io/badge/rust-1.63%2B-orange.svg)\nA pure-Rust hash table which preserves (in a limited sense) insertion order.\nThis crate implements compact map and set data-structures, where the iteration order of the keys is independent from their hash or value. It preserves insertion order (except after removals), and it allows lookup of entries by either hash table key or numerical index.\nNote: this crate was originally released under the name ``ordermap``, but it was renamed to ``indexmap`` to better reflect its features. The ``ordermap``\u27e88\u27e9 crate now exists as a wrapper over ``indexmap`` with stronger ordering properties.\n# Background\nThis was inspired by Python 3.6's new dict implementation (which remembers the insertion order and is fast to iterate, and is compact in memory).\nSome of those features were translated to Rust, and some were not. The result was indexmap, a hash table that has following properties:\n  * Order is **independent of hash function** and hash values of keys.\n  * Fast to iterate.\n  * Indexed in compact space.\n  * Preserves insertion order **as long** as you don't call ```.``remove``(``)```, ```.``swap_remove``(``)```, or other methods that explicitly change order. The alternate ```.``shift_remove``(``)``` does preserve relative order.\n  * Uses hashbrown for the inner table, just like Rust's libstd ``HashMap`` does.\n\n\n## Performance\n``IndexMap`` derives a couple of performance facts directly from how it is constructed, which is roughly:\n> A raw hash table of key-value indices, and a vector of key-value pairs.\n  * Iteration is very fast since it is on the dense key-values.\n  * Removal is fast since it moves memory areas only in the table, and uses a single swap in the vector.\n  * Lookup is fast-ish because the initial 7-bit hash lookup uses SIMD, and indices are densely stored. Lookup also is slow-ish since the actual key-value pairs are stored separately. (Visible when cpu caches size is limiting.)\n  * In practice, ``IndexMap`` has been tested out as the hashmap in rustc in PR45282\u27e89\u27e9 and the performance was roughly on par across the whole workload.\n  * If you want the properties of ``IndexMap``, or its strongest performance points fits your workload, it might be the best hash table implementation.\n\n\n# Recent Changes\nSee RELEASES.md\u27e810\u27e9.\n#### Dependencies\n~0.5\u20131.3MB  ~22K SLoC\n  *  optional \u27e811\u27e9 arbitrary\u27e812\u27e9\n  *  optional \u27e813\u27e9 borsh\u27e814\u27e9 1.2\n  * equivalent\u27e815\u27e9\n  * hashbrown\u27e816\u27e9 0.15\n  *  optional \u27e817\u27e9 quickcheck\u27e818\u27e9 1.0\n  *  optional \u27e819\u27e9 rayon\u27e820\u27e9\n  *  optional \u27e821\u27e9 serde\u27e822\u27e9\n\n\n  * dev  fastrand\u27e823\u27e9\n  * dev  fnv\u27e824\u27e9\n  * dev  itertools\u27e825\u27e9 0.14\n  * dev  serde_derive\u27e826\u27e9\n\n\n#### Other features\u27e827\u27e9\n  * std\u27e828\u27e9\n  * test_debug\u27e829\u27e9\n\n\n  *[SLoC]: approx. additional lines of code\n",
              "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://lib.rs/crates/indexmap/versions: 42 stable releases\n\u27e82\u27e9 https://lib.rs/data-structures: Rust implementations of particular ways of organizing data suited for specific purposes. - Data structures\n\u27e83\u27e9 https://lib.rs/crates/indexmap/rev: **47,280** crates (2,860 directly)\n\u27e84\u27e9 https://img.gs/czjpqfbdkz/full/https://github.com/indexmap-rs/indexmap/actions/workflows/ci.yml/badge.svg?branch=main: ![build status\n\u27e85\u27e9 https://img.shields.io/crates/v/indexmap.svg: ![crates.io\n\u27e86\u27e9 https://img.gs/czjpqfbdkz/full/https://docs.rs/indexmap/badge.svg: ![docs\n\u27e87\u27e9 https://img.shields.io/badge/rust-1.63%2B-orange.svg: ![rustc\n\u27e88\u27e9 https://lib.rs/crates/ordermap: ``ordermap``\n\u27e89\u27e9 https://github.com/rust-lang/rust/pull/45282: PR45282\n\u27e810\u27e9 https://github.com/indexmap-rs/indexmap/blob/main/RELEASES.md: RELEASES.md\n\u27e811\u27e9 https://lib.rs/crates/indexmap/features#feature-arbitrary: arbitrary is optional feature -  optional \n\u27e812\u27e9 https://lib.rs/crates/arbitrary: 1.0 - arbitrary\n\u27e813\u27e9 https://lib.rs/crates/indexmap/features#feature-borsh: borsh is optional feature -  optional \n\u27e814\u27e9 https://lib.rs/crates/borsh: new - borsh\n\u27e815\u27e9 https://lib.rs/crates/equivalent: 1.0 - equivalent\n\u27e816\u27e9 https://lib.rs/crates/hashbrown: new - hashbrown\n\u27e817\u27e9 https://lib.rs/crates/indexmap/features#feature-quickcheck: quickcheck is optional feature -  optional \n\u27e818\u27e9 https://lib.rs/crates/quickcheck: new - quickcheck\n\u27e819\u27e9 https://lib.rs/crates/indexmap/features#feature-rayon: rayon is optional feature -  optional \n\u27e820\u27e9 https://lib.rs/crates/rayon: 1.9 - rayon\n\u27e821\u27e9 https://lib.rs/crates/indexmap/features#feature-serde: serde is optional feature -  optional \n\u27e822\u27e9 https://lib.rs/crates/serde: 1.0 - serde\n\u27e823\u27e9 https://lib.rs/crates/fastrand: 2 - fastrand\n\u27e824\u27e9 https://lib.rs/crates/fnv: 1.0 - fnv\n\u27e825\u27e9 https://lib.rs/crates/itertools: new - itertools\n\u27e826\u27e9 https://lib.rs/crates/serde_derive: 1.0 - serde_derive\n\u27e827\u27e9 https://lib.rs/crates/indexmap/features: Other features\n\u27e828\u27e9 https://lib.rs/crates/indexmap/features#feature-std: std\n\u27e829\u27e9 https://lib.rs/crates/indexmap/features#feature-test_debug: test_debug\n",
              "fit_markdown": "",
              "fit_html": ""
            },
            "structured_data": {},
            "quality_score": 3.0,
            "extraction_method": "crawl4ai",
            "error": null,
            "metadata": {
              "doc_type": "docs",
              "content_length": 5254,
              "has_structured_data": false,
              "crawl_success": true
            },
            "timestamp": "114611.7792747"
          }
        },
        "crate_analysis": {
          "status": "completed",
          "check": [
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#equivalent@1.0.2",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\equivalent-1.0.2\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "equivalent",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\equivalent-1.0.2\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmptxz8ecov\\indexmap-2.10.0\\target\\debug\\deps\\libequivalent-ebd39031dcab7414.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#hashbrown@0.15.4",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\hashbrown-0.15.4\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "hashbrown",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\hashbrown-0.15.4\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmptxz8ecov\\indexmap-2.10.0\\target\\debug\\deps\\libhashbrown-a043e0c8c3e2aece.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmptxz8ecov/indexmap-2.10.0#indexmap@2.10.0",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmptxz8ecov\\indexmap-2.10.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "indexmap",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmptxz8ecov\\indexmap-2.10.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmptxz8ecov\\indexmap-2.10.0\\target\\debug\\deps\\libindexmap-c984f1e82c0ccf15.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "build-finished",
              "success": true
            }
          ],
          "clippy": [
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#hashbrown@0.15.4",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\hashbrown-0.15.4\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "hashbrown",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\hashbrown-0.15.4\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmptxz8ecov\\indexmap-2.10.0\\target\\debug\\deps\\libhashbrown-a043e0c8c3e2aece.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#equivalent@1.0.2",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\equivalent-1.0.2\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "equivalent",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\equivalent-1.0.2\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmptxz8ecov\\indexmap-2.10.0\\target\\debug\\deps\\libequivalent-ebd39031dcab7414.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmptxz8ecov/indexmap-2.10.0#indexmap@2.10.0",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmptxz8ecov\\indexmap-2.10.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "indexmap",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmptxz8ecov\\indexmap-2.10.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmptxz8ecov\\indexmap-2.10.0\\target\\debug\\deps\\libindexmap-2a66df90a46a2dd3.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "build-finished",
              "success": true
            }
          ],
          "audit": {
            "database": {
              "advisory-count": 787,
              "last-commit": "7573f55ba337263f61167dbb0ea926cdc7c8eb5d",
              "last-updated": "2025-06-17T11:04:25+02:00"
            },
            "lockfile": {
              "dependency-count": 28
            },
            "settings": {
              "target_arch": [],
              "target_os": [],
              "severity": null,
              "ignore": [],
              "informational_warnings": [
                "unmaintained",
                "unsound",
                "notice"
              ]
            },
            "vulnerabilities": {
              "found": false,
              "count": 0,
              "list": []
            },
            "warnings": {}
          },
          "note": "Crate analysis performed with stable toolchain."
        },
        "crate_metadata": {
          "name": "indexmap",
          "version": "2.10.0",
          "description": "ALLOW: Positive community sentiment",
          "repository": "",
          "keywords": [],
          "categories": [],
          "readme": {
            "raw_markdown": "[](https://docs.rs/indexmap/latest/indexmap/all.html \"show sidebar\")\n# Crate indexmapCopy item path\n[Settings](https://docs.rs/indexmap/latest/settings.html)\n[Help](https://docs.rs/indexmap/latest/help.html)\nSummary[Source](https://docs.rs/indexmap/latest/src/indexmap/lib.rs.html#2-288)\nExpand description\n[`IndexMap`](https://docs.rs/indexmap/latest/indexmap/map/struct.IndexMap.html \"struct indexmap::map::IndexMap\") is a hash table where the iteration order of the key-value pairs is independent of the hash values of the keys.\n[`IndexSet`](https://docs.rs/indexmap/latest/indexmap/set/struct.IndexSet.html \"struct indexmap::set::IndexSet\") is a corresponding hash set using the same implementation and with similar properties.\n#### [\u00a7](https://docs.rs/indexmap/latest/indexmap/#highlights)Highlights\n[`IndexMap`](https://docs.rs/indexmap/latest/indexmap/map/struct.IndexMap.html \"struct indexmap::map::IndexMap\") and [`IndexSet`](https://docs.rs/indexmap/latest/indexmap/set/struct.IndexSet.html \"struct indexmap::set::IndexSet\") are drop-in compatible with the std `HashMap` and `HashSet`, but they also have some features of note:\n  * The ordering semantics (see their documentation for details)\n  * Sorting methods and the [`.pop()`](https://docs.rs/indexmap/latest/indexmap/map/struct.IndexMap.html#method.pop \"method indexmap::map::IndexMap::pop\") methods.\n  * The [`Equivalent`](https://docs.rs/indexmap/latest/indexmap/trait.Equivalent.html \"trait indexmap::Equivalent\") trait, which offers more flexible equality definitions between borrowed and owned versions of keys.\n  * The [`MutableKeys`](https://docs.rs/indexmap/latest/indexmap/map/trait.MutableKeys.html \"trait indexmap::map::MutableKeys\") trait, which gives opt-in mutable access to map keys, and [`MutableValues`](https://docs.rs/indexmap/latest/indexmap/set/trait.MutableValues.html \"trait indexmap::set::MutableValues\") for sets.\n\n\n#### [\u00a7](https://docs.rs/indexmap/latest/indexmap/#feature-flags)Feature Flags\nTo reduce the amount of compiled code in the crate by default, certain features are gated behind [feature flags](https://doc.rust-lang.org/cargo/reference/manifest.html#the-features-section). These allow you to opt in to (or out of) functionality. Below is a list of the features available in this crate.\n  * `std`: Enables features which require the Rust standard library. For more information see the section on [`no_std`](https://docs.rs/indexmap/latest/indexmap/#no-standard-library-targets).\n  * `rayon`: Enables parallel iteration and other parallel methods.\n  * `serde`: Adds implementations for [`Serialize`](https://docs.rs/serde/1.0.219/x86_64-unknown-linux-gnu/serde/ser/trait.Serialize.html \"trait serde::ser::Serialize\") and [`Deserialize`](https://docs.rs/serde/1.0.219/x86_64-unknown-linux-gnu/serde/de/trait.Deserialize.html \"trait serde::de::Deserialize\") to [`IndexMap`](https://docs.rs/indexmap/latest/indexmap/map/struct.IndexMap.html \"struct indexmap::map::IndexMap\") and [`IndexSet`](https://docs.rs/indexmap/latest/indexmap/set/struct.IndexSet.html \"struct indexmap::set::IndexSet\"). Alternative implementations for (de)serializing [`IndexMap`](https://docs.rs/indexmap/latest/indexmap/map/struct.IndexMap.html \"struct indexmap::map::IndexMap\") as an ordered sequence are available in the [`map::serde_seq`](https://docs.rs/indexmap/latest/indexmap/map/serde_seq/index.html \"mod indexmap::map::serde_seq\") module.\n  * `arbitrary`: Adds implementations for the [`arbitrary::Arbitrary`](https://docs.rs/arbitrary/1.4.1/x86_64-unknown-linux-gnu/arbitrary/trait.Arbitrary.html \"trait arbitrary::Arbitrary\") trait to [`IndexMap`](https://docs.rs/indexmap/latest/indexmap/map/struct.IndexMap.html \"struct indexmap::map::IndexMap\") and [`IndexSet`](https://docs.rs/indexmap/latest/indexmap/set/struct.IndexSet.html \"struct indexmap::set::IndexSet\").\n  * `quickcheck`: Adds implementations for the [`quickcheck::Arbitrary`](https://docs.rs/quickcheck/1.0.3/x86_64-unknown-linux-gnu/quickcheck/arbitrary/trait.Arbitrary.html \"trait quickcheck::arbitrary::Arbitrary\") trait to [`IndexMap`](https://docs.rs/indexmap/latest/indexmap/map/struct.IndexMap.html \"struct indexmap::map::IndexMap\") and [`IndexSet`](https://docs.rs/indexmap/latest/indexmap/set/struct.IndexSet.html \"struct indexmap::set::IndexSet\").\n  * `borsh` (**deprecated**): Adds implementations for [`BorshSerialize`](https://docs.rs/borsh/1.5.7/x86_64-unknown-linux-gnu/borsh/ser/trait.BorshSerialize.html \"trait borsh::ser::BorshSerialize\") and [`BorshDeserialize`](https://docs.rs/borsh/1.5.7/x86_64-unknown-linux-gnu/borsh/de/trait.BorshDeserialize.html \"trait borsh::de::BorshDeserialize\") to [`IndexMap`](https://docs.rs/indexmap/latest/indexmap/map/struct.IndexMap.html \"struct indexmap::map::IndexMap\") and [`IndexSet`](https://docs.rs/indexmap/latest/indexmap/set/struct.IndexSet.html \"struct indexmap::set::IndexSet\"). Due to a cyclic dependency that arose between [`borsh`](https://docs.rs/borsh/1.5.7/x86_64-unknown-linux-gnu/borsh/index.html \"mod borsh\") and `indexmap`, `borsh v1.5.6` added an `indexmap` feature that should be used instead of enabling the feature here.\n\n\n_Note: only the`std` feature is enabled by default._\n#### [\u00a7](https://docs.rs/indexmap/latest/indexmap/#alternate-hashers)Alternate Hashers\n[`IndexMap`](https://docs.rs/indexmap/latest/indexmap/map/struct.IndexMap.html \"struct indexmap::map::IndexMap\") and [`IndexSet`](https://docs.rs/indexmap/latest/indexmap/set/struct.IndexSet.html \"struct indexmap::set::IndexSet\") have a default hasher type [`S = RandomState`](https://doc.rust-lang.org/nightly/std/hash/random/struct.RandomState.html \"struct std::hash::random::RandomState\"), just like the standard `HashMap` and `HashSet`, which is resistant to HashDoS attacks but not the most performant. Type aliases can make it easier to use alternate hashers:\n```\nuse fnv::FnvBuildHasher;\nuse indexmap::{IndexMap, IndexSet};\ntype FnvIndexMap<K, V> = IndexMap<K, V, FnvBuildHasher>;\ntype FnvIndexSet<T> = IndexSet<T, FnvBuildHasher>;\nlet std: IndexSet<i32> = (0..100).collect();\nlet fnv: FnvIndexSet<i32> = (0..100).collect();\nassert_eq!(std, fnv);\n```\n\n#### [\u00a7](https://docs.rs/indexmap/latest/indexmap/#rust-version)Rust Version\nThis version of indexmap requires Rust 1.63 or later.\nThe indexmap 2.x release series will use a carefully considered version upgrade policy, where in a later 2.x version, we will raise the minimum required Rust version.\n### [\u00a7](https://docs.rs/indexmap/latest/indexmap/#no-standard-library-targets)No Standard Library Targets\nThis crate supports being built without `std`, requiring `alloc` instead. This is chosen by disabling the default \u201cstd\u201d cargo feature, by adding `default-features = false` to your dependency specification.\n  * Creating maps and sets using [`new`](https://docs.rs/indexmap/latest/indexmap/map/struct.IndexMap.html#method.new \"associated function indexmap::map::IndexMap::new\") and [`with_capacity`](https://docs.rs/indexmap/latest/indexmap/map/struct.IndexMap.html#method.with_capacity \"associated function indexmap::map::IndexMap::with_capacity\") is unavailable without `std`. Use methods [`IndexMap::default`](https://docs.rs/indexmap/latest/indexmap/map/struct.IndexMap.html#method.default \"associated function indexmap::map::IndexMap::default\"), [`with_hasher`](https://docs.rs/indexmap/latest/indexmap/map/struct.IndexMap.html#method.with_hasher \"associated function indexmap::map::IndexMap::with_hasher\"), [`with_capacity_and_hasher`](https://docs.rs/indexmap/latest/indexmap/map/struct.IndexMap.html#method.with_capacity_and_hasher \"associated function indexmap::map::IndexMap::with_capacity_and_hasher\") instead. A no-std compatible hasher will be needed as well, for example from the crate `twox-hash`.\n  * Macros [`indexmap!`](https://docs.rs/indexmap/latest/indexmap/macro.indexmap.html \"macro indexmap::indexmap\") and [`indexset!`](https://docs.rs/indexmap/latest/indexmap/macro.indexset.html \"macro indexmap::indexset\") are unavailable without `std`. Use the macros [`indexmap_with_default!`](https://docs.rs/indexmap/latest/indexmap/macro.indexmap_with_default.html \"macro indexmap::indexmap_with_default\") and [`indexset_with_default!`](https://docs.rs/indexmap/latest/indexmap/macro.indexset_with_default.html \"macro indexmap::indexset_with_default\") instead.\n\n\n## Re-exports[\u00a7](https://docs.rs/indexmap/latest/indexmap/#reexports)\n\n`pub use crate::map::IndexMap[](https://docs.rs/indexmap/latest/indexmap/map/struct.IndexMap.html \"struct indexmap::map::IndexMap\");`\n\n\n`pub use crate::set::IndexSet[](https://docs.rs/indexmap/latest/indexmap/set/struct.IndexSet.html \"struct indexmap::set::IndexSet\");`\n\n## Modules[\u00a7](https://docs.rs/indexmap/latest/indexmap/#modules)\n\n[map](https://docs.rs/indexmap/latest/indexmap/map/index.html \"mod indexmap::map\")\n    [`IndexMap`](https://docs.rs/indexmap/latest/indexmap/map/struct.IndexMap.html \"struct indexmap::map::IndexMap\") is a hash table where the iteration order of the key-value pairs is independent of the hash values of the keys.\n\n[set](https://docs.rs/indexmap/latest/indexmap/set/index.html \"mod indexmap::set\")\n    A hash set implemented using [`IndexMap`](https://docs.rs/indexmap/latest/indexmap/map/struct.IndexMap.html \"struct indexmap::map::IndexMap\")\n## Macros[\u00a7](https://docs.rs/indexmap/latest/indexmap/#macros)\n\n[indexmap](https://docs.rs/indexmap/latest/indexmap/macro.indexmap.html \"macro indexmap::indexmap\")`std`\n    Create an [`IndexMap`](https://docs.rs/indexmap/latest/indexmap/map/struct.IndexMap.html \"struct indexmap::map::IndexMap\") from a list of key-value pairs\n\n[indexmap_with_default](https://docs.rs/indexmap/latest/indexmap/macro.indexmap_with_default.html \"macro indexmap::indexmap_with_default\")\n    Create an [`IndexMap`](https://docs.rs/indexmap/latest/indexmap/map/struct.IndexMap.html \"struct indexmap::map::IndexMap\") from a list of key-value pairs and a [`BuildHasherDefault`](https://doc.rust-lang.org/nightly/core/hash/struct.BuildHasherDefault.html \"struct core::hash::BuildHasherDefault\")-wrapped custom hasher.\n\n[indexset](https://docs.rs/indexmap/latest/indexmap/macro.indexset.html \"macro indexmap::indexset\")`std`\n    Create an [`IndexSet`](https://docs.rs/indexmap/latest/indexmap/set/struct.IndexSet.html \"struct indexmap::set::IndexSet\") from a list of values\n\n[indexset_with_default](https://docs.rs/indexmap/latest/indexmap/macro.indexset_with_default.html \"macro indexmap::indexset_with_default\")\n    Create an [`IndexSet`](https://docs.rs/indexmap/latest/indexmap/set/struct.IndexSet.html \"struct indexmap::set::IndexSet\") from a list of values and a [`BuildHasherDefault`](https://doc.rust-lang.org/nightly/core/hash/struct.BuildHasherDefault.html \"struct core::hash::BuildHasherDefault\")-wrapped custom hasher.\n## Structs[\u00a7](https://docs.rs/indexmap/latest/indexmap/#structs)\n\n[TryReserveError](https://docs.rs/indexmap/latest/indexmap/struct.TryReserveError.html \"struct indexmap::TryReserveError\")\n    The error type for [`try_reserve`](https://docs.rs/indexmap/latest/indexmap/map/struct.IndexMap.html#method.try_reserve \"method indexmap::map::IndexMap::try_reserve\") methods.\n## Enums[\u00a7](https://docs.rs/indexmap/latest/indexmap/#enums)\n\n[GetDisjointMutError](https://docs.rs/indexmap/latest/indexmap/enum.GetDisjointMutError.html \"enum indexmap::GetDisjointMutError\")\n    The error type returned by [`get_disjoint_indices_mut`](https://docs.rs/indexmap/latest/indexmap/map/struct.IndexMap.html#method.get_disjoint_indices_mut \"method indexmap::map::IndexMap::get_disjoint_indices_mut\").\n## Traits[\u00a7](https://docs.rs/indexmap/latest/indexmap/#traits)\n\n[Equivalent](https://docs.rs/indexmap/latest/indexmap/trait.Equivalent.html \"trait indexmap::Equivalent\")\n    Key equivalence trait.\n",
            "markdown_with_citations": "[](https://docs.rs/indexmap/latest/indexmap/all.html \"show sidebar\")\n# Crate indexmapCopy item path\nSettings\u27e81\u27e9\nHelp\u27e82\u27e9\nSummarySource\u27e83\u27e9\nExpand description\n`IndexMap`\u27e84\u27e9 is a hash table where the iteration order of the key-value pairs is independent of the hash values of the keys.\n`IndexSet`\u27e85\u27e9 is a corresponding hash set using the same implementation and with similar properties.\n#### \u00a7\u27e86\u27e9Highlights\n`IndexMap`\u27e84\u27e9 and `IndexSet`\u27e85\u27e9 are drop-in compatible with the std `HashMap` and `HashSet`, but they also have some features of note:\n  * The ordering semantics (see their documentation for details)\n  * Sorting methods and the `.pop()`\u27e87\u27e9 methods.\n  * The `Equivalent`\u27e88\u27e9 trait, which offers more flexible equality definitions between borrowed and owned versions of keys.\n  * The `MutableKeys`\u27e89\u27e9 trait, which gives opt-in mutable access to map keys, and `MutableValues`\u27e810\u27e9 for sets.\n\n\n#### \u00a7\u27e811\u27e9Feature Flags\nTo reduce the amount of compiled code in the crate by default, certain features are gated behind feature flags\u27e812\u27e9. These allow you to opt in to (or out of) functionality. Below is a list of the features available in this crate.\n  * `std`: Enables features which require the Rust standard library. For more information see the section on `no_std`\u27e813\u27e9.\n  * `rayon`: Enables parallel iteration and other parallel methods.\n  * `serde`: Adds implementations for `Serialize`\u27e814\u27e9 and `Deserialize`\u27e815\u27e9 to `IndexMap`\u27e84\u27e9 and `IndexSet`\u27e85\u27e9. Alternative implementations for (de)serializing `IndexMap`\u27e84\u27e9 as an ordered sequence are available in the `map::serde_seq`\u27e816\u27e9 module.\n  * `arbitrary`: Adds implementations for the `arbitrary::Arbitrary`\u27e817\u27e9 trait to `IndexMap`\u27e84\u27e9 and `IndexSet`\u27e85\u27e9.\n  * `quickcheck`: Adds implementations for the `quickcheck::Arbitrary`\u27e818\u27e9 trait to `IndexMap`\u27e84\u27e9 and `IndexSet`\u27e85\u27e9.\n  * `borsh` (**deprecated**): Adds implementations for `BorshSerialize`\u27e819\u27e9 and `BorshDeserialize`\u27e820\u27e9 to `IndexMap`\u27e84\u27e9 and `IndexSet`\u27e85\u27e9. Due to a cyclic dependency that arose between `borsh`\u27e821\u27e9 and `indexmap`, `borsh v1.5.6` added an `indexmap` feature that should be used instead of enabling the feature here.\n\n\n_Note: only the`std` feature is enabled by default._\n#### \u00a7\u27e822\u27e9Alternate Hashers\n`IndexMap`\u27e84\u27e9 and `IndexSet`\u27e85\u27e9 have a default hasher type `S = RandomState`\u27e823\u27e9, just like the standard `HashMap` and `HashSet`, which is resistant to HashDoS attacks but not the most performant. Type aliases can make it easier to use alternate hashers:\n```\nuse fnv::FnvBuildHasher;\nuse indexmap::{IndexMap, IndexSet};\ntype FnvIndexMap<K, V> = IndexMap<K, V, FnvBuildHasher>;\ntype FnvIndexSet<T> = IndexSet<T, FnvBuildHasher>;\nlet std: IndexSet<i32> = (0..100).collect();\nlet fnv: FnvIndexSet<i32> = (0..100).collect();\nassert_eq!(std, fnv);\n```\n\n#### \u00a7\u27e824\u27e9Rust Version\nThis version of indexmap requires Rust 1.63 or later.\nThe indexmap 2.x release series will use a carefully considered version upgrade policy, where in a later 2.x version, we will raise the minimum required Rust version.\n### \u00a7\u27e813\u27e9No Standard Library Targets\nThis crate supports being built without `std`, requiring `alloc` instead. This is chosen by disabling the default \u201cstd\u201d cargo feature, by adding `default-features = false` to your dependency specification.\n  * Creating maps and sets using `new`\u27e825\u27e9 and `with_capacity`\u27e826\u27e9 is unavailable without `std`. Use methods `IndexMap::default`\u27e827\u27e9, `with_hasher`\u27e828\u27e9, `with_capacity_and_hasher`\u27e829\u27e9 instead. A no-std compatible hasher will be needed as well, for example from the crate `twox-hash`.\n  * Macros `indexmap!`\u27e830\u27e9 and `indexset!`\u27e831\u27e9 are unavailable without `std`. Use the macros `indexmap_with_default!`\u27e832\u27e9 and `indexset_with_default!`\u27e833\u27e9 instead.\n\n\n## Re-exports\u00a7\u27e834\u27e9\n\n`pub use crate::map::IndexMap[](https://docs.rs/indexmap/latest/indexmap/map/struct.IndexMap.html \"struct indexmap::map::IndexMap\");`\n\n\n`pub use crate::set::IndexSet[](https://docs.rs/indexmap/latest/indexmap/set/struct.IndexSet.html \"struct indexmap::set::IndexSet\");`\n\n## Modules\u00a7\u27e835\u27e9\n\nmap\u27e836\u27e9\n    `IndexMap`\u27e84\u27e9 is a hash table where the iteration order of the key-value pairs is independent of the hash values of the keys.\n\nset\u27e837\u27e9\n    A hash set implemented using `IndexMap`\u27e84\u27e9\n## Macros\u00a7\u27e838\u27e9\n\nindexmap\u27e830\u27e9`std`\n    Create an `IndexMap`\u27e84\u27e9 from a list of key-value pairs\n\nindexmap_with_default\u27e832\u27e9\n    Create an `IndexMap`\u27e84\u27e9 from a list of key-value pairs and a `BuildHasherDefault`\u27e839\u27e9-wrapped custom hasher.\n\nindexset\u27e831\u27e9`std`\n    Create an `IndexSet`\u27e85\u27e9 from a list of values\n\nindexset_with_default\u27e833\u27e9\n    Create an `IndexSet`\u27e85\u27e9 from a list of values and a `BuildHasherDefault`\u27e839\u27e9-wrapped custom hasher.\n## Structs\u00a7\u27e840\u27e9\n\nTryReserveError\u27e841\u27e9\n    The error type for `try_reserve`\u27e842\u27e9 methods.\n## Enums\u00a7\u27e843\u27e9\n\nGetDisjointMutError\u27e844\u27e9\n    The error type returned by `get_disjoint_indices_mut`\u27e845\u27e9.\n## Traits\u00a7\u27e846\u27e9\n\nEquivalent\u27e88\u27e9\n    Key equivalence trait.\n",
            "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://docs.rs/indexmap/latest/settings.html: Settings\n\u27e82\u27e9 https://docs.rs/indexmap/latest/help.html: Help\n\u27e83\u27e9 https://docs.rs/indexmap/latest/src/indexmap/lib.rs.html#2-288: Source\n\u27e84\u27e9 https://docs.rs/indexmap/latest/indexmap/map/struct.IndexMap.html: struct indexmap::map::IndexMap - `IndexMap`\n\u27e85\u27e9 https://docs.rs/indexmap/latest/indexmap/set/struct.IndexSet.html: struct indexmap::set::IndexSet - `IndexSet`\n\u27e86\u27e9 https://docs.rs/indexmap/latest/indexmap/#highlights: \u00a7\n\u27e87\u27e9 https://docs.rs/indexmap/latest/indexmap/map/struct.IndexMap.html#method.pop: method indexmap::map::IndexMap::pop - `.pop()`\n\u27e88\u27e9 https://docs.rs/indexmap/latest/indexmap/trait.Equivalent.html: trait indexmap::Equivalent - `Equivalent`\n\u27e89\u27e9 https://docs.rs/indexmap/latest/indexmap/map/trait.MutableKeys.html: trait indexmap::map::MutableKeys - `MutableKeys`\n\u27e810\u27e9 https://docs.rs/indexmap/latest/indexmap/set/trait.MutableValues.html: trait indexmap::set::MutableValues - `MutableValues`\n\u27e811\u27e9 https://docs.rs/indexmap/latest/indexmap/#feature-flags: \u00a7\n\u27e812\u27e9 https://doc.rust-lang.org/cargo/reference/manifest.html#the-features-section: feature flags\n\u27e813\u27e9 https://docs.rs/indexmap/latest/indexmap/#no-standard-library-targets: `no_std`\n\u27e814\u27e9 https://docs.rs/serde/1.0.219/x86_64-unknown-linux-gnu/serde/ser/trait.Serialize.html: trait serde::ser::Serialize - `Serialize`\n\u27e815\u27e9 https://docs.rs/serde/1.0.219/x86_64-unknown-linux-gnu/serde/de/trait.Deserialize.html: trait serde::de::Deserialize - `Deserialize`\n\u27e816\u27e9 https://docs.rs/indexmap/latest/indexmap/map/serde_seq/index.html: mod indexmap::map::serde_seq - `map::serde_seq`\n\u27e817\u27e9 https://docs.rs/arbitrary/1.4.1/x86_64-unknown-linux-gnu/arbitrary/trait.Arbitrary.html: trait arbitrary::Arbitrary - `arbitrary::Arbitrary`\n\u27e818\u27e9 https://docs.rs/quickcheck/1.0.3/x86_64-unknown-linux-gnu/quickcheck/arbitrary/trait.Arbitrary.html: trait quickcheck::arbitrary::Arbitrary - `quickcheck::Arbitrary`\n\u27e819\u27e9 https://docs.rs/borsh/1.5.7/x86_64-unknown-linux-gnu/borsh/ser/trait.BorshSerialize.html: trait borsh::ser::BorshSerialize - `BorshSerialize`\n\u27e820\u27e9 https://docs.rs/borsh/1.5.7/x86_64-unknown-linux-gnu/borsh/de/trait.BorshDeserialize.html: trait borsh::de::BorshDeserialize - `BorshDeserialize`\n\u27e821\u27e9 https://docs.rs/borsh/1.5.7/x86_64-unknown-linux-gnu/borsh/index.html: mod borsh - `borsh`\n\u27e822\u27e9 https://docs.rs/indexmap/latest/indexmap/#alternate-hashers: \u00a7\n\u27e823\u27e9 https://doc.rust-lang.org/nightly/std/hash/random/struct.RandomState.html: struct std::hash::random::RandomState - `S = RandomState`\n\u27e824\u27e9 https://docs.rs/indexmap/latest/indexmap/#rust-version: \u00a7\n\u27e825\u27e9 https://docs.rs/indexmap/latest/indexmap/map/struct.IndexMap.html#method.new: associated function indexmap::map::IndexMap::new - `new`\n\u27e826\u27e9 https://docs.rs/indexmap/latest/indexmap/map/struct.IndexMap.html#method.with_capacity: associated function indexmap::map::IndexMap::with_capacity - `with_capacity`\n\u27e827\u27e9 https://docs.rs/indexmap/latest/indexmap/map/struct.IndexMap.html#method.default: associated function indexmap::map::IndexMap::default - `IndexMap::default`\n\u27e828\u27e9 https://docs.rs/indexmap/latest/indexmap/map/struct.IndexMap.html#method.with_hasher: associated function indexmap::map::IndexMap::with_hasher - `with_hasher`\n\u27e829\u27e9 https://docs.rs/indexmap/latest/indexmap/map/struct.IndexMap.html#method.with_capacity_and_hasher: associated function indexmap::map::IndexMap::with_capacity_and_hasher - `with_capacity_and_hasher`\n\u27e830\u27e9 https://docs.rs/indexmap/latest/indexmap/macro.indexmap.html: macro indexmap::indexmap - `indexmap!`\n\u27e831\u27e9 https://docs.rs/indexmap/latest/indexmap/macro.indexset.html: macro indexmap::indexset - `indexset!`\n\u27e832\u27e9 https://docs.rs/indexmap/latest/indexmap/macro.indexmap_with_default.html: macro indexmap::indexmap_with_default - `indexmap_with_default!`\n\u27e833\u27e9 https://docs.rs/indexmap/latest/indexmap/macro.indexset_with_default.html: macro indexmap::indexset_with_default - `indexset_with_default!`\n\u27e834\u27e9 https://docs.rs/indexmap/latest/indexmap/#reexports: \u00a7\n\u27e835\u27e9 https://docs.rs/indexmap/latest/indexmap/#modules: \u00a7\n\u27e836\u27e9 https://docs.rs/indexmap/latest/indexmap/map/index.html: mod indexmap::map - map\n\u27e837\u27e9 https://docs.rs/indexmap/latest/indexmap/set/index.html: mod indexmap::set - set\n\u27e838\u27e9 https://docs.rs/indexmap/latest/indexmap/#macros: \u00a7\n\u27e839\u27e9 https://doc.rust-lang.org/nightly/core/hash/struct.BuildHasherDefault.html: struct core::hash::BuildHasherDefault - `BuildHasherDefault`\n\u27e840\u27e9 https://docs.rs/indexmap/latest/indexmap/#structs: \u00a7\n\u27e841\u27e9 https://docs.rs/indexmap/latest/indexmap/struct.TryReserveError.html: struct indexmap::TryReserveError - TryReserveError\n\u27e842\u27e9 https://docs.rs/indexmap/latest/indexmap/map/struct.IndexMap.html#method.try_reserve: method indexmap::map::IndexMap::try_reserve - `try_reserve`\n\u27e843\u27e9 https://docs.rs/indexmap/latest/indexmap/#enums: \u00a7\n\u27e844\u27e9 https://docs.rs/indexmap/latest/indexmap/enum.GetDisjointMutError.html: enum indexmap::GetDisjointMutError - GetDisjointMutError\n\u27e845\u27e9 https://docs.rs/indexmap/latest/indexmap/map/struct.IndexMap.html#method.get_disjoint_indices_mut: method indexmap::map::IndexMap::get_disjoint_indices_mut - `get_disjoint_indices_mut`\n\u27e846\u27e9 https://docs.rs/indexmap/latest/indexmap/#traits: \u00a7\n",
            "fit_markdown": "",
            "fit_html": ""
          },
          "downloads": 0,
          "github_stars": 0,
          "dependencies": [],
          "features": {},
          "code_snippets": [],
          "readme_sections": {},
          "librs_downloads": null,
          "source": "crates.io",
          "enhanced_scraping": {},
          "enhanced_features": [],
          "enhanced_dependencies": []
        },
        "enriched_crate": {
          "name": "indexmap",
          "version": "2.10.0",
          "description": "ALLOW: Positive community sentiment",
          "repository": "",
          "keywords": [],
          "categories": [],
          "readme": {
            "raw_markdown": "[](https://docs.rs/indexmap/latest/indexmap/all.html \"show sidebar\")\n# Crate indexmapCopy item path\n[Settings](https://docs.rs/indexmap/latest/settings.html)\n[Help](https://docs.rs/indexmap/latest/help.html)\nSummary[Source](https://docs.rs/indexmap/latest/src/indexmap/lib.rs.html#2-288)\nExpand description\n[`IndexMap`](https://docs.rs/indexmap/latest/indexmap/map/struct.IndexMap.html \"struct indexmap::map::IndexMap\") is a hash table where the iteration order of the key-value pairs is independent of the hash values of the keys.\n[`IndexSet`](https://docs.rs/indexmap/latest/indexmap/set/struct.IndexSet.html \"struct indexmap::set::IndexSet\") is a corresponding hash set using the same implementation and with similar properties.\n#### [\u00a7](https://docs.rs/indexmap/latest/indexmap/#highlights)Highlights\n[`IndexMap`](https://docs.rs/indexmap/latest/indexmap/map/struct.IndexMap.html \"struct indexmap::map::IndexMap\") and [`IndexSet`](https://docs.rs/indexmap/latest/indexmap/set/struct.IndexSet.html \"struct indexmap::set::IndexSet\") are drop-in compatible with the std `HashMap` and `HashSet`, but they also have some features of note:\n  * The ordering semantics (see their documentation for details)\n  * Sorting methods and the [`.pop()`](https://docs.rs/indexmap/latest/indexmap/map/struct.IndexMap.html#method.pop \"method indexmap::map::IndexMap::pop\") methods.\n  * The [`Equivalent`](https://docs.rs/indexmap/latest/indexmap/trait.Equivalent.html \"trait indexmap::Equivalent\") trait, which offers more flexible equality definitions between borrowed and owned versions of keys.\n  * The [`MutableKeys`](https://docs.rs/indexmap/latest/indexmap/map/trait.MutableKeys.html \"trait indexmap::map::MutableKeys\") trait, which gives opt-in mutable access to map keys, and [`MutableValues`](https://docs.rs/indexmap/latest/indexmap/set/trait.MutableValues.html \"trait indexmap::set::MutableValues\") for sets.\n\n\n#### [\u00a7](https://docs.rs/indexmap/latest/indexmap/#feature-flags)Feature Flags\nTo reduce the amount of compiled code in the crate by default, certain features are gated behind [feature flags](https://doc.rust-lang.org/cargo/reference/manifest.html#the-features-section). These allow you to opt in to (or out of) functionality. Below is a list of the features available in this crate.\n  * `std`: Enables features which require the Rust standard library. For more information see the section on [`no_std`](https://docs.rs/indexmap/latest/indexmap/#no-standard-library-targets).\n  * `rayon`: Enables parallel iteration and other parallel methods.\n  * `serde`: Adds implementations for [`Serialize`](https://docs.rs/serde/1.0.219/x86_64-unknown-linux-gnu/serde/ser/trait.Serialize.html \"trait serde::ser::Serialize\") and [`Deserialize`](https://docs.rs/serde/1.0.219/x86_64-unknown-linux-gnu/serde/de/trait.Deserialize.html \"trait serde::de::Deserialize\") to [`IndexMap`](https://docs.rs/indexmap/latest/indexmap/map/struct.IndexMap.html \"struct indexmap::map::IndexMap\") and [`IndexSet`](https://docs.rs/indexmap/latest/indexmap/set/struct.IndexSet.html \"struct indexmap::set::IndexSet\"). Alternative implementations for (de)serializing [`IndexMap`](https://docs.rs/indexmap/latest/indexmap/map/struct.IndexMap.html \"struct indexmap::map::IndexMap\") as an ordered sequence are available in the [`map::serde_seq`](https://docs.rs/indexmap/latest/indexmap/map/serde_seq/index.html \"mod indexmap::map::serde_seq\") module.\n  * `arbitrary`: Adds implementations for the [`arbitrary::Arbitrary`](https://docs.rs/arbitrary/1.4.1/x86_64-unknown-linux-gnu/arbitrary/trait.Arbitrary.html \"trait arbitrary::Arbitrary\") trait to [`IndexMap`](https://docs.rs/indexmap/latest/indexmap/map/struct.IndexMap.html \"struct indexmap::map::IndexMap\") and [`IndexSet`](https://docs.rs/indexmap/latest/indexmap/set/struct.IndexSet.html \"struct indexmap::set::IndexSet\").\n  * `quickcheck`: Adds implementations for the [`quickcheck::Arbitrary`](https://docs.rs/quickcheck/1.0.3/x86_64-unknown-linux-gnu/quickcheck/arbitrary/trait.Arbitrary.html \"trait quickcheck::arbitrary::Arbitrary\") trait to [`IndexMap`](https://docs.rs/indexmap/latest/indexmap/map/struct.IndexMap.html \"struct indexmap::map::IndexMap\") and [`IndexSet`](https://docs.rs/indexmap/latest/indexmap/set/struct.IndexSet.html \"struct indexmap::set::IndexSet\").\n  * `borsh` (**deprecated**): Adds implementations for [`BorshSerialize`](https://docs.rs/borsh/1.5.7/x86_64-unknown-linux-gnu/borsh/ser/trait.BorshSerialize.html \"trait borsh::ser::BorshSerialize\") and [`BorshDeserialize`](https://docs.rs/borsh/1.5.7/x86_64-unknown-linux-gnu/borsh/de/trait.BorshDeserialize.html \"trait borsh::de::BorshDeserialize\") to [`IndexMap`](https://docs.rs/indexmap/latest/indexmap/map/struct.IndexMap.html \"struct indexmap::map::IndexMap\") and [`IndexSet`](https://docs.rs/indexmap/latest/indexmap/set/struct.IndexSet.html \"struct indexmap::set::IndexSet\"). Due to a cyclic dependency that arose between [`borsh`](https://docs.rs/borsh/1.5.7/x86_64-unknown-linux-gnu/borsh/index.html \"mod borsh\") and `indexmap`, `borsh v1.5.6` added an `indexmap` feature that should be used instead of enabling the feature here.\n\n\n_Note: only the`std` feature is enabled by default._\n#### [\u00a7](https://docs.rs/indexmap/latest/indexmap/#alternate-hashers)Alternate Hashers\n[`IndexMap`](https://docs.rs/indexmap/latest/indexmap/map/struct.IndexMap.html \"struct indexmap::map::IndexMap\") and [`IndexSet`](https://docs.rs/indexmap/latest/indexmap/set/struct.IndexSet.html \"struct indexmap::set::IndexSet\") have a default hasher type [`S = RandomState`](https://doc.rust-lang.org/nightly/std/hash/random/struct.RandomState.html \"struct std::hash::random::RandomState\"), just like the standard `HashMap` and `HashSet`, which is resistant to HashDoS attacks but not the most performant. Type aliases can make it easier to use alternate hashers:\n```\nuse fnv::FnvBuildHasher;\nuse indexmap::{IndexMap, IndexSet};\ntype FnvIndexMap<K, V> = IndexMap<K, V, FnvBuildHasher>;\ntype FnvIndexSet<T> = IndexSet<T, FnvBuildHasher>;\nlet std: IndexSet<i32> = (0..100).collect();\nlet fnv: FnvIndexSet<i32> = (0..100).collect();\nassert_eq!(std, fnv);\n```\n\n#### [\u00a7](https://docs.rs/indexmap/latest/indexmap/#rust-version)Rust Version\nThis version of indexmap requires Rust 1.63 or later.\nThe indexmap 2.x release series will use a carefully considered version upgrade policy, where in a later 2.x version, we will raise the minimum required Rust version.\n### [\u00a7](https://docs.rs/indexmap/latest/indexmap/#no-standard-library-targets)No Standard Library Targets\nThis crate supports being built without `std`, requiring `alloc` instead. This is chosen by disabling the default \u201cstd\u201d cargo feature, by adding `default-features = false` to your dependency specification.\n  * Creating maps and sets using [`new`](https://docs.rs/indexmap/latest/indexmap/map/struct.IndexMap.html#method.new \"associated function indexmap::map::IndexMap::new\") and [`with_capacity`](https://docs.rs/indexmap/latest/indexmap/map/struct.IndexMap.html#method.with_capacity \"associated function indexmap::map::IndexMap::with_capacity\") is unavailable without `std`. Use methods [`IndexMap::default`](https://docs.rs/indexmap/latest/indexmap/map/struct.IndexMap.html#method.default \"associated function indexmap::map::IndexMap::default\"), [`with_hasher`](https://docs.rs/indexmap/latest/indexmap/map/struct.IndexMap.html#method.with_hasher \"associated function indexmap::map::IndexMap::with_hasher\"), [`with_capacity_and_hasher`](https://docs.rs/indexmap/latest/indexmap/map/struct.IndexMap.html#method.with_capacity_and_hasher \"associated function indexmap::map::IndexMap::with_capacity_and_hasher\") instead. A no-std compatible hasher will be needed as well, for example from the crate `twox-hash`.\n  * Macros [`indexmap!`](https://docs.rs/indexmap/latest/indexmap/macro.indexmap.html \"macro indexmap::indexmap\") and [`indexset!`](https://docs.rs/indexmap/latest/indexmap/macro.indexset.html \"macro indexmap::indexset\") are unavailable without `std`. Use the macros [`indexmap_with_default!`](https://docs.rs/indexmap/latest/indexmap/macro.indexmap_with_default.html \"macro indexmap::indexmap_with_default\") and [`indexset_with_default!`](https://docs.rs/indexmap/latest/indexmap/macro.indexset_with_default.html \"macro indexmap::indexset_with_default\") instead.\n\n\n## Re-exports[\u00a7](https://docs.rs/indexmap/latest/indexmap/#reexports)\n\n`pub use crate::map::IndexMap[](https://docs.rs/indexmap/latest/indexmap/map/struct.IndexMap.html \"struct indexmap::map::IndexMap\");`\n\n\n`pub use crate::set::IndexSet[](https://docs.rs/indexmap/latest/indexmap/set/struct.IndexSet.html \"struct indexmap::set::IndexSet\");`\n\n## Modules[\u00a7](https://docs.rs/indexmap/latest/indexmap/#modules)\n\n[map](https://docs.rs/indexmap/latest/indexmap/map/index.html \"mod indexmap::map\")\n    [`IndexMap`](https://docs.rs/indexmap/latest/indexmap/map/struct.IndexMap.html \"struct indexmap::map::IndexMap\") is a hash table where the iteration order of the key-value pairs is independent of the hash values of the keys.\n\n[set](https://docs.rs/indexmap/latest/indexmap/set/index.html \"mod indexmap::set\")\n    A hash set implemented using [`IndexMap`](https://docs.rs/indexmap/latest/indexmap/map/struct.IndexMap.html \"struct indexmap::map::IndexMap\")\n## Macros[\u00a7](https://docs.rs/indexmap/latest/indexmap/#macros)\n\n[indexmap](https://docs.rs/indexmap/latest/indexmap/macro.indexmap.html \"macro indexmap::indexmap\")`std`\n    Create an [`IndexMap`](https://docs.rs/indexmap/latest/indexmap/map/struct.IndexMap.html \"struct indexmap::map::IndexMap\") from a list of key-value pairs\n\n[indexmap_with_default](https://docs.rs/indexmap/latest/indexmap/macro.indexmap_with_default.html \"macro indexmap::indexmap_with_default\")\n    Create an [`IndexMap`](https://docs.rs/indexmap/latest/indexmap/map/struct.IndexMap.html \"struct indexmap::map::IndexMap\") from a list of key-value pairs and a [`BuildHasherDefault`](https://doc.rust-lang.org/nightly/core/hash/struct.BuildHasherDefault.html \"struct core::hash::BuildHasherDefault\")-wrapped custom hasher.\n\n[indexset](https://docs.rs/indexmap/latest/indexmap/macro.indexset.html \"macro indexmap::indexset\")`std`\n    Create an [`IndexSet`](https://docs.rs/indexmap/latest/indexmap/set/struct.IndexSet.html \"struct indexmap::set::IndexSet\") from a list of values\n\n[indexset_with_default](https://docs.rs/indexmap/latest/indexmap/macro.indexset_with_default.html \"macro indexmap::indexset_with_default\")\n    Create an [`IndexSet`](https://docs.rs/indexmap/latest/indexmap/set/struct.IndexSet.html \"struct indexmap::set::IndexSet\") from a list of values and a [`BuildHasherDefault`](https://doc.rust-lang.org/nightly/core/hash/struct.BuildHasherDefault.html \"struct core::hash::BuildHasherDefault\")-wrapped custom hasher.\n## Structs[\u00a7](https://docs.rs/indexmap/latest/indexmap/#structs)\n\n[TryReserveError](https://docs.rs/indexmap/latest/indexmap/struct.TryReserveError.html \"struct indexmap::TryReserveError\")\n    The error type for [`try_reserve`](https://docs.rs/indexmap/latest/indexmap/map/struct.IndexMap.html#method.try_reserve \"method indexmap::map::IndexMap::try_reserve\") methods.\n## Enums[\u00a7](https://docs.rs/indexmap/latest/indexmap/#enums)\n\n[GetDisjointMutError](https://docs.rs/indexmap/latest/indexmap/enum.GetDisjointMutError.html \"enum indexmap::GetDisjointMutError\")\n    The error type returned by [`get_disjoint_indices_mut`](https://docs.rs/indexmap/latest/indexmap/map/struct.IndexMap.html#method.get_disjoint_indices_mut \"method indexmap::map::IndexMap::get_disjoint_indices_mut\").\n## Traits[\u00a7](https://docs.rs/indexmap/latest/indexmap/#traits)\n\n[Equivalent](https://docs.rs/indexmap/latest/indexmap/trait.Equivalent.html \"trait indexmap::Equivalent\")\n    Key equivalence trait.\n",
            "markdown_with_citations": "[](https://docs.rs/indexmap/latest/indexmap/all.html \"show sidebar\")\n# Crate indexmapCopy item path\nSettings\u27e81\u27e9\nHelp\u27e82\u27e9\nSummarySource\u27e83\u27e9\nExpand description\n`IndexMap`\u27e84\u27e9 is a hash table where the iteration order of the key-value pairs is independent of the hash values of the keys.\n`IndexSet`\u27e85\u27e9 is a corresponding hash set using the same implementation and with similar properties.\n#### \u00a7\u27e86\u27e9Highlights\n`IndexMap`\u27e84\u27e9 and `IndexSet`\u27e85\u27e9 are drop-in compatible with the std `HashMap` and `HashSet`, but they also have some features of note:\n  * The ordering semantics (see their documentation for details)\n  * Sorting methods and the `.pop()`\u27e87\u27e9 methods.\n  * The `Equivalent`\u27e88\u27e9 trait, which offers more flexible equality definitions between borrowed and owned versions of keys.\n  * The `MutableKeys`\u27e89\u27e9 trait, which gives opt-in mutable access to map keys, and `MutableValues`\u27e810\u27e9 for sets.\n\n\n#### \u00a7\u27e811\u27e9Feature Flags\nTo reduce the amount of compiled code in the crate by default, certain features are gated behind feature flags\u27e812\u27e9. These allow you to opt in to (or out of) functionality. Below is a list of the features available in this crate.\n  * `std`: Enables features which require the Rust standard library. For more information see the section on `no_std`\u27e813\u27e9.\n  * `rayon`: Enables parallel iteration and other parallel methods.\n  * `serde`: Adds implementations for `Serialize`\u27e814\u27e9 and `Deserialize`\u27e815\u27e9 to `IndexMap`\u27e84\u27e9 and `IndexSet`\u27e85\u27e9. Alternative implementations for (de)serializing `IndexMap`\u27e84\u27e9 as an ordered sequence are available in the `map::serde_seq`\u27e816\u27e9 module.\n  * `arbitrary`: Adds implementations for the `arbitrary::Arbitrary`\u27e817\u27e9 trait to `IndexMap`\u27e84\u27e9 and `IndexSet`\u27e85\u27e9.\n  * `quickcheck`: Adds implementations for the `quickcheck::Arbitrary`\u27e818\u27e9 trait to `IndexMap`\u27e84\u27e9 and `IndexSet`\u27e85\u27e9.\n  * `borsh` (**deprecated**): Adds implementations for `BorshSerialize`\u27e819\u27e9 and `BorshDeserialize`\u27e820\u27e9 to `IndexMap`\u27e84\u27e9 and `IndexSet`\u27e85\u27e9. Due to a cyclic dependency that arose between `borsh`\u27e821\u27e9 and `indexmap`, `borsh v1.5.6` added an `indexmap` feature that should be used instead of enabling the feature here.\n\n\n_Note: only the`std` feature is enabled by default._\n#### \u00a7\u27e822\u27e9Alternate Hashers\n`IndexMap`\u27e84\u27e9 and `IndexSet`\u27e85\u27e9 have a default hasher type `S = RandomState`\u27e823\u27e9, just like the standard `HashMap` and `HashSet`, which is resistant to HashDoS attacks but not the most performant. Type aliases can make it easier to use alternate hashers:\n```\nuse fnv::FnvBuildHasher;\nuse indexmap::{IndexMap, IndexSet};\ntype FnvIndexMap<K, V> = IndexMap<K, V, FnvBuildHasher>;\ntype FnvIndexSet<T> = IndexSet<T, FnvBuildHasher>;\nlet std: IndexSet<i32> = (0..100).collect();\nlet fnv: FnvIndexSet<i32> = (0..100).collect();\nassert_eq!(std, fnv);\n```\n\n#### \u00a7\u27e824\u27e9Rust Version\nThis version of indexmap requires Rust 1.63 or later.\nThe indexmap 2.x release series will use a carefully considered version upgrade policy, where in a later 2.x version, we will raise the minimum required Rust version.\n### \u00a7\u27e813\u27e9No Standard Library Targets\nThis crate supports being built without `std`, requiring `alloc` instead. This is chosen by disabling the default \u201cstd\u201d cargo feature, by adding `default-features = false` to your dependency specification.\n  * Creating maps and sets using `new`\u27e825\u27e9 and `with_capacity`\u27e826\u27e9 is unavailable without `std`. Use methods `IndexMap::default`\u27e827\u27e9, `with_hasher`\u27e828\u27e9, `with_capacity_and_hasher`\u27e829\u27e9 instead. A no-std compatible hasher will be needed as well, for example from the crate `twox-hash`.\n  * Macros `indexmap!`\u27e830\u27e9 and `indexset!`\u27e831\u27e9 are unavailable without `std`. Use the macros `indexmap_with_default!`\u27e832\u27e9 and `indexset_with_default!`\u27e833\u27e9 instead.\n\n\n## Re-exports\u00a7\u27e834\u27e9\n\n`pub use crate::map::IndexMap[](https://docs.rs/indexmap/latest/indexmap/map/struct.IndexMap.html \"struct indexmap::map::IndexMap\");`\n\n\n`pub use crate::set::IndexSet[](https://docs.rs/indexmap/latest/indexmap/set/struct.IndexSet.html \"struct indexmap::set::IndexSet\");`\n\n## Modules\u00a7\u27e835\u27e9\n\nmap\u27e836\u27e9\n    `IndexMap`\u27e84\u27e9 is a hash table where the iteration order of the key-value pairs is independent of the hash values of the keys.\n\nset\u27e837\u27e9\n    A hash set implemented using `IndexMap`\u27e84\u27e9\n## Macros\u00a7\u27e838\u27e9\n\nindexmap\u27e830\u27e9`std`\n    Create an `IndexMap`\u27e84\u27e9 from a list of key-value pairs\n\nindexmap_with_default\u27e832\u27e9\n    Create an `IndexMap`\u27e84\u27e9 from a list of key-value pairs and a `BuildHasherDefault`\u27e839\u27e9-wrapped custom hasher.\n\nindexset\u27e831\u27e9`std`\n    Create an `IndexSet`\u27e85\u27e9 from a list of values\n\nindexset_with_default\u27e833\u27e9\n    Create an `IndexSet`\u27e85\u27e9 from a list of values and a `BuildHasherDefault`\u27e839\u27e9-wrapped custom hasher.\n## Structs\u00a7\u27e840\u27e9\n\nTryReserveError\u27e841\u27e9\n    The error type for `try_reserve`\u27e842\u27e9 methods.\n## Enums\u00a7\u27e843\u27e9\n\nGetDisjointMutError\u27e844\u27e9\n    The error type returned by `get_disjoint_indices_mut`\u27e845\u27e9.\n## Traits\u00a7\u27e846\u27e9\n\nEquivalent\u27e88\u27e9\n    Key equivalence trait.\n",
            "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://docs.rs/indexmap/latest/settings.html: Settings\n\u27e82\u27e9 https://docs.rs/indexmap/latest/help.html: Help\n\u27e83\u27e9 https://docs.rs/indexmap/latest/src/indexmap/lib.rs.html#2-288: Source\n\u27e84\u27e9 https://docs.rs/indexmap/latest/indexmap/map/struct.IndexMap.html: struct indexmap::map::IndexMap - `IndexMap`\n\u27e85\u27e9 https://docs.rs/indexmap/latest/indexmap/set/struct.IndexSet.html: struct indexmap::set::IndexSet - `IndexSet`\n\u27e86\u27e9 https://docs.rs/indexmap/latest/indexmap/#highlights: \u00a7\n\u27e87\u27e9 https://docs.rs/indexmap/latest/indexmap/map/struct.IndexMap.html#method.pop: method indexmap::map::IndexMap::pop - `.pop()`\n\u27e88\u27e9 https://docs.rs/indexmap/latest/indexmap/trait.Equivalent.html: trait indexmap::Equivalent - `Equivalent`\n\u27e89\u27e9 https://docs.rs/indexmap/latest/indexmap/map/trait.MutableKeys.html: trait indexmap::map::MutableKeys - `MutableKeys`\n\u27e810\u27e9 https://docs.rs/indexmap/latest/indexmap/set/trait.MutableValues.html: trait indexmap::set::MutableValues - `MutableValues`\n\u27e811\u27e9 https://docs.rs/indexmap/latest/indexmap/#feature-flags: \u00a7\n\u27e812\u27e9 https://doc.rust-lang.org/cargo/reference/manifest.html#the-features-section: feature flags\n\u27e813\u27e9 https://docs.rs/indexmap/latest/indexmap/#no-standard-library-targets: `no_std`\n\u27e814\u27e9 https://docs.rs/serde/1.0.219/x86_64-unknown-linux-gnu/serde/ser/trait.Serialize.html: trait serde::ser::Serialize - `Serialize`\n\u27e815\u27e9 https://docs.rs/serde/1.0.219/x86_64-unknown-linux-gnu/serde/de/trait.Deserialize.html: trait serde::de::Deserialize - `Deserialize`\n\u27e816\u27e9 https://docs.rs/indexmap/latest/indexmap/map/serde_seq/index.html: mod indexmap::map::serde_seq - `map::serde_seq`\n\u27e817\u27e9 https://docs.rs/arbitrary/1.4.1/x86_64-unknown-linux-gnu/arbitrary/trait.Arbitrary.html: trait arbitrary::Arbitrary - `arbitrary::Arbitrary`\n\u27e818\u27e9 https://docs.rs/quickcheck/1.0.3/x86_64-unknown-linux-gnu/quickcheck/arbitrary/trait.Arbitrary.html: trait quickcheck::arbitrary::Arbitrary - `quickcheck::Arbitrary`\n\u27e819\u27e9 https://docs.rs/borsh/1.5.7/x86_64-unknown-linux-gnu/borsh/ser/trait.BorshSerialize.html: trait borsh::ser::BorshSerialize - `BorshSerialize`\n\u27e820\u27e9 https://docs.rs/borsh/1.5.7/x86_64-unknown-linux-gnu/borsh/de/trait.BorshDeserialize.html: trait borsh::de::BorshDeserialize - `BorshDeserialize`\n\u27e821\u27e9 https://docs.rs/borsh/1.5.7/x86_64-unknown-linux-gnu/borsh/index.html: mod borsh - `borsh`\n\u27e822\u27e9 https://docs.rs/indexmap/latest/indexmap/#alternate-hashers: \u00a7\n\u27e823\u27e9 https://doc.rust-lang.org/nightly/std/hash/random/struct.RandomState.html: struct std::hash::random::RandomState - `S = RandomState`\n\u27e824\u27e9 https://docs.rs/indexmap/latest/indexmap/#rust-version: \u00a7\n\u27e825\u27e9 https://docs.rs/indexmap/latest/indexmap/map/struct.IndexMap.html#method.new: associated function indexmap::map::IndexMap::new - `new`\n\u27e826\u27e9 https://docs.rs/indexmap/latest/indexmap/map/struct.IndexMap.html#method.with_capacity: associated function indexmap::map::IndexMap::with_capacity - `with_capacity`\n\u27e827\u27e9 https://docs.rs/indexmap/latest/indexmap/map/struct.IndexMap.html#method.default: associated function indexmap::map::IndexMap::default - `IndexMap::default`\n\u27e828\u27e9 https://docs.rs/indexmap/latest/indexmap/map/struct.IndexMap.html#method.with_hasher: associated function indexmap::map::IndexMap::with_hasher - `with_hasher`\n\u27e829\u27e9 https://docs.rs/indexmap/latest/indexmap/map/struct.IndexMap.html#method.with_capacity_and_hasher: associated function indexmap::map::IndexMap::with_capacity_and_hasher - `with_capacity_and_hasher`\n\u27e830\u27e9 https://docs.rs/indexmap/latest/indexmap/macro.indexmap.html: macro indexmap::indexmap - `indexmap!`\n\u27e831\u27e9 https://docs.rs/indexmap/latest/indexmap/macro.indexset.html: macro indexmap::indexset - `indexset!`\n\u27e832\u27e9 https://docs.rs/indexmap/latest/indexmap/macro.indexmap_with_default.html: macro indexmap::indexmap_with_default - `indexmap_with_default!`\n\u27e833\u27e9 https://docs.rs/indexmap/latest/indexmap/macro.indexset_with_default.html: macro indexmap::indexset_with_default - `indexset_with_default!`\n\u27e834\u27e9 https://docs.rs/indexmap/latest/indexmap/#reexports: \u00a7\n\u27e835\u27e9 https://docs.rs/indexmap/latest/indexmap/#modules: \u00a7\n\u27e836\u27e9 https://docs.rs/indexmap/latest/indexmap/map/index.html: mod indexmap::map - map\n\u27e837\u27e9 https://docs.rs/indexmap/latest/indexmap/set/index.html: mod indexmap::set - set\n\u27e838\u27e9 https://docs.rs/indexmap/latest/indexmap/#macros: \u00a7\n\u27e839\u27e9 https://doc.rust-lang.org/nightly/core/hash/struct.BuildHasherDefault.html: struct core::hash::BuildHasherDefault - `BuildHasherDefault`\n\u27e840\u27e9 https://docs.rs/indexmap/latest/indexmap/#structs: \u00a7\n\u27e841\u27e9 https://docs.rs/indexmap/latest/indexmap/struct.TryReserveError.html: struct indexmap::TryReserveError - TryReserveError\n\u27e842\u27e9 https://docs.rs/indexmap/latest/indexmap/map/struct.IndexMap.html#method.try_reserve: method indexmap::map::IndexMap::try_reserve - `try_reserve`\n\u27e843\u27e9 https://docs.rs/indexmap/latest/indexmap/#enums: \u00a7\n\u27e844\u27e9 https://docs.rs/indexmap/latest/indexmap/enum.GetDisjointMutError.html: enum indexmap::GetDisjointMutError - GetDisjointMutError\n\u27e845\u27e9 https://docs.rs/indexmap/latest/indexmap/map/struct.IndexMap.html#method.get_disjoint_indices_mut: method indexmap::map::IndexMap::get_disjoint_indices_mut - `get_disjoint_indices_mut`\n\u27e846\u27e9 https://docs.rs/indexmap/latest/indexmap/#traits: \u00a7\n",
            "fit_markdown": "",
            "fit_html": ""
          },
          "downloads": 0,
          "github_stars": 0,
          "dependencies": [],
          "features": {},
          "code_snippets": [],
          "readme_sections": {},
          "librs_downloads": null,
          "source": "crates.io",
          "enhanced_scraping": {},
          "enhanced_features": [],
          "enhanced_dependencies": [],
          "readme_summary": "The `indexmap` crate provides `IndexMap` and `IndexSet`, hash table implementations that preserve insertion order while offering drop-in compatibility with Rust's standard `HashMap` and `HashSet`. Key features include ordering semantics, sorting methods, mutable key/value access, and support for alternate hashers. It also includes optional features like parallel iteration (`rayon`), serialization (`serde`), and compatibility with `no_std` environments.",
          "feature_summary": null,
          "use_case": "Utilities",
          "score": 7.0,
          "factual_counterfactual": "### Pair 1: Feature Flags  \n\u2705 Factual: The `indexmap` crate supports the `serde` feature flag, allowing serialization and deserialization of `IndexMap` and `IndexSet` using Serde.  \n\u274c Counterfactual: The `serde` feature flag is enabled by default in the `indexmap` crate, so serialization and deserialization work out-of-the-box.  \n\n---\n\n### Pair 2: Ordering Semantics  \n\u2705 Factual: `IndexMap` preserves the insertion order of key-value pairs, making it useful for scenarios where predictable iteration order is required.  \n\u274c Counterfactual: `IndexMap` uses a random iteration order for key-value pairs, similar to the standard `HashMap`.  \n\n---\n\n### Pair 3: Compatibility with `HashMap`  \n\u2705 Factual: `IndexMap` is drop-in compatible with the standard library's `HashMap`, allowing developers to replace `HashMap` with `IndexMap` without major code changes.  \n\u274c Counterfactual: `IndexMap` requires significant code modifications to replace `HashMap` due to differences in API design.",
          "source_analysis": null,
          "user_behavior": null,
          "security": null
        }
      },
      "irl_score": 8.6,
      "execution_id": "exec-dbf529c6-6553de48-1751260820",
      "timestamp": "2025-06-30T05:20:20.701889+00:00",
      "canon_version": "1.3.0"
    },
    "rule_zero_compliant": true
  }
]