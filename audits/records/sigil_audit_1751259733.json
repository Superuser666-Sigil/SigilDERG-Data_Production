[
  {
    "execution_id": "exec-bec60e9f-2cc351b1-1751259719",
    "timestamp": "2025-06-30T05:01:59.769234+00:00",
    "sacred_chain": {
      "input_data": "snafu",
      "context_sources": [
        "crates.io",
        "github.com",
        "lib.rs",
        "docs.rs"
      ],
      "reasoning_steps": [
        "Input canonicalized: 'snafu' -> 'snafu'",
        "Context gathered from 4 validated sources",
        "Metadata extracted: 4 fields",
        "Documentation analyzed: quality 7.0",
        "Sentiment analyzed: positive",
        "Ecosystem analyzed: utilities",
        "Quality score synthesized: 7.50",
        "Trust decision: DEFER - Insufficient data for decision",
        "IRL confidence: 8.600"
      ],
      "suggestion": "ALLOW: Positive community sentiment",
      "verdict": "DEFER",
      "audit_info": {
        "metadata": {
          "name": "snafu",
          "type": "rust_crate",
          "source": "manual_input",
          "extraction_method": "irl_engine"
        },
        "sentiment": {
          "quality_score": 7.0,
          "completeness": 0.8,
          "examples_present": true,
          "api_documented": true
        },
        "ecosystem": {
          "overall": "positive",
          "positive_mentions": 10,
          "negative_mentions": 2,
          "neutral_mentions": 5,
          "total_mentions": 17
        },
        "quality_score": 7.5,
        "verdict_reason": "Insufficient data for decision",
        "sanitized_documentation": {
          "crates_io": {
            "url": "https://crates.io/crates/snafu",
            "title": "snafu v0.8.6",
            "content": {
              "raw_markdown": "#  snafu v0.8.6\nAn ergonomic error handling library \n  * [ #ergonomic ](https://crates.io/keywords/ergonomic)\n  * [ #error ](https://crates.io/keywords/error)\n  * [ #library ](https://crates.io/keywords/library)\n  * [ #no_std ](https://crates.io/keywords/no_std)\n\n\n  * [ Readme ](https://crates.io/crates/snafu)\n  * [ 48 Versions ](https://crates.io/crates/snafu/versions)\n  * [ Dependencies ](https://crates.io/crates/snafu/dependencies)\n  * [ Dependents ](https://crates.io/crates/snafu/reverse_dependencies)\n\n\n## Metadata\nabout 1 month ago \nv1.56.0 \n[ MIT ](https://choosealicense.com/licenses/mit) OR [ Apache-2.0 ](https://choosealicense.com/licenses/apache-2.0)\n71.8 KiB \n## Install\nRun the following Cargo command in your project directory:\ncargo add snafu\nOr add the following line to your Cargo.toml:\nsnafu = \"0.8.6\"\n## Documentation\n[ docs.rs/snafu ](https://docs.rs/snafu)\n## Repository\n[ github.com/shepmaster/snafu ](https://github.com/shepmaster/snafu)\n## Owners\n## Categories\n  * [No standard library](https://crates.io/categories/no-std)\n  * [Rust patterns](https://crates.io/categories/rust-patterns)\n\n\n[ Report crate ](https://crates.io/support?crate=snafu&inquire=crate-violation)\n### Stats Overview\n47,605,679 Downloads all time\n48 Versions published\n#### Downloads over the last 90 days\nDisplay as \nStacked \n  * Stacked \n  * Unstacked \n\n\nLoading\u2026\n",
              "markdown_with_citations": "#  snafu v0.8.6\nAn ergonomic error handling library \n  *  #ergonomic \u27e81\u27e9\n  *  #error \u27e82\u27e9\n  *  #library \u27e83\u27e9\n  *  #no_std \u27e84\u27e9\n\n\n  *  Readme \u27e85\u27e9\n  *  48 Versions \u27e86\u27e9\n  *  Dependencies \u27e87\u27e9\n  *  Dependents \u27e88\u27e9\n\n\n## Metadata\nabout 1 month ago \nv1.56.0 \n MIT \u27e89\u27e9 OR  Apache-2.0 \u27e810\u27e9\n71.8 KiB \n## Install\nRun the following Cargo command in your project directory:\ncargo add snafu\nOr add the following line to your Cargo.toml:\nsnafu = \"0.8.6\"\n## Documentation\n docs.rs/snafu \u27e811\u27e9\n## Repository\n github.com/shepmaster/snafu \u27e812\u27e9\n## Owners\n## Categories\n  * No standard library\u27e813\u27e9\n  * Rust patterns\u27e814\u27e9\n\n\n Report crate \u27e815\u27e9\n### Stats Overview\n47,605,679 Downloads all time\n48 Versions published\n#### Downloads over the last 90 days\nDisplay as \nStacked \n  * Stacked \n  * Unstacked \n\n\nLoading\u2026\n",
              "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://crates.io/keywords/ergonomic:  #ergonomic \n\u27e82\u27e9 https://crates.io/keywords/error:  #error \n\u27e83\u27e9 https://crates.io/keywords/library:  #library \n\u27e84\u27e9 https://crates.io/keywords/no_std:  #no_std \n\u27e85\u27e9 https://crates.io/crates/snafu:  Readme \n\u27e86\u27e9 https://crates.io/crates/snafu/versions:  48 Versions \n\u27e87\u27e9 https://crates.io/crates/snafu/dependencies:  Dependencies \n\u27e88\u27e9 https://crates.io/crates/snafu/reverse_dependencies:  Dependents \n\u27e89\u27e9 https://choosealicense.com/licenses/mit:  MIT \n\u27e810\u27e9 https://choosealicense.com/licenses/apache-2.0:  Apache-2.0 \n\u27e811\u27e9 https://docs.rs/snafu:  docs.rs/snafu \n\u27e812\u27e9 https://github.com/shepmaster/snafu:  github.com/shepmaster/snafu \n\u27e813\u27e9 https://crates.io/categories/no-std: No standard library\n\u27e814\u27e9 https://crates.io/categories/rust-patterns: Rust patterns\n\u27e815\u27e9 https://crates.io/support?crate=snafu&inquire=crate-violation:  Report crate \n",
              "fit_markdown": "",
              "fit_html": ""
            },
            "structured_data": {},
            "quality_score": 3.0,
            "extraction_method": "crawl4ai",
            "error": null,
            "metadata": {
              "doc_type": "docs",
              "content_length": 1368,
              "has_structured_data": false,
              "crawl_success": true
            },
            "timestamp": "113509.508799"
          },
          "docs_rs": {
            "url": "https://docs.rs/snafu",
            "title": "Crate snafuCopy item path",
            "content": {
              "raw_markdown": "[](https://docs.rs/snafu/latest/snafu/all.html \"show sidebar\")\n# Crate snafuCopy item path\n[Settings](https://docs.rs/snafu/latest/settings.html)\n[Help](https://docs.rs/snafu/latest/help.html)\nSummary[Source](https://docs.rs/snafu/latest/src/snafu/lib.rs.html#1-1680)\nExpand description\n## [\u00a7](https://docs.rs/snafu/latest/snafu/#snafu)SNAFU\nSNAFU is a library to easily generate errors and add information to underlying errors, especially when the same underlying error type can occur in different contexts.\nFor detailed information, please see the [`Snafu`](https://docs.rs/snafu/latest/snafu/derive.Snafu.html \"derive snafu::Snafu\") macro and the [user\u2019s guide](https://docs.rs/snafu/latest/snafu/guide/index.html \"mod snafu::guide\").\n### [\u00a7](https://docs.rs/snafu/latest/snafu/#features)Features\n  * [Turnkey errors based on strings](https://docs.rs/snafu/latest/snafu/struct.Whatever.html \"struct snafu::Whatever\")\n  * [Custom error types](https://docs.rs/snafu/latest/snafu/derive.Snafu.html \"derive snafu::Snafu\")\n    * Including a conversion path from turnkey errors\n  * [Backtraces](https://docs.rs/snafu/latest/snafu/struct.Backtrace.html \"struct snafu::Backtrace\")\n  * Extension traits for \n    * [`Results`](https://docs.rs/snafu/latest/snafu/trait.ResultExt.html \"trait snafu::ResultExt\")\n    * [`Options`](https://docs.rs/snafu/latest/snafu/trait.OptionExt.html \"trait snafu::OptionExt\")\n    * [`Futures`](https://docs.rs/snafu/latest/snafu/futures/trait.TryFutureExt.html \"trait snafu::futures::TryFutureExt\")\n    * [`Streams`](https://docs.rs/snafu/latest/snafu/futures/trait.TryStreamExt.html \"trait snafu::futures::TryStreamExt\")\n  * [Error reporting](https://docs.rs/snafu/latest/snafu/#reporting)\n  * Suitable for libraries and applications\n  * `no_std` compatibility\n  * Generic types and lifetimes\n\n\n### [\u00a7](https://docs.rs/snafu/latest/snafu/#quick-start)Quick start\nIf you want to report errors without hassle, start with the [`Whatever`](https://docs.rs/snafu/latest/snafu/struct.Whatever.html \"struct snafu::Whatever\") type and the [`whatever!`](https://docs.rs/snafu/latest/snafu/macro.whatever.html \"macro snafu::whatever\") macro:\n```\nuse snafu::{prelude::*, Whatever};\nfn is_valid_id(id: u16) -> Result<(), Whatever> {\n  if id < 10 {\n    whatever!(\"ID may not be less than 10, but it was {id}\");\n  }\n  Ok(())\n}\n```\n\nYou can also use it to wrap any other error:\n```\nuse snafu::{prelude::*, Whatever};\nfn read_config_file(path: &str) -> Result<String, Whatever> {\n  std::fs::read_to_string(path)\n    .with_whatever_context(|_| format!(\"Could not read file {path}\"))\n}\n```\n\n[`Whatever`](https://docs.rs/snafu/latest/snafu/struct.Whatever.html \"struct snafu::Whatever\") allows for a short message and tracks a [`Backtrace`](https://docs.rs/snafu/latest/snafu/struct.Backtrace.html \"struct snafu::Backtrace\") for every error:\n```\nuse snafu::{prelude::*, ErrorCompat, Whatever};\nif let Err(e) = returns_an_error() {\n  eprintln!(\"An error occurred: {e}\");\n  if let Some(bt) = ErrorCompat::backtrace(&e) {\n    eprintln!(\"{bt}\");\n  }\n}\n```\n\n### [\u00a7](https://docs.rs/snafu/latest/snafu/#custom-error-types)Custom error types\nMany projects will hit limitations of the `Whatever` type. When that occurs, it\u2019s time to create your own error type by deriving [`Snafu`](https://docs.rs/snafu/latest/snafu/derive.Snafu.html \"derive snafu::Snafu\")!\n#### [\u00a7](https://docs.rs/snafu/latest/snafu/#struct-style)Struct style\nSNAFU will read your error struct definition and create a _context selector_ type (called `InvalidIdSnafu` in this example). These context selectors are used with the [`ensure!`](https://docs.rs/snafu/latest/snafu/macro.ensure.html \"macro snafu::ensure\") macro to provide ergonomic error creation:\n```\nuse snafu::prelude::*;\n#[derive(Debug, Snafu)]\n#[snafu(display(\"ID may not be less than 10, but it was {id}\"))]\nstruct InvalidIdError {\n  id: u16,\n}\nfn is_valid_id(id: u16) -> Result<(), InvalidIdError> {\n  ensure!(id >= 10, InvalidIdSnafu { id });\n  Ok(())\n}\n```\n\nIf you add a `source` field to your error, you can then wrap an underlying error using the [`context`](https://docs.rs/snafu/latest/snafu/trait.ResultExt.html#tymethod.context \"method snafu::ResultExt::context\") extension method:\n```\nuse snafu::prelude::*;\n#[derive(Debug, Snafu)]\n#[snafu(display(\"Could not read file {path}\"))]\nstruct ConfigFileError {\n  source: std::io::Error,\n  path: String,\n}\nfn read_config_file(path: &str) -> Result<String, ConfigFileError> {\n  std::fs::read_to_string(path).context(ConfigFileSnafu { path })\n}\n```\n\n#### [\u00a7](https://docs.rs/snafu/latest/snafu/#enum-style)Enum style\nWhile error structs are good for constrained cases, they don\u2019t allow for reporting multiple possible kinds of errors at one time. Error enums solve that problem.\nSNAFU will read your error enum definition and create a _context selector_ type for each variant (called `InvalidIdSnafu` in this example). These context selectors are used with the [`ensure!`](https://docs.rs/snafu/latest/snafu/macro.ensure.html \"macro snafu::ensure\") macro to provide ergonomic error creation:\n```\nuse snafu::prelude::*;\n#[derive(Debug, Snafu)]\nenum Error {\n  #[snafu(display(\"ID may not be less than 10, but it was {id}\"))]\n  InvalidId { id: u16 },\n}\nfn is_valid_id(id: u16) -> Result<(), Error> {\n  ensure!(id >= 10, InvalidIdSnafu { id });\n  Ok(())\n}\n```\n\nIf you add a `source` field to a variant, you can then wrap an underlying error using the [`context`](https://docs.rs/snafu/latest/snafu/trait.ResultExt.html#tymethod.context \"method snafu::ResultExt::context\") extension method:\n```\nuse snafu::prelude::*;\n#[derive(Debug, Snafu)]\nenum Error {\n  #[snafu(display(\"Could not read file {path}\"))]\n  ConfigFile {\n    source: std::io::Error,\n    path: String,\n  },\n}\nfn read_config_file(path: &str) -> Result<String, Error> {\n  std::fs::read_to_string(path).context(ConfigFileSnafu { path })\n}\n```\n\nYou can combine the power of the [`whatever!`](https://docs.rs/snafu/latest/snafu/macro.whatever.html \"macro snafu::whatever\") macro with an enum error type. This is great if you started out with [`Whatever`](https://docs.rs/snafu/latest/snafu/struct.Whatever.html \"struct snafu::Whatever\") and are moving to a custom error type:\n```\nuse snafu::prelude::*;\n#[derive(Debug, Snafu)]\nenum Error {\n  #[snafu(display(\"ID may not be less than 10, but it was {id}\"))]\n  InvalidId { id: u16 },\n  #[snafu(whatever, display(\"{message}\"))]\n  Whatever {\n    message: String,\n    #[snafu(source(from(Box<dyn std::error::Error>, Some)))]\n    source: Option<Box<dyn std::error::Error>>,\n  },\n}\nfn is_valid_id(id: u16) -> Result<(), Error> {\n  ensure!(id >= 10, InvalidIdSnafu { id });\n  whatever!(\"Just kidding... this function always fails!\");\n  Ok(())\n}\n```\n\nYou may wish to make the type `Send` and/or `Sync`, allowing your error type to be used in multithreaded programs, by changing `dyn std::error::Error` to `dyn std::error::Error + Send + Sync`.\n### [\u00a7](https://docs.rs/snafu/latest/snafu/#reporting)Reporting\nPrinting an error via [`Display`](https://doc.rust-lang.org/nightly/core/fmt/trait.Display.html \"trait core::fmt::Display\") will only show the top-level error message without the underlying sources. For an extended error report, SNAFU offers a user-friendly error output mechanism. It prints the main error and all underlying errors in the chain, from the most recent to the oldest, plus the [backtrace](https://docs.rs/snafu/latest/snafu/struct.Backtrace.html \"struct snafu::Backtrace\") if applicable. This is done by using the [`report`](https://docs.rs/snafu/latest/snafu/attr.report.html \"attr snafu::report\") procedural macro or the [`Report`](https://docs.rs/snafu/latest/snafu/struct.Report.html \"struct snafu::Report\") type directly.\n```\nuse snafu::prelude::*;\n#[derive(Debug, Snafu)]\n#[snafu(display(\"Could not load configuration file {path}\"))]\nstruct ConfigFileError {\n  source: std::io::Error,\n  path: String,\n}\nfn read_config_file(path: &str) -> Result<String, ConfigFileError> {\n  std::fs::read_to_string(path).context(ConfigFileSnafu { path })\n}\n#[snafu::report]\nfn main() -> Result<(), ConfigFileError> {\n  read_config_file(\"bad-config.ini\")?;\n  Ok(())\n}\n```\n\nThis will print:\n```\nError: Could not load configuration file bad-config.ini\nCaused by this error:\n1: No such file or directory (os error 2)\n```\n\nWhich shows the underlying errors, unlike [`Display`](https://doc.rust-lang.org/nightly/core/fmt/trait.Display.html \"trait core::fmt::Display\"):\n```\nError: Could not load configuration file bad-config.ini\n```\n\n\u2026 and is also more readable than the [`Debug`](https://doc.rust-lang.org/nightly/core/fmt/trait.Debug.html \"trait core::fmt::Debug\") output:\n```\nError: ConfigFileError { source: Os { code: 2, kind: NotFound, message: \"No such file or directory\" }, path: \"bad-config.ini\" }\n```\n\n### [\u00a7](https://docs.rs/snafu/latest/snafu/#next-steps)Next steps\nRead the documentation for the [`Snafu`](https://docs.rs/snafu/latest/snafu/derive.Snafu.html \"derive snafu::Snafu\") macro to see all of the capabilities, then read the [user\u2019s guide](https://docs.rs/snafu/latest/snafu/guide/index.html \"mod snafu::guide\") for deeper understanding.\n## Modules[\u00a7](https://docs.rs/snafu/latest/snafu/#modules)\n\n[futures](https://docs.rs/snafu/latest/snafu/futures/index.html \"mod snafu::futures\")`futures`\n    Additions to the [`TryFuture`](https://docs.rs/futures-core/0.3.31/x86_64-unknown-linux-gnu/futures_core/future/trait.TryFuture.html \"trait futures_core::future::TryFuture\") and [`TryStream`](https://docs.rs/futures-core/0.3.31/x86_64-unknown-linux-gnu/futures_core/stream/trait.TryStream.html \"trait futures_core::stream::TryStream\") traits.\n\n[guide](https://docs.rs/snafu/latest/snafu/guide/index.html \"mod snafu::guide\")`guide`\n    SNAFU user\u2019s guide\n\n[prelude](https://docs.rs/snafu/latest/snafu/prelude/index.html \"mod snafu::prelude\")\n    Traits and macros used by most projects. Add `use snafu::prelude::*` to your code to quickly get started with SNAFU.\n## Macros[\u00a7](https://docs.rs/snafu/latest/snafu/#macros)\n\n[ensure](https://docs.rs/snafu/latest/snafu/macro.ensure.html \"macro snafu::ensure\")\n    Ensure a condition is true. If it is not, return from the function with an error.\n\n[ensure_whatever](https://docs.rs/snafu/latest/snafu/macro.ensure_whatever.html \"macro snafu::ensure_whatever\")`alloc`\n    Ensure a condition is true. If it is not, return a stringly-typed error message.\n\n[location](https://docs.rs/snafu/latest/snafu/macro.location.html \"macro snafu::location\")\n    Constructs a [`Location`](https://docs.rs/snafu/latest/snafu/struct.Location.html \"struct snafu::Location\") using the current file, line, and column.\n\n[whatever](https://docs.rs/snafu/latest/snafu/macro.whatever.html \"macro snafu::whatever\")`alloc`\n    Instantiate and return a stringly-typed error message.\n## Structs[\u00a7](https://docs.rs/snafu/latest/snafu/#structs)\n\n[Backtrace](https://docs.rs/snafu/latest/snafu/struct.Backtrace.html \"struct snafu::Backtrace\")\n    A captured OS thread stack backtrace.\n\n[ChainCompat](https://docs.rs/snafu/latest/snafu/struct.ChainCompat.html \"struct snafu::ChainCompat\")\n    An iterator over an Error and its sources.\n\n[CleanedErrorText](https://docs.rs/snafu/latest/snafu/struct.CleanedErrorText.html \"struct snafu::CleanedErrorText\")`alloc`\n    An iterator over an Error and its sources that removes duplicated text from the error display strings.\n\n[Location](https://docs.rs/snafu/latest/snafu/struct.Location.html \"struct snafu::Location\")\n    The source code location where the error was reported.\n\n[NoneError](https://docs.rs/snafu/latest/snafu/struct.NoneError.html \"struct snafu::NoneError\")\n    A temporary error type used when converting an [`Option`](https://doc.rust-lang.org/nightly/core/option/enum.Option.html \"enum core::option::Option\") into a [`Result`](https://doc.rust-lang.org/nightly/core/result/enum.Result.html \"enum core::result::Result\")\n\n[Report](https://docs.rs/snafu/latest/snafu/struct.Report.html \"struct snafu::Report\")\n    Opinionated solution to format an error in a user-friendly way. Useful as the return type from `main` and test functions.\n\n[Whatever](https://docs.rs/snafu/latest/snafu/struct.Whatever.html \"struct snafu::Whatever\")`alloc`\n    A basic error type that you can use as a first step to better error handling.\n## Traits[\u00a7](https://docs.rs/snafu/latest/snafu/#traits)\n\n[AsBacktrace](https://docs.rs/snafu/latest/snafu/trait.AsBacktrace.html \"trait snafu::AsBacktrace\")\n    View a backtrace-like value as an optional backtrace.\n\n[AsErrorSource](https://docs.rs/snafu/latest/snafu/trait.AsErrorSource.html \"trait snafu::AsErrorSource\")\n    Converts the receiver into an [`Error`](https://doc.rust-lang.org/nightly/core/error/trait.Error.html \"trait core::error::Error\") trait object, suitable for use in [`Error::source`](https://doc.rust-lang.org/nightly/core/error/trait.Error.html#method.source \"method core::error::Error::source\").\n\n[ErrorCompat](https://docs.rs/snafu/latest/snafu/trait.ErrorCompat.html \"trait snafu::ErrorCompat\")\n    Backports changes to the [`Error`](https://doc.rust-lang.org/nightly/core/error/trait.Error.html \"trait core::error::Error\") trait to versions of Rust lacking them.\n\n[FromString](https://docs.rs/snafu/latest/snafu/trait.FromString.html \"trait snafu::FromString\")`alloc`\n    Takes a string message and builds the corresponding error.\n\n[GenerateImplicitData](https://docs.rs/snafu/latest/snafu/trait.GenerateImplicitData.html \"trait snafu::GenerateImplicitData\")\n    Construct data to be included as part of an error. The data must require no arguments to be created.\n\n[IntoError](https://docs.rs/snafu/latest/snafu/trait.IntoError.html \"trait snafu::IntoError\")\n    Combines an underlying error with additional information about the error.\n\n[OptionExt](https://docs.rs/snafu/latest/snafu/trait.OptionExt.html \"trait snafu::OptionExt\")\n    Additions to [`Option`](https://doc.rust-lang.org/nightly/core/option/enum.Option.html \"enum core::option::Option\").\n\n[ResultExt](https://docs.rs/snafu/latest/snafu/trait.ResultExt.html \"trait snafu::ResultExt\")\n    Additions to [`Result`](https://doc.rust-lang.org/nightly/core/result/enum.Result.html \"enum core::result::Result\").\n## Attribute Macros[\u00a7](https://docs.rs/snafu/latest/snafu/#attributes)\n\n[report](https://docs.rs/snafu/latest/snafu/attr.report.html \"attr snafu::report\")\n    Adapts a function to provide user-friendly error output for `main` functions and tests.\n## Derive Macros[\u00a7](https://docs.rs/snafu/latest/snafu/#derives)\n\n[Snafu](https://docs.rs/snafu/latest/snafu/derive.Snafu.html \"derive snafu::Snafu\")\n    The `Snafu` macro is the entrypoint to defining your own error types. It is designed to require little configuration for the recommended and typical usecases while still offering flexibility for unique situations.\n",
              "markdown_with_citations": "[](https://docs.rs/snafu/latest/snafu/all.html \"show sidebar\")\n# Crate snafuCopy item path\nSettings\u27e81\u27e9\nHelp\u27e82\u27e9\nSummarySource\u27e83\u27e9\nExpand description\n## \u00a7\u27e84\u27e9SNAFU\nSNAFU is a library to easily generate errors and add information to underlying errors, especially when the same underlying error type can occur in different contexts.\nFor detailed information, please see the `Snafu`\u27e85\u27e9 macro and the user\u2019s guide\u27e86\u27e9.\n### \u00a7\u27e87\u27e9Features\n  * Turnkey errors based on strings\u27e88\u27e9\n  * Custom error types\u27e85\u27e9\n    * Including a conversion path from turnkey errors\n  * Backtraces\u27e89\u27e9\n  * Extension traits for \n    * `Results`\u27e810\u27e9\n    * `Options`\u27e811\u27e9\n    * `Futures`\u27e812\u27e9\n    * `Streams`\u27e813\u27e9\n  * Error reporting\u27e814\u27e9\n  * Suitable for libraries and applications\n  * `no_std` compatibility\n  * Generic types and lifetimes\n\n\n### \u00a7\u27e815\u27e9Quick start\nIf you want to report errors without hassle, start with the `Whatever`\u27e88\u27e9 type and the `whatever!`\u27e816\u27e9 macro:\n```\nuse snafu::{prelude::*, Whatever};\nfn is_valid_id(id: u16) -> Result<(), Whatever> {\n  if id < 10 {\n    whatever!(\"ID may not be less than 10, but it was {id}\");\n  }\n  Ok(())\n}\n```\n\nYou can also use it to wrap any other error:\n```\nuse snafu::{prelude::*, Whatever};\nfn read_config_file(path: &str) -> Result<String, Whatever> {\n  std::fs::read_to_string(path)\n    .with_whatever_context(|_| format!(\"Could not read file {path}\"))\n}\n```\n\n`Whatever`\u27e88\u27e9 allows for a short message and tracks a `Backtrace`\u27e89\u27e9 for every error:\n```\nuse snafu::{prelude::*, ErrorCompat, Whatever};\nif let Err(e) = returns_an_error() {\n  eprintln!(\"An error occurred: {e}\");\n  if let Some(bt) = ErrorCompat::backtrace(&e) {\n    eprintln!(\"{bt}\");\n  }\n}\n```\n\n### \u00a7\u27e817\u27e9Custom error types\nMany projects will hit limitations of the `Whatever` type. When that occurs, it\u2019s time to create your own error type by deriving `Snafu`\u27e85\u27e9!\n#### \u00a7\u27e818\u27e9Struct style\nSNAFU will read your error struct definition and create a _context selector_ type (called `InvalidIdSnafu` in this example). These context selectors are used with the `ensure!`\u27e819\u27e9 macro to provide ergonomic error creation:\n```\nuse snafu::prelude::*;\n#[derive(Debug, Snafu)]\n#[snafu(display(\"ID may not be less than 10, but it was {id}\"))]\nstruct InvalidIdError {\n  id: u16,\n}\nfn is_valid_id(id: u16) -> Result<(), InvalidIdError> {\n  ensure!(id >= 10, InvalidIdSnafu { id });\n  Ok(())\n}\n```\n\nIf you add a `source` field to your error, you can then wrap an underlying error using the `context`\u27e820\u27e9 extension method:\n```\nuse snafu::prelude::*;\n#[derive(Debug, Snafu)]\n#[snafu(display(\"Could not read file {path}\"))]\nstruct ConfigFileError {\n  source: std::io::Error,\n  path: String,\n}\nfn read_config_file(path: &str) -> Result<String, ConfigFileError> {\n  std::fs::read_to_string(path).context(ConfigFileSnafu { path })\n}\n```\n\n#### \u00a7\u27e821\u27e9Enum style\nWhile error structs are good for constrained cases, they don\u2019t allow for reporting multiple possible kinds of errors at one time. Error enums solve that problem.\nSNAFU will read your error enum definition and create a _context selector_ type for each variant (called `InvalidIdSnafu` in this example). These context selectors are used with the `ensure!`\u27e819\u27e9 macro to provide ergonomic error creation:\n```\nuse snafu::prelude::*;\n#[derive(Debug, Snafu)]\nenum Error {\n  #[snafu(display(\"ID may not be less than 10, but it was {id}\"))]\n  InvalidId { id: u16 },\n}\nfn is_valid_id(id: u16) -> Result<(), Error> {\n  ensure!(id >= 10, InvalidIdSnafu { id });\n  Ok(())\n}\n```\n\nIf you add a `source` field to a variant, you can then wrap an underlying error using the `context`\u27e820\u27e9 extension method:\n```\nuse snafu::prelude::*;\n#[derive(Debug, Snafu)]\nenum Error {\n  #[snafu(display(\"Could not read file {path}\"))]\n  ConfigFile {\n    source: std::io::Error,\n    path: String,\n  },\n}\nfn read_config_file(path: &str) -> Result<String, Error> {\n  std::fs::read_to_string(path).context(ConfigFileSnafu { path })\n}\n```\n\nYou can combine the power of the `whatever!`\u27e816\u27e9 macro with an enum error type. This is great if you started out with `Whatever`\u27e88\u27e9 and are moving to a custom error type:\n```\nuse snafu::prelude::*;\n#[derive(Debug, Snafu)]\nenum Error {\n  #[snafu(display(\"ID may not be less than 10, but it was {id}\"))]\n  InvalidId { id: u16 },\n  #[snafu(whatever, display(\"{message}\"))]\n  Whatever {\n    message: String,\n    #[snafu(source(from(Box<dyn std::error::Error>, Some)))]\n    source: Option<Box<dyn std::error::Error>>,\n  },\n}\nfn is_valid_id(id: u16) -> Result<(), Error> {\n  ensure!(id >= 10, InvalidIdSnafu { id });\n  whatever!(\"Just kidding... this function always fails!\");\n  Ok(())\n}\n```\n\nYou may wish to make the type `Send` and/or `Sync`, allowing your error type to be used in multithreaded programs, by changing `dyn std::error::Error` to `dyn std::error::Error + Send + Sync`.\n### \u00a7\u27e814\u27e9Reporting\nPrinting an error via `Display`\u27e822\u27e9 will only show the top-level error message without the underlying sources. For an extended error report, SNAFU offers a user-friendly error output mechanism. It prints the main error and all underlying errors in the chain, from the most recent to the oldest, plus the backtrace\u27e89\u27e9 if applicable. This is done by using the `report`\u27e823\u27e9 procedural macro or the `Report`\u27e824\u27e9 type directly.\n```\nuse snafu::prelude::*;\n#[derive(Debug, Snafu)]\n#[snafu(display(\"Could not load configuration file {path}\"))]\nstruct ConfigFileError {\n  source: std::io::Error,\n  path: String,\n}\nfn read_config_file(path: &str) -> Result<String, ConfigFileError> {\n  std::fs::read_to_string(path).context(ConfigFileSnafu { path })\n}\n#[snafu::report]\nfn main() -> Result<(), ConfigFileError> {\n  read_config_file(\"bad-config.ini\")?;\n  Ok(())\n}\n```\n\nThis will print:\n```\nError: Could not load configuration file bad-config.ini\nCaused by this error:\n1: No such file or directory (os error 2)\n```\n\nWhich shows the underlying errors, unlike `Display`\u27e822\u27e9:\n```\nError: Could not load configuration file bad-config.ini\n```\n\n\u2026 and is also more readable than the `Debug`\u27e825\u27e9 output:\n```\nError: ConfigFileError { source: Os { code: 2, kind: NotFound, message: \"No such file or directory\" }, path: \"bad-config.ini\" }\n```\n\n### \u00a7\u27e826\u27e9Next steps\nRead the documentation for the `Snafu`\u27e85\u27e9 macro to see all of the capabilities, then read the user\u2019s guide\u27e86\u27e9 for deeper understanding.\n## Modules\u00a7\u27e827\u27e9\n\nfutures\u27e828\u27e9`futures`\n    Additions to the `TryFuture`\u27e829\u27e9 and `TryStream`\u27e830\u27e9 traits.\n\nguide\u27e86\u27e9`guide`\n    SNAFU user\u2019s guide\n\nprelude\u27e831\u27e9\n    Traits and macros used by most projects. Add `use snafu::prelude::*` to your code to quickly get started with SNAFU.\n## Macros\u00a7\u27e832\u27e9\n\nensure\u27e819\u27e9\n    Ensure a condition is true. If it is not, return from the function with an error.\n\nensure_whatever\u27e833\u27e9`alloc`\n    Ensure a condition is true. If it is not, return a stringly-typed error message.\n\nlocation\u27e834\u27e9\n    Constructs a `Location`\u27e835\u27e9 using the current file, line, and column.\n\nwhatever\u27e816\u27e9`alloc`\n    Instantiate and return a stringly-typed error message.\n## Structs\u00a7\u27e836\u27e9\n\nBacktrace\u27e89\u27e9\n    A captured OS thread stack backtrace.\n\nChainCompat\u27e837\u27e9\n    An iterator over an Error and its sources.\n\nCleanedErrorText\u27e838\u27e9`alloc`\n    An iterator over an Error and its sources that removes duplicated text from the error display strings.\n\nLocation\u27e835\u27e9\n    The source code location where the error was reported.\n\nNoneError\u27e839\u27e9\n    A temporary error type used when converting an `Option`\u27e840\u27e9 into a `Result`\u27e841\u27e9\n\nReport\u27e824\u27e9\n    Opinionated solution to format an error in a user-friendly way. Useful as the return type from `main` and test functions.\n\nWhatever\u27e88\u27e9`alloc`\n    A basic error type that you can use as a first step to better error handling.\n## Traits\u00a7\u27e842\u27e9\n\nAsBacktrace\u27e843\u27e9\n    View a backtrace-like value as an optional backtrace.\n\nAsErrorSource\u27e844\u27e9\n    Converts the receiver into an `Error`\u27e845\u27e9 trait object, suitable for use in `Error::source`\u27e846\u27e9.\n\nErrorCompat\u27e847\u27e9\n    Backports changes to the `Error`\u27e845\u27e9 trait to versions of Rust lacking them.\n\nFromString\u27e848\u27e9`alloc`\n    Takes a string message and builds the corresponding error.\n\nGenerateImplicitData\u27e849\u27e9\n    Construct data to be included as part of an error. The data must require no arguments to be created.\n\nIntoError\u27e850\u27e9\n    Combines an underlying error with additional information about the error.\n\nOptionExt\u27e811\u27e9\n    Additions to `Option`\u27e840\u27e9.\n\nResultExt\u27e810\u27e9\n    Additions to `Result`\u27e841\u27e9.\n## Attribute Macros\u00a7\u27e851\u27e9\n\nreport\u27e823\u27e9\n    Adapts a function to provide user-friendly error output for `main` functions and tests.\n## Derive Macros\u00a7\u27e852\u27e9\n\nSnafu\u27e85\u27e9\n    The `Snafu` macro is the entrypoint to defining your own error types. It is designed to require little configuration for the recommended and typical usecases while still offering flexibility for unique situations.\n",
              "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://docs.rs/snafu/latest/settings.html: Settings\n\u27e82\u27e9 https://docs.rs/snafu/latest/help.html: Help\n\u27e83\u27e9 https://docs.rs/snafu/latest/src/snafu/lib.rs.html#1-1680: Source\n\u27e84\u27e9 https://docs.rs/snafu/latest/snafu/#snafu: \u00a7\n\u27e85\u27e9 https://docs.rs/snafu/latest/snafu/derive.Snafu.html: derive snafu::Snafu - `Snafu`\n\u27e86\u27e9 https://docs.rs/snafu/latest/snafu/guide/index.html: mod snafu::guide - user\u2019s guide\n\u27e87\u27e9 https://docs.rs/snafu/latest/snafu/#features: \u00a7\n\u27e88\u27e9 https://docs.rs/snafu/latest/snafu/struct.Whatever.html: struct snafu::Whatever - Turnkey errors based on strings\n\u27e89\u27e9 https://docs.rs/snafu/latest/snafu/struct.Backtrace.html: struct snafu::Backtrace - Backtraces\n\u27e810\u27e9 https://docs.rs/snafu/latest/snafu/trait.ResultExt.html: trait snafu::ResultExt - `Results`\n\u27e811\u27e9 https://docs.rs/snafu/latest/snafu/trait.OptionExt.html: trait snafu::OptionExt - `Options`\n\u27e812\u27e9 https://docs.rs/snafu/latest/snafu/futures/trait.TryFutureExt.html: trait snafu::futures::TryFutureExt - `Futures`\n\u27e813\u27e9 https://docs.rs/snafu/latest/snafu/futures/trait.TryStreamExt.html: trait snafu::futures::TryStreamExt - `Streams`\n\u27e814\u27e9 https://docs.rs/snafu/latest/snafu/#reporting: Error reporting\n\u27e815\u27e9 https://docs.rs/snafu/latest/snafu/#quick-start: \u00a7\n\u27e816\u27e9 https://docs.rs/snafu/latest/snafu/macro.whatever.html: macro snafu::whatever - `whatever!`\n\u27e817\u27e9 https://docs.rs/snafu/latest/snafu/#custom-error-types: \u00a7\n\u27e818\u27e9 https://docs.rs/snafu/latest/snafu/#struct-style: \u00a7\n\u27e819\u27e9 https://docs.rs/snafu/latest/snafu/macro.ensure.html: macro snafu::ensure - `ensure!`\n\u27e820\u27e9 https://docs.rs/snafu/latest/snafu/trait.ResultExt.html#tymethod.context: method snafu::ResultExt::context - `context`\n\u27e821\u27e9 https://docs.rs/snafu/latest/snafu/#enum-style: \u00a7\n\u27e822\u27e9 https://doc.rust-lang.org/nightly/core/fmt/trait.Display.html: trait core::fmt::Display - `Display`\n\u27e823\u27e9 https://docs.rs/snafu/latest/snafu/attr.report.html: attr snafu::report - `report`\n\u27e824\u27e9 https://docs.rs/snafu/latest/snafu/struct.Report.html: struct snafu::Report - `Report`\n\u27e825\u27e9 https://doc.rust-lang.org/nightly/core/fmt/trait.Debug.html: trait core::fmt::Debug - `Debug`\n\u27e826\u27e9 https://docs.rs/snafu/latest/snafu/#next-steps: \u00a7\n\u27e827\u27e9 https://docs.rs/snafu/latest/snafu/#modules: \u00a7\n\u27e828\u27e9 https://docs.rs/snafu/latest/snafu/futures/index.html: mod snafu::futures - futures\n\u27e829\u27e9 https://docs.rs/futures-core/0.3.31/x86_64-unknown-linux-gnu/futures_core/future/trait.TryFuture.html: trait futures_core::future::TryFuture - `TryFuture`\n\u27e830\u27e9 https://docs.rs/futures-core/0.3.31/x86_64-unknown-linux-gnu/futures_core/stream/trait.TryStream.html: trait futures_core::stream::TryStream - `TryStream`\n\u27e831\u27e9 https://docs.rs/snafu/latest/snafu/prelude/index.html: mod snafu::prelude - prelude\n\u27e832\u27e9 https://docs.rs/snafu/latest/snafu/#macros: \u00a7\n\u27e833\u27e9 https://docs.rs/snafu/latest/snafu/macro.ensure_whatever.html: macro snafu::ensure_whatever - ensure_whatever\n\u27e834\u27e9 https://docs.rs/snafu/latest/snafu/macro.location.html: macro snafu::location - location\n\u27e835\u27e9 https://docs.rs/snafu/latest/snafu/struct.Location.html: struct snafu::Location - `Location`\n\u27e836\u27e9 https://docs.rs/snafu/latest/snafu/#structs: \u00a7\n\u27e837\u27e9 https://docs.rs/snafu/latest/snafu/struct.ChainCompat.html: struct snafu::ChainCompat - ChainCompat\n\u27e838\u27e9 https://docs.rs/snafu/latest/snafu/struct.CleanedErrorText.html: struct snafu::CleanedErrorText - CleanedErrorText\n\u27e839\u27e9 https://docs.rs/snafu/latest/snafu/struct.NoneError.html: struct snafu::NoneError - NoneError\n\u27e840\u27e9 https://doc.rust-lang.org/nightly/core/option/enum.Option.html: enum core::option::Option - `Option`\n\u27e841\u27e9 https://doc.rust-lang.org/nightly/core/result/enum.Result.html: enum core::result::Result - `Result`\n\u27e842\u27e9 https://docs.rs/snafu/latest/snafu/#traits: \u00a7\n\u27e843\u27e9 https://docs.rs/snafu/latest/snafu/trait.AsBacktrace.html: trait snafu::AsBacktrace - AsBacktrace\n\u27e844\u27e9 https://docs.rs/snafu/latest/snafu/trait.AsErrorSource.html: trait snafu::AsErrorSource - AsErrorSource\n\u27e845\u27e9 https://doc.rust-lang.org/nightly/core/error/trait.Error.html: trait core::error::Error - `Error`\n\u27e846\u27e9 https://doc.rust-lang.org/nightly/core/error/trait.Error.html#method.source: method core::error::Error::source - `Error::source`\n\u27e847\u27e9 https://docs.rs/snafu/latest/snafu/trait.ErrorCompat.html: trait snafu::ErrorCompat - ErrorCompat\n\u27e848\u27e9 https://docs.rs/snafu/latest/snafu/trait.FromString.html: trait snafu::FromString - FromString\n\u27e849\u27e9 https://docs.rs/snafu/latest/snafu/trait.GenerateImplicitData.html: trait snafu::GenerateImplicitData - GenerateImplicitData\n\u27e850\u27e9 https://docs.rs/snafu/latest/snafu/trait.IntoError.html: trait snafu::IntoError - IntoError\n\u27e851\u27e9 https://docs.rs/snafu/latest/snafu/#attributes: \u00a7\n\u27e852\u27e9 https://docs.rs/snafu/latest/snafu/#derives: \u00a7\n",
              "fit_markdown": "",
              "fit_html": ""
            },
            "structured_data": {},
            "quality_score": 4.0,
            "extraction_method": "crawl4ai",
            "error": null,
            "metadata": {
              "doc_type": "docs",
              "content_length": 14812,
              "has_structured_data": false,
              "crawl_success": true
            },
            "timestamp": "113510.2578914"
          },
          "lib_rs": {
            "url": "https://lib.rs/crates/snafu",
            "title": "Untitled",
            "content": {
              "raw_markdown": "###  [48 releases](https://lib.rs/crates/snafu/versions)\n0.8.6 |  May 28, 2025   \n---|---  \n0.8.5 |  Sep 23, 2024   \n0.8.4 |  Jul 8, 2024   \n0.8.2 |  Mar 11, 2024   \n0.2.0 |  Mar 26, 2019   \n#**22** in [Rust patterns](https://lib.rs/rust-patterns \"Shared solutions for particular situations specific to programming in Rust.\")\nDownload history 1047337/week @ 2025-03-09 1223380/week @ 2025-03-16 1413354/week @ 2025-03-23 872375/week @ 2025-03-30 931176/week @ 2025-04-06 794942/week @ 2025-04-13 755255/week @ 2025-04-20 572787/week @ 2025-04-27 632024/week @ 2025-05-04 635402/week @ 2025-05-11 620439/week @ 2025-05-18 510114/week @ 2025-05-25 572658/week @ 2025-06-01 548075/week @ 2025-06-08 575838/week @ 2025-06-15 668797/week @ 2025-06-22\n**2,393,613** downloads per month Used in [**1,582** crates (591 directly)](https://lib.rs/crates/snafu/rev)\n**MIT/Apache**\n120KB  2K  SLoC\n# SNAFU\n**S** ituation **N** ormal: **A** ll **F** ouled **U** p\n[![crates.io](https://img.shields.io/crates/v/snafu.svg)](https://crates.io/crates/snafu) [![Documentation](https://img.gs/czjpqfbdkz/full/https://docs.rs/snafu/badge.svg)](https://docs.rs/snafu) [![Build Status](https://img.gs/czjpqfbdkz/full/https://api.cirrus-ci.com/github/shepmaster/snafu.svg)](https://cirrus-ci.com/github/shepmaster/snafu)\nSNAFU is a library to easily assign underlying errors into domain-specific errors while adding context.\n```\n``use` `snafu`::```prelude`::```*``;`\n`use` `std`::````{`fs`,` io`,` `path`::``PathBuf```}```;`\n``#``[``derive```(```Debug`,` Snafu```)```]``\n``enum` `Error` ``{`\n  ``#``[``snafu```(`````display``(`````\"`Unable to read configuration from {}`\"```,` path.`display``(``)````)`````)```]``\n  ReadConfiguration `{` source`:` `io`::``Error`,` path`:` PathBuf `}``,`\n  ``#``[``snafu```(`````display``(`````\"`Unable to write result to {}`\"```,` path.`display``(``)````)`````)```]``\n  WriteResult `{` source`:` `io`::``Error`,` path`:` PathBuf `}``,`\n```}```\n`type` `Result``<`T`,` E `=` Error`>` `=` `std`::```result`::``Result``<`T, E`>```;`\n``fn` `process_data`````(````)```` ``->` ``Result``<``(``)``>``` ````{`\n  `let` path `=` ``\"`config.toml`\"```;`\n  `let` configuration `=` `fs`::``read_to_string`(`path`)``.``context``(`ReadConfigurationSnafu `{` path `}``)``?``;`\n  `let` path `=` `unpack_config``(``&`configuration`)``;`\n  `fs`::``write`(``&`path`,` ``b``\"`My complex calculation`\"```)``.``context``(`WriteResultSnafu `{` path `}``)``?``;`\n  `Ok``(``(``)``)`\n```}```\n``fn` `unpack_config`````(``data``:` `&``str````)```` ``->` `&``str`` ````{`\n  ``\"`/some/path/that/does/not/exist`\"``\n```}```\n`\n```\n\nPlease see [the documentation](https://docs.rs/snafu) and the [user's guide](https://docs.rs/snafu/*/snafu/guide/index.html) for a full description.\n#### Dependencies\n~0.2\u20136MB  ~28K SLoC\n  * [backtraces\u2026crate?](https://lib.rs/crates/snafu/features#feature-backtraces-impl-backtrace-crate \"optional feature\") [backtrace](https://lib.rs/crates/backtrace \"0.3.0\")\n  * [internal-dev-dependencies?](https://lib.rs/crates/snafu/features#feature-internal-dev-dependencies \"optional feature\") [futures](https://lib.rs/crates/futures \"renamed futures-crate, 0.3.11\")\n  * [futures?](https://lib.rs/crates/snafu/features#feature-futures \"optional feature\") [futures-core](https://lib.rs/crates/futures-core \"renamed futures-core-crate, 0.3.0\")\n  * [futures?](https://lib.rs/crates/snafu/features#feature-futures \"optional feature\") [pin-project](https://lib.rs/crates/pin-project \"1.0.2\")\n  * [snafu-derive](https://lib.rs/crates/snafu-derive \"new\") 0.8.6\n\n\n#### [Other features](https://lib.rs/crates/snafu/features)\n  * [alloc](https://lib.rs/crates/snafu/features#feature-alloc)\n  * [guide](https://lib.rs/crates/snafu/features#feature-guide)\n  * [rust_1_61](https://lib.rs/crates/snafu/features#feature-rust_1_61)\n  * [rust_1_65](https://lib.rs/crates/snafu/features#feature-rust_1_65)\n  * [rust_1_81](https://lib.rs/crates/snafu/features#feature-rust_1_81)\n  * [std](https://lib.rs/crates/snafu/features#feature-std)\n  * [unstable-core-error](https://lib.rs/crates/snafu/features#feature-unstable-core-error)\n  * [unstable-provider-api](https://lib.rs/crates/snafu/features#feature-unstable-provider-api)\n  * [unstable-try-trait](https://lib.rs/crates/snafu/features#feature-unstable-try-trait)\n\n\n  *[SLoC]: approx. additional lines of code\n",
              "markdown_with_citations": "###  48 releases\u27e81\u27e9\n0.8.6 |  May 28, 2025   \n---|---  \n0.8.5 |  Sep 23, 2024   \n0.8.4 |  Jul 8, 2024   \n0.8.2 |  Mar 11, 2024   \n0.2.0 |  Mar 26, 2019   \n#**22** in Rust patterns\u27e82\u27e9\nDownload history 1047337/week @ 2025-03-09 1223380/week @ 2025-03-16 1413354/week @ 2025-03-23 872375/week @ 2025-03-30 931176/week @ 2025-04-06 794942/week @ 2025-04-13 755255/week @ 2025-04-20 572787/week @ 2025-04-27 632024/week @ 2025-05-04 635402/week @ 2025-05-11 620439/week @ 2025-05-18 510114/week @ 2025-05-25 572658/week @ 2025-06-01 548075/week @ 2025-06-08 575838/week @ 2025-06-15 668797/week @ 2025-06-22\n**2,393,613** downloads per month Used in **1,582** crates (591 directly)\u27e83\u27e9\n**MIT/Apache**\n120KB  2K  SLoC\n# SNAFU\n**S** ituation **N** ormal: **A** ll **F** ouled **U** p\n![crates.io\u27e84\u27e9](https://crates.io/crates/snafu) ![Documentation\u27e85\u27e9](https://docs.rs/snafu) ![Build Status\u27e86\u27e9](https://cirrus-ci.com/github/shepmaster/snafu)\nSNAFU is a library to easily assign underlying errors into domain-specific errors while adding context.\n```\n``use` `snafu`::```prelude`::```*``;`\n`use` `std`::````{`fs`,` io`,` `path`::``PathBuf```}```;`\n``#``[``derive```(```Debug`,` Snafu```)```]``\n``enum` `Error` ``{`\n  ``#``[``snafu```(`````display``(`````\"`Unable to read configuration from {}`\"```,` path.`display``(``)````)`````)```]``\n  ReadConfiguration `{` source`:` `io`::``Error`,` path`:` PathBuf `}``,`\n  ``#``[``snafu```(`````display``(`````\"`Unable to write result to {}`\"```,` path.`display``(``)````)`````)```]``\n  WriteResult `{` source`:` `io`::``Error`,` path`:` PathBuf `}``,`\n```}```\n`type` `Result``<`T`,` E `=` Error`>` `=` `std`::```result`::``Result``<`T, E`>```;`\n``fn` `process_data`````(````)```` ``->` ``Result``<``(``)``>``` ````{`\n  `let` path `=` ``\"`config.toml`\"```;`\n  `let` configuration `=` `fs`::``read_to_string`(`path`)``.``context``(`ReadConfigurationSnafu `{` path `}``)``?``;`\n  `let` path `=` `unpack_config``(``&`configuration`)``;`\n  `fs`::``write`(``&`path`,` ``b``\"`My complex calculation`\"```)``.``context``(`WriteResultSnafu `{` path `}``)``?``;`\n  `Ok``(``(``)``)`\n```}```\n``fn` `unpack_config`````(``data``:` `&``str````)```` ``->` `&``str`` ````{`\n  ``\"`/some/path/that/does/not/exist`\"``\n```}```\n`\n```\n\nPlease see the documentation\u27e87\u27e9 and the user's guide\u27e88\u27e9 for a full description.\n#### Dependencies\n~0.2\u20136MB  ~28K SLoC\n  * backtraces\u2026crate?\u27e89\u27e9 backtrace\u27e810\u27e9\n  * internal-dev-dependencies?\u27e811\u27e9 futures\u27e812\u27e9\n  * futures?\u27e813\u27e9 futures-core\u27e814\u27e9\n  * futures?\u27e813\u27e9 pin-project\u27e815\u27e9\n  * snafu-derive\u27e816\u27e9 0.8.6\n\n\n#### Other features\u27e817\u27e9\n  * alloc\u27e818\u27e9\n  * guide\u27e819\u27e9\n  * rust_1_61\u27e820\u27e9\n  * rust_1_65\u27e821\u27e9\n  * rust_1_81\u27e822\u27e9\n  * std\u27e823\u27e9\n  * unstable-core-error\u27e824\u27e9\n  * unstable-provider-api\u27e825\u27e9\n  * unstable-try-trait\u27e826\u27e9\n\n\n  *[SLoC]: approx. additional lines of code\n",
              "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://lib.rs/crates/snafu/versions: 48 releases\n\u27e82\u27e9 https://lib.rs/rust-patterns: Shared solutions for particular situations specific to programming in Rust. - Rust patterns\n\u27e83\u27e9 https://lib.rs/crates/snafu/rev: **1,582** crates (591 directly)\n\u27e84\u27e9 https://img.shields.io/crates/v/snafu.svg: ![crates.io\n\u27e85\u27e9 https://img.gs/czjpqfbdkz/full/https://docs.rs/snafu/badge.svg: ![Documentation\n\u27e86\u27e9 https://img.gs/czjpqfbdkz/full/https://api.cirrus-ci.com/github/shepmaster/snafu.svg: ![Build Status\n\u27e87\u27e9 https://docs.rs/snafu: the documentation\n\u27e88\u27e9 https://docs.rs/snafu/*/snafu/guide/index.html: user's guide\n\u27e89\u27e9 https://lib.rs/crates/snafu/features#feature-backtraces-impl-backtrace-crate: optional feature - backtraces\u2026crate?\n\u27e810\u27e9 https://lib.rs/crates/backtrace: 0.3.0 - backtrace\n\u27e811\u27e9 https://lib.rs/crates/snafu/features#feature-internal-dev-dependencies: optional feature - internal-dev-dependencies?\n\u27e812\u27e9 https://lib.rs/crates/futures: renamed futures-crate, 0.3.11 - futures\n\u27e813\u27e9 https://lib.rs/crates/snafu/features#feature-futures: optional feature - futures?\n\u27e814\u27e9 https://lib.rs/crates/futures-core: renamed futures-core-crate, 0.3.0 - futures-core\n\u27e815\u27e9 https://lib.rs/crates/pin-project: 1.0.2 - pin-project\n\u27e816\u27e9 https://lib.rs/crates/snafu-derive: new - snafu-derive\n\u27e817\u27e9 https://lib.rs/crates/snafu/features: Other features\n\u27e818\u27e9 https://lib.rs/crates/snafu/features#feature-alloc: alloc\n\u27e819\u27e9 https://lib.rs/crates/snafu/features#feature-guide: guide\n\u27e820\u27e9 https://lib.rs/crates/snafu/features#feature-rust_1_61: rust_1_61\n\u27e821\u27e9 https://lib.rs/crates/snafu/features#feature-rust_1_65: rust_1_65\n\u27e822\u27e9 https://lib.rs/crates/snafu/features#feature-rust_1_81: rust_1_81\n\u27e823\u27e9 https://lib.rs/crates/snafu/features#feature-std: std\n\u27e824\u27e9 https://lib.rs/crates/snafu/features#feature-unstable-core-error: unstable-core-error\n\u27e825\u27e9 https://lib.rs/crates/snafu/features#feature-unstable-provider-api: unstable-provider-api\n\u27e826\u27e9 https://lib.rs/crates/snafu/features#feature-unstable-try-trait: unstable-try-trait\n",
              "fit_markdown": "",
              "fit_html": ""
            },
            "structured_data": {},
            "quality_score": 4.0,
            "extraction_method": "crawl4ai",
            "error": null,
            "metadata": {
              "doc_type": "docs",
              "content_length": 4342,
              "has_structured_data": false,
              "crawl_success": true
            },
            "timestamp": "113510.8346029"
          }
        },
        "crate_analysis": {
          "status": "completed",
          "check": [
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#unicode-ident@1.0.18",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\unicode-ident-1.0.18\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "unicode_ident",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\unicode-ident-1.0.18\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphxi3qxpa\\snafu-0.8.6\\target\\debug\\deps\\libunicode_ident-f7db65657b8daa2b.rlib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphxi3qxpa\\snafu-0.8.6\\target\\debug\\deps\\libunicode_ident-f7db65657b8daa2b.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#heck@0.5.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\heck-0.5.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "heck",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\heck-0.5.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphxi3qxpa\\snafu-0.8.6\\target\\debug\\deps\\libheck-6eabf3ca9e635b47.rlib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphxi3qxpa\\snafu-0.8.6\\target\\debug\\deps\\libheck-6eabf3ca9e635b47.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#proc-macro2@1.0.95",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\proc-macro2-1.0.95\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\proc-macro2-1.0.95\\build.rs",
                "edition": "2021",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "proc-macro"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphxi3qxpa\\snafu-0.8.6\\target\\debug\\build\\proc-macro2-ff1a34852a360a33\\build-script-build.exe",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphxi3qxpa\\snafu-0.8.6\\target\\debug\\build\\proc-macro2-ff1a34852a360a33\\build_script_build.pdb"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "build-script-executed",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#proc-macro2@1.0.95",
              "linked_libs": [],
              "linked_paths": [],
              "cfgs": [
                "wrap_proc_macro"
              ],
              "env": [],
              "out_dir": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphxi3qxpa\\snafu-0.8.6\\target\\debug\\build\\proc-macro2-bd004ad9dcfa0b46\\out"
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#proc-macro2@1.0.95",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\proc-macro2-1.0.95\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "proc_macro2",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\proc-macro2-1.0.95\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "proc-macro"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphxi3qxpa\\snafu-0.8.6\\target\\debug\\deps\\libproc_macro2-a3b3807fecd402e3.rlib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphxi3qxpa\\snafu-0.8.6\\target\\debug\\deps\\libproc_macro2-a3b3807fecd402e3.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#quote@1.0.40",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\quote-1.0.40\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "quote",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\quote-1.0.40\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "proc-macro"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphxi3qxpa\\snafu-0.8.6\\target\\debug\\deps\\libquote-e850c7166d56c5b9.rlib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphxi3qxpa\\snafu-0.8.6\\target\\debug\\deps\\libquote-e850c7166d56c5b9.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#syn@2.0.101",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\syn-2.0.101\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "syn",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\syn-2.0.101\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "clone-impls",
                "default",
                "derive",
                "full",
                "parsing",
                "printing",
                "proc-macro"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphxi3qxpa\\snafu-0.8.6\\target\\debug\\deps\\libsyn-5892b1a16f92e5c7.rlib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphxi3qxpa\\snafu-0.8.6\\target\\debug\\deps\\libsyn-5892b1a16f92e5c7.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#snafu-derive@0.8.6",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\snafu-derive-0.8.6\\Cargo.toml",
              "target": {
                "kind": [
                  "proc-macro"
                ],
                "crate_types": [
                  "proc-macro"
                ],
                "name": "snafu_derive",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\snafu-derive-0.8.6\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "rust_1_61"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphxi3qxpa\\snafu-0.8.6\\target\\debug\\deps\\snafu_derive-df37d3a1d47f3626.dll",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphxi3qxpa\\snafu-0.8.6\\target\\debug\\deps\\snafu_derive-df37d3a1d47f3626.dll.lib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphxi3qxpa\\snafu-0.8.6\\target\\debug\\deps\\snafu_derive-df37d3a1d47f3626.dll.exp",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphxi3qxpa\\snafu-0.8.6\\target\\debug\\deps\\snafu_derive-df37d3a1d47f3626.pdb"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmphxi3qxpa/snafu-0.8.6#snafu@0.8.6",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphxi3qxpa\\snafu-0.8.6\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "snafu",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphxi3qxpa\\snafu-0.8.6\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "alloc",
                "default",
                "rust_1_61",
                "rust_1_65",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphxi3qxpa\\snafu-0.8.6\\target\\debug\\deps\\libsnafu-16544d871807d95b.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "build-finished",
              "success": true
            }
          ],
          "clippy": [
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#proc-macro2@1.0.95",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\proc-macro2-1.0.95\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\proc-macro2-1.0.95\\build.rs",
                "edition": "2021",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "proc-macro"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphxi3qxpa\\snafu-0.8.6\\target\\debug\\build\\proc-macro2-ff1a34852a360a33\\build-script-build.exe",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphxi3qxpa\\snafu-0.8.6\\target\\debug\\build\\proc-macro2-ff1a34852a360a33\\build_script_build.pdb"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "build-script-executed",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#proc-macro2@1.0.95",
              "linked_libs": [],
              "linked_paths": [],
              "cfgs": [
                "wrap_proc_macro"
              ],
              "env": [],
              "out_dir": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphxi3qxpa\\snafu-0.8.6\\target\\debug\\build\\proc-macro2-bd004ad9dcfa0b46\\out"
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#unicode-ident@1.0.18",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\unicode-ident-1.0.18\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "unicode_ident",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\unicode-ident-1.0.18\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphxi3qxpa\\snafu-0.8.6\\target\\debug\\deps\\libunicode_ident-f7db65657b8daa2b.rlib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphxi3qxpa\\snafu-0.8.6\\target\\debug\\deps\\libunicode_ident-f7db65657b8daa2b.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#heck@0.5.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\heck-0.5.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "heck",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\heck-0.5.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphxi3qxpa\\snafu-0.8.6\\target\\debug\\deps\\libheck-6eabf3ca9e635b47.rlib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphxi3qxpa\\snafu-0.8.6\\target\\debug\\deps\\libheck-6eabf3ca9e635b47.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#proc-macro2@1.0.95",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\proc-macro2-1.0.95\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "proc_macro2",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\proc-macro2-1.0.95\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "proc-macro"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphxi3qxpa\\snafu-0.8.6\\target\\debug\\deps\\libproc_macro2-a3b3807fecd402e3.rlib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphxi3qxpa\\snafu-0.8.6\\target\\debug\\deps\\libproc_macro2-a3b3807fecd402e3.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#quote@1.0.40",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\quote-1.0.40\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "quote",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\quote-1.0.40\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "proc-macro"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphxi3qxpa\\snafu-0.8.6\\target\\debug\\deps\\libquote-e850c7166d56c5b9.rlib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphxi3qxpa\\snafu-0.8.6\\target\\debug\\deps\\libquote-e850c7166d56c5b9.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#syn@2.0.101",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\syn-2.0.101\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "syn",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\syn-2.0.101\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "clone-impls",
                "default",
                "derive",
                "full",
                "parsing",
                "printing",
                "proc-macro"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphxi3qxpa\\snafu-0.8.6\\target\\debug\\deps\\libsyn-5892b1a16f92e5c7.rlib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphxi3qxpa\\snafu-0.8.6\\target\\debug\\deps\\libsyn-5892b1a16f92e5c7.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#snafu-derive@0.8.6",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\snafu-derive-0.8.6\\Cargo.toml",
              "target": {
                "kind": [
                  "proc-macro"
                ],
                "crate_types": [
                  "proc-macro"
                ],
                "name": "snafu_derive",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\snafu-derive-0.8.6\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "rust_1_61"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphxi3qxpa\\snafu-0.8.6\\target\\debug\\deps\\snafu_derive-df37d3a1d47f3626.dll",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphxi3qxpa\\snafu-0.8.6\\target\\debug\\deps\\snafu_derive-df37d3a1d47f3626.dll.lib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphxi3qxpa\\snafu-0.8.6\\target\\debug\\deps\\snafu_derive-df37d3a1d47f3626.dll.exp",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphxi3qxpa\\snafu-0.8.6\\target\\debug\\deps\\snafu_derive-df37d3a1d47f3626.pdb"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmphxi3qxpa/snafu-0.8.6#snafu@0.8.6",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphxi3qxpa\\snafu-0.8.6\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "snafu",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphxi3qxpa\\snafu-0.8.6\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: current MSRV (Minimum Supported Rust Version) is `1.56.0` but this item is stable since `1.65.0`\n --> src\\backtrace_impl_std.rs:5:9\n  |\n5 |         Backtrace::force_capture()\n  |         ^^^^^^^^^^^^^^^^^^^^^^^^\n  |\n  = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#incompatible_msrv\n  = note: `#[warn(clippy::incompatible_msrv)]` on by default\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#incompatible_msrv",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "`#[warn(clippy::incompatible_msrv)]` on by default",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "clippy::incompatible_msrv",
                  "explanation": null
                },
                "level": "warning",
                "message": "current MSRV (Minimum Supported Rust Version) is `1.56.0` but this item is stable since `1.65.0`",
                "spans": [
                  {
                    "byte_end": 145,
                    "byte_start": 121,
                    "column_end": 33,
                    "column_start": 9,
                    "expansion": null,
                    "file_name": "src\\backtrace_impl_std.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 5,
                    "line_start": 5,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 33,
                        "highlight_start": 9,
                        "text": "        Backtrace::force_capture()"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmphxi3qxpa/snafu-0.8.6#snafu@0.8.6",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphxi3qxpa\\snafu-0.8.6\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "snafu",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphxi3qxpa\\snafu-0.8.6\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: the following explicit lifetimes could be elided: 'a\n    --> src\\lib.rs:1219:6\n     |\n1219 | impl<'a, E> ErrorCompat for &'a E\n     |      ^^                      ^^\n     |\n     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_lifetimes\n     = note: `#[warn(clippy::needless_lifetimes)]` on by default\nhelp: elide the lifetimes\n     |\n1219 - impl<'a, E> ErrorCompat for &'a E\n1219 + impl<E> ErrorCompat for &E\n     |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_lifetimes",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "`#[warn(clippy::needless_lifetimes)]` on by default",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "elide the lifetimes",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 36152,
                        "byte_start": 36148,
                        "column_end": 10,
                        "column_start": 6,
                        "expansion": null,
                        "file_name": "src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 1219,
                        "line_start": 1219,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 10,
                            "highlight_start": 6,
                            "text": "impl<'a, E> ErrorCompat for &'a E"
                          }
                        ]
                      },
                      {
                        "byte_end": 36175,
                        "byte_start": 36172,
                        "column_end": 33,
                        "column_start": 30,
                        "expansion": null,
                        "file_name": "src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 1219,
                        "line_start": 1219,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 33,
                            "highlight_start": 30,
                            "text": "impl<'a, E> ErrorCompat for &'a E"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::needless_lifetimes",
                  "explanation": null
                },
                "level": "warning",
                "message": "the following explicit lifetimes could be elided: 'a",
                "spans": [
                  {
                    "byte_end": 36150,
                    "byte_start": 36148,
                    "column_end": 8,
                    "column_start": 6,
                    "expansion": null,
                    "file_name": "src\\lib.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 1219,
                    "line_start": 1219,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 8,
                        "highlight_start": 6,
                        "text": "impl<'a, E> ErrorCompat for &'a E"
                      }
                    ]
                  },
                  {
                    "byte_end": 36174,
                    "byte_start": 36172,
                    "column_end": 32,
                    "column_start": 30,
                    "expansion": null,
                    "file_name": "src\\lib.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 1219,
                    "line_start": 1219,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 32,
                        "highlight_start": 30,
                        "text": "impl<'a, E> ErrorCompat for &'a E"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-artifact",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmphxi3qxpa/snafu-0.8.6#snafu@0.8.6",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphxi3qxpa\\snafu-0.8.6\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "snafu",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphxi3qxpa\\snafu-0.8.6\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "alloc",
                "default",
                "rust_1_61",
                "rust_1_65",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmphxi3qxpa\\snafu-0.8.6\\target\\debug\\deps\\libsnafu-3cc9c8a492d62a54.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "build-finished",
              "success": true
            }
          ],
          "audit": {
            "database": {
              "advisory-count": 787,
              "last-commit": "7573f55ba337263f61167dbb0ea926cdc7c8eb5d",
              "last-updated": "2025-06-17T11:04:25+02:00"
            },
            "lockfile": {
              "dependency-count": 37
            },
            "settings": {
              "target_arch": [],
              "target_os": [],
              "severity": null,
              "ignore": [],
              "informational_warnings": [
                "unmaintained",
                "unsound",
                "notice"
              ]
            },
            "vulnerabilities": {
              "found": false,
              "count": 0,
              "list": []
            },
            "warnings": {}
          },
          "note": "Crate analysis performed with stable toolchain."
        },
        "crate_metadata": {
          "name": "snafu",
          "version": "0.8.6",
          "description": "ALLOW: Positive community sentiment",
          "repository": "",
          "keywords": [],
          "categories": [],
          "readme": {
            "raw_markdown": "[](https://docs.rs/snafu/latest/snafu/all.html \"show sidebar\")\n# Crate snafuCopy item path\n[Settings](https://docs.rs/snafu/latest/settings.html)\n[Help](https://docs.rs/snafu/latest/help.html)\nSummary[Source](https://docs.rs/snafu/latest/src/snafu/lib.rs.html#1-1680)\nExpand description\n## [\u00a7](https://docs.rs/snafu/latest/snafu/#snafu)SNAFU\nSNAFU is a library to easily generate errors and add information to underlying errors, especially when the same underlying error type can occur in different contexts.\nFor detailed information, please see the [`Snafu`](https://docs.rs/snafu/latest/snafu/derive.Snafu.html \"derive snafu::Snafu\") macro and the [user\u2019s guide](https://docs.rs/snafu/latest/snafu/guide/index.html \"mod snafu::guide\").\n### [\u00a7](https://docs.rs/snafu/latest/snafu/#features)Features\n  * [Turnkey errors based on strings](https://docs.rs/snafu/latest/snafu/struct.Whatever.html \"struct snafu::Whatever\")\n  * [Custom error types](https://docs.rs/snafu/latest/snafu/derive.Snafu.html \"derive snafu::Snafu\")\n    * Including a conversion path from turnkey errors\n  * [Backtraces](https://docs.rs/snafu/latest/snafu/struct.Backtrace.html \"struct snafu::Backtrace\")\n  * Extension traits for \n    * [`Results`](https://docs.rs/snafu/latest/snafu/trait.ResultExt.html \"trait snafu::ResultExt\")\n    * [`Options`](https://docs.rs/snafu/latest/snafu/trait.OptionExt.html \"trait snafu::OptionExt\")\n    * [`Futures`](https://docs.rs/snafu/latest/snafu/futures/trait.TryFutureExt.html \"trait snafu::futures::TryFutureExt\")\n    * [`Streams`](https://docs.rs/snafu/latest/snafu/futures/trait.TryStreamExt.html \"trait snafu::futures::TryStreamExt\")\n  * [Error reporting](https://docs.rs/snafu/latest/snafu/#reporting)\n  * Suitable for libraries and applications\n  * `no_std` compatibility\n  * Generic types and lifetimes\n\n\n### [\u00a7](https://docs.rs/snafu/latest/snafu/#quick-start)Quick start\nIf you want to report errors without hassle, start with the [`Whatever`](https://docs.rs/snafu/latest/snafu/struct.Whatever.html \"struct snafu::Whatever\") type and the [`whatever!`](https://docs.rs/snafu/latest/snafu/macro.whatever.html \"macro snafu::whatever\") macro:\n```\nuse snafu::{prelude::*, Whatever};\nfn is_valid_id(id: u16) -> Result<(), Whatever> {\n  if id < 10 {\n    whatever!(\"ID may not be less than 10, but it was {id}\");\n  }\n  Ok(())\n}\n```\n\nYou can also use it to wrap any other error:\n```\nuse snafu::{prelude::*, Whatever};\nfn read_config_file(path: &str) -> Result<String, Whatever> {\n  std::fs::read_to_string(path)\n    .with_whatever_context(|_| format!(\"Could not read file {path}\"))\n}\n```\n\n[`Whatever`](https://docs.rs/snafu/latest/snafu/struct.Whatever.html \"struct snafu::Whatever\") allows for a short message and tracks a [`Backtrace`](https://docs.rs/snafu/latest/snafu/struct.Backtrace.html \"struct snafu::Backtrace\") for every error:\n```\nuse snafu::{prelude::*, ErrorCompat, Whatever};\nif let Err(e) = returns_an_error() {\n  eprintln!(\"An error occurred: {e}\");\n  if let Some(bt) = ErrorCompat::backtrace(&e) {\n    eprintln!(\"{bt}\");\n  }\n}\n```\n\n### [\u00a7](https://docs.rs/snafu/latest/snafu/#custom-error-types)Custom error types\nMany projects will hit limitations of the `Whatever` type. When that occurs, it\u2019s time to create your own error type by deriving [`Snafu`](https://docs.rs/snafu/latest/snafu/derive.Snafu.html \"derive snafu::Snafu\")!\n#### [\u00a7](https://docs.rs/snafu/latest/snafu/#struct-style)Struct style\nSNAFU will read your error struct definition and create a _context selector_ type (called `InvalidIdSnafu` in this example). These context selectors are used with the [`ensure!`](https://docs.rs/snafu/latest/snafu/macro.ensure.html \"macro snafu::ensure\") macro to provide ergonomic error creation:\n```\nuse snafu::prelude::*;\n#[derive(Debug, Snafu)]\n#[snafu(display(\"ID may not be less than 10, but it was {id}\"))]\nstruct InvalidIdError {\n  id: u16,\n}\nfn is_valid_id(id: u16) -> Result<(), InvalidIdError> {\n  ensure!(id >= 10, InvalidIdSnafu { id });\n  Ok(())\n}\n```\n\nIf you add a `source` field to your error, you can then wrap an underlying error using the [`context`](https://docs.rs/snafu/latest/snafu/trait.ResultExt.html#tymethod.context \"method snafu::ResultExt::context\") extension method:\n```\nuse snafu::prelude::*;\n#[derive(Debug, Snafu)]\n#[snafu(display(\"Could not read file {path}\"))]\nstruct ConfigFileError {\n  source: std::io::Error,\n  path: String,\n}\nfn read_config_file(path: &str) -> Result<String, ConfigFileError> {\n  std::fs::read_to_string(path).context(ConfigFileSnafu { path })\n}\n```\n\n#### [\u00a7](https://docs.rs/snafu/latest/snafu/#enum-style)Enum style\nWhile error structs are good for constrained cases, they don\u2019t allow for reporting multiple possible kinds of errors at one time. Error enums solve that problem.\nSNAFU will read your error enum definition and create a _context selector_ type for each variant (called `InvalidIdSnafu` in this example). These context selectors are used with the [`ensure!`](https://docs.rs/snafu/latest/snafu/macro.ensure.html \"macro snafu::ensure\") macro to provide ergonomic error creation:\n```\nuse snafu::prelude::*;\n#[derive(Debug, Snafu)]\nenum Error {\n  #[snafu(display(\"ID may not be less than 10, but it was {id}\"))]\n  InvalidId { id: u16 },\n}\nfn is_valid_id(id: u16) -> Result<(), Error> {\n  ensure!(id >= 10, InvalidIdSnafu { id });\n  Ok(())\n}\n```\n\nIf you add a `source` field to a variant, you can then wrap an underlying error using the [`context`](https://docs.rs/snafu/latest/snafu/trait.ResultExt.html#tymethod.context \"method snafu::ResultExt::context\") extension method:\n```\nuse snafu::prelude::*;\n#[derive(Debug, Snafu)]\nenum Error {\n  #[snafu(display(\"Could not read file {path}\"))]\n  ConfigFile {\n    source: std::io::Error,\n    path: String,\n  },\n}\nfn read_config_file(path: &str) -> Result<String, Error> {\n  std::fs::read_to_string(path).context(ConfigFileSnafu { path })\n}\n```\n\nYou can combine the power of the [`whatever!`](https://docs.rs/snafu/latest/snafu/macro.whatever.html \"macro snafu::whatever\") macro with an enum error type. This is great if you started out with [`Whatever`](https://docs.rs/snafu/latest/snafu/struct.Whatever.html \"struct snafu::Whatever\") and are moving to a custom error type:\n```\nuse snafu::prelude::*;\n#[derive(Debug, Snafu)]\nenum Error {\n  #[snafu(display(\"ID may not be less than 10, but it was {id}\"))]\n  InvalidId { id: u16 },\n  #[snafu(whatever, display(\"{message}\"))]\n  Whatever {\n    message: String,\n    #[snafu(source(from(Box<dyn std::error::Error>, Some)))]\n    source: Option<Box<dyn std::error::Error>>,\n  },\n}\nfn is_valid_id(id: u16) -> Result<(), Error> {\n  ensure!(id >= 10, InvalidIdSnafu { id });\n  whatever!(\"Just kidding... this function always fails!\");\n  Ok(())\n}\n```\n\nYou may wish to make the type `Send` and/or `Sync`, allowing your error type to be used in multithreaded programs, by changing `dyn std::error::Error` to `dyn std::error::Error + Send + Sync`.\n### [\u00a7](https://docs.rs/snafu/latest/snafu/#reporting)Reporting\nPrinting an error via [`Display`](https://doc.rust-lang.org/nightly/core/fmt/trait.Display.html \"trait core::fmt::Display\") will only show the top-level error message without the underlying sources. For an extended error report, SNAFU offers a user-friendly error output mechanism. It prints the main error and all underlying errors in the chain, from the most recent to the oldest, plus the [backtrace](https://docs.rs/snafu/latest/snafu/struct.Backtrace.html \"struct snafu::Backtrace\") if applicable. This is done by using the [`report`](https://docs.rs/snafu/latest/snafu/attr.report.html \"attr snafu::report\") procedural macro or the [`Report`](https://docs.rs/snafu/latest/snafu/struct.Report.html \"struct snafu::Report\") type directly.\n```\nuse snafu::prelude::*;\n#[derive(Debug, Snafu)]\n#[snafu(display(\"Could not load configuration file {path}\"))]\nstruct ConfigFileError {\n  source: std::io::Error,\n  path: String,\n}\nfn read_config_file(path: &str) -> Result<String, ConfigFileError> {\n  std::fs::read_to_string(path).context(ConfigFileSnafu { path })\n}\n#[snafu::report]\nfn main() -> Result<(), ConfigFileError> {\n  read_config_file(\"bad-config.ini\")?;\n  Ok(())\n}\n```\n\nThis will print:\n```\nError: Could not load configuration file bad-config.ini\nCaused by this error:\n1: No such file or directory (os error 2)\n```\n\nWhich shows the underlying errors, unlike [`Display`](https://doc.rust-lang.org/nightly/core/fmt/trait.Display.html \"trait core::fmt::Display\"):\n```\nError: Could not load configuration file bad-config.ini\n```\n\n\u2026 and is also more readable than the [`Debug`](https://doc.rust-lang.org/nightly/core/fmt/trait.Debug.html \"trait core::fmt::Debug\") output:\n```\nError: ConfigFileError { source: Os { code: 2, kind: NotFound, message: \"No such file or directory\" }, path: \"bad-config.ini\" }\n```\n\n### [\u00a7](https://docs.rs/snafu/latest/snafu/#next-steps)Next steps\nRead the documentation for the [`Snafu`](https://docs.rs/snafu/latest/snafu/derive.Snafu.html \"derive snafu::Snafu\") macro to see all of the capabilities, then read the [user\u2019s guide](https://docs.rs/snafu/latest/snafu/guide/index.html \"mod snafu::guide\") for deeper understanding.\n## Modules[\u00a7](https://docs.rs/snafu/latest/snafu/#modules)\n\n[futures](https://docs.rs/snafu/latest/snafu/futures/index.html \"mod snafu::futures\")`futures`\n    Additions to the [`TryFuture`](https://docs.rs/futures-core/0.3.31/x86_64-unknown-linux-gnu/futures_core/future/trait.TryFuture.html \"trait futures_core::future::TryFuture\") and [`TryStream`](https://docs.rs/futures-core/0.3.31/x86_64-unknown-linux-gnu/futures_core/stream/trait.TryStream.html \"trait futures_core::stream::TryStream\") traits.\n\n[guide](https://docs.rs/snafu/latest/snafu/guide/index.html \"mod snafu::guide\")`guide`\n    SNAFU user\u2019s guide\n\n[prelude](https://docs.rs/snafu/latest/snafu/prelude/index.html \"mod snafu::prelude\")\n    Traits and macros used by most projects. Add `use snafu::prelude::*` to your code to quickly get started with SNAFU.\n## Macros[\u00a7](https://docs.rs/snafu/latest/snafu/#macros)\n\n[ensure](https://docs.rs/snafu/latest/snafu/macro.ensure.html \"macro snafu::ensure\")\n    Ensure a condition is true. If it is not, return from the function with an error.\n\n[ensure_whatever](https://docs.rs/snafu/latest/snafu/macro.ensure_whatever.html \"macro snafu::ensure_whatever\")`alloc`\n    Ensure a condition is true. If it is not, return a stringly-typed error message.\n\n[location](https://docs.rs/snafu/latest/snafu/macro.location.html \"macro snafu::location\")\n    Constructs a [`Location`](https://docs.rs/snafu/latest/snafu/struct.Location.html \"struct snafu::Location\") using the current file, line, and column.\n\n[whatever](https://docs.rs/snafu/latest/snafu/macro.whatever.html \"macro snafu::whatever\")`alloc`\n    Instantiate and return a stringly-typed error message.\n## Structs[\u00a7](https://docs.rs/snafu/latest/snafu/#structs)\n\n[Backtrace](https://docs.rs/snafu/latest/snafu/struct.Backtrace.html \"struct snafu::Backtrace\")\n    A captured OS thread stack backtrace.\n\n[ChainCompat](https://docs.rs/snafu/latest/snafu/struct.ChainCompat.html \"struct snafu::ChainCompat\")\n    An iterator over an Error and its sources.\n\n[CleanedErrorText](https://docs.rs/snafu/latest/snafu/struct.CleanedErrorText.html \"struct snafu::CleanedErrorText\")`alloc`\n    An iterator over an Error and its sources that removes duplicated text from the error display strings.\n\n[Location](https://docs.rs/snafu/latest/snafu/struct.Location.html \"struct snafu::Location\")\n    The source code location where the error was reported.\n\n[NoneError](https://docs.rs/snafu/latest/snafu/struct.NoneError.html \"struct snafu::NoneError\")\n    A temporary error type used when converting an [`Option`](https://doc.rust-lang.org/nightly/core/option/enum.Option.html \"enum core::option::Option\") into a [`Result`](https://doc.rust-lang.org/nightly/core/result/enum.Result.html \"enum core::result::Result\")\n\n[Report](https://docs.rs/snafu/latest/snafu/struct.Report.html \"struct snafu::Report\")\n    Opinionated solution to format an error in a user-friendly way. Useful as the return type from `main` and test functions.\n\n[Whatever](https://docs.rs/snafu/latest/snafu/struct.Whatever.html \"struct snafu::Whatever\")`alloc`\n    A basic error type that you can use as a first step to better error handling.\n## Traits[\u00a7](https://docs.rs/snafu/latest/snafu/#traits)\n\n[AsBacktrace](https://docs.rs/snafu/latest/snafu/trait.AsBacktrace.html \"trait snafu::AsBacktrace\")\n    View a backtrace-like value as an optional backtrace.\n\n[AsErrorSource](https://docs.rs/snafu/latest/snafu/trait.AsErrorSource.html \"trait snafu::AsErrorSource\")\n    Converts the receiver into an [`Error`](https://doc.rust-lang.org/nightly/core/error/trait.Error.html \"trait core::error::Error\") trait object, suitable for use in [`Error::source`](https://doc.rust-lang.org/nightly/core/error/trait.Error.html#method.source \"method core::error::Error::source\").\n\n[ErrorCompat](https://docs.rs/snafu/latest/snafu/trait.ErrorCompat.html \"trait snafu::ErrorCompat\")\n    Backports changes to the [`Error`](https://doc.rust-lang.org/nightly/core/error/trait.Error.html \"trait core::error::Error\") trait to versions of Rust lacking them.\n\n[FromString](https://docs.rs/snafu/latest/snafu/trait.FromString.html \"trait snafu::FromString\")`alloc`\n    Takes a string message and builds the corresponding error.\n\n[GenerateImplicitData](https://docs.rs/snafu/latest/snafu/trait.GenerateImplicitData.html \"trait snafu::GenerateImplicitData\")\n    Construct data to be included as part of an error. The data must require no arguments to be created.\n\n[IntoError](https://docs.rs/snafu/latest/snafu/trait.IntoError.html \"trait snafu::IntoError\")\n    Combines an underlying error with additional information about the error.\n\n[OptionExt](https://docs.rs/snafu/latest/snafu/trait.OptionExt.html \"trait snafu::OptionExt\")\n    Additions to [`Option`](https://doc.rust-lang.org/nightly/core/option/enum.Option.html \"enum core::option::Option\").\n\n[ResultExt](https://docs.rs/snafu/latest/snafu/trait.ResultExt.html \"trait snafu::ResultExt\")\n    Additions to [`Result`](https://doc.rust-lang.org/nightly/core/result/enum.Result.html \"enum core::result::Result\").\n## Attribute Macros[\u00a7](https://docs.rs/snafu/latest/snafu/#attributes)\n\n[report](https://docs.rs/snafu/latest/snafu/attr.report.html \"attr snafu::report\")\n    Adapts a function to provide user-friendly error output for `main` functions and tests.\n## Derive Macros[\u00a7](https://docs.rs/snafu/latest/snafu/#derives)\n\n[Snafu](https://docs.rs/snafu/latest/snafu/derive.Snafu.html \"derive snafu::Snafu\")\n    The `Snafu` macro is the entrypoint to defining your own error types. It is designed to require little configuration for the recommended and typical usecases while still offering flexibility for unique situations.\n",
            "markdown_with_citations": "[](https://docs.rs/snafu/latest/snafu/all.html \"show sidebar\")\n# Crate snafuCopy item path\nSettings\u27e81\u27e9\nHelp\u27e82\u27e9\nSummarySource\u27e83\u27e9\nExpand description\n## \u00a7\u27e84\u27e9SNAFU\nSNAFU is a library to easily generate errors and add information to underlying errors, especially when the same underlying error type can occur in different contexts.\nFor detailed information, please see the `Snafu`\u27e85\u27e9 macro and the user\u2019s guide\u27e86\u27e9.\n### \u00a7\u27e87\u27e9Features\n  * Turnkey errors based on strings\u27e88\u27e9\n  * Custom error types\u27e85\u27e9\n    * Including a conversion path from turnkey errors\n  * Backtraces\u27e89\u27e9\n  * Extension traits for \n    * `Results`\u27e810\u27e9\n    * `Options`\u27e811\u27e9\n    * `Futures`\u27e812\u27e9\n    * `Streams`\u27e813\u27e9\n  * Error reporting\u27e814\u27e9\n  * Suitable for libraries and applications\n  * `no_std` compatibility\n  * Generic types and lifetimes\n\n\n### \u00a7\u27e815\u27e9Quick start\nIf you want to report errors without hassle, start with the `Whatever`\u27e88\u27e9 type and the `whatever!`\u27e816\u27e9 macro:\n```\nuse snafu::{prelude::*, Whatever};\nfn is_valid_id(id: u16) -> Result<(), Whatever> {\n  if id < 10 {\n    whatever!(\"ID may not be less than 10, but it was {id}\");\n  }\n  Ok(())\n}\n```\n\nYou can also use it to wrap any other error:\n```\nuse snafu::{prelude::*, Whatever};\nfn read_config_file(path: &str) -> Result<String, Whatever> {\n  std::fs::read_to_string(path)\n    .with_whatever_context(|_| format!(\"Could not read file {path}\"))\n}\n```\n\n`Whatever`\u27e88\u27e9 allows for a short message and tracks a `Backtrace`\u27e89\u27e9 for every error:\n```\nuse snafu::{prelude::*, ErrorCompat, Whatever};\nif let Err(e) = returns_an_error() {\n  eprintln!(\"An error occurred: {e}\");\n  if let Some(bt) = ErrorCompat::backtrace(&e) {\n    eprintln!(\"{bt}\");\n  }\n}\n```\n\n### \u00a7\u27e817\u27e9Custom error types\nMany projects will hit limitations of the `Whatever` type. When that occurs, it\u2019s time to create your own error type by deriving `Snafu`\u27e85\u27e9!\n#### \u00a7\u27e818\u27e9Struct style\nSNAFU will read your error struct definition and create a _context selector_ type (called `InvalidIdSnafu` in this example). These context selectors are used with the `ensure!`\u27e819\u27e9 macro to provide ergonomic error creation:\n```\nuse snafu::prelude::*;\n#[derive(Debug, Snafu)]\n#[snafu(display(\"ID may not be less than 10, but it was {id}\"))]\nstruct InvalidIdError {\n  id: u16,\n}\nfn is_valid_id(id: u16) -> Result<(), InvalidIdError> {\n  ensure!(id >= 10, InvalidIdSnafu { id });\n  Ok(())\n}\n```\n\nIf you add a `source` field to your error, you can then wrap an underlying error using the `context`\u27e820\u27e9 extension method:\n```\nuse snafu::prelude::*;\n#[derive(Debug, Snafu)]\n#[snafu(display(\"Could not read file {path}\"))]\nstruct ConfigFileError {\n  source: std::io::Error,\n  path: String,\n}\nfn read_config_file(path: &str) -> Result<String, ConfigFileError> {\n  std::fs::read_to_string(path).context(ConfigFileSnafu { path })\n}\n```\n\n#### \u00a7\u27e821\u27e9Enum style\nWhile error structs are good for constrained cases, they don\u2019t allow for reporting multiple possible kinds of errors at one time. Error enums solve that problem.\nSNAFU will read your error enum definition and create a _context selector_ type for each variant (called `InvalidIdSnafu` in this example). These context selectors are used with the `ensure!`\u27e819\u27e9 macro to provide ergonomic error creation:\n```\nuse snafu::prelude::*;\n#[derive(Debug, Snafu)]\nenum Error {\n  #[snafu(display(\"ID may not be less than 10, but it was {id}\"))]\n  InvalidId { id: u16 },\n}\nfn is_valid_id(id: u16) -> Result<(), Error> {\n  ensure!(id >= 10, InvalidIdSnafu { id });\n  Ok(())\n}\n```\n\nIf you add a `source` field to a variant, you can then wrap an underlying error using the `context`\u27e820\u27e9 extension method:\n```\nuse snafu::prelude::*;\n#[derive(Debug, Snafu)]\nenum Error {\n  #[snafu(display(\"Could not read file {path}\"))]\n  ConfigFile {\n    source: std::io::Error,\n    path: String,\n  },\n}\nfn read_config_file(path: &str) -> Result<String, Error> {\n  std::fs::read_to_string(path).context(ConfigFileSnafu { path })\n}\n```\n\nYou can combine the power of the `whatever!`\u27e816\u27e9 macro with an enum error type. This is great if you started out with `Whatever`\u27e88\u27e9 and are moving to a custom error type:\n```\nuse snafu::prelude::*;\n#[derive(Debug, Snafu)]\nenum Error {\n  #[snafu(display(\"ID may not be less than 10, but it was {id}\"))]\n  InvalidId { id: u16 },\n  #[snafu(whatever, display(\"{message}\"))]\n  Whatever {\n    message: String,\n    #[snafu(source(from(Box<dyn std::error::Error>, Some)))]\n    source: Option<Box<dyn std::error::Error>>,\n  },\n}\nfn is_valid_id(id: u16) -> Result<(), Error> {\n  ensure!(id >= 10, InvalidIdSnafu { id });\n  whatever!(\"Just kidding... this function always fails!\");\n  Ok(())\n}\n```\n\nYou may wish to make the type `Send` and/or `Sync`, allowing your error type to be used in multithreaded programs, by changing `dyn std::error::Error` to `dyn std::error::Error + Send + Sync`.\n### \u00a7\u27e814\u27e9Reporting\nPrinting an error via `Display`\u27e822\u27e9 will only show the top-level error message without the underlying sources. For an extended error report, SNAFU offers a user-friendly error output mechanism. It prints the main error and all underlying errors in the chain, from the most recent to the oldest, plus the backtrace\u27e89\u27e9 if applicable. This is done by using the `report`\u27e823\u27e9 procedural macro or the `Report`\u27e824\u27e9 type directly.\n```\nuse snafu::prelude::*;\n#[derive(Debug, Snafu)]\n#[snafu(display(\"Could not load configuration file {path}\"))]\nstruct ConfigFileError {\n  source: std::io::Error,\n  path: String,\n}\nfn read_config_file(path: &str) -> Result<String, ConfigFileError> {\n  std::fs::read_to_string(path).context(ConfigFileSnafu { path })\n}\n#[snafu::report]\nfn main() -> Result<(), ConfigFileError> {\n  read_config_file(\"bad-config.ini\")?;\n  Ok(())\n}\n```\n\nThis will print:\n```\nError: Could not load configuration file bad-config.ini\nCaused by this error:\n1: No such file or directory (os error 2)\n```\n\nWhich shows the underlying errors, unlike `Display`\u27e822\u27e9:\n```\nError: Could not load configuration file bad-config.ini\n```\n\n\u2026 and is also more readable than the `Debug`\u27e825\u27e9 output:\n```\nError: ConfigFileError { source: Os { code: 2, kind: NotFound, message: \"No such file or directory\" }, path: \"bad-config.ini\" }\n```\n\n### \u00a7\u27e826\u27e9Next steps\nRead the documentation for the `Snafu`\u27e85\u27e9 macro to see all of the capabilities, then read the user\u2019s guide\u27e86\u27e9 for deeper understanding.\n## Modules\u00a7\u27e827\u27e9\n\nfutures\u27e828\u27e9`futures`\n    Additions to the `TryFuture`\u27e829\u27e9 and `TryStream`\u27e830\u27e9 traits.\n\nguide\u27e86\u27e9`guide`\n    SNAFU user\u2019s guide\n\nprelude\u27e831\u27e9\n    Traits and macros used by most projects. Add `use snafu::prelude::*` to your code to quickly get started with SNAFU.\n## Macros\u00a7\u27e832\u27e9\n\nensure\u27e819\u27e9\n    Ensure a condition is true. If it is not, return from the function with an error.\n\nensure_whatever\u27e833\u27e9`alloc`\n    Ensure a condition is true. If it is not, return a stringly-typed error message.\n\nlocation\u27e834\u27e9\n    Constructs a `Location`\u27e835\u27e9 using the current file, line, and column.\n\nwhatever\u27e816\u27e9`alloc`\n    Instantiate and return a stringly-typed error message.\n## Structs\u00a7\u27e836\u27e9\n\nBacktrace\u27e89\u27e9\n    A captured OS thread stack backtrace.\n\nChainCompat\u27e837\u27e9\n    An iterator over an Error and its sources.\n\nCleanedErrorText\u27e838\u27e9`alloc`\n    An iterator over an Error and its sources that removes duplicated text from the error display strings.\n\nLocation\u27e835\u27e9\n    The source code location where the error was reported.\n\nNoneError\u27e839\u27e9\n    A temporary error type used when converting an `Option`\u27e840\u27e9 into a `Result`\u27e841\u27e9\n\nReport\u27e824\u27e9\n    Opinionated solution to format an error in a user-friendly way. Useful as the return type from `main` and test functions.\n\nWhatever\u27e88\u27e9`alloc`\n    A basic error type that you can use as a first step to better error handling.\n## Traits\u00a7\u27e842\u27e9\n\nAsBacktrace\u27e843\u27e9\n    View a backtrace-like value as an optional backtrace.\n\nAsErrorSource\u27e844\u27e9\n    Converts the receiver into an `Error`\u27e845\u27e9 trait object, suitable for use in `Error::source`\u27e846\u27e9.\n\nErrorCompat\u27e847\u27e9\n    Backports changes to the `Error`\u27e845\u27e9 trait to versions of Rust lacking them.\n\nFromString\u27e848\u27e9`alloc`\n    Takes a string message and builds the corresponding error.\n\nGenerateImplicitData\u27e849\u27e9\n    Construct data to be included as part of an error. The data must require no arguments to be created.\n\nIntoError\u27e850\u27e9\n    Combines an underlying error with additional information about the error.\n\nOptionExt\u27e811\u27e9\n    Additions to `Option`\u27e840\u27e9.\n\nResultExt\u27e810\u27e9\n    Additions to `Result`\u27e841\u27e9.\n## Attribute Macros\u00a7\u27e851\u27e9\n\nreport\u27e823\u27e9\n    Adapts a function to provide user-friendly error output for `main` functions and tests.\n## Derive Macros\u00a7\u27e852\u27e9\n\nSnafu\u27e85\u27e9\n    The `Snafu` macro is the entrypoint to defining your own error types. It is designed to require little configuration for the recommended and typical usecases while still offering flexibility for unique situations.\n",
            "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://docs.rs/snafu/latest/settings.html: Settings\n\u27e82\u27e9 https://docs.rs/snafu/latest/help.html: Help\n\u27e83\u27e9 https://docs.rs/snafu/latest/src/snafu/lib.rs.html#1-1680: Source\n\u27e84\u27e9 https://docs.rs/snafu/latest/snafu/#snafu: \u00a7\n\u27e85\u27e9 https://docs.rs/snafu/latest/snafu/derive.Snafu.html: derive snafu::Snafu - `Snafu`\n\u27e86\u27e9 https://docs.rs/snafu/latest/snafu/guide/index.html: mod snafu::guide - user\u2019s guide\n\u27e87\u27e9 https://docs.rs/snafu/latest/snafu/#features: \u00a7\n\u27e88\u27e9 https://docs.rs/snafu/latest/snafu/struct.Whatever.html: struct snafu::Whatever - Turnkey errors based on strings\n\u27e89\u27e9 https://docs.rs/snafu/latest/snafu/struct.Backtrace.html: struct snafu::Backtrace - Backtraces\n\u27e810\u27e9 https://docs.rs/snafu/latest/snafu/trait.ResultExt.html: trait snafu::ResultExt - `Results`\n\u27e811\u27e9 https://docs.rs/snafu/latest/snafu/trait.OptionExt.html: trait snafu::OptionExt - `Options`\n\u27e812\u27e9 https://docs.rs/snafu/latest/snafu/futures/trait.TryFutureExt.html: trait snafu::futures::TryFutureExt - `Futures`\n\u27e813\u27e9 https://docs.rs/snafu/latest/snafu/futures/trait.TryStreamExt.html: trait snafu::futures::TryStreamExt - `Streams`\n\u27e814\u27e9 https://docs.rs/snafu/latest/snafu/#reporting: Error reporting\n\u27e815\u27e9 https://docs.rs/snafu/latest/snafu/#quick-start: \u00a7\n\u27e816\u27e9 https://docs.rs/snafu/latest/snafu/macro.whatever.html: macro snafu::whatever - `whatever!`\n\u27e817\u27e9 https://docs.rs/snafu/latest/snafu/#custom-error-types: \u00a7\n\u27e818\u27e9 https://docs.rs/snafu/latest/snafu/#struct-style: \u00a7\n\u27e819\u27e9 https://docs.rs/snafu/latest/snafu/macro.ensure.html: macro snafu::ensure - `ensure!`\n\u27e820\u27e9 https://docs.rs/snafu/latest/snafu/trait.ResultExt.html#tymethod.context: method snafu::ResultExt::context - `context`\n\u27e821\u27e9 https://docs.rs/snafu/latest/snafu/#enum-style: \u00a7\n\u27e822\u27e9 https://doc.rust-lang.org/nightly/core/fmt/trait.Display.html: trait core::fmt::Display - `Display`\n\u27e823\u27e9 https://docs.rs/snafu/latest/snafu/attr.report.html: attr snafu::report - `report`\n\u27e824\u27e9 https://docs.rs/snafu/latest/snafu/struct.Report.html: struct snafu::Report - `Report`\n\u27e825\u27e9 https://doc.rust-lang.org/nightly/core/fmt/trait.Debug.html: trait core::fmt::Debug - `Debug`\n\u27e826\u27e9 https://docs.rs/snafu/latest/snafu/#next-steps: \u00a7\n\u27e827\u27e9 https://docs.rs/snafu/latest/snafu/#modules: \u00a7\n\u27e828\u27e9 https://docs.rs/snafu/latest/snafu/futures/index.html: mod snafu::futures - futures\n\u27e829\u27e9 https://docs.rs/futures-core/0.3.31/x86_64-unknown-linux-gnu/futures_core/future/trait.TryFuture.html: trait futures_core::future::TryFuture - `TryFuture`\n\u27e830\u27e9 https://docs.rs/futures-core/0.3.31/x86_64-unknown-linux-gnu/futures_core/stream/trait.TryStream.html: trait futures_core::stream::TryStream - `TryStream`\n\u27e831\u27e9 https://docs.rs/snafu/latest/snafu/prelude/index.html: mod snafu::prelude - prelude\n\u27e832\u27e9 https://docs.rs/snafu/latest/snafu/#macros: \u00a7\n\u27e833\u27e9 https://docs.rs/snafu/latest/snafu/macro.ensure_whatever.html: macro snafu::ensure_whatever - ensure_whatever\n\u27e834\u27e9 https://docs.rs/snafu/latest/snafu/macro.location.html: macro snafu::location - location\n\u27e835\u27e9 https://docs.rs/snafu/latest/snafu/struct.Location.html: struct snafu::Location - `Location`\n\u27e836\u27e9 https://docs.rs/snafu/latest/snafu/#structs: \u00a7\n\u27e837\u27e9 https://docs.rs/snafu/latest/snafu/struct.ChainCompat.html: struct snafu::ChainCompat - ChainCompat\n\u27e838\u27e9 https://docs.rs/snafu/latest/snafu/struct.CleanedErrorText.html: struct snafu::CleanedErrorText - CleanedErrorText\n\u27e839\u27e9 https://docs.rs/snafu/latest/snafu/struct.NoneError.html: struct snafu::NoneError - NoneError\n\u27e840\u27e9 https://doc.rust-lang.org/nightly/core/option/enum.Option.html: enum core::option::Option - `Option`\n\u27e841\u27e9 https://doc.rust-lang.org/nightly/core/result/enum.Result.html: enum core::result::Result - `Result`\n\u27e842\u27e9 https://docs.rs/snafu/latest/snafu/#traits: \u00a7\n\u27e843\u27e9 https://docs.rs/snafu/latest/snafu/trait.AsBacktrace.html: trait snafu::AsBacktrace - AsBacktrace\n\u27e844\u27e9 https://docs.rs/snafu/latest/snafu/trait.AsErrorSource.html: trait snafu::AsErrorSource - AsErrorSource\n\u27e845\u27e9 https://doc.rust-lang.org/nightly/core/error/trait.Error.html: trait core::error::Error - `Error`\n\u27e846\u27e9 https://doc.rust-lang.org/nightly/core/error/trait.Error.html#method.source: method core::error::Error::source - `Error::source`\n\u27e847\u27e9 https://docs.rs/snafu/latest/snafu/trait.ErrorCompat.html: trait snafu::ErrorCompat - ErrorCompat\n\u27e848\u27e9 https://docs.rs/snafu/latest/snafu/trait.FromString.html: trait snafu::FromString - FromString\n\u27e849\u27e9 https://docs.rs/snafu/latest/snafu/trait.GenerateImplicitData.html: trait snafu::GenerateImplicitData - GenerateImplicitData\n\u27e850\u27e9 https://docs.rs/snafu/latest/snafu/trait.IntoError.html: trait snafu::IntoError - IntoError\n\u27e851\u27e9 https://docs.rs/snafu/latest/snafu/#attributes: \u00a7\n\u27e852\u27e9 https://docs.rs/snafu/latest/snafu/#derives: \u00a7\n",
            "fit_markdown": "",
            "fit_html": ""
          },
          "downloads": 0,
          "github_stars": 0,
          "dependencies": [],
          "features": {},
          "code_snippets": [],
          "readme_sections": {},
          "librs_downloads": null,
          "source": "crates.io",
          "enhanced_scraping": {},
          "enhanced_features": [],
          "enhanced_dependencies": []
        },
        "enriched_crate": {
          "name": "snafu",
          "version": "0.8.6",
          "description": "ALLOW: Positive community sentiment",
          "repository": "",
          "keywords": [],
          "categories": [],
          "readme": {
            "raw_markdown": "[](https://docs.rs/snafu/latest/snafu/all.html \"show sidebar\")\n# Crate snafuCopy item path\n[Settings](https://docs.rs/snafu/latest/settings.html)\n[Help](https://docs.rs/snafu/latest/help.html)\nSummary[Source](https://docs.rs/snafu/latest/src/snafu/lib.rs.html#1-1680)\nExpand description\n## [\u00a7](https://docs.rs/snafu/latest/snafu/#snafu)SNAFU\nSNAFU is a library to easily generate errors and add information to underlying errors, especially when the same underlying error type can occur in different contexts.\nFor detailed information, please see the [`Snafu`](https://docs.rs/snafu/latest/snafu/derive.Snafu.html \"derive snafu::Snafu\") macro and the [user\u2019s guide](https://docs.rs/snafu/latest/snafu/guide/index.html \"mod snafu::guide\").\n### [\u00a7](https://docs.rs/snafu/latest/snafu/#features)Features\n  * [Turnkey errors based on strings](https://docs.rs/snafu/latest/snafu/struct.Whatever.html \"struct snafu::Whatever\")\n  * [Custom error types](https://docs.rs/snafu/latest/snafu/derive.Snafu.html \"derive snafu::Snafu\")\n    * Including a conversion path from turnkey errors\n  * [Backtraces](https://docs.rs/snafu/latest/snafu/struct.Backtrace.html \"struct snafu::Backtrace\")\n  * Extension traits for \n    * [`Results`](https://docs.rs/snafu/latest/snafu/trait.ResultExt.html \"trait snafu::ResultExt\")\n    * [`Options`](https://docs.rs/snafu/latest/snafu/trait.OptionExt.html \"trait snafu::OptionExt\")\n    * [`Futures`](https://docs.rs/snafu/latest/snafu/futures/trait.TryFutureExt.html \"trait snafu::futures::TryFutureExt\")\n    * [`Streams`](https://docs.rs/snafu/latest/snafu/futures/trait.TryStreamExt.html \"trait snafu::futures::TryStreamExt\")\n  * [Error reporting](https://docs.rs/snafu/latest/snafu/#reporting)\n  * Suitable for libraries and applications\n  * `no_std` compatibility\n  * Generic types and lifetimes\n\n\n### [\u00a7](https://docs.rs/snafu/latest/snafu/#quick-start)Quick start\nIf you want to report errors without hassle, start with the [`Whatever`](https://docs.rs/snafu/latest/snafu/struct.Whatever.html \"struct snafu::Whatever\") type and the [`whatever!`](https://docs.rs/snafu/latest/snafu/macro.whatever.html \"macro snafu::whatever\") macro:\n```\nuse snafu::{prelude::*, Whatever};\nfn is_valid_id(id: u16) -> Result<(), Whatever> {\n  if id < 10 {\n    whatever!(\"ID may not be less than 10, but it was {id}\");\n  }\n  Ok(())\n}\n```\n\nYou can also use it to wrap any other error:\n```\nuse snafu::{prelude::*, Whatever};\nfn read_config_file(path: &str) -> Result<String, Whatever> {\n  std::fs::read_to_string(path)\n    .with_whatever_context(|_| format!(\"Could not read file {path}\"))\n}\n```\n\n[`Whatever`](https://docs.rs/snafu/latest/snafu/struct.Whatever.html \"struct snafu::Whatever\") allows for a short message and tracks a [`Backtrace`](https://docs.rs/snafu/latest/snafu/struct.Backtrace.html \"struct snafu::Backtrace\") for every error:\n```\nuse snafu::{prelude::*, ErrorCompat, Whatever};\nif let Err(e) = returns_an_error() {\n  eprintln!(\"An error occurred: {e}\");\n  if let Some(bt) = ErrorCompat::backtrace(&e) {\n    eprintln!(\"{bt}\");\n  }\n}\n```\n\n### [\u00a7](https://docs.rs/snafu/latest/snafu/#custom-error-types)Custom error types\nMany projects will hit limitations of the `Whatever` type. When that occurs, it\u2019s time to create your own error type by deriving [`Snafu`](https://docs.rs/snafu/latest/snafu/derive.Snafu.html \"derive snafu::Snafu\")!\n#### [\u00a7](https://docs.rs/snafu/latest/snafu/#struct-style)Struct style\nSNAFU will read your error struct definition and create a _context selector_ type (called `InvalidIdSnafu` in this example). These context selectors are used with the [`ensure!`](https://docs.rs/snafu/latest/snafu/macro.ensure.html \"macro snafu::ensure\") macro to provide ergonomic error creation:\n```\nuse snafu::prelude::*;\n#[derive(Debug, Snafu)]\n#[snafu(display(\"ID may not be less than 10, but it was {id}\"))]\nstruct InvalidIdError {\n  id: u16,\n}\nfn is_valid_id(id: u16) -> Result<(), InvalidIdError> {\n  ensure!(id >= 10, InvalidIdSnafu { id });\n  Ok(())\n}\n```\n\nIf you add a `source` field to your error, you can then wrap an underlying error using the [`context`](https://docs.rs/snafu/latest/snafu/trait.ResultExt.html#tymethod.context \"method snafu::ResultExt::context\") extension method:\n```\nuse snafu::prelude::*;\n#[derive(Debug, Snafu)]\n#[snafu(display(\"Could not read file {path}\"))]\nstruct ConfigFileError {\n  source: std::io::Error,\n  path: String,\n}\nfn read_config_file(path: &str) -> Result<String, ConfigFileError> {\n  std::fs::read_to_string(path).context(ConfigFileSnafu { path })\n}\n```\n\n#### [\u00a7](https://docs.rs/snafu/latest/snafu/#enum-style)Enum style\nWhile error structs are good for constrained cases, they don\u2019t allow for reporting multiple possible kinds of errors at one time. Error enums solve that problem.\nSNAFU will read your error enum definition and create a _context selector_ type for each variant (called `InvalidIdSnafu` in this example). These context selectors are used with the [`ensure!`](https://docs.rs/snafu/latest/snafu/macro.ensure.html \"macro snafu::ensure\") macro to provide ergonomic error creation:\n```\nuse snafu::prelude::*;\n#[derive(Debug, Snafu)]\nenum Error {\n  #[snafu(display(\"ID may not be less than 10, but it was {id}\"))]\n  InvalidId { id: u16 },\n}\nfn is_valid_id(id: u16) -> Result<(), Error> {\n  ensure!(id >= 10, InvalidIdSnafu { id });\n  Ok(())\n}\n```\n\nIf you add a `source` field to a variant, you can then wrap an underlying error using the [`context`](https://docs.rs/snafu/latest/snafu/trait.ResultExt.html#tymethod.context \"method snafu::ResultExt::context\") extension method:\n```\nuse snafu::prelude::*;\n#[derive(Debug, Snafu)]\nenum Error {\n  #[snafu(display(\"Could not read file {path}\"))]\n  ConfigFile {\n    source: std::io::Error,\n    path: String,\n  },\n}\nfn read_config_file(path: &str) -> Result<String, Error> {\n  std::fs::read_to_string(path).context(ConfigFileSnafu { path })\n}\n```\n\nYou can combine the power of the [`whatever!`](https://docs.rs/snafu/latest/snafu/macro.whatever.html \"macro snafu::whatever\") macro with an enum error type. This is great if you started out with [`Whatever`](https://docs.rs/snafu/latest/snafu/struct.Whatever.html \"struct snafu::Whatever\") and are moving to a custom error type:\n```\nuse snafu::prelude::*;\n#[derive(Debug, Snafu)]\nenum Error {\n  #[snafu(display(\"ID may not be less than 10, but it was {id}\"))]\n  InvalidId { id: u16 },\n  #[snafu(whatever, display(\"{message}\"))]\n  Whatever {\n    message: String,\n    #[snafu(source(from(Box<dyn std::error::Error>, Some)))]\n    source: Option<Box<dyn std::error::Error>>,\n  },\n}\nfn is_valid_id(id: u16) -> Result<(), Error> {\n  ensure!(id >= 10, InvalidIdSnafu { id });\n  whatever!(\"Just kidding... this function always fails!\");\n  Ok(())\n}\n```\n\nYou may wish to make the type `Send` and/or `Sync`, allowing your error type to be used in multithreaded programs, by changing `dyn std::error::Error` to `dyn std::error::Error + Send + Sync`.\n### [\u00a7](https://docs.rs/snafu/latest/snafu/#reporting)Reporting\nPrinting an error via [`Display`](https://doc.rust-lang.org/nightly/core/fmt/trait.Display.html \"trait core::fmt::Display\") will only show the top-level error message without the underlying sources. For an extended error report, SNAFU offers a user-friendly error output mechanism. It prints the main error and all underlying errors in the chain, from the most recent to the oldest, plus the [backtrace](https://docs.rs/snafu/latest/snafu/struct.Backtrace.html \"struct snafu::Backtrace\") if applicable. This is done by using the [`report`](https://docs.rs/snafu/latest/snafu/attr.report.html \"attr snafu::report\") procedural macro or the [`Report`](https://docs.rs/snafu/latest/snafu/struct.Report.html \"struct snafu::Report\") type directly.\n```\nuse snafu::prelude::*;\n#[derive(Debug, Snafu)]\n#[snafu(display(\"Could not load configuration file {path}\"))]\nstruct ConfigFileError {\n  source: std::io::Error,\n  path: String,\n}\nfn read_config_file(path: &str) -> Result<String, ConfigFileError> {\n  std::fs::read_to_string(path).context(ConfigFileSnafu { path })\n}\n#[snafu::report]\nfn main() -> Result<(), ConfigFileError> {\n  read_config_file(\"bad-config.ini\")?;\n  Ok(())\n}\n```\n\nThis will print:\n```\nError: Could not load configuration file bad-config.ini\nCaused by this error:\n1: No such file or directory (os error 2)\n```\n\nWhich shows the underlying errors, unlike [`Display`](https://doc.rust-lang.org/nightly/core/fmt/trait.Display.html \"trait core::fmt::Display\"):\n```\nError: Could not load configuration file bad-config.ini\n```\n\n\u2026 and is also more readable than the [`Debug`](https://doc.rust-lang.org/nightly/core/fmt/trait.Debug.html \"trait core::fmt::Debug\") output:\n```\nError: ConfigFileError { source: Os { code: 2, kind: NotFound, message: \"No such file or directory\" }, path: \"bad-config.ini\" }\n```\n\n### [\u00a7](https://docs.rs/snafu/latest/snafu/#next-steps)Next steps\nRead the documentation for the [`Snafu`](https://docs.rs/snafu/latest/snafu/derive.Snafu.html \"derive snafu::Snafu\") macro to see all of the capabilities, then read the [user\u2019s guide](https://docs.rs/snafu/latest/snafu/guide/index.html \"mod snafu::guide\") for deeper understanding.\n## Modules[\u00a7](https://docs.rs/snafu/latest/snafu/#modules)\n\n[futures](https://docs.rs/snafu/latest/snafu/futures/index.html \"mod snafu::futures\")`futures`\n    Additions to the [`TryFuture`](https://docs.rs/futures-core/0.3.31/x86_64-unknown-linux-gnu/futures_core/future/trait.TryFuture.html \"trait futures_core::future::TryFuture\") and [`TryStream`](https://docs.rs/futures-core/0.3.31/x86_64-unknown-linux-gnu/futures_core/stream/trait.TryStream.html \"trait futures_core::stream::TryStream\") traits.\n\n[guide](https://docs.rs/snafu/latest/snafu/guide/index.html \"mod snafu::guide\")`guide`\n    SNAFU user\u2019s guide\n\n[prelude](https://docs.rs/snafu/latest/snafu/prelude/index.html \"mod snafu::prelude\")\n    Traits and macros used by most projects. Add `use snafu::prelude::*` to your code to quickly get started with SNAFU.\n## Macros[\u00a7](https://docs.rs/snafu/latest/snafu/#macros)\n\n[ensure](https://docs.rs/snafu/latest/snafu/macro.ensure.html \"macro snafu::ensure\")\n    Ensure a condition is true. If it is not, return from the function with an error.\n\n[ensure_whatever](https://docs.rs/snafu/latest/snafu/macro.ensure_whatever.html \"macro snafu::ensure_whatever\")`alloc`\n    Ensure a condition is true. If it is not, return a stringly-typed error message.\n\n[location](https://docs.rs/snafu/latest/snafu/macro.location.html \"macro snafu::location\")\n    Constructs a [`Location`](https://docs.rs/snafu/latest/snafu/struct.Location.html \"struct snafu::Location\") using the current file, line, and column.\n\n[whatever](https://docs.rs/snafu/latest/snafu/macro.whatever.html \"macro snafu::whatever\")`alloc`\n    Instantiate and return a stringly-typed error message.\n## Structs[\u00a7](https://docs.rs/snafu/latest/snafu/#structs)\n\n[Backtrace](https://docs.rs/snafu/latest/snafu/struct.Backtrace.html \"struct snafu::Backtrace\")\n    A captured OS thread stack backtrace.\n\n[ChainCompat](https://docs.rs/snafu/latest/snafu/struct.ChainCompat.html \"struct snafu::ChainCompat\")\n    An iterator over an Error and its sources.\n\n[CleanedErrorText](https://docs.rs/snafu/latest/snafu/struct.CleanedErrorText.html \"struct snafu::CleanedErrorText\")`alloc`\n    An iterator over an Error and its sources that removes duplicated text from the error display strings.\n\n[Location](https://docs.rs/snafu/latest/snafu/struct.Location.html \"struct snafu::Location\")\n    The source code location where the error was reported.\n\n[NoneError](https://docs.rs/snafu/latest/snafu/struct.NoneError.html \"struct snafu::NoneError\")\n    A temporary error type used when converting an [`Option`](https://doc.rust-lang.org/nightly/core/option/enum.Option.html \"enum core::option::Option\") into a [`Result`](https://doc.rust-lang.org/nightly/core/result/enum.Result.html \"enum core::result::Result\")\n\n[Report](https://docs.rs/snafu/latest/snafu/struct.Report.html \"struct snafu::Report\")\n    Opinionated solution to format an error in a user-friendly way. Useful as the return type from `main` and test functions.\n\n[Whatever](https://docs.rs/snafu/latest/snafu/struct.Whatever.html \"struct snafu::Whatever\")`alloc`\n    A basic error type that you can use as a first step to better error handling.\n## Traits[\u00a7](https://docs.rs/snafu/latest/snafu/#traits)\n\n[AsBacktrace](https://docs.rs/snafu/latest/snafu/trait.AsBacktrace.html \"trait snafu::AsBacktrace\")\n    View a backtrace-like value as an optional backtrace.\n\n[AsErrorSource](https://docs.rs/snafu/latest/snafu/trait.AsErrorSource.html \"trait snafu::AsErrorSource\")\n    Converts the receiver into an [`Error`](https://doc.rust-lang.org/nightly/core/error/trait.Error.html \"trait core::error::Error\") trait object, suitable for use in [`Error::source`](https://doc.rust-lang.org/nightly/core/error/trait.Error.html#method.source \"method core::error::Error::source\").\n\n[ErrorCompat](https://docs.rs/snafu/latest/snafu/trait.ErrorCompat.html \"trait snafu::ErrorCompat\")\n    Backports changes to the [`Error`](https://doc.rust-lang.org/nightly/core/error/trait.Error.html \"trait core::error::Error\") trait to versions of Rust lacking them.\n\n[FromString](https://docs.rs/snafu/latest/snafu/trait.FromString.html \"trait snafu::FromString\")`alloc`\n    Takes a string message and builds the corresponding error.\n\n[GenerateImplicitData](https://docs.rs/snafu/latest/snafu/trait.GenerateImplicitData.html \"trait snafu::GenerateImplicitData\")\n    Construct data to be included as part of an error. The data must require no arguments to be created.\n\n[IntoError](https://docs.rs/snafu/latest/snafu/trait.IntoError.html \"trait snafu::IntoError\")\n    Combines an underlying error with additional information about the error.\n\n[OptionExt](https://docs.rs/snafu/latest/snafu/trait.OptionExt.html \"trait snafu::OptionExt\")\n    Additions to [`Option`](https://doc.rust-lang.org/nightly/core/option/enum.Option.html \"enum core::option::Option\").\n\n[ResultExt](https://docs.rs/snafu/latest/snafu/trait.ResultExt.html \"trait snafu::ResultExt\")\n    Additions to [`Result`](https://doc.rust-lang.org/nightly/core/result/enum.Result.html \"enum core::result::Result\").\n## Attribute Macros[\u00a7](https://docs.rs/snafu/latest/snafu/#attributes)\n\n[report](https://docs.rs/snafu/latest/snafu/attr.report.html \"attr snafu::report\")\n    Adapts a function to provide user-friendly error output for `main` functions and tests.\n## Derive Macros[\u00a7](https://docs.rs/snafu/latest/snafu/#derives)\n\n[Snafu](https://docs.rs/snafu/latest/snafu/derive.Snafu.html \"derive snafu::Snafu\")\n    The `Snafu` macro is the entrypoint to defining your own error types. It is designed to require little configuration for the recommended and typical usecases while still offering flexibility for unique situations.\n",
            "markdown_with_citations": "[](https://docs.rs/snafu/latest/snafu/all.html \"show sidebar\")\n# Crate snafuCopy item path\nSettings\u27e81\u27e9\nHelp\u27e82\u27e9\nSummarySource\u27e83\u27e9\nExpand description\n## \u00a7\u27e84\u27e9SNAFU\nSNAFU is a library to easily generate errors and add information to underlying errors, especially when the same underlying error type can occur in different contexts.\nFor detailed information, please see the `Snafu`\u27e85\u27e9 macro and the user\u2019s guide\u27e86\u27e9.\n### \u00a7\u27e87\u27e9Features\n  * Turnkey errors based on strings\u27e88\u27e9\n  * Custom error types\u27e85\u27e9\n    * Including a conversion path from turnkey errors\n  * Backtraces\u27e89\u27e9\n  * Extension traits for \n    * `Results`\u27e810\u27e9\n    * `Options`\u27e811\u27e9\n    * `Futures`\u27e812\u27e9\n    * `Streams`\u27e813\u27e9\n  * Error reporting\u27e814\u27e9\n  * Suitable for libraries and applications\n  * `no_std` compatibility\n  * Generic types and lifetimes\n\n\n### \u00a7\u27e815\u27e9Quick start\nIf you want to report errors without hassle, start with the `Whatever`\u27e88\u27e9 type and the `whatever!`\u27e816\u27e9 macro:\n```\nuse snafu::{prelude::*, Whatever};\nfn is_valid_id(id: u16) -> Result<(), Whatever> {\n  if id < 10 {\n    whatever!(\"ID may not be less than 10, but it was {id}\");\n  }\n  Ok(())\n}\n```\n\nYou can also use it to wrap any other error:\n```\nuse snafu::{prelude::*, Whatever};\nfn read_config_file(path: &str) -> Result<String, Whatever> {\n  std::fs::read_to_string(path)\n    .with_whatever_context(|_| format!(\"Could not read file {path}\"))\n}\n```\n\n`Whatever`\u27e88\u27e9 allows for a short message and tracks a `Backtrace`\u27e89\u27e9 for every error:\n```\nuse snafu::{prelude::*, ErrorCompat, Whatever};\nif let Err(e) = returns_an_error() {\n  eprintln!(\"An error occurred: {e}\");\n  if let Some(bt) = ErrorCompat::backtrace(&e) {\n    eprintln!(\"{bt}\");\n  }\n}\n```\n\n### \u00a7\u27e817\u27e9Custom error types\nMany projects will hit limitations of the `Whatever` type. When that occurs, it\u2019s time to create your own error type by deriving `Snafu`\u27e85\u27e9!\n#### \u00a7\u27e818\u27e9Struct style\nSNAFU will read your error struct definition and create a _context selector_ type (called `InvalidIdSnafu` in this example). These context selectors are used with the `ensure!`\u27e819\u27e9 macro to provide ergonomic error creation:\n```\nuse snafu::prelude::*;\n#[derive(Debug, Snafu)]\n#[snafu(display(\"ID may not be less than 10, but it was {id}\"))]\nstruct InvalidIdError {\n  id: u16,\n}\nfn is_valid_id(id: u16) -> Result<(), InvalidIdError> {\n  ensure!(id >= 10, InvalidIdSnafu { id });\n  Ok(())\n}\n```\n\nIf you add a `source` field to your error, you can then wrap an underlying error using the `context`\u27e820\u27e9 extension method:\n```\nuse snafu::prelude::*;\n#[derive(Debug, Snafu)]\n#[snafu(display(\"Could not read file {path}\"))]\nstruct ConfigFileError {\n  source: std::io::Error,\n  path: String,\n}\nfn read_config_file(path: &str) -> Result<String, ConfigFileError> {\n  std::fs::read_to_string(path).context(ConfigFileSnafu { path })\n}\n```\n\n#### \u00a7\u27e821\u27e9Enum style\nWhile error structs are good for constrained cases, they don\u2019t allow for reporting multiple possible kinds of errors at one time. Error enums solve that problem.\nSNAFU will read your error enum definition and create a _context selector_ type for each variant (called `InvalidIdSnafu` in this example). These context selectors are used with the `ensure!`\u27e819\u27e9 macro to provide ergonomic error creation:\n```\nuse snafu::prelude::*;\n#[derive(Debug, Snafu)]\nenum Error {\n  #[snafu(display(\"ID may not be less than 10, but it was {id}\"))]\n  InvalidId { id: u16 },\n}\nfn is_valid_id(id: u16) -> Result<(), Error> {\n  ensure!(id >= 10, InvalidIdSnafu { id });\n  Ok(())\n}\n```\n\nIf you add a `source` field to a variant, you can then wrap an underlying error using the `context`\u27e820\u27e9 extension method:\n```\nuse snafu::prelude::*;\n#[derive(Debug, Snafu)]\nenum Error {\n  #[snafu(display(\"Could not read file {path}\"))]\n  ConfigFile {\n    source: std::io::Error,\n    path: String,\n  },\n}\nfn read_config_file(path: &str) -> Result<String, Error> {\n  std::fs::read_to_string(path).context(ConfigFileSnafu { path })\n}\n```\n\nYou can combine the power of the `whatever!`\u27e816\u27e9 macro with an enum error type. This is great if you started out with `Whatever`\u27e88\u27e9 and are moving to a custom error type:\n```\nuse snafu::prelude::*;\n#[derive(Debug, Snafu)]\nenum Error {\n  #[snafu(display(\"ID may not be less than 10, but it was {id}\"))]\n  InvalidId { id: u16 },\n  #[snafu(whatever, display(\"{message}\"))]\n  Whatever {\n    message: String,\n    #[snafu(source(from(Box<dyn std::error::Error>, Some)))]\n    source: Option<Box<dyn std::error::Error>>,\n  },\n}\nfn is_valid_id(id: u16) -> Result<(), Error> {\n  ensure!(id >= 10, InvalidIdSnafu { id });\n  whatever!(\"Just kidding... this function always fails!\");\n  Ok(())\n}\n```\n\nYou may wish to make the type `Send` and/or `Sync`, allowing your error type to be used in multithreaded programs, by changing `dyn std::error::Error` to `dyn std::error::Error + Send + Sync`.\n### \u00a7\u27e814\u27e9Reporting\nPrinting an error via `Display`\u27e822\u27e9 will only show the top-level error message without the underlying sources. For an extended error report, SNAFU offers a user-friendly error output mechanism. It prints the main error and all underlying errors in the chain, from the most recent to the oldest, plus the backtrace\u27e89\u27e9 if applicable. This is done by using the `report`\u27e823\u27e9 procedural macro or the `Report`\u27e824\u27e9 type directly.\n```\nuse snafu::prelude::*;\n#[derive(Debug, Snafu)]\n#[snafu(display(\"Could not load configuration file {path}\"))]\nstruct ConfigFileError {\n  source: std::io::Error,\n  path: String,\n}\nfn read_config_file(path: &str) -> Result<String, ConfigFileError> {\n  std::fs::read_to_string(path).context(ConfigFileSnafu { path })\n}\n#[snafu::report]\nfn main() -> Result<(), ConfigFileError> {\n  read_config_file(\"bad-config.ini\")?;\n  Ok(())\n}\n```\n\nThis will print:\n```\nError: Could not load configuration file bad-config.ini\nCaused by this error:\n1: No such file or directory (os error 2)\n```\n\nWhich shows the underlying errors, unlike `Display`\u27e822\u27e9:\n```\nError: Could not load configuration file bad-config.ini\n```\n\n\u2026 and is also more readable than the `Debug`\u27e825\u27e9 output:\n```\nError: ConfigFileError { source: Os { code: 2, kind: NotFound, message: \"No such file or directory\" }, path: \"bad-config.ini\" }\n```\n\n### \u00a7\u27e826\u27e9Next steps\nRead the documentation for the `Snafu`\u27e85\u27e9 macro to see all of the capabilities, then read the user\u2019s guide\u27e86\u27e9 for deeper understanding.\n## Modules\u00a7\u27e827\u27e9\n\nfutures\u27e828\u27e9`futures`\n    Additions to the `TryFuture`\u27e829\u27e9 and `TryStream`\u27e830\u27e9 traits.\n\nguide\u27e86\u27e9`guide`\n    SNAFU user\u2019s guide\n\nprelude\u27e831\u27e9\n    Traits and macros used by most projects. Add `use snafu::prelude::*` to your code to quickly get started with SNAFU.\n## Macros\u00a7\u27e832\u27e9\n\nensure\u27e819\u27e9\n    Ensure a condition is true. If it is not, return from the function with an error.\n\nensure_whatever\u27e833\u27e9`alloc`\n    Ensure a condition is true. If it is not, return a stringly-typed error message.\n\nlocation\u27e834\u27e9\n    Constructs a `Location`\u27e835\u27e9 using the current file, line, and column.\n\nwhatever\u27e816\u27e9`alloc`\n    Instantiate and return a stringly-typed error message.\n## Structs\u00a7\u27e836\u27e9\n\nBacktrace\u27e89\u27e9\n    A captured OS thread stack backtrace.\n\nChainCompat\u27e837\u27e9\n    An iterator over an Error and its sources.\n\nCleanedErrorText\u27e838\u27e9`alloc`\n    An iterator over an Error and its sources that removes duplicated text from the error display strings.\n\nLocation\u27e835\u27e9\n    The source code location where the error was reported.\n\nNoneError\u27e839\u27e9\n    A temporary error type used when converting an `Option`\u27e840\u27e9 into a `Result`\u27e841\u27e9\n\nReport\u27e824\u27e9\n    Opinionated solution to format an error in a user-friendly way. Useful as the return type from `main` and test functions.\n\nWhatever\u27e88\u27e9`alloc`\n    A basic error type that you can use as a first step to better error handling.\n## Traits\u00a7\u27e842\u27e9\n\nAsBacktrace\u27e843\u27e9\n    View a backtrace-like value as an optional backtrace.\n\nAsErrorSource\u27e844\u27e9\n    Converts the receiver into an `Error`\u27e845\u27e9 trait object, suitable for use in `Error::source`\u27e846\u27e9.\n\nErrorCompat\u27e847\u27e9\n    Backports changes to the `Error`\u27e845\u27e9 trait to versions of Rust lacking them.\n\nFromString\u27e848\u27e9`alloc`\n    Takes a string message and builds the corresponding error.\n\nGenerateImplicitData\u27e849\u27e9\n    Construct data to be included as part of an error. The data must require no arguments to be created.\n\nIntoError\u27e850\u27e9\n    Combines an underlying error with additional information about the error.\n\nOptionExt\u27e811\u27e9\n    Additions to `Option`\u27e840\u27e9.\n\nResultExt\u27e810\u27e9\n    Additions to `Result`\u27e841\u27e9.\n## Attribute Macros\u00a7\u27e851\u27e9\n\nreport\u27e823\u27e9\n    Adapts a function to provide user-friendly error output for `main` functions and tests.\n## Derive Macros\u00a7\u27e852\u27e9\n\nSnafu\u27e85\u27e9\n    The `Snafu` macro is the entrypoint to defining your own error types. It is designed to require little configuration for the recommended and typical usecases while still offering flexibility for unique situations.\n",
            "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://docs.rs/snafu/latest/settings.html: Settings\n\u27e82\u27e9 https://docs.rs/snafu/latest/help.html: Help\n\u27e83\u27e9 https://docs.rs/snafu/latest/src/snafu/lib.rs.html#1-1680: Source\n\u27e84\u27e9 https://docs.rs/snafu/latest/snafu/#snafu: \u00a7\n\u27e85\u27e9 https://docs.rs/snafu/latest/snafu/derive.Snafu.html: derive snafu::Snafu - `Snafu`\n\u27e86\u27e9 https://docs.rs/snafu/latest/snafu/guide/index.html: mod snafu::guide - user\u2019s guide\n\u27e87\u27e9 https://docs.rs/snafu/latest/snafu/#features: \u00a7\n\u27e88\u27e9 https://docs.rs/snafu/latest/snafu/struct.Whatever.html: struct snafu::Whatever - Turnkey errors based on strings\n\u27e89\u27e9 https://docs.rs/snafu/latest/snafu/struct.Backtrace.html: struct snafu::Backtrace - Backtraces\n\u27e810\u27e9 https://docs.rs/snafu/latest/snafu/trait.ResultExt.html: trait snafu::ResultExt - `Results`\n\u27e811\u27e9 https://docs.rs/snafu/latest/snafu/trait.OptionExt.html: trait snafu::OptionExt - `Options`\n\u27e812\u27e9 https://docs.rs/snafu/latest/snafu/futures/trait.TryFutureExt.html: trait snafu::futures::TryFutureExt - `Futures`\n\u27e813\u27e9 https://docs.rs/snafu/latest/snafu/futures/trait.TryStreamExt.html: trait snafu::futures::TryStreamExt - `Streams`\n\u27e814\u27e9 https://docs.rs/snafu/latest/snafu/#reporting: Error reporting\n\u27e815\u27e9 https://docs.rs/snafu/latest/snafu/#quick-start: \u00a7\n\u27e816\u27e9 https://docs.rs/snafu/latest/snafu/macro.whatever.html: macro snafu::whatever - `whatever!`\n\u27e817\u27e9 https://docs.rs/snafu/latest/snafu/#custom-error-types: \u00a7\n\u27e818\u27e9 https://docs.rs/snafu/latest/snafu/#struct-style: \u00a7\n\u27e819\u27e9 https://docs.rs/snafu/latest/snafu/macro.ensure.html: macro snafu::ensure - `ensure!`\n\u27e820\u27e9 https://docs.rs/snafu/latest/snafu/trait.ResultExt.html#tymethod.context: method snafu::ResultExt::context - `context`\n\u27e821\u27e9 https://docs.rs/snafu/latest/snafu/#enum-style: \u00a7\n\u27e822\u27e9 https://doc.rust-lang.org/nightly/core/fmt/trait.Display.html: trait core::fmt::Display - `Display`\n\u27e823\u27e9 https://docs.rs/snafu/latest/snafu/attr.report.html: attr snafu::report - `report`\n\u27e824\u27e9 https://docs.rs/snafu/latest/snafu/struct.Report.html: struct snafu::Report - `Report`\n\u27e825\u27e9 https://doc.rust-lang.org/nightly/core/fmt/trait.Debug.html: trait core::fmt::Debug - `Debug`\n\u27e826\u27e9 https://docs.rs/snafu/latest/snafu/#next-steps: \u00a7\n\u27e827\u27e9 https://docs.rs/snafu/latest/snafu/#modules: \u00a7\n\u27e828\u27e9 https://docs.rs/snafu/latest/snafu/futures/index.html: mod snafu::futures - futures\n\u27e829\u27e9 https://docs.rs/futures-core/0.3.31/x86_64-unknown-linux-gnu/futures_core/future/trait.TryFuture.html: trait futures_core::future::TryFuture - `TryFuture`\n\u27e830\u27e9 https://docs.rs/futures-core/0.3.31/x86_64-unknown-linux-gnu/futures_core/stream/trait.TryStream.html: trait futures_core::stream::TryStream - `TryStream`\n\u27e831\u27e9 https://docs.rs/snafu/latest/snafu/prelude/index.html: mod snafu::prelude - prelude\n\u27e832\u27e9 https://docs.rs/snafu/latest/snafu/#macros: \u00a7\n\u27e833\u27e9 https://docs.rs/snafu/latest/snafu/macro.ensure_whatever.html: macro snafu::ensure_whatever - ensure_whatever\n\u27e834\u27e9 https://docs.rs/snafu/latest/snafu/macro.location.html: macro snafu::location - location\n\u27e835\u27e9 https://docs.rs/snafu/latest/snafu/struct.Location.html: struct snafu::Location - `Location`\n\u27e836\u27e9 https://docs.rs/snafu/latest/snafu/#structs: \u00a7\n\u27e837\u27e9 https://docs.rs/snafu/latest/snafu/struct.ChainCompat.html: struct snafu::ChainCompat - ChainCompat\n\u27e838\u27e9 https://docs.rs/snafu/latest/snafu/struct.CleanedErrorText.html: struct snafu::CleanedErrorText - CleanedErrorText\n\u27e839\u27e9 https://docs.rs/snafu/latest/snafu/struct.NoneError.html: struct snafu::NoneError - NoneError\n\u27e840\u27e9 https://doc.rust-lang.org/nightly/core/option/enum.Option.html: enum core::option::Option - `Option`\n\u27e841\u27e9 https://doc.rust-lang.org/nightly/core/result/enum.Result.html: enum core::result::Result - `Result`\n\u27e842\u27e9 https://docs.rs/snafu/latest/snafu/#traits: \u00a7\n\u27e843\u27e9 https://docs.rs/snafu/latest/snafu/trait.AsBacktrace.html: trait snafu::AsBacktrace - AsBacktrace\n\u27e844\u27e9 https://docs.rs/snafu/latest/snafu/trait.AsErrorSource.html: trait snafu::AsErrorSource - AsErrorSource\n\u27e845\u27e9 https://doc.rust-lang.org/nightly/core/error/trait.Error.html: trait core::error::Error - `Error`\n\u27e846\u27e9 https://doc.rust-lang.org/nightly/core/error/trait.Error.html#method.source: method core::error::Error::source - `Error::source`\n\u27e847\u27e9 https://docs.rs/snafu/latest/snafu/trait.ErrorCompat.html: trait snafu::ErrorCompat - ErrorCompat\n\u27e848\u27e9 https://docs.rs/snafu/latest/snafu/trait.FromString.html: trait snafu::FromString - FromString\n\u27e849\u27e9 https://docs.rs/snafu/latest/snafu/trait.GenerateImplicitData.html: trait snafu::GenerateImplicitData - GenerateImplicitData\n\u27e850\u27e9 https://docs.rs/snafu/latest/snafu/trait.IntoError.html: trait snafu::IntoError - IntoError\n\u27e851\u27e9 https://docs.rs/snafu/latest/snafu/#attributes: \u00a7\n\u27e852\u27e9 https://docs.rs/snafu/latest/snafu/#derives: \u00a7\n",
            "fit_markdown": "",
            "fit_html": ""
          },
          "downloads": 0,
          "github_stars": 0,
          "dependencies": [],
          "features": {},
          "code_snippets": [],
          "readme_sections": {},
          "librs_downloads": null,
          "source": "crates.io",
          "enhanced_scraping": {},
          "enhanced_features": [],
          "enhanced_dependencies": [],
          "readme_summary": "The `snafu` crate simplifies error handling in Rust by enabling ergonomic creation of custom error types and contexts using the `Snafu` derive macro. It supports turnkey errors, backtraces, extension traits for `Result`, `Option`, `Future`, and `Stream`, and provides powerful reporting tools for detailed error chains. It is `no_std` compatible and suitable for both libraries and applications.",
          "feature_summary": null,
          "use_case": "Utilities",
          "score": 8.0,
          "factual_counterfactual": "### Pair 1: Error Handling and Context  \n\u2705 Factual: The `snafu` crate allows developers to create custom error types by deriving the `Snafu` macro, enabling ergonomic error creation through context selectors and macros like `ensure!`.  \n\u274c Counterfactual: The `snafu` crate requires developers to manually implement error types and does not support macros for ergonomic error creation.  \n\n---\n\n### Pair 2: Backtrace Support  \n\u2705 Factual: The `snafu` crate provides built-in support for capturing backtraces, which can be accessed using the `ErrorCompat::backtrace` method for detailed error diagnostics.  \n\u274c Counterfactual: The `snafu` crate does not support backtraces, requiring developers to use external crates to capture and report them.  \n\n---\n\n### Pair 3: Compatibility with `no_std`  \n\u2705 Factual: The `snafu` crate is compatible with `no_std`, making it suitable for embedded or constrained environments that do not use the Rust standard library.  \n\u274c Counterfactual: The `snafu` crate is incompatible with `no_std` and can only be used in applications that rely on the Rust standard library.",
          "source_analysis": null,
          "user_behavior": null,
          "security": null
        }
      },
      "irl_score": 8.6,
      "execution_id": "exec-bec60e9f-2cc351b1-1751259719",
      "timestamp": "2025-06-30T05:01:59.769234+00:00",
      "canon_version": "1.3.0"
    },
    "rule_zero_compliant": true
  }
]