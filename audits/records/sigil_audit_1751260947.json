[
  {
    "execution_id": "exec-4b4cfb88-2b1cdd57-1751260940",
    "timestamp": "2025-06-30T05:22:20.007625+00:00",
    "sacred_chain": {
      "input_data": "fxhash",
      "context_sources": [
        "crates.io",
        "github.com",
        "lib.rs",
        "docs.rs"
      ],
      "reasoning_steps": [
        "Input canonicalized: 'fxhash' -> 'fxhash'",
        "Context gathered from 4 validated sources",
        "Metadata extracted: 4 fields",
        "Documentation analyzed: quality 7.0",
        "Sentiment analyzed: positive",
        "Ecosystem analyzed: utilities",
        "Quality score synthesized: 7.50",
        "Trust decision: DEFER - Insufficient data for decision",
        "IRL confidence: 8.600"
      ],
      "suggestion": "ALLOW: Positive community sentiment",
      "verdict": "DEFER",
      "audit_info": {
        "metadata": {
          "name": "fxhash",
          "type": "rust_crate",
          "source": "manual_input",
          "extraction_method": "irl_engine"
        },
        "sentiment": {
          "quality_score": 7.0,
          "completeness": 0.8,
          "examples_present": true,
          "api_documented": true
        },
        "ecosystem": {
          "overall": "positive",
          "positive_mentions": 10,
          "negative_mentions": 2,
          "neutral_mentions": 5,
          "total_mentions": 17
        },
        "quality_score": 7.5,
        "verdict_reason": "Insufficient data for decision",
        "sanitized_documentation": {
          "crates_io": {
            "url": "https://crates.io/crates/fxhash",
            "title": "fxhash v0.2.1",
            "content": {
              "raw_markdown": "#  fxhash v0.2.1\nA fast, non-secure, hashing algorithm derived from an internal hasher used in FireFox and Rustc. \n  * [ #hash ](https://crates.io/keywords/hash)\n\n\n  * [ Readme ](https://crates.io/crates/fxhash)\n  * [ 5 Versions ](https://crates.io/crates/fxhash/versions)\n  * [ Dependencies ](https://crates.io/crates/fxhash/dependencies)\n  * [ Dependents ](https://crates.io/crates/fxhash/reverse_dependencies)\n\n\n## Metadata\nalmost 8 years ago \n[ Apache-2.0 ](https://choosealicense.com/licenses/apache-2.0) OR [ MIT ](https://choosealicense.com/licenses/mit)\n4.01 KiB \n## Install\nRun the following Cargo command in your project directory:\ncargo add fxhash\nOr add the following line to your Cargo.toml:\nfxhash = \"0.2.1\"\n## Documentation\n[ docs.rs/fxhash ](https://docs.rs/fxhash)\n## Repository\n[ github.com/cbreeden/fxhash ](https://github.com/cbreeden/fxhash)\n## Owners\n## Categories\n  * [Algorithms](https://crates.io/categories/algorithms)\n\n\n[ Report crate ](https://crates.io/support?crate=fxhash&inquire=crate-violation)\n### Stats Overview\n65,870,814 Downloads all time\n5 Versions published\n#### Downloads over the last 90 days\nDisplay as \nStacked \n  * Stacked \n  * Unstacked \n\n\nLoading\u2026\n",
              "markdown_with_citations": "#  fxhash v0.2.1\nA fast, non-secure, hashing algorithm derived from an internal hasher used in FireFox and Rustc. \n  *  #hash \u27e81\u27e9\n\n\n  *  Readme \u27e82\u27e9\n  *  5 Versions \u27e83\u27e9\n  *  Dependencies \u27e84\u27e9\n  *  Dependents \u27e85\u27e9\n\n\n## Metadata\nalmost 8 years ago \n Apache-2.0 \u27e86\u27e9 OR  MIT \u27e87\u27e9\n4.01 KiB \n## Install\nRun the following Cargo command in your project directory:\ncargo add fxhash\nOr add the following line to your Cargo.toml:\nfxhash = \"0.2.1\"\n## Documentation\n docs.rs/fxhash \u27e88\u27e9\n## Repository\n github.com/cbreeden/fxhash \u27e89\u27e9\n## Owners\n## Categories\n  * Algorithms\u27e810\u27e9\n\n\n Report crate \u27e811\u27e9\n### Stats Overview\n65,870,814 Downloads all time\n5 Versions published\n#### Downloads over the last 90 days\nDisplay as \nStacked \n  * Stacked \n  * Unstacked \n\n\nLoading\u2026\n",
              "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://crates.io/keywords/hash:  #hash \n\u27e82\u27e9 https://crates.io/crates/fxhash:  Readme \n\u27e83\u27e9 https://crates.io/crates/fxhash/versions:  5 Versions \n\u27e84\u27e9 https://crates.io/crates/fxhash/dependencies:  Dependencies \n\u27e85\u27e9 https://crates.io/crates/fxhash/reverse_dependencies:  Dependents \n\u27e86\u27e9 https://choosealicense.com/licenses/apache-2.0:  Apache-2.0 \n\u27e87\u27e9 https://choosealicense.com/licenses/mit:  MIT \n\u27e88\u27e9 https://docs.rs/fxhash:  docs.rs/fxhash \n\u27e89\u27e9 https://github.com/cbreeden/fxhash:  github.com/cbreeden/fxhash \n\u27e810\u27e9 https://crates.io/categories/algorithms: Algorithms\n\u27e811\u27e9 https://crates.io/support?crate=fxhash&inquire=crate-violation:  Report crate \n",
              "fit_markdown": "",
              "fit_html": ""
            },
            "structured_data": {},
            "quality_score": 3.0,
            "extraction_method": "crawl4ai",
            "error": null,
            "metadata": {
              "doc_type": "docs",
              "content_length": 1195,
              "has_structured_data": false,
              "crawl_success": true
            },
            "timestamp": "114729.938489"
          },
          "docs_rs": {
            "url": "https://docs.rs/fxhash",
            "title": "Crate fxhashCopy item path",
            "content": {
              "raw_markdown": "[](https://docs.rs/fxhash/latest/fxhash/all.html \"show sidebar\")\n# Crate fxhashCopy item path\n[Settings](https://docs.rs/fxhash/latest/settings.html)\n[Help](https://docs.rs/fxhash/latest/help.html)\nSummary[Source](https://docs.rs/fxhash/latest/src/fxhash/lib.rs.html#11-324)\nExpand description\n## [\u00a7](https://docs.rs/fxhash/latest/fxhash/#fx-hash)Fx Hash\nThis hashing algorithm was extracted from the Rustc compiler. This is the same hashing algoirthm used for some internal operations in FireFox. The strength of this algorithm is in hashing 8 bytes at a time on 64-bit platforms, where the FNV algorithm works on one byte at a time.\n### [\u00a7](https://docs.rs/fxhash/latest/fxhash/#disclaimer)Disclaimer\nIt is **not a cryptographically secure** hash, so it is strongly recommended that you do not use this hash for cryptographic purproses. Furthermore, this hashing algorithm was not designed to prevent any attacks for determining collisions which could be used to potentially cause quadratic behavior in `HashMap`s. So it is not recommended to expose this hash in places where collissions or DDOS attacks may be a concern.\n## Structs[\u00a7](https://docs.rs/fxhash/latest/fxhash/#structs)\n\n[FxHasher](https://docs.rs/fxhash/latest/fxhash/struct.FxHasher.html \"struct fxhash::FxHasher\")\n    This hashing algorithm was extracted from the Rustc compiler. This is the same hashing algoirthm used for some internal operations in FireFox. The strength of this algorithm is in hashing 8 bytes at a time on 64-bit platforms, where the FNV algorithm works on one byte at a time.\n\n[FxHasher32](https://docs.rs/fxhash/latest/fxhash/struct.FxHasher32.html \"struct fxhash::FxHasher32\")\n    This hashing algorithm was extracted from the Rustc compiler. This is the same hashing algoirthm used for some internal operations in FireFox. The strength of this algorithm is in hashing 4 bytes at a time on any platform, where the FNV algorithm works on one byte at a time.\n\n[FxHasher64](https://docs.rs/fxhash/latest/fxhash/struct.FxHasher64.html \"struct fxhash::FxHasher64\")\n    This hashing algorithm was extracted from the Rustc compiler. This is the same hashing algoirthm used for some internal operations in FireFox. The strength of this algorithm is in hashing 8 bytes at a time on any platform, where the FNV algorithm works on one byte at a time.\n## Functions[\u00a7](https://docs.rs/fxhash/latest/fxhash/#functions)\n\n[hash](https://docs.rs/fxhash/latest/fxhash/fn.hash.html \"fn fxhash::hash\")\n    A convenience function for when you need a quick usize hash.\n\n[hash32](https://docs.rs/fxhash/latest/fxhash/fn.hash32.html \"fn fxhash::hash32\")\n    A convenience function for when you need a quick 32-bit hash.\n\n[hash64](https://docs.rs/fxhash/latest/fxhash/fn.hash64.html \"fn fxhash::hash64\")\n    A convenience function for when you need a quick 64-bit hash.\n## Type Aliases[\u00a7](https://docs.rs/fxhash/latest/fxhash/#types)\n\n[FxBuildHasher](https://docs.rs/fxhash/latest/fxhash/type.FxBuildHasher.html \"type fxhash::FxBuildHasher\")\n    A builder for default Fx hashers.\n\n[FxHashMap](https://docs.rs/fxhash/latest/fxhash/type.FxHashMap.html \"type fxhash::FxHashMap\")\n    A `HashMap` using a default Fx hasher.\n\n[FxHashSet](https://docs.rs/fxhash/latest/fxhash/type.FxHashSet.html \"type fxhash::FxHashSet\")\n    A `HashSet` using a default Fx hasher.\n",
              "markdown_with_citations": "[](https://docs.rs/fxhash/latest/fxhash/all.html \"show sidebar\")\n# Crate fxhashCopy item path\nSettings\u27e81\u27e9\nHelp\u27e82\u27e9\nSummarySource\u27e83\u27e9\nExpand description\n## \u00a7\u27e84\u27e9Fx Hash\nThis hashing algorithm was extracted from the Rustc compiler. This is the same hashing algoirthm used for some internal operations in FireFox. The strength of this algorithm is in hashing 8 bytes at a time on 64-bit platforms, where the FNV algorithm works on one byte at a time.\n### \u00a7\u27e85\u27e9Disclaimer\nIt is **not a cryptographically secure** hash, so it is strongly recommended that you do not use this hash for cryptographic purproses. Furthermore, this hashing algorithm was not designed to prevent any attacks for determining collisions which could be used to potentially cause quadratic behavior in `HashMap`s. So it is not recommended to expose this hash in places where collissions or DDOS attacks may be a concern.\n## Structs\u00a7\u27e86\u27e9\n\nFxHasher\u27e87\u27e9\n    This hashing algorithm was extracted from the Rustc compiler. This is the same hashing algoirthm used for some internal operations in FireFox. The strength of this algorithm is in hashing 8 bytes at a time on 64-bit platforms, where the FNV algorithm works on one byte at a time.\n\nFxHasher32\u27e88\u27e9\n    This hashing algorithm was extracted from the Rustc compiler. This is the same hashing algoirthm used for some internal operations in FireFox. The strength of this algorithm is in hashing 4 bytes at a time on any platform, where the FNV algorithm works on one byte at a time.\n\nFxHasher64\u27e89\u27e9\n    This hashing algorithm was extracted from the Rustc compiler. This is the same hashing algoirthm used for some internal operations in FireFox. The strength of this algorithm is in hashing 8 bytes at a time on any platform, where the FNV algorithm works on one byte at a time.\n## Functions\u00a7\u27e810\u27e9\n\nhash\u27e811\u27e9\n    A convenience function for when you need a quick usize hash.\n\nhash32\u27e812\u27e9\n    A convenience function for when you need a quick 32-bit hash.\n\nhash64\u27e813\u27e9\n    A convenience function for when you need a quick 64-bit hash.\n## Type Aliases\u00a7\u27e814\u27e9\n\nFxBuildHasher\u27e815\u27e9\n    A builder for default Fx hashers.\n\nFxHashMap\u27e816\u27e9\n    A `HashMap` using a default Fx hasher.\n\nFxHashSet\u27e817\u27e9\n    A `HashSet` using a default Fx hasher.\n",
              "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://docs.rs/fxhash/latest/settings.html: Settings\n\u27e82\u27e9 https://docs.rs/fxhash/latest/help.html: Help\n\u27e83\u27e9 https://docs.rs/fxhash/latest/src/fxhash/lib.rs.html#11-324: Source\n\u27e84\u27e9 https://docs.rs/fxhash/latest/fxhash/#fx-hash: \u00a7\n\u27e85\u27e9 https://docs.rs/fxhash/latest/fxhash/#disclaimer: \u00a7\n\u27e86\u27e9 https://docs.rs/fxhash/latest/fxhash/#structs: \u00a7\n\u27e87\u27e9 https://docs.rs/fxhash/latest/fxhash/struct.FxHasher.html: struct fxhash::FxHasher - FxHasher\n\u27e88\u27e9 https://docs.rs/fxhash/latest/fxhash/struct.FxHasher32.html: struct fxhash::FxHasher32 - FxHasher32\n\u27e89\u27e9 https://docs.rs/fxhash/latest/fxhash/struct.FxHasher64.html: struct fxhash::FxHasher64 - FxHasher64\n\u27e810\u27e9 https://docs.rs/fxhash/latest/fxhash/#functions: \u00a7\n\u27e811\u27e9 https://docs.rs/fxhash/latest/fxhash/fn.hash.html: fn fxhash::hash - hash\n\u27e812\u27e9 https://docs.rs/fxhash/latest/fxhash/fn.hash32.html: fn fxhash::hash32 - hash32\n\u27e813\u27e9 https://docs.rs/fxhash/latest/fxhash/fn.hash64.html: fn fxhash::hash64 - hash64\n\u27e814\u27e9 https://docs.rs/fxhash/latest/fxhash/#types: \u00a7\n\u27e815\u27e9 https://docs.rs/fxhash/latest/fxhash/type.FxBuildHasher.html: type fxhash::FxBuildHasher - FxBuildHasher\n\u27e816\u27e9 https://docs.rs/fxhash/latest/fxhash/type.FxHashMap.html: type fxhash::FxHashMap - FxHashMap\n\u27e817\u27e9 https://docs.rs/fxhash/latest/fxhash/type.FxHashSet.html: type fxhash::FxHashSet - FxHashSet\n",
              "fit_markdown": "",
              "fit_html": ""
            },
            "structured_data": {},
            "quality_score": 4.0,
            "extraction_method": "crawl4ai",
            "error": null,
            "metadata": {
              "doc_type": "docs",
              "content_length": 3325,
              "has_structured_data": false,
              "crawl_success": true
            },
            "timestamp": "114730.6628056"
          },
          "lib_rs": {
            "url": "https://lib.rs/crates/fxhash",
            "title": "Untitled",
            "content": {
              "raw_markdown": "###  [4 releases](https://lib.rs/crates/fxhash/versions)\nUses old Rust 2015\n0.2.1 |  Jul 29, 2017   \n---|---  \n0.2.0 |  ~~Jul 29, 2017~~  \n0.1.2 |  Jun 26, 2017   \n0.1.1 |  Jun 26, 2017   \n0.1.0 |  Jun 26, 2017   \n#**1283** in [Algorithms](https://lib.rs/algorithms \"Rust implementations of core algorithms such as hashing, sorting, searching, and more.\")\nDownload history 484951/week @ 2024-12-12 304860/week @ 2024-12-19 247573/week @ 2024-12-26 402655/week @ 2025-01-02 537444/week @ 2025-01-09 494234/week @ 2025-01-16 507132/week @ 2025-01-23 525995/week @ 2025-01-30 582279/week @ 2025-02-06 520311/week @ 2025-02-13 603216/week @ 2025-02-20 614298/week @ 2025-02-27 600809/week @ 2025-03-06 625965/week @ 2025-03-13 604470/week @ 2025-03-20 504470/week @ 2025-03-27\n**2,450,367** downloads per month Used in [**5,083** crates (454 directly)](https://lib.rs/crates/fxhash/rev)\n**Apache-2.0/MIT**\n16KB  291 lines\n# Fx Hash\nThis hashing algorithm was extracted from the Rustc compiler. This is the same hashing algoirthm used for some internal operations in FireFox. The strength of this algorithm is in hashing 8 bytes at a time on 64-bit platforms, where the FNV algorithm works on one byte at a time.\n## Disclaimer\nIt is **not a cryptographically secure** hash, so it is strongly recommended that you do not use this hash for cryptographic purproses. Furthermore, this hashing algorithm was not designed to prevent any attacks for determining collisions which could be used to potentially cause quadratic behavior in ``HashMap``s. So it is not recommended to expose this hash in places where collissions or DDOS attacks may be a concern.\n## Examples\nBuilding an Fx backed hashmap.\n```\n``extern` `crate` fxhash`;`\n`use` `fxhash`::``FxHashMap`;`\n`let` `mut` hashmap `=` `FxHashMap`::``new`(``)``;`\nhashmap`.``insert``(```\"`black`\"```,` `0``)``;`\nhashmap`.``insert``(```\"`white`\"```,` `255``)``;`\n`\n```\n\nBuilding an Fx backed hashset.\n```\n``extern` `crate` fxhash`;`\n`use` `fxhash`::``FxHashSet`;`\n`let` `mut` hashmap `=` `FxHashSet`::``new`(``)``;`\nhashmap`.``insert``(```\"`black`\"```)``;`\nhashmap`.``insert``(```\"`white`\"```)``;`\n`\n```\n\n## Benchmarks\nGenerally ``fxhash`` is than ``fnv`` on ```u32```, ```u64```, or any byte sequence with length >= 5. However, keep in mind that hashing speed is not the only characteristic worth considering. That being said, Rustc had an observable increase in speed when switching from ``fnv`` backed hashmaps to ``fx`` based hashmaps.\n```\n`bench_fnv_003   ... bench:   3 ns/iter (+/- 0)\nbench_fnv_004   ... bench:   2 ns/iter (+/- 0)\nbench_fnv_011   ... bench:   6 ns/iter (+/- 1)\nbench_fnv_012   ... bench:   5 ns/iter (+/- 1)\nbench_fnv_023   ... bench:   14 ns/iter (+/- 3)\nbench_fnv_024   ... bench:   14 ns/iter (+/- 4)\nbench_fnv_068   ... bench:   57 ns/iter (+/- 11)\nbench_fnv_132   ... bench:  145 ns/iter (+/- 30)\nbench_fx_003   ... bench:   4 ns/iter (+/- 0)\nbench_fx_004   ... bench:   3 ns/iter (+/- 1)\nbench_fx_011   ... bench:   5 ns/iter (+/- 2)\nbench_fx_012   ... bench:   4 ns/iter (+/- 1)\nbench_fx_023   ... bench:   7 ns/iter (+/- 3)\nbench_fx_024   ... bench:   4 ns/iter (+/- 1)\nbench_fx_068   ... bench:   10 ns/iter (+/- 3)\nbench_fx_132   ... bench:   19 ns/iter (+/- 5)\nbench_seahash_003 ... bench:   30 ns/iter (+/- 12)\nbench_seahash_004 ... bench:   32 ns/iter (+/- 22)\nbench_seahash_011 ... bench:   30 ns/iter (+/- 4)\nbench_seahash_012 ... bench:   31 ns/iter (+/- 1)\nbench_seahash_023 ... bench:   32 ns/iter (+/- 6)\nbench_seahash_024 ... bench:   31 ns/iter (+/- 5)\nbench_seahash_068 ... bench:   40 ns/iter (+/- 9)\nbench_seahash_132 ... bench:   50 ns/iter (+/- 12)\n`\n```\n\n#### Dependencies\n~125KB \n  * [byteorder](https://lib.rs/crates/byteorder \"1.0.0\")\n\n\n  * dev  [fnv](https://lib.rs/crates/fnv \"1.0.5\")\n  * dev  [seahash](https://lib.rs/crates/seahash \"obsolete\") 3.0\n\n\n",
              "markdown_with_citations": "###  4 releases\u27e81\u27e9\nUses old Rust 2015\n0.2.1 |  Jul 29, 2017   \n---|---  \n0.2.0 |  ~~Jul 29, 2017~~  \n0.1.2 |  Jun 26, 2017   \n0.1.1 |  Jun 26, 2017   \n0.1.0 |  Jun 26, 2017   \n#**1283** in Algorithms\u27e82\u27e9\nDownload history 484951/week @ 2024-12-12 304860/week @ 2024-12-19 247573/week @ 2024-12-26 402655/week @ 2025-01-02 537444/week @ 2025-01-09 494234/week @ 2025-01-16 507132/week @ 2025-01-23 525995/week @ 2025-01-30 582279/week @ 2025-02-06 520311/week @ 2025-02-13 603216/week @ 2025-02-20 614298/week @ 2025-02-27 600809/week @ 2025-03-06 625965/week @ 2025-03-13 604470/week @ 2025-03-20 504470/week @ 2025-03-27\n**2,450,367** downloads per month Used in **5,083** crates (454 directly)\u27e83\u27e9\n**Apache-2.0/MIT**\n16KB  291 lines\n# Fx Hash\nThis hashing algorithm was extracted from the Rustc compiler. This is the same hashing algoirthm used for some internal operations in FireFox. The strength of this algorithm is in hashing 8 bytes at a time on 64-bit platforms, where the FNV algorithm works on one byte at a time.\n## Disclaimer\nIt is **not a cryptographically secure** hash, so it is strongly recommended that you do not use this hash for cryptographic purproses. Furthermore, this hashing algorithm was not designed to prevent any attacks for determining collisions which could be used to potentially cause quadratic behavior in ``HashMap``s. So it is not recommended to expose this hash in places where collissions or DDOS attacks may be a concern.\n## Examples\nBuilding an Fx backed hashmap.\n```\n``extern` `crate` fxhash`;`\n`use` `fxhash`::``FxHashMap`;`\n`let` `mut` hashmap `=` `FxHashMap`::``new`(``)``;`\nhashmap`.``insert``(```\"`black`\"```,` `0``)``;`\nhashmap`.``insert``(```\"`white`\"```,` `255``)``;`\n`\n```\n\nBuilding an Fx backed hashset.\n```\n``extern` `crate` fxhash`;`\n`use` `fxhash`::``FxHashSet`;`\n`let` `mut` hashmap `=` `FxHashSet`::``new`(``)``;`\nhashmap`.``insert``(```\"`black`\"```)``;`\nhashmap`.``insert``(```\"`white`\"```)``;`\n`\n```\n\n## Benchmarks\nGenerally ``fxhash`` is than ``fnv`` on ```u32```, ```u64```, or any byte sequence with length >= 5. However, keep in mind that hashing speed is not the only characteristic worth considering. That being said, Rustc had an observable increase in speed when switching from ``fnv`` backed hashmaps to ``fx`` based hashmaps.\n```\n`bench_fnv_003   ... bench:   3 ns/iter (+/- 0)\nbench_fnv_004   ... bench:   2 ns/iter (+/- 0)\nbench_fnv_011   ... bench:   6 ns/iter (+/- 1)\nbench_fnv_012   ... bench:   5 ns/iter (+/- 1)\nbench_fnv_023   ... bench:   14 ns/iter (+/- 3)\nbench_fnv_024   ... bench:   14 ns/iter (+/- 4)\nbench_fnv_068   ... bench:   57 ns/iter (+/- 11)\nbench_fnv_132   ... bench:  145 ns/iter (+/- 30)\nbench_fx_003   ... bench:   4 ns/iter (+/- 0)\nbench_fx_004   ... bench:   3 ns/iter (+/- 1)\nbench_fx_011   ... bench:   5 ns/iter (+/- 2)\nbench_fx_012   ... bench:   4 ns/iter (+/- 1)\nbench_fx_023   ... bench:   7 ns/iter (+/- 3)\nbench_fx_024   ... bench:   4 ns/iter (+/- 1)\nbench_fx_068   ... bench:   10 ns/iter (+/- 3)\nbench_fx_132   ... bench:   19 ns/iter (+/- 5)\nbench_seahash_003 ... bench:   30 ns/iter (+/- 12)\nbench_seahash_004 ... bench:   32 ns/iter (+/- 22)\nbench_seahash_011 ... bench:   30 ns/iter (+/- 4)\nbench_seahash_012 ... bench:   31 ns/iter (+/- 1)\nbench_seahash_023 ... bench:   32 ns/iter (+/- 6)\nbench_seahash_024 ... bench:   31 ns/iter (+/- 5)\nbench_seahash_068 ... bench:   40 ns/iter (+/- 9)\nbench_seahash_132 ... bench:   50 ns/iter (+/- 12)\n`\n```\n\n#### Dependencies\n~125KB \n  * byteorder\u27e84\u27e9\n\n\n  * dev  fnv\u27e85\u27e9\n  * dev  seahash\u27e86\u27e9 3.0\n\n\n",
              "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://lib.rs/crates/fxhash/versions: 4 releases\n\u27e82\u27e9 https://lib.rs/algorithms: Rust implementations of core algorithms such as hashing, sorting, searching, and more. - Algorithms\n\u27e83\u27e9 https://lib.rs/crates/fxhash/rev: **5,083** crates (454 directly)\n\u27e84\u27e9 https://lib.rs/crates/byteorder: 1.0.0 - byteorder\n\u27e85\u27e9 https://lib.rs/crates/fnv: 1.0.5 - fnv\n\u27e86\u27e9 https://lib.rs/crates/seahash: obsolete - seahash\n",
              "fit_markdown": "",
              "fit_html": ""
            },
            "structured_data": {},
            "quality_score": 3.0,
            "extraction_method": "crawl4ai",
            "error": null,
            "metadata": {
              "doc_type": "docs",
              "content_length": 3847,
              "has_structured_data": false,
              "crawl_success": true
            },
            "timestamp": "114731.0862527"
          }
        },
        "crate_analysis": {
          "status": "completed",
          "check": [
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#byteorder@1.5.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\byteorder-1.5.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "byteorder",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\byteorder-1.5.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpfvbn6nae\\fxhash-0.2.1\\target\\debug\\deps\\libbyteorder-b12c2005ffdddab5.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpfvbn6nae/fxhash-0.2.1#fxhash@0.2.1",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpfvbn6nae\\fxhash-0.2.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "fxhash",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpfvbn6nae\\fxhash-0.2.1\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: anonymous parameters are deprecated and will be removed in the next edition\n  --> lib.rs:55:29\n   |\n55 |     fn hash_word(&mut self, Self);\n   |                             ^^^^ help: try naming the parameter or explicitly ignoring it: `_: Self`\n   |\n   = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2018!\n   = note: for more information, see issue #41686 <https://github.com/rust-lang/rust/issues/41686>\n   = note: `#[warn(anonymous_parameters)]` on by default\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "warning",
                    "message": "this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2018!",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "for more information, see issue #41686 <https://github.com/rust-lang/rust/issues/41686>",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "`#[warn(anonymous_parameters)]` on by default",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "try naming the parameter or explicitly ignoring it",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 2088,
                        "byte_start": 2084,
                        "column_end": 33,
                        "column_start": 29,
                        "expansion": null,
                        "file_name": "lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 55,
                        "line_start": 55,
                        "suggested_replacement": "_: Self",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 33,
                            "highlight_start": 29,
                            "text": "    fn hash_word(&mut self, Self);"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "anonymous_parameters",
                  "explanation": null
                },
                "level": "warning",
                "message": "anonymous parameters are deprecated and will be removed in the next edition",
                "spans": [
                  {
                    "byte_end": 2088,
                    "byte_start": 2084,
                    "column_end": 33,
                    "column_start": 29,
                    "expansion": null,
                    "file_name": "lib.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 55,
                    "line_start": 55,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 33,
                        "highlight_start": 29,
                        "text": "    fn hash_word(&mut self, Self);"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-artifact",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpfvbn6nae/fxhash-0.2.1#fxhash@0.2.1",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpfvbn6nae\\fxhash-0.2.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "fxhash",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpfvbn6nae\\fxhash-0.2.1\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpfvbn6nae\\fxhash-0.2.1\\target\\debug\\deps\\libfxhash-7f988c72d7ad979a.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "build-finished",
              "success": true
            }
          ],
          "clippy": [
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#byteorder@1.5.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\byteorder-1.5.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "byteorder",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\byteorder-1.5.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpfvbn6nae\\fxhash-0.2.1\\target\\debug\\deps\\libbyteorder-b12c2005ffdddab5.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpfvbn6nae/fxhash-0.2.1#fxhash@0.2.1",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpfvbn6nae\\fxhash-0.2.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "fxhash",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpfvbn6nae\\fxhash-0.2.1\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: anonymous parameters are deprecated and will be removed in the next edition\n  --> lib.rs:55:29\n   |\n55 |     fn hash_word(&mut self, Self);\n   |                             ^^^^ help: try naming the parameter or explicitly ignoring it: `_: Self`\n   |\n   = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2018!\n   = note: for more information, see issue #41686 <https://github.com/rust-lang/rust/issues/41686>\n   = note: `#[warn(anonymous_parameters)]` on by default\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "warning",
                    "message": "this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2018!",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "for more information, see issue #41686 <https://github.com/rust-lang/rust/issues/41686>",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "`#[warn(anonymous_parameters)]` on by default",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "try naming the parameter or explicitly ignoring it",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 2088,
                        "byte_start": 2084,
                        "column_end": 33,
                        "column_start": 29,
                        "expansion": null,
                        "file_name": "lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 55,
                        "line_start": 55,
                        "suggested_replacement": "_: Self",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 33,
                            "highlight_start": 29,
                            "text": "    fn hash_word(&mut self, Self);"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "anonymous_parameters",
                  "explanation": null
                },
                "level": "warning",
                "message": "anonymous parameters are deprecated and will be removed in the next edition",
                "spans": [
                  {
                    "byte_end": 2088,
                    "byte_start": 2084,
                    "column_end": 33,
                    "column_start": 29,
                    "expansion": null,
                    "file_name": "lib.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 55,
                    "line_start": 55,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 33,
                        "highlight_start": 29,
                        "text": "    fn hash_word(&mut self, Self);"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-artifact",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpfvbn6nae/fxhash-0.2.1#fxhash@0.2.1",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpfvbn6nae\\fxhash-0.2.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "fxhash",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpfvbn6nae\\fxhash-0.2.1\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpfvbn6nae\\fxhash-0.2.1\\target\\debug\\deps\\libfxhash-da8fee26c36ef02f.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "build-finished",
              "success": true
            }
          ],
          "audit": {
            "database": {
              "advisory-count": 787,
              "last-commit": "7573f55ba337263f61167dbb0ea926cdc7c8eb5d",
              "last-updated": "2025-06-17T11:04:25+02:00"
            },
            "lockfile": {
              "dependency-count": 4
            },
            "settings": {
              "target_arch": [],
              "target_os": [],
              "severity": null,
              "ignore": [],
              "informational_warnings": [
                "unmaintained",
                "unsound",
                "notice"
              ]
            },
            "vulnerabilities": {
              "found": false,
              "count": 0,
              "list": []
            },
            "warnings": {}
          },
          "note": "Crate analysis performed with stable toolchain."
        },
        "crate_metadata": {
          "name": "fxhash",
          "version": "0.2.1",
          "description": "ALLOW: Positive community sentiment",
          "repository": "",
          "keywords": [],
          "categories": [],
          "readme": {
            "raw_markdown": "[](https://docs.rs/fxhash/latest/fxhash/all.html \"show sidebar\")\n# Crate fxhashCopy item path\n[Settings](https://docs.rs/fxhash/latest/settings.html)\n[Help](https://docs.rs/fxhash/latest/help.html)\nSummary[Source](https://docs.rs/fxhash/latest/src/fxhash/lib.rs.html#11-324)\nExpand description\n## [\u00a7](https://docs.rs/fxhash/latest/fxhash/#fx-hash)Fx Hash\nThis hashing algorithm was extracted from the Rustc compiler. This is the same hashing algoirthm used for some internal operations in FireFox. The strength of this algorithm is in hashing 8 bytes at a time on 64-bit platforms, where the FNV algorithm works on one byte at a time.\n### [\u00a7](https://docs.rs/fxhash/latest/fxhash/#disclaimer)Disclaimer\nIt is **not a cryptographically secure** hash, so it is strongly recommended that you do not use this hash for cryptographic purproses. Furthermore, this hashing algorithm was not designed to prevent any attacks for determining collisions which could be used to potentially cause quadratic behavior in `HashMap`s. So it is not recommended to expose this hash in places where collissions or DDOS attacks may be a concern.\n## Structs[\u00a7](https://docs.rs/fxhash/latest/fxhash/#structs)\n\n[FxHasher](https://docs.rs/fxhash/latest/fxhash/struct.FxHasher.html \"struct fxhash::FxHasher\")\n    This hashing algorithm was extracted from the Rustc compiler. This is the same hashing algoirthm used for some internal operations in FireFox. The strength of this algorithm is in hashing 8 bytes at a time on 64-bit platforms, where the FNV algorithm works on one byte at a time.\n\n[FxHasher32](https://docs.rs/fxhash/latest/fxhash/struct.FxHasher32.html \"struct fxhash::FxHasher32\")\n    This hashing algorithm was extracted from the Rustc compiler. This is the same hashing algoirthm used for some internal operations in FireFox. The strength of this algorithm is in hashing 4 bytes at a time on any platform, where the FNV algorithm works on one byte at a time.\n\n[FxHasher64](https://docs.rs/fxhash/latest/fxhash/struct.FxHasher64.html \"struct fxhash::FxHasher64\")\n    This hashing algorithm was extracted from the Rustc compiler. This is the same hashing algoirthm used for some internal operations in FireFox. The strength of this algorithm is in hashing 8 bytes at a time on any platform, where the FNV algorithm works on one byte at a time.\n## Functions[\u00a7](https://docs.rs/fxhash/latest/fxhash/#functions)\n\n[hash](https://docs.rs/fxhash/latest/fxhash/fn.hash.html \"fn fxhash::hash\")\n    A convenience function for when you need a quick usize hash.\n\n[hash32](https://docs.rs/fxhash/latest/fxhash/fn.hash32.html \"fn fxhash::hash32\")\n    A convenience function for when you need a quick 32-bit hash.\n\n[hash64](https://docs.rs/fxhash/latest/fxhash/fn.hash64.html \"fn fxhash::hash64\")\n    A convenience function for when you need a quick 64-bit hash.\n## Type Aliases[\u00a7](https://docs.rs/fxhash/latest/fxhash/#types)\n\n[FxBuildHasher](https://docs.rs/fxhash/latest/fxhash/type.FxBuildHasher.html \"type fxhash::FxBuildHasher\")\n    A builder for default Fx hashers.\n\n[FxHashMap](https://docs.rs/fxhash/latest/fxhash/type.FxHashMap.html \"type fxhash::FxHashMap\")\n    A `HashMap` using a default Fx hasher.\n\n[FxHashSet](https://docs.rs/fxhash/latest/fxhash/type.FxHashSet.html \"type fxhash::FxHashSet\")\n    A `HashSet` using a default Fx hasher.\n",
            "markdown_with_citations": "[](https://docs.rs/fxhash/latest/fxhash/all.html \"show sidebar\")\n# Crate fxhashCopy item path\nSettings\u27e81\u27e9\nHelp\u27e82\u27e9\nSummarySource\u27e83\u27e9\nExpand description\n## \u00a7\u27e84\u27e9Fx Hash\nThis hashing algorithm was extracted from the Rustc compiler. This is the same hashing algoirthm used for some internal operations in FireFox. The strength of this algorithm is in hashing 8 bytes at a time on 64-bit platforms, where the FNV algorithm works on one byte at a time.\n### \u00a7\u27e85\u27e9Disclaimer\nIt is **not a cryptographically secure** hash, so it is strongly recommended that you do not use this hash for cryptographic purproses. Furthermore, this hashing algorithm was not designed to prevent any attacks for determining collisions which could be used to potentially cause quadratic behavior in `HashMap`s. So it is not recommended to expose this hash in places where collissions or DDOS attacks may be a concern.\n## Structs\u00a7\u27e86\u27e9\n\nFxHasher\u27e87\u27e9\n    This hashing algorithm was extracted from the Rustc compiler. This is the same hashing algoirthm used for some internal operations in FireFox. The strength of this algorithm is in hashing 8 bytes at a time on 64-bit platforms, where the FNV algorithm works on one byte at a time.\n\nFxHasher32\u27e88\u27e9\n    This hashing algorithm was extracted from the Rustc compiler. This is the same hashing algoirthm used for some internal operations in FireFox. The strength of this algorithm is in hashing 4 bytes at a time on any platform, where the FNV algorithm works on one byte at a time.\n\nFxHasher64\u27e89\u27e9\n    This hashing algorithm was extracted from the Rustc compiler. This is the same hashing algoirthm used for some internal operations in FireFox. The strength of this algorithm is in hashing 8 bytes at a time on any platform, where the FNV algorithm works on one byte at a time.\n## Functions\u00a7\u27e810\u27e9\n\nhash\u27e811\u27e9\n    A convenience function for when you need a quick usize hash.\n\nhash32\u27e812\u27e9\n    A convenience function for when you need a quick 32-bit hash.\n\nhash64\u27e813\u27e9\n    A convenience function for when you need a quick 64-bit hash.\n## Type Aliases\u00a7\u27e814\u27e9\n\nFxBuildHasher\u27e815\u27e9\n    A builder for default Fx hashers.\n\nFxHashMap\u27e816\u27e9\n    A `HashMap` using a default Fx hasher.\n\nFxHashSet\u27e817\u27e9\n    A `HashSet` using a default Fx hasher.\n",
            "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://docs.rs/fxhash/latest/settings.html: Settings\n\u27e82\u27e9 https://docs.rs/fxhash/latest/help.html: Help\n\u27e83\u27e9 https://docs.rs/fxhash/latest/src/fxhash/lib.rs.html#11-324: Source\n\u27e84\u27e9 https://docs.rs/fxhash/latest/fxhash/#fx-hash: \u00a7\n\u27e85\u27e9 https://docs.rs/fxhash/latest/fxhash/#disclaimer: \u00a7\n\u27e86\u27e9 https://docs.rs/fxhash/latest/fxhash/#structs: \u00a7\n\u27e87\u27e9 https://docs.rs/fxhash/latest/fxhash/struct.FxHasher.html: struct fxhash::FxHasher - FxHasher\n\u27e88\u27e9 https://docs.rs/fxhash/latest/fxhash/struct.FxHasher32.html: struct fxhash::FxHasher32 - FxHasher32\n\u27e89\u27e9 https://docs.rs/fxhash/latest/fxhash/struct.FxHasher64.html: struct fxhash::FxHasher64 - FxHasher64\n\u27e810\u27e9 https://docs.rs/fxhash/latest/fxhash/#functions: \u00a7\n\u27e811\u27e9 https://docs.rs/fxhash/latest/fxhash/fn.hash.html: fn fxhash::hash - hash\n\u27e812\u27e9 https://docs.rs/fxhash/latest/fxhash/fn.hash32.html: fn fxhash::hash32 - hash32\n\u27e813\u27e9 https://docs.rs/fxhash/latest/fxhash/fn.hash64.html: fn fxhash::hash64 - hash64\n\u27e814\u27e9 https://docs.rs/fxhash/latest/fxhash/#types: \u00a7\n\u27e815\u27e9 https://docs.rs/fxhash/latest/fxhash/type.FxBuildHasher.html: type fxhash::FxBuildHasher - FxBuildHasher\n\u27e816\u27e9 https://docs.rs/fxhash/latest/fxhash/type.FxHashMap.html: type fxhash::FxHashMap - FxHashMap\n\u27e817\u27e9 https://docs.rs/fxhash/latest/fxhash/type.FxHashSet.html: type fxhash::FxHashSet - FxHashSet\n",
            "fit_markdown": "",
            "fit_html": ""
          },
          "downloads": 0,
          "github_stars": 0,
          "dependencies": [],
          "features": {},
          "code_snippets": [],
          "readme_sections": {},
          "librs_downloads": null,
          "source": "crates.io",
          "enhanced_scraping": {},
          "enhanced_features": [],
          "enhanced_dependencies": []
        },
        "enriched_crate": {
          "name": "fxhash",
          "version": "0.2.1",
          "description": "ALLOW: Positive community sentiment",
          "repository": "",
          "keywords": [],
          "categories": [],
          "readme": {
            "raw_markdown": "[](https://docs.rs/fxhash/latest/fxhash/all.html \"show sidebar\")\n# Crate fxhashCopy item path\n[Settings](https://docs.rs/fxhash/latest/settings.html)\n[Help](https://docs.rs/fxhash/latest/help.html)\nSummary[Source](https://docs.rs/fxhash/latest/src/fxhash/lib.rs.html#11-324)\nExpand description\n## [\u00a7](https://docs.rs/fxhash/latest/fxhash/#fx-hash)Fx Hash\nThis hashing algorithm was extracted from the Rustc compiler. This is the same hashing algoirthm used for some internal operations in FireFox. The strength of this algorithm is in hashing 8 bytes at a time on 64-bit platforms, where the FNV algorithm works on one byte at a time.\n### [\u00a7](https://docs.rs/fxhash/latest/fxhash/#disclaimer)Disclaimer\nIt is **not a cryptographically secure** hash, so it is strongly recommended that you do not use this hash for cryptographic purproses. Furthermore, this hashing algorithm was not designed to prevent any attacks for determining collisions which could be used to potentially cause quadratic behavior in `HashMap`s. So it is not recommended to expose this hash in places where collissions or DDOS attacks may be a concern.\n## Structs[\u00a7](https://docs.rs/fxhash/latest/fxhash/#structs)\n\n[FxHasher](https://docs.rs/fxhash/latest/fxhash/struct.FxHasher.html \"struct fxhash::FxHasher\")\n    This hashing algorithm was extracted from the Rustc compiler. This is the same hashing algoirthm used for some internal operations in FireFox. The strength of this algorithm is in hashing 8 bytes at a time on 64-bit platforms, where the FNV algorithm works on one byte at a time.\n\n[FxHasher32](https://docs.rs/fxhash/latest/fxhash/struct.FxHasher32.html \"struct fxhash::FxHasher32\")\n    This hashing algorithm was extracted from the Rustc compiler. This is the same hashing algoirthm used for some internal operations in FireFox. The strength of this algorithm is in hashing 4 bytes at a time on any platform, where the FNV algorithm works on one byte at a time.\n\n[FxHasher64](https://docs.rs/fxhash/latest/fxhash/struct.FxHasher64.html \"struct fxhash::FxHasher64\")\n    This hashing algorithm was extracted from the Rustc compiler. This is the same hashing algoirthm used for some internal operations in FireFox. The strength of this algorithm is in hashing 8 bytes at a time on any platform, where the FNV algorithm works on one byte at a time.\n## Functions[\u00a7](https://docs.rs/fxhash/latest/fxhash/#functions)\n\n[hash](https://docs.rs/fxhash/latest/fxhash/fn.hash.html \"fn fxhash::hash\")\n    A convenience function for when you need a quick usize hash.\n\n[hash32](https://docs.rs/fxhash/latest/fxhash/fn.hash32.html \"fn fxhash::hash32\")\n    A convenience function for when you need a quick 32-bit hash.\n\n[hash64](https://docs.rs/fxhash/latest/fxhash/fn.hash64.html \"fn fxhash::hash64\")\n    A convenience function for when you need a quick 64-bit hash.\n## Type Aliases[\u00a7](https://docs.rs/fxhash/latest/fxhash/#types)\n\n[FxBuildHasher](https://docs.rs/fxhash/latest/fxhash/type.FxBuildHasher.html \"type fxhash::FxBuildHasher\")\n    A builder for default Fx hashers.\n\n[FxHashMap](https://docs.rs/fxhash/latest/fxhash/type.FxHashMap.html \"type fxhash::FxHashMap\")\n    A `HashMap` using a default Fx hasher.\n\n[FxHashSet](https://docs.rs/fxhash/latest/fxhash/type.FxHashSet.html \"type fxhash::FxHashSet\")\n    A `HashSet` using a default Fx hasher.\n",
            "markdown_with_citations": "[](https://docs.rs/fxhash/latest/fxhash/all.html \"show sidebar\")\n# Crate fxhashCopy item path\nSettings\u27e81\u27e9\nHelp\u27e82\u27e9\nSummarySource\u27e83\u27e9\nExpand description\n## \u00a7\u27e84\u27e9Fx Hash\nThis hashing algorithm was extracted from the Rustc compiler. This is the same hashing algoirthm used for some internal operations in FireFox. The strength of this algorithm is in hashing 8 bytes at a time on 64-bit platforms, where the FNV algorithm works on one byte at a time.\n### \u00a7\u27e85\u27e9Disclaimer\nIt is **not a cryptographically secure** hash, so it is strongly recommended that you do not use this hash for cryptographic purproses. Furthermore, this hashing algorithm was not designed to prevent any attacks for determining collisions which could be used to potentially cause quadratic behavior in `HashMap`s. So it is not recommended to expose this hash in places where collissions or DDOS attacks may be a concern.\n## Structs\u00a7\u27e86\u27e9\n\nFxHasher\u27e87\u27e9\n    This hashing algorithm was extracted from the Rustc compiler. This is the same hashing algoirthm used for some internal operations in FireFox. The strength of this algorithm is in hashing 8 bytes at a time on 64-bit platforms, where the FNV algorithm works on one byte at a time.\n\nFxHasher32\u27e88\u27e9\n    This hashing algorithm was extracted from the Rustc compiler. This is the same hashing algoirthm used for some internal operations in FireFox. The strength of this algorithm is in hashing 4 bytes at a time on any platform, where the FNV algorithm works on one byte at a time.\n\nFxHasher64\u27e89\u27e9\n    This hashing algorithm was extracted from the Rustc compiler. This is the same hashing algoirthm used for some internal operations in FireFox. The strength of this algorithm is in hashing 8 bytes at a time on any platform, where the FNV algorithm works on one byte at a time.\n## Functions\u00a7\u27e810\u27e9\n\nhash\u27e811\u27e9\n    A convenience function for when you need a quick usize hash.\n\nhash32\u27e812\u27e9\n    A convenience function for when you need a quick 32-bit hash.\n\nhash64\u27e813\u27e9\n    A convenience function for when you need a quick 64-bit hash.\n## Type Aliases\u00a7\u27e814\u27e9\n\nFxBuildHasher\u27e815\u27e9\n    A builder for default Fx hashers.\n\nFxHashMap\u27e816\u27e9\n    A `HashMap` using a default Fx hasher.\n\nFxHashSet\u27e817\u27e9\n    A `HashSet` using a default Fx hasher.\n",
            "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://docs.rs/fxhash/latest/settings.html: Settings\n\u27e82\u27e9 https://docs.rs/fxhash/latest/help.html: Help\n\u27e83\u27e9 https://docs.rs/fxhash/latest/src/fxhash/lib.rs.html#11-324: Source\n\u27e84\u27e9 https://docs.rs/fxhash/latest/fxhash/#fx-hash: \u00a7\n\u27e85\u27e9 https://docs.rs/fxhash/latest/fxhash/#disclaimer: \u00a7\n\u27e86\u27e9 https://docs.rs/fxhash/latest/fxhash/#structs: \u00a7\n\u27e87\u27e9 https://docs.rs/fxhash/latest/fxhash/struct.FxHasher.html: struct fxhash::FxHasher - FxHasher\n\u27e88\u27e9 https://docs.rs/fxhash/latest/fxhash/struct.FxHasher32.html: struct fxhash::FxHasher32 - FxHasher32\n\u27e89\u27e9 https://docs.rs/fxhash/latest/fxhash/struct.FxHasher64.html: struct fxhash::FxHasher64 - FxHasher64\n\u27e810\u27e9 https://docs.rs/fxhash/latest/fxhash/#functions: \u00a7\n\u27e811\u27e9 https://docs.rs/fxhash/latest/fxhash/fn.hash.html: fn fxhash::hash - hash\n\u27e812\u27e9 https://docs.rs/fxhash/latest/fxhash/fn.hash32.html: fn fxhash::hash32 - hash32\n\u27e813\u27e9 https://docs.rs/fxhash/latest/fxhash/fn.hash64.html: fn fxhash::hash64 - hash64\n\u27e814\u27e9 https://docs.rs/fxhash/latest/fxhash/#types: \u00a7\n\u27e815\u27e9 https://docs.rs/fxhash/latest/fxhash/type.FxBuildHasher.html: type fxhash::FxBuildHasher - FxBuildHasher\n\u27e816\u27e9 https://docs.rs/fxhash/latest/fxhash/type.FxHashMap.html: type fxhash::FxHashMap - FxHashMap\n\u27e817\u27e9 https://docs.rs/fxhash/latest/fxhash/type.FxHashSet.html: type fxhash::FxHashSet - FxHashSet\n",
            "fit_markdown": "",
            "fit_html": ""
          },
          "downloads": 0,
          "github_stars": 0,
          "dependencies": [],
          "features": {},
          "code_snippets": [],
          "readme_sections": {},
          "librs_downloads": null,
          "source": "crates.io",
          "enhanced_scraping": {},
          "enhanced_features": [],
          "enhanced_dependencies": [],
          "readme_summary": "The `fxhash` crate provides a fast, non-cryptographic hashing algorithm extracted from the Rust compiler, optimized for performance by hashing multiple bytes at a time (8 bytes on 64-bit platforms and 4 bytes on others). It includes convenience functions (`hash`, `hash32`, `hash64`), default hashers (`FxHasher`, `FxHasher32`, `FxHasher64`), and type aliases for `FxHashMap` and `FxHashSet`. While highly efficient, it is not secure against collision attacks and unsuitable for cryptographic purposes.",
          "feature_summary": null,
          "use_case": "Utilities",
          "score": 6.0,
          "factual_counterfactual": "### Pair 1: Hashing Algorithm  \n\u2705 **Factual**: The `fxhash` crate uses a hashing algorithm extracted from the Rust compiler (`rustc`) and is optimized for performance by hashing 8 bytes at a time on 64-bit platforms.  \n\u274c **Counterfactual**: The `fxhash` crate uses a cryptographically secure hashing algorithm designed to prevent collision attacks and ensure security in cryptographic applications.  \n\n---\n\n### Pair 2: Performance Characteristics  \n\u2705 **Factual**: On 64-bit platforms, `fxhash` is significantly faster than the FNV hashing algorithm because it processes 8 bytes per operation rather than one byte at a time.  \n\u274c **Counterfactual**: `fxhash` is slower than the FNV hashing algorithm on 64-bit platforms because it processes fewer bytes per operation, prioritizing accuracy over speed.  \n\n---\n\n### Pair 3: Use Cases  \n\u2705 **Factual**: The `fxhash` crate is ideal for non-cryptographic use cases, such as internal hashing within `HashMap` or `HashSet`, where performance is critical but security is not a concern.  \n\u274c **Counterfactual**: The `fxhash` crate is specifically designed for cryptographic use cases, such as secure password hashing or encryption, due to its resistance to collision attacks.",
          "source_analysis": null,
          "user_behavior": null,
          "security": null
        }
      },
      "irl_score": 8.6,
      "execution_id": "exec-4b4cfb88-2b1cdd57-1751260940",
      "timestamp": "2025-06-30T05:22:20.007625+00:00",
      "canon_version": "1.3.0"
    },
    "rule_zero_compliant": true
  }
]