[
  {
    "execution_id": "exec-0ce753ea-b424ce73-1751264454",
    "timestamp": "2025-06-30T06:20:54.148962+00:00",
    "sacred_chain": {
      "input_data": "argon2",
      "context_sources": [
        "crates.io",
        "github.com",
        "lib.rs",
        "docs.rs"
      ],
      "reasoning_steps": [
        "Input canonicalized: 'argon2' -> 'argon2'",
        "Context gathered from 4 validated sources",
        "Metadata extracted: 4 fields",
        "Documentation analyzed: quality 7.0",
        "Sentiment analyzed: positive",
        "Ecosystem analyzed: utilities",
        "Quality score synthesized: 7.50",
        "Trust decision: DEFER - Insufficient data for decision",
        "IRL confidence: 8.600"
      ],
      "suggestion": "ALLOW: Positive community sentiment",
      "verdict": "DEFER",
      "audit_info": {
        "metadata": {
          "name": "argon2",
          "type": "rust_crate",
          "source": "manual_input",
          "extraction_method": "irl_engine"
        },
        "sentiment": {
          "quality_score": 7.0,
          "completeness": 0.8,
          "examples_present": true,
          "api_documented": true
        },
        "ecosystem": {
          "overall": "positive",
          "positive_mentions": 10,
          "negative_mentions": 2,
          "neutral_mentions": 5,
          "total_mentions": 17
        },
        "quality_score": 7.5,
        "verdict_reason": "Insufficient data for decision",
        "sanitized_documentation": {
          "crates_io": {
            "url": "https://crates.io/crates/argon2",
            "title": "argon2 v0.5.3",
            "content": {
              "raw_markdown": "#  argon2 v0.5.3\nPure Rust implementation of the Argon2 password hashing function with support for the Argon2d, Argon2i, and Argon2id algorithmic variants \n  * [ #crypto ](https://crates.io/keywords/crypto)\n  * [ #hashing ](https://crates.io/keywords/hashing)\n  * [ #password ](https://crates.io/keywords/password)\n  * [ #phf ](https://crates.io/keywords/phf)\n\n\n  * [ Readme ](https://crates.io/crates/argon2)\n  * [ 28 Versions ](https://crates.io/crates/argon2/versions)\n  * [ Dependencies ](https://crates.io/crates/argon2/dependencies)\n  * [ Dependents ](https://crates.io/crates/argon2/reverse_dependencies)\n\n\n## Metadata\nover 1 year ago \nv1.65.0 \n[ MIT ](https://choosealicense.com/licenses/mit) OR [ Apache-2.0 ](https://choosealicense.com/licenses/apache-2.0)\n28.1 KiB \n## Install\nRun the following Cargo command in your project directory:\ncargo add argon2\nOr add the following line to your Cargo.toml:\nargon2 = \"0.5.3\"\n## Homepage\n[ github.com/RustCrypto/password-hashes/tree/master/argon2 ](https://github.com/RustCrypto/password-hashes/tree/master/argon2)\n## Documentation\n[ docs.rs/argon2 ](https://docs.rs/argon2)\n## Repository\n[ github.com/RustCrypto/password-hashes ](https://github.com/RustCrypto/password-hashes)\n## Owners\n## Categories\n  * [No standard library](https://crates.io/categories/no-std)\n  * [Authentication](https://crates.io/categories/authentication)\n  * [Cryptography](https://crates.io/categories/cryptography)\n\n\n[ Report crate ](https://crates.io/support?crate=argon2&inquire=crate-violation)\n### Stats Overview\n8,845,543 Downloads all time\n28 Versions published\n#### Downloads over the last 90 days\nDisplay as \nStacked \n  * Stacked \n  * Unstacked \n\n\nLoading\u2026\n",
              "markdown_with_citations": "#  argon2 v0.5.3\nPure Rust implementation of the Argon2 password hashing function with support for the Argon2d, Argon2i, and Argon2id algorithmic variants \n  *  #crypto \u27e81\u27e9\n  *  #hashing \u27e82\u27e9\n  *  #password \u27e83\u27e9\n  *  #phf \u27e84\u27e9\n\n\n  *  Readme \u27e85\u27e9\n  *  28 Versions \u27e86\u27e9\n  *  Dependencies \u27e87\u27e9\n  *  Dependents \u27e88\u27e9\n\n\n## Metadata\nover 1 year ago \nv1.65.0 \n MIT \u27e89\u27e9 OR  Apache-2.0 \u27e810\u27e9\n28.1 KiB \n## Install\nRun the following Cargo command in your project directory:\ncargo add argon2\nOr add the following line to your Cargo.toml:\nargon2 = \"0.5.3\"\n## Homepage\n github.com/RustCrypto/password-hashes/tree/master/argon2 \u27e811\u27e9\n## Documentation\n docs.rs/argon2 \u27e812\u27e9\n## Repository\n github.com/RustCrypto/password-hashes \u27e813\u27e9\n## Owners\n## Categories\n  * No standard library\u27e814\u27e9\n  * Authentication\u27e815\u27e9\n  * Cryptography\u27e816\u27e9\n\n\n Report crate \u27e817\u27e9\n### Stats Overview\n8,845,543 Downloads all time\n28 Versions published\n#### Downloads over the last 90 days\nDisplay as \nStacked \n  * Stacked \n  * Unstacked \n\n\nLoading\u2026\n",
              "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://crates.io/keywords/crypto:  #crypto \n\u27e82\u27e9 https://crates.io/keywords/hashing:  #hashing \n\u27e83\u27e9 https://crates.io/keywords/password:  #password \n\u27e84\u27e9 https://crates.io/keywords/phf:  #phf \n\u27e85\u27e9 https://crates.io/crates/argon2:  Readme \n\u27e86\u27e9 https://crates.io/crates/argon2/versions:  28 Versions \n\u27e87\u27e9 https://crates.io/crates/argon2/dependencies:  Dependencies \n\u27e88\u27e9 https://crates.io/crates/argon2/reverse_dependencies:  Dependents \n\u27e89\u27e9 https://choosealicense.com/licenses/mit:  MIT \n\u27e810\u27e9 https://choosealicense.com/licenses/apache-2.0:  Apache-2.0 \n\u27e811\u27e9 https://github.com/RustCrypto/password-hashes/tree/master/argon2:  github.com/RustCrypto/password-hashes/tree/master/argon2 \n\u27e812\u27e9 https://docs.rs/argon2:  docs.rs/argon2 \n\u27e813\u27e9 https://github.com/RustCrypto/password-hashes:  github.com/RustCrypto/password-hashes \n\u27e814\u27e9 https://crates.io/categories/no-std: No standard library\n\u27e815\u27e9 https://crates.io/categories/authentication: Authentication\n\u27e816\u27e9 https://crates.io/categories/cryptography: Cryptography\n\u27e817\u27e9 https://crates.io/support?crate=argon2&inquire=crate-violation:  Report crate \n",
              "fit_markdown": "",
              "fit_html": ""
            },
            "structured_data": {},
            "quality_score": 3.0,
            "extraction_method": "crawl4ai",
            "error": null,
            "metadata": {
              "doc_type": "docs",
              "content_length": 1694,
              "has_structured_data": false,
              "crawl_success": true
            },
            "timestamp": "118244.1376896"
          },
          "docs_rs": {
            "url": "https://docs.rs/argon2",
            "title": "Crate argon2Copy item path",
            "content": {
              "raw_markdown": "[](https://docs.rs/argon2/latest/argon2/all.html \"show sidebar\")\n# Crate argon2Copy item path\n[Settings](https://docs.rs/argon2/latest/settings.html)\n[Help](https://docs.rs/argon2/latest/help.html)\nSummary[Source](https://docs.rs/argon2/latest/src/argon2/lib.rs.html#1-696)\nExpand description\n## [\u00a7](https://docs.rs/argon2/latest/argon2/#rustcrypto-argon2)RustCrypto: Argon2\n[![crate](https://buildstats.info/crate/argon2)](https://crates.io/crates/argon2) [![Docs](https://docs.rs/argon2/badge.svg)](https://docs.rs/argon2/) [![Build Status](https://github.com/RustCrypto/password-hashes/workflows/argon2/badge.svg?branch=master&event=push)](https://github.com/RustCrypto/password-hashes/actions?query=workflow%3Aargon2) ![Apache2/MIT licensed](https://img.shields.io/badge/license-Apache2.0/MIT-blue.svg) ![Rust Version](https://img.shields.io/badge/rustc-1.65+-blue.svg) [![Project Chat](https://img.shields.io/badge/zulip-join_chat-blue.svg)](https://rustcrypto.zulipchat.com/#narrow/stream/260046-password-hashes)\nPure Rust implementation of the [Argon2](https://en.wikipedia.org/wiki/Argon2) password hashing function.\n[Documentation](https://docs.rs/argon2/)\n## [\u00a7](https://docs.rs/argon2/latest/argon2/#about)About\nArgon2 is a memory-hard [key derivation function](https://en.wikipedia.org/wiki/Key_derivation_function) chosen as the winner of the [Password Hashing Competition](https://www.password-hashing.net/) in July 2015.\nIt implements the following three algorithmic variants:\n  * **Argon2d** : maximizes resistance to GPU cracking attacks\n  * **Argon2i** : optimized to resist side-channel attacks\n  * **Argon2id** : (default) hybrid version combining both Argon2i and Argon2d\n\n\nSupport is provided for embedded (i.e. `no_std`) environments, including ones without `alloc` support.\n### [\u00a7](https://docs.rs/argon2/latest/argon2/#minimum-supported-rust-version)Minimum Supported Rust Version\nRust **1.65** or higher.\nMinimum supported Rust version can be changed in the future, but it will be done with a minor version bump.\n### [\u00a7](https://docs.rs/argon2/latest/argon2/#semver-policy)SemVer Policy\n  * All on-by-default features of this library are covered by SemVer\n  * MSRV is considered exempt from SemVer as noted above\n\n\n### [\u00a7](https://docs.rs/argon2/latest/argon2/#license)License\nLicensed under either of:\n  * [Apache License, Version 2.0](http://www.apache.org/licenses/LICENSE-2.0)\n  * [MIT license](http://opensource.org/licenses/MIT)\n\n\nat your option.\n#### [\u00a7](https://docs.rs/argon2/latest/argon2/#contribution)Contribution\nUnless you explicitly state otherwise, any contribution intentionally submitted for inclusion in the work by you, as defined in the Apache-2.0 license, shall be dual licensed as above, without any additional terms or conditions.\n### [\u00a7](https://docs.rs/argon2/latest/argon2/#usage)Usage\n#### [\u00a7](https://docs.rs/argon2/latest/argon2/#password-hashing)Password Hashing\nThis API hashes a password to a \u201cPHC string\u201d suitable for the purposes of password-based authentication. Do not use this API to derive cryptographic keys: see the \u201ckey derivation\u201d usage example below.\n```\nuse argon2::{\n  password_hash::{\n    rand_core::OsRng,\n    PasswordHash, PasswordHasher, PasswordVerifier, SaltString\n  },\n  Argon2\n};\nlet password = b\"hunter42\"; // Bad password; don't actually use!\nlet salt = SaltString::generate(&mut OsRng);\n// Argon2 with default params (Argon2id v19)\nlet argon2 = Argon2::default();\n// Hash password to PHC string ($argon2id$v=19$...)\nlet password_hash = argon2.hash_password(password, &salt)?.to_string();\n// Verify password against PHC string.\n//\n// NOTE: hash params from `parsed_hash` are used instead of what is configured in the\n// `Argon2` instance.\nlet parsed_hash = PasswordHash::new(&password_hash)?;\nassert!(Argon2::default().verify_password(password, &parsed_hash).is_ok());\n```\n\n#### [\u00a7](https://docs.rs/argon2/latest/argon2/#key-derivation)Key Derivation\nThis API is useful for transforming a password into cryptographic keys for e.g. password-based encryption.\n```\nuse argon2::Argon2;\nlet password = b\"hunter42\"; // Bad password; don't actually use!\nlet salt = b\"example salt\"; // Salt should be unique per password\nlet mut output_key_material = [0u8; 32]; // Can be any desired size\nArgon2::default().hash_password_into(password, salt, &mut output_key_material)?;\n```\n\n## Re-exports[\u00a7](https://docs.rs/argon2/latest/argon2/#reexports)\n\n`pub use password_hash[](https://docs.rs/password-hash/0.5.0/x86_64-unknown-linux-gnu/password_hash/index.html \"mod password_hash\");``password-hash`\n\n## Structs[\u00a7](https://docs.rs/argon2/latest/argon2/#structs)\n\n[Argon2](https://docs.rs/argon2/latest/argon2/struct.Argon2.html \"struct argon2::Argon2\")\n    Argon2 context.\n\n[AssociatedData](https://docs.rs/argon2/latest/argon2/struct.AssociatedData.html \"struct argon2::AssociatedData\")\n    Associated data\n\n[Block](https://docs.rs/argon2/latest/argon2/struct.Block.html \"struct argon2::Block\")\n    Structure for the (1 KiB) memory block implemented as 128 64-bit words.\n\n[KeyId](https://docs.rs/argon2/latest/argon2/struct.KeyId.html \"struct argon2::KeyId\")\n    Key identifier\n\n[Params](https://docs.rs/argon2/latest/argon2/struct.Params.html \"struct argon2::Params\")\n    Argon2 password hash parameters.\n\n[ParamsBuilder](https://docs.rs/argon2/latest/argon2/struct.ParamsBuilder.html \"struct argon2::ParamsBuilder\")\n    Builder for Argon2 [`Params`](https://docs.rs/argon2/latest/argon2/struct.Params.html \"struct argon2::Params\").\n\n[PasswordHash](https://docs.rs/argon2/latest/argon2/struct.PasswordHash.html \"struct argon2::PasswordHash\")`password-hash`\n    Password hash.\n## Enums[\u00a7](https://docs.rs/argon2/latest/argon2/#enums)\n\n[Algorithm](https://docs.rs/argon2/latest/argon2/enum.Algorithm.html \"enum argon2::Algorithm\")\n    Argon2 primitive type: variants of the algorithm.\n\n[Error](https://docs.rs/argon2/latest/argon2/enum.Error.html \"enum argon2::Error\")\n    Error type.\n\n[Version](https://docs.rs/argon2/latest/argon2/enum.Version.html \"enum argon2::Version\")\n    Version of the algorithm.\n## Constants[\u00a7](https://docs.rs/argon2/latest/argon2/#constants)\n\n[ARGON2D_IDENT](https://docs.rs/argon2/latest/argon2/constant.ARGON2D_IDENT.html \"constant argon2::ARGON2D_IDENT\")`password-hash`\n    Argon2d algorithm identifier\n\n[ARGON2ID_IDENT](https://docs.rs/argon2/latest/argon2/constant.ARGON2ID_IDENT.html \"constant argon2::ARGON2ID_IDENT\")`password-hash`\n    Argon2id algorithm identifier\n\n[ARGON2I_IDENT](https://docs.rs/argon2/latest/argon2/constant.ARGON2I_IDENT.html \"constant argon2::ARGON2I_IDENT\")`password-hash`\n    Argon2i algorithm identifier\n\n[MAX_PWD_LEN](https://docs.rs/argon2/latest/argon2/constant.MAX_PWD_LEN.html \"constant argon2::MAX_PWD_LEN\")\n    Maximum password length in bytes.\n\n[MAX_SALT_LEN](https://docs.rs/argon2/latest/argon2/constant.MAX_SALT_LEN.html \"constant argon2::MAX_SALT_LEN\")\n    Maximum salt length in bytes.\n\n[MAX_SECRET_LEN](https://docs.rs/argon2/latest/argon2/constant.MAX_SECRET_LEN.html \"constant argon2::MAX_SECRET_LEN\")\n    Maximum secret key length in bytes.\n\n[MIN_SALT_LEN](https://docs.rs/argon2/latest/argon2/constant.MIN_SALT_LEN.html \"constant argon2::MIN_SALT_LEN\")\n    Minimum salt length in bytes.\n\n[RECOMMENDED_SALT_LEN](https://docs.rs/argon2/latest/argon2/constant.RECOMMENDED_SALT_LEN.html \"constant argon2::RECOMMENDED_SALT_LEN\")\n    Recommended salt length for password hashing in bytes.\n## Traits[\u00a7](https://docs.rs/argon2/latest/argon2/#traits)\n\n[PasswordHasher](https://docs.rs/argon2/latest/argon2/trait.PasswordHasher.html \"trait argon2::PasswordHasher\")`password-hash`\n    Trait for password hashing functions.\n\n[PasswordVerifier](https://docs.rs/argon2/latest/argon2/trait.PasswordVerifier.html \"trait argon2::PasswordVerifier\")`password-hash`\n    Trait for password verification.\n## Type Aliases[\u00a7](https://docs.rs/argon2/latest/argon2/#types)\n\n[Result](https://docs.rs/argon2/latest/argon2/type.Result.html \"type argon2::Result\")\n    Result with argon2\u2019s [`Error`](https://docs.rs/argon2/latest/argon2/enum.Error.html \"enum argon2::Error\") type.\n",
              "markdown_with_citations": "[](https://docs.rs/argon2/latest/argon2/all.html \"show sidebar\")\n# Crate argon2Copy item path\nSettings\u27e81\u27e9\nHelp\u27e82\u27e9\nSummarySource\u27e83\u27e9\nExpand description\n## \u00a7\u27e84\u27e9RustCrypto: Argon2\n![crate\u27e85\u27e9](https://crates.io/crates/argon2) ![Docs\u27e86\u27e9](https://docs.rs/argon2/) ![Build Status\u27e87\u27e9](https://github.com/RustCrypto/password-hashes/actions?query=workflow%3Aargon2) ![Apache2/MIT licensed\u27e88\u27e9] ![Rust Version\u27e89\u27e9] ![Project Chat\u27e810\u27e9](https://rustcrypto.zulipchat.com/#narrow/stream/260046-password-hashes)\nPure Rust implementation of the Argon2\u27e811\u27e9 password hashing function.\nDocumentation\u27e812\u27e9\n## \u00a7\u27e813\u27e9About\nArgon2 is a memory-hard key derivation function\u27e814\u27e9 chosen as the winner of the Password Hashing Competition\u27e815\u27e9 in July 2015.\nIt implements the following three algorithmic variants:\n  * **Argon2d** : maximizes resistance to GPU cracking attacks\n  * **Argon2i** : optimized to resist side-channel attacks\n  * **Argon2id** : (default) hybrid version combining both Argon2i and Argon2d\n\n\nSupport is provided for embedded (i.e. `no_std`) environments, including ones without `alloc` support.\n### \u00a7\u27e816\u27e9Minimum Supported Rust Version\nRust **1.65** or higher.\nMinimum supported Rust version can be changed in the future, but it will be done with a minor version bump.\n### \u00a7\u27e817\u27e9SemVer Policy\n  * All on-by-default features of this library are covered by SemVer\n  * MSRV is considered exempt from SemVer as noted above\n\n\n### \u00a7\u27e818\u27e9License\nLicensed under either of:\n  * Apache License, Version 2.0\u27e819\u27e9\n  * MIT license\u27e820\u27e9\n\n\nat your option.\n#### \u00a7\u27e821\u27e9Contribution\nUnless you explicitly state otherwise, any contribution intentionally submitted for inclusion in the work by you, as defined in the Apache-2.0 license, shall be dual licensed as above, without any additional terms or conditions.\n### \u00a7\u27e822\u27e9Usage\n#### \u00a7\u27e823\u27e9Password Hashing\nThis API hashes a password to a \u201cPHC string\u201d suitable for the purposes of password-based authentication. Do not use this API to derive cryptographic keys: see the \u201ckey derivation\u201d usage example below.\n```\nuse argon2::{\n  password_hash::{\n    rand_core::OsRng,\n    PasswordHash, PasswordHasher, PasswordVerifier, SaltString\n  },\n  Argon2\n};\nlet password = b\"hunter42\"; // Bad password; don't actually use!\nlet salt = SaltString::generate(&mut OsRng);\n// Argon2 with default params (Argon2id v19)\nlet argon2 = Argon2::default();\n// Hash password to PHC string ($argon2id$v=19$...)\nlet password_hash = argon2.hash_password(password, &salt)?.to_string();\n// Verify password against PHC string.\n//\n// NOTE: hash params from `parsed_hash` are used instead of what is configured in the\n// `Argon2` instance.\nlet parsed_hash = PasswordHash::new(&password_hash)?;\nassert!(Argon2::default().verify_password(password, &parsed_hash).is_ok());\n```\n\n#### \u00a7\u27e824\u27e9Key Derivation\nThis API is useful for transforming a password into cryptographic keys for e.g. password-based encryption.\n```\nuse argon2::Argon2;\nlet password = b\"hunter42\"; // Bad password; don't actually use!\nlet salt = b\"example salt\"; // Salt should be unique per password\nlet mut output_key_material = [0u8; 32]; // Can be any desired size\nArgon2::default().hash_password_into(password, salt, &mut output_key_material)?;\n```\n\n## Re-exports\u00a7\u27e825\u27e9\n\n`pub use password_hash[](https://docs.rs/password-hash/0.5.0/x86_64-unknown-linux-gnu/password_hash/index.html \"mod password_hash\");``password-hash`\n\n## Structs\u00a7\u27e826\u27e9\n\nArgon2\u27e827\u27e9\n    Argon2 context.\n\nAssociatedData\u27e828\u27e9\n    Associated data\n\nBlock\u27e829\u27e9\n    Structure for the (1 KiB) memory block implemented as 128 64-bit words.\n\nKeyId\u27e830\u27e9\n    Key identifier\n\nParams\u27e831\u27e9\n    Argon2 password hash parameters.\n\nParamsBuilder\u27e832\u27e9\n    Builder for Argon2 `Params`\u27e831\u27e9.\n\nPasswordHash\u27e833\u27e9`password-hash`\n    Password hash.\n## Enums\u00a7\u27e834\u27e9\n\nAlgorithm\u27e835\u27e9\n    Argon2 primitive type: variants of the algorithm.\n\nError\u27e836\u27e9\n    Error type.\n\nVersion\u27e837\u27e9\n    Version of the algorithm.\n## Constants\u00a7\u27e838\u27e9\n\nARGON2D_IDENT\u27e839\u27e9`password-hash`\n    Argon2d algorithm identifier\n\nARGON2ID_IDENT\u27e840\u27e9`password-hash`\n    Argon2id algorithm identifier\n\nARGON2I_IDENT\u27e841\u27e9`password-hash`\n    Argon2i algorithm identifier\n\nMAX_PWD_LEN\u27e842\u27e9\n    Maximum password length in bytes.\n\nMAX_SALT_LEN\u27e843\u27e9\n    Maximum salt length in bytes.\n\nMAX_SECRET_LEN\u27e844\u27e9\n    Maximum secret key length in bytes.\n\nMIN_SALT_LEN\u27e845\u27e9\n    Minimum salt length in bytes.\n\nRECOMMENDED_SALT_LEN\u27e846\u27e9\n    Recommended salt length for password hashing in bytes.\n## Traits\u00a7\u27e847\u27e9\n\nPasswordHasher\u27e848\u27e9`password-hash`\n    Trait for password hashing functions.\n\nPasswordVerifier\u27e849\u27e9`password-hash`\n    Trait for password verification.\n## Type Aliases\u00a7\u27e850\u27e9\n\nResult\u27e851\u27e9\n    Result with argon2\u2019s `Error`\u27e836\u27e9 type.\n",
              "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://docs.rs/argon2/latest/settings.html: Settings\n\u27e82\u27e9 https://docs.rs/argon2/latest/help.html: Help\n\u27e83\u27e9 https://docs.rs/argon2/latest/src/argon2/lib.rs.html#1-696: Source\n\u27e84\u27e9 https://docs.rs/argon2/latest/argon2/#rustcrypto-argon2: \u00a7\n\u27e85\u27e9 https://buildstats.info/crate/argon2: ![crate\n\u27e86\u27e9 https://docs.rs/argon2/badge.svg: ![Docs\n\u27e87\u27e9 https://github.com/RustCrypto/password-hashes/workflows/argon2/badge.svg?branch=master&event=push: ![Build Status\n\u27e88\u27e9 https://img.shields.io/badge/license-Apache2.0/MIT-blue.svg: Apache2/MIT licensed\n\u27e89\u27e9 https://img.shields.io/badge/rustc-1.65+-blue.svg: Rust Version\n\u27e810\u27e9 https://img.shields.io/badge/zulip-join_chat-blue.svg: ![Project Chat\n\u27e811\u27e9 https://en.wikipedia.org/wiki/Argon2: Argon2\n\u27e812\u27e9 https://docs.rs/argon2/: Documentation\n\u27e813\u27e9 https://docs.rs/argon2/latest/argon2/#about: \u00a7\n\u27e814\u27e9 https://en.wikipedia.org/wiki/Key_derivation_function: key derivation function\n\u27e815\u27e9 https://www.password-hashing.net/: Password Hashing Competition\n\u27e816\u27e9 https://docs.rs/argon2/latest/argon2/#minimum-supported-rust-version: \u00a7\n\u27e817\u27e9 https://docs.rs/argon2/latest/argon2/#semver-policy: \u00a7\n\u27e818\u27e9 https://docs.rs/argon2/latest/argon2/#license: \u00a7\n\u27e819\u27e9 http://www.apache.org/licenses/LICENSE-2.0: Apache License, Version 2.0\n\u27e820\u27e9 http://opensource.org/licenses/MIT: MIT license\n\u27e821\u27e9 https://docs.rs/argon2/latest/argon2/#contribution: \u00a7\n\u27e822\u27e9 https://docs.rs/argon2/latest/argon2/#usage: \u00a7\n\u27e823\u27e9 https://docs.rs/argon2/latest/argon2/#password-hashing: \u00a7\n\u27e824\u27e9 https://docs.rs/argon2/latest/argon2/#key-derivation: \u00a7\n\u27e825\u27e9 https://docs.rs/argon2/latest/argon2/#reexports: \u00a7\n\u27e826\u27e9 https://docs.rs/argon2/latest/argon2/#structs: \u00a7\n\u27e827\u27e9 https://docs.rs/argon2/latest/argon2/struct.Argon2.html: struct argon2::Argon2 - Argon2\n\u27e828\u27e9 https://docs.rs/argon2/latest/argon2/struct.AssociatedData.html: struct argon2::AssociatedData - AssociatedData\n\u27e829\u27e9 https://docs.rs/argon2/latest/argon2/struct.Block.html: struct argon2::Block - Block\n\u27e830\u27e9 https://docs.rs/argon2/latest/argon2/struct.KeyId.html: struct argon2::KeyId - KeyId\n\u27e831\u27e9 https://docs.rs/argon2/latest/argon2/struct.Params.html: struct argon2::Params - Params\n\u27e832\u27e9 https://docs.rs/argon2/latest/argon2/struct.ParamsBuilder.html: struct argon2::ParamsBuilder - ParamsBuilder\n\u27e833\u27e9 https://docs.rs/argon2/latest/argon2/struct.PasswordHash.html: struct argon2::PasswordHash - PasswordHash\n\u27e834\u27e9 https://docs.rs/argon2/latest/argon2/#enums: \u00a7\n\u27e835\u27e9 https://docs.rs/argon2/latest/argon2/enum.Algorithm.html: enum argon2::Algorithm - Algorithm\n\u27e836\u27e9 https://docs.rs/argon2/latest/argon2/enum.Error.html: enum argon2::Error - Error\n\u27e837\u27e9 https://docs.rs/argon2/latest/argon2/enum.Version.html: enum argon2::Version - Version\n\u27e838\u27e9 https://docs.rs/argon2/latest/argon2/#constants: \u00a7\n\u27e839\u27e9 https://docs.rs/argon2/latest/argon2/constant.ARGON2D_IDENT.html: constant argon2::ARGON2D_IDENT - ARGON2D_IDENT\n\u27e840\u27e9 https://docs.rs/argon2/latest/argon2/constant.ARGON2ID_IDENT.html: constant argon2::ARGON2ID_IDENT - ARGON2ID_IDENT\n\u27e841\u27e9 https://docs.rs/argon2/latest/argon2/constant.ARGON2I_IDENT.html: constant argon2::ARGON2I_IDENT - ARGON2I_IDENT\n\u27e842\u27e9 https://docs.rs/argon2/latest/argon2/constant.MAX_PWD_LEN.html: constant argon2::MAX_PWD_LEN - MAX_PWD_LEN\n\u27e843\u27e9 https://docs.rs/argon2/latest/argon2/constant.MAX_SALT_LEN.html: constant argon2::MAX_SALT_LEN - MAX_SALT_LEN\n\u27e844\u27e9 https://docs.rs/argon2/latest/argon2/constant.MAX_SECRET_LEN.html: constant argon2::MAX_SECRET_LEN - MAX_SECRET_LEN\n\u27e845\u27e9 https://docs.rs/argon2/latest/argon2/constant.MIN_SALT_LEN.html: constant argon2::MIN_SALT_LEN - MIN_SALT_LEN\n\u27e846\u27e9 https://docs.rs/argon2/latest/argon2/constant.RECOMMENDED_SALT_LEN.html: constant argon2::RECOMMENDED_SALT_LEN - RECOMMENDED_SALT_LEN\n\u27e847\u27e9 https://docs.rs/argon2/latest/argon2/#traits: \u00a7\n\u27e848\u27e9 https://docs.rs/argon2/latest/argon2/trait.PasswordHasher.html: trait argon2::PasswordHasher - PasswordHasher\n\u27e849\u27e9 https://docs.rs/argon2/latest/argon2/trait.PasswordVerifier.html: trait argon2::PasswordVerifier - PasswordVerifier\n\u27e850\u27e9 https://docs.rs/argon2/latest/argon2/#types: \u00a7\n\u27e851\u27e9 https://docs.rs/argon2/latest/argon2/type.Result.html: type argon2::Result - Result\n",
              "fit_markdown": "",
              "fit_html": ""
            },
            "structured_data": {},
            "quality_score": 4.0,
            "extraction_method": "crawl4ai",
            "error": null,
            "metadata": {
              "doc_type": "docs",
              "content_length": 8095,
              "has_structured_data": false,
              "crawl_success": true
            },
            "timestamp": "118244.8750544"
          },
          "lib_rs": {
            "url": "https://lib.rs/crates/argon2",
            "title": "Untitled",
            "content": {
              "raw_markdown": "###  [16 releases](https://lib.rs/crates/argon2/versions)\n0.6.0-pre.1 |  Jul 27, 2024   \n---|---  \n0.6.0-pre.0 |  Feb 8, 2024   \n0.5.3 |  Jan 20, 2024   \n0.5.2 |  Sep 4, 2023   \n0.0.0 |  ~~Feb 28, 2017~~  \n#**5** in [Authentication](https://lib.rs/authentication \"Crates to help with the process of confirming identities.\")\nDownload history 102015/week @ 2025-02-05 95726/week @ 2025-02-12 104060/week @ 2025-02-19 106676/week @ 2025-02-26 103863/week @ 2025-03-05 102649/week @ 2025-03-12 102784/week @ 2025-03-19 100668/week @ 2025-03-26 105629/week @ 2025-04-02 113311/week @ 2025-04-09 99996/week @ 2025-04-16 108332/week @ 2025-04-23 111305/week @ 2025-04-30 117861/week @ 2025-05-07 120740/week @ 2025-05-14 125634/week @ 2025-05-21\n**495,090** downloads per month Used in [**736** crates (266 directly)](https://lib.rs/crates/argon2/rev)\n**MIT/Apache**\n62KB  1K  SLoC\n# RustCrypto: Argon2\n[![crate](https://img.gs/czjpqfbdkz/full/https://buildstats.info/crate/argon2)](https://crates.io/crates/argon2) [![Docs](https://img.gs/czjpqfbdkz/full/https://docs.rs/argon2/badge.svg)](https://docs.rs/argon2/) [![Build Status](https://img.gs/czjpqfbdkz/full/https://github.com/RustCrypto/password-hashes/workflows/argon2/badge.svg?branch=master&event=push)](https://github.com/RustCrypto/password-hashes/actions?query=workflow%3Aargon2) ![Apache2/MIT licensed](https://img.shields.io/badge/license-Apache2.0/MIT-blue.svg) ![Rust Version](https://img.shields.io/badge/rustc-1.65+-blue.svg) [![Project Chat](https://img.shields.io/badge/zulip-join_chat-blue.svg)](https://rustcrypto.zulipchat.com/#narrow/stream/260046-password-hashes)\nPure Rust implementation of the [Argon2](https://en.wikipedia.org/wiki/Argon2) password hashing function.\n[Documentation](https://docs.rs/argon2/)\n# About\nArgon2 is a memory-hard [key derivation function](https://en.wikipedia.org/wiki/Key_derivation_function) chosen as the winner of the [Password Hashing Competition](https://www.password-hashing.net/) in July 2015.\nIt implements the following three algorithmic variants:\n  * **Argon2d** : maximizes resistance to GPU cracking attacks\n  * **Argon2i** : optimized to resist side-channel attacks\n  * **Argon2id** : (default) hybrid version combining both Argon2i and Argon2d\n\n\nSupport is provided for embedded (i.e. ``no_std``) environments, including ones without ``alloc`` support.\n## Minimum Supported Rust Version\nRust **1.65** or higher.\nMinimum supported Rust version can be changed in the future, but it will be done with a minor version bump.\n## SemVer Policy\n  * All on-by-default features of this library are covered by SemVer\n  * MSRV is considered exempt from SemVer as noted above\n\n\n## License\nLicensed under either of:\n  * [Apache License, Version 2.0](http://www.apache.org/licenses/LICENSE-2.0)\n  * [MIT license](http://opensource.org/licenses/MIT)\n\n\nat your option.\n### Contribution\nUnless you explicitly state otherwise, any contribution intentionally submitted for inclusion in the work by you, as defined in the Apache-2.0 license, shall be dual licensed as above, without any additional terms or conditions.\n#### Dependencies\n~1MB  ~23K SLoC\n  * [base64ct](https://lib.rs/crates/base64ct \"1\")\n  * [blake2](https://lib.rs/crates/blake2 \"obsolete\") =0.11.0-pre.4\n  * [cpufeatures](https://lib.rs/crates/cpufeatures \"0.2.12\") x86 x86_64\n  * [alloc](https://lib.rs/crates/argon2/features#feature-alloc \"default feature\") [rand](https://lib.rs/crates/argon2/features#feature-rand \"default feature\") [std?](https://lib.rs/crates/argon2/features#feature-std \"optional feature\") [password-hash](https://lib.rs/crates/password-hash \"new\") 0.6.0-rc.0\n  * [ optional ](https://lib.rs/crates/argon2/features#feature-zeroize \"zeroize is optional feature\") [zeroize](https://lib.rs/crates/zeroize \"1\")\n\n\n  * dev  [hex-literal](https://lib.rs/crates/hex-literal \"outdated\") 0.4\n\n\n#### [Other feature](https://lib.rs/crates/argon2/features)\n  * [simple](https://lib.rs/crates/argon2/features#feature-simple)\n\n\n  *[SLoC]: approx. additional lines of code\n",
              "markdown_with_citations": "###  16 releases\u27e81\u27e9\n0.6.0-pre.1 |  Jul 27, 2024   \n---|---  \n0.6.0-pre.0 |  Feb 8, 2024   \n0.5.3 |  Jan 20, 2024   \n0.5.2 |  Sep 4, 2023   \n0.0.0 |  ~~Feb 28, 2017~~  \n#**5** in Authentication\u27e82\u27e9\nDownload history 102015/week @ 2025-02-05 95726/week @ 2025-02-12 104060/week @ 2025-02-19 106676/week @ 2025-02-26 103863/week @ 2025-03-05 102649/week @ 2025-03-12 102784/week @ 2025-03-19 100668/week @ 2025-03-26 105629/week @ 2025-04-02 113311/week @ 2025-04-09 99996/week @ 2025-04-16 108332/week @ 2025-04-23 111305/week @ 2025-04-30 117861/week @ 2025-05-07 120740/week @ 2025-05-14 125634/week @ 2025-05-21\n**495,090** downloads per month Used in **736** crates (266 directly)\u27e83\u27e9\n**MIT/Apache**\n62KB  1K  SLoC\n# RustCrypto: Argon2\n![crate\u27e84\u27e9](https://crates.io/crates/argon2) ![Docs\u27e85\u27e9](https://docs.rs/argon2/) ![Build Status\u27e86\u27e9](https://github.com/RustCrypto/password-hashes/actions?query=workflow%3Aargon2) ![Apache2/MIT licensed\u27e87\u27e9] ![Rust Version\u27e88\u27e9] ![Project Chat\u27e89\u27e9](https://rustcrypto.zulipchat.com/#narrow/stream/260046-password-hashes)\nPure Rust implementation of the Argon2\u27e810\u27e9 password hashing function.\nDocumentation\u27e811\u27e9\n# About\nArgon2 is a memory-hard key derivation function\u27e812\u27e9 chosen as the winner of the Password Hashing Competition\u27e813\u27e9 in July 2015.\nIt implements the following three algorithmic variants:\n  * **Argon2d** : maximizes resistance to GPU cracking attacks\n  * **Argon2i** : optimized to resist side-channel attacks\n  * **Argon2id** : (default) hybrid version combining both Argon2i and Argon2d\n\n\nSupport is provided for embedded (i.e. ``no_std``) environments, including ones without ``alloc`` support.\n## Minimum Supported Rust Version\nRust **1.65** or higher.\nMinimum supported Rust version can be changed in the future, but it will be done with a minor version bump.\n## SemVer Policy\n  * All on-by-default features of this library are covered by SemVer\n  * MSRV is considered exempt from SemVer as noted above\n\n\n## License\nLicensed under either of:\n  * Apache License, Version 2.0\u27e814\u27e9\n  * MIT license\u27e815\u27e9\n\n\nat your option.\n### Contribution\nUnless you explicitly state otherwise, any contribution intentionally submitted for inclusion in the work by you, as defined in the Apache-2.0 license, shall be dual licensed as above, without any additional terms or conditions.\n#### Dependencies\n~1MB  ~23K SLoC\n  * base64ct\u27e816\u27e9\n  * blake2\u27e817\u27e9 =0.11.0-pre.4\n  * cpufeatures\u27e818\u27e9 x86 x86_64\n  * alloc\u27e819\u27e9 rand\u27e820\u27e9 std?\u27e821\u27e9 password-hash\u27e822\u27e9 0.6.0-rc.0\n  *  optional \u27e823\u27e9 zeroize\u27e824\u27e9\n\n\n  * dev  hex-literal\u27e825\u27e9 0.4\n\n\n#### Other feature\u27e826\u27e9\n  * simple\u27e827\u27e9\n\n\n  *[SLoC]: approx. additional lines of code\n",
              "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://lib.rs/crates/argon2/versions: 16 releases\n\u27e82\u27e9 https://lib.rs/authentication: Crates to help with the process of confirming identities. - Authentication\n\u27e83\u27e9 https://lib.rs/crates/argon2/rev: **736** crates (266 directly)\n\u27e84\u27e9 https://img.gs/czjpqfbdkz/full/https://buildstats.info/crate/argon2: ![crate\n\u27e85\u27e9 https://img.gs/czjpqfbdkz/full/https://docs.rs/argon2/badge.svg: ![Docs\n\u27e86\u27e9 https://img.gs/czjpqfbdkz/full/https://github.com/RustCrypto/password-hashes/workflows/argon2/badge.svg?branch=master&event=push: ![Build Status\n\u27e87\u27e9 https://img.shields.io/badge/license-Apache2.0/MIT-blue.svg: Apache2/MIT licensed\n\u27e88\u27e9 https://img.shields.io/badge/rustc-1.65+-blue.svg: Rust Version\n\u27e89\u27e9 https://img.shields.io/badge/zulip-join_chat-blue.svg: ![Project Chat\n\u27e810\u27e9 https://en.wikipedia.org/wiki/Argon2: Argon2\n\u27e811\u27e9 https://docs.rs/argon2/: Documentation\n\u27e812\u27e9 https://en.wikipedia.org/wiki/Key_derivation_function: key derivation function\n\u27e813\u27e9 https://www.password-hashing.net/: Password Hashing Competition\n\u27e814\u27e9 http://www.apache.org/licenses/LICENSE-2.0: Apache License, Version 2.0\n\u27e815\u27e9 http://opensource.org/licenses/MIT: MIT license\n\u27e816\u27e9 https://lib.rs/crates/base64ct: 1 - base64ct\n\u27e817\u27e9 https://lib.rs/crates/blake2: obsolete - blake2\n\u27e818\u27e9 https://lib.rs/crates/cpufeatures: 0.2.12 - cpufeatures\n\u27e819\u27e9 https://lib.rs/crates/argon2/features#feature-alloc: default feature - alloc\n\u27e820\u27e9 https://lib.rs/crates/argon2/features#feature-rand: default feature - rand\n\u27e821\u27e9 https://lib.rs/crates/argon2/features#feature-std: optional feature - std?\n\u27e822\u27e9 https://lib.rs/crates/password-hash: new - password-hash\n\u27e823\u27e9 https://lib.rs/crates/argon2/features#feature-zeroize: zeroize is optional feature -  optional \n\u27e824\u27e9 https://lib.rs/crates/zeroize: 1 - zeroize\n\u27e825\u27e9 https://lib.rs/crates/hex-literal: outdated - hex-literal\n\u27e826\u27e9 https://lib.rs/crates/argon2/features: Other feature\n\u27e827\u27e9 https://lib.rs/crates/argon2/features#feature-simple: simple\n",
              "fit_markdown": "",
              "fit_html": ""
            },
            "structured_data": {},
            "quality_score": 3.0,
            "extraction_method": "crawl4ai",
            "error": null,
            "metadata": {
              "doc_type": "docs",
              "content_length": 4042,
              "has_structured_data": false,
              "crawl_success": true
            },
            "timestamp": "118245.2649825"
          }
        },
        "crate_analysis": {
          "status": "completed",
          "check": [
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#cpufeatures@0.2.17",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\cpufeatures-0.2.17\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "cpufeatures",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\cpufeatures-0.2.17\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpqwpl7rd2\\argon2-0.6.0-rc.0\\target\\debug\\deps\\libcpufeatures-43bbc20eaecde5c1.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#subtle@2.6.1",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\subtle-2.6.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "subtle",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\subtle-2.6.1\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpqwpl7rd2\\argon2-0.6.0-rc.0\\target\\debug\\deps\\libsubtle-6a8dd217adcca8a8.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#rand_core@0.9.3",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\rand_core-0.9.3\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "rand_core",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\rand_core-0.9.3\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpqwpl7rd2\\argon2-0.6.0-rc.0\\target\\debug\\deps\\librand_core-5a4f3dd9dec8705a.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#base64ct@1.7.3",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\base64ct-1.7.3\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "base64ct",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\base64ct-1.7.3\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "alloc"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpqwpl7rd2\\argon2-0.6.0-rc.0\\target\\debug\\deps\\libbase64ct-87413a1e3840ca79.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#typenum@1.18.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\typenum-1.18.0\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\typenum-1.18.0\\build.rs",
                "edition": "2018",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "const-generics"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpqwpl7rd2\\argon2-0.6.0-rc.0\\target\\debug\\build\\typenum-75aafb45fe2a7a07\\build-script-build.exe",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpqwpl7rd2\\argon2-0.6.0-rc.0\\target\\debug\\build\\typenum-75aafb45fe2a7a07\\build_script_build.pdb"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "build-script-executed",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#typenum@1.18.0",
              "linked_libs": [],
              "linked_paths": [],
              "cfgs": [],
              "env": [],
              "out_dir": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpqwpl7rd2\\argon2-0.6.0-rc.0\\target\\debug\\build\\typenum-e40791351e9000e0\\out"
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#password-hash@0.6.0-rc.1",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\password-hash-0.6.0-rc.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "password_hash",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\password-hash-0.6.0-rc.1\\src\\lib.rs",
                "edition": "2024",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "alloc",
                "default",
                "rand_core"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpqwpl7rd2\\argon2-0.6.0-rc.0\\target\\debug\\deps\\libpassword_hash-7b6001b7e162dbd2.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#typenum@1.18.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\typenum-1.18.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "typenum",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\typenum-1.18.0\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "const-generics"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpqwpl7rd2\\argon2-0.6.0-rc.0\\target\\debug\\deps\\libtypenum-76d447ffd7e562e6.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#hybrid-array@0.3.1",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\hybrid-array-0.3.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "hybrid_array",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\hybrid-array-0.3.1\\src\\lib.rs",
                "edition": "2024",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpqwpl7rd2\\argon2-0.6.0-rc.0\\target\\debug\\deps\\libhybrid_array-2ff231d0a84d2dbb.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#block-buffer@0.11.0-rc.4",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\block-buffer-0.11.0-rc.4\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "block_buffer",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\block-buffer-0.11.0-rc.4\\src\\lib.rs",
                "edition": "2024",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpqwpl7rd2\\argon2-0.6.0-rc.0\\target\\debug\\deps\\libblock_buffer-be2df1ace94c155d.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#crypto-common@0.2.0-rc.3",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\crypto-common-0.2.0-rc.3\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "crypto_common",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\crypto-common-0.2.0-rc.3\\src\\lib.rs",
                "edition": "2024",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpqwpl7rd2\\argon2-0.6.0-rc.0\\target\\debug\\deps\\libcrypto_common-36355164d657a275.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#digest@0.11.0-rc.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\digest-0.11.0-rc.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "digest",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\digest-0.11.0-rc.0\\src\\lib.rs",
                "edition": "2024",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "block-api",
                "block-buffer",
                "default",
                "mac",
                "subtle"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpqwpl7rd2\\argon2-0.6.0-rc.0\\target\\debug\\deps\\libdigest-00f7ee8fd74c8d72.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#blake2@0.11.0-rc.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\blake2-0.11.0-rc.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "blake2",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\blake2-0.11.0-rc.0\\src\\lib.rs",
                "edition": "2024",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpqwpl7rd2\\argon2-0.6.0-rc.0\\target\\debug\\deps\\libblake2-6bf2ab11721495dc.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpqwpl7rd2/argon2-0.6.0-rc.0#argon2@0.6.0-rc.0",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpqwpl7rd2\\argon2-0.6.0-rc.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "argon2",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpqwpl7rd2\\argon2-0.6.0-rc.0\\src\\lib.rs",
                "edition": "2024",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "alloc",
                "default",
                "password-hash",
                "rand"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpqwpl7rd2\\argon2-0.6.0-rc.0\\target\\debug\\deps\\libargon2-9edb87989c089a91.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "build-finished",
              "success": true
            }
          ],
          "clippy": [
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#typenum@1.18.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\typenum-1.18.0\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\typenum-1.18.0\\build.rs",
                "edition": "2018",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "const-generics"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpqwpl7rd2\\argon2-0.6.0-rc.0\\target\\debug\\build\\typenum-75aafb45fe2a7a07\\build-script-build.exe",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpqwpl7rd2\\argon2-0.6.0-rc.0\\target\\debug\\build\\typenum-75aafb45fe2a7a07\\build_script_build.pdb"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "build-script-executed",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#typenum@1.18.0",
              "linked_libs": [],
              "linked_paths": [],
              "cfgs": [],
              "env": [],
              "out_dir": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpqwpl7rd2\\argon2-0.6.0-rc.0\\target\\debug\\build\\typenum-e40791351e9000e0\\out"
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#subtle@2.6.1",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\subtle-2.6.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "subtle",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\subtle-2.6.1\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpqwpl7rd2\\argon2-0.6.0-rc.0\\target\\debug\\deps\\libsubtle-6a8dd217adcca8a8.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#rand_core@0.9.3",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\rand_core-0.9.3\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "rand_core",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\rand_core-0.9.3\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpqwpl7rd2\\argon2-0.6.0-rc.0\\target\\debug\\deps\\librand_core-5a4f3dd9dec8705a.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#base64ct@1.7.3",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\base64ct-1.7.3\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "base64ct",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\base64ct-1.7.3\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "alloc"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpqwpl7rd2\\argon2-0.6.0-rc.0\\target\\debug\\deps\\libbase64ct-87413a1e3840ca79.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#cpufeatures@0.2.17",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\cpufeatures-0.2.17\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "cpufeatures",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\cpufeatures-0.2.17\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpqwpl7rd2\\argon2-0.6.0-rc.0\\target\\debug\\deps\\libcpufeatures-43bbc20eaecde5c1.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#typenum@1.18.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\typenum-1.18.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "typenum",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\typenum-1.18.0\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "const-generics"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpqwpl7rd2\\argon2-0.6.0-rc.0\\target\\debug\\deps\\libtypenum-76d447ffd7e562e6.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#password-hash@0.6.0-rc.1",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\password-hash-0.6.0-rc.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "password_hash",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\password-hash-0.6.0-rc.1\\src\\lib.rs",
                "edition": "2024",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "alloc",
                "default",
                "rand_core"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpqwpl7rd2\\argon2-0.6.0-rc.0\\target\\debug\\deps\\libpassword_hash-7b6001b7e162dbd2.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#hybrid-array@0.3.1",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\hybrid-array-0.3.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "hybrid_array",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\hybrid-array-0.3.1\\src\\lib.rs",
                "edition": "2024",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpqwpl7rd2\\argon2-0.6.0-rc.0\\target\\debug\\deps\\libhybrid_array-2ff231d0a84d2dbb.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#crypto-common@0.2.0-rc.3",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\crypto-common-0.2.0-rc.3\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "crypto_common",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\crypto-common-0.2.0-rc.3\\src\\lib.rs",
                "edition": "2024",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpqwpl7rd2\\argon2-0.6.0-rc.0\\target\\debug\\deps\\libcrypto_common-36355164d657a275.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#block-buffer@0.11.0-rc.4",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\block-buffer-0.11.0-rc.4\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "block_buffer",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\block-buffer-0.11.0-rc.4\\src\\lib.rs",
                "edition": "2024",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpqwpl7rd2\\argon2-0.6.0-rc.0\\target\\debug\\deps\\libblock_buffer-be2df1ace94c155d.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#digest@0.11.0-rc.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\digest-0.11.0-rc.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "digest",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\digest-0.11.0-rc.0\\src\\lib.rs",
                "edition": "2024",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "block-api",
                "block-buffer",
                "default",
                "mac",
                "subtle"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpqwpl7rd2\\argon2-0.6.0-rc.0\\target\\debug\\deps\\libdigest-00f7ee8fd74c8d72.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#blake2@0.11.0-rc.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\blake2-0.11.0-rc.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "blake2",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\blake2-0.11.0-rc.0\\src\\lib.rs",
                "edition": "2024",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpqwpl7rd2\\argon2-0.6.0-rc.0\\target\\debug\\deps\\libblake2-6bf2ab11721495dc.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpqwpl7rd2/argon2-0.6.0-rc.0#argon2@0.6.0-rc.0",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpqwpl7rd2\\argon2-0.6.0-rc.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "argon2",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpqwpl7rd2\\argon2-0.6.0-rc.0\\src\\lib.rs",
                "edition": "2024",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "alloc",
                "default",
                "password-hash",
                "rand"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpqwpl7rd2\\argon2-0.6.0-rc.0\\target\\debug\\deps\\libargon2-c1b9f4c5dc0d2e78.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "build-finished",
              "success": true
            }
          ],
          "audit": {
            "database": {
              "advisory-count": 787,
              "last-commit": "7573f55ba337263f61167dbb0ea926cdc7c8eb5d",
              "last-updated": "2025-06-17T11:04:25+02:00"
            },
            "lockfile": {
              "dependency-count": 21
            },
            "settings": {
              "target_arch": [],
              "target_os": [],
              "severity": null,
              "ignore": [],
              "informational_warnings": [
                "unmaintained",
                "unsound",
                "notice"
              ]
            },
            "vulnerabilities": {
              "found": false,
              "count": 0,
              "list": []
            },
            "warnings": {}
          },
          "note": "Crate analysis performed with stable toolchain."
        },
        "crate_metadata": {
          "name": "argon2",
          "version": "0.6.0-rc.0",
          "description": "ALLOW: Positive community sentiment",
          "repository": "",
          "keywords": [],
          "categories": [],
          "readme": {
            "raw_markdown": "[](https://docs.rs/argon2/latest/argon2/all.html \"show sidebar\")\n# Crate argon2Copy item path\n[Settings](https://docs.rs/argon2/latest/settings.html)\n[Help](https://docs.rs/argon2/latest/help.html)\nSummary[Source](https://docs.rs/argon2/latest/src/argon2/lib.rs.html#1-696)\nExpand description\n## [\u00a7](https://docs.rs/argon2/latest/argon2/#rustcrypto-argon2)RustCrypto: Argon2\n[![crate](https://buildstats.info/crate/argon2)](https://crates.io/crates/argon2) [![Docs](https://docs.rs/argon2/badge.svg)](https://docs.rs/argon2/) [![Build Status](https://github.com/RustCrypto/password-hashes/workflows/argon2/badge.svg?branch=master&event=push)](https://github.com/RustCrypto/password-hashes/actions?query=workflow%3Aargon2) ![Apache2/MIT licensed](https://img.shields.io/badge/license-Apache2.0/MIT-blue.svg) ![Rust Version](https://img.shields.io/badge/rustc-1.65+-blue.svg) [![Project Chat](https://img.shields.io/badge/zulip-join_chat-blue.svg)](https://rustcrypto.zulipchat.com/#narrow/stream/260046-password-hashes)\nPure Rust implementation of the [Argon2](https://en.wikipedia.org/wiki/Argon2) password hashing function.\n[Documentation](https://docs.rs/argon2/)\n## [\u00a7](https://docs.rs/argon2/latest/argon2/#about)About\nArgon2 is a memory-hard [key derivation function](https://en.wikipedia.org/wiki/Key_derivation_function) chosen as the winner of the [Password Hashing Competition](https://www.password-hashing.net/) in July 2015.\nIt implements the following three algorithmic variants:\n  * **Argon2d** : maximizes resistance to GPU cracking attacks\n  * **Argon2i** : optimized to resist side-channel attacks\n  * **Argon2id** : (default) hybrid version combining both Argon2i and Argon2d\n\n\nSupport is provided for embedded (i.e. `no_std`) environments, including ones without `alloc` support.\n### [\u00a7](https://docs.rs/argon2/latest/argon2/#minimum-supported-rust-version)Minimum Supported Rust Version\nRust **1.65** or higher.\nMinimum supported Rust version can be changed in the future, but it will be done with a minor version bump.\n### [\u00a7](https://docs.rs/argon2/latest/argon2/#semver-policy)SemVer Policy\n  * All on-by-default features of this library are covered by SemVer\n  * MSRV is considered exempt from SemVer as noted above\n\n\n### [\u00a7](https://docs.rs/argon2/latest/argon2/#license)License\nLicensed under either of:\n  * [Apache License, Version 2.0](http://www.apache.org/licenses/LICENSE-2.0)\n  * [MIT license](http://opensource.org/licenses/MIT)\n\n\nat your option.\n#### [\u00a7](https://docs.rs/argon2/latest/argon2/#contribution)Contribution\nUnless you explicitly state otherwise, any contribution intentionally submitted for inclusion in the work by you, as defined in the Apache-2.0 license, shall be dual licensed as above, without any additional terms or conditions.\n### [\u00a7](https://docs.rs/argon2/latest/argon2/#usage)Usage\n#### [\u00a7](https://docs.rs/argon2/latest/argon2/#password-hashing)Password Hashing\nThis API hashes a password to a \u201cPHC string\u201d suitable for the purposes of password-based authentication. Do not use this API to derive cryptographic keys: see the \u201ckey derivation\u201d usage example below.\n```\nuse argon2::{\n  password_hash::{\n    rand_core::OsRng,\n    PasswordHash, PasswordHasher, PasswordVerifier, SaltString\n  },\n  Argon2\n};\nlet password = b\"hunter42\"; // Bad password; don't actually use!\nlet salt = SaltString::generate(&mut OsRng);\n// Argon2 with default params (Argon2id v19)\nlet argon2 = Argon2::default();\n// Hash password to PHC string ($argon2id$v=19$...)\nlet password_hash = argon2.hash_password(password, &salt)?.to_string();\n// Verify password against PHC string.\n//\n// NOTE: hash params from `parsed_hash` are used instead of what is configured in the\n// `Argon2` instance.\nlet parsed_hash = PasswordHash::new(&password_hash)?;\nassert!(Argon2::default().verify_password(password, &parsed_hash).is_ok());\n```\n\n#### [\u00a7](https://docs.rs/argon2/latest/argon2/#key-derivation)Key Derivation\nThis API is useful for transforming a password into cryptographic keys for e.g. password-based encryption.\n```\nuse argon2::Argon2;\nlet password = b\"hunter42\"; // Bad password; don't actually use!\nlet salt = b\"example salt\"; // Salt should be unique per password\nlet mut output_key_material = [0u8; 32]; // Can be any desired size\nArgon2::default().hash_password_into(password, salt, &mut output_key_material)?;\n```\n\n## Re-exports[\u00a7](https://docs.rs/argon2/latest/argon2/#reexports)\n\n`pub use password_hash[](https://docs.rs/password-hash/0.5.0/x86_64-unknown-linux-gnu/password_hash/index.html \"mod password_hash\");``password-hash`\n\n## Structs[\u00a7](https://docs.rs/argon2/latest/argon2/#structs)\n\n[Argon2](https://docs.rs/argon2/latest/argon2/struct.Argon2.html \"struct argon2::Argon2\")\n    Argon2 context.\n\n[AssociatedData](https://docs.rs/argon2/latest/argon2/struct.AssociatedData.html \"struct argon2::AssociatedData\")\n    Associated data\n\n[Block](https://docs.rs/argon2/latest/argon2/struct.Block.html \"struct argon2::Block\")\n    Structure for the (1 KiB) memory block implemented as 128 64-bit words.\n\n[KeyId](https://docs.rs/argon2/latest/argon2/struct.KeyId.html \"struct argon2::KeyId\")\n    Key identifier\n\n[Params](https://docs.rs/argon2/latest/argon2/struct.Params.html \"struct argon2::Params\")\n    Argon2 password hash parameters.\n\n[ParamsBuilder](https://docs.rs/argon2/latest/argon2/struct.ParamsBuilder.html \"struct argon2::ParamsBuilder\")\n    Builder for Argon2 [`Params`](https://docs.rs/argon2/latest/argon2/struct.Params.html \"struct argon2::Params\").\n\n[PasswordHash](https://docs.rs/argon2/latest/argon2/struct.PasswordHash.html \"struct argon2::PasswordHash\")`password-hash`\n    Password hash.\n## Enums[\u00a7](https://docs.rs/argon2/latest/argon2/#enums)\n\n[Algorithm](https://docs.rs/argon2/latest/argon2/enum.Algorithm.html \"enum argon2::Algorithm\")\n    Argon2 primitive type: variants of the algorithm.\n\n[Error](https://docs.rs/argon2/latest/argon2/enum.Error.html \"enum argon2::Error\")\n    Error type.\n\n[Version](https://docs.rs/argon2/latest/argon2/enum.Version.html \"enum argon2::Version\")\n    Version of the algorithm.\n## Constants[\u00a7](https://docs.rs/argon2/latest/argon2/#constants)\n\n[ARGON2D_IDENT](https://docs.rs/argon2/latest/argon2/constant.ARGON2D_IDENT.html \"constant argon2::ARGON2D_IDENT\")`password-hash`\n    Argon2d algorithm identifier\n\n[ARGON2ID_IDENT](https://docs.rs/argon2/latest/argon2/constant.ARGON2ID_IDENT.html \"constant argon2::ARGON2ID_IDENT\")`password-hash`\n    Argon2id algorithm identifier\n\n[ARGON2I_IDENT](https://docs.rs/argon2/latest/argon2/constant.ARGON2I_IDENT.html \"constant argon2::ARGON2I_IDENT\")`password-hash`\n    Argon2i algorithm identifier\n\n[MAX_PWD_LEN](https://docs.rs/argon2/latest/argon2/constant.MAX_PWD_LEN.html \"constant argon2::MAX_PWD_LEN\")\n    Maximum password length in bytes.\n\n[MAX_SALT_LEN](https://docs.rs/argon2/latest/argon2/constant.MAX_SALT_LEN.html \"constant argon2::MAX_SALT_LEN\")\n    Maximum salt length in bytes.\n\n[MAX_SECRET_LEN](https://docs.rs/argon2/latest/argon2/constant.MAX_SECRET_LEN.html \"constant argon2::MAX_SECRET_LEN\")\n    Maximum secret key length in bytes.\n\n[MIN_SALT_LEN](https://docs.rs/argon2/latest/argon2/constant.MIN_SALT_LEN.html \"constant argon2::MIN_SALT_LEN\")\n    Minimum salt length in bytes.\n\n[RECOMMENDED_SALT_LEN](https://docs.rs/argon2/latest/argon2/constant.RECOMMENDED_SALT_LEN.html \"constant argon2::RECOMMENDED_SALT_LEN\")\n    Recommended salt length for password hashing in bytes.\n## Traits[\u00a7](https://docs.rs/argon2/latest/argon2/#traits)\n\n[PasswordHasher](https://docs.rs/argon2/latest/argon2/trait.PasswordHasher.html \"trait argon2::PasswordHasher\")`password-hash`\n    Trait for password hashing functions.\n\n[PasswordVerifier](https://docs.rs/argon2/latest/argon2/trait.PasswordVerifier.html \"trait argon2::PasswordVerifier\")`password-hash`\n    Trait for password verification.\n## Type Aliases[\u00a7](https://docs.rs/argon2/latest/argon2/#types)\n\n[Result](https://docs.rs/argon2/latest/argon2/type.Result.html \"type argon2::Result\")\n    Result with argon2\u2019s [`Error`](https://docs.rs/argon2/latest/argon2/enum.Error.html \"enum argon2::Error\") type.\n",
            "markdown_with_citations": "[](https://docs.rs/argon2/latest/argon2/all.html \"show sidebar\")\n# Crate argon2Copy item path\nSettings\u27e81\u27e9\nHelp\u27e82\u27e9\nSummarySource\u27e83\u27e9\nExpand description\n## \u00a7\u27e84\u27e9RustCrypto: Argon2\n![crate\u27e85\u27e9](https://crates.io/crates/argon2) ![Docs\u27e86\u27e9](https://docs.rs/argon2/) ![Build Status\u27e87\u27e9](https://github.com/RustCrypto/password-hashes/actions?query=workflow%3Aargon2) ![Apache2/MIT licensed\u27e88\u27e9] ![Rust Version\u27e89\u27e9] ![Project Chat\u27e810\u27e9](https://rustcrypto.zulipchat.com/#narrow/stream/260046-password-hashes)\nPure Rust implementation of the Argon2\u27e811\u27e9 password hashing function.\nDocumentation\u27e812\u27e9\n## \u00a7\u27e813\u27e9About\nArgon2 is a memory-hard key derivation function\u27e814\u27e9 chosen as the winner of the Password Hashing Competition\u27e815\u27e9 in July 2015.\nIt implements the following three algorithmic variants:\n  * **Argon2d** : maximizes resistance to GPU cracking attacks\n  * **Argon2i** : optimized to resist side-channel attacks\n  * **Argon2id** : (default) hybrid version combining both Argon2i and Argon2d\n\n\nSupport is provided for embedded (i.e. `no_std`) environments, including ones without `alloc` support.\n### \u00a7\u27e816\u27e9Minimum Supported Rust Version\nRust **1.65** or higher.\nMinimum supported Rust version can be changed in the future, but it will be done with a minor version bump.\n### \u00a7\u27e817\u27e9SemVer Policy\n  * All on-by-default features of this library are covered by SemVer\n  * MSRV is considered exempt from SemVer as noted above\n\n\n### \u00a7\u27e818\u27e9License\nLicensed under either of:\n  * Apache License, Version 2.0\u27e819\u27e9\n  * MIT license\u27e820\u27e9\n\n\nat your option.\n#### \u00a7\u27e821\u27e9Contribution\nUnless you explicitly state otherwise, any contribution intentionally submitted for inclusion in the work by you, as defined in the Apache-2.0 license, shall be dual licensed as above, without any additional terms or conditions.\n### \u00a7\u27e822\u27e9Usage\n#### \u00a7\u27e823\u27e9Password Hashing\nThis API hashes a password to a \u201cPHC string\u201d suitable for the purposes of password-based authentication. Do not use this API to derive cryptographic keys: see the \u201ckey derivation\u201d usage example below.\n```\nuse argon2::{\n  password_hash::{\n    rand_core::OsRng,\n    PasswordHash, PasswordHasher, PasswordVerifier, SaltString\n  },\n  Argon2\n};\nlet password = b\"hunter42\"; // Bad password; don't actually use!\nlet salt = SaltString::generate(&mut OsRng);\n// Argon2 with default params (Argon2id v19)\nlet argon2 = Argon2::default();\n// Hash password to PHC string ($argon2id$v=19$...)\nlet password_hash = argon2.hash_password(password, &salt)?.to_string();\n// Verify password against PHC string.\n//\n// NOTE: hash params from `parsed_hash` are used instead of what is configured in the\n// `Argon2` instance.\nlet parsed_hash = PasswordHash::new(&password_hash)?;\nassert!(Argon2::default().verify_password(password, &parsed_hash).is_ok());\n```\n\n#### \u00a7\u27e824\u27e9Key Derivation\nThis API is useful for transforming a password into cryptographic keys for e.g. password-based encryption.\n```\nuse argon2::Argon2;\nlet password = b\"hunter42\"; // Bad password; don't actually use!\nlet salt = b\"example salt\"; // Salt should be unique per password\nlet mut output_key_material = [0u8; 32]; // Can be any desired size\nArgon2::default().hash_password_into(password, salt, &mut output_key_material)?;\n```\n\n## Re-exports\u00a7\u27e825\u27e9\n\n`pub use password_hash[](https://docs.rs/password-hash/0.5.0/x86_64-unknown-linux-gnu/password_hash/index.html \"mod password_hash\");``password-hash`\n\n## Structs\u00a7\u27e826\u27e9\n\nArgon2\u27e827\u27e9\n    Argon2 context.\n\nAssociatedData\u27e828\u27e9\n    Associated data\n\nBlock\u27e829\u27e9\n    Structure for the (1 KiB) memory block implemented as 128 64-bit words.\n\nKeyId\u27e830\u27e9\n    Key identifier\n\nParams\u27e831\u27e9\n    Argon2 password hash parameters.\n\nParamsBuilder\u27e832\u27e9\n    Builder for Argon2 `Params`\u27e831\u27e9.\n\nPasswordHash\u27e833\u27e9`password-hash`\n    Password hash.\n## Enums\u00a7\u27e834\u27e9\n\nAlgorithm\u27e835\u27e9\n    Argon2 primitive type: variants of the algorithm.\n\nError\u27e836\u27e9\n    Error type.\n\nVersion\u27e837\u27e9\n    Version of the algorithm.\n## Constants\u00a7\u27e838\u27e9\n\nARGON2D_IDENT\u27e839\u27e9`password-hash`\n    Argon2d algorithm identifier\n\nARGON2ID_IDENT\u27e840\u27e9`password-hash`\n    Argon2id algorithm identifier\n\nARGON2I_IDENT\u27e841\u27e9`password-hash`\n    Argon2i algorithm identifier\n\nMAX_PWD_LEN\u27e842\u27e9\n    Maximum password length in bytes.\n\nMAX_SALT_LEN\u27e843\u27e9\n    Maximum salt length in bytes.\n\nMAX_SECRET_LEN\u27e844\u27e9\n    Maximum secret key length in bytes.\n\nMIN_SALT_LEN\u27e845\u27e9\n    Minimum salt length in bytes.\n\nRECOMMENDED_SALT_LEN\u27e846\u27e9\n    Recommended salt length for password hashing in bytes.\n## Traits\u00a7\u27e847\u27e9\n\nPasswordHasher\u27e848\u27e9`password-hash`\n    Trait for password hashing functions.\n\nPasswordVerifier\u27e849\u27e9`password-hash`\n    Trait for password verification.\n## Type Aliases\u00a7\u27e850\u27e9\n\nResult\u27e851\u27e9\n    Result with argon2\u2019s `Error`\u27e836\u27e9 type.\n",
            "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://docs.rs/argon2/latest/settings.html: Settings\n\u27e82\u27e9 https://docs.rs/argon2/latest/help.html: Help\n\u27e83\u27e9 https://docs.rs/argon2/latest/src/argon2/lib.rs.html#1-696: Source\n\u27e84\u27e9 https://docs.rs/argon2/latest/argon2/#rustcrypto-argon2: \u00a7\n\u27e85\u27e9 https://buildstats.info/crate/argon2: ![crate\n\u27e86\u27e9 https://docs.rs/argon2/badge.svg: ![Docs\n\u27e87\u27e9 https://github.com/RustCrypto/password-hashes/workflows/argon2/badge.svg?branch=master&event=push: ![Build Status\n\u27e88\u27e9 https://img.shields.io/badge/license-Apache2.0/MIT-blue.svg: Apache2/MIT licensed\n\u27e89\u27e9 https://img.shields.io/badge/rustc-1.65+-blue.svg: Rust Version\n\u27e810\u27e9 https://img.shields.io/badge/zulip-join_chat-blue.svg: ![Project Chat\n\u27e811\u27e9 https://en.wikipedia.org/wiki/Argon2: Argon2\n\u27e812\u27e9 https://docs.rs/argon2/: Documentation\n\u27e813\u27e9 https://docs.rs/argon2/latest/argon2/#about: \u00a7\n\u27e814\u27e9 https://en.wikipedia.org/wiki/Key_derivation_function: key derivation function\n\u27e815\u27e9 https://www.password-hashing.net/: Password Hashing Competition\n\u27e816\u27e9 https://docs.rs/argon2/latest/argon2/#minimum-supported-rust-version: \u00a7\n\u27e817\u27e9 https://docs.rs/argon2/latest/argon2/#semver-policy: \u00a7\n\u27e818\u27e9 https://docs.rs/argon2/latest/argon2/#license: \u00a7\n\u27e819\u27e9 http://www.apache.org/licenses/LICENSE-2.0: Apache License, Version 2.0\n\u27e820\u27e9 http://opensource.org/licenses/MIT: MIT license\n\u27e821\u27e9 https://docs.rs/argon2/latest/argon2/#contribution: \u00a7\n\u27e822\u27e9 https://docs.rs/argon2/latest/argon2/#usage: \u00a7\n\u27e823\u27e9 https://docs.rs/argon2/latest/argon2/#password-hashing: \u00a7\n\u27e824\u27e9 https://docs.rs/argon2/latest/argon2/#key-derivation: \u00a7\n\u27e825\u27e9 https://docs.rs/argon2/latest/argon2/#reexports: \u00a7\n\u27e826\u27e9 https://docs.rs/argon2/latest/argon2/#structs: \u00a7\n\u27e827\u27e9 https://docs.rs/argon2/latest/argon2/struct.Argon2.html: struct argon2::Argon2 - Argon2\n\u27e828\u27e9 https://docs.rs/argon2/latest/argon2/struct.AssociatedData.html: struct argon2::AssociatedData - AssociatedData\n\u27e829\u27e9 https://docs.rs/argon2/latest/argon2/struct.Block.html: struct argon2::Block - Block\n\u27e830\u27e9 https://docs.rs/argon2/latest/argon2/struct.KeyId.html: struct argon2::KeyId - KeyId\n\u27e831\u27e9 https://docs.rs/argon2/latest/argon2/struct.Params.html: struct argon2::Params - Params\n\u27e832\u27e9 https://docs.rs/argon2/latest/argon2/struct.ParamsBuilder.html: struct argon2::ParamsBuilder - ParamsBuilder\n\u27e833\u27e9 https://docs.rs/argon2/latest/argon2/struct.PasswordHash.html: struct argon2::PasswordHash - PasswordHash\n\u27e834\u27e9 https://docs.rs/argon2/latest/argon2/#enums: \u00a7\n\u27e835\u27e9 https://docs.rs/argon2/latest/argon2/enum.Algorithm.html: enum argon2::Algorithm - Algorithm\n\u27e836\u27e9 https://docs.rs/argon2/latest/argon2/enum.Error.html: enum argon2::Error - Error\n\u27e837\u27e9 https://docs.rs/argon2/latest/argon2/enum.Version.html: enum argon2::Version - Version\n\u27e838\u27e9 https://docs.rs/argon2/latest/argon2/#constants: \u00a7\n\u27e839\u27e9 https://docs.rs/argon2/latest/argon2/constant.ARGON2D_IDENT.html: constant argon2::ARGON2D_IDENT - ARGON2D_IDENT\n\u27e840\u27e9 https://docs.rs/argon2/latest/argon2/constant.ARGON2ID_IDENT.html: constant argon2::ARGON2ID_IDENT - ARGON2ID_IDENT\n\u27e841\u27e9 https://docs.rs/argon2/latest/argon2/constant.ARGON2I_IDENT.html: constant argon2::ARGON2I_IDENT - ARGON2I_IDENT\n\u27e842\u27e9 https://docs.rs/argon2/latest/argon2/constant.MAX_PWD_LEN.html: constant argon2::MAX_PWD_LEN - MAX_PWD_LEN\n\u27e843\u27e9 https://docs.rs/argon2/latest/argon2/constant.MAX_SALT_LEN.html: constant argon2::MAX_SALT_LEN - MAX_SALT_LEN\n\u27e844\u27e9 https://docs.rs/argon2/latest/argon2/constant.MAX_SECRET_LEN.html: constant argon2::MAX_SECRET_LEN - MAX_SECRET_LEN\n\u27e845\u27e9 https://docs.rs/argon2/latest/argon2/constant.MIN_SALT_LEN.html: constant argon2::MIN_SALT_LEN - MIN_SALT_LEN\n\u27e846\u27e9 https://docs.rs/argon2/latest/argon2/constant.RECOMMENDED_SALT_LEN.html: constant argon2::RECOMMENDED_SALT_LEN - RECOMMENDED_SALT_LEN\n\u27e847\u27e9 https://docs.rs/argon2/latest/argon2/#traits: \u00a7\n\u27e848\u27e9 https://docs.rs/argon2/latest/argon2/trait.PasswordHasher.html: trait argon2::PasswordHasher - PasswordHasher\n\u27e849\u27e9 https://docs.rs/argon2/latest/argon2/trait.PasswordVerifier.html: trait argon2::PasswordVerifier - PasswordVerifier\n\u27e850\u27e9 https://docs.rs/argon2/latest/argon2/#types: \u00a7\n\u27e851\u27e9 https://docs.rs/argon2/latest/argon2/type.Result.html: type argon2::Result - Result\n",
            "fit_markdown": "",
            "fit_html": ""
          },
          "downloads": 0,
          "github_stars": 0,
          "dependencies": [],
          "features": {},
          "code_snippets": [],
          "readme_sections": {},
          "librs_downloads": null,
          "source": "crates.io",
          "enhanced_scraping": {},
          "enhanced_features": [],
          "enhanced_dependencies": []
        },
        "enriched_crate": {
          "name": "argon2",
          "version": "0.6.0-rc.0",
          "description": "ALLOW: Positive community sentiment",
          "repository": "",
          "keywords": [],
          "categories": [],
          "readme": {
            "raw_markdown": "[](https://docs.rs/argon2/latest/argon2/all.html \"show sidebar\")\n# Crate argon2Copy item path\n[Settings](https://docs.rs/argon2/latest/settings.html)\n[Help](https://docs.rs/argon2/latest/help.html)\nSummary[Source](https://docs.rs/argon2/latest/src/argon2/lib.rs.html#1-696)\nExpand description\n## [\u00a7](https://docs.rs/argon2/latest/argon2/#rustcrypto-argon2)RustCrypto: Argon2\n[![crate](https://buildstats.info/crate/argon2)](https://crates.io/crates/argon2) [![Docs](https://docs.rs/argon2/badge.svg)](https://docs.rs/argon2/) [![Build Status](https://github.com/RustCrypto/password-hashes/workflows/argon2/badge.svg?branch=master&event=push)](https://github.com/RustCrypto/password-hashes/actions?query=workflow%3Aargon2) ![Apache2/MIT licensed](https://img.shields.io/badge/license-Apache2.0/MIT-blue.svg) ![Rust Version](https://img.shields.io/badge/rustc-1.65+-blue.svg) [![Project Chat](https://img.shields.io/badge/zulip-join_chat-blue.svg)](https://rustcrypto.zulipchat.com/#narrow/stream/260046-password-hashes)\nPure Rust implementation of the [Argon2](https://en.wikipedia.org/wiki/Argon2) password hashing function.\n[Documentation](https://docs.rs/argon2/)\n## [\u00a7](https://docs.rs/argon2/latest/argon2/#about)About\nArgon2 is a memory-hard [key derivation function](https://en.wikipedia.org/wiki/Key_derivation_function) chosen as the winner of the [Password Hashing Competition](https://www.password-hashing.net/) in July 2015.\nIt implements the following three algorithmic variants:\n  * **Argon2d** : maximizes resistance to GPU cracking attacks\n  * **Argon2i** : optimized to resist side-channel attacks\n  * **Argon2id** : (default) hybrid version combining both Argon2i and Argon2d\n\n\nSupport is provided for embedded (i.e. `no_std`) environments, including ones without `alloc` support.\n### [\u00a7](https://docs.rs/argon2/latest/argon2/#minimum-supported-rust-version)Minimum Supported Rust Version\nRust **1.65** or higher.\nMinimum supported Rust version can be changed in the future, but it will be done with a minor version bump.\n### [\u00a7](https://docs.rs/argon2/latest/argon2/#semver-policy)SemVer Policy\n  * All on-by-default features of this library are covered by SemVer\n  * MSRV is considered exempt from SemVer as noted above\n\n\n### [\u00a7](https://docs.rs/argon2/latest/argon2/#license)License\nLicensed under either of:\n  * [Apache License, Version 2.0](http://www.apache.org/licenses/LICENSE-2.0)\n  * [MIT license](http://opensource.org/licenses/MIT)\n\n\nat your option.\n#### [\u00a7](https://docs.rs/argon2/latest/argon2/#contribution)Contribution\nUnless you explicitly state otherwise, any contribution intentionally submitted for inclusion in the work by you, as defined in the Apache-2.0 license, shall be dual licensed as above, without any additional terms or conditions.\n### [\u00a7](https://docs.rs/argon2/latest/argon2/#usage)Usage\n#### [\u00a7](https://docs.rs/argon2/latest/argon2/#password-hashing)Password Hashing\nThis API hashes a password to a \u201cPHC string\u201d suitable for the purposes of password-based authentication. Do not use this API to derive cryptographic keys: see the \u201ckey derivation\u201d usage example below.\n```\nuse argon2::{\n  password_hash::{\n    rand_core::OsRng,\n    PasswordHash, PasswordHasher, PasswordVerifier, SaltString\n  },\n  Argon2\n};\nlet password = b\"hunter42\"; // Bad password; don't actually use!\nlet salt = SaltString::generate(&mut OsRng);\n// Argon2 with default params (Argon2id v19)\nlet argon2 = Argon2::default();\n// Hash password to PHC string ($argon2id$v=19$...)\nlet password_hash = argon2.hash_password(password, &salt)?.to_string();\n// Verify password against PHC string.\n//\n// NOTE: hash params from `parsed_hash` are used instead of what is configured in the\n// `Argon2` instance.\nlet parsed_hash = PasswordHash::new(&password_hash)?;\nassert!(Argon2::default().verify_password(password, &parsed_hash).is_ok());\n```\n\n#### [\u00a7](https://docs.rs/argon2/latest/argon2/#key-derivation)Key Derivation\nThis API is useful for transforming a password into cryptographic keys for e.g. password-based encryption.\n```\nuse argon2::Argon2;\nlet password = b\"hunter42\"; // Bad password; don't actually use!\nlet salt = b\"example salt\"; // Salt should be unique per password\nlet mut output_key_material = [0u8; 32]; // Can be any desired size\nArgon2::default().hash_password_into(password, salt, &mut output_key_material)?;\n```\n\n## Re-exports[\u00a7](https://docs.rs/argon2/latest/argon2/#reexports)\n\n`pub use password_hash[](https://docs.rs/password-hash/0.5.0/x86_64-unknown-linux-gnu/password_hash/index.html \"mod password_hash\");``password-hash`\n\n## Structs[\u00a7](https://docs.rs/argon2/latest/argon2/#structs)\n\n[Argon2](https://docs.rs/argon2/latest/argon2/struct.Argon2.html \"struct argon2::Argon2\")\n    Argon2 context.\n\n[AssociatedData](https://docs.rs/argon2/latest/argon2/struct.AssociatedData.html \"struct argon2::AssociatedData\")\n    Associated data\n\n[Block](https://docs.rs/argon2/latest/argon2/struct.Block.html \"struct argon2::Block\")\n    Structure for the (1 KiB) memory block implemented as 128 64-bit words.\n\n[KeyId](https://docs.rs/argon2/latest/argon2/struct.KeyId.html \"struct argon2::KeyId\")\n    Key identifier\n\n[Params](https://docs.rs/argon2/latest/argon2/struct.Params.html \"struct argon2::Params\")\n    Argon2 password hash parameters.\n\n[ParamsBuilder](https://docs.rs/argon2/latest/argon2/struct.ParamsBuilder.html \"struct argon2::ParamsBuilder\")\n    Builder for Argon2 [`Params`](https://docs.rs/argon2/latest/argon2/struct.Params.html \"struct argon2::Params\").\n\n[PasswordHash](https://docs.rs/argon2/latest/argon2/struct.PasswordHash.html \"struct argon2::PasswordHash\")`password-hash`\n    Password hash.\n## Enums[\u00a7](https://docs.rs/argon2/latest/argon2/#enums)\n\n[Algorithm](https://docs.rs/argon2/latest/argon2/enum.Algorithm.html \"enum argon2::Algorithm\")\n    Argon2 primitive type: variants of the algorithm.\n\n[Error](https://docs.rs/argon2/latest/argon2/enum.Error.html \"enum argon2::Error\")\n    Error type.\n\n[Version](https://docs.rs/argon2/latest/argon2/enum.Version.html \"enum argon2::Version\")\n    Version of the algorithm.\n## Constants[\u00a7](https://docs.rs/argon2/latest/argon2/#constants)\n\n[ARGON2D_IDENT](https://docs.rs/argon2/latest/argon2/constant.ARGON2D_IDENT.html \"constant argon2::ARGON2D_IDENT\")`password-hash`\n    Argon2d algorithm identifier\n\n[ARGON2ID_IDENT](https://docs.rs/argon2/latest/argon2/constant.ARGON2ID_IDENT.html \"constant argon2::ARGON2ID_IDENT\")`password-hash`\n    Argon2id algorithm identifier\n\n[ARGON2I_IDENT](https://docs.rs/argon2/latest/argon2/constant.ARGON2I_IDENT.html \"constant argon2::ARGON2I_IDENT\")`password-hash`\n    Argon2i algorithm identifier\n\n[MAX_PWD_LEN](https://docs.rs/argon2/latest/argon2/constant.MAX_PWD_LEN.html \"constant argon2::MAX_PWD_LEN\")\n    Maximum password length in bytes.\n\n[MAX_SALT_LEN](https://docs.rs/argon2/latest/argon2/constant.MAX_SALT_LEN.html \"constant argon2::MAX_SALT_LEN\")\n    Maximum salt length in bytes.\n\n[MAX_SECRET_LEN](https://docs.rs/argon2/latest/argon2/constant.MAX_SECRET_LEN.html \"constant argon2::MAX_SECRET_LEN\")\n    Maximum secret key length in bytes.\n\n[MIN_SALT_LEN](https://docs.rs/argon2/latest/argon2/constant.MIN_SALT_LEN.html \"constant argon2::MIN_SALT_LEN\")\n    Minimum salt length in bytes.\n\n[RECOMMENDED_SALT_LEN](https://docs.rs/argon2/latest/argon2/constant.RECOMMENDED_SALT_LEN.html \"constant argon2::RECOMMENDED_SALT_LEN\")\n    Recommended salt length for password hashing in bytes.\n## Traits[\u00a7](https://docs.rs/argon2/latest/argon2/#traits)\n\n[PasswordHasher](https://docs.rs/argon2/latest/argon2/trait.PasswordHasher.html \"trait argon2::PasswordHasher\")`password-hash`\n    Trait for password hashing functions.\n\n[PasswordVerifier](https://docs.rs/argon2/latest/argon2/trait.PasswordVerifier.html \"trait argon2::PasswordVerifier\")`password-hash`\n    Trait for password verification.\n## Type Aliases[\u00a7](https://docs.rs/argon2/latest/argon2/#types)\n\n[Result](https://docs.rs/argon2/latest/argon2/type.Result.html \"type argon2::Result\")\n    Result with argon2\u2019s [`Error`](https://docs.rs/argon2/latest/argon2/enum.Error.html \"enum argon2::Error\") type.\n",
            "markdown_with_citations": "[](https://docs.rs/argon2/latest/argon2/all.html \"show sidebar\")\n# Crate argon2Copy item path\nSettings\u27e81\u27e9\nHelp\u27e82\u27e9\nSummarySource\u27e83\u27e9\nExpand description\n## \u00a7\u27e84\u27e9RustCrypto: Argon2\n![crate\u27e85\u27e9](https://crates.io/crates/argon2) ![Docs\u27e86\u27e9](https://docs.rs/argon2/) ![Build Status\u27e87\u27e9](https://github.com/RustCrypto/password-hashes/actions?query=workflow%3Aargon2) ![Apache2/MIT licensed\u27e88\u27e9] ![Rust Version\u27e89\u27e9] ![Project Chat\u27e810\u27e9](https://rustcrypto.zulipchat.com/#narrow/stream/260046-password-hashes)\nPure Rust implementation of the Argon2\u27e811\u27e9 password hashing function.\nDocumentation\u27e812\u27e9\n## \u00a7\u27e813\u27e9About\nArgon2 is a memory-hard key derivation function\u27e814\u27e9 chosen as the winner of the Password Hashing Competition\u27e815\u27e9 in July 2015.\nIt implements the following three algorithmic variants:\n  * **Argon2d** : maximizes resistance to GPU cracking attacks\n  * **Argon2i** : optimized to resist side-channel attacks\n  * **Argon2id** : (default) hybrid version combining both Argon2i and Argon2d\n\n\nSupport is provided for embedded (i.e. `no_std`) environments, including ones without `alloc` support.\n### \u00a7\u27e816\u27e9Minimum Supported Rust Version\nRust **1.65** or higher.\nMinimum supported Rust version can be changed in the future, but it will be done with a minor version bump.\n### \u00a7\u27e817\u27e9SemVer Policy\n  * All on-by-default features of this library are covered by SemVer\n  * MSRV is considered exempt from SemVer as noted above\n\n\n### \u00a7\u27e818\u27e9License\nLicensed under either of:\n  * Apache License, Version 2.0\u27e819\u27e9\n  * MIT license\u27e820\u27e9\n\n\nat your option.\n#### \u00a7\u27e821\u27e9Contribution\nUnless you explicitly state otherwise, any contribution intentionally submitted for inclusion in the work by you, as defined in the Apache-2.0 license, shall be dual licensed as above, without any additional terms or conditions.\n### \u00a7\u27e822\u27e9Usage\n#### \u00a7\u27e823\u27e9Password Hashing\nThis API hashes a password to a \u201cPHC string\u201d suitable for the purposes of password-based authentication. Do not use this API to derive cryptographic keys: see the \u201ckey derivation\u201d usage example below.\n```\nuse argon2::{\n  password_hash::{\n    rand_core::OsRng,\n    PasswordHash, PasswordHasher, PasswordVerifier, SaltString\n  },\n  Argon2\n};\nlet password = b\"hunter42\"; // Bad password; don't actually use!\nlet salt = SaltString::generate(&mut OsRng);\n// Argon2 with default params (Argon2id v19)\nlet argon2 = Argon2::default();\n// Hash password to PHC string ($argon2id$v=19$...)\nlet password_hash = argon2.hash_password(password, &salt)?.to_string();\n// Verify password against PHC string.\n//\n// NOTE: hash params from `parsed_hash` are used instead of what is configured in the\n// `Argon2` instance.\nlet parsed_hash = PasswordHash::new(&password_hash)?;\nassert!(Argon2::default().verify_password(password, &parsed_hash).is_ok());\n```\n\n#### \u00a7\u27e824\u27e9Key Derivation\nThis API is useful for transforming a password into cryptographic keys for e.g. password-based encryption.\n```\nuse argon2::Argon2;\nlet password = b\"hunter42\"; // Bad password; don't actually use!\nlet salt = b\"example salt\"; // Salt should be unique per password\nlet mut output_key_material = [0u8; 32]; // Can be any desired size\nArgon2::default().hash_password_into(password, salt, &mut output_key_material)?;\n```\n\n## Re-exports\u00a7\u27e825\u27e9\n\n`pub use password_hash[](https://docs.rs/password-hash/0.5.0/x86_64-unknown-linux-gnu/password_hash/index.html \"mod password_hash\");``password-hash`\n\n## Structs\u00a7\u27e826\u27e9\n\nArgon2\u27e827\u27e9\n    Argon2 context.\n\nAssociatedData\u27e828\u27e9\n    Associated data\n\nBlock\u27e829\u27e9\n    Structure for the (1 KiB) memory block implemented as 128 64-bit words.\n\nKeyId\u27e830\u27e9\n    Key identifier\n\nParams\u27e831\u27e9\n    Argon2 password hash parameters.\n\nParamsBuilder\u27e832\u27e9\n    Builder for Argon2 `Params`\u27e831\u27e9.\n\nPasswordHash\u27e833\u27e9`password-hash`\n    Password hash.\n## Enums\u00a7\u27e834\u27e9\n\nAlgorithm\u27e835\u27e9\n    Argon2 primitive type: variants of the algorithm.\n\nError\u27e836\u27e9\n    Error type.\n\nVersion\u27e837\u27e9\n    Version of the algorithm.\n## Constants\u00a7\u27e838\u27e9\n\nARGON2D_IDENT\u27e839\u27e9`password-hash`\n    Argon2d algorithm identifier\n\nARGON2ID_IDENT\u27e840\u27e9`password-hash`\n    Argon2id algorithm identifier\n\nARGON2I_IDENT\u27e841\u27e9`password-hash`\n    Argon2i algorithm identifier\n\nMAX_PWD_LEN\u27e842\u27e9\n    Maximum password length in bytes.\n\nMAX_SALT_LEN\u27e843\u27e9\n    Maximum salt length in bytes.\n\nMAX_SECRET_LEN\u27e844\u27e9\n    Maximum secret key length in bytes.\n\nMIN_SALT_LEN\u27e845\u27e9\n    Minimum salt length in bytes.\n\nRECOMMENDED_SALT_LEN\u27e846\u27e9\n    Recommended salt length for password hashing in bytes.\n## Traits\u00a7\u27e847\u27e9\n\nPasswordHasher\u27e848\u27e9`password-hash`\n    Trait for password hashing functions.\n\nPasswordVerifier\u27e849\u27e9`password-hash`\n    Trait for password verification.\n## Type Aliases\u00a7\u27e850\u27e9\n\nResult\u27e851\u27e9\n    Result with argon2\u2019s `Error`\u27e836\u27e9 type.\n",
            "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://docs.rs/argon2/latest/settings.html: Settings\n\u27e82\u27e9 https://docs.rs/argon2/latest/help.html: Help\n\u27e83\u27e9 https://docs.rs/argon2/latest/src/argon2/lib.rs.html#1-696: Source\n\u27e84\u27e9 https://docs.rs/argon2/latest/argon2/#rustcrypto-argon2: \u00a7\n\u27e85\u27e9 https://buildstats.info/crate/argon2: ![crate\n\u27e86\u27e9 https://docs.rs/argon2/badge.svg: ![Docs\n\u27e87\u27e9 https://github.com/RustCrypto/password-hashes/workflows/argon2/badge.svg?branch=master&event=push: ![Build Status\n\u27e88\u27e9 https://img.shields.io/badge/license-Apache2.0/MIT-blue.svg: Apache2/MIT licensed\n\u27e89\u27e9 https://img.shields.io/badge/rustc-1.65+-blue.svg: Rust Version\n\u27e810\u27e9 https://img.shields.io/badge/zulip-join_chat-blue.svg: ![Project Chat\n\u27e811\u27e9 https://en.wikipedia.org/wiki/Argon2: Argon2\n\u27e812\u27e9 https://docs.rs/argon2/: Documentation\n\u27e813\u27e9 https://docs.rs/argon2/latest/argon2/#about: \u00a7\n\u27e814\u27e9 https://en.wikipedia.org/wiki/Key_derivation_function: key derivation function\n\u27e815\u27e9 https://www.password-hashing.net/: Password Hashing Competition\n\u27e816\u27e9 https://docs.rs/argon2/latest/argon2/#minimum-supported-rust-version: \u00a7\n\u27e817\u27e9 https://docs.rs/argon2/latest/argon2/#semver-policy: \u00a7\n\u27e818\u27e9 https://docs.rs/argon2/latest/argon2/#license: \u00a7\n\u27e819\u27e9 http://www.apache.org/licenses/LICENSE-2.0: Apache License, Version 2.0\n\u27e820\u27e9 http://opensource.org/licenses/MIT: MIT license\n\u27e821\u27e9 https://docs.rs/argon2/latest/argon2/#contribution: \u00a7\n\u27e822\u27e9 https://docs.rs/argon2/latest/argon2/#usage: \u00a7\n\u27e823\u27e9 https://docs.rs/argon2/latest/argon2/#password-hashing: \u00a7\n\u27e824\u27e9 https://docs.rs/argon2/latest/argon2/#key-derivation: \u00a7\n\u27e825\u27e9 https://docs.rs/argon2/latest/argon2/#reexports: \u00a7\n\u27e826\u27e9 https://docs.rs/argon2/latest/argon2/#structs: \u00a7\n\u27e827\u27e9 https://docs.rs/argon2/latest/argon2/struct.Argon2.html: struct argon2::Argon2 - Argon2\n\u27e828\u27e9 https://docs.rs/argon2/latest/argon2/struct.AssociatedData.html: struct argon2::AssociatedData - AssociatedData\n\u27e829\u27e9 https://docs.rs/argon2/latest/argon2/struct.Block.html: struct argon2::Block - Block\n\u27e830\u27e9 https://docs.rs/argon2/latest/argon2/struct.KeyId.html: struct argon2::KeyId - KeyId\n\u27e831\u27e9 https://docs.rs/argon2/latest/argon2/struct.Params.html: struct argon2::Params - Params\n\u27e832\u27e9 https://docs.rs/argon2/latest/argon2/struct.ParamsBuilder.html: struct argon2::ParamsBuilder - ParamsBuilder\n\u27e833\u27e9 https://docs.rs/argon2/latest/argon2/struct.PasswordHash.html: struct argon2::PasswordHash - PasswordHash\n\u27e834\u27e9 https://docs.rs/argon2/latest/argon2/#enums: \u00a7\n\u27e835\u27e9 https://docs.rs/argon2/latest/argon2/enum.Algorithm.html: enum argon2::Algorithm - Algorithm\n\u27e836\u27e9 https://docs.rs/argon2/latest/argon2/enum.Error.html: enum argon2::Error - Error\n\u27e837\u27e9 https://docs.rs/argon2/latest/argon2/enum.Version.html: enum argon2::Version - Version\n\u27e838\u27e9 https://docs.rs/argon2/latest/argon2/#constants: \u00a7\n\u27e839\u27e9 https://docs.rs/argon2/latest/argon2/constant.ARGON2D_IDENT.html: constant argon2::ARGON2D_IDENT - ARGON2D_IDENT\n\u27e840\u27e9 https://docs.rs/argon2/latest/argon2/constant.ARGON2ID_IDENT.html: constant argon2::ARGON2ID_IDENT - ARGON2ID_IDENT\n\u27e841\u27e9 https://docs.rs/argon2/latest/argon2/constant.ARGON2I_IDENT.html: constant argon2::ARGON2I_IDENT - ARGON2I_IDENT\n\u27e842\u27e9 https://docs.rs/argon2/latest/argon2/constant.MAX_PWD_LEN.html: constant argon2::MAX_PWD_LEN - MAX_PWD_LEN\n\u27e843\u27e9 https://docs.rs/argon2/latest/argon2/constant.MAX_SALT_LEN.html: constant argon2::MAX_SALT_LEN - MAX_SALT_LEN\n\u27e844\u27e9 https://docs.rs/argon2/latest/argon2/constant.MAX_SECRET_LEN.html: constant argon2::MAX_SECRET_LEN - MAX_SECRET_LEN\n\u27e845\u27e9 https://docs.rs/argon2/latest/argon2/constant.MIN_SALT_LEN.html: constant argon2::MIN_SALT_LEN - MIN_SALT_LEN\n\u27e846\u27e9 https://docs.rs/argon2/latest/argon2/constant.RECOMMENDED_SALT_LEN.html: constant argon2::RECOMMENDED_SALT_LEN - RECOMMENDED_SALT_LEN\n\u27e847\u27e9 https://docs.rs/argon2/latest/argon2/#traits: \u00a7\n\u27e848\u27e9 https://docs.rs/argon2/latest/argon2/trait.PasswordHasher.html: trait argon2::PasswordHasher - PasswordHasher\n\u27e849\u27e9 https://docs.rs/argon2/latest/argon2/trait.PasswordVerifier.html: trait argon2::PasswordVerifier - PasswordVerifier\n\u27e850\u27e9 https://docs.rs/argon2/latest/argon2/#types: \u00a7\n\u27e851\u27e9 https://docs.rs/argon2/latest/argon2/type.Result.html: type argon2::Result - Result\n",
            "fit_markdown": "",
            "fit_html": ""
          },
          "downloads": 0,
          "github_stars": 0,
          "dependencies": [],
          "features": {},
          "code_snippets": [],
          "readme_sections": {},
          "librs_downloads": null,
          "source": "crates.io",
          "enhanced_scraping": {},
          "enhanced_features": [],
          "enhanced_dependencies": [],
          "readme_summary": "The `argon2` crate is a pure Rust implementation of the Argon2 password hashing and key derivation function, offering support for its three variants: Argon2d (GPU attack resistance), Argon2i (side-channel resistance), and Argon2id (hybrid default). It provides APIs for securely hashing passwords to PHC strings and deriving cryptographic keys, supports embedded environments (`no_std`), and is licensed under Apache 2.0/MIT. The crate is highly configurable, with tools for customizing hashing parameters and includes comprehensive documentation.",
          "feature_summary": null,
          "use_case": "Cryptography",
          "score": 7.0,
          "factual_counterfactual": "### Pair 1: Algorithmic Variants  \n\u2705 Factual: The `argon2` crate implements three algorithmic variants: Argon2d, Argon2i, and Argon2id, with Argon2id being the default configuration.  \n\u274c Counterfactual: The `argon2` crate only supports the Argon2i variant, which is optimized for side-channel attack resistance, and does not include support for Argon2d or Argon2id.  \n\n---\n\n### Pair 2: Embedded Environment Support  \n\u2705 Factual: The `argon2` crate supports embedded environments (`no_std`), including those without `alloc` support, making it suitable for constrained systems.  \n\u274c Counterfactual: The `argon2` crate requires the standard library and does not support embedded environments or systems without `alloc`.  \n\n---\n\n### Pair 3: Password Hashing API  \n\u2705 Factual: The `argon2` crate provides an API for hashing passwords into PHC strings, which are suitable for password-based authentication but not for cryptographic key derivation.  \n\u274c Counterfactual: The `argon2` crate's password hashing API is designed primarily for cryptographic key derivation and is unsuitable for password-based authentication.",
          "source_analysis": null,
          "user_behavior": null,
          "security": null
        }
      },
      "irl_score": 8.6,
      "execution_id": "exec-0ce753ea-b424ce73-1751264454",
      "timestamp": "2025-06-30T06:20:54.148962+00:00",
      "canon_version": "1.3.0"
    },
    "rule_zero_compliant": true
  }
]