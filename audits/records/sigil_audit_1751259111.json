[
  {
    "execution_id": "exec-9754cc18-ec886ce3-1751259092",
    "timestamp": "2025-06-30T04:51:32.808153+00:00",
    "sacred_chain": {
      "input_data": "ciborium",
      "context_sources": [
        "crates.io",
        "github.com",
        "lib.rs",
        "docs.rs"
      ],
      "reasoning_steps": [
        "Input canonicalized: 'ciborium' -> 'ciborium'",
        "Context gathered from 4 validated sources",
        "Metadata extracted: 4 fields",
        "Documentation analyzed: quality 7.0",
        "Sentiment analyzed: positive",
        "Ecosystem analyzed: utilities",
        "Quality score synthesized: 7.50",
        "Trust decision: DEFER - Insufficient data for decision",
        "IRL confidence: 8.600"
      ],
      "suggestion": "ALLOW: Positive community sentiment",
      "verdict": "DEFER",
      "audit_info": {
        "metadata": {
          "name": "ciborium",
          "type": "rust_crate",
          "source": "manual_input",
          "extraction_method": "irl_engine"
        },
        "sentiment": {
          "quality_score": 7.0,
          "completeness": 0.8,
          "examples_present": true,
          "api_documented": true
        },
        "ecosystem": {
          "overall": "positive",
          "positive_mentions": 10,
          "negative_mentions": 2,
          "neutral_mentions": 5,
          "total_mentions": 17
        },
        "quality_score": 7.5,
        "verdict_reason": "Insufficient data for decision",
        "sanitized_documentation": {
          "crates_io": {
            "url": "https://crates.io/crates/ciborium",
            "title": "ciborium v0.2.2",
            "content": {
              "raw_markdown": "#  ciborium v0.2.2\nserde implementation of CBOR using ciborium-basic \n  * [ #cbor ](https://crates.io/keywords/cbor)\n  * [ #serde ](https://crates.io/keywords/serde)\n\n\n  * [ Readme ](https://crates.io/crates/ciborium)\n  * [ 4 Versions ](https://crates.io/crates/ciborium/versions)\n  * [ Dependencies ](https://crates.io/crates/ciborium/dependencies)\n  * [ Dependents ](https://crates.io/crates/ciborium/reverse_dependencies)\n\n\n## Metadata\nover 1 year ago \nv1.58.0 \n[ Apache-2.0 ](https://choosealicense.com/licenses/apache-2.0)\n34.8 KiB \n## Install\nRun the following Cargo command in your project directory:\ncargo add ciborium\nOr add the following line to your Cargo.toml:\nciborium = \"0.2.2\"\n## Repository\n[ github.com/enarx/ciborium ](https://github.com/enarx/ciborium)\n## Owners\n## Categories\n  * [Data structures](https://crates.io/categories/data-structures)\n  * [No standard library](https://crates.io/categories/no-std)\n  * [Embedded development](https://crates.io/categories/embedded)\n  * [Encoding](https://crates.io/categories/encoding)\n  * [Parsing tools](https://crates.io/categories/parsing)\n\n\n[ Report crate ](https://crates.io/support?crate=ciborium&inquire=crate-violation)\n### Stats Overview\n74,105,742 Downloads all time\n4 Versions published\n#### Downloads over the last 90 days\nDisplay as \nStacked \n  * Stacked \n  * Unstacked \n\n\nLoading\u2026\n",
              "markdown_with_citations": "#  ciborium v0.2.2\nserde implementation of CBOR using ciborium-basic \n  *  #cbor \u27e81\u27e9\n  *  #serde \u27e82\u27e9\n\n\n  *  Readme \u27e83\u27e9\n  *  4 Versions \u27e84\u27e9\n  *  Dependencies \u27e85\u27e9\n  *  Dependents \u27e86\u27e9\n\n\n## Metadata\nover 1 year ago \nv1.58.0 \n Apache-2.0 \u27e87\u27e9\n34.8 KiB \n## Install\nRun the following Cargo command in your project directory:\ncargo add ciborium\nOr add the following line to your Cargo.toml:\nciborium = \"0.2.2\"\n## Repository\n github.com/enarx/ciborium \u27e88\u27e9\n## Owners\n## Categories\n  * Data structures\u27e89\u27e9\n  * No standard library\u27e810\u27e9\n  * Embedded development\u27e811\u27e9\n  * Encoding\u27e812\u27e9\n  * Parsing tools\u27e813\u27e9\n\n\n Report crate \u27e814\u27e9\n### Stats Overview\n74,105,742 Downloads all time\n4 Versions published\n#### Downloads over the last 90 days\nDisplay as \nStacked \n  * Stacked \n  * Unstacked \n\n\nLoading\u2026\n",
              "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://crates.io/keywords/cbor:  #cbor \n\u27e82\u27e9 https://crates.io/keywords/serde:  #serde \n\u27e83\u27e9 https://crates.io/crates/ciborium:  Readme \n\u27e84\u27e9 https://crates.io/crates/ciborium/versions:  4 Versions \n\u27e85\u27e9 https://crates.io/crates/ciborium/dependencies:  Dependencies \n\u27e86\u27e9 https://crates.io/crates/ciborium/reverse_dependencies:  Dependents \n\u27e87\u27e9 https://choosealicense.com/licenses/apache-2.0:  Apache-2.0 \n\u27e88\u27e9 https://github.com/enarx/ciborium:  github.com/enarx/ciborium \n\u27e89\u27e9 https://crates.io/categories/data-structures: Data structures\n\u27e810\u27e9 https://crates.io/categories/no-std: No standard library\n\u27e811\u27e9 https://crates.io/categories/embedded: Embedded development\n\u27e812\u27e9 https://crates.io/categories/encoding: Encoding\n\u27e813\u27e9 https://crates.io/categories/parsing: Parsing tools\n\u27e814\u27e9 https://crates.io/support?crate=ciborium&inquire=crate-violation:  Report crate \n",
              "fit_markdown": "",
              "fit_html": ""
            },
            "structured_data": {},
            "quality_score": 3.0,
            "extraction_method": "crawl4ai",
            "error": null,
            "metadata": {
              "doc_type": "docs",
              "content_length": 1356,
              "has_structured_data": false,
              "crawl_success": true
            },
            "timestamp": "112882.4449791"
          },
          "docs_rs": {
            "url": "https://docs.rs/ciborium",
            "title": "Crate ciboriumCopy item path",
            "content": {
              "raw_markdown": "[](https://docs.rs/ciborium/latest/ciborium/all.html \"show sidebar\")\n# Crate ciboriumCopy item path\n[Settings](https://docs.rs/ciborium/latest/settings.html)\n[Help](https://docs.rs/ciborium/latest/help.html)\nSummary[Source](https://docs.rs/ciborium/latest/src/ciborium/lib.rs.html#3-224)\nExpand description\nWelcome to Ciborium!\nCiborium contains CBOR serialization and deserialization implementations for serde.\n## [\u00a7](https://docs.rs/ciborium/latest/ciborium/#quick-start)Quick Start\nYou\u2019re probably looking for [`from_reader()`](https://docs.rs/ciborium/latest/ciborium/fn.from_reader.html \"fn ciborium::from_reader\") and [`into_writer()`](https://docs.rs/ciborium/latest/ciborium/fn.into_writer.html \"fn ciborium::into_writer\"), which are the main functions. Note that byte slices are also readers and writers and can be passed to these functions just as streams can.\nFor dynamic CBOR value creation/inspection, see [`Value`](https://docs.rs/ciborium/latest/ciborium/enum.Value.html \"enum ciborium::Value\").\n## [\u00a7](https://docs.rs/ciborium/latest/ciborium/#design-decisions)Design Decisions\n### [\u00a7](https://docs.rs/ciborium/latest/ciborium/#always-serialize-numeric-values-to-the-smallest-size)Always Serialize Numeric Values to the Smallest Size\nAlthough the CBOR specification has differing numeric widths, this is only a form of compression on the wire and is not intended to directly represent an \u201cinteger width\u201d or \u201cfloat width.\u201d Therefore, ciborium always serializes numbers to the smallest possible lossless encoding. For example, we serialize `1u128` as a single byte (`01`). Likewise, we will also freely decode that single byte into a `u128`.\nWhile there is some minor performance cost for this, there are several reasons for this choice. First, the specification seems to imply it by using a separate bit for the sign. Second, the specification requires that implementations handle leading zeroes; a liberal reading of which implies a requirement for lossless coercion. Third, dynamic languages like Python have no notion of \u201cinteger width,\u201d making this is a practical choice for maximizing wire compatibility with those languages.\nThis coercion is **always** lossless. For floats, this implies that we only coerce to a smaller size if coercion back to the original size has the same raw bits as the original.\n### [\u00a7](https://docs.rs/ciborium/latest/ciborium/#compatibility-with-other-implementations)Compatibility with Other Implementations\nThe ciborium project follows the [Robustness Principle](https://en.wikipedia.org/wiki/Robustness_principle). Therefore, we aim to be liberal in what we accept. This implies that we aim to be wire-compatible with other implementations in decoding, but not necessarily encoding.\nOne notable example of this is that `serde_cbor` uses fixed-width encoding of numbers and doesn\u2019t losslessly coerce. This implies that `ciborium` will successfully decode `serde_cbor` encodings, but the opposite may not be the case.\n### [\u00a7](https://docs.rs/ciborium/latest/ciborium/#representing-map-as-a-sequence-of-values)Representing Map as a Sequence of Values\nOther serde parsers have generally taken the route of using `BTreeMap` or `HashMap` to implement their encoding\u2019s underlying `Map` type. This crate chooses to represent the `Map` type using `Vec<(Value, Value)>` instead.\nThis decision was made because this type preserves the order of the pairs on the wire. Further, for those that need the properties of `BTreeMap` or `HashMap`, you can simply `collect()` the values into the respective type. This provides maximum flexibility.\n### [\u00a7](https://docs.rs/ciborium/latest/ciborium/#low-level-library)Low-level Library\nThe ciborium crate has the beginnings of a low-level library in the (private) `basic` module. We may extend this to be more robust and expose it for application consumption once we have it in a good state. If you\u2019d like to collaborate with us on that, please contact us. Alternatively, we might fork this code into a separate crate with no serde dependency.\n### [\u00a7](https://docs.rs/ciborium/latest/ciborium/#internal-types)Internal Types\nThe ciborium crate contains a number of internal types that implement useful serde traits. While these are not currently exposed, we might choose to expose them in the future if there is demand. Generally, this crate takes a conservative approach to exposing APIs to avoid breakage.\n### [\u00a7](https://docs.rs/ciborium/latest/ciborium/#packed-encoding)Packed Encoding?\nPacked encoding uses numerical offsets to represent structure field names and enum variant names. This can save significant space on the wire.\nWhile the authors of this crate like packed encoding, it should generally be avoided because it can be fragile as it exposes invariants of your Rust code to remote actors. We might consider adding this in the future. If you are interested in this, please contact us.\n## Modules[\u00a7](https://docs.rs/ciborium/latest/ciborium/#modules)\n\n[de](https://docs.rs/ciborium/latest/ciborium/de/index.html \"mod ciborium::de\")\n    Serde deserialization support for CBOR\n\n[ser](https://docs.rs/ciborium/latest/ciborium/ser/index.html \"mod ciborium::ser\")\n    Serde serialization support for CBOR\n\n[tag](https://docs.rs/ciborium/latest/ciborium/tag/index.html \"mod ciborium::tag\")\n    Contains helper types for dealing with CBOR tags\n\n[value](https://docs.rs/ciborium/latest/ciborium/value/index.html \"mod ciborium::value\")\n    A dynamic CBOR value\n## Macros[\u00a7](https://docs.rs/ciborium/latest/ciborium/#macros)\n\n[cbor](https://docs.rs/ciborium/latest/ciborium/macro.cbor.html \"macro ciborium::cbor\")\n    Build a `Value` conveniently.\n## Enums[\u00a7](https://docs.rs/ciborium/latest/ciborium/#enums)\n\n[Value](https://docs.rs/ciborium/latest/ciborium/enum.Value.html \"enum ciborium::Value\")\n    A representation of a dynamic CBOR value that can handled dynamically\n## Functions[\u00a7](https://docs.rs/ciborium/latest/ciborium/#functions)\n\n[from_reader](https://docs.rs/ciborium/latest/ciborium/fn.from_reader.html \"fn ciborium::from_reader\")\n    Deserializes as CBOR from a type with [`impl ciborium_io::Read`](https://docs.rs/ciborium-io/0.2.2/x86_64-unknown-linux-gnu/ciborium_io/trait.Read.html \"trait ciborium_io::Read\") using a 4KB buffer on the stack.\n\n[from_reader_with_buffer](https://docs.rs/ciborium/latest/ciborium/fn.from_reader_with_buffer.html \"fn ciborium::from_reader_with_buffer\")\n    Deserializes as CBOR from a type with [`impl ciborium_io::Read`](https://docs.rs/ciborium-io/0.2.2/x86_64-unknown-linux-gnu/ciborium_io/trait.Read.html \"trait ciborium_io::Read\"), using a caller-specific buffer as a temporary scratch space.\n\n[into_writer](https://docs.rs/ciborium/latest/ciborium/fn.into_writer.html \"fn ciborium::into_writer\")\n    Serializes as CBOR into a type with [`impl ciborium_io::Write`](https://docs.rs/ciborium-io/0.2.2/x86_64-unknown-linux-gnu/ciborium_io/trait.Write.html \"trait ciborium_io::Write\")\n",
              "markdown_with_citations": "[](https://docs.rs/ciborium/latest/ciborium/all.html \"show sidebar\")\n# Crate ciboriumCopy item path\nSettings\u27e81\u27e9\nHelp\u27e82\u27e9\nSummarySource\u27e83\u27e9\nExpand description\nWelcome to Ciborium!\nCiborium contains CBOR serialization and deserialization implementations for serde.\n## \u00a7\u27e84\u27e9Quick Start\nYou\u2019re probably looking for `from_reader()`\u27e85\u27e9 and `into_writer()`\u27e86\u27e9, which are the main functions. Note that byte slices are also readers and writers and can be passed to these functions just as streams can.\nFor dynamic CBOR value creation/inspection, see `Value`\u27e87\u27e9.\n## \u00a7\u27e88\u27e9Design Decisions\n### \u00a7\u27e89\u27e9Always Serialize Numeric Values to the Smallest Size\nAlthough the CBOR specification has differing numeric widths, this is only a form of compression on the wire and is not intended to directly represent an \u201cinteger width\u201d or \u201cfloat width.\u201d Therefore, ciborium always serializes numbers to the smallest possible lossless encoding. For example, we serialize `1u128` as a single byte (`01`). Likewise, we will also freely decode that single byte into a `u128`.\nWhile there is some minor performance cost for this, there are several reasons for this choice. First, the specification seems to imply it by using a separate bit for the sign. Second, the specification requires that implementations handle leading zeroes; a liberal reading of which implies a requirement for lossless coercion. Third, dynamic languages like Python have no notion of \u201cinteger width,\u201d making this is a practical choice for maximizing wire compatibility with those languages.\nThis coercion is **always** lossless. For floats, this implies that we only coerce to a smaller size if coercion back to the original size has the same raw bits as the original.\n### \u00a7\u27e810\u27e9Compatibility with Other Implementations\nThe ciborium project follows the Robustness Principle\u27e811\u27e9. Therefore, we aim to be liberal in what we accept. This implies that we aim to be wire-compatible with other implementations in decoding, but not necessarily encoding.\nOne notable example of this is that `serde_cbor` uses fixed-width encoding of numbers and doesn\u2019t losslessly coerce. This implies that `ciborium` will successfully decode `serde_cbor` encodings, but the opposite may not be the case.\n### \u00a7\u27e812\u27e9Representing Map as a Sequence of Values\nOther serde parsers have generally taken the route of using `BTreeMap` or `HashMap` to implement their encoding\u2019s underlying `Map` type. This crate chooses to represent the `Map` type using `Vec<(Value, Value)>` instead.\nThis decision was made because this type preserves the order of the pairs on the wire. Further, for those that need the properties of `BTreeMap` or `HashMap`, you can simply `collect()` the values into the respective type. This provides maximum flexibility.\n### \u00a7\u27e813\u27e9Low-level Library\nThe ciborium crate has the beginnings of a low-level library in the (private) `basic` module. We may extend this to be more robust and expose it for application consumption once we have it in a good state. If you\u2019d like to collaborate with us on that, please contact us. Alternatively, we might fork this code into a separate crate with no serde dependency.\n### \u00a7\u27e814\u27e9Internal Types\nThe ciborium crate contains a number of internal types that implement useful serde traits. While these are not currently exposed, we might choose to expose them in the future if there is demand. Generally, this crate takes a conservative approach to exposing APIs to avoid breakage.\n### \u00a7\u27e815\u27e9Packed Encoding?\nPacked encoding uses numerical offsets to represent structure field names and enum variant names. This can save significant space on the wire.\nWhile the authors of this crate like packed encoding, it should generally be avoided because it can be fragile as it exposes invariants of your Rust code to remote actors. We might consider adding this in the future. If you are interested in this, please contact us.\n## Modules\u00a7\u27e816\u27e9\n\nde\u27e817\u27e9\n    Serde deserialization support for CBOR\n\nser\u27e818\u27e9\n    Serde serialization support for CBOR\n\ntag\u27e819\u27e9\n    Contains helper types for dealing with CBOR tags\n\nvalue\u27e820\u27e9\n    A dynamic CBOR value\n## Macros\u00a7\u27e821\u27e9\n\ncbor\u27e822\u27e9\n    Build a `Value` conveniently.\n## Enums\u00a7\u27e823\u27e9\n\nValue\u27e87\u27e9\n    A representation of a dynamic CBOR value that can handled dynamically\n## Functions\u00a7\u27e824\u27e9\n\nfrom_reader\u27e85\u27e9\n    Deserializes as CBOR from a type with `impl ciborium_io::Read`\u27e825\u27e9 using a 4KB buffer on the stack.\n\nfrom_reader_with_buffer\u27e826\u27e9\n    Deserializes as CBOR from a type with `impl ciborium_io::Read`\u27e825\u27e9, using a caller-specific buffer as a temporary scratch space.\n\ninto_writer\u27e86\u27e9\n    Serializes as CBOR into a type with `impl ciborium_io::Write`\u27e827\u27e9\n",
              "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://docs.rs/ciborium/latest/settings.html: Settings\n\u27e82\u27e9 https://docs.rs/ciborium/latest/help.html: Help\n\u27e83\u27e9 https://docs.rs/ciborium/latest/src/ciborium/lib.rs.html#3-224: Source\n\u27e84\u27e9 https://docs.rs/ciborium/latest/ciborium/#quick-start: \u00a7\n\u27e85\u27e9 https://docs.rs/ciborium/latest/ciborium/fn.from_reader.html: fn ciborium::from_reader - `from_reader()`\n\u27e86\u27e9 https://docs.rs/ciborium/latest/ciborium/fn.into_writer.html: fn ciborium::into_writer - `into_writer()`\n\u27e87\u27e9 https://docs.rs/ciborium/latest/ciborium/enum.Value.html: enum ciborium::Value - `Value`\n\u27e88\u27e9 https://docs.rs/ciborium/latest/ciborium/#design-decisions: \u00a7\n\u27e89\u27e9 https://docs.rs/ciborium/latest/ciborium/#always-serialize-numeric-values-to-the-smallest-size: \u00a7\n\u27e810\u27e9 https://docs.rs/ciborium/latest/ciborium/#compatibility-with-other-implementations: \u00a7\n\u27e811\u27e9 https://en.wikipedia.org/wiki/Robustness_principle: Robustness Principle\n\u27e812\u27e9 https://docs.rs/ciborium/latest/ciborium/#representing-map-as-a-sequence-of-values: \u00a7\n\u27e813\u27e9 https://docs.rs/ciborium/latest/ciborium/#low-level-library: \u00a7\n\u27e814\u27e9 https://docs.rs/ciborium/latest/ciborium/#internal-types: \u00a7\n\u27e815\u27e9 https://docs.rs/ciborium/latest/ciborium/#packed-encoding: \u00a7\n\u27e816\u27e9 https://docs.rs/ciborium/latest/ciborium/#modules: \u00a7\n\u27e817\u27e9 https://docs.rs/ciborium/latest/ciborium/de/index.html: mod ciborium::de - de\n\u27e818\u27e9 https://docs.rs/ciborium/latest/ciborium/ser/index.html: mod ciborium::ser - ser\n\u27e819\u27e9 https://docs.rs/ciborium/latest/ciborium/tag/index.html: mod ciborium::tag - tag\n\u27e820\u27e9 https://docs.rs/ciborium/latest/ciborium/value/index.html: mod ciborium::value - value\n\u27e821\u27e9 https://docs.rs/ciborium/latest/ciborium/#macros: \u00a7\n\u27e822\u27e9 https://docs.rs/ciborium/latest/ciborium/macro.cbor.html: macro ciborium::cbor - cbor\n\u27e823\u27e9 https://docs.rs/ciborium/latest/ciborium/#enums: \u00a7\n\u27e824\u27e9 https://docs.rs/ciborium/latest/ciborium/#functions: \u00a7\n\u27e825\u27e9 https://docs.rs/ciborium-io/0.2.2/x86_64-unknown-linux-gnu/ciborium_io/trait.Read.html: trait ciborium_io::Read - `impl ciborium_io::Read`\n\u27e826\u27e9 https://docs.rs/ciborium/latest/ciborium/fn.from_reader_with_buffer.html: fn ciborium::from_reader_with_buffer - from_reader_with_buffer\n\u27e827\u27e9 https://docs.rs/ciborium-io/0.2.2/x86_64-unknown-linux-gnu/ciborium_io/trait.Write.html: trait ciborium_io::Write - `impl ciborium_io::Write`\n",
              "fit_markdown": "",
              "fit_html": ""
            },
            "structured_data": {},
            "quality_score": 4.0,
            "extraction_method": "crawl4ai",
            "error": null,
            "metadata": {
              "doc_type": "docs",
              "content_length": 6916,
              "has_structured_data": false,
              "crawl_success": true
            },
            "timestamp": "112883.4130385"
          },
          "lib_rs": {
            "url": "https://lib.rs/crates/ciborium",
            "title": "Untitled",
            "content": {
              "raw_markdown": "###  [4 releases](https://lib.rs/crates/ciborium/versions)\n0.2.2 |  Jan 24, 2024   \n---|---  \n0.2.1 |  May 8, 2023   \n0.2.0 |  Nov 21, 2021   \n0.1.0 |  Dec 3, 2020   \n#**37** in [Encoding](https://lib.rs/encoding \"Encoding and/or decoding data from one data format to another.\")\nDownload history 856527/week @ 2025-01-20 934817/week @ 2025-01-27 1026200/week @ 2025-02-03 1130988/week @ 2025-02-10 1021636/week @ 2025-02-17 1103452/week @ 2025-02-24 1447374/week @ 2025-03-03 1447564/week @ 2025-03-10 1679595/week @ 2025-03-17 1817063/week @ 2025-03-24 1316919/week @ 2025-03-31 1408744/week @ 2025-04-07 1219039/week @ 2025-04-14 1138837/week @ 2025-04-21 1128423/week @ 2025-04-28 1079146/week @ 2025-05-05\n**4,637,280** downloads per month Used in [**5,617** crates (267 directly)](https://lib.rs/crates/ciborium/rev)\n**Apache-2.0**\n185KB  4K  SLoC\n[![Workflow Status](https://img.gs/czjpqfbdkz/full/https://github.com/enarx/ciborium/workflows/test/badge.svg)](https://github.com/enarx/ciborium/actions?query=workflow%3A%22test%22) [![Average time to resolve an issue](https://img.gs/czjpqfbdkz/full/https://isitmaintained.com/badge/resolution/enarx/ciborium.svg)](https://isitmaintained.com/project/enarx/ciborium \"Average time to resolve an issue\") [![Percentage of issues still open](https://img.gs/czjpqfbdkz/full/https://isitmaintained.com/badge/open/enarx/ciborium.svg)](https://isitmaintained.com/project/enarx/ciborium \"Percentage of issues still open\") ![Maintenance](https://img.shields.io/badge/maintenance-activly--developed-brightgreen.svg)\n# ciborium\nWelcome to Ciborium!\nCiborium contains CBOR serialization and deserialization implementations for serde.\n## Quick Start\nYou're probably looking for ```from_reader``(``)``` and ```into_writer``(``)```, which are the main functions. Note that byte slices are also readers and writers and can be passed to these functions just as streams can.\nFor dynamic CBOR value creation/inspection, see ``Value``.\n## Design Decisions\n### Always Serialize Numeric Values to the Smallest Size\nAlthough the CBOR specification has differing numeric widths, this is only a form of compression on the wire and is not intended to directly represent an \"integer width\" or \"float width.\" Therefore, ciborium always serializes numbers to the smallest possible lossless encoding. For example, we serialize ```1``u128``` as a single byte (```01```). Likewise, we will also freely decode that single byte into a ```u128```.\nWhile there is some minor performance cost for this, there are several reasons for this choice. First, the specification seems to imply it by using a separate bit for the sign. Second, the specification requires that implementations handle leading zeroes; a liberal reading of which implies a requirement for lossless coercion. Third, dynamic languages like Python have no notion of \"integer width,\" making this is a practical choice for maximizing wire compatibility with those languages.\nThis coercion is **always** lossless. For floats, this implies that we only coerce to a smaller size if coercion back to the original size has the same raw bits as the original.\n### Compatibility with Other Implementations\nThe ciborium project follows the [Robustness Principle](https://en.wikipedia.org/wiki/Robustness_principle). Therefore, we aim to be liberal in what we accept. This implies that we aim to be wire-compatible with other implementations in decoding, but not necessarily encoding.\nOne notable example of this is that ``serde_cbor`` uses fixed-width encoding of numbers and doesn't losslessly coerce. This implies that ``ciborium`` will successfully decode ``serde_cbor`` encodings, but the opposite may not be the case.\n### Representing Map as a Sequence of Values\nOther serde parsers have generally taken the route of using ``BTreeMap`` or ``HashMap`` to implement their encoding's underlying ``Map`` type. This crate chooses to represent the ``Map`` type using ````Vec``<``(`Value, Value`)``>```` instead.\nThis decision was made because this type preserves the order of the pairs on the wire. Further, for those that need the properties of ``BTreeMap`` or ``HashMap``, you can simply ```collect``(``)``` the values into the respective type. This provides maximum flexibility.\n### Low-level Library\nThe ciborium crate has the beginnings of a low-level library in the (private) ``basic`` module. We may extend this to be more robust and expose it for application consumption once we have it in a good state. If you'd like to collaborate with us on that, please contact us. Alternatively, we might fork this code into a separate crate with no serde dependency.\n### Internal Types\nThe ciborium crate contains a number of internal types that implement useful serde traits. While these are not currently exposed, we might choose to expose them in the future if there is demand. Generally, this crate takes a conservative approach to exposing APIs to avoid breakage.\n### Packed Encoding?\nPacked encoding uses numerical offsets to represent structure field names and enum variant names. This can save significant space on the wire.\nWhile the authors of this crate like packed encoding, it should generally be avoided because it can be fragile as it exposes invariants of your Rust code to remote actors. We might consider adding this in the future. If you are interested in this, please contact us.\nLicense: Apache-2.0\n#### Dependencies\n~0.5\u20131.1MB  ~25K SLoC\n  * [ciborium-io](https://lib.rs/crates/ciborium-io \"0.2.2\")[+alloc](https://lib.rs/crates/ciborium-io/features#feature-alloc)\n  * [ciborium-ll](https://lib.rs/crates/ciborium-ll \"0.2.2\")\n  * [serde](https://lib.rs/crates/serde \"1.0.100\")[+alloc](https://lib.rs/crates/serde/features#feature-alloc)[+derive](https://lib.rs/crates/serde/features#feature-derive)\n\n\n  * dev  [hex](https://lib.rs/crates/hex \"0.4\")\n  * dev  [rand](https://lib.rs/crates/rand \"outdated\") 0.8\n  * dev  [rstest](https://lib.rs/crates/rstest \"obsolete\") 0.11\n  * dev  [serde_bytes](https://lib.rs/crates/serde_bytes \"0.11\")\n\n\n#### [Other feature](https://lib.rs/crates/ciborium/features)\n  * [std](https://lib.rs/crates/ciborium/features#feature-std)\n\n\n  *[SLoC]: approx. additional lines of code\n",
              "markdown_with_citations": "###  4 releases\u27e81\u27e9\n0.2.2 |  Jan 24, 2024   \n---|---  \n0.2.1 |  May 8, 2023   \n0.2.0 |  Nov 21, 2021   \n0.1.0 |  Dec 3, 2020   \n#**37** in Encoding\u27e82\u27e9\nDownload history 856527/week @ 2025-01-20 934817/week @ 2025-01-27 1026200/week @ 2025-02-03 1130988/week @ 2025-02-10 1021636/week @ 2025-02-17 1103452/week @ 2025-02-24 1447374/week @ 2025-03-03 1447564/week @ 2025-03-10 1679595/week @ 2025-03-17 1817063/week @ 2025-03-24 1316919/week @ 2025-03-31 1408744/week @ 2025-04-07 1219039/week @ 2025-04-14 1138837/week @ 2025-04-21 1128423/week @ 2025-04-28 1079146/week @ 2025-05-05\n**4,637,280** downloads per month Used in **5,617** crates (267 directly)\u27e83\u27e9\n**Apache-2.0**\n185KB  4K  SLoC\n![Workflow Status\u27e84\u27e9](https://github.com/enarx/ciborium/actions?query=workflow%3A%22test%22) ![Average time to resolve an issue\u27e85\u27e9](https://isitmaintained.com/project/enarx/ciborium \"Average time to resolve an issue\") ![Percentage of issues still open\u27e86\u27e9](https://isitmaintained.com/project/enarx/ciborium \"Percentage of issues still open\") ![Maintenance\u27e87\u27e9]\n# ciborium\nWelcome to Ciborium!\nCiborium contains CBOR serialization and deserialization implementations for serde.\n## Quick Start\nYou're probably looking for ```from_reader``(``)``` and ```into_writer``(``)```, which are the main functions. Note that byte slices are also readers and writers and can be passed to these functions just as streams can.\nFor dynamic CBOR value creation/inspection, see ``Value``.\n## Design Decisions\n### Always Serialize Numeric Values to the Smallest Size\nAlthough the CBOR specification has differing numeric widths, this is only a form of compression on the wire and is not intended to directly represent an \"integer width\" or \"float width.\" Therefore, ciborium always serializes numbers to the smallest possible lossless encoding. For example, we serialize ```1``u128``` as a single byte (```01```). Likewise, we will also freely decode that single byte into a ```u128```.\nWhile there is some minor performance cost for this, there are several reasons for this choice. First, the specification seems to imply it by using a separate bit for the sign. Second, the specification requires that implementations handle leading zeroes; a liberal reading of which implies a requirement for lossless coercion. Third, dynamic languages like Python have no notion of \"integer width,\" making this is a practical choice for maximizing wire compatibility with those languages.\nThis coercion is **always** lossless. For floats, this implies that we only coerce to a smaller size if coercion back to the original size has the same raw bits as the original.\n### Compatibility with Other Implementations\nThe ciborium project follows the Robustness Principle\u27e88\u27e9. Therefore, we aim to be liberal in what we accept. This implies that we aim to be wire-compatible with other implementations in decoding, but not necessarily encoding.\nOne notable example of this is that ``serde_cbor`` uses fixed-width encoding of numbers and doesn't losslessly coerce. This implies that ``ciborium`` will successfully decode ``serde_cbor`` encodings, but the opposite may not be the case.\n### Representing Map as a Sequence of Values\nOther serde parsers have generally taken the route of using ``BTreeMap`` or ``HashMap`` to implement their encoding's underlying ``Map`` type. This crate chooses to represent the ``Map`` type using ````Vec``<``(`Value, Value`)``>```` instead.\nThis decision was made because this type preserves the order of the pairs on the wire. Further, for those that need the properties of ``BTreeMap`` or ``HashMap``, you can simply ```collect``(``)``` the values into the respective type. This provides maximum flexibility.\n### Low-level Library\nThe ciborium crate has the beginnings of a low-level library in the (private) ``basic`` module. We may extend this to be more robust and expose it for application consumption once we have it in a good state. If you'd like to collaborate with us on that, please contact us. Alternatively, we might fork this code into a separate crate with no serde dependency.\n### Internal Types\nThe ciborium crate contains a number of internal types that implement useful serde traits. While these are not currently exposed, we might choose to expose them in the future if there is demand. Generally, this crate takes a conservative approach to exposing APIs to avoid breakage.\n### Packed Encoding?\nPacked encoding uses numerical offsets to represent structure field names and enum variant names. This can save significant space on the wire.\nWhile the authors of this crate like packed encoding, it should generally be avoided because it can be fragile as it exposes invariants of your Rust code to remote actors. We might consider adding this in the future. If you are interested in this, please contact us.\nLicense: Apache-2.0\n#### Dependencies\n~0.5\u20131.1MB  ~25K SLoC\n  * ciborium-io\u27e89\u27e9+alloc\u27e810\u27e9\n  * ciborium-ll\u27e811\u27e9\n  * serde\u27e812\u27e9+alloc\u27e813\u27e9+derive\u27e814\u27e9\n\n\n  * dev  hex\u27e815\u27e9\n  * dev  rand\u27e816\u27e9 0.8\n  * dev  rstest\u27e817\u27e9 0.11\n  * dev  serde_bytes\u27e818\u27e9\n\n\n#### Other feature\u27e819\u27e9\n  * std\u27e820\u27e9\n\n\n  *[SLoC]: approx. additional lines of code\n",
              "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://lib.rs/crates/ciborium/versions: 4 releases\n\u27e82\u27e9 https://lib.rs/encoding: Encoding and/or decoding data from one data format to another. - Encoding\n\u27e83\u27e9 https://lib.rs/crates/ciborium/rev: **5,617** crates (267 directly)\n\u27e84\u27e9 https://img.gs/czjpqfbdkz/full/https://github.com/enarx/ciborium/workflows/test/badge.svg: ![Workflow Status\n\u27e85\u27e9 https://img.gs/czjpqfbdkz/full/https://isitmaintained.com/badge/resolution/enarx/ciborium.svg: ![Average time to resolve an issue\n\u27e86\u27e9 https://img.gs/czjpqfbdkz/full/https://isitmaintained.com/badge/open/enarx/ciborium.svg: ![Percentage of issues still open\n\u27e87\u27e9 https://img.shields.io/badge/maintenance-activly--developed-brightgreen.svg: Maintenance\n\u27e88\u27e9 https://en.wikipedia.org/wiki/Robustness_principle: Robustness Principle\n\u27e89\u27e9 https://lib.rs/crates/ciborium-io: 0.2.2 - ciborium-io\n\u27e810\u27e9 https://lib.rs/crates/ciborium-io/features#feature-alloc: +alloc\n\u27e811\u27e9 https://lib.rs/crates/ciborium-ll: 0.2.2 - ciborium-ll\n\u27e812\u27e9 https://lib.rs/crates/serde: 1.0.100 - serde\n\u27e813\u27e9 https://lib.rs/crates/serde/features#feature-alloc: +alloc\n\u27e814\u27e9 https://lib.rs/crates/serde/features#feature-derive: +derive\n\u27e815\u27e9 https://lib.rs/crates/hex: 0.4 - hex\n\u27e816\u27e9 https://lib.rs/crates/rand: outdated - rand\n\u27e817\u27e9 https://lib.rs/crates/rstest: obsolete - rstest\n\u27e818\u27e9 https://lib.rs/crates/serde_bytes: 0.11 - serde_bytes\n\u27e819\u27e9 https://lib.rs/crates/ciborium/features: Other feature\n\u27e820\u27e9 https://lib.rs/crates/ciborium/features#feature-std: std\n",
              "fit_markdown": "",
              "fit_html": ""
            },
            "structured_data": {},
            "quality_score": 3.0,
            "extraction_method": "crawl4ai",
            "error": null,
            "metadata": {
              "doc_type": "docs",
              "content_length": 6199,
              "has_structured_data": false,
              "crawl_success": true
            },
            "timestamp": "112883.8664708"
          }
        },
        "crate_analysis": {
          "status": "completed",
          "check": [
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#cfg-if@1.0.1",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\cfg-if-1.0.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "cfg_if",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\cfg-if-1.0.1\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpdr4r_nvg\\ciborium-0.2.2\\target\\debug\\deps\\libcfg_if-0416b600f5de43de.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#ciborium-io@0.2.2",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\ciborium-io-0.2.2\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "ciborium_io",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\ciborium-io-0.2.2\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "alloc",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpdr4r_nvg\\ciborium-0.2.2\\target\\debug\\deps\\libciborium_io-633b2bdbb5d1c0f4.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#unicode-ident@1.0.18",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\unicode-ident-1.0.18\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "unicode_ident",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\unicode-ident-1.0.18\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpdr4r_nvg\\ciborium-0.2.2\\target\\debug\\deps\\libunicode_ident-f7db65657b8daa2b.rlib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpdr4r_nvg\\ciborium-0.2.2\\target\\debug\\deps\\libunicode_ident-f7db65657b8daa2b.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#serde@1.0.219",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde-1.0.219\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde-1.0.219\\build.rs",
                "edition": "2018",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "alloc",
                "derive",
                "serde_derive",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpdr4r_nvg\\ciborium-0.2.2\\target\\debug\\build\\serde-f89d3144affbffd7\\build-script-build.exe",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpdr4r_nvg\\ciborium-0.2.2\\target\\debug\\build\\serde-f89d3144affbffd7\\build_script_build.pdb"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#proc-macro2@1.0.95",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\proc-macro2-1.0.95\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\proc-macro2-1.0.95\\build.rs",
                "edition": "2021",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "proc-macro"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpdr4r_nvg\\ciborium-0.2.2\\target\\debug\\build\\proc-macro2-fc3323aef1101545\\build-script-build.exe",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpdr4r_nvg\\ciborium-0.2.2\\target\\debug\\build\\proc-macro2-fc3323aef1101545\\build_script_build.pdb"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "build-script-executed",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#serde@1.0.219",
              "linked_libs": [],
              "linked_paths": [],
              "cfgs": [],
              "env": [],
              "out_dir": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpdr4r_nvg\\ciborium-0.2.2\\target\\debug\\build\\serde-d1e474d706e0e01c\\out"
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#half@2.6.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\half-2.6.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "half",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\half-2.6.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpdr4r_nvg\\ciborium-0.2.2\\target\\debug\\deps\\libhalf-0dc7b443232404a3.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "build-script-executed",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#proc-macro2@1.0.95",
              "linked_libs": [],
              "linked_paths": [],
              "cfgs": [
                "wrap_proc_macro"
              ],
              "env": [],
              "out_dir": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpdr4r_nvg\\ciborium-0.2.2\\target\\debug\\build\\proc-macro2-f3f556b4a3e65444\\out"
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#ciborium-ll@0.2.2",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\ciborium-ll-0.2.2\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "ciborium_ll",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\ciborium-ll-0.2.2\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpdr4r_nvg\\ciborium-0.2.2\\target\\debug\\deps\\libciborium_ll-3a6ad69995e9ed9e.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#proc-macro2@1.0.95",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\proc-macro2-1.0.95\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "proc_macro2",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\proc-macro2-1.0.95\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "proc-macro"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpdr4r_nvg\\ciborium-0.2.2\\target\\debug\\deps\\libproc_macro2-44d44d954847f2cc.rlib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpdr4r_nvg\\ciborium-0.2.2\\target\\debug\\deps\\libproc_macro2-44d44d954847f2cc.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#quote@1.0.40",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\quote-1.0.40\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "quote",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\quote-1.0.40\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "proc-macro"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpdr4r_nvg\\ciborium-0.2.2\\target\\debug\\deps\\libquote-3c21095bdf613223.rlib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpdr4r_nvg\\ciborium-0.2.2\\target\\debug\\deps\\libquote-3c21095bdf613223.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#syn@2.0.104",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\syn-2.0.104\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "syn",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\syn-2.0.104\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "clone-impls",
                "derive",
                "parsing",
                "printing",
                "proc-macro"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpdr4r_nvg\\ciborium-0.2.2\\target\\debug\\deps\\libsyn-f9ade354b3407e90.rlib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpdr4r_nvg\\ciborium-0.2.2\\target\\debug\\deps\\libsyn-f9ade354b3407e90.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#serde_derive@1.0.219",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde_derive-1.0.219\\Cargo.toml",
              "target": {
                "kind": [
                  "proc-macro"
                ],
                "crate_types": [
                  "proc-macro"
                ],
                "name": "serde_derive",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde_derive-1.0.219\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpdr4r_nvg\\ciborium-0.2.2\\target\\debug\\deps\\serde_derive-052fb5620697cbcc.dll",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpdr4r_nvg\\ciborium-0.2.2\\target\\debug\\deps\\serde_derive-052fb5620697cbcc.dll.lib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpdr4r_nvg\\ciborium-0.2.2\\target\\debug\\deps\\serde_derive-052fb5620697cbcc.dll.exp",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpdr4r_nvg\\ciborium-0.2.2\\target\\debug\\deps\\serde_derive-052fb5620697cbcc.pdb"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#serde@1.0.219",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde-1.0.219\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "serde",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde-1.0.219\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "alloc",
                "derive",
                "serde_derive",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpdr4r_nvg\\ciborium-0.2.2\\target\\debug\\deps\\libserde-559c843971f8a871.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpdr4r_nvg/ciborium-0.2.2#ciborium@0.2.2",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpdr4r_nvg\\ciborium-0.2.2\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "ciborium",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpdr4r_nvg\\ciborium-0.2.2\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: irrefutable `if let` pattern\n   --> src\\value\\de.rs:246:27\n    |\n246 |                 } else if let Ok(x) = i128::try_from(*x) {\n    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: this pattern will always match, so the `if let` is useless\n    = help: consider replacing the `if let` with a `let`\n    = note: `#[warn(irrefutable_let_patterns)]` on by default\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "this pattern will always match, so the `if let` is useless",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider replacing the `if let` with a `let`",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "`#[warn(irrefutable_let_patterns)]` on by default",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "irrefutable_let_patterns",
                  "explanation": null
                },
                "level": "warning",
                "message": "irrefutable `if let` pattern",
                "spans": [
                  {
                    "byte_end": 7381,
                    "byte_start": 7351,
                    "column_end": 57,
                    "column_start": 27,
                    "expansion": null,
                    "file_name": "src\\value\\de.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 246,
                    "line_start": 246,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 57,
                        "highlight_start": 27,
                        "text": "                } else if let Ok(x) = i128::try_from(*x) {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpdr4r_nvg/ciborium-0.2.2#ciborium@0.2.2",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpdr4r_nvg\\ciborium-0.2.2\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "ciborium",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpdr4r_nvg\\ciborium-0.2.2\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: irrefutable `if let` pattern\n  --> src\\value\\ser.rs:53:27\n   |\n53 |                 } else if let Ok(x) = i128::try_from(*x) {\n   |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n   |\n   = note: this pattern will always match, so the `if let` is useless\n   = help: consider replacing the `if let` with a `let`\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "this pattern will always match, so the `if let` is useless",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider replacing the `if let` with a `let`",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "irrefutable_let_patterns",
                  "explanation": null
                },
                "level": "warning",
                "message": "irrefutable `if let` pattern",
                "spans": [
                  {
                    "byte_end": 2155,
                    "byte_start": 2125,
                    "column_end": 57,
                    "column_start": 27,
                    "expansion": null,
                    "file_name": "src\\value\\ser.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 53,
                    "line_start": 53,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 57,
                        "highlight_start": 27,
                        "text": "                } else if let Ok(x) = i128::try_from(*x) {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-artifact",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpdr4r_nvg/ciborium-0.2.2#ciborium@0.2.2",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpdr4r_nvg\\ciborium-0.2.2\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "ciborium",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpdr4r_nvg\\ciborium-0.2.2\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpdr4r_nvg\\ciborium-0.2.2\\target\\debug\\deps\\libciborium-722c3e9fc8e52e65.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "build-finished",
              "success": true
            }
          ],
          "clippy": [
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#proc-macro2@1.0.95",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\proc-macro2-1.0.95\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\proc-macro2-1.0.95\\build.rs",
                "edition": "2021",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "proc-macro"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpdr4r_nvg\\ciborium-0.2.2\\target\\debug\\build\\proc-macro2-fc3323aef1101545\\build-script-build.exe",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpdr4r_nvg\\ciborium-0.2.2\\target\\debug\\build\\proc-macro2-fc3323aef1101545\\build_script_build.pdb"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "build-script-executed",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#proc-macro2@1.0.95",
              "linked_libs": [],
              "linked_paths": [],
              "cfgs": [
                "wrap_proc_macro"
              ],
              "env": [],
              "out_dir": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpdr4r_nvg\\ciborium-0.2.2\\target\\debug\\build\\proc-macro2-f3f556b4a3e65444\\out"
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#unicode-ident@1.0.18",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\unicode-ident-1.0.18\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "unicode_ident",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\unicode-ident-1.0.18\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpdr4r_nvg\\ciborium-0.2.2\\target\\debug\\deps\\libunicode_ident-f7db65657b8daa2b.rlib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpdr4r_nvg\\ciborium-0.2.2\\target\\debug\\deps\\libunicode_ident-f7db65657b8daa2b.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#cfg-if@1.0.1",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\cfg-if-1.0.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "cfg_if",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\cfg-if-1.0.1\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpdr4r_nvg\\ciborium-0.2.2\\target\\debug\\deps\\libcfg_if-0416b600f5de43de.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#serde@1.0.219",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde-1.0.219\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde-1.0.219\\build.rs",
                "edition": "2018",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "alloc",
                "derive",
                "serde_derive",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpdr4r_nvg\\ciborium-0.2.2\\target\\debug\\build\\serde-f89d3144affbffd7\\build-script-build.exe",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpdr4r_nvg\\ciborium-0.2.2\\target\\debug\\build\\serde-f89d3144affbffd7\\build_script_build.pdb"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#ciborium-io@0.2.2",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\ciborium-io-0.2.2\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "ciborium_io",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\ciborium-io-0.2.2\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "alloc",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpdr4r_nvg\\ciborium-0.2.2\\target\\debug\\deps\\libciborium_io-633b2bdbb5d1c0f4.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#proc-macro2@1.0.95",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\proc-macro2-1.0.95\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "proc_macro2",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\proc-macro2-1.0.95\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "proc-macro"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpdr4r_nvg\\ciborium-0.2.2\\target\\debug\\deps\\libproc_macro2-44d44d954847f2cc.rlib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpdr4r_nvg\\ciborium-0.2.2\\target\\debug\\deps\\libproc_macro2-44d44d954847f2cc.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "build-script-executed",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#serde@1.0.219",
              "linked_libs": [],
              "linked_paths": [],
              "cfgs": [],
              "env": [],
              "out_dir": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpdr4r_nvg\\ciborium-0.2.2\\target\\debug\\build\\serde-d1e474d706e0e01c\\out"
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#half@2.6.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\half-2.6.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "half",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\half-2.6.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpdr4r_nvg\\ciborium-0.2.2\\target\\debug\\deps\\libhalf-0dc7b443232404a3.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#quote@1.0.40",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\quote-1.0.40\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "quote",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\quote-1.0.40\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "proc-macro"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpdr4r_nvg\\ciborium-0.2.2\\target\\debug\\deps\\libquote-3c21095bdf613223.rlib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpdr4r_nvg\\ciborium-0.2.2\\target\\debug\\deps\\libquote-3c21095bdf613223.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#ciborium-ll@0.2.2",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\ciborium-ll-0.2.2\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "ciborium_ll",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\ciborium-ll-0.2.2\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpdr4r_nvg\\ciborium-0.2.2\\target\\debug\\deps\\libciborium_ll-3a6ad69995e9ed9e.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#syn@2.0.104",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\syn-2.0.104\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "syn",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\syn-2.0.104\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "clone-impls",
                "derive",
                "parsing",
                "printing",
                "proc-macro"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpdr4r_nvg\\ciborium-0.2.2\\target\\debug\\deps\\libsyn-f9ade354b3407e90.rlib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpdr4r_nvg\\ciborium-0.2.2\\target\\debug\\deps\\libsyn-f9ade354b3407e90.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#serde_derive@1.0.219",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde_derive-1.0.219\\Cargo.toml",
              "target": {
                "kind": [
                  "proc-macro"
                ],
                "crate_types": [
                  "proc-macro"
                ],
                "name": "serde_derive",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde_derive-1.0.219\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpdr4r_nvg\\ciborium-0.2.2\\target\\debug\\deps\\serde_derive-052fb5620697cbcc.dll",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpdr4r_nvg\\ciborium-0.2.2\\target\\debug\\deps\\serde_derive-052fb5620697cbcc.dll.lib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpdr4r_nvg\\ciborium-0.2.2\\target\\debug\\deps\\serde_derive-052fb5620697cbcc.dll.exp",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpdr4r_nvg\\ciborium-0.2.2\\target\\debug\\deps\\serde_derive-052fb5620697cbcc.pdb"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#serde@1.0.219",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde-1.0.219\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "serde",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde-1.0.219\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "alloc",
                "derive",
                "serde_derive",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpdr4r_nvg\\ciborium-0.2.2\\target\\debug\\deps\\libserde-559c843971f8a871.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpdr4r_nvg/ciborium-0.2.2#ciborium@0.2.2",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpdr4r_nvg\\ciborium-0.2.2\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "ciborium",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpdr4r_nvg\\ciborium-0.2.2\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: irrefutable `if let` pattern\n   --> src\\value\\de.rs:246:27\n    |\n246 |                 } else if let Ok(x) = i128::try_from(*x) {\n    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: this pattern will always match, so the `if let` is useless\n    = help: consider replacing the `if let` with a `let`\n    = note: `#[warn(irrefutable_let_patterns)]` on by default\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "this pattern will always match, so the `if let` is useless",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider replacing the `if let` with a `let`",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "`#[warn(irrefutable_let_patterns)]` on by default",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "irrefutable_let_patterns",
                  "explanation": null
                },
                "level": "warning",
                "message": "irrefutable `if let` pattern",
                "spans": [
                  {
                    "byte_end": 7381,
                    "byte_start": 7351,
                    "column_end": 57,
                    "column_start": 27,
                    "expansion": null,
                    "file_name": "src\\value\\de.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 246,
                    "line_start": 246,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 57,
                        "highlight_start": 27,
                        "text": "                } else if let Ok(x) = i128::try_from(*x) {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpdr4r_nvg/ciborium-0.2.2#ciborium@0.2.2",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpdr4r_nvg\\ciborium-0.2.2\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "ciborium",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpdr4r_nvg\\ciborium-0.2.2\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: irrefutable `if let` pattern\n  --> src\\value\\ser.rs:53:27\n   |\n53 |                 } else if let Ok(x) = i128::try_from(*x) {\n   |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n   |\n   = note: this pattern will always match, so the `if let` is useless\n   = help: consider replacing the `if let` with a `let`\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "this pattern will always match, so the `if let` is useless",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider replacing the `if let` with a `let`",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "irrefutable_let_patterns",
                  "explanation": null
                },
                "level": "warning",
                "message": "irrefutable `if let` pattern",
                "spans": [
                  {
                    "byte_end": 2155,
                    "byte_start": 2125,
                    "column_end": 57,
                    "column_start": 27,
                    "expansion": null,
                    "file_name": "src\\value\\ser.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 53,
                    "line_start": 53,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 57,
                        "highlight_start": 27,
                        "text": "                } else if let Ok(x) = i128::try_from(*x) {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpdr4r_nvg/ciborium-0.2.2#ciborium@0.2.2",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpdr4r_nvg\\ciborium-0.2.2\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "ciborium",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpdr4r_nvg\\ciborium-0.2.2\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error: variables can be used directly in the `format!` string\n  --> src\\de\\error.rs:62:9\n   |\n62 |         write!(f, \"{:?}\", self)\n   |         ^^^^^^^^^^^^^^^^^^^^^^^\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args\nnote: the lint level is defined here\n  --> src\\lib.rs:89:9\n   |\n89 | #![deny(clippy::all)]\n   |         ^^^^^^^^^^^\n   = note: `#[deny(clippy::uninlined_format_args)]` implied by `#[deny(clippy::all)]`\nhelp: change this to\n   |\n62 -         write!(f, \"{:?}\", self)\n62 +         write!(f, \"{self:?}\")\n   |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "the lint level is defined here",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 4250,
                        "byte_start": 4239,
                        "column_end": 20,
                        "column_start": 9,
                        "expansion": null,
                        "file_name": "src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 89,
                        "line_start": 89,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 20,
                            "highlight_start": 9,
                            "text": "#![deny(clippy::all)]"
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "`#[deny(clippy::uninlined_format_args)]` implied by `#[deny(clippy::all)]`",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "change this to",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 1716,
                        "byte_start": 1716,
                        "column_end": 21,
                        "column_start": 21,
                        "expansion": null,
                        "file_name": "src\\de\\error.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 62,
                        "line_start": 62,
                        "suggested_replacement": "self",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 21,
                            "highlight_start": 21,
                            "text": "        write!(f, \"{:?}\", self)"
                          }
                        ]
                      },
                      {
                        "byte_end": 1726,
                        "byte_start": 1720,
                        "column_end": 31,
                        "column_start": 25,
                        "expansion": null,
                        "file_name": "src\\de\\error.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 62,
                        "line_start": 62,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 31,
                            "highlight_start": 25,
                            "text": "        write!(f, \"{:?}\", self)"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::uninlined_format_args",
                  "explanation": null
                },
                "level": "error",
                "message": "variables can be used directly in the `format!` string",
                "spans": [
                  {
                    "byte_end": 1727,
                    "byte_start": 1704,
                    "column_end": 32,
                    "column_start": 9,
                    "expansion": null,
                    "file_name": "src\\de\\error.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 62,
                    "line_start": 62,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 32,
                        "highlight_start": 9,
                        "text": "        write!(f, \"{:?}\", self)"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpdr4r_nvg/ciborium-0.2.2#ciborium@0.2.2",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpdr4r_nvg\\ciborium-0.2.2\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "ciborium",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpdr4r_nvg\\ciborium-0.2.2\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error: variables can be used directly in the `format!` string\n  --> src\\ser\\error.rs:32:9\n   |\n32 |         write!(f, \"{:?}\", self)\n   |         ^^^^^^^^^^^^^^^^^^^^^^^\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args\nhelp: change this to\n   |\n32 -         write!(f, \"{:?}\", self)\n32 +         write!(f, \"{self:?}\")\n   |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "change this to",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 764,
                        "byte_start": 764,
                        "column_end": 21,
                        "column_start": 21,
                        "expansion": null,
                        "file_name": "src\\ser\\error.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 32,
                        "line_start": 32,
                        "suggested_replacement": "self",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 21,
                            "highlight_start": 21,
                            "text": "        write!(f, \"{:?}\", self)"
                          }
                        ]
                      },
                      {
                        "byte_end": 774,
                        "byte_start": 768,
                        "column_end": 31,
                        "column_start": 25,
                        "expansion": null,
                        "file_name": "src\\ser\\error.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 32,
                        "line_start": 32,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 31,
                            "highlight_start": 25,
                            "text": "        write!(f, \"{:?}\", self)"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::uninlined_format_args",
                  "explanation": null
                },
                "level": "error",
                "message": "variables can be used directly in the `format!` string",
                "spans": [
                  {
                    "byte_end": 775,
                    "byte_start": 752,
                    "column_end": 32,
                    "column_start": 9,
                    "expansion": null,
                    "file_name": "src\\ser\\error.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 32,
                    "line_start": 32,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 32,
                        "highlight_start": 9,
                        "text": "        write!(f, \"{:?}\", self)"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpdr4r_nvg/ciborium-0.2.2#ciborium@0.2.2",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpdr4r_nvg\\ciborium-0.2.2\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "ciborium",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpdr4r_nvg\\ciborium-0.2.2\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error: variables can be used directly in the `format!` string\n   --> src\\tag.rs:212:9\n    |\n212 |         write!(f, \"{:?}\", self)\n    |         ^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args\nhelp: change this to\n    |\n212 -         write!(f, \"{:?}\", self)\n212 +         write!(f, \"{self:?}\")\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "change this to",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 6284,
                        "byte_start": 6284,
                        "column_end": 21,
                        "column_start": 21,
                        "expansion": null,
                        "file_name": "src\\tag.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 212,
                        "line_start": 212,
                        "suggested_replacement": "self",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 21,
                            "highlight_start": 21,
                            "text": "        write!(f, \"{:?}\", self)"
                          }
                        ]
                      },
                      {
                        "byte_end": 6294,
                        "byte_start": 6288,
                        "column_end": 31,
                        "column_start": 25,
                        "expansion": null,
                        "file_name": "src\\tag.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 212,
                        "line_start": 212,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 31,
                            "highlight_start": 25,
                            "text": "        write!(f, \"{:?}\", self)"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::uninlined_format_args",
                  "explanation": null
                },
                "level": "error",
                "message": "variables can be used directly in the `format!` string",
                "spans": [
                  {
                    "byte_end": 6295,
                    "byte_start": 6272,
                    "column_end": 32,
                    "column_start": 9,
                    "expansion": null,
                    "file_name": "src\\tag.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 212,
                    "line_start": 212,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 32,
                        "highlight_start": 9,
                        "text": "        write!(f, \"{:?}\", self)"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpdr4r_nvg/ciborium-0.2.2#ciborium@0.2.2",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpdr4r_nvg\\ciborium-0.2.2\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "ciborium",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpdr4r_nvg\\ciborium-0.2.2\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error: non-canonical implementation of `partial_cmp` on an `Ord` type\n   --> src\\value\\canonical.rs:120:1\n    |\n120 | /  impl PartialOrd for CanonicalValue {\n121 | |      fn partial_cmp(&self, other: &Self) -> Option<Ordering> {\n    | | _____________________________________________________________-\n122 | ||         Some(cmp_value(&self.0, &other.0))\n123 | ||     }\n    | ||_____- help: change this to: `{ Some(self.cmp(other)) }`\n124 | |  }\n    | |__^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#non_canonical_partial_ord_impl\n    = note: `#[deny(clippy::non_canonical_partial_ord_impl)]` implied by `#[deny(clippy::all)]`\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#non_canonical_partial_ord_impl",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "`#[deny(clippy::non_canonical_partial_ord_impl)]` implied by `#[deny(clippy::all)]`",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "change this to",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 3852,
                        "byte_start": 3802,
                        "column_end": 6,
                        "column_start": 61,
                        "expansion": null,
                        "file_name": "src\\value\\canonical.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 123,
                        "line_start": 121,
                        "suggested_replacement": "{ Some(self.cmp(other)) }",
                        "suggestion_applicability": "Unspecified",
                        "text": [
                          {
                            "highlight_end": 62,
                            "highlight_start": 61,
                            "text": "    fn partial_cmp(&self, other: &Self) -> Option<Ordering> {"
                          },
                          {
                            "highlight_end": 43,
                            "highlight_start": 1,
                            "text": "        Some(cmp_value(&self.0, &other.0))"
                          },
                          {
                            "highlight_end": 6,
                            "highlight_start": 1,
                            "text": "    }"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::non_canonical_partial_ord_impl",
                  "explanation": null
                },
                "level": "error",
                "message": "non-canonical implementation of `partial_cmp` on an `Ord` type",
                "spans": [
                  {
                    "byte_end": 3854,
                    "byte_start": 3705,
                    "column_end": 2,
                    "column_start": 1,
                    "expansion": null,
                    "file_name": "src\\value\\canonical.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 124,
                    "line_start": 120,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 37,
                        "highlight_start": 1,
                        "text": "impl PartialOrd for CanonicalValue {"
                      },
                      {
                        "highlight_end": 62,
                        "highlight_start": 1,
                        "text": "    fn partial_cmp(&self, other: &Self) -> Option<Ordering> {"
                      },
                      {
                        "highlight_end": 43,
                        "highlight_start": 1,
                        "text": "        Some(cmp_value(&self.0, &other.0))"
                      },
                      {
                        "highlight_end": 6,
                        "highlight_start": 1,
                        "text": "    }"
                      },
                      {
                        "highlight_end": 2,
                        "highlight_start": 1,
                        "text": "}"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpdr4r_nvg/ciborium-0.2.2#ciborium@0.2.2",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpdr4r_nvg\\ciborium-0.2.2\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "ciborium",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpdr4r_nvg\\ciborium-0.2.2\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error: the following explicit lifetimes could be elided: 'a\n   --> src\\value\\de.rs:176:6\n    |\n176 | impl<'a> Deserializer<&'a Value> {\n    |      ^^                ^^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_lifetimes\n    = note: `#[deny(clippy::needless_lifetimes)]` implied by `#[deny(clippy::all)]`\nhelp: elide the lifetimes\n    |\n176 - impl<'a> Deserializer<&'a Value> {\n176 + impl Deserializer<&Value> {\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_lifetimes",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "`#[deny(clippy::needless_lifetimes)]` implied by `#[deny(clippy::all)]`",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "elide the lifetimes",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 4647,
                        "byte_start": 4643,
                        "column_end": 9,
                        "column_start": 5,
                        "expansion": null,
                        "file_name": "src\\value\\de.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 176,
                        "line_start": 176,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 9,
                            "highlight_start": 5,
                            "text": "impl<'a> Deserializer<&'a Value> {"
                          }
                        ]
                      },
                      {
                        "byte_end": 4665,
                        "byte_start": 4662,
                        "column_end": 27,
                        "column_start": 24,
                        "expansion": null,
                        "file_name": "src\\value\\de.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 176,
                        "line_start": 176,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 27,
                            "highlight_start": 24,
                            "text": "impl<'a> Deserializer<&'a Value> {"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::needless_lifetimes",
                  "explanation": null
                },
                "level": "error",
                "message": "the following explicit lifetimes could be elided: 'a",
                "spans": [
                  {
                    "byte_end": 4646,
                    "byte_start": 4644,
                    "column_end": 8,
                    "column_start": 6,
                    "expansion": null,
                    "file_name": "src\\value\\de.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 176,
                    "line_start": 176,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 8,
                        "highlight_start": 6,
                        "text": "impl<'a> Deserializer<&'a Value> {"
                      }
                    ]
                  },
                  {
                    "byte_end": 4664,
                    "byte_start": 4662,
                    "column_end": 26,
                    "column_start": 24,
                    "expansion": null,
                    "file_name": "src\\value\\de.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 176,
                    "line_start": 176,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 26,
                        "highlight_start": 24,
                        "text": "impl<'a> Deserializer<&'a Value> {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpdr4r_nvg/ciborium-0.2.2#ciborium@0.2.2",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpdr4r_nvg\\ciborium-0.2.2\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "ciborium",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpdr4r_nvg\\ciborium-0.2.2\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error: the following explicit lifetimes could be elided: 'a\n   --> src\\value\\de.rs:222:6\n    |\n222 | impl<'a, 'de> de::Deserializer<'de> for Deserializer<&'a Value> {\n    |      ^^                                               ^^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_lifetimes\nhelp: elide the lifetimes\n    |\n222 - impl<'a, 'de> de::Deserializer<'de> for Deserializer<&'a Value> {\n222 + impl<'de> de::Deserializer<'de> for Deserializer<&Value> {\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_lifetimes",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "elide the lifetimes",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 6280,
                        "byte_start": 6276,
                        "column_end": 10,
                        "column_start": 6,
                        "expansion": null,
                        "file_name": "src\\value\\de.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 222,
                        "line_start": 222,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 10,
                            "highlight_start": 6,
                            "text": "impl<'a, 'de> de::Deserializer<'de> for Deserializer<&'a Value> {"
                          }
                        ]
                      },
                      {
                        "byte_end": 6328,
                        "byte_start": 6325,
                        "column_end": 58,
                        "column_start": 55,
                        "expansion": null,
                        "file_name": "src\\value\\de.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 222,
                        "line_start": 222,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 58,
                            "highlight_start": 55,
                            "text": "impl<'a, 'de> de::Deserializer<'de> for Deserializer<&'a Value> {"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::needless_lifetimes",
                  "explanation": null
                },
                "level": "error",
                "message": "the following explicit lifetimes could be elided: 'a",
                "spans": [
                  {
                    "byte_end": 6278,
                    "byte_start": 6276,
                    "column_end": 8,
                    "column_start": 6,
                    "expansion": null,
                    "file_name": "src\\value\\de.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 222,
                    "line_start": 222,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 8,
                        "highlight_start": 6,
                        "text": "impl<'a, 'de> de::Deserializer<'de> for Deserializer<&'a Value> {"
                      }
                    ]
                  },
                  {
                    "byte_end": 6327,
                    "byte_start": 6325,
                    "column_end": 57,
                    "column_start": 55,
                    "expansion": null,
                    "file_name": "src\\value\\de.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 222,
                    "line_start": 222,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 57,
                        "highlight_start": 55,
                        "text": "impl<'a, 'de> de::Deserializer<'de> for Deserializer<&'a Value> {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpdr4r_nvg/ciborium-0.2.2#ciborium@0.2.2",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpdr4r_nvg\\ciborium-0.2.2\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "ciborium",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpdr4r_nvg\\ciborium-0.2.2\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error: use of a fallible conversion when an infallible one could be used\n   --> src\\value\\de.rs:246:39\n    |\n246 |                 } else if let Ok(x) = i128::try_from(*x) {\n    |                                       ^^^^^^^^^^^^^^ help: use: `From::from`\n    |\n    = note: converting `Integer` to `i128` cannot fail\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_fallible_conversions\n    = note: `#[deny(clippy::unnecessary_fallible_conversions)]` implied by `#[deny(clippy::all)]`\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "converting `Integer` to `i128` cannot fail",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_fallible_conversions",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "`#[deny(clippy::unnecessary_fallible_conversions)]` implied by `#[deny(clippy::all)]`",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "use",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 7377,
                        "byte_start": 7363,
                        "column_end": 53,
                        "column_start": 39,
                        "expansion": null,
                        "file_name": "src\\value\\de.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 246,
                        "line_start": 246,
                        "suggested_replacement": "From::from",
                        "suggestion_applicability": "Unspecified",
                        "text": [
                          {
                            "highlight_end": 53,
                            "highlight_start": 39,
                            "text": "                } else if let Ok(x) = i128::try_from(*x) {"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::unnecessary_fallible_conversions",
                  "explanation": null
                },
                "level": "error",
                "message": "use of a fallible conversion when an infallible one could be used",
                "spans": [
                  {
                    "byte_end": 7377,
                    "byte_start": 7363,
                    "column_end": 53,
                    "column_start": 39,
                    "expansion": null,
                    "file_name": "src\\value\\de.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 246,
                    "line_start": 246,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 53,
                        "highlight_start": 39,
                        "text": "                } else if let Ok(x) = i128::try_from(*x) {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpdr4r_nvg/ciborium-0.2.2#ciborium@0.2.2",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpdr4r_nvg\\ciborium-0.2.2\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "ciborium",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpdr4r_nvg\\ciborium-0.2.2\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error: the following explicit lifetimes could be elided: 'a\n   --> src\\value\\de.rs:576:6\n    |\n576 | impl<'a, 'de> de::VariantAccess<'de> for Deserializer<&'a Value> {\n    |      ^^                                                ^^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_lifetimes\nhelp: elide the lifetimes\n    |\n576 - impl<'a, 'de> de::VariantAccess<'de> for Deserializer<&'a Value> {\n576 + impl<'de> de::VariantAccess<'de> for Deserializer<&Value> {\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_lifetimes",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "elide the lifetimes",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 17257,
                        "byte_start": 17253,
                        "column_end": 10,
                        "column_start": 6,
                        "expansion": null,
                        "file_name": "src\\value\\de.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 576,
                        "line_start": 576,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 10,
                            "highlight_start": 6,
                            "text": "impl<'a, 'de> de::VariantAccess<'de> for Deserializer<&'a Value> {"
                          }
                        ]
                      },
                      {
                        "byte_end": 17306,
                        "byte_start": 17303,
                        "column_end": 59,
                        "column_start": 56,
                        "expansion": null,
                        "file_name": "src\\value\\de.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 576,
                        "line_start": 576,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 59,
                            "highlight_start": 56,
                            "text": "impl<'a, 'de> de::VariantAccess<'de> for Deserializer<&'a Value> {"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::needless_lifetimes",
                  "explanation": null
                },
                "level": "error",
                "message": "the following explicit lifetimes could be elided: 'a",
                "spans": [
                  {
                    "byte_end": 17255,
                    "byte_start": 17253,
                    "column_end": 8,
                    "column_start": 6,
                    "expansion": null,
                    "file_name": "src\\value\\de.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 576,
                    "line_start": 576,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 8,
                        "highlight_start": 6,
                        "text": "impl<'a, 'de> de::VariantAccess<'de> for Deserializer<&'a Value> {"
                      }
                    ]
                  },
                  {
                    "byte_end": 17305,
                    "byte_start": 17303,
                    "column_end": 58,
                    "column_start": 56,
                    "expansion": null,
                    "file_name": "src\\value\\de.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 576,
                    "line_start": 576,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 58,
                        "highlight_start": 56,
                        "text": "impl<'a, 'de> de::VariantAccess<'de> for Deserializer<&'a Value> {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpdr4r_nvg/ciborium-0.2.2#ciborium@0.2.2",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpdr4r_nvg\\ciborium-0.2.2\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "ciborium",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpdr4r_nvg\\ciborium-0.2.2\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error: variables can be used directly in the `format!` string\n  --> src\\value\\error.rs:14:9\n   |\n14 |         write!(f, \"{:?}\", self)\n   |         ^^^^^^^^^^^^^^^^^^^^^^^\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args\nhelp: change this to\n   |\n14 -         write!(f, \"{:?}\", self)\n14 +         write!(f, \"{self:?}\")\n   |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "change this to",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 365,
                        "byte_start": 365,
                        "column_end": 21,
                        "column_start": 21,
                        "expansion": null,
                        "file_name": "src\\value\\error.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 14,
                        "line_start": 14,
                        "suggested_replacement": "self",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 21,
                            "highlight_start": 21,
                            "text": "        write!(f, \"{:?}\", self)"
                          }
                        ]
                      },
                      {
                        "byte_end": 375,
                        "byte_start": 369,
                        "column_end": 31,
                        "column_start": 25,
                        "expansion": null,
                        "file_name": "src\\value\\error.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 14,
                        "line_start": 14,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 31,
                            "highlight_start": 25,
                            "text": "        write!(f, \"{:?}\", self)"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::uninlined_format_args",
                  "explanation": null
                },
                "level": "error",
                "message": "variables can be used directly in the `format!` string",
                "spans": [
                  {
                    "byte_end": 376,
                    "byte_start": 353,
                    "column_end": 32,
                    "column_start": 9,
                    "expansion": null,
                    "file_name": "src\\value\\error.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 14,
                    "line_start": 14,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 32,
                        "highlight_start": 9,
                        "text": "        write!(f, \"{:?}\", self)"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpdr4r_nvg/ciborium-0.2.2#ciborium@0.2.2",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpdr4r_nvg\\ciborium-0.2.2\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "ciborium",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpdr4r_nvg\\ciborium-0.2.2\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error: use of a fallible conversion when an infallible one could be used\n  --> src\\value\\ser.rs:53:39\n   |\n53 |                 } else if let Ok(x) = i128::try_from(*x) {\n   |                                       ^^^^^^^^^^^^^^ help: use: `From::from`\n   |\n   = note: converting `Integer` to `i128` cannot fail\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_fallible_conversions\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "converting `Integer` to `i128` cannot fail",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_fallible_conversions",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "use",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 2151,
                        "byte_start": 2137,
                        "column_end": 53,
                        "column_start": 39,
                        "expansion": null,
                        "file_name": "src\\value\\ser.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 53,
                        "line_start": 53,
                        "suggested_replacement": "From::from",
                        "suggestion_applicability": "Unspecified",
                        "text": [
                          {
                            "highlight_end": 53,
                            "highlight_start": 39,
                            "text": "                } else if let Ok(x) = i128::try_from(*x) {"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::unnecessary_fallible_conversions",
                  "explanation": null
                },
                "level": "error",
                "message": "use of a fallible conversion when an infallible one could be used",
                "spans": [
                  {
                    "byte_end": 2151,
                    "byte_start": 2137,
                    "column_end": 53,
                    "column_start": 39,
                    "expansion": null,
                    "file_name": "src\\value\\ser.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 53,
                    "line_start": 53,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 53,
                        "highlight_start": 39,
                        "text": "                } else if let Ok(x) = i128::try_from(*x) {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "build-finished",
              "success": false
            }
          ],
          "audit": {
            "database": {
              "advisory-count": 787,
              "last-commit": "7573f55ba337263f61167dbb0ea926cdc7c8eb5d",
              "last-updated": "2025-06-17T11:04:25+02:00"
            },
            "lockfile": {
              "dependency-count": 27
            },
            "settings": {
              "target_arch": [],
              "target_os": [],
              "severity": null,
              "ignore": [],
              "informational_warnings": [
                "unmaintained",
                "unsound",
                "notice"
              ]
            },
            "vulnerabilities": {
              "found": false,
              "count": 0,
              "list": []
            },
            "warnings": {}
          },
          "note": "Crate analysis performed with stable toolchain."
        },
        "crate_metadata": {
          "name": "ciborium",
          "version": "0.2.2",
          "description": "ALLOW: Positive community sentiment",
          "repository": "",
          "keywords": [],
          "categories": [],
          "readme": {
            "raw_markdown": "[](https://docs.rs/ciborium/latest/ciborium/all.html \"show sidebar\")\n# Crate ciboriumCopy item path\n[Settings](https://docs.rs/ciborium/latest/settings.html)\n[Help](https://docs.rs/ciborium/latest/help.html)\nSummary[Source](https://docs.rs/ciborium/latest/src/ciborium/lib.rs.html#3-224)\nExpand description\nWelcome to Ciborium!\nCiborium contains CBOR serialization and deserialization implementations for serde.\n## [\u00a7](https://docs.rs/ciborium/latest/ciborium/#quick-start)Quick Start\nYou\u2019re probably looking for [`from_reader()`](https://docs.rs/ciborium/latest/ciborium/fn.from_reader.html \"fn ciborium::from_reader\") and [`into_writer()`](https://docs.rs/ciborium/latest/ciborium/fn.into_writer.html \"fn ciborium::into_writer\"), which are the main functions. Note that byte slices are also readers and writers and can be passed to these functions just as streams can.\nFor dynamic CBOR value creation/inspection, see [`Value`](https://docs.rs/ciborium/latest/ciborium/enum.Value.html \"enum ciborium::Value\").\n## [\u00a7](https://docs.rs/ciborium/latest/ciborium/#design-decisions)Design Decisions\n### [\u00a7](https://docs.rs/ciborium/latest/ciborium/#always-serialize-numeric-values-to-the-smallest-size)Always Serialize Numeric Values to the Smallest Size\nAlthough the CBOR specification has differing numeric widths, this is only a form of compression on the wire and is not intended to directly represent an \u201cinteger width\u201d or \u201cfloat width.\u201d Therefore, ciborium always serializes numbers to the smallest possible lossless encoding. For example, we serialize `1u128` as a single byte (`01`). Likewise, we will also freely decode that single byte into a `u128`.\nWhile there is some minor performance cost for this, there are several reasons for this choice. First, the specification seems to imply it by using a separate bit for the sign. Second, the specification requires that implementations handle leading zeroes; a liberal reading of which implies a requirement for lossless coercion. Third, dynamic languages like Python have no notion of \u201cinteger width,\u201d making this is a practical choice for maximizing wire compatibility with those languages.\nThis coercion is **always** lossless. For floats, this implies that we only coerce to a smaller size if coercion back to the original size has the same raw bits as the original.\n### [\u00a7](https://docs.rs/ciborium/latest/ciborium/#compatibility-with-other-implementations)Compatibility with Other Implementations\nThe ciborium project follows the [Robustness Principle](https://en.wikipedia.org/wiki/Robustness_principle). Therefore, we aim to be liberal in what we accept. This implies that we aim to be wire-compatible with other implementations in decoding, but not necessarily encoding.\nOne notable example of this is that `serde_cbor` uses fixed-width encoding of numbers and doesn\u2019t losslessly coerce. This implies that `ciborium` will successfully decode `serde_cbor` encodings, but the opposite may not be the case.\n### [\u00a7](https://docs.rs/ciborium/latest/ciborium/#representing-map-as-a-sequence-of-values)Representing Map as a Sequence of Values\nOther serde parsers have generally taken the route of using `BTreeMap` or `HashMap` to implement their encoding\u2019s underlying `Map` type. This crate chooses to represent the `Map` type using `Vec<(Value, Value)>` instead.\nThis decision was made because this type preserves the order of the pairs on the wire. Further, for those that need the properties of `BTreeMap` or `HashMap`, you can simply `collect()` the values into the respective type. This provides maximum flexibility.\n### [\u00a7](https://docs.rs/ciborium/latest/ciborium/#low-level-library)Low-level Library\nThe ciborium crate has the beginnings of a low-level library in the (private) `basic` module. We may extend this to be more robust and expose it for application consumption once we have it in a good state. If you\u2019d like to collaborate with us on that, please contact us. Alternatively, we might fork this code into a separate crate with no serde dependency.\n### [\u00a7](https://docs.rs/ciborium/latest/ciborium/#internal-types)Internal Types\nThe ciborium crate contains a number of internal types that implement useful serde traits. While these are not currently exposed, we might choose to expose them in the future if there is demand. Generally, this crate takes a conservative approach to exposing APIs to avoid breakage.\n### [\u00a7](https://docs.rs/ciborium/latest/ciborium/#packed-encoding)Packed Encoding?\nPacked encoding uses numerical offsets to represent structure field names and enum variant names. This can save significant space on the wire.\nWhile the authors of this crate like packed encoding, it should generally be avoided because it can be fragile as it exposes invariants of your Rust code to remote actors. We might consider adding this in the future. If you are interested in this, please contact us.\n## Modules[\u00a7](https://docs.rs/ciborium/latest/ciborium/#modules)\n\n[de](https://docs.rs/ciborium/latest/ciborium/de/index.html \"mod ciborium::de\")\n    Serde deserialization support for CBOR\n\n[ser](https://docs.rs/ciborium/latest/ciborium/ser/index.html \"mod ciborium::ser\")\n    Serde serialization support for CBOR\n\n[tag](https://docs.rs/ciborium/latest/ciborium/tag/index.html \"mod ciborium::tag\")\n    Contains helper types for dealing with CBOR tags\n\n[value](https://docs.rs/ciborium/latest/ciborium/value/index.html \"mod ciborium::value\")\n    A dynamic CBOR value\n## Macros[\u00a7](https://docs.rs/ciborium/latest/ciborium/#macros)\n\n[cbor](https://docs.rs/ciborium/latest/ciborium/macro.cbor.html \"macro ciborium::cbor\")\n    Build a `Value` conveniently.\n## Enums[\u00a7](https://docs.rs/ciborium/latest/ciborium/#enums)\n\n[Value](https://docs.rs/ciborium/latest/ciborium/enum.Value.html \"enum ciborium::Value\")\n    A representation of a dynamic CBOR value that can handled dynamically\n## Functions[\u00a7](https://docs.rs/ciborium/latest/ciborium/#functions)\n\n[from_reader](https://docs.rs/ciborium/latest/ciborium/fn.from_reader.html \"fn ciborium::from_reader\")\n    Deserializes as CBOR from a type with [`impl ciborium_io::Read`](https://docs.rs/ciborium-io/0.2.2/x86_64-unknown-linux-gnu/ciborium_io/trait.Read.html \"trait ciborium_io::Read\") using a 4KB buffer on the stack.\n\n[from_reader_with_buffer](https://docs.rs/ciborium/latest/ciborium/fn.from_reader_with_buffer.html \"fn ciborium::from_reader_with_buffer\")\n    Deserializes as CBOR from a type with [`impl ciborium_io::Read`](https://docs.rs/ciborium-io/0.2.2/x86_64-unknown-linux-gnu/ciborium_io/trait.Read.html \"trait ciborium_io::Read\"), using a caller-specific buffer as a temporary scratch space.\n\n[into_writer](https://docs.rs/ciborium/latest/ciborium/fn.into_writer.html \"fn ciborium::into_writer\")\n    Serializes as CBOR into a type with [`impl ciborium_io::Write`](https://docs.rs/ciborium-io/0.2.2/x86_64-unknown-linux-gnu/ciborium_io/trait.Write.html \"trait ciborium_io::Write\")\n",
            "markdown_with_citations": "[](https://docs.rs/ciborium/latest/ciborium/all.html \"show sidebar\")\n# Crate ciboriumCopy item path\nSettings\u27e81\u27e9\nHelp\u27e82\u27e9\nSummarySource\u27e83\u27e9\nExpand description\nWelcome to Ciborium!\nCiborium contains CBOR serialization and deserialization implementations for serde.\n## \u00a7\u27e84\u27e9Quick Start\nYou\u2019re probably looking for `from_reader()`\u27e85\u27e9 and `into_writer()`\u27e86\u27e9, which are the main functions. Note that byte slices are also readers and writers and can be passed to these functions just as streams can.\nFor dynamic CBOR value creation/inspection, see `Value`\u27e87\u27e9.\n## \u00a7\u27e88\u27e9Design Decisions\n### \u00a7\u27e89\u27e9Always Serialize Numeric Values to the Smallest Size\nAlthough the CBOR specification has differing numeric widths, this is only a form of compression on the wire and is not intended to directly represent an \u201cinteger width\u201d or \u201cfloat width.\u201d Therefore, ciborium always serializes numbers to the smallest possible lossless encoding. For example, we serialize `1u128` as a single byte (`01`). Likewise, we will also freely decode that single byte into a `u128`.\nWhile there is some minor performance cost for this, there are several reasons for this choice. First, the specification seems to imply it by using a separate bit for the sign. Second, the specification requires that implementations handle leading zeroes; a liberal reading of which implies a requirement for lossless coercion. Third, dynamic languages like Python have no notion of \u201cinteger width,\u201d making this is a practical choice for maximizing wire compatibility with those languages.\nThis coercion is **always** lossless. For floats, this implies that we only coerce to a smaller size if coercion back to the original size has the same raw bits as the original.\n### \u00a7\u27e810\u27e9Compatibility with Other Implementations\nThe ciborium project follows the Robustness Principle\u27e811\u27e9. Therefore, we aim to be liberal in what we accept. This implies that we aim to be wire-compatible with other implementations in decoding, but not necessarily encoding.\nOne notable example of this is that `serde_cbor` uses fixed-width encoding of numbers and doesn\u2019t losslessly coerce. This implies that `ciborium` will successfully decode `serde_cbor` encodings, but the opposite may not be the case.\n### \u00a7\u27e812\u27e9Representing Map as a Sequence of Values\nOther serde parsers have generally taken the route of using `BTreeMap` or `HashMap` to implement their encoding\u2019s underlying `Map` type. This crate chooses to represent the `Map` type using `Vec<(Value, Value)>` instead.\nThis decision was made because this type preserves the order of the pairs on the wire. Further, for those that need the properties of `BTreeMap` or `HashMap`, you can simply `collect()` the values into the respective type. This provides maximum flexibility.\n### \u00a7\u27e813\u27e9Low-level Library\nThe ciborium crate has the beginnings of a low-level library in the (private) `basic` module. We may extend this to be more robust and expose it for application consumption once we have it in a good state. If you\u2019d like to collaborate with us on that, please contact us. Alternatively, we might fork this code into a separate crate with no serde dependency.\n### \u00a7\u27e814\u27e9Internal Types\nThe ciborium crate contains a number of internal types that implement useful serde traits. While these are not currently exposed, we might choose to expose them in the future if there is demand. Generally, this crate takes a conservative approach to exposing APIs to avoid breakage.\n### \u00a7\u27e815\u27e9Packed Encoding?\nPacked encoding uses numerical offsets to represent structure field names and enum variant names. This can save significant space on the wire.\nWhile the authors of this crate like packed encoding, it should generally be avoided because it can be fragile as it exposes invariants of your Rust code to remote actors. We might consider adding this in the future. If you are interested in this, please contact us.\n## Modules\u00a7\u27e816\u27e9\n\nde\u27e817\u27e9\n    Serde deserialization support for CBOR\n\nser\u27e818\u27e9\n    Serde serialization support for CBOR\n\ntag\u27e819\u27e9\n    Contains helper types for dealing with CBOR tags\n\nvalue\u27e820\u27e9\n    A dynamic CBOR value\n## Macros\u00a7\u27e821\u27e9\n\ncbor\u27e822\u27e9\n    Build a `Value` conveniently.\n## Enums\u00a7\u27e823\u27e9\n\nValue\u27e87\u27e9\n    A representation of a dynamic CBOR value that can handled dynamically\n## Functions\u00a7\u27e824\u27e9\n\nfrom_reader\u27e85\u27e9\n    Deserializes as CBOR from a type with `impl ciborium_io::Read`\u27e825\u27e9 using a 4KB buffer on the stack.\n\nfrom_reader_with_buffer\u27e826\u27e9\n    Deserializes as CBOR from a type with `impl ciborium_io::Read`\u27e825\u27e9, using a caller-specific buffer as a temporary scratch space.\n\ninto_writer\u27e86\u27e9\n    Serializes as CBOR into a type with `impl ciborium_io::Write`\u27e827\u27e9\n",
            "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://docs.rs/ciborium/latest/settings.html: Settings\n\u27e82\u27e9 https://docs.rs/ciborium/latest/help.html: Help\n\u27e83\u27e9 https://docs.rs/ciborium/latest/src/ciborium/lib.rs.html#3-224: Source\n\u27e84\u27e9 https://docs.rs/ciborium/latest/ciborium/#quick-start: \u00a7\n\u27e85\u27e9 https://docs.rs/ciborium/latest/ciborium/fn.from_reader.html: fn ciborium::from_reader - `from_reader()`\n\u27e86\u27e9 https://docs.rs/ciborium/latest/ciborium/fn.into_writer.html: fn ciborium::into_writer - `into_writer()`\n\u27e87\u27e9 https://docs.rs/ciborium/latest/ciborium/enum.Value.html: enum ciborium::Value - `Value`\n\u27e88\u27e9 https://docs.rs/ciborium/latest/ciborium/#design-decisions: \u00a7\n\u27e89\u27e9 https://docs.rs/ciborium/latest/ciborium/#always-serialize-numeric-values-to-the-smallest-size: \u00a7\n\u27e810\u27e9 https://docs.rs/ciborium/latest/ciborium/#compatibility-with-other-implementations: \u00a7\n\u27e811\u27e9 https://en.wikipedia.org/wiki/Robustness_principle: Robustness Principle\n\u27e812\u27e9 https://docs.rs/ciborium/latest/ciborium/#representing-map-as-a-sequence-of-values: \u00a7\n\u27e813\u27e9 https://docs.rs/ciborium/latest/ciborium/#low-level-library: \u00a7\n\u27e814\u27e9 https://docs.rs/ciborium/latest/ciborium/#internal-types: \u00a7\n\u27e815\u27e9 https://docs.rs/ciborium/latest/ciborium/#packed-encoding: \u00a7\n\u27e816\u27e9 https://docs.rs/ciborium/latest/ciborium/#modules: \u00a7\n\u27e817\u27e9 https://docs.rs/ciborium/latest/ciborium/de/index.html: mod ciborium::de - de\n\u27e818\u27e9 https://docs.rs/ciborium/latest/ciborium/ser/index.html: mod ciborium::ser - ser\n\u27e819\u27e9 https://docs.rs/ciborium/latest/ciborium/tag/index.html: mod ciborium::tag - tag\n\u27e820\u27e9 https://docs.rs/ciborium/latest/ciborium/value/index.html: mod ciborium::value - value\n\u27e821\u27e9 https://docs.rs/ciborium/latest/ciborium/#macros: \u00a7\n\u27e822\u27e9 https://docs.rs/ciborium/latest/ciborium/macro.cbor.html: macro ciborium::cbor - cbor\n\u27e823\u27e9 https://docs.rs/ciborium/latest/ciborium/#enums: \u00a7\n\u27e824\u27e9 https://docs.rs/ciborium/latest/ciborium/#functions: \u00a7\n\u27e825\u27e9 https://docs.rs/ciborium-io/0.2.2/x86_64-unknown-linux-gnu/ciborium_io/trait.Read.html: trait ciborium_io::Read - `impl ciborium_io::Read`\n\u27e826\u27e9 https://docs.rs/ciborium/latest/ciborium/fn.from_reader_with_buffer.html: fn ciborium::from_reader_with_buffer - from_reader_with_buffer\n\u27e827\u27e9 https://docs.rs/ciborium-io/0.2.2/x86_64-unknown-linux-gnu/ciborium_io/trait.Write.html: trait ciborium_io::Write - `impl ciborium_io::Write`\n",
            "fit_markdown": "",
            "fit_html": ""
          },
          "downloads": 0,
          "github_stars": 0,
          "dependencies": [],
          "features": {},
          "code_snippets": [],
          "readme_sections": {},
          "librs_downloads": null,
          "source": "crates.io",
          "enhanced_scraping": {},
          "enhanced_features": [],
          "enhanced_dependencies": []
        },
        "enriched_crate": {
          "name": "ciborium",
          "version": "0.2.2",
          "description": "ALLOW: Positive community sentiment",
          "repository": "",
          "keywords": [],
          "categories": [],
          "readme": {
            "raw_markdown": "[](https://docs.rs/ciborium/latest/ciborium/all.html \"show sidebar\")\n# Crate ciboriumCopy item path\n[Settings](https://docs.rs/ciborium/latest/settings.html)\n[Help](https://docs.rs/ciborium/latest/help.html)\nSummary[Source](https://docs.rs/ciborium/latest/src/ciborium/lib.rs.html#3-224)\nExpand description\nWelcome to Ciborium!\nCiborium contains CBOR serialization and deserialization implementations for serde.\n## [\u00a7](https://docs.rs/ciborium/latest/ciborium/#quick-start)Quick Start\nYou\u2019re probably looking for [`from_reader()`](https://docs.rs/ciborium/latest/ciborium/fn.from_reader.html \"fn ciborium::from_reader\") and [`into_writer()`](https://docs.rs/ciborium/latest/ciborium/fn.into_writer.html \"fn ciborium::into_writer\"), which are the main functions. Note that byte slices are also readers and writers and can be passed to these functions just as streams can.\nFor dynamic CBOR value creation/inspection, see [`Value`](https://docs.rs/ciborium/latest/ciborium/enum.Value.html \"enum ciborium::Value\").\n## [\u00a7](https://docs.rs/ciborium/latest/ciborium/#design-decisions)Design Decisions\n### [\u00a7](https://docs.rs/ciborium/latest/ciborium/#always-serialize-numeric-values-to-the-smallest-size)Always Serialize Numeric Values to the Smallest Size\nAlthough the CBOR specification has differing numeric widths, this is only a form of compression on the wire and is not intended to directly represent an \u201cinteger width\u201d or \u201cfloat width.\u201d Therefore, ciborium always serializes numbers to the smallest possible lossless encoding. For example, we serialize `1u128` as a single byte (`01`). Likewise, we will also freely decode that single byte into a `u128`.\nWhile there is some minor performance cost for this, there are several reasons for this choice. First, the specification seems to imply it by using a separate bit for the sign. Second, the specification requires that implementations handle leading zeroes; a liberal reading of which implies a requirement for lossless coercion. Third, dynamic languages like Python have no notion of \u201cinteger width,\u201d making this is a practical choice for maximizing wire compatibility with those languages.\nThis coercion is **always** lossless. For floats, this implies that we only coerce to a smaller size if coercion back to the original size has the same raw bits as the original.\n### [\u00a7](https://docs.rs/ciborium/latest/ciborium/#compatibility-with-other-implementations)Compatibility with Other Implementations\nThe ciborium project follows the [Robustness Principle](https://en.wikipedia.org/wiki/Robustness_principle). Therefore, we aim to be liberal in what we accept. This implies that we aim to be wire-compatible with other implementations in decoding, but not necessarily encoding.\nOne notable example of this is that `serde_cbor` uses fixed-width encoding of numbers and doesn\u2019t losslessly coerce. This implies that `ciborium` will successfully decode `serde_cbor` encodings, but the opposite may not be the case.\n### [\u00a7](https://docs.rs/ciborium/latest/ciborium/#representing-map-as-a-sequence-of-values)Representing Map as a Sequence of Values\nOther serde parsers have generally taken the route of using `BTreeMap` or `HashMap` to implement their encoding\u2019s underlying `Map` type. This crate chooses to represent the `Map` type using `Vec<(Value, Value)>` instead.\nThis decision was made because this type preserves the order of the pairs on the wire. Further, for those that need the properties of `BTreeMap` or `HashMap`, you can simply `collect()` the values into the respective type. This provides maximum flexibility.\n### [\u00a7](https://docs.rs/ciborium/latest/ciborium/#low-level-library)Low-level Library\nThe ciborium crate has the beginnings of a low-level library in the (private) `basic` module. We may extend this to be more robust and expose it for application consumption once we have it in a good state. If you\u2019d like to collaborate with us on that, please contact us. Alternatively, we might fork this code into a separate crate with no serde dependency.\n### [\u00a7](https://docs.rs/ciborium/latest/ciborium/#internal-types)Internal Types\nThe ciborium crate contains a number of internal types that implement useful serde traits. While these are not currently exposed, we might choose to expose them in the future if there is demand. Generally, this crate takes a conservative approach to exposing APIs to avoid breakage.\n### [\u00a7](https://docs.rs/ciborium/latest/ciborium/#packed-encoding)Packed Encoding?\nPacked encoding uses numerical offsets to represent structure field names and enum variant names. This can save significant space on the wire.\nWhile the authors of this crate like packed encoding, it should generally be avoided because it can be fragile as it exposes invariants of your Rust code to remote actors. We might consider adding this in the future. If you are interested in this, please contact us.\n## Modules[\u00a7](https://docs.rs/ciborium/latest/ciborium/#modules)\n\n[de](https://docs.rs/ciborium/latest/ciborium/de/index.html \"mod ciborium::de\")\n    Serde deserialization support for CBOR\n\n[ser](https://docs.rs/ciborium/latest/ciborium/ser/index.html \"mod ciborium::ser\")\n    Serde serialization support for CBOR\n\n[tag](https://docs.rs/ciborium/latest/ciborium/tag/index.html \"mod ciborium::tag\")\n    Contains helper types for dealing with CBOR tags\n\n[value](https://docs.rs/ciborium/latest/ciborium/value/index.html \"mod ciborium::value\")\n    A dynamic CBOR value\n## Macros[\u00a7](https://docs.rs/ciborium/latest/ciborium/#macros)\n\n[cbor](https://docs.rs/ciborium/latest/ciborium/macro.cbor.html \"macro ciborium::cbor\")\n    Build a `Value` conveniently.\n## Enums[\u00a7](https://docs.rs/ciborium/latest/ciborium/#enums)\n\n[Value](https://docs.rs/ciborium/latest/ciborium/enum.Value.html \"enum ciborium::Value\")\n    A representation of a dynamic CBOR value that can handled dynamically\n## Functions[\u00a7](https://docs.rs/ciborium/latest/ciborium/#functions)\n\n[from_reader](https://docs.rs/ciborium/latest/ciborium/fn.from_reader.html \"fn ciborium::from_reader\")\n    Deserializes as CBOR from a type with [`impl ciborium_io::Read`](https://docs.rs/ciborium-io/0.2.2/x86_64-unknown-linux-gnu/ciborium_io/trait.Read.html \"trait ciborium_io::Read\") using a 4KB buffer on the stack.\n\n[from_reader_with_buffer](https://docs.rs/ciborium/latest/ciborium/fn.from_reader_with_buffer.html \"fn ciborium::from_reader_with_buffer\")\n    Deserializes as CBOR from a type with [`impl ciborium_io::Read`](https://docs.rs/ciborium-io/0.2.2/x86_64-unknown-linux-gnu/ciborium_io/trait.Read.html \"trait ciborium_io::Read\"), using a caller-specific buffer as a temporary scratch space.\n\n[into_writer](https://docs.rs/ciborium/latest/ciborium/fn.into_writer.html \"fn ciborium::into_writer\")\n    Serializes as CBOR into a type with [`impl ciborium_io::Write`](https://docs.rs/ciborium-io/0.2.2/x86_64-unknown-linux-gnu/ciborium_io/trait.Write.html \"trait ciborium_io::Write\")\n",
            "markdown_with_citations": "[](https://docs.rs/ciborium/latest/ciborium/all.html \"show sidebar\")\n# Crate ciboriumCopy item path\nSettings\u27e81\u27e9\nHelp\u27e82\u27e9\nSummarySource\u27e83\u27e9\nExpand description\nWelcome to Ciborium!\nCiborium contains CBOR serialization and deserialization implementations for serde.\n## \u00a7\u27e84\u27e9Quick Start\nYou\u2019re probably looking for `from_reader()`\u27e85\u27e9 and `into_writer()`\u27e86\u27e9, which are the main functions. Note that byte slices are also readers and writers and can be passed to these functions just as streams can.\nFor dynamic CBOR value creation/inspection, see `Value`\u27e87\u27e9.\n## \u00a7\u27e88\u27e9Design Decisions\n### \u00a7\u27e89\u27e9Always Serialize Numeric Values to the Smallest Size\nAlthough the CBOR specification has differing numeric widths, this is only a form of compression on the wire and is not intended to directly represent an \u201cinteger width\u201d or \u201cfloat width.\u201d Therefore, ciborium always serializes numbers to the smallest possible lossless encoding. For example, we serialize `1u128` as a single byte (`01`). Likewise, we will also freely decode that single byte into a `u128`.\nWhile there is some minor performance cost for this, there are several reasons for this choice. First, the specification seems to imply it by using a separate bit for the sign. Second, the specification requires that implementations handle leading zeroes; a liberal reading of which implies a requirement for lossless coercion. Third, dynamic languages like Python have no notion of \u201cinteger width,\u201d making this is a practical choice for maximizing wire compatibility with those languages.\nThis coercion is **always** lossless. For floats, this implies that we only coerce to a smaller size if coercion back to the original size has the same raw bits as the original.\n### \u00a7\u27e810\u27e9Compatibility with Other Implementations\nThe ciborium project follows the Robustness Principle\u27e811\u27e9. Therefore, we aim to be liberal in what we accept. This implies that we aim to be wire-compatible with other implementations in decoding, but not necessarily encoding.\nOne notable example of this is that `serde_cbor` uses fixed-width encoding of numbers and doesn\u2019t losslessly coerce. This implies that `ciborium` will successfully decode `serde_cbor` encodings, but the opposite may not be the case.\n### \u00a7\u27e812\u27e9Representing Map as a Sequence of Values\nOther serde parsers have generally taken the route of using `BTreeMap` or `HashMap` to implement their encoding\u2019s underlying `Map` type. This crate chooses to represent the `Map` type using `Vec<(Value, Value)>` instead.\nThis decision was made because this type preserves the order of the pairs on the wire. Further, for those that need the properties of `BTreeMap` or `HashMap`, you can simply `collect()` the values into the respective type. This provides maximum flexibility.\n### \u00a7\u27e813\u27e9Low-level Library\nThe ciborium crate has the beginnings of a low-level library in the (private) `basic` module. We may extend this to be more robust and expose it for application consumption once we have it in a good state. If you\u2019d like to collaborate with us on that, please contact us. Alternatively, we might fork this code into a separate crate with no serde dependency.\n### \u00a7\u27e814\u27e9Internal Types\nThe ciborium crate contains a number of internal types that implement useful serde traits. While these are not currently exposed, we might choose to expose them in the future if there is demand. Generally, this crate takes a conservative approach to exposing APIs to avoid breakage.\n### \u00a7\u27e815\u27e9Packed Encoding?\nPacked encoding uses numerical offsets to represent structure field names and enum variant names. This can save significant space on the wire.\nWhile the authors of this crate like packed encoding, it should generally be avoided because it can be fragile as it exposes invariants of your Rust code to remote actors. We might consider adding this in the future. If you are interested in this, please contact us.\n## Modules\u00a7\u27e816\u27e9\n\nde\u27e817\u27e9\n    Serde deserialization support for CBOR\n\nser\u27e818\u27e9\n    Serde serialization support for CBOR\n\ntag\u27e819\u27e9\n    Contains helper types for dealing with CBOR tags\n\nvalue\u27e820\u27e9\n    A dynamic CBOR value\n## Macros\u00a7\u27e821\u27e9\n\ncbor\u27e822\u27e9\n    Build a `Value` conveniently.\n## Enums\u00a7\u27e823\u27e9\n\nValue\u27e87\u27e9\n    A representation of a dynamic CBOR value that can handled dynamically\n## Functions\u00a7\u27e824\u27e9\n\nfrom_reader\u27e85\u27e9\n    Deserializes as CBOR from a type with `impl ciborium_io::Read`\u27e825\u27e9 using a 4KB buffer on the stack.\n\nfrom_reader_with_buffer\u27e826\u27e9\n    Deserializes as CBOR from a type with `impl ciborium_io::Read`\u27e825\u27e9, using a caller-specific buffer as a temporary scratch space.\n\ninto_writer\u27e86\u27e9\n    Serializes as CBOR into a type with `impl ciborium_io::Write`\u27e827\u27e9\n",
            "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://docs.rs/ciborium/latest/settings.html: Settings\n\u27e82\u27e9 https://docs.rs/ciborium/latest/help.html: Help\n\u27e83\u27e9 https://docs.rs/ciborium/latest/src/ciborium/lib.rs.html#3-224: Source\n\u27e84\u27e9 https://docs.rs/ciborium/latest/ciborium/#quick-start: \u00a7\n\u27e85\u27e9 https://docs.rs/ciborium/latest/ciborium/fn.from_reader.html: fn ciborium::from_reader - `from_reader()`\n\u27e86\u27e9 https://docs.rs/ciborium/latest/ciborium/fn.into_writer.html: fn ciborium::into_writer - `into_writer()`\n\u27e87\u27e9 https://docs.rs/ciborium/latest/ciborium/enum.Value.html: enum ciborium::Value - `Value`\n\u27e88\u27e9 https://docs.rs/ciborium/latest/ciborium/#design-decisions: \u00a7\n\u27e89\u27e9 https://docs.rs/ciborium/latest/ciborium/#always-serialize-numeric-values-to-the-smallest-size: \u00a7\n\u27e810\u27e9 https://docs.rs/ciborium/latest/ciborium/#compatibility-with-other-implementations: \u00a7\n\u27e811\u27e9 https://en.wikipedia.org/wiki/Robustness_principle: Robustness Principle\n\u27e812\u27e9 https://docs.rs/ciborium/latest/ciborium/#representing-map-as-a-sequence-of-values: \u00a7\n\u27e813\u27e9 https://docs.rs/ciborium/latest/ciborium/#low-level-library: \u00a7\n\u27e814\u27e9 https://docs.rs/ciborium/latest/ciborium/#internal-types: \u00a7\n\u27e815\u27e9 https://docs.rs/ciborium/latest/ciborium/#packed-encoding: \u00a7\n\u27e816\u27e9 https://docs.rs/ciborium/latest/ciborium/#modules: \u00a7\n\u27e817\u27e9 https://docs.rs/ciborium/latest/ciborium/de/index.html: mod ciborium::de - de\n\u27e818\u27e9 https://docs.rs/ciborium/latest/ciborium/ser/index.html: mod ciborium::ser - ser\n\u27e819\u27e9 https://docs.rs/ciborium/latest/ciborium/tag/index.html: mod ciborium::tag - tag\n\u27e820\u27e9 https://docs.rs/ciborium/latest/ciborium/value/index.html: mod ciborium::value - value\n\u27e821\u27e9 https://docs.rs/ciborium/latest/ciborium/#macros: \u00a7\n\u27e822\u27e9 https://docs.rs/ciborium/latest/ciborium/macro.cbor.html: macro ciborium::cbor - cbor\n\u27e823\u27e9 https://docs.rs/ciborium/latest/ciborium/#enums: \u00a7\n\u27e824\u27e9 https://docs.rs/ciborium/latest/ciborium/#functions: \u00a7\n\u27e825\u27e9 https://docs.rs/ciborium-io/0.2.2/x86_64-unknown-linux-gnu/ciborium_io/trait.Read.html: trait ciborium_io::Read - `impl ciborium_io::Read`\n\u27e826\u27e9 https://docs.rs/ciborium/latest/ciborium/fn.from_reader_with_buffer.html: fn ciborium::from_reader_with_buffer - from_reader_with_buffer\n\u27e827\u27e9 https://docs.rs/ciborium-io/0.2.2/x86_64-unknown-linux-gnu/ciborium_io/trait.Write.html: trait ciborium_io::Write - `impl ciborium_io::Write`\n",
            "fit_markdown": "",
            "fit_html": ""
          },
          "downloads": 0,
          "github_stars": 0,
          "dependencies": [],
          "features": {},
          "code_snippets": [],
          "readme_sections": {},
          "librs_downloads": null,
          "source": "crates.io",
          "enhanced_scraping": {},
          "enhanced_features": [],
          "enhanced_dependencies": [],
          "readme_summary": "The `ciborium` crate provides efficient CBOR serialization and deserialization support for Serde, with key functions like `from_reader` and `into_writer` for handling streams and byte slices. It prioritizes compact encoding by serializing numeric values to their smallest lossless size and represents CBOR maps as ordered `Vec<(Value, Value)>` for flexibility. Additionally, it offers dynamic CBOR value handling via the `Value` enum and includes helper modules for tags and packed encoding considerations.",
          "feature_summary": null,
          "use_case": "Serialization",
          "score": 6.0,
          "factual_counterfactual": "### Pair 1: Serialization and Numeric Encoding  \n\u2705 **Factual:** Ciborium always serializes numeric values to their smallest possible lossless encoding, such as serializing `1u128` as a single byte (`01`).  \n\u274c **Counterfactual:** Ciborium uses fixed-width encoding for numeric values, similar to `serde_cbor`, ensuring all integers are serialized with consistent byte lengths.  \n\n---\n\n### Pair 2: Compatibility with Other CBOR Implementations  \n\u2705 **Factual:** Ciborium is liberal in decoding and aims to be wire-compatible with other CBOR implementations, even decoding fixed-width encodings from `serde_cbor`.  \n\u274c **Counterfactual:** Ciborium enforces strict encoding rules, making its serialized output incompatible with other CBOR libraries like `serde_cbor`.  \n\n---\n\n### Pair 3: Map Representation  \n\u2705 **Factual:** Ciborium represents CBOR maps as a `Vec<(Value, Value)>`, preserving the order of key-value pairs on the wire.  \n\u274c **Counterfactual:** Ciborium represents CBOR maps as `HashMap` by default, sacrificing the order of key-value pairs for faster access times.",
          "source_analysis": null,
          "user_behavior": null,
          "security": null
        }
      },
      "irl_score": 8.6,
      "execution_id": "exec-9754cc18-ec886ce3-1751259092",
      "timestamp": "2025-06-30T04:51:32.808153+00:00",
      "canon_version": "1.3.0"
    },
    "rule_zero_compliant": true
  }
]