[
  {
    "execution_id": "exec-bdeefef7-793a23fd-1751263499",
    "timestamp": "2025-06-30T06:04:59.334099+00:00",
    "sacred_chain": {
      "input_data": "rdkafka",
      "context_sources": [
        "crates.io",
        "github.com",
        "lib.rs",
        "docs.rs"
      ],
      "reasoning_steps": [
        "Input canonicalized: 'rdkafka' -> 'rdkafka'",
        "Context gathered from 4 validated sources",
        "Metadata extracted: 4 fields",
        "Documentation analyzed: quality 7.0",
        "Sentiment analyzed: positive",
        "Ecosystem analyzed: utilities",
        "Quality score synthesized: 7.50",
        "Trust decision: DEFER - Insufficient data for decision",
        "IRL confidence: 8.600"
      ],
      "suggestion": "ALLOW: Positive community sentiment",
      "verdict": "DEFER",
      "audit_info": {
        "metadata": {
          "name": "rdkafka",
          "type": "rust_crate",
          "source": "manual_input",
          "extraction_method": "irl_engine"
        },
        "sentiment": {
          "quality_score": 7.0,
          "completeness": 0.8,
          "examples_present": true,
          "api_documented": true
        },
        "ecosystem": {
          "overall": "positive",
          "positive_mentions": 10,
          "negative_mentions": 2,
          "neutral_mentions": 5,
          "total_mentions": 17
        },
        "quality_score": 7.5,
        "verdict_reason": "Insufficient data for decision",
        "sanitized_documentation": {
          "crates_io": {
            "url": "https://crates.io/crates/rdkafka",
            "title": "rdkafka v0.37.0",
            "content": {
              "raw_markdown": "#  rdkafka v0.37.0\nRust wrapper for librdkafka \n  * [ #kafka ](https://crates.io/keywords/kafka)\n  * [ #rdkafka ](https://crates.io/keywords/rdkafka)\n\n\n  * [ Readme ](https://crates.io/crates/rdkafka)\n  * [ 50 Versions ](https://crates.io/crates/rdkafka/versions)\n  * [ Dependencies ](https://crates.io/crates/rdkafka/dependencies)\n  * [ Dependents ](https://crates.io/crates/rdkafka/reverse_dependencies)\n\n\n## Metadata\n7 months ago \nv1.70.0 \n[ MIT ](https://choosealicense.com/licenses/mit)\n129 KiB \n## Install\nRun the following Cargo command in your project directory:\ncargo add rdkafka\nOr add the following line to your Cargo.toml:\nrdkafka = \"0.37.0\"\n## Repository\n[ github.com/fede1024/rust-rdkafka ](https://github.com/fede1024/rust-rdkafka)\n## Owners\n## Categories\n  * [API bindings](https://crates.io/categories/api-bindings)\n\n\n[ Report crate ](https://crates.io/support?crate=rdkafka&inquire=crate-violation)\n### Stats Overview\n16,527,141 Downloads all time\n50 Versions published\n#### Downloads over the last 90 days\nDisplay as \nStacked \n  * Stacked \n  * Unstacked \n\n\nLoading\u2026\n",
              "markdown_with_citations": "#  rdkafka v0.37.0\nRust wrapper for librdkafka \n  *  #kafka \u27e81\u27e9\n  *  #rdkafka \u27e82\u27e9\n\n\n  *  Readme \u27e83\u27e9\n  *  50 Versions \u27e84\u27e9\n  *  Dependencies \u27e85\u27e9\n  *  Dependents \u27e86\u27e9\n\n\n## Metadata\n7 months ago \nv1.70.0 \n MIT \u27e87\u27e9\n129 KiB \n## Install\nRun the following Cargo command in your project directory:\ncargo add rdkafka\nOr add the following line to your Cargo.toml:\nrdkafka = \"0.37.0\"\n## Repository\n github.com/fede1024/rust-rdkafka \u27e88\u27e9\n## Owners\n## Categories\n  * API bindings\u27e89\u27e9\n\n\n Report crate \u27e810\u27e9\n### Stats Overview\n16,527,141 Downloads all time\n50 Versions published\n#### Downloads over the last 90 days\nDisplay as \nStacked \n  * Stacked \n  * Unstacked \n\n\nLoading\u2026\n",
              "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://crates.io/keywords/kafka:  #kafka \n\u27e82\u27e9 https://crates.io/keywords/rdkafka:  #rdkafka \n\u27e83\u27e9 https://crates.io/crates/rdkafka:  Readme \n\u27e84\u27e9 https://crates.io/crates/rdkafka/versions:  50 Versions \n\u27e85\u27e9 https://crates.io/crates/rdkafka/dependencies:  Dependencies \n\u27e86\u27e9 https://crates.io/crates/rdkafka/reverse_dependencies:  Dependents \n\u27e87\u27e9 https://choosealicense.com/licenses/mit:  MIT \n\u27e88\u27e9 https://github.com/fede1024/rust-rdkafka:  github.com/fede1024/rust-rdkafka \n\u27e89\u27e9 https://crates.io/categories/api-bindings: API bindings\n\u27e810\u27e9 https://crates.io/support?crate=rdkafka&inquire=crate-violation:  Report crate \n",
              "fit_markdown": "",
              "fit_html": ""
            },
            "structured_data": {},
            "quality_score": 3.0,
            "extraction_method": "crawl4ai",
            "error": null,
            "metadata": {
              "doc_type": "docs",
              "content_length": 1085,
              "has_structured_data": false,
              "crawl_success": true
            },
            "timestamp": "117288.9023134"
          },
          "docs_rs": {
            "url": "https://docs.rs/rdkafka",
            "title": "Crate rdkafkaCopy item path",
            "content": {
              "raw_markdown": "[](https://docs.rs/rdkafka/latest/rdkafka/all.html \"show sidebar\")\n# Crate rdkafkaCopy item path\n[Settings](https://docs.rs/rdkafka/latest/settings.html)\n[Help](https://docs.rs/rdkafka/latest/help.html)\nSummary[Source](https://docs.rs/rdkafka/latest/src/rdkafka/lib.rs.html#1-297)\nExpand description\nA fully asynchronous, [futures](https://github.com/rust-lang/futures-rs)-enabled [Apache Kafka](https://kafka.apache.org) client library for Rust based on [librdkafka](https://github.com/edenhill/librdkafka).\n### [\u00a7](https://docs.rs/rdkafka/latest/rdkafka/#the-library)The library\n`rust-rdkafka` provides a safe Rust interface to librdkafka. This version is compatible with librdkafka v1.9.2+.\n#### [\u00a7](https://docs.rs/rdkafka/latest/rdkafka/#documentation)Documentation\n  * [Current master branch](https://fede1024.github.io/rust-rdkafka/)\n  * [Latest release](https://docs.rs/rdkafka/)\n  * [Changelog](https://github.com/fede1024/rust-rdkafka/blob/master/changelog.md)\n\n\n#### [\u00a7](https://docs.rs/rdkafka/latest/rdkafka/#features)Features\nThe main features provided at the moment are:\n  * Support for all Kafka versions since 0.8.x. For more information about broker compatibility options, check the [librdkafka documentation](https://github.com/edenhill/librdkafka/blob/master/INTRODUCTION.md#broker-version-compatibility).\n  * Consume from single or multiple topics.\n  * Automatic consumer rebalancing.\n  * Customizable rebalance, with pre and post rebalance callbacks.\n  * Synchronous or asynchronous message production.\n  * Customizable offset commit.\n  * Create and delete topics and add and edit partitions.\n  * Alter broker and topic configurations.\n  * Access to cluster metadata (list of topic-partitions, replicas, active brokers etc).\n  * Access to group metadata (list groups, list members of groups, hostnames, etc.).\n  * Access to producer and consumer metrics, errors and callbacks.\n  * Exactly-once semantics (EOS) via idempotent and transactional producers and read-committed consumers.\n\n\n#### [\u00a7](https://docs.rs/rdkafka/latest/rdkafka/#one-million-messages-per-second)One million messages per second\n`rust-rdkafka` is designed to be easy and safe to use thanks to the abstraction layer written in Rust, while at the same time being extremely fast thanks to the librdkafka C library.\nHere are some benchmark results using the [`BaseProducer`](https://docs.rs/rdkafka/*/rdkafka/producer/base_producer/struct.BaseProducer.html), sending data to a single Kafka 0.11 process running in localhost (default configuration, 3 partitions). Hardware: Dell laptop, with Intel Core i7-4712HQ @ 2.30GHz.\n  * Scenario: produce 5 million messages, 10 bytes each, wait for all of them to be acked\n    * 1045413 messages/s, 9.970 MB/s (average over 5 runs)\n  * Scenario: produce 100000 messages, 10 KB each, wait for all of them to be acked\n    * 24623 messages/s, 234.826 MB/s (average over 5 runs)\n\n\nFor more numbers, check out the [kafka-benchmark](https://github.com/fede1024/kafka-benchmark) project.\n#### [\u00a7](https://docs.rs/rdkafka/latest/rdkafka/#client-types)Client types\n`rust-rdkafka` provides low level and high level consumers and producers.\nLow level:\n  * [`BaseConsumer`](https://docs.rs/rdkafka/*/rdkafka/consumer/base_consumer/struct.BaseConsumer.html): a simple wrapper around the librdkafka consumer. It must be periodically `poll()`ed in order to execute callbacks, rebalances and to receive messages.\n  * [`BaseProducer`](https://docs.rs/rdkafka/*/rdkafka/producer/base_producer/struct.BaseProducer.html): a simple wrapper around the librdkafka producer. As in the consumer case, the user must call `poll()` periodically to execute delivery callbacks.\n  * [`ThreadedProducer`](https://docs.rs/rdkafka/*/rdkafka/producer/base_producer/struct.ThreadedProducer.html): a `BaseProducer` with a separate thread dedicated to polling the producer.\n\n\nHigh level:\n  * [`StreamConsumer`](https://docs.rs/rdkafka/*/rdkafka/consumer/stream_consumer/struct.StreamConsumer.html): a [`Stream`](https://docs.rs/futures/*/futures/stream/trait.Stream.html) of messages that takes care of polling the consumer automatically.\n  * [`FutureProducer`](https://docs.rs/rdkafka/*/rdkafka/producer/future_producer/struct.FutureProducer.html): a [`Future`](https://doc.rust-lang.org/stable/std/future/trait.Future.html) that will be completed once the message is delivered to Kafka (or failed).\n\n\nFor more information about consumers and producers, refer to their module-level documentation.\n_Warning_ : the library is under active development and the APIs are likely to change.\n#### [\u00a7](https://docs.rs/rdkafka/latest/rdkafka/#asynchronous-data-processing-with-tokio)Asynchronous data processing with Tokio\n[Tokio](https://tokio.rs/) is a platform for fast processing of asynchronous events in Rust. The interfaces exposed by the [`StreamConsumer`](https://docs.rs/rdkafka/*/rdkafka/consumer/stream_consumer/struct.StreamConsumer.html) and the [`FutureProducer`](https://docs.rs/rdkafka/*/rdkafka/producer/future_producer/struct.FutureProducer.html) allow rust-rdkafka users to easily integrate Kafka consumers and producers within the Tokio platform, and write asynchronous message processing code. Note that rust-rdkafka can be used without Tokio.\nTo see rust-rdkafka in action with Tokio, check out the [asynchronous processing example](https://github.com/fede1024/rust-rdkafka/blob/master/examples/asynchronous_processing.rs) in the examples folder.\n#### [\u00a7](https://docs.rs/rdkafka/latest/rdkafka/#at-least-once-delivery)At-least-once delivery\nAt-least-once delivery semantics are common in many streaming applications: every message is guaranteed to be processed at least once; in case of temporary failure, the message can be re-processed and/or re-delivered, but no message will be lost.\nIn order to implement at-least-once delivery the stream processing application has to carefully commit the offset only once the message has been processed. Committing the offset too early, instead, might cause message loss, since upon recovery the consumer will start from the next message, skipping the one where the failure occurred.\nTo see how to implement at-least-once delivery with `rdkafka`, check out the [at-least-once delivery example](https://github.com/fede1024/rust-rdkafka/blob/master/examples/at_least_once.rs) in the examples folder. To know more about delivery semantics, check the [message delivery semantics](https://kafka.apache.org/0101/documentation.html#semantics) chapter in the Kafka documentation.\n#### [\u00a7](https://docs.rs/rdkafka/latest/rdkafka/#exactly-once-semantics)Exactly-once semantics\nExactly-once semantics (EOS) can be achieved using transactional producers, which allow produced records and consumer offsets to be committed or aborted atomically. Consumers that set their `isolation.level` to `read_committed` will only observe committed messages.\nEOS is useful in read-process-write scenarios that require messages to be processed exactly once.\nTo learn more about using transactions in rust-rdkafka, see the [Transactions](https://docs.rs/rdkafka/latest/rdkafka/producer-transactions) section of the producer documentation.\n#### [\u00a7](https://docs.rs/rdkafka/latest/rdkafka/#users)Users\nHere are some of the projects using rust-rdkafka:\n  * [timely-dataflow](https://github.com/frankmcsherry/timely-dataflow): a distributed data-parallel compute engine. See also the [blog post](https://github.com/frankmcsherry/blog/blob/master/posts/2017-11-08.md) announcing its Kafka integration.\n  * [kafka-view](https://github.com/fede1024/kafka-view): a web interface for Kafka clusters.\n  * [kafka-benchmark](https://github.com/fede1024/kafka-benchmark): a high performance benchmarking tool for Kafka.\n  * [callysto](https://github.com/vertexclique/callysto): Stream processing framework in Rust.\n  * [bytewax](https://github.com/bytewax/bytewax): Python stream processing framework using Timely Dataflow.\n\n\n_If you are using rust-rdkafka, please let us know!_\n### [\u00a7](https://docs.rs/rdkafka/latest/rdkafka/#installation)Installation\nAdd this to your `Cargo.toml`:\n```\n[dependencies]\nrdkafka = { version = \"0.25\", features = [\"cmake-build\"] }\n```\n\nThis crate will compile librdkafka from sources and link it statically to your executable. To compile librdkafka you\u2019ll need:\n  * the GNU toolchain\n  * GNU `make`\n  * `pthreads`\n  * `zlib`: optional, but included by default (feature: `libz`)\n  * `cmake`: optional, _not_ included by default (feature: `cmake-build`)\n  * `libssl-dev`: optional, _not_ included by default (feature: `ssl`)\n  * `libsasl2-dev`: optional, _not_ included by default (feature: `gssapi`)\n  * `libzstd-dev`: optional, _not_ included by default (feature: `zstd-pkg-config`)\n\n\nNote that using the CMake build system, via the `cmake-build` feature, is encouraged if you can take the dependency on CMake.\nBy default a submodule with the librdkafka sources pinned to a specific commit will be used to compile and statically link the library. The `dynamic-linking` feature can be used to instead dynamically link rdkafka to the system\u2019s version of librdkafka. Example:\n```\n[dependencies]\nrdkafka = { version = \"0.25\", features = [\"dynamic-linking\"] }\n```\n\nFor a full listing of features, consult the [rdkafka-sys crate\u2019s documentation](https://github.com/fede1024/rust-rdkafka/tree/master/rdkafka-sys/README.md#features). All of rdkafka-sys features are re-exported as rdkafka features.\n#### [\u00a7](https://docs.rs/rdkafka/latest/rdkafka/#minimum-supported-rust-version-msrv)Minimum supported Rust version (MSRV)\nThe current minimum supported Rust version (MSRV) is 1.70.0. Note that bumping the MSRV is not considered a breaking change. Any release of rust-rdkafka may bump the MSRV.\n#### [\u00a7](https://docs.rs/rdkafka/latest/rdkafka/#asynchronous-runtimes)Asynchronous runtimes\nSome features of the [`StreamConsumer`](https://docs.rs/rdkafka/*/rdkafka/consumer/stream_consumer/struct.StreamConsumer.html) and [`FutureProducer`](https://docs.rs/rdkafka/*/rdkafka/producer/future_producer/struct.FutureProducer.html) depend on Tokio, which can be a heavyweight dependency for users who only intend to use the low-level consumers and producers. The Tokio integration is enabled by default, but can be disabled by turning off default features:\n```\n[dependencies]\nrdkafka = { version = \"0.25\", default-features = false }\n```\n\nIf you would like to use an asynchronous runtime besides Tokio, you can integrate it with rust-rdkafka by providing a shim that implements the [`AsyncRuntime`](https://docs.rs/rdkafka/*/rdkafka/util/trait.AsyncRuntime.html) trait. See the following examples for details:\n  * [smol](https://github.com/fede1024/rust-rdkafka/blob/master/examples/runtime_smol.rs)\n  * [async-std](https://github.com/fede1024/rust-rdkafka/blob/master/examples/runtime_async_std.rs)\n\n\n### [\u00a7](https://docs.rs/rdkafka/latest/rdkafka/#examples)Examples\nYou can find examples in the [`examples`](https://github.com/fede1024/rust-rdkafka/blob/master/examples/) folder. To run them:\n```\ncargo run --example <example_name> -- <example_args>\n```\n\n### [\u00a7](https://docs.rs/rdkafka/latest/rdkafka/#debugging)Debugging\nrust-rdkafka uses the [`log`](https://docs.rs/log) crate to handle logging. Optionally, enable the `tracing` feature to emit [`tracing`](https://docs.rs/tracing) events as opposed to [`log`](https://docs.rs/log) records.\nIn test and examples, rust-rdkafka uses the [`env_logger`](https://docs.rs/env_logger) crate to format logs. In those contexts, logging can be enabled using the `RUST_LOG` environment variable, for example:\n```\nRUST_LOG=\"librdkafka=trace,rdkafka::client=debug\" cargo test\n```\n\nThis will configure the logging level of librdkafka to trace, and the level of the client module of the Rust client to debug. To actually receive logs from librdkafka, you also have to set the `debug` option in the producer or consumer configuration (see librdkafka [configuration](https://github.com/edenhill/librdkafka/blob/master/CONFIGURATION.md)).\nTo enable debugging in your project, make sure you initialize the logger with `env_logger::init()`, or the equivalent for any `log`-compatible logging framework.\n## Re-exports[\u00a7](https://docs.rs/rdkafka/latest/rdkafka/#reexports)\n\n`pub use crate::client::ClientContext[](https://docs.rs/rdkafka/latest/rdkafka/client/trait.ClientContext.html \"trait rdkafka::client::ClientContext\");`\n\n\n`pub use crate::config::ClientConfig[](https://docs.rs/rdkafka/latest/rdkafka/config/struct.ClientConfig.html \"struct rdkafka::config::ClientConfig\");`\n\n\n`pub use crate::message::Message[](https://docs.rs/rdkafka/latest/rdkafka/message/trait.Message.html \"trait rdkafka::message::Message\");`\n\n\n`pub use crate::message::Timestamp[](https://docs.rs/rdkafka/latest/rdkafka/message/enum.Timestamp.html \"enum rdkafka::message::Timestamp\");`\n\n\n`pub use crate::statistics::Statistics[](https://docs.rs/rdkafka/latest/rdkafka/statistics/struct.Statistics.html \"struct rdkafka::statistics::Statistics\");`\n\n\n`pub use crate::topic_partition_list::Offset[](https://docs.rs/rdkafka/latest/rdkafka/topic_partition_list/enum.Offset.html \"enum rdkafka::topic_partition_list::Offset\");`\n\n\n`pub use crate::topic_partition_list::TopicPartitionList[](https://docs.rs/rdkafka/latest/rdkafka/topic_partition_list/struct.TopicPartitionList.html \"struct rdkafka::topic_partition_list::TopicPartitionList\");`\n\n\n`pub use crate::util::IntoOpaque[](https://docs.rs/rdkafka/latest/rdkafka/util/trait.IntoOpaque.html \"trait rdkafka::util::IntoOpaque\");`\n\n## Modules[\u00a7](https://docs.rs/rdkafka/latest/rdkafka/#modules)\n\n[admin](https://docs.rs/rdkafka/latest/rdkafka/admin/index.html \"mod rdkafka::admin\")\n    Admin client.\n\n[bindings](https://docs.rs/rdkafka/latest/rdkafka/bindings/index.html \"mod rdkafka::bindings\")\n    FFI bindings.\n\n[client](https://docs.rs/rdkafka/latest/rdkafka/client/index.html \"mod rdkafka::client\")\n    Common client functionality.\n\n[config](https://docs.rs/rdkafka/latest/rdkafka/config/index.html \"mod rdkafka::config\")\n    Producer and consumer configuration.\n\n[consumer](https://docs.rs/rdkafka/latest/rdkafka/consumer/index.html \"mod rdkafka::consumer\")\n    Kafka consumers.\n\n[error](https://docs.rs/rdkafka/latest/rdkafka/error/index.html \"mod rdkafka::error\")\n    Error manipulations.\n\n[groups](https://docs.rs/rdkafka/latest/rdkafka/groups/index.html \"mod rdkafka::groups\")\n    Group membership API.\n\n[helpers](https://docs.rs/rdkafka/latest/rdkafka/helpers/index.html \"mod rdkafka::helpers\")\n    Utility functions.\n\n[message](https://docs.rs/rdkafka/latest/rdkafka/message/index.html \"mod rdkafka::message\")\n    Store and manipulate Kafka messages.\n\n[metadata](https://docs.rs/rdkafka/latest/rdkafka/metadata/index.html \"mod rdkafka::metadata\")\n    Cluster metadata.\n\n[mocking](https://docs.rs/rdkafka/latest/rdkafka/mocking/index.html \"mod rdkafka::mocking\")\n    Mocking functionality\n\n[producer](https://docs.rs/rdkafka/latest/rdkafka/producer/index.html \"mod rdkafka::producer\")\n    Kafka producers.\n\n[statistics](https://docs.rs/rdkafka/latest/rdkafka/statistics/index.html \"mod rdkafka::statistics\")\n    Client and broker statistics.\n\n[topic_partition_list](https://docs.rs/rdkafka/latest/rdkafka/topic_partition_list/index.html \"mod rdkafka::topic_partition_list\")\n    Data structures representing topic, partitions and offsets.\n\n[types](https://docs.rs/rdkafka/latest/rdkafka/types/index.html \"mod rdkafka::types\")\n    Aliases for types defined in the auto-generated bindings.\n\n[util](https://docs.rs/rdkafka/latest/rdkafka/util/index.html \"mod rdkafka::util\")\n    Utility functions and types.\n",
              "markdown_with_citations": "[](https://docs.rs/rdkafka/latest/rdkafka/all.html \"show sidebar\")\n# Crate rdkafkaCopy item path\nSettings\u27e81\u27e9\nHelp\u27e82\u27e9\nSummarySource\u27e83\u27e9\nExpand description\nA fully asynchronous, futures\u27e84\u27e9-enabled Apache Kafka\u27e85\u27e9 client library for Rust based on librdkafka\u27e86\u27e9.\n### \u00a7\u27e87\u27e9The library\n`rust-rdkafka` provides a safe Rust interface to librdkafka. This version is compatible with librdkafka v1.9.2+.\n#### \u00a7\u27e88\u27e9Documentation\n  * Current master branch\u27e89\u27e9\n  * Latest release\u27e810\u27e9\n  * Changelog\u27e811\u27e9\n\n\n#### \u00a7\u27e812\u27e9Features\nThe main features provided at the moment are:\n  * Support for all Kafka versions since 0.8.x. For more information about broker compatibility options, check the librdkafka documentation\u27e813\u27e9.\n  * Consume from single or multiple topics.\n  * Automatic consumer rebalancing.\n  * Customizable rebalance, with pre and post rebalance callbacks.\n  * Synchronous or asynchronous message production.\n  * Customizable offset commit.\n  * Create and delete topics and add and edit partitions.\n  * Alter broker and topic configurations.\n  * Access to cluster metadata (list of topic-partitions, replicas, active brokers etc).\n  * Access to group metadata (list groups, list members of groups, hostnames, etc.).\n  * Access to producer and consumer metrics, errors and callbacks.\n  * Exactly-once semantics (EOS) via idempotent and transactional producers and read-committed consumers.\n\n\n#### \u00a7\u27e814\u27e9One million messages per second\n`rust-rdkafka` is designed to be easy and safe to use thanks to the abstraction layer written in Rust, while at the same time being extremely fast thanks to the librdkafka C library.\nHere are some benchmark results using the `BaseProducer`\u27e815\u27e9, sending data to a single Kafka 0.11 process running in localhost (default configuration, 3 partitions). Hardware: Dell laptop, with Intel Core i7-4712HQ @ 2.30GHz.\n  * Scenario: produce 5 million messages, 10 bytes each, wait for all of them to be acked\n    * 1045413 messages/s, 9.970 MB/s (average over 5 runs)\n  * Scenario: produce 100000 messages, 10 KB each, wait for all of them to be acked\n    * 24623 messages/s, 234.826 MB/s (average over 5 runs)\n\n\nFor more numbers, check out the kafka-benchmark\u27e816\u27e9 project.\n#### \u00a7\u27e817\u27e9Client types\n`rust-rdkafka` provides low level and high level consumers and producers.\nLow level:\n  * `BaseConsumer`\u27e818\u27e9: a simple wrapper around the librdkafka consumer. It must be periodically `poll()`ed in order to execute callbacks, rebalances and to receive messages.\n  * `BaseProducer`\u27e815\u27e9: a simple wrapper around the librdkafka producer. As in the consumer case, the user must call `poll()` periodically to execute delivery callbacks.\n  * `ThreadedProducer`\u27e819\u27e9: a `BaseProducer` with a separate thread dedicated to polling the producer.\n\n\nHigh level:\n  * `StreamConsumer`\u27e820\u27e9: a `Stream`\u27e821\u27e9 of messages that takes care of polling the consumer automatically.\n  * `FutureProducer`\u27e822\u27e9: a `Future`\u27e823\u27e9 that will be completed once the message is delivered to Kafka (or failed).\n\n\nFor more information about consumers and producers, refer to their module-level documentation.\n_Warning_ : the library is under active development and the APIs are likely to change.\n#### \u00a7\u27e824\u27e9Asynchronous data processing with Tokio\nTokio\u27e825\u27e9 is a platform for fast processing of asynchronous events in Rust. The interfaces exposed by the `StreamConsumer`\u27e820\u27e9 and the `FutureProducer`\u27e822\u27e9 allow rust-rdkafka users to easily integrate Kafka consumers and producers within the Tokio platform, and write asynchronous message processing code. Note that rust-rdkafka can be used without Tokio.\nTo see rust-rdkafka in action with Tokio, check out the asynchronous processing example\u27e826\u27e9 in the examples folder.\n#### \u00a7\u27e827\u27e9At-least-once delivery\nAt-least-once delivery semantics are common in many streaming applications: every message is guaranteed to be processed at least once; in case of temporary failure, the message can be re-processed and/or re-delivered, but no message will be lost.\nIn order to implement at-least-once delivery the stream processing application has to carefully commit the offset only once the message has been processed. Committing the offset too early, instead, might cause message loss, since upon recovery the consumer will start from the next message, skipping the one where the failure occurred.\nTo see how to implement at-least-once delivery with `rdkafka`, check out the at-least-once delivery example\u27e828\u27e9 in the examples folder. To know more about delivery semantics, check the message delivery semantics\u27e829\u27e9 chapter in the Kafka documentation.\n#### \u00a7\u27e830\u27e9Exactly-once semantics\nExactly-once semantics (EOS) can be achieved using transactional producers, which allow produced records and consumer offsets to be committed or aborted atomically. Consumers that set their `isolation.level` to `read_committed` will only observe committed messages.\nEOS is useful in read-process-write scenarios that require messages to be processed exactly once.\nTo learn more about using transactions in rust-rdkafka, see the Transactions\u27e831\u27e9 section of the producer documentation.\n#### \u00a7\u27e832\u27e9Users\nHere are some of the projects using rust-rdkafka:\n  * timely-dataflow\u27e833\u27e9: a distributed data-parallel compute engine. See also the blog post\u27e834\u27e9 announcing its Kafka integration.\n  * kafka-view\u27e835\u27e9: a web interface for Kafka clusters.\n  * kafka-benchmark\u27e816\u27e9: a high performance benchmarking tool for Kafka.\n  * callysto\u27e836\u27e9: Stream processing framework in Rust.\n  * bytewax\u27e837\u27e9: Python stream processing framework using Timely Dataflow.\n\n\n_If you are using rust-rdkafka, please let us know!_\n### \u00a7\u27e838\u27e9Installation\nAdd this to your `Cargo.toml`:\n```\n[dependencies]\nrdkafka = { version = \"0.25\", features = [\"cmake-build\"] }\n```\n\nThis crate will compile librdkafka from sources and link it statically to your executable. To compile librdkafka you\u2019ll need:\n  * the GNU toolchain\n  * GNU `make`\n  * `pthreads`\n  * `zlib`: optional, but included by default (feature: `libz`)\n  * `cmake`: optional, _not_ included by default (feature: `cmake-build`)\n  * `libssl-dev`: optional, _not_ included by default (feature: `ssl`)\n  * `libsasl2-dev`: optional, _not_ included by default (feature: `gssapi`)\n  * `libzstd-dev`: optional, _not_ included by default (feature: `zstd-pkg-config`)\n\n\nNote that using the CMake build system, via the `cmake-build` feature, is encouraged if you can take the dependency on CMake.\nBy default a submodule with the librdkafka sources pinned to a specific commit will be used to compile and statically link the library. The `dynamic-linking` feature can be used to instead dynamically link rdkafka to the system\u2019s version of librdkafka. Example:\n```\n[dependencies]\nrdkafka = { version = \"0.25\", features = [\"dynamic-linking\"] }\n```\n\nFor a full listing of features, consult the rdkafka-sys crate\u2019s documentation\u27e839\u27e9. All of rdkafka-sys features are re-exported as rdkafka features.\n#### \u00a7\u27e840\u27e9Minimum supported Rust version (MSRV)\nThe current minimum supported Rust version (MSRV) is 1.70.0. Note that bumping the MSRV is not considered a breaking change. Any release of rust-rdkafka may bump the MSRV.\n#### \u00a7\u27e841\u27e9Asynchronous runtimes\nSome features of the `StreamConsumer`\u27e820\u27e9 and `FutureProducer`\u27e822\u27e9 depend on Tokio, which can be a heavyweight dependency for users who only intend to use the low-level consumers and producers. The Tokio integration is enabled by default, but can be disabled by turning off default features:\n```\n[dependencies]\nrdkafka = { version = \"0.25\", default-features = false }\n```\n\nIf you would like to use an asynchronous runtime besides Tokio, you can integrate it with rust-rdkafka by providing a shim that implements the `AsyncRuntime`\u27e842\u27e9 trait. See the following examples for details:\n  * smol\u27e843\u27e9\n  * async-std\u27e844\u27e9\n\n\n### \u00a7\u27e845\u27e9Examples\nYou can find examples in the `examples`\u27e846\u27e9 folder. To run them:\n```\ncargo run --example <example_name> -- <example_args>\n```\n\n### \u00a7\u27e847\u27e9Debugging\nrust-rdkafka uses the `log`\u27e848\u27e9 crate to handle logging. Optionally, enable the `tracing` feature to emit `tracing`\u27e849\u27e9 events as opposed to `log`\u27e848\u27e9 records.\nIn test and examples, rust-rdkafka uses the `env_logger`\u27e850\u27e9 crate to format logs. In those contexts, logging can be enabled using the `RUST_LOG` environment variable, for example:\n```\nRUST_LOG=\"librdkafka=trace,rdkafka::client=debug\" cargo test\n```\n\nThis will configure the logging level of librdkafka to trace, and the level of the client module of the Rust client to debug. To actually receive logs from librdkafka, you also have to set the `debug` option in the producer or consumer configuration (see librdkafka configuration\u27e851\u27e9).\nTo enable debugging in your project, make sure you initialize the logger with `env_logger::init()`, or the equivalent for any `log`-compatible logging framework.\n## Re-exports\u00a7\u27e852\u27e9\n\n`pub use crate::client::ClientContext[](https://docs.rs/rdkafka/latest/rdkafka/client/trait.ClientContext.html \"trait rdkafka::client::ClientContext\");`\n\n\n`pub use crate::config::ClientConfig[](https://docs.rs/rdkafka/latest/rdkafka/config/struct.ClientConfig.html \"struct rdkafka::config::ClientConfig\");`\n\n\n`pub use crate::message::Message[](https://docs.rs/rdkafka/latest/rdkafka/message/trait.Message.html \"trait rdkafka::message::Message\");`\n\n\n`pub use crate::message::Timestamp[](https://docs.rs/rdkafka/latest/rdkafka/message/enum.Timestamp.html \"enum rdkafka::message::Timestamp\");`\n\n\n`pub use crate::statistics::Statistics[](https://docs.rs/rdkafka/latest/rdkafka/statistics/struct.Statistics.html \"struct rdkafka::statistics::Statistics\");`\n\n\n`pub use crate::topic_partition_list::Offset[](https://docs.rs/rdkafka/latest/rdkafka/topic_partition_list/enum.Offset.html \"enum rdkafka::topic_partition_list::Offset\");`\n\n\n`pub use crate::topic_partition_list::TopicPartitionList[](https://docs.rs/rdkafka/latest/rdkafka/topic_partition_list/struct.TopicPartitionList.html \"struct rdkafka::topic_partition_list::TopicPartitionList\");`\n\n\n`pub use crate::util::IntoOpaque[](https://docs.rs/rdkafka/latest/rdkafka/util/trait.IntoOpaque.html \"trait rdkafka::util::IntoOpaque\");`\n\n## Modules\u00a7\u27e853\u27e9\n\nadmin\u27e854\u27e9\n    Admin client.\n\nbindings\u27e855\u27e9\n    FFI bindings.\n\nclient\u27e856\u27e9\n    Common client functionality.\n\nconfig\u27e857\u27e9\n    Producer and consumer configuration.\n\nconsumer\u27e858\u27e9\n    Kafka consumers.\n\nerror\u27e859\u27e9\n    Error manipulations.\n\ngroups\u27e860\u27e9\n    Group membership API.\n\nhelpers\u27e861\u27e9\n    Utility functions.\n\nmessage\u27e862\u27e9\n    Store and manipulate Kafka messages.\n\nmetadata\u27e863\u27e9\n    Cluster metadata.\n\nmocking\u27e864\u27e9\n    Mocking functionality\n\nproducer\u27e865\u27e9\n    Kafka producers.\n\nstatistics\u27e866\u27e9\n    Client and broker statistics.\n\ntopic_partition_list\u27e867\u27e9\n    Data structures representing topic, partitions and offsets.\n\ntypes\u27e868\u27e9\n    Aliases for types defined in the auto-generated bindings.\n\nutil\u27e869\u27e9\n    Utility functions and types.\n",
              "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://docs.rs/rdkafka/latest/settings.html: Settings\n\u27e82\u27e9 https://docs.rs/rdkafka/latest/help.html: Help\n\u27e83\u27e9 https://docs.rs/rdkafka/latest/src/rdkafka/lib.rs.html#1-297: Source\n\u27e84\u27e9 https://github.com/rust-lang/futures-rs: futures\n\u27e85\u27e9 https://kafka.apache.org: Apache Kafka\n\u27e86\u27e9 https://github.com/edenhill/librdkafka: librdkafka\n\u27e87\u27e9 https://docs.rs/rdkafka/latest/rdkafka/#the-library: \u00a7\n\u27e88\u27e9 https://docs.rs/rdkafka/latest/rdkafka/#documentation: \u00a7\n\u27e89\u27e9 https://fede1024.github.io/rust-rdkafka/: Current master branch\n\u27e810\u27e9 https://docs.rs/rdkafka/: Latest release\n\u27e811\u27e9 https://github.com/fede1024/rust-rdkafka/blob/master/changelog.md: Changelog\n\u27e812\u27e9 https://docs.rs/rdkafka/latest/rdkafka/#features: \u00a7\n\u27e813\u27e9 https://github.com/edenhill/librdkafka/blob/master/INTRODUCTION.md#broker-version-compatibility: librdkafka documentation\n\u27e814\u27e9 https://docs.rs/rdkafka/latest/rdkafka/#one-million-messages-per-second: \u00a7\n\u27e815\u27e9 https://docs.rs/rdkafka/*/rdkafka/producer/base_producer/struct.BaseProducer.html: `BaseProducer`\n\u27e816\u27e9 https://github.com/fede1024/kafka-benchmark: kafka-benchmark\n\u27e817\u27e9 https://docs.rs/rdkafka/latest/rdkafka/#client-types: \u00a7\n\u27e818\u27e9 https://docs.rs/rdkafka/*/rdkafka/consumer/base_consumer/struct.BaseConsumer.html: `BaseConsumer`\n\u27e819\u27e9 https://docs.rs/rdkafka/*/rdkafka/producer/base_producer/struct.ThreadedProducer.html: `ThreadedProducer`\n\u27e820\u27e9 https://docs.rs/rdkafka/*/rdkafka/consumer/stream_consumer/struct.StreamConsumer.html: `StreamConsumer`\n\u27e821\u27e9 https://docs.rs/futures/*/futures/stream/trait.Stream.html: `Stream`\n\u27e822\u27e9 https://docs.rs/rdkafka/*/rdkafka/producer/future_producer/struct.FutureProducer.html: `FutureProducer`\n\u27e823\u27e9 https://doc.rust-lang.org/stable/std/future/trait.Future.html: `Future`\n\u27e824\u27e9 https://docs.rs/rdkafka/latest/rdkafka/#asynchronous-data-processing-with-tokio: \u00a7\n\u27e825\u27e9 https://tokio.rs/: Tokio\n\u27e826\u27e9 https://github.com/fede1024/rust-rdkafka/blob/master/examples/asynchronous_processing.rs: asynchronous processing example\n\u27e827\u27e9 https://docs.rs/rdkafka/latest/rdkafka/#at-least-once-delivery: \u00a7\n\u27e828\u27e9 https://github.com/fede1024/rust-rdkafka/blob/master/examples/at_least_once.rs: at-least-once delivery example\n\u27e829\u27e9 https://kafka.apache.org/0101/documentation.html#semantics: message delivery semantics\n\u27e830\u27e9 https://docs.rs/rdkafka/latest/rdkafka/#exactly-once-semantics: \u00a7\n\u27e831\u27e9 https://docs.rs/rdkafka/latest/rdkafka/producer-transactions: Transactions\n\u27e832\u27e9 https://docs.rs/rdkafka/latest/rdkafka/#users: \u00a7\n\u27e833\u27e9 https://github.com/frankmcsherry/timely-dataflow: timely-dataflow\n\u27e834\u27e9 https://github.com/frankmcsherry/blog/blob/master/posts/2017-11-08.md: blog post\n\u27e835\u27e9 https://github.com/fede1024/kafka-view: kafka-view\n\u27e836\u27e9 https://github.com/vertexclique/callysto: callysto\n\u27e837\u27e9 https://github.com/bytewax/bytewax: bytewax\n\u27e838\u27e9 https://docs.rs/rdkafka/latest/rdkafka/#installation: \u00a7\n\u27e839\u27e9 https://github.com/fede1024/rust-rdkafka/tree/master/rdkafka-sys/README.md#features: rdkafka-sys crate\u2019s documentation\n\u27e840\u27e9 https://docs.rs/rdkafka/latest/rdkafka/#minimum-supported-rust-version-msrv: \u00a7\n\u27e841\u27e9 https://docs.rs/rdkafka/latest/rdkafka/#asynchronous-runtimes: \u00a7\n\u27e842\u27e9 https://docs.rs/rdkafka/*/rdkafka/util/trait.AsyncRuntime.html: `AsyncRuntime`\n\u27e843\u27e9 https://github.com/fede1024/rust-rdkafka/blob/master/examples/runtime_smol.rs: smol\n\u27e844\u27e9 https://github.com/fede1024/rust-rdkafka/blob/master/examples/runtime_async_std.rs: async-std\n\u27e845\u27e9 https://docs.rs/rdkafka/latest/rdkafka/#examples: \u00a7\n\u27e846\u27e9 https://github.com/fede1024/rust-rdkafka/blob/master/examples/: `examples`\n\u27e847\u27e9 https://docs.rs/rdkafka/latest/rdkafka/#debugging: \u00a7\n\u27e848\u27e9 https://docs.rs/log: `log`\n\u27e849\u27e9 https://docs.rs/tracing: `tracing`\n\u27e850\u27e9 https://docs.rs/env_logger: `env_logger`\n\u27e851\u27e9 https://github.com/edenhill/librdkafka/blob/master/CONFIGURATION.md: configuration\n\u27e852\u27e9 https://docs.rs/rdkafka/latest/rdkafka/#reexports: \u00a7\n\u27e853\u27e9 https://docs.rs/rdkafka/latest/rdkafka/#modules: \u00a7\n\u27e854\u27e9 https://docs.rs/rdkafka/latest/rdkafka/admin/index.html: mod rdkafka::admin - admin\n\u27e855\u27e9 https://docs.rs/rdkafka/latest/rdkafka/bindings/index.html: mod rdkafka::bindings - bindings\n\u27e856\u27e9 https://docs.rs/rdkafka/latest/rdkafka/client/index.html: mod rdkafka::client - client\n\u27e857\u27e9 https://docs.rs/rdkafka/latest/rdkafka/config/index.html: mod rdkafka::config - config\n\u27e858\u27e9 https://docs.rs/rdkafka/latest/rdkafka/consumer/index.html: mod rdkafka::consumer - consumer\n\u27e859\u27e9 https://docs.rs/rdkafka/latest/rdkafka/error/index.html: mod rdkafka::error - error\n\u27e860\u27e9 https://docs.rs/rdkafka/latest/rdkafka/groups/index.html: mod rdkafka::groups - groups\n\u27e861\u27e9 https://docs.rs/rdkafka/latest/rdkafka/helpers/index.html: mod rdkafka::helpers - helpers\n\u27e862\u27e9 https://docs.rs/rdkafka/latest/rdkafka/message/index.html: mod rdkafka::message - message\n\u27e863\u27e9 https://docs.rs/rdkafka/latest/rdkafka/metadata/index.html: mod rdkafka::metadata - metadata\n\u27e864\u27e9 https://docs.rs/rdkafka/latest/rdkafka/mocking/index.html: mod rdkafka::mocking - mocking\n\u27e865\u27e9 https://docs.rs/rdkafka/latest/rdkafka/producer/index.html: mod rdkafka::producer - producer\n\u27e866\u27e9 https://docs.rs/rdkafka/latest/rdkafka/statistics/index.html: mod rdkafka::statistics - statistics\n\u27e867\u27e9 https://docs.rs/rdkafka/latest/rdkafka/topic_partition_list/index.html: mod rdkafka::topic_partition_list - topic_partition_list\n\u27e868\u27e9 https://docs.rs/rdkafka/latest/rdkafka/types/index.html: mod rdkafka::types - types\n\u27e869\u27e9 https://docs.rs/rdkafka/latest/rdkafka/util/index.html: mod rdkafka::util - util\n",
              "fit_markdown": "",
              "fit_html": ""
            },
            "structured_data": {},
            "quality_score": 4.0,
            "extraction_method": "crawl4ai",
            "error": null,
            "metadata": {
              "doc_type": "docs",
              "content_length": 15587,
              "has_structured_data": false,
              "crawl_success": true
            },
            "timestamp": "117289.967298"
          },
          "lib_rs": {
            "url": "https://lib.rs/crates/rdkafka",
            "title": "Untitled",
            "content": {
              "raw_markdown": "###  [49 releases](https://lib.rs/crates/rdkafka/versions) (breaking)\n0.37.0 |  Nov 25, 2024   \n---|---  \n0.36.2 |  Jan 16, 2024   \n0.36.0 |  Nov 8, 2023   \n0.33.2 |  Jul 6, 2023   \n0.3.0 |  Nov 26, 2016   \n#**10** in [Asynchronous](https://lib.rs/asynchronous \"Crates to help you deal with events independently of the main program flow, using techniques like futures, promises, waiting, or eventing.\")\nDownload history 124483/week @ 2025-03-07 110229/week @ 2025-03-14 108736/week @ 2025-03-21 102024/week @ 2025-03-28 106228/week @ 2025-04-04 101365/week @ 2025-04-11 94356/week @ 2025-04-18 99556/week @ 2025-04-25 104776/week @ 2025-05-02 105345/week @ 2025-05-09 110953/week @ 2025-05-16 99875/week @ 2025-05-23 110774/week @ 2025-05-30 112306/week @ 2025-06-06 114693/week @ 2025-06-13 125006/week @ 2025-06-20\n**482,802** downloads per month Used in [**153** crates (134 directly)](https://lib.rs/crates/rdkafka/rev)\n**MIT** license \n**10MB** **138K** SLoC\nC 110K SLoC // 0.2% comments  Rust 11K SLoC // 0.0% comments  C++ 10K SLoC // 0.2% comments  Python 2.5K SLoC // 0.2% comments  Shell 1.5K SLoC // 0.2% comments  Visual Studio Project 1.5K SLoC // 0.0% comments  Visual Studio Solution 225 SLoC  Java 180 SLoC // 0.3% comments  RPM Specfile 84 SLoC // 0.1% comments  PowerShell 80 SLoC // 0.2% comments  jq 37 SLoC  Forge Config 34 SLoC  Pacman's makepkg 26 SLoC  GDB Script 23 SLoC  Batch 17 SLoC \n# rust-rdkafka\n[![crates.io](https://img.shields.io/crates/v/rdkafka.svg)](https://crates.io/crates/rdkafka) [![docs.rs](https://img.gs/czjpqfbdkz/full/https://docs.rs/rdkafka/badge.svg)](https://docs.rs/rdkafka/) [![Build Status](https://img.gs/czjpqfbdkz/full/https://travis-ci.org/fede1024/rust-rdkafka.svg?branch=master)](https://travis-ci.org/fede1024/rust-rdkafka) [![coverate](https://img.gs/czjpqfbdkz/full/https://codecov.io/gh/fede1024/rust-rdkafka/graphs/badge.svg?branch=master)](https://codecov.io/gh/fede1024/rust-rdkafka/) [![Join the chat at https://gitter.im/rust-rdkafka/Lobby](https://img.gs/czjpqfbdkz/full/https://badges.gitter.im/rust-rdkafka/Lobby.svg)](https://gitter.im/rust-rdkafka/Lobby?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)\nA fully asynchronous, [futures](https://github.com/rust-lang/futures-rs)-enabled [Apache Kafka](https://kafka.apache.org) client library for Rust based on [librdkafka](https://github.com/edenhill/librdkafka).\n## The library\n``rust-rdkafka`` provides a safe Rust interface to librdkafka. This version is compatible with librdkafka v1.9.2+.\n### Documentation\n  * [Current master branch](https://fede1024.github.io/rust-rdkafka/)\n  * [Latest release](https://docs.rs/rdkafka/)\n  * [Changelog](https://github.com/fede1024/rust-rdkafka/blob/master/changelog.md)\n\n\n### Features\nThe main features provided at the moment are:\n  * Support for all Kafka versions since 0.8.x. For more information about broker compatibility options, check the [librdkafka documentation](https://github.com/edenhill/librdkafka/blob/master/INTRODUCTION.md#broker-version-compatibility).\n  * Consume from single or multiple topics.\n  * Automatic consumer rebalancing.\n  * Customizable rebalance, with pre and post rebalance callbacks.\n  * Synchronous or asynchronous message production.\n  * Customizable offset commit.\n  * Create and delete topics and add and edit partitions.\n  * Alter broker and topic configurations.\n  * Access to cluster metadata (list of topic-partitions, replicas, active brokers etc).\n  * Access to group metadata (list groups, list members of groups, hostnames, etc.).\n  * Access to producer and consumer metrics, errors and callbacks.\n  * Exactly-once semantics (EOS) via idempotent and transactional producers and read-committed consumers.\n\n\n### One million messages per second\n``rust-rdkafka`` is designed to be easy and safe to use thanks to the abstraction layer written in Rust, while at the same time being extremely fast thanks to the librdkafka C library.\nHere are some benchmark results using the [``BaseProducer``](https://docs.rs/rdkafka/*/rdkafka/producer/base_producer/struct.BaseProducer.html), sending data to a single Kafka 0.11 process running in localhost (default configuration, 3 partitions). Hardware: Dell laptop, with Intel Core i7-4712HQ @ 2.30GHz.\n  * Scenario: produce 5 million messages, 10 bytes each, wait for all of them to be acked\n    * 1045413 messages/s, 9.970 MB/s (average over 5 runs)\n  * Scenario: produce 100000 messages, 10 KB each, wait for all of them to be acked\n    * 24623 messages/s, 234.826 MB/s (average over 5 runs)\n\n\nFor more numbers, check out the [kafka-benchmark](https://github.com/fede1024/kafka-benchmark) project.\n### Client types\n``rust-rdkafka`` provides low level and high level consumers and producers.\nLow level:\n  * [``BaseConsumer``](https://docs.rs/rdkafka/*/rdkafka/consumer/base_consumer/struct.BaseConsumer.html): a simple wrapper around the librdkafka consumer. It must be periodically ```poll``(``)```ed in order to execute callbacks, rebalances and to receive messages.\n  * [``BaseProducer``](https://docs.rs/rdkafka/*/rdkafka/producer/base_producer/struct.BaseProducer.html): a simple wrapper around the librdkafka producer. As in the consumer case, the user must call ```poll``(``)``` periodically to execute delivery callbacks.\n  * [``ThreadedProducer``](https://docs.rs/rdkafka/*/rdkafka/producer/base_producer/struct.ThreadedProducer.html): a ``BaseProducer`` with a separate thread dedicated to polling the producer.\n\n\nHigh level:\n  * [``StreamConsumer``](https://docs.rs/rdkafka/*/rdkafka/consumer/stream_consumer/struct.StreamConsumer.html): a [``Stream``](https://docs.rs/futures/*/futures/stream/trait.Stream.html) of messages that takes care of polling the consumer automatically.\n  * [``FutureProducer``](https://docs.rs/rdkafka/*/rdkafka/producer/future_producer/struct.FutureProducer.html): a [``Future``](https://doc.rust-lang.org/stable/std/future/trait.Future.html) that will be completed once the message is delivered to Kafka (or failed).\n\n\nFor more information about consumers and producers, refer to their module-level documentation.\n_Warning_ : the library is under active development and the APIs are likely to change.\n### Asynchronous data processing with Tokio\n[Tokio](https://tokio.rs/) is a platform for fast processing of asynchronous events in Rust. The interfaces exposed by the [``StreamConsumer``](https://docs.rs/rdkafka/*/rdkafka/consumer/stream_consumer/struct.StreamConsumer.html) and the [``FutureProducer``](https://docs.rs/rdkafka/*/rdkafka/producer/future_producer/struct.FutureProducer.html) allow rust-rdkafka users to easily integrate Kafka consumers and producers within the Tokio platform, and write asynchronous message processing code. Note that rust-rdkafka can be used without Tokio.\nTo see rust-rdkafka in action with Tokio, check out the [asynchronous processing example](https://github.com/fede1024/rust-rdkafka/blob/master/examples/asynchronous_processing.rs) in the examples folder.\n### At-least-once delivery\nAt-least-once delivery semantics are common in many streaming applications: every message is guaranteed to be processed at least once; in case of temporary failure, the message can be re-processed and/or re-delivered, but no message will be lost.\nIn order to implement at-least-once delivery the stream processing application has to carefully commit the offset only once the message has been processed. Committing the offset too early, instead, might cause message loss, since upon recovery the consumer will start from the next message, skipping the one where the failure occurred.\nTo see how to implement at-least-once delivery with ``rdkafka``, check out the [at-least-once delivery example](https://github.com/fede1024/rust-rdkafka/blob/master/examples/at_least_once.rs) in the examples folder. To know more about delivery semantics, check the [message delivery semantics](https://kafka.apache.org/0101/documentation.html#semantics) chapter in the Kafka documentation.\n### Exactly-once semantics\nExactly-once semantics (EOS) can be achieved using transactional producers, which allow produced records and consumer offsets to be committed or aborted atomically. Consumers that set their ``isolation`.`level`` to ``read_committed`` will only observe committed messages.\nEOS is useful in read-process-write scenarios that require messages to be processed exactly once.\nTo learn more about using transactions in rust-rdkafka, see the [Transactions](https://github.com/fede1024/rust-rdkafka/blob/507992014d86783a93b8415650a6a456b52dda46/producer-transactions) section of the producer documentation.\n### Users\nHere are some of the projects using rust-rdkafka:\n  * [timely-dataflow](https://github.com/frankmcsherry/timely-dataflow): a distributed data-parallel compute engine. See also the [blog post](https://github.com/frankmcsherry/blog/blob/master/posts/2017-11-08.md) announcing its Kafka integration.\n  * [kafka-view](https://github.com/fede1024/kafka-view): a web interface for Kafka clusters.\n  * [kafka-benchmark](https://github.com/fede1024/kafka-benchmark): a high performance benchmarking tool for Kafka.\n  * [callysto](https://github.com/vertexclique/callysto): Stream processing framework in Rust.\n  * [bytewax](https://github.com/bytewax/bytewax): Python stream processing framework using Timely Dataflow.\n\n\n_If you are using rust-rdkafka, please let us know!_\n## Installation\nAdd this to your ``Cargo.toml``:\n```\n```[``dependencies``]`\n`rdkafka = { version = \"0.25\", features ``=` ``[```\"`cmake-build`\"```]`` }\n``\n```\n\nThis crate will compile librdkafka from sources and link it statically to your executable. To compile librdkafka you'll need:\n  * the GNU toolchain\n  * GNU ``make``\n  * ``pthreads``\n  * ``zlib``: optional, but included by default (feature: ``libz``)\n  * ``cmake``: optional, _not_ included by default (feature: ``cmake-build``)\n  * ``libssl-dev``: optional, _not_ included by default (feature: ``ssl``)\n  * ``libsasl2-dev``: optional, _not_ included by default (feature: ``gssapi``)\n  * ``libzstd-dev``: optional, _not_ included by default (feature: ``zstd-pkg-config``)\n\n\nNote that using the CMake build system, via the ``cmake-build`` feature, is encouraged if you can take the dependency on CMake.\nBy default a submodule with the librdkafka sources pinned to a specific commit will be used to compile and statically link the library. The ``dynamic-linking`` feature can be used to instead dynamically link rdkafka to the system's version of librdkafka. Example:\n```\n```[``dependencies``]`\n`rdkafka = { version = \"0.25\", features ``=` ``[```\"`dynamic-linking`\"```]`` }\n``\n```\n\nFor a full listing of features, consult the [rdkafka-sys crate's documentation](https://github.com/fede1024/rust-rdkafka/tree/master/rdkafka-sys/README.md#features). All of rdkafka-sys features are re-exported as rdkafka features.\n### Minimum supported Rust version (MSRV)\nThe current minimum supported Rust version (MSRV) is 1.70.0. Note that bumping the MSRV is not considered a breaking change. Any release of rust-rdkafka may bump the MSRV.\n### Asynchronous runtimes\nSome features of the [``StreamConsumer``](https://docs.rs/rdkafka/*/rdkafka/consumer/stream_consumer/struct.StreamConsumer.html) and [``FutureProducer``](https://docs.rs/rdkafka/*/rdkafka/producer/future_producer/struct.FutureProducer.html) depend on Tokio, which can be a heavyweight dependency for users who only intend to use the low-level consumers and producers. The Tokio integration is enabled by default, but can be disabled by turning off default features:\n```\n```[``dependencies``]`\n`rdkafka = { version = \"0.25\", default-features ``=` `false` }\n``\n```\n\nIf you would like to use an asynchronous runtime besides Tokio, you can integrate it with rust-rdkafka by providing a shim that implements the [``AsyncRuntime``](https://docs.rs/rdkafka/*/rdkafka/util/trait.AsyncRuntime.html) trait. See the following examples for details:\n  * [smol](https://github.com/fede1024/rust-rdkafka/blob/master/examples/runtime_smol.rs)\n  * [async-std](https://github.com/fede1024/rust-rdkafka/blob/master/examples/runtime_async_std.rs)\n\n\n## Examples\nYou can find examples in the [``examples``](https://github.com/fede1024/rust-rdkafka/blob/master/examples/) folder. To run them:\n```\n```cargo``` run`` --`example` `<`example_name`>` `-`- `<`example_args`>``\n`\n```\n\n## Debugging\nrust-rdkafka uses the [``log``](https://docs.rs/log) crate to handle logging. Optionally, enable the ``tracing`` feature to emit [``tracing``](https://docs.rs/tracing) events as opposed to [``log``](https://docs.rs/log) records.\nIn test and examples, rust-rdkafka uses the [``env_logger``](https://docs.rs/env_logger) crate to format logs. In those contexts, logging can be enabled using the ``RUST_LOG`` environment variable, for example:\n```\n``RUST_LOG``=````\"`librdkafka=trace,rdkafka::client=debug`\"``` ``cargo``` test`\n`\n```\n\nThis will configure the logging level of librdkafka to trace, and the level of the client module of the Rust client to debug. To actually receive logs from librdkafka, you also have to set the ``debug`` option in the producer or consumer configuration (see librdkafka [configuration](https://github.com/edenhill/librdkafka/blob/master/CONFIGURATION.md)).\nTo enable debugging in your project, make sure you initialize the logger with ```env_logger`::``init`(``)```, or the equivalent for any ``log``-compatible logging framework.\n## rdkafka-sys\nSee [rdkafka-sys](https://github.com/fede1024/rust-rdkafka/tree/master/rdkafka-sys).\n## Contributors\nThanks to:\n  * Thijs Cadier - [thijsc](https://github.com/thijsc)\n\n\n## Alternatives\n  * [kafka-rust](https://github.com/spicavigo/kafka-rust): a pure Rust implementation of the Kafka client.\n\n\n#### Dependencies\n~3\u201317MB  ~233K SLoC\n  * [futures-channel](https://lib.rs/crates/futures-channel \"0.3.0\")\n  * [naive-runtime?](https://lib.rs/crates/rdkafka/features#feature-naive-runtime \"optional feature\") [futures-executor](https://lib.rs/crates/futures-executor \"0.3.0\")\n  * [futures-util](https://lib.rs/crates/futures-util \"0.3.0\")\n  * [libc](https://lib.rs/crates/libc \"0.2.0\")\n  * [log](https://lib.rs/crates/log \"0.4.8\")\n  * [rdkafka-sys](https://lib.rs/crates/rdkafka-sys \"4.8.0\")\n  * [serde](https://lib.rs/crates/serde \"1.0.0\")[+derive](https://lib.rs/crates/serde/features#feature-derive)\n  * [serde_derive](https://lib.rs/crates/serde_derive \"1.0.0\")\n  * [serde_json](https://lib.rs/crates/serde_json \"1.0.0\")\n  * [slab](https://lib.rs/crates/slab \"0.4\")\n  * [default](https://lib.rs/crates/rdkafka/features#feature-default \"default feature\") [tokio](https://lib.rs/crates/tokio \"1.18\")[+rt](https://lib.rs/crates/tokio/features#feature-rt)[+time](https://lib.rs/crates/tokio/features#feature-time)\n  * [ optional ](https://lib.rs/crates/rdkafka/features#feature-tracing \"tracing is optional feature\") [tracing](https://lib.rs/crates/tracing \"0.1.30\")\n\n\n  * dev  [async-std](https://lib.rs/crates/async-std \"outdated\") 1.9[+attributes](https://lib.rs/crates/async-std/features#feature-attributes)\n  * dev  [backon](https://lib.rs/crates/backon \"1.2\")[+std-blocking-sleep](https://lib.rs/crates/backon/features#feature-std-blocking-sleep)\n  * dev  [chrono](https://lib.rs/crates/chrono \"0.4.0\")\n  * dev  [clap](https://lib.rs/crates/clap \"obsolete\") 2.18\n  * dev  [env_logger](https://lib.rs/crates/env_logger \"obsolete\") 0.9\n  * dev  [futures](https://lib.rs/crates/futures \"0.3.0\")\n  * dev  [hdrhistogram](https://lib.rs/crates/hdrhistogram \"7.0.0\")\n  * dev  [maplit](https://lib.rs/crates/maplit \"1.0.2\")\n  * dev  [rand](https://lib.rs/crates/rand \"obsolete\") 0.3.15\n  * dev  [regex](https://lib.rs/crates/regex \"1.1.6\")\n  * dev  [smol](https://lib.rs/crates/smol \"outdated\") 1.2\n\n\n#### [Other features](https://lib.rs/crates/rdkafka/features)\n  * [cmake-build](https://lib.rs/crates/rdkafka/features#feature-cmake-build)\n  * [cmake_build](https://lib.rs/crates/rdkafka/features#feature-cmake_build)\n  * [curl](https://lib.rs/crates/rdkafka/features#feature-curl)\n  * [curl-static](https://lib.rs/crates/rdkafka/features#feature-curl-static)\n  * [dynamic-linking](https://lib.rs/crates/rdkafka/features#feature-dynamic-linking)\n  * [dynamic_linking](https://lib.rs/crates/rdkafka/features#feature-dynamic_linking)\n  * [external-lz4](https://lib.rs/crates/rdkafka/features#feature-external-lz4)\n  * [external_lz4](https://lib.rs/crates/rdkafka/features#feature-external_lz4)\n  * [gssapi](https://lib.rs/crates/rdkafka/features#feature-gssapi)\n  * [gssapi-vendored](https://lib.rs/crates/rdkafka/features#feature-gssapi-vendored)\n  * [libz](https://lib.rs/crates/rdkafka/features#feature-libz)\n  * [libz-static](https://lib.rs/crates/rdkafka/features#feature-libz-static)\n  * [sasl](https://lib.rs/crates/rdkafka/features#feature-sasl)\n  * [ssl](https://lib.rs/crates/rdkafka/features#feature-ssl)\n  * [ssl-vendored](https://lib.rs/crates/rdkafka/features#feature-ssl-vendored)\n  * [zstd](https://lib.rs/crates/rdkafka/features#feature-zstd)\n  * [zstd-pkg-config](https://lib.rs/crates/rdkafka/features#feature-zstd-pkg-config)\n\n\n  *[SLoC]: approx. additional lines of code\n",
              "markdown_with_citations": "###  49 releases\u27e81\u27e9 (breaking)\n0.37.0 |  Nov 25, 2024   \n---|---  \n0.36.2 |  Jan 16, 2024   \n0.36.0 |  Nov 8, 2023   \n0.33.2 |  Jul 6, 2023   \n0.3.0 |  Nov 26, 2016   \n#**10** in Asynchronous\u27e82\u27e9\nDownload history 124483/week @ 2025-03-07 110229/week @ 2025-03-14 108736/week @ 2025-03-21 102024/week @ 2025-03-28 106228/week @ 2025-04-04 101365/week @ 2025-04-11 94356/week @ 2025-04-18 99556/week @ 2025-04-25 104776/week @ 2025-05-02 105345/week @ 2025-05-09 110953/week @ 2025-05-16 99875/week @ 2025-05-23 110774/week @ 2025-05-30 112306/week @ 2025-06-06 114693/week @ 2025-06-13 125006/week @ 2025-06-20\n**482,802** downloads per month Used in **153** crates (134 directly)\u27e83\u27e9\n**MIT** license \n**10MB** **138K** SLoC\nC 110K SLoC // 0.2% comments  Rust 11K SLoC // 0.0% comments  C++ 10K SLoC // 0.2% comments  Python 2.5K SLoC // 0.2% comments  Shell 1.5K SLoC // 0.2% comments  Visual Studio Project 1.5K SLoC // 0.0% comments  Visual Studio Solution 225 SLoC  Java 180 SLoC // 0.3% comments  RPM Specfile 84 SLoC // 0.1% comments  PowerShell 80 SLoC // 0.2% comments  jq 37 SLoC  Forge Config 34 SLoC  Pacman's makepkg 26 SLoC  GDB Script 23 SLoC  Batch 17 SLoC \n# rust-rdkafka\n![crates.io\u27e84\u27e9](https://crates.io/crates/rdkafka) ![docs.rs\u27e85\u27e9](https://docs.rs/rdkafka/) ![Build Status\u27e86\u27e9](https://travis-ci.org/fede1024/rust-rdkafka) ![coverate\u27e87\u27e9](https://codecov.io/gh/fede1024/rust-rdkafka/) ![Join the chat at https://gitter.im/rust-rdkafka/Lobby\u27e88\u27e9](https://gitter.im/rust-rdkafka/Lobby?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)\nA fully asynchronous, futures\u27e89\u27e9-enabled Apache Kafka\u27e810\u27e9 client library for Rust based on librdkafka\u27e811\u27e9.\n## The library\n``rust-rdkafka`` provides a safe Rust interface to librdkafka. This version is compatible with librdkafka v1.9.2+.\n### Documentation\n  * Current master branch\u27e812\u27e9\n  * Latest release\u27e813\u27e9\n  * Changelog\u27e814\u27e9\n\n\n### Features\nThe main features provided at the moment are:\n  * Support for all Kafka versions since 0.8.x. For more information about broker compatibility options, check the librdkafka documentation\u27e815\u27e9.\n  * Consume from single or multiple topics.\n  * Automatic consumer rebalancing.\n  * Customizable rebalance, with pre and post rebalance callbacks.\n  * Synchronous or asynchronous message production.\n  * Customizable offset commit.\n  * Create and delete topics and add and edit partitions.\n  * Alter broker and topic configurations.\n  * Access to cluster metadata (list of topic-partitions, replicas, active brokers etc).\n  * Access to group metadata (list groups, list members of groups, hostnames, etc.).\n  * Access to producer and consumer metrics, errors and callbacks.\n  * Exactly-once semantics (EOS) via idempotent and transactional producers and read-committed consumers.\n\n\n### One million messages per second\n``rust-rdkafka`` is designed to be easy and safe to use thanks to the abstraction layer written in Rust, while at the same time being extremely fast thanks to the librdkafka C library.\nHere are some benchmark results using the ``BaseProducer``\u27e816\u27e9, sending data to a single Kafka 0.11 process running in localhost (default configuration, 3 partitions). Hardware: Dell laptop, with Intel Core i7-4712HQ @ 2.30GHz.\n  * Scenario: produce 5 million messages, 10 bytes each, wait for all of them to be acked\n    * 1045413 messages/s, 9.970 MB/s (average over 5 runs)\n  * Scenario: produce 100000 messages, 10 KB each, wait for all of them to be acked\n    * 24623 messages/s, 234.826 MB/s (average over 5 runs)\n\n\nFor more numbers, check out the kafka-benchmark\u27e817\u27e9 project.\n### Client types\n``rust-rdkafka`` provides low level and high level consumers and producers.\nLow level:\n  * ``BaseConsumer``\u27e818\u27e9: a simple wrapper around the librdkafka consumer. It must be periodically ```poll``(``)```ed in order to execute callbacks, rebalances and to receive messages.\n  * ``BaseProducer``\u27e816\u27e9: a simple wrapper around the librdkafka producer. As in the consumer case, the user must call ```poll``(``)``` periodically to execute delivery callbacks.\n  * ``ThreadedProducer``\u27e819\u27e9: a ``BaseProducer`` with a separate thread dedicated to polling the producer.\n\n\nHigh level:\n  * ``StreamConsumer``\u27e820\u27e9: a ``Stream``\u27e821\u27e9 of messages that takes care of polling the consumer automatically.\n  * ``FutureProducer``\u27e822\u27e9: a ``Future``\u27e823\u27e9 that will be completed once the message is delivered to Kafka (or failed).\n\n\nFor more information about consumers and producers, refer to their module-level documentation.\n_Warning_ : the library is under active development and the APIs are likely to change.\n### Asynchronous data processing with Tokio\nTokio\u27e824\u27e9 is a platform for fast processing of asynchronous events in Rust. The interfaces exposed by the ``StreamConsumer``\u27e820\u27e9 and the ``FutureProducer``\u27e822\u27e9 allow rust-rdkafka users to easily integrate Kafka consumers and producers within the Tokio platform, and write asynchronous message processing code. Note that rust-rdkafka can be used without Tokio.\nTo see rust-rdkafka in action with Tokio, check out the asynchronous processing example\u27e825\u27e9 in the examples folder.\n### At-least-once delivery\nAt-least-once delivery semantics are common in many streaming applications: every message is guaranteed to be processed at least once; in case of temporary failure, the message can be re-processed and/or re-delivered, but no message will be lost.\nIn order to implement at-least-once delivery the stream processing application has to carefully commit the offset only once the message has been processed. Committing the offset too early, instead, might cause message loss, since upon recovery the consumer will start from the next message, skipping the one where the failure occurred.\nTo see how to implement at-least-once delivery with ``rdkafka``, check out the at-least-once delivery example\u27e826\u27e9 in the examples folder. To know more about delivery semantics, check the message delivery semantics\u27e827\u27e9 chapter in the Kafka documentation.\n### Exactly-once semantics\nExactly-once semantics (EOS) can be achieved using transactional producers, which allow produced records and consumer offsets to be committed or aborted atomically. Consumers that set their ``isolation`.`level`` to ``read_committed`` will only observe committed messages.\nEOS is useful in read-process-write scenarios that require messages to be processed exactly once.\nTo learn more about using transactions in rust-rdkafka, see the Transactions\u27e828\u27e9 section of the producer documentation.\n### Users\nHere are some of the projects using rust-rdkafka:\n  * timely-dataflow\u27e829\u27e9: a distributed data-parallel compute engine. See also the blog post\u27e830\u27e9 announcing its Kafka integration.\n  * kafka-view\u27e831\u27e9: a web interface for Kafka clusters.\n  * kafka-benchmark\u27e817\u27e9: a high performance benchmarking tool for Kafka.\n  * callysto\u27e832\u27e9: Stream processing framework in Rust.\n  * bytewax\u27e833\u27e9: Python stream processing framework using Timely Dataflow.\n\n\n_If you are using rust-rdkafka, please let us know!_\n## Installation\nAdd this to your ``Cargo.toml``:\n```\n```[``dependencies``]`\n`rdkafka = { version = \"0.25\", features ``=` ``[```\"`cmake-build`\"```]`` }\n``\n```\n\nThis crate will compile librdkafka from sources and link it statically to your executable. To compile librdkafka you'll need:\n  * the GNU toolchain\n  * GNU ``make``\n  * ``pthreads``\n  * ``zlib``: optional, but included by default (feature: ``libz``)\n  * ``cmake``: optional, _not_ included by default (feature: ``cmake-build``)\n  * ``libssl-dev``: optional, _not_ included by default (feature: ``ssl``)\n  * ``libsasl2-dev``: optional, _not_ included by default (feature: ``gssapi``)\n  * ``libzstd-dev``: optional, _not_ included by default (feature: ``zstd-pkg-config``)\n\n\nNote that using the CMake build system, via the ``cmake-build`` feature, is encouraged if you can take the dependency on CMake.\nBy default a submodule with the librdkafka sources pinned to a specific commit will be used to compile and statically link the library. The ``dynamic-linking`` feature can be used to instead dynamically link rdkafka to the system's version of librdkafka. Example:\n```\n```[``dependencies``]`\n`rdkafka = { version = \"0.25\", features ``=` ``[```\"`dynamic-linking`\"```]`` }\n``\n```\n\nFor a full listing of features, consult the rdkafka-sys crate's documentation\u27e834\u27e9. All of rdkafka-sys features are re-exported as rdkafka features.\n### Minimum supported Rust version (MSRV)\nThe current minimum supported Rust version (MSRV) is 1.70.0. Note that bumping the MSRV is not considered a breaking change. Any release of rust-rdkafka may bump the MSRV.\n### Asynchronous runtimes\nSome features of the ``StreamConsumer``\u27e820\u27e9 and ``FutureProducer``\u27e822\u27e9 depend on Tokio, which can be a heavyweight dependency for users who only intend to use the low-level consumers and producers. The Tokio integration is enabled by default, but can be disabled by turning off default features:\n```\n```[``dependencies``]`\n`rdkafka = { version = \"0.25\", default-features ``=` `false` }\n``\n```\n\nIf you would like to use an asynchronous runtime besides Tokio, you can integrate it with rust-rdkafka by providing a shim that implements the ``AsyncRuntime``\u27e835\u27e9 trait. See the following examples for details:\n  * smol\u27e836\u27e9\n  * async-std\u27e837\u27e9\n\n\n## Examples\nYou can find examples in the ``examples``\u27e838\u27e9 folder. To run them:\n```\n```cargo``` run`` --`example` `<`example_name`>` `-`- `<`example_args`>``\n`\n```\n\n## Debugging\nrust-rdkafka uses the ``log``\u27e839\u27e9 crate to handle logging. Optionally, enable the ``tracing`` feature to emit ``tracing``\u27e840\u27e9 events as opposed to ``log``\u27e839\u27e9 records.\nIn test and examples, rust-rdkafka uses the ``env_logger``\u27e841\u27e9 crate to format logs. In those contexts, logging can be enabled using the ``RUST_LOG`` environment variable, for example:\n```\n``RUST_LOG``=````\"`librdkafka=trace,rdkafka::client=debug`\"``` ``cargo``` test`\n`\n```\n\nThis will configure the logging level of librdkafka to trace, and the level of the client module of the Rust client to debug. To actually receive logs from librdkafka, you also have to set the ``debug`` option in the producer or consumer configuration (see librdkafka configuration\u27e842\u27e9).\nTo enable debugging in your project, make sure you initialize the logger with ```env_logger`::``init`(``)```, or the equivalent for any ``log``-compatible logging framework.\n## rdkafka-sys\nSee rdkafka-sys\u27e843\u27e9.\n## Contributors\nThanks to:\n  * Thijs Cadier - thijsc\u27e844\u27e9\n\n\n## Alternatives\n  * kafka-rust\u27e845\u27e9: a pure Rust implementation of the Kafka client.\n\n\n#### Dependencies\n~3\u201317MB  ~233K SLoC\n  * futures-channel\u27e846\u27e9\n  * naive-runtime?\u27e847\u27e9 futures-executor\u27e848\u27e9\n  * futures-util\u27e849\u27e9\n  * libc\u27e850\u27e9\n  * log\u27e851\u27e9\n  * rdkafka-sys\u27e852\u27e9\n  * serde\u27e853\u27e9+derive\u27e854\u27e9\n  * serde_derive\u27e855\u27e9\n  * serde_json\u27e856\u27e9\n  * slab\u27e857\u27e9\n  * default\u27e858\u27e9 tokio\u27e859\u27e9+rt\u27e860\u27e9+time\u27e861\u27e9\n  *  optional \u27e862\u27e9 tracing\u27e863\u27e9\n\n\n  * dev  async-std\u27e864\u27e9 1.9+attributes\u27e865\u27e9\n  * dev  backon\u27e866\u27e9+std-blocking-sleep\u27e867\u27e9\n  * dev  chrono\u27e868\u27e9\n  * dev  clap\u27e869\u27e9 2.18\n  * dev  env_logger\u27e870\u27e9 0.9\n  * dev  futures\u27e871\u27e9\n  * dev  hdrhistogram\u27e872\u27e9\n  * dev  maplit\u27e873\u27e9\n  * dev  rand\u27e874\u27e9 0.3.15\n  * dev  regex\u27e875\u27e9\n  * dev  smol\u27e876\u27e9 1.2\n\n\n#### Other features\u27e877\u27e9\n  * cmake-build\u27e878\u27e9\n  * cmake_build\u27e879\u27e9\n  * curl\u27e880\u27e9\n  * curl-static\u27e881\u27e9\n  * dynamic-linking\u27e882\u27e9\n  * dynamic_linking\u27e883\u27e9\n  * external-lz4\u27e884\u27e9\n  * external_lz4\u27e885\u27e9\n  * gssapi\u27e886\u27e9\n  * gssapi-vendored\u27e887\u27e9\n  * libz\u27e888\u27e9\n  * libz-static\u27e889\u27e9\n  * sasl\u27e890\u27e9\n  * ssl\u27e891\u27e9\n  * ssl-vendored\u27e892\u27e9\n  * zstd\u27e893\u27e9\n  * zstd-pkg-config\u27e894\u27e9\n\n\n  *[SLoC]: approx. additional lines of code\n",
              "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://lib.rs/crates/rdkafka/versions: 49 releases\n\u27e82\u27e9 https://lib.rs/asynchronous: Crates to help you deal with events independently of the main program flow, using techniques like futures, promises, waiting, or eventing. - Asynchronous\n\u27e83\u27e9 https://lib.rs/crates/rdkafka/rev: **153** crates (134 directly)\n\u27e84\u27e9 https://img.shields.io/crates/v/rdkafka.svg: ![crates.io\n\u27e85\u27e9 https://img.gs/czjpqfbdkz/full/https://docs.rs/rdkafka/badge.svg: ![docs.rs\n\u27e86\u27e9 https://img.gs/czjpqfbdkz/full/https://travis-ci.org/fede1024/rust-rdkafka.svg?branch=master: ![Build Status\n\u27e87\u27e9 https://img.gs/czjpqfbdkz/full/https://codecov.io/gh/fede1024/rust-rdkafka/graphs/badge.svg?branch=master: ![coverate\n\u27e88\u27e9 https://img.gs/czjpqfbdkz/full/https://badges.gitter.im/rust-rdkafka/Lobby.svg: ![Join the chat at https://gitter.im/rust-rdkafka/Lobby\n\u27e89\u27e9 https://github.com/rust-lang/futures-rs: futures\n\u27e810\u27e9 https://kafka.apache.org: Apache Kafka\n\u27e811\u27e9 https://github.com/edenhill/librdkafka: librdkafka\n\u27e812\u27e9 https://fede1024.github.io/rust-rdkafka/: Current master branch\n\u27e813\u27e9 https://docs.rs/rdkafka/: Latest release\n\u27e814\u27e9 https://github.com/fede1024/rust-rdkafka/blob/master/changelog.md: Changelog\n\u27e815\u27e9 https://github.com/edenhill/librdkafka/blob/master/INTRODUCTION.md#broker-version-compatibility: librdkafka documentation\n\u27e816\u27e9 https://docs.rs/rdkafka/*/rdkafka/producer/base_producer/struct.BaseProducer.html: ``BaseProducer``\n\u27e817\u27e9 https://github.com/fede1024/kafka-benchmark: kafka-benchmark\n\u27e818\u27e9 https://docs.rs/rdkafka/*/rdkafka/consumer/base_consumer/struct.BaseConsumer.html: ``BaseConsumer``\n\u27e819\u27e9 https://docs.rs/rdkafka/*/rdkafka/producer/base_producer/struct.ThreadedProducer.html: ``ThreadedProducer``\n\u27e820\u27e9 https://docs.rs/rdkafka/*/rdkafka/consumer/stream_consumer/struct.StreamConsumer.html: ``StreamConsumer``\n\u27e821\u27e9 https://docs.rs/futures/*/futures/stream/trait.Stream.html: ``Stream``\n\u27e822\u27e9 https://docs.rs/rdkafka/*/rdkafka/producer/future_producer/struct.FutureProducer.html: ``FutureProducer``\n\u27e823\u27e9 https://doc.rust-lang.org/stable/std/future/trait.Future.html: ``Future``\n\u27e824\u27e9 https://tokio.rs/: Tokio\n\u27e825\u27e9 https://github.com/fede1024/rust-rdkafka/blob/master/examples/asynchronous_processing.rs: asynchronous processing example\n\u27e826\u27e9 https://github.com/fede1024/rust-rdkafka/blob/master/examples/at_least_once.rs: at-least-once delivery example\n\u27e827\u27e9 https://kafka.apache.org/0101/documentation.html#semantics: message delivery semantics\n\u27e828\u27e9 https://github.com/fede1024/rust-rdkafka/blob/507992014d86783a93b8415650a6a456b52dda46/producer-transactions: Transactions\n\u27e829\u27e9 https://github.com/frankmcsherry/timely-dataflow: timely-dataflow\n\u27e830\u27e9 https://github.com/frankmcsherry/blog/blob/master/posts/2017-11-08.md: blog post\n\u27e831\u27e9 https://github.com/fede1024/kafka-view: kafka-view\n\u27e832\u27e9 https://github.com/vertexclique/callysto: callysto\n\u27e833\u27e9 https://github.com/bytewax/bytewax: bytewax\n\u27e834\u27e9 https://github.com/fede1024/rust-rdkafka/tree/master/rdkafka-sys/README.md#features: rdkafka-sys crate's documentation\n\u27e835\u27e9 https://docs.rs/rdkafka/*/rdkafka/util/trait.AsyncRuntime.html: ``AsyncRuntime``\n\u27e836\u27e9 https://github.com/fede1024/rust-rdkafka/blob/master/examples/runtime_smol.rs: smol\n\u27e837\u27e9 https://github.com/fede1024/rust-rdkafka/blob/master/examples/runtime_async_std.rs: async-std\n\u27e838\u27e9 https://github.com/fede1024/rust-rdkafka/blob/master/examples/: ``examples``\n\u27e839\u27e9 https://docs.rs/log: ``log``\n\u27e840\u27e9 https://docs.rs/tracing: ``tracing``\n\u27e841\u27e9 https://docs.rs/env_logger: ``env_logger``\n\u27e842\u27e9 https://github.com/edenhill/librdkafka/blob/master/CONFIGURATION.md: configuration\n\u27e843\u27e9 https://github.com/fede1024/rust-rdkafka/tree/master/rdkafka-sys: rdkafka-sys\n\u27e844\u27e9 https://github.com/thijsc: thijsc\n\u27e845\u27e9 https://github.com/spicavigo/kafka-rust: kafka-rust\n\u27e846\u27e9 https://lib.rs/crates/futures-channel: 0.3.0 - futures-channel\n\u27e847\u27e9 https://lib.rs/crates/rdkafka/features#feature-naive-runtime: optional feature - naive-runtime?\n\u27e848\u27e9 https://lib.rs/crates/futures-executor: 0.3.0 - futures-executor\n\u27e849\u27e9 https://lib.rs/crates/futures-util: 0.3.0 - futures-util\n\u27e850\u27e9 https://lib.rs/crates/libc: 0.2.0 - libc\n\u27e851\u27e9 https://lib.rs/crates/log: 0.4.8 - log\n\u27e852\u27e9 https://lib.rs/crates/rdkafka-sys: 4.8.0 - rdkafka-sys\n\u27e853\u27e9 https://lib.rs/crates/serde: 1.0.0 - serde\n\u27e854\u27e9 https://lib.rs/crates/serde/features#feature-derive: +derive\n\u27e855\u27e9 https://lib.rs/crates/serde_derive: 1.0.0 - serde_derive\n\u27e856\u27e9 https://lib.rs/crates/serde_json: 1.0.0 - serde_json\n\u27e857\u27e9 https://lib.rs/crates/slab: 0.4 - slab\n\u27e858\u27e9 https://lib.rs/crates/rdkafka/features#feature-default: default feature - default\n\u27e859\u27e9 https://lib.rs/crates/tokio: 1.18 - tokio\n\u27e860\u27e9 https://lib.rs/crates/tokio/features#feature-rt: +rt\n\u27e861\u27e9 https://lib.rs/crates/tokio/features#feature-time: +time\n\u27e862\u27e9 https://lib.rs/crates/rdkafka/features#feature-tracing: tracing is optional feature -  optional \n\u27e863\u27e9 https://lib.rs/crates/tracing: 0.1.30 - tracing\n\u27e864\u27e9 https://lib.rs/crates/async-std: outdated - async-std\n\u27e865\u27e9 https://lib.rs/crates/async-std/features#feature-attributes: +attributes\n\u27e866\u27e9 https://lib.rs/crates/backon: 1.2 - backon\n\u27e867\u27e9 https://lib.rs/crates/backon/features#feature-std-blocking-sleep: +std-blocking-sleep\n\u27e868\u27e9 https://lib.rs/crates/chrono: 0.4.0 - chrono\n\u27e869\u27e9 https://lib.rs/crates/clap: obsolete - clap\n\u27e870\u27e9 https://lib.rs/crates/env_logger: obsolete - env_logger\n\u27e871\u27e9 https://lib.rs/crates/futures: 0.3.0 - futures\n\u27e872\u27e9 https://lib.rs/crates/hdrhistogram: 7.0.0 - hdrhistogram\n\u27e873\u27e9 https://lib.rs/crates/maplit: 1.0.2 - maplit\n\u27e874\u27e9 https://lib.rs/crates/rand: obsolete - rand\n\u27e875\u27e9 https://lib.rs/crates/regex: 1.1.6 - regex\n\u27e876\u27e9 https://lib.rs/crates/smol: outdated - smol\n\u27e877\u27e9 https://lib.rs/crates/rdkafka/features: Other features\n\u27e878\u27e9 https://lib.rs/crates/rdkafka/features#feature-cmake-build: cmake-build\n\u27e879\u27e9 https://lib.rs/crates/rdkafka/features#feature-cmake_build: cmake_build\n\u27e880\u27e9 https://lib.rs/crates/rdkafka/features#feature-curl: curl\n\u27e881\u27e9 https://lib.rs/crates/rdkafka/features#feature-curl-static: curl-static\n\u27e882\u27e9 https://lib.rs/crates/rdkafka/features#feature-dynamic-linking: dynamic-linking\n\u27e883\u27e9 https://lib.rs/crates/rdkafka/features#feature-dynamic_linking: dynamic_linking\n\u27e884\u27e9 https://lib.rs/crates/rdkafka/features#feature-external-lz4: external-lz4\n\u27e885\u27e9 https://lib.rs/crates/rdkafka/features#feature-external_lz4: external_lz4\n\u27e886\u27e9 https://lib.rs/crates/rdkafka/features#feature-gssapi: gssapi\n\u27e887\u27e9 https://lib.rs/crates/rdkafka/features#feature-gssapi-vendored: gssapi-vendored\n\u27e888\u27e9 https://lib.rs/crates/rdkafka/features#feature-libz: libz\n\u27e889\u27e9 https://lib.rs/crates/rdkafka/features#feature-libz-static: libz-static\n\u27e890\u27e9 https://lib.rs/crates/rdkafka/features#feature-sasl: sasl\n\u27e891\u27e9 https://lib.rs/crates/rdkafka/features#feature-ssl: ssl\n\u27e892\u27e9 https://lib.rs/crates/rdkafka/features#feature-ssl-vendored: ssl-vendored\n\u27e893\u27e9 https://lib.rs/crates/rdkafka/features#feature-zstd: zstd\n\u27e894\u27e9 https://lib.rs/crates/rdkafka/features#feature-zstd-pkg-config: zstd-pkg-config\n",
              "fit_markdown": "",
              "fit_html": ""
            },
            "structured_data": {},
            "quality_score": 3.0,
            "extraction_method": "crawl4ai",
            "error": null,
            "metadata": {
              "doc_type": "docs",
              "content_length": 17141,
              "has_structured_data": false,
              "crawl_success": true
            },
            "timestamp": "117290.4398698"
          }
        },
        "crate_analysis": {
          "status": "completed",
          "check": [
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#equivalent@1.0.1",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\equivalent-1.0.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "equivalent",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\equivalent-1.0.1\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpdbt84qts\\rdkafka-0.37.0\\target\\debug\\deps\\libequivalent-8283021b6286cbaf.rlib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpdbt84qts\\rdkafka-0.37.0\\target\\debug\\deps\\libequivalent-8283021b6286cbaf.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#pin-project-lite@0.2.14",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\pin-project-lite-0.2.14\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "pin_project_lite",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\pin-project-lite-0.2.14\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpdbt84qts\\rdkafka-0.37.0\\target\\debug\\deps\\libpin_project_lite-549961073d782a96.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#unicode-ident@1.0.13",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\unicode-ident-1.0.13\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "unicode_ident",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\unicode-ident-1.0.13\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpdbt84qts\\rdkafka-0.37.0\\target\\debug\\deps\\libunicode_ident-53743ad8c2356484.rlib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpdbt84qts\\rdkafka-0.37.0\\target\\debug\\deps\\libunicode_ident-53743ad8c2356484.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#futures-sink@0.3.30",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\futures-sink-0.3.30\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "futures_sink",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\futures-sink-0.3.30\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "alloc",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpdbt84qts\\rdkafka-0.37.0\\target\\debug\\deps\\libfutures_sink-e0b0453c9e4b65b0.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#futures-core@0.3.30",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\futures-core-0.3.30\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "futures_core",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\futures-core-0.3.30\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "alloc",
                "default",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpdbt84qts\\rdkafka-0.37.0\\target\\debug\\deps\\libfutures_core-309bea0d94a1cccb.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#shlex@1.3.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\shlex-1.3.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "shlex",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\shlex-1.3.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpdbt84qts\\rdkafka-0.37.0\\target\\debug\\deps\\libshlex-25724775bd6ea405.rlib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpdbt84qts\\rdkafka-0.37.0\\target\\debug\\deps\\libshlex-25724775bd6ea405.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#once_cell@1.19.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.19.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "once_cell",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.19.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "alloc",
                "default",
                "race",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpdbt84qts\\rdkafka-0.37.0\\target\\debug\\deps\\libonce_cell-16f39a837472696a.rlib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpdbt84qts\\rdkafka-0.37.0\\target\\debug\\deps\\libonce_cell-16f39a837472696a.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#toml_datetime@0.6.8",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\toml_datetime-0.6.8\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "toml_datetime",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\toml_datetime-0.6.8\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpdbt84qts\\rdkafka-0.37.0\\target\\debug\\deps\\libtoml_datetime-9ff91119686e8ec9.rlib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpdbt84qts\\rdkafka-0.37.0\\target\\debug\\deps\\libtoml_datetime-9ff91119686e8ec9.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#futures-channel@0.3.30",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\futures-channel-0.3.30\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "futures_channel",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\futures-channel-0.3.30\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "alloc",
                "default",
                "futures-sink",
                "sink",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpdbt84qts\\rdkafka-0.37.0\\target\\debug\\deps\\libfutures_channel-72c5ef4436facb3d.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#futures-task@0.3.30",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\futures-task-0.3.30\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "futures_task",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\futures-task-0.3.30\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "alloc",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpdbt84qts\\rdkafka-0.37.0\\target\\debug\\deps\\libfutures_task-9bc9d4bbb1a0b4a4.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#serde_json@1.0.128",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde_json-1.0.128\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde_json-1.0.128\\build.rs",
                "edition": "2021",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpdbt84qts\\rdkafka-0.37.0\\target\\debug\\build\\serde_json-6b1f1c3ee85cc0ed\\build-script-build.exe",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpdbt84qts\\rdkafka-0.37.0\\target\\debug\\build\\serde_json-6b1f1c3ee85cc0ed\\build_script_build.pdb"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#serde@1.0.210",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde-1.0.210\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde-1.0.210\\build.rs",
                "edition": "2018",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "derive",
                "serde_derive",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpdbt84qts\\rdkafka-0.37.0\\target\\debug\\build\\serde-78802ee6ec684ad8\\build-script-build.exe",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpdbt84qts\\rdkafka-0.37.0\\target\\debug\\build\\serde-78802ee6ec684ad8\\build_script_build.pdb"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#proc-macro2@1.0.86",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\proc-macro2-1.0.86\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\proc-macro2-1.0.86\\build.rs",
                "edition": "2021",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "proc-macro"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpdbt84qts\\rdkafka-0.37.0\\target\\debug\\build\\proc-macro2-c0b3994f52be66a9\\build-script-build.exe",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpdbt84qts\\rdkafka-0.37.0\\target\\debug\\build\\proc-macro2-c0b3994f52be66a9\\build_script_build.pdb"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#libc@0.2.158",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\libc-0.2.158\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\libc-0.2.158\\build.rs",
                "edition": "2015",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "extra_traits",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpdbt84qts\\rdkafka-0.37.0\\target\\debug\\build\\libc-8d72319e869077df\\build-script-build.exe",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpdbt84qts\\rdkafka-0.37.0\\target\\debug\\build\\libc-8d72319e869077df\\build_script_build.pdb"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#futures-io@0.3.30",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\futures-io-0.3.30\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "futures_io",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\futures-io-0.3.30\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpdbt84qts\\rdkafka-0.37.0\\target\\debug\\deps\\libfutures_io-fcac8efe115eb96e.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#memchr@2.7.4",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\memchr-2.7.4\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "memchr",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\memchr-2.7.4\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "alloc",
                "default",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpdbt84qts\\rdkafka-0.37.0\\target\\debug\\deps\\libmemchr-e48551b26f942822.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#autocfg@1.3.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.3.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "autocfg",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.3.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpdbt84qts\\rdkafka-0.37.0\\target\\debug\\deps\\libautocfg-e2a9d558a9c0d2ca.rlib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpdbt84qts\\rdkafka-0.37.0\\target\\debug\\deps\\libautocfg-e2a9d558a9c0d2ca.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#ryu@1.0.18",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\ryu-1.0.18\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "ryu",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\ryu-1.0.18\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpdbt84qts\\rdkafka-0.37.0\\target\\debug\\deps\\libryu-fa255a51d092fdd1.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "build-script-executed",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#serde_json@1.0.128",
              "linked_libs": [],
              "linked_paths": [],
              "cfgs": [
                "fast_arithmetic=\"64\""
              ],
              "env": [],
              "out_dir": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpdbt84qts\\rdkafka-0.37.0\\target\\debug\\build\\serde_json-17c35ba609468caa\\out"
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#hashbrown@0.14.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\hashbrown-0.14.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "hashbrown",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\hashbrown-0.14.5\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "raw"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpdbt84qts\\rdkafka-0.37.0\\target\\debug\\deps\\libhashbrown-3bd32b86a26653cc.rlib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpdbt84qts\\rdkafka-0.37.0\\target\\debug\\deps\\libhashbrown-3bd32b86a26653cc.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#itoa@1.0.11",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\itoa-1.0.11\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "itoa",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\itoa-1.0.11\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpdbt84qts\\rdkafka-0.37.0\\target\\debug\\deps\\libitoa-7704a23ffd55f17f.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "build-script-executed",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#serde@1.0.210",
              "linked_libs": [],
              "linked_paths": [],
              "cfgs": [],
              "env": [],
              "out_dir": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpdbt84qts\\rdkafka-0.37.0\\target\\debug\\build\\serde-f0da9329a33768b8\\out"
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#value-bag@1.9.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\value-bag-1.9.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "value_bag",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\value-bag-1.9.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "inline-i128"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpdbt84qts\\rdkafka-0.37.0\\target\\debug\\deps\\libvalue_bag-82939a7a351f2e4d.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#pkg-config@0.3.30",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\pkg-config-0.3.30\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "pkg_config",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\pkg-config-0.3.30\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpdbt84qts\\rdkafka-0.37.0\\target\\debug\\deps\\libpkg_config-bf826639708d3156.rlib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpdbt84qts\\rdkafka-0.37.0\\target\\debug\\deps\\libpkg_config-bf826639708d3156.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "build-script-executed",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#proc-macro2@1.0.86",
              "linked_libs": [],
              "linked_paths": [],
              "cfgs": [
                "wrap_proc_macro"
              ],
              "env": [],
              "out_dir": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpdbt84qts\\rdkafka-0.37.0\\target\\debug\\build\\proc-macro2-5d56abe8000a765e\\out"
            },
            {
              "reason": "build-script-executed",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#libc@0.2.158",
              "linked_libs": [],
              "linked_paths": [],
              "cfgs": [
                "freebsd11",
                "libc_priv_mod_use",
                "libc_union",
                "libc_const_size_of",
                "libc_align",
                "libc_int128",
                "libc_core_cvoid",
                "libc_packedN",
                "libc_cfg_target_vendor",
                "libc_non_exhaustive",
                "libc_long_array",
                "libc_ptr_addr_of",
                "libc_underscore_const_names",
                "libc_const_extern_fn"
              ],
              "env": [],
              "out_dir": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpdbt84qts\\rdkafka-0.37.0\\target\\debug\\build\\libc-351c1ee06850a0e7\\out"
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#pin-utils@0.1.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\pin-utils-0.1.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "pin_utils",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\pin-utils-0.1.0\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpdbt84qts\\rdkafka-0.37.0\\target\\debug\\deps\\libpin_utils-9d9a9e5e1b2c045c.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#vcpkg@0.2.15",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\vcpkg-0.2.15\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "vcpkg",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\vcpkg-0.2.15\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpdbt84qts\\rdkafka-0.37.0\\target\\debug\\deps\\libvcpkg-96871fdfe7389d02.rlib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpdbt84qts\\rdkafka-0.37.0\\target\\debug\\deps\\libvcpkg-96871fdfe7389d02.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#libc@0.2.158",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\libc-0.2.158\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "libc",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\libc-0.2.158\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "extra_traits",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpdbt84qts\\rdkafka-0.37.0\\target\\debug\\deps\\liblibc-1bb9bc4ef7c9e150.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#slab@0.4.9",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.9\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.9\\build.rs",
                "edition": "2018",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpdbt84qts\\rdkafka-0.37.0\\target\\debug\\build\\slab-d30f71e64520855e\\build-script-build.exe",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpdbt84qts\\rdkafka-0.37.0\\target\\debug\\build\\slab-d30f71e64520855e\\build_script_build.pdb"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#log@0.4.22",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\log-0.4.22\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "log",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\log-0.4.22\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "kv",
                "kv_unstable",
                "std",
                "value-bag"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpdbt84qts\\rdkafka-0.37.0\\target\\debug\\deps\\liblog-ee5d78e460282fb4.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "build-script-executed",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#slab@0.4.9",
              "linked_libs": [],
              "linked_paths": [],
              "cfgs": [],
              "env": [],
              "out_dir": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpdbt84qts\\rdkafka-0.37.0\\target\\debug\\build\\slab-a3abec3b44159ee0\\out"
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#rdkafka-sys@4.8.0+2.3.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\rdkafka-sys-4.8.0+2.3.0\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\rdkafka-sys-4.8.0+2.3.0\\build.rs",
                "edition": "2018",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "libz",
                "libz-sys"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpdbt84qts\\rdkafka-0.37.0\\target\\debug\\build\\rdkafka-sys-26f4fa643683ffee\\build-script-build.exe",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpdbt84qts\\rdkafka-0.37.0\\target\\debug\\build\\rdkafka-sys-26f4fa643683ffee\\build_script_build.pdb"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#slab@0.4.9",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.9\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "slab",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.9\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpdbt84qts\\rdkafka-0.37.0\\target\\debug\\deps\\libslab-c095b8d080bac781.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#proc-macro2@1.0.86",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\proc-macro2-1.0.86\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "proc_macro2",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\proc-macro2-1.0.86\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "proc-macro"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpdbt84qts\\rdkafka-0.37.0\\target\\debug\\deps\\libproc_macro2-0a9647c2bc5e5927.rlib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpdbt84qts\\rdkafka-0.37.0\\target\\debug\\deps\\libproc_macro2-0a9647c2bc5e5927.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#indexmap@2.5.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\indexmap-2.5.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "indexmap",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\indexmap-2.5.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpdbt84qts\\rdkafka-0.37.0\\target\\debug\\deps\\libindexmap-d7838cb180afc3fa.rlib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpdbt84qts\\rdkafka-0.37.0\\target\\debug\\deps\\libindexmap-d7838cb180afc3fa.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#quote@1.0.37",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\quote-1.0.37\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "quote",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\quote-1.0.37\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "proc-macro"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpdbt84qts\\rdkafka-0.37.0\\target\\debug\\deps\\libquote-ba2090c60af347cf.rlib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpdbt84qts\\rdkafka-0.37.0\\target\\debug\\deps\\libquote-ba2090c60af347cf.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#cc@1.1.21",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\cc-1.1.21\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "cc",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\cc-1.1.21\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpdbt84qts\\rdkafka-0.37.0\\target\\debug\\deps\\libcc-7e0c2f9bf7be4010.rlib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpdbt84qts\\rdkafka-0.37.0\\target\\debug\\deps\\libcc-7e0c2f9bf7be4010.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#libz-sys@1.1.20",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\libz-sys-1.1.20\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\libz-sys-1.1.20\\build.rs",
                "edition": "2018",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "libc",
                "stock-zlib"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpdbt84qts\\rdkafka-0.37.0\\target\\debug\\build\\libz-sys-98a78e72ac19b24f\\build-script-build.exe",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpdbt84qts\\rdkafka-0.37.0\\target\\debug\\build\\libz-sys-98a78e72ac19b24f\\build_script_build.pdb"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#winnow@0.5.40",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\winnow-0.5.40\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "winnow",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\winnow-0.5.40\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "alloc",
                "default",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpdbt84qts\\rdkafka-0.37.0\\target\\debug\\deps\\libwinnow-291db06682210b22.rlib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpdbt84qts\\rdkafka-0.37.0\\target\\debug\\deps\\libwinnow-291db06682210b22.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "build-script-executed",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#libz-sys@1.1.20",
              "linked_libs": [
                "static=z"
              ],
              "linked_paths": [
                "native=C:\\Users\\davet\\AppData\\Local\\Temp\\tmpdbt84qts\\rdkafka-0.37.0\\target\\debug\\build\\libz-sys-7696bb11def5dbde\\out\\lib",
                "native=C:\\Users\\davet\\AppData\\Local\\Temp\\tmpdbt84qts\\rdkafka-0.37.0\\target\\debug\\build\\libz-sys-7696bb11def5dbde\\out\\lib"
              ],
              "cfgs": [],
              "env": [],
              "out_dir": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpdbt84qts\\rdkafka-0.37.0\\target\\debug\\build\\libz-sys-7696bb11def5dbde\\out"
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#libz-sys@1.1.20",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\libz-sys-1.1.20\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "libz_sys",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\libz-sys-1.1.20\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "libc",
                "stock-zlib"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpdbt84qts\\rdkafka-0.37.0\\target\\debug\\deps\\liblibz_sys-7131c77fe0d18bb7.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#proc-macro-crate@1.3.1",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\proc-macro-crate-1.3.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "proc_macro_crate",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\proc-macro-crate-1.3.1\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpdbt84qts\\rdkafka-0.37.0\\target\\debug\\deps\\libproc_macro_crate-053e2678f664ba3a.rlib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpdbt84qts\\rdkafka-0.37.0\\target\\debug\\deps\\libproc_macro_crate-053e2678f664ba3a.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#toml_edit@0.19.15",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\toml_edit-0.19.15\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "toml_edit",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\toml_edit-0.19.15\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpdbt84qts\\rdkafka-0.37.0\\target\\debug\\deps\\libtoml_edit-a7f5909a86ba50fd.rlib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpdbt84qts\\rdkafka-0.37.0\\target\\debug\\deps\\libtoml_edit-a7f5909a86ba50fd.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#syn@2.0.77",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\syn-2.0.77\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "syn",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\syn-2.0.77\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "clone-impls",
                "default",
                "derive",
                "full",
                "parsing",
                "printing",
                "proc-macro",
                "visit"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpdbt84qts\\rdkafka-0.37.0\\target\\debug\\deps\\libsyn-0483c050d0ae646f.rlib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpdbt84qts\\rdkafka-0.37.0\\target\\debug\\deps\\libsyn-0483c050d0ae646f.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "build-finished",
              "success": false
            }
          ],
          "clippy": [
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#proc-macro2@1.0.86",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\proc-macro2-1.0.86\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\proc-macro2-1.0.86\\build.rs",
                "edition": "2021",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "proc-macro"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpdbt84qts\\rdkafka-0.37.0\\target\\debug\\build\\proc-macro2-c0b3994f52be66a9\\build-script-build.exe",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpdbt84qts\\rdkafka-0.37.0\\target\\debug\\build\\proc-macro2-c0b3994f52be66a9\\build_script_build.pdb"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "build-script-executed",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#proc-macro2@1.0.86",
              "linked_libs": [],
              "linked_paths": [],
              "cfgs": [
                "wrap_proc_macro"
              ],
              "env": [],
              "out_dir": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpdbt84qts\\rdkafka-0.37.0\\target\\debug\\build\\proc-macro2-5d56abe8000a765e\\out"
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#unicode-ident@1.0.13",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\unicode-ident-1.0.13\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "unicode_ident",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\unicode-ident-1.0.13\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpdbt84qts\\rdkafka-0.37.0\\target\\debug\\deps\\libunicode_ident-53743ad8c2356484.rlib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpdbt84qts\\rdkafka-0.37.0\\target\\debug\\deps\\libunicode_ident-53743ad8c2356484.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#hashbrown@0.14.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\hashbrown-0.14.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "hashbrown",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\hashbrown-0.14.5\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "raw"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpdbt84qts\\rdkafka-0.37.0\\target\\debug\\deps\\libhashbrown-3bd32b86a26653cc.rlib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpdbt84qts\\rdkafka-0.37.0\\target\\debug\\deps\\libhashbrown-3bd32b86a26653cc.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#pkg-config@0.3.30",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\pkg-config-0.3.30\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "pkg_config",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\pkg-config-0.3.30\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpdbt84qts\\rdkafka-0.37.0\\target\\debug\\deps\\libpkg_config-bf826639708d3156.rlib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpdbt84qts\\rdkafka-0.37.0\\target\\debug\\deps\\libpkg_config-bf826639708d3156.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#equivalent@1.0.1",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\equivalent-1.0.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "equivalent",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\equivalent-1.0.1\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpdbt84qts\\rdkafka-0.37.0\\target\\debug\\deps\\libequivalent-8283021b6286cbaf.rlib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpdbt84qts\\rdkafka-0.37.0\\target\\debug\\deps\\libequivalent-8283021b6286cbaf.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#shlex@1.3.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\shlex-1.3.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "shlex",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\shlex-1.3.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpdbt84qts\\rdkafka-0.37.0\\target\\debug\\deps\\libshlex-25724775bd6ea405.rlib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpdbt84qts\\rdkafka-0.37.0\\target\\debug\\deps\\libshlex-25724775bd6ea405.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#vcpkg@0.2.15",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\vcpkg-0.2.15\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "vcpkg",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\vcpkg-0.2.15\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpdbt84qts\\rdkafka-0.37.0\\target\\debug\\deps\\libvcpkg-96871fdfe7389d02.rlib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpdbt84qts\\rdkafka-0.37.0\\target\\debug\\deps\\libvcpkg-96871fdfe7389d02.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#winnow@0.5.40",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\winnow-0.5.40\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "winnow",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\winnow-0.5.40\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "alloc",
                "default",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpdbt84qts\\rdkafka-0.37.0\\target\\debug\\deps\\libwinnow-291db06682210b22.rlib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpdbt84qts\\rdkafka-0.37.0\\target\\debug\\deps\\libwinnow-291db06682210b22.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#toml_datetime@0.6.8",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\toml_datetime-0.6.8\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "toml_datetime",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\toml_datetime-0.6.8\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpdbt84qts\\rdkafka-0.37.0\\target\\debug\\deps\\libtoml_datetime-9ff91119686e8ec9.rlib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpdbt84qts\\rdkafka-0.37.0\\target\\debug\\deps\\libtoml_datetime-9ff91119686e8ec9.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#libc@0.2.158",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\libc-0.2.158\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\libc-0.2.158\\build.rs",
                "edition": "2015",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "extra_traits",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpdbt84qts\\rdkafka-0.37.0\\target\\debug\\build\\libc-8d72319e869077df\\build-script-build.exe",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpdbt84qts\\rdkafka-0.37.0\\target\\debug\\build\\libc-8d72319e869077df\\build_script_build.pdb"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#once_cell@1.19.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.19.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "once_cell",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.19.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "alloc",
                "default",
                "race",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpdbt84qts\\rdkafka-0.37.0\\target\\debug\\deps\\libonce_cell-16f39a837472696a.rlib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpdbt84qts\\rdkafka-0.37.0\\target\\debug\\deps\\libonce_cell-16f39a837472696a.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#autocfg@1.3.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.3.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "autocfg",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.3.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpdbt84qts\\rdkafka-0.37.0\\target\\debug\\deps\\libautocfg-e2a9d558a9c0d2ca.rlib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpdbt84qts\\rdkafka-0.37.0\\target\\debug\\deps\\libautocfg-e2a9d558a9c0d2ca.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#serde@1.0.210",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde-1.0.210\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde-1.0.210\\build.rs",
                "edition": "2018",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "derive",
                "serde_derive",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpdbt84qts\\rdkafka-0.37.0\\target\\debug\\build\\serde-78802ee6ec684ad8\\build-script-build.exe",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpdbt84qts\\rdkafka-0.37.0\\target\\debug\\build\\serde-78802ee6ec684ad8\\build_script_build.pdb"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#futures-core@0.3.30",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\futures-core-0.3.30\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "futures_core",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\futures-core-0.3.30\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "alloc",
                "default",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpdbt84qts\\rdkafka-0.37.0\\target\\debug\\deps\\libfutures_core-309bea0d94a1cccb.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#memchr@2.7.4",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\memchr-2.7.4\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "memchr",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\memchr-2.7.4\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "alloc",
                "default",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpdbt84qts\\rdkafka-0.37.0\\target\\debug\\deps\\libmemchr-e48551b26f942822.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#pin-project-lite@0.2.14",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\pin-project-lite-0.2.14\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "pin_project_lite",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\pin-project-lite-0.2.14\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpdbt84qts\\rdkafka-0.37.0\\target\\debug\\deps\\libpin_project_lite-549961073d782a96.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#proc-macro2@1.0.86",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\proc-macro2-1.0.86\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "proc_macro2",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\proc-macro2-1.0.86\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "proc-macro"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpdbt84qts\\rdkafka-0.37.0\\target\\debug\\deps\\libproc_macro2-0a9647c2bc5e5927.rlib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpdbt84qts\\rdkafka-0.37.0\\target\\debug\\deps\\libproc_macro2-0a9647c2bc5e5927.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#indexmap@2.5.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\indexmap-2.5.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "indexmap",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\indexmap-2.5.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpdbt84qts\\rdkafka-0.37.0\\target\\debug\\deps\\libindexmap-d7838cb180afc3fa.rlib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpdbt84qts\\rdkafka-0.37.0\\target\\debug\\deps\\libindexmap-d7838cb180afc3fa.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#cc@1.1.21",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\cc-1.1.21\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "cc",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\cc-1.1.21\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpdbt84qts\\rdkafka-0.37.0\\target\\debug\\deps\\libcc-7e0c2f9bf7be4010.rlib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpdbt84qts\\rdkafka-0.37.0\\target\\debug\\deps\\libcc-7e0c2f9bf7be4010.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "build-script-executed",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#libc@0.2.158",
              "linked_libs": [],
              "linked_paths": [],
              "cfgs": [
                "freebsd11",
                "libc_priv_mod_use",
                "libc_union",
                "libc_const_size_of",
                "libc_align",
                "libc_int128",
                "libc_core_cvoid",
                "libc_packedN",
                "libc_cfg_target_vendor",
                "libc_non_exhaustive",
                "libc_long_array",
                "libc_ptr_addr_of",
                "libc_underscore_const_names",
                "libc_const_extern_fn"
              ],
              "env": [],
              "out_dir": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpdbt84qts\\rdkafka-0.37.0\\target\\debug\\build\\libc-351c1ee06850a0e7\\out"
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#slab@0.4.9",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.9\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.9\\build.rs",
                "edition": "2018",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpdbt84qts\\rdkafka-0.37.0\\target\\debug\\build\\slab-d30f71e64520855e\\build-script-build.exe",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpdbt84qts\\rdkafka-0.37.0\\target\\debug\\build\\slab-d30f71e64520855e\\build_script_build.pdb"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "build-script-executed",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#serde@1.0.210",
              "linked_libs": [],
              "linked_paths": [],
              "cfgs": [],
              "env": [],
              "out_dir": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpdbt84qts\\rdkafka-0.37.0\\target\\debug\\build\\serde-f0da9329a33768b8\\out"
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#rdkafka-sys@4.8.0+2.3.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\rdkafka-sys-4.8.0+2.3.0\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\rdkafka-sys-4.8.0+2.3.0\\build.rs",
                "edition": "2018",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "libz",
                "libz-sys"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpdbt84qts\\rdkafka-0.37.0\\target\\debug\\build\\rdkafka-sys-26f4fa643683ffee\\build-script-build.exe",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpdbt84qts\\rdkafka-0.37.0\\target\\debug\\build\\rdkafka-sys-26f4fa643683ffee\\build_script_build.pdb"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#futures-sink@0.3.30",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\futures-sink-0.3.30\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "futures_sink",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\futures-sink-0.3.30\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "alloc",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpdbt84qts\\rdkafka-0.37.0\\target\\debug\\deps\\libfutures_sink-e0b0453c9e4b65b0.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#serde_json@1.0.128",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde_json-1.0.128\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde_json-1.0.128\\build.rs",
                "edition": "2021",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpdbt84qts\\rdkafka-0.37.0\\target\\debug\\build\\serde_json-6b1f1c3ee85cc0ed\\build-script-build.exe",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpdbt84qts\\rdkafka-0.37.0\\target\\debug\\build\\serde_json-6b1f1c3ee85cc0ed\\build_script_build.pdb"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#futures-io@0.3.30",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\futures-io-0.3.30\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "futures_io",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\futures-io-0.3.30\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpdbt84qts\\rdkafka-0.37.0\\target\\debug\\deps\\libfutures_io-fcac8efe115eb96e.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#itoa@1.0.11",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\itoa-1.0.11\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "itoa",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\itoa-1.0.11\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpdbt84qts\\rdkafka-0.37.0\\target\\debug\\deps\\libitoa-7704a23ffd55f17f.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#value-bag@1.9.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\value-bag-1.9.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "value_bag",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\value-bag-1.9.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "inline-i128"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpdbt84qts\\rdkafka-0.37.0\\target\\debug\\deps\\libvalue_bag-82939a7a351f2e4d.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#futures-task@0.3.30",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\futures-task-0.3.30\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "futures_task",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\futures-task-0.3.30\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "alloc",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpdbt84qts\\rdkafka-0.37.0\\target\\debug\\deps\\libfutures_task-9bc9d4bbb1a0b4a4.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#ryu@1.0.18",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\ryu-1.0.18\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "ryu",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\ryu-1.0.18\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpdbt84qts\\rdkafka-0.37.0\\target\\debug\\deps\\libryu-fa255a51d092fdd1.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#pin-utils@0.1.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\pin-utils-0.1.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "pin_utils",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\pin-utils-0.1.0\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpdbt84qts\\rdkafka-0.37.0\\target\\debug\\deps\\libpin_utils-9d9a9e5e1b2c045c.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#quote@1.0.37",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\quote-1.0.37\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "quote",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\quote-1.0.37\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "proc-macro"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpdbt84qts\\rdkafka-0.37.0\\target\\debug\\deps\\libquote-ba2090c60af347cf.rlib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpdbt84qts\\rdkafka-0.37.0\\target\\debug\\deps\\libquote-ba2090c60af347cf.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#libz-sys@1.1.20",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\libz-sys-1.1.20\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\libz-sys-1.1.20\\build.rs",
                "edition": "2018",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "libc",
                "stock-zlib"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpdbt84qts\\rdkafka-0.37.0\\target\\debug\\build\\libz-sys-98a78e72ac19b24f\\build-script-build.exe",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpdbt84qts\\rdkafka-0.37.0\\target\\debug\\build\\libz-sys-98a78e72ac19b24f\\build_script_build.pdb"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#toml_edit@0.19.15",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\toml_edit-0.19.15\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "toml_edit",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\toml_edit-0.19.15\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpdbt84qts\\rdkafka-0.37.0\\target\\debug\\deps\\libtoml_edit-a7f5909a86ba50fd.rlib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpdbt84qts\\rdkafka-0.37.0\\target\\debug\\deps\\libtoml_edit-a7f5909a86ba50fd.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#libc@0.2.158",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\libc-0.2.158\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "libc",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\libc-0.2.158\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "extra_traits",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpdbt84qts\\rdkafka-0.37.0\\target\\debug\\deps\\liblibc-1bb9bc4ef7c9e150.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "build-script-executed",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#slab@0.4.9",
              "linked_libs": [],
              "linked_paths": [],
              "cfgs": [],
              "env": [],
              "out_dir": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpdbt84qts\\rdkafka-0.37.0\\target\\debug\\build\\slab-a3abec3b44159ee0\\out"
            },
            {
              "reason": "build-script-executed",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#serde_json@1.0.128",
              "linked_libs": [],
              "linked_paths": [],
              "cfgs": [
                "fast_arithmetic=\"64\""
              ],
              "env": [],
              "out_dir": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpdbt84qts\\rdkafka-0.37.0\\target\\debug\\build\\serde_json-17c35ba609468caa\\out"
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#futures-channel@0.3.30",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\futures-channel-0.3.30\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "futures_channel",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\futures-channel-0.3.30\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "alloc",
                "default",
                "futures-sink",
                "sink",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpdbt84qts\\rdkafka-0.37.0\\target\\debug\\deps\\libfutures_channel-72c5ef4436facb3d.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#log@0.4.22",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\log-0.4.22\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "log",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\log-0.4.22\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "kv",
                "kv_unstable",
                "std",
                "value-bag"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpdbt84qts\\rdkafka-0.37.0\\target\\debug\\deps\\liblog-ee5d78e460282fb4.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#syn@2.0.77",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\syn-2.0.77\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "syn",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\syn-2.0.77\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "clone-impls",
                "default",
                "derive",
                "full",
                "parsing",
                "printing",
                "proc-macro",
                "visit"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpdbt84qts\\rdkafka-0.37.0\\target\\debug\\deps\\libsyn-0483c050d0ae646f.rlib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpdbt84qts\\rdkafka-0.37.0\\target\\debug\\deps\\libsyn-0483c050d0ae646f.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "build-script-executed",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#libz-sys@1.1.20",
              "linked_libs": [
                "static=z"
              ],
              "linked_paths": [
                "native=C:\\Users\\davet\\AppData\\Local\\Temp\\tmpdbt84qts\\rdkafka-0.37.0\\target\\debug\\build\\libz-sys-7696bb11def5dbde\\out\\lib",
                "native=C:\\Users\\davet\\AppData\\Local\\Temp\\tmpdbt84qts\\rdkafka-0.37.0\\target\\debug\\build\\libz-sys-7696bb11def5dbde\\out\\lib"
              ],
              "cfgs": [],
              "env": [],
              "out_dir": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpdbt84qts\\rdkafka-0.37.0\\target\\debug\\build\\libz-sys-7696bb11def5dbde\\out"
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#proc-macro-crate@1.3.1",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\proc-macro-crate-1.3.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "proc_macro_crate",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\proc-macro-crate-1.3.1\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpdbt84qts\\rdkafka-0.37.0\\target\\debug\\deps\\libproc_macro_crate-053e2678f664ba3a.rlib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpdbt84qts\\rdkafka-0.37.0\\target\\debug\\deps\\libproc_macro_crate-053e2678f664ba3a.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#slab@0.4.9",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.9\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "slab",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.9\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpdbt84qts\\rdkafka-0.37.0\\target\\debug\\deps\\libslab-c095b8d080bac781.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#libz-sys@1.1.20",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\libz-sys-1.1.20\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "libz_sys",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\libz-sys-1.1.20\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "libc",
                "stock-zlib"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpdbt84qts\\rdkafka-0.37.0\\target\\debug\\deps\\liblibz_sys-7131c77fe0d18bb7.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#tokio-macros@2.4.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\tokio-macros-2.4.0\\Cargo.toml",
              "target": {
                "kind": [
                  "proc-macro"
                ],
                "crate_types": [
                  "proc-macro"
                ],
                "name": "tokio_macros",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\tokio-macros-2.4.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpdbt84qts\\rdkafka-0.37.0\\target\\debug\\deps\\tokio_macros-4aa99e85f27e4dcc.dll",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpdbt84qts\\rdkafka-0.37.0\\target\\debug\\deps\\tokio_macros-4aa99e85f27e4dcc.dll.lib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpdbt84qts\\rdkafka-0.37.0\\target\\debug\\deps\\tokio_macros-4aa99e85f27e4dcc.dll.exp",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpdbt84qts\\rdkafka-0.37.0\\target\\debug\\deps\\tokio_macros-4aa99e85f27e4dcc.pdb"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#futures-macro@0.3.30",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\futures-macro-0.3.30\\Cargo.toml",
              "target": {
                "kind": [
                  "proc-macro"
                ],
                "crate_types": [
                  "proc-macro"
                ],
                "name": "futures_macro",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\futures-macro-0.3.30\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpdbt84qts\\rdkafka-0.37.0\\target\\debug\\deps\\futures_macro-8a3e0e4fd5bd7b93.dll",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpdbt84qts\\rdkafka-0.37.0\\target\\debug\\deps\\futures_macro-8a3e0e4fd5bd7b93.dll.lib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpdbt84qts\\rdkafka-0.37.0\\target\\debug\\deps\\futures_macro-8a3e0e4fd5bd7b93.dll.exp",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpdbt84qts\\rdkafka-0.37.0\\target\\debug\\deps\\futures_macro-8a3e0e4fd5bd7b93.pdb"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#num_enum_derive@0.7.3",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num_enum_derive-0.7.3\\Cargo.toml",
              "target": {
                "kind": [
                  "proc-macro"
                ],
                "crate_types": [
                  "proc-macro"
                ],
                "name": "num_enum_derive",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num_enum_derive-0.7.3\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "proc-macro-crate",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpdbt84qts\\rdkafka-0.37.0\\target\\debug\\deps\\num_enum_derive-bf8ee1ab54e672e4.dll",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpdbt84qts\\rdkafka-0.37.0\\target\\debug\\deps\\num_enum_derive-bf8ee1ab54e672e4.dll.lib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpdbt84qts\\rdkafka-0.37.0\\target\\debug\\deps\\num_enum_derive-bf8ee1ab54e672e4.dll.exp",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpdbt84qts\\rdkafka-0.37.0\\target\\debug\\deps\\num_enum_derive-bf8ee1ab54e672e4.pdb"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#serde_derive@1.0.210",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde_derive-1.0.210\\Cargo.toml",
              "target": {
                "kind": [
                  "proc-macro"
                ],
                "crate_types": [
                  "proc-macro"
                ],
                "name": "serde_derive",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde_derive-1.0.210\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpdbt84qts\\rdkafka-0.37.0\\target\\debug\\deps\\serde_derive-85aabd970eebc14f.dll",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpdbt84qts\\rdkafka-0.37.0\\target\\debug\\deps\\serde_derive-85aabd970eebc14f.dll.lib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpdbt84qts\\rdkafka-0.37.0\\target\\debug\\deps\\serde_derive-85aabd970eebc14f.dll.exp",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpdbt84qts\\rdkafka-0.37.0\\target\\debug\\deps\\serde_derive-85aabd970eebc14f.pdb"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "build-finished",
              "success": false
            }
          ],
          "audit": {
            "database": {
              "advisory-count": 787,
              "last-commit": "7573f55ba337263f61167dbb0ea926cdc7c8eb5d",
              "last-updated": "2025-06-17T11:04:25+02:00"
            },
            "lockfile": {
              "dependency-count": 189
            },
            "settings": {
              "target_arch": [],
              "target_os": [],
              "severity": null,
              "ignore": [],
              "informational_warnings": [
                "unmaintained",
                "unsound",
                "notice"
              ]
            },
            "vulnerabilities": {
              "found": true,
              "count": 1,
              "list": [
                {
                  "advisory": {
                    "id": "RUSTSEC-2025-0024",
                    "package": "crossbeam-channel",
                    "title": "crossbeam-channel: double free on Drop",
                    "description": "The internal `Channel` type's `Drop` method has a race\nwhich could, in some circumstances, lead to a double-free.\nThis could result in memory corruption.\n\nQuoting from the\n[upstream description in merge request \\#1187](https://github.com/crossbeam-rs/crossbeam/pull/1187#issue-2980761131):\n\n> The problem lies in the fact that `dicard_all_messages` contained two paths that could lead to `head.block` being read but only one of them would swap the value. This meant that `dicard_all_messages` could end up observing a non-null block pointer (and therefore attempting to free it) without setting `head.block` to null. This would then lead to `Channel::drop` making a second attempt at dropping the same pointer.\n\nThe bug was introduced while fixing a memory leak, in\nupstream [MR \\#1084](https://github.com/crossbeam-rs/crossbeam/pull/1084),\nfirst published in 0.5.12.\n\nThe fix is in\nupstream [MR \\#1187](https://github.com/crossbeam-rs/crossbeam/pull/1187)\nand has been published in 0.5.15",
                    "date": "2025-04-08",
                    "aliases": [
                      "TROVE-2025-013"
                    ],
                    "related": [],
                    "collection": "crates",
                    "categories": [
                      "memory-corruption"
                    ],
                    "keywords": [
                      "race"
                    ],
                    "cvss": null,
                    "informational": null,
                    "references": [],
                    "source": null,
                    "url": "https://github.com/crossbeam-rs/crossbeam/pull/1187",
                    "withdrawn": null,
                    "license": "CC0-1.0"
                  },
                  "versions": {
                    "patched": [
                      ">=0.5.15"
                    ],
                    "unaffected": [
                      "<=0.5.11"
                    ]
                  },
                  "affected": null,
                  "package": {
                    "name": "crossbeam-channel",
                    "version": "0.5.13",
                    "source": "registry+https://github.com/rust-lang/crates.io-index",
                    "checksum": "33480d6946193aa8033910124896ca395333cae7e2d1113d1fef6c3272217df2",
                    "dependencies": [
                      {
                        "name": "crossbeam-utils",
                        "version": "0.8.20",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      }
                    ],
                    "replace": null
                  }
                }
              ]
            },
            "warnings": {
              "unmaintained": [
                {
                  "kind": "unmaintained",
                  "package": {
                    "name": "ansi_term",
                    "version": "0.12.1",
                    "source": "registry+https://github.com/rust-lang/crates.io-index",
                    "checksum": "d52a9bb7ec0cf484c551830a7ce27bd20d67eac647e1befb56b0be4ee39a55d2",
                    "dependencies": [
                      {
                        "name": "winapi",
                        "version": "0.3.9",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      }
                    ],
                    "replace": null
                  },
                  "advisory": {
                    "id": "RUSTSEC-2021-0139",
                    "package": "ansi_term",
                    "title": "ansi_term is Unmaintained",
                    "description": "The maintainer has advised that this crate is deprecated and will not receive any maintenance.\n\nThe crate does not seem to have much dependencies and may or may not be ok to use as-is.\n\nLast release seems to have been three years ago.\n\n## Possible Alternative(s)\n\n The below list has not been vetted in any way and may or may not contain alternatives;\n\n - [ansiterm](https://crates.io/crates/ansiterm)\n - [anstyle](https://github.com/epage/anstyle)\n - [console](https://crates.io/crates/console)\n - [nu-ansi-term](https://crates.io/crates/nu-ansi-term)\n - [owo-colors](https://crates.io/crates/owo-colors)\n - [stylish](https://crates.io/crates/stylish)\n - [yansi](https://crates.io/crates/yansi)\n\n## Dependency Specific Migration(s)\n\n - [structopt, clap2](https://github.com/clap-rs/clap/discussions/4172)",
                    "date": "2021-08-18",
                    "aliases": [],
                    "related": [],
                    "collection": "crates",
                    "categories": [],
                    "keywords": [],
                    "cvss": null,
                    "informational": "unmaintained",
                    "references": [],
                    "source": null,
                    "url": "https://github.com/ogham/rust-ansi-term/issues/72",
                    "withdrawn": null,
                    "license": "CC0-1.0"
                  },
                  "affected": null,
                  "versions": {
                    "patched": [],
                    "unaffected": []
                  }
                },
                {
                  "kind": "unmaintained",
                  "package": {
                    "name": "atty",
                    "version": "0.2.14",
                    "source": "registry+https://github.com/rust-lang/crates.io-index",
                    "checksum": "d9b39be18770d11421cdb1b9947a45dd3f37e93092cbf377614828a319d5fee8",
                    "dependencies": [
                      {
                        "name": "hermit-abi",
                        "version": "0.1.19",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "libc",
                        "version": "0.2.158",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "winapi",
                        "version": "0.3.9",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      }
                    ],
                    "replace": null
                  },
                  "advisory": {
                    "id": "RUSTSEC-2024-0375",
                    "package": "atty",
                    "title": "`atty` is unmaintained",
                    "description": "The maintainer of `atty` has [published](https://github.com/softprops/atty/commit/5bfdbe9e48c6ca6a4909e8d5b04f5e843a257e93) an official notice that the crate is no longer\nunder development, and that users should instead rely on the functionality in the standard library's [`IsTerminal`](https://doc.rust-lang.org/std/io/trait.IsTerminal.html) trait.\n\n## Alternative(s)\n\n- [std::io::IsTerminal](https://doc.rust-lang.org/stable/std/io/trait.IsTerminal.html) - Stable since Rust 1.70.0 and the recommended replacement per the `atty` maintainer.\n- [is-terminal](https://crates.io/crates/is-terminal) - Standalone crate supporting Rust older than 1.70.0",
                    "date": "2024-09-25",
                    "aliases": [],
                    "related": [],
                    "collection": "crates",
                    "categories": [],
                    "keywords": [],
                    "cvss": null,
                    "informational": "unmaintained",
                    "references": [],
                    "source": null,
                    "url": "https://github.com/softprops/atty/issues/57",
                    "withdrawn": null,
                    "license": "CC0-1.0"
                  },
                  "affected": null,
                  "versions": {
                    "patched": [],
                    "unaffected": []
                  }
                },
                {
                  "kind": "unmaintained",
                  "package": {
                    "name": "instant",
                    "version": "0.1.13",
                    "source": "registry+https://github.com/rust-lang/crates.io-index",
                    "checksum": "e0242819d153cba4b4b05a5a8f2a7e9bbf97b6055b2a002b395c96b5ff3c0222",
                    "dependencies": [
                      {
                        "name": "cfg-if",
                        "version": "1.0.0",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      }
                    ],
                    "replace": null
                  },
                  "advisory": {
                    "id": "RUSTSEC-2024-0384",
                    "package": "instant",
                    "title": "`instant` is unmaintained",
                    "description": "This crate is no longer maintained, and the author recommends using the maintained [`web-time`] crate instead.\n\n[`web-time`]: https://crates.io/crates/web-time",
                    "date": "2024-09-01",
                    "aliases": [],
                    "related": [],
                    "collection": "crates",
                    "categories": [],
                    "keywords": [],
                    "cvss": null,
                    "informational": "unmaintained",
                    "references": [
                      "https://crates.io/crates/instant/0.1.13",
                      "https://github.com/sebcrozet/instant/issues/52"
                    ],
                    "source": null,
                    "url": null,
                    "withdrawn": null,
                    "license": "CC0-1.0"
                  },
                  "affected": null,
                  "versions": {
                    "patched": [],
                    "unaffected": []
                  }
                }
              ],
              "unsound": [
                {
                  "kind": "unsound",
                  "package": {
                    "name": "atty",
                    "version": "0.2.14",
                    "source": "registry+https://github.com/rust-lang/crates.io-index",
                    "checksum": "d9b39be18770d11421cdb1b9947a45dd3f37e93092cbf377614828a319d5fee8",
                    "dependencies": [
                      {
                        "name": "hermit-abi",
                        "version": "0.1.19",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "libc",
                        "version": "0.2.158",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "winapi",
                        "version": "0.3.9",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      }
                    ],
                    "replace": null
                  },
                  "advisory": {
                    "id": "RUSTSEC-2021-0145",
                    "package": "atty",
                    "title": "Potential unaligned read",
                    "description": "On windows, `atty` dereferences a potentially unaligned pointer.\n\nIn practice however, the pointer won't be unaligned unless a custom global allocator is used.\n\nIn particular, the `System` allocator on windows uses `HeapAlloc`, which guarantees a large enough alignment.\n\n# atty is Unmaintained\n\nA Pull Request with a fix has been provided over a year ago but the maintainer seems to be unreachable.\n\nLast release of `atty` was almost 3 years ago.\n\n## Possible Alternative(s)\n\nThe below list has not been vetted in any way and may or may not contain alternatives;\n\n - [std::io::IsTerminal](https://doc.rust-lang.org/stable/std/io/trait.IsTerminal.html) - Stable since Rust 1.70.0\n - [is-terminal](https://crates.io/crates/is-terminal) - Standalone crate supporting Rust older than 1.70.0",
                    "date": "2021-07-04",
                    "aliases": [
                      "GHSA-g98v-hv3f-hcfr"
                    ],
                    "related": [],
                    "collection": "crates",
                    "categories": [],
                    "keywords": [
                      "unaligned-read"
                    ],
                    "cvss": null,
                    "informational": "unsound",
                    "references": [
                      "https://github.com/softprops/atty/pull/51",
                      "https://github.com/softprops/atty/issues/57"
                    ],
                    "source": null,
                    "url": "https://github.com/softprops/atty/issues/50",
                    "withdrawn": null,
                    "license": "CC0-1.0"
                  },
                  "affected": {
                    "arch": [],
                    "os": [
                      "windows"
                    ],
                    "functions": {}
                  },
                  "versions": {
                    "patched": [],
                    "unaffected": []
                  }
                },
                {
                  "kind": "unsound",
                  "package": {
                    "name": "tokio",
                    "version": "1.40.0",
                    "source": "registry+https://github.com/rust-lang/crates.io-index",
                    "checksum": "e2b070231665d27ad9ec9b8df639893f46727666c6767db40317fbe920a5d998",
                    "dependencies": [
                      {
                        "name": "backtrace",
                        "version": "0.3.74",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "pin-project-lite",
                        "version": "0.2.14",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "tokio-macros",
                        "version": "2.4.0",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      }
                    ],
                    "replace": null
                  },
                  "advisory": {
                    "id": "RUSTSEC-2025-0023",
                    "package": "tokio",
                    "title": "Broadcast channel calls clone in parallel, but does not require `Sync`",
                    "description": "The broadcast channel internally calls `clone` on the stored value when\nreceiving it, and only requires `T:Send`. This means that using the broadcast\nchannel with values that are `Send` but not `Sync` can trigger unsoundness if\nthe `clone` implementation makes use of the value being `!Sync`.\n\nThank you to Austin Bonander for finding and reporting this issue.",
                    "date": "2025-04-07",
                    "aliases": [],
                    "related": [],
                    "collection": "crates",
                    "categories": [
                      "memory-corruption"
                    ],
                    "keywords": [],
                    "cvss": null,
                    "informational": "unsound",
                    "references": [],
                    "source": null,
                    "url": "https://github.com/tokio-rs/tokio/pull/7232",
                    "withdrawn": null,
                    "license": "CC0-1.0"
                  },
                  "affected": null,
                  "versions": {
                    "patched": [
                      ">=1.38.2, <1.39.0",
                      ">=1.42.1, <1.43.0",
                      ">=1.43.1, <1.44.0",
                      ">=1.44.2"
                    ],
                    "unaffected": [
                      "<0.2.5"
                    ]
                  }
                }
              ],
              "yanked": [
                {
                  "kind": "yanked",
                  "package": {
                    "name": "crossbeam-channel",
                    "version": "0.5.13",
                    "source": "registry+https://github.com/rust-lang/crates.io-index",
                    "checksum": "33480d6946193aa8033910124896ca395333cae7e2d1113d1fef6c3272217df2",
                    "dependencies": [
                      {
                        "name": "crossbeam-utils",
                        "version": "0.8.20",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      }
                    ],
                    "replace": null
                  },
                  "advisory": null,
                  "affected": null,
                  "versions": null
                },
                {
                  "kind": "yanked",
                  "package": {
                    "name": "futures-util",
                    "version": "0.3.30",
                    "source": "registry+https://github.com/rust-lang/crates.io-index",
                    "checksum": "3d6401deb83407ab3da39eba7e33987a73c3df0c82b4bb5813ee871c19c41d48",
                    "dependencies": [
                      {
                        "name": "futures-channel",
                        "version": "0.3.30",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "futures-core",
                        "version": "0.3.30",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "futures-io",
                        "version": "0.3.30",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "futures-macro",
                        "version": "0.3.30",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "futures-sink",
                        "version": "0.3.30",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "futures-task",
                        "version": "0.3.30",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "memchr",
                        "version": "2.7.4",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "pin-project-lite",
                        "version": "0.2.14",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "pin-utils",
                        "version": "0.1.0",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "slab",
                        "version": "0.4.9",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      }
                    ],
                    "replace": null
                  },
                  "advisory": null,
                  "affected": null,
                  "versions": null
                }
              ]
            }
          },
          "note": "Crate analysis performed with stable toolchain."
        },
        "crate_metadata": {
          "name": "rdkafka",
          "version": "0.37.0",
          "description": "ALLOW: Positive community sentiment",
          "repository": "",
          "keywords": [],
          "categories": [],
          "readme": {
            "raw_markdown": "[](https://docs.rs/rdkafka/latest/rdkafka/all.html \"show sidebar\")\n# Crate rdkafkaCopy item path\n[Settings](https://docs.rs/rdkafka/latest/settings.html)\n[Help](https://docs.rs/rdkafka/latest/help.html)\nSummary[Source](https://docs.rs/rdkafka/latest/src/rdkafka/lib.rs.html#1-297)\nExpand description\nA fully asynchronous, [futures](https://github.com/rust-lang/futures-rs)-enabled [Apache Kafka](https://kafka.apache.org) client library for Rust based on [librdkafka](https://github.com/edenhill/librdkafka).\n### [\u00a7](https://docs.rs/rdkafka/latest/rdkafka/#the-library)The library\n`rust-rdkafka` provides a safe Rust interface to librdkafka. This version is compatible with librdkafka v1.9.2+.\n#### [\u00a7](https://docs.rs/rdkafka/latest/rdkafka/#documentation)Documentation\n  * [Current master branch](https://fede1024.github.io/rust-rdkafka/)\n  * [Latest release](https://docs.rs/rdkafka/)\n  * [Changelog](https://github.com/fede1024/rust-rdkafka/blob/master/changelog.md)\n\n\n#### [\u00a7](https://docs.rs/rdkafka/latest/rdkafka/#features)Features\nThe main features provided at the moment are:\n  * Support for all Kafka versions since 0.8.x. For more information about broker compatibility options, check the [librdkafka documentation](https://github.com/edenhill/librdkafka/blob/master/INTRODUCTION.md#broker-version-compatibility).\n  * Consume from single or multiple topics.\n  * Automatic consumer rebalancing.\n  * Customizable rebalance, with pre and post rebalance callbacks.\n  * Synchronous or asynchronous message production.\n  * Customizable offset commit.\n  * Create and delete topics and add and edit partitions.\n  * Alter broker and topic configurations.\n  * Access to cluster metadata (list of topic-partitions, replicas, active brokers etc).\n  * Access to group metadata (list groups, list members of groups, hostnames, etc.).\n  * Access to producer and consumer metrics, errors and callbacks.\n  * Exactly-once semantics (EOS) via idempotent and transactional producers and read-committed consumers.\n\n\n#### [\u00a7](https://docs.rs/rdkafka/latest/rdkafka/#one-million-messages-per-second)One million messages per second\n`rust-rdkafka` is designed to be easy and safe to use thanks to the abstraction layer written in Rust, while at the same time being extremely fast thanks to the librdkafka C library.\nHere are some benchmark results using the [`BaseProducer`](https://docs.rs/rdkafka/*/rdkafka/producer/base_producer/struct.BaseProducer.html), sending data to a single Kafka 0.11 process running in localhost (default configuration, 3 partitions). Hardware: Dell laptop, with Intel Core i7-4712HQ @ 2.30GHz.\n  * Scenario: produce 5 million messages, 10 bytes each, wait for all of them to be acked\n    * 1045413 messages/s, 9.970 MB/s (average over 5 runs)\n  * Scenario: produce 100000 messages, 10 KB each, wait for all of them to be acked\n    * 24623 messages/s, 234.826 MB/s (average over 5 runs)\n\n\nFor more numbers, check out the [kafka-benchmark](https://github.com/fede1024/kafka-benchmark) project.\n#### [\u00a7](https://docs.rs/rdkafka/latest/rdkafka/#client-types)Client types\n`rust-rdkafka` provides low level and high level consumers and producers.\nLow level:\n  * [`BaseConsumer`](https://docs.rs/rdkafka/*/rdkafka/consumer/base_consumer/struct.BaseConsumer.html): a simple wrapper around the librdkafka consumer. It must be periodically `poll()`ed in order to execute callbacks, rebalances and to receive messages.\n  * [`BaseProducer`](https://docs.rs/rdkafka/*/rdkafka/producer/base_producer/struct.BaseProducer.html): a simple wrapper around the librdkafka producer. As in the consumer case, the user must call `poll()` periodically to execute delivery callbacks.\n  * [`ThreadedProducer`](https://docs.rs/rdkafka/*/rdkafka/producer/base_producer/struct.ThreadedProducer.html): a `BaseProducer` with a separate thread dedicated to polling the producer.\n\n\nHigh level:\n  * [`StreamConsumer`](https://docs.rs/rdkafka/*/rdkafka/consumer/stream_consumer/struct.StreamConsumer.html): a [`Stream`](https://docs.rs/futures/*/futures/stream/trait.Stream.html) of messages that takes care of polling the consumer automatically.\n  * [`FutureProducer`](https://docs.rs/rdkafka/*/rdkafka/producer/future_producer/struct.FutureProducer.html): a [`Future`](https://doc.rust-lang.org/stable/std/future/trait.Future.html) that will be completed once the message is delivered to Kafka (or failed).\n\n\nFor more information about consumers and producers, refer to their module-level documentation.\n_Warning_ : the library is under active development and the APIs are likely to change.\n#### [\u00a7](https://docs.rs/rdkafka/latest/rdkafka/#asynchronous-data-processing-with-tokio)Asynchronous data processing with Tokio\n[Tokio](https://tokio.rs/) is a platform for fast processing of asynchronous events in Rust. The interfaces exposed by the [`StreamConsumer`](https://docs.rs/rdkafka/*/rdkafka/consumer/stream_consumer/struct.StreamConsumer.html) and the [`FutureProducer`](https://docs.rs/rdkafka/*/rdkafka/producer/future_producer/struct.FutureProducer.html) allow rust-rdkafka users to easily integrate Kafka consumers and producers within the Tokio platform, and write asynchronous message processing code. Note that rust-rdkafka can be used without Tokio.\nTo see rust-rdkafka in action with Tokio, check out the [asynchronous processing example](https://github.com/fede1024/rust-rdkafka/blob/master/examples/asynchronous_processing.rs) in the examples folder.\n#### [\u00a7](https://docs.rs/rdkafka/latest/rdkafka/#at-least-once-delivery)At-least-once delivery\nAt-least-once delivery semantics are common in many streaming applications: every message is guaranteed to be processed at least once; in case of temporary failure, the message can be re-processed and/or re-delivered, but no message will be lost.\nIn order to implement at-least-once delivery the stream processing application has to carefully commit the offset only once the message has been processed. Committing the offset too early, instead, might cause message loss, since upon recovery the consumer will start from the next message, skipping the one where the failure occurred.\nTo see how to implement at-least-once delivery with `rdkafka`, check out the [at-least-once delivery example](https://github.com/fede1024/rust-rdkafka/blob/master/examples/at_least_once.rs) in the examples folder. To know more about delivery semantics, check the [message delivery semantics](https://kafka.apache.org/0101/documentation.html#semantics) chapter in the Kafka documentation.\n#### [\u00a7](https://docs.rs/rdkafka/latest/rdkafka/#exactly-once-semantics)Exactly-once semantics\nExactly-once semantics (EOS) can be achieved using transactional producers, which allow produced records and consumer offsets to be committed or aborted atomically. Consumers that set their `isolation.level` to `read_committed` will only observe committed messages.\nEOS is useful in read-process-write scenarios that require messages to be processed exactly once.\nTo learn more about using transactions in rust-rdkafka, see the [Transactions](https://docs.rs/rdkafka/latest/rdkafka/producer-transactions) section of the producer documentation.\n#### [\u00a7](https://docs.rs/rdkafka/latest/rdkafka/#users)Users\nHere are some of the projects using rust-rdkafka:\n  * [timely-dataflow](https://github.com/frankmcsherry/timely-dataflow): a distributed data-parallel compute engine. See also the [blog post](https://github.com/frankmcsherry/blog/blob/master/posts/2017-11-08.md) announcing its Kafka integration.\n  * [kafka-view](https://github.com/fede1024/kafka-view): a web interface for Kafka clusters.\n  * [kafka-benchmark](https://github.com/fede1024/kafka-benchmark): a high performance benchmarking tool for Kafka.\n  * [callysto](https://github.com/vertexclique/callysto): Stream processing framework in Rust.\n  * [bytewax](https://github.com/bytewax/bytewax): Python stream processing framework using Timely Dataflow.\n\n\n_If you are using rust-rdkafka, please let us know!_\n### [\u00a7](https://docs.rs/rdkafka/latest/rdkafka/#installation)Installation\nAdd this to your `Cargo.toml`:\n```\n[dependencies]\nrdkafka = { version = \"0.25\", features = [\"cmake-build\"] }\n```\n\nThis crate will compile librdkafka from sources and link it statically to your executable. To compile librdkafka you\u2019ll need:\n  * the GNU toolchain\n  * GNU `make`\n  * `pthreads`\n  * `zlib`: optional, but included by default (feature: `libz`)\n  * `cmake`: optional, _not_ included by default (feature: `cmake-build`)\n  * `libssl-dev`: optional, _not_ included by default (feature: `ssl`)\n  * `libsasl2-dev`: optional, _not_ included by default (feature: `gssapi`)\n  * `libzstd-dev`: optional, _not_ included by default (feature: `zstd-pkg-config`)\n\n\nNote that using the CMake build system, via the `cmake-build` feature, is encouraged if you can take the dependency on CMake.\nBy default a submodule with the librdkafka sources pinned to a specific commit will be used to compile and statically link the library. The `dynamic-linking` feature can be used to instead dynamically link rdkafka to the system\u2019s version of librdkafka. Example:\n```\n[dependencies]\nrdkafka = { version = \"0.25\", features = [\"dynamic-linking\"] }\n```\n\nFor a full listing of features, consult the [rdkafka-sys crate\u2019s documentation](https://github.com/fede1024/rust-rdkafka/tree/master/rdkafka-sys/README.md#features). All of rdkafka-sys features are re-exported as rdkafka features.\n#### [\u00a7](https://docs.rs/rdkafka/latest/rdkafka/#minimum-supported-rust-version-msrv)Minimum supported Rust version (MSRV)\nThe current minimum supported Rust version (MSRV) is 1.70.0. Note that bumping the MSRV is not considered a breaking change. Any release of rust-rdkafka may bump the MSRV.\n#### [\u00a7](https://docs.rs/rdkafka/latest/rdkafka/#asynchronous-runtimes)Asynchronous runtimes\nSome features of the [`StreamConsumer`](https://docs.rs/rdkafka/*/rdkafka/consumer/stream_consumer/struct.StreamConsumer.html) and [`FutureProducer`](https://docs.rs/rdkafka/*/rdkafka/producer/future_producer/struct.FutureProducer.html) depend on Tokio, which can be a heavyweight dependency for users who only intend to use the low-level consumers and producers. The Tokio integration is enabled by default, but can be disabled by turning off default features:\n```\n[dependencies]\nrdkafka = { version = \"0.25\", default-features = false }\n```\n\nIf you would like to use an asynchronous runtime besides Tokio, you can integrate it with rust-rdkafka by providing a shim that implements the [`AsyncRuntime`](https://docs.rs/rdkafka/*/rdkafka/util/trait.AsyncRuntime.html) trait. See the following examples for details:\n  * [smol](https://github.com/fede1024/rust-rdkafka/blob/master/examples/runtime_smol.rs)\n  * [async-std](https://github.com/fede1024/rust-rdkafka/blob/master/examples/runtime_async_std.rs)\n\n\n### [\u00a7](https://docs.rs/rdkafka/latest/rdkafka/#examples)Examples\nYou can find examples in the [`examples`](https://github.com/fede1024/rust-rdkafka/blob/master/examples/) folder. To run them:\n```\ncargo run --example <example_name> -- <example_args>\n```\n\n### [\u00a7](https://docs.rs/rdkafka/latest/rdkafka/#debugging)Debugging\nrust-rdkafka uses the [`log`](https://docs.rs/log) crate to handle logging. Optionally, enable the `tracing` feature to emit [`tracing`](https://docs.rs/tracing) events as opposed to [`log`](https://docs.rs/log) records.\nIn test and examples, rust-rdkafka uses the [`env_logger`](https://docs.rs/env_logger) crate to format logs. In those contexts, logging can be enabled using the `RUST_LOG` environment variable, for example:\n```\nRUST_LOG=\"librdkafka=trace,rdkafka::client=debug\" cargo test\n```\n\nThis will configure the logging level of librdkafka to trace, and the level of the client module of the Rust client to debug. To actually receive logs from librdkafka, you also have to set the `debug` option in the producer or consumer configuration (see librdkafka [configuration](https://github.com/edenhill/librdkafka/blob/master/CONFIGURATION.md)).\nTo enable debugging in your project, make sure you initialize the logger with `env_logger::init()`, or the equivalent for any `log`-compatible logging framework.\n## Re-exports[\u00a7](https://docs.rs/rdkafka/latest/rdkafka/#reexports)\n\n`pub use crate::client::ClientContext[](https://docs.rs/rdkafka/latest/rdkafka/client/trait.ClientContext.html \"trait rdkafka::client::ClientContext\");`\n\n\n`pub use crate::config::ClientConfig[](https://docs.rs/rdkafka/latest/rdkafka/config/struct.ClientConfig.html \"struct rdkafka::config::ClientConfig\");`\n\n\n`pub use crate::message::Message[](https://docs.rs/rdkafka/latest/rdkafka/message/trait.Message.html \"trait rdkafka::message::Message\");`\n\n\n`pub use crate::message::Timestamp[](https://docs.rs/rdkafka/latest/rdkafka/message/enum.Timestamp.html \"enum rdkafka::message::Timestamp\");`\n\n\n`pub use crate::statistics::Statistics[](https://docs.rs/rdkafka/latest/rdkafka/statistics/struct.Statistics.html \"struct rdkafka::statistics::Statistics\");`\n\n\n`pub use crate::topic_partition_list::Offset[](https://docs.rs/rdkafka/latest/rdkafka/topic_partition_list/enum.Offset.html \"enum rdkafka::topic_partition_list::Offset\");`\n\n\n`pub use crate::topic_partition_list::TopicPartitionList[](https://docs.rs/rdkafka/latest/rdkafka/topic_partition_list/struct.TopicPartitionList.html \"struct rdkafka::topic_partition_list::TopicPartitionList\");`\n\n\n`pub use crate::util::IntoOpaque[](https://docs.rs/rdkafka/latest/rdkafka/util/trait.IntoOpaque.html \"trait rdkafka::util::IntoOpaque\");`\n\n## Modules[\u00a7](https://docs.rs/rdkafka/latest/rdkafka/#modules)\n\n[admin](https://docs.rs/rdkafka/latest/rdkafka/admin/index.html \"mod rdkafka::admin\")\n    Admin client.\n\n[bindings](https://docs.rs/rdkafka/latest/rdkafka/bindings/index.html \"mod rdkafka::bindings\")\n    FFI bindings.\n\n[client](https://docs.rs/rdkafka/latest/rdkafka/client/index.html \"mod rdkafka::client\")\n    Common client functionality.\n\n[config](https://docs.rs/rdkafka/latest/rdkafka/config/index.html \"mod rdkafka::config\")\n    Producer and consumer configuration.\n\n[consumer](https://docs.rs/rdkafka/latest/rdkafka/consumer/index.html \"mod rdkafka::consumer\")\n    Kafka consumers.\n\n[error](https://docs.rs/rdkafka/latest/rdkafka/error/index.html \"mod rdkafka::error\")\n    Error manipulations.\n\n[groups](https://docs.rs/rdkafka/latest/rdkafka/groups/index.html \"mod rdkafka::groups\")\n    Group membership API.\n\n[helpers](https://docs.rs/rdkafka/latest/rdkafka/helpers/index.html \"mod rdkafka::helpers\")\n    Utility functions.\n\n[message](https://docs.rs/rdkafka/latest/rdkafka/message/index.html \"mod rdkafka::message\")\n    Store and manipulate Kafka messages.\n\n[metadata](https://docs.rs/rdkafka/latest/rdkafka/metadata/index.html \"mod rdkafka::metadata\")\n    Cluster metadata.\n\n[mocking](https://docs.rs/rdkafka/latest/rdkafka/mocking/index.html \"mod rdkafka::mocking\")\n    Mocking functionality\n\n[producer](https://docs.rs/rdkafka/latest/rdkafka/producer/index.html \"mod rdkafka::producer\")\n    Kafka producers.\n\n[statistics](https://docs.rs/rdkafka/latest/rdkafka/statistics/index.html \"mod rdkafka::statistics\")\n    Client and broker statistics.\n\n[topic_partition_list](https://docs.rs/rdkafka/latest/rdkafka/topic_partition_list/index.html \"mod rdkafka::topic_partition_list\")\n    Data structures representing topic, partitions and offsets.\n\n[types](https://docs.rs/rdkafka/latest/rdkafka/types/index.html \"mod rdkafka::types\")\n    Aliases for types defined in the auto-generated bindings.\n\n[util](https://docs.rs/rdkafka/latest/rdkafka/util/index.html \"mod rdkafka::util\")\n    Utility functions and types.\n",
            "markdown_with_citations": "[](https://docs.rs/rdkafka/latest/rdkafka/all.html \"show sidebar\")\n# Crate rdkafkaCopy item path\nSettings\u27e81\u27e9\nHelp\u27e82\u27e9\nSummarySource\u27e83\u27e9\nExpand description\nA fully asynchronous, futures\u27e84\u27e9-enabled Apache Kafka\u27e85\u27e9 client library for Rust based on librdkafka\u27e86\u27e9.\n### \u00a7\u27e87\u27e9The library\n`rust-rdkafka` provides a safe Rust interface to librdkafka. This version is compatible with librdkafka v1.9.2+.\n#### \u00a7\u27e88\u27e9Documentation\n  * Current master branch\u27e89\u27e9\n  * Latest release\u27e810\u27e9\n  * Changelog\u27e811\u27e9\n\n\n#### \u00a7\u27e812\u27e9Features\nThe main features provided at the moment are:\n  * Support for all Kafka versions since 0.8.x. For more information about broker compatibility options, check the librdkafka documentation\u27e813\u27e9.\n  * Consume from single or multiple topics.\n  * Automatic consumer rebalancing.\n  * Customizable rebalance, with pre and post rebalance callbacks.\n  * Synchronous or asynchronous message production.\n  * Customizable offset commit.\n  * Create and delete topics and add and edit partitions.\n  * Alter broker and topic configurations.\n  * Access to cluster metadata (list of topic-partitions, replicas, active brokers etc).\n  * Access to group metadata (list groups, list members of groups, hostnames, etc.).\n  * Access to producer and consumer metrics, errors and callbacks.\n  * Exactly-once semantics (EOS) via idempotent and transactional producers and read-committed consumers.\n\n\n#### \u00a7\u27e814\u27e9One million messages per second\n`rust-rdkafka` is designed to be easy and safe to use thanks to the abstraction layer written in Rust, while at the same time being extremely fast thanks to the librdkafka C library.\nHere are some benchmark results using the `BaseProducer`\u27e815\u27e9, sending data to a single Kafka 0.11 process running in localhost (default configuration, 3 partitions). Hardware: Dell laptop, with Intel Core i7-4712HQ @ 2.30GHz.\n  * Scenario: produce 5 million messages, 10 bytes each, wait for all of them to be acked\n    * 1045413 messages/s, 9.970 MB/s (average over 5 runs)\n  * Scenario: produce 100000 messages, 10 KB each, wait for all of them to be acked\n    * 24623 messages/s, 234.826 MB/s (average over 5 runs)\n\n\nFor more numbers, check out the kafka-benchmark\u27e816\u27e9 project.\n#### \u00a7\u27e817\u27e9Client types\n`rust-rdkafka` provides low level and high level consumers and producers.\nLow level:\n  * `BaseConsumer`\u27e818\u27e9: a simple wrapper around the librdkafka consumer. It must be periodically `poll()`ed in order to execute callbacks, rebalances and to receive messages.\n  * `BaseProducer`\u27e815\u27e9: a simple wrapper around the librdkafka producer. As in the consumer case, the user must call `poll()` periodically to execute delivery callbacks.\n  * `ThreadedProducer`\u27e819\u27e9: a `BaseProducer` with a separate thread dedicated to polling the producer.\n\n\nHigh level:\n  * `StreamConsumer`\u27e820\u27e9: a `Stream`\u27e821\u27e9 of messages that takes care of polling the consumer automatically.\n  * `FutureProducer`\u27e822\u27e9: a `Future`\u27e823\u27e9 that will be completed once the message is delivered to Kafka (or failed).\n\n\nFor more information about consumers and producers, refer to their module-level documentation.\n_Warning_ : the library is under active development and the APIs are likely to change.\n#### \u00a7\u27e824\u27e9Asynchronous data processing with Tokio\nTokio\u27e825\u27e9 is a platform for fast processing of asynchronous events in Rust. The interfaces exposed by the `StreamConsumer`\u27e820\u27e9 and the `FutureProducer`\u27e822\u27e9 allow rust-rdkafka users to easily integrate Kafka consumers and producers within the Tokio platform, and write asynchronous message processing code. Note that rust-rdkafka can be used without Tokio.\nTo see rust-rdkafka in action with Tokio, check out the asynchronous processing example\u27e826\u27e9 in the examples folder.\n#### \u00a7\u27e827\u27e9At-least-once delivery\nAt-least-once delivery semantics are common in many streaming applications: every message is guaranteed to be processed at least once; in case of temporary failure, the message can be re-processed and/or re-delivered, but no message will be lost.\nIn order to implement at-least-once delivery the stream processing application has to carefully commit the offset only once the message has been processed. Committing the offset too early, instead, might cause message loss, since upon recovery the consumer will start from the next message, skipping the one where the failure occurred.\nTo see how to implement at-least-once delivery with `rdkafka`, check out the at-least-once delivery example\u27e828\u27e9 in the examples folder. To know more about delivery semantics, check the message delivery semantics\u27e829\u27e9 chapter in the Kafka documentation.\n#### \u00a7\u27e830\u27e9Exactly-once semantics\nExactly-once semantics (EOS) can be achieved using transactional producers, which allow produced records and consumer offsets to be committed or aborted atomically. Consumers that set their `isolation.level` to `read_committed` will only observe committed messages.\nEOS is useful in read-process-write scenarios that require messages to be processed exactly once.\nTo learn more about using transactions in rust-rdkafka, see the Transactions\u27e831\u27e9 section of the producer documentation.\n#### \u00a7\u27e832\u27e9Users\nHere are some of the projects using rust-rdkafka:\n  * timely-dataflow\u27e833\u27e9: a distributed data-parallel compute engine. See also the blog post\u27e834\u27e9 announcing its Kafka integration.\n  * kafka-view\u27e835\u27e9: a web interface for Kafka clusters.\n  * kafka-benchmark\u27e816\u27e9: a high performance benchmarking tool for Kafka.\n  * callysto\u27e836\u27e9: Stream processing framework in Rust.\n  * bytewax\u27e837\u27e9: Python stream processing framework using Timely Dataflow.\n\n\n_If you are using rust-rdkafka, please let us know!_\n### \u00a7\u27e838\u27e9Installation\nAdd this to your `Cargo.toml`:\n```\n[dependencies]\nrdkafka = { version = \"0.25\", features = [\"cmake-build\"] }\n```\n\nThis crate will compile librdkafka from sources and link it statically to your executable. To compile librdkafka you\u2019ll need:\n  * the GNU toolchain\n  * GNU `make`\n  * `pthreads`\n  * `zlib`: optional, but included by default (feature: `libz`)\n  * `cmake`: optional, _not_ included by default (feature: `cmake-build`)\n  * `libssl-dev`: optional, _not_ included by default (feature: `ssl`)\n  * `libsasl2-dev`: optional, _not_ included by default (feature: `gssapi`)\n  * `libzstd-dev`: optional, _not_ included by default (feature: `zstd-pkg-config`)\n\n\nNote that using the CMake build system, via the `cmake-build` feature, is encouraged if you can take the dependency on CMake.\nBy default a submodule with the librdkafka sources pinned to a specific commit will be used to compile and statically link the library. The `dynamic-linking` feature can be used to instead dynamically link rdkafka to the system\u2019s version of librdkafka. Example:\n```\n[dependencies]\nrdkafka = { version = \"0.25\", features = [\"dynamic-linking\"] }\n```\n\nFor a full listing of features, consult the rdkafka-sys crate\u2019s documentation\u27e839\u27e9. All of rdkafka-sys features are re-exported as rdkafka features.\n#### \u00a7\u27e840\u27e9Minimum supported Rust version (MSRV)\nThe current minimum supported Rust version (MSRV) is 1.70.0. Note that bumping the MSRV is not considered a breaking change. Any release of rust-rdkafka may bump the MSRV.\n#### \u00a7\u27e841\u27e9Asynchronous runtimes\nSome features of the `StreamConsumer`\u27e820\u27e9 and `FutureProducer`\u27e822\u27e9 depend on Tokio, which can be a heavyweight dependency for users who only intend to use the low-level consumers and producers. The Tokio integration is enabled by default, but can be disabled by turning off default features:\n```\n[dependencies]\nrdkafka = { version = \"0.25\", default-features = false }\n```\n\nIf you would like to use an asynchronous runtime besides Tokio, you can integrate it with rust-rdkafka by providing a shim that implements the `AsyncRuntime`\u27e842\u27e9 trait. See the following examples for details:\n  * smol\u27e843\u27e9\n  * async-std\u27e844\u27e9\n\n\n### \u00a7\u27e845\u27e9Examples\nYou can find examples in the `examples`\u27e846\u27e9 folder. To run them:\n```\ncargo run --example <example_name> -- <example_args>\n```\n\n### \u00a7\u27e847\u27e9Debugging\nrust-rdkafka uses the `log`\u27e848\u27e9 crate to handle logging. Optionally, enable the `tracing` feature to emit `tracing`\u27e849\u27e9 events as opposed to `log`\u27e848\u27e9 records.\nIn test and examples, rust-rdkafka uses the `env_logger`\u27e850\u27e9 crate to format logs. In those contexts, logging can be enabled using the `RUST_LOG` environment variable, for example:\n```\nRUST_LOG=\"librdkafka=trace,rdkafka::client=debug\" cargo test\n```\n\nThis will configure the logging level of librdkafka to trace, and the level of the client module of the Rust client to debug. To actually receive logs from librdkafka, you also have to set the `debug` option in the producer or consumer configuration (see librdkafka configuration\u27e851\u27e9).\nTo enable debugging in your project, make sure you initialize the logger with `env_logger::init()`, or the equivalent for any `log`-compatible logging framework.\n## Re-exports\u00a7\u27e852\u27e9\n\n`pub use crate::client::ClientContext[](https://docs.rs/rdkafka/latest/rdkafka/client/trait.ClientContext.html \"trait rdkafka::client::ClientContext\");`\n\n\n`pub use crate::config::ClientConfig[](https://docs.rs/rdkafka/latest/rdkafka/config/struct.ClientConfig.html \"struct rdkafka::config::ClientConfig\");`\n\n\n`pub use crate::message::Message[](https://docs.rs/rdkafka/latest/rdkafka/message/trait.Message.html \"trait rdkafka::message::Message\");`\n\n\n`pub use crate::message::Timestamp[](https://docs.rs/rdkafka/latest/rdkafka/message/enum.Timestamp.html \"enum rdkafka::message::Timestamp\");`\n\n\n`pub use crate::statistics::Statistics[](https://docs.rs/rdkafka/latest/rdkafka/statistics/struct.Statistics.html \"struct rdkafka::statistics::Statistics\");`\n\n\n`pub use crate::topic_partition_list::Offset[](https://docs.rs/rdkafka/latest/rdkafka/topic_partition_list/enum.Offset.html \"enum rdkafka::topic_partition_list::Offset\");`\n\n\n`pub use crate::topic_partition_list::TopicPartitionList[](https://docs.rs/rdkafka/latest/rdkafka/topic_partition_list/struct.TopicPartitionList.html \"struct rdkafka::topic_partition_list::TopicPartitionList\");`\n\n\n`pub use crate::util::IntoOpaque[](https://docs.rs/rdkafka/latest/rdkafka/util/trait.IntoOpaque.html \"trait rdkafka::util::IntoOpaque\");`\n\n## Modules\u00a7\u27e853\u27e9\n\nadmin\u27e854\u27e9\n    Admin client.\n\nbindings\u27e855\u27e9\n    FFI bindings.\n\nclient\u27e856\u27e9\n    Common client functionality.\n\nconfig\u27e857\u27e9\n    Producer and consumer configuration.\n\nconsumer\u27e858\u27e9\n    Kafka consumers.\n\nerror\u27e859\u27e9\n    Error manipulations.\n\ngroups\u27e860\u27e9\n    Group membership API.\n\nhelpers\u27e861\u27e9\n    Utility functions.\n\nmessage\u27e862\u27e9\n    Store and manipulate Kafka messages.\n\nmetadata\u27e863\u27e9\n    Cluster metadata.\n\nmocking\u27e864\u27e9\n    Mocking functionality\n\nproducer\u27e865\u27e9\n    Kafka producers.\n\nstatistics\u27e866\u27e9\n    Client and broker statistics.\n\ntopic_partition_list\u27e867\u27e9\n    Data structures representing topic, partitions and offsets.\n\ntypes\u27e868\u27e9\n    Aliases for types defined in the auto-generated bindings.\n\nutil\u27e869\u27e9\n    Utility functions and types.\n",
            "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://docs.rs/rdkafka/latest/settings.html: Settings\n\u27e82\u27e9 https://docs.rs/rdkafka/latest/help.html: Help\n\u27e83\u27e9 https://docs.rs/rdkafka/latest/src/rdkafka/lib.rs.html#1-297: Source\n\u27e84\u27e9 https://github.com/rust-lang/futures-rs: futures\n\u27e85\u27e9 https://kafka.apache.org: Apache Kafka\n\u27e86\u27e9 https://github.com/edenhill/librdkafka: librdkafka\n\u27e87\u27e9 https://docs.rs/rdkafka/latest/rdkafka/#the-library: \u00a7\n\u27e88\u27e9 https://docs.rs/rdkafka/latest/rdkafka/#documentation: \u00a7\n\u27e89\u27e9 https://fede1024.github.io/rust-rdkafka/: Current master branch\n\u27e810\u27e9 https://docs.rs/rdkafka/: Latest release\n\u27e811\u27e9 https://github.com/fede1024/rust-rdkafka/blob/master/changelog.md: Changelog\n\u27e812\u27e9 https://docs.rs/rdkafka/latest/rdkafka/#features: \u00a7\n\u27e813\u27e9 https://github.com/edenhill/librdkafka/blob/master/INTRODUCTION.md#broker-version-compatibility: librdkafka documentation\n\u27e814\u27e9 https://docs.rs/rdkafka/latest/rdkafka/#one-million-messages-per-second: \u00a7\n\u27e815\u27e9 https://docs.rs/rdkafka/*/rdkafka/producer/base_producer/struct.BaseProducer.html: `BaseProducer`\n\u27e816\u27e9 https://github.com/fede1024/kafka-benchmark: kafka-benchmark\n\u27e817\u27e9 https://docs.rs/rdkafka/latest/rdkafka/#client-types: \u00a7\n\u27e818\u27e9 https://docs.rs/rdkafka/*/rdkafka/consumer/base_consumer/struct.BaseConsumer.html: `BaseConsumer`\n\u27e819\u27e9 https://docs.rs/rdkafka/*/rdkafka/producer/base_producer/struct.ThreadedProducer.html: `ThreadedProducer`\n\u27e820\u27e9 https://docs.rs/rdkafka/*/rdkafka/consumer/stream_consumer/struct.StreamConsumer.html: `StreamConsumer`\n\u27e821\u27e9 https://docs.rs/futures/*/futures/stream/trait.Stream.html: `Stream`\n\u27e822\u27e9 https://docs.rs/rdkafka/*/rdkafka/producer/future_producer/struct.FutureProducer.html: `FutureProducer`\n\u27e823\u27e9 https://doc.rust-lang.org/stable/std/future/trait.Future.html: `Future`\n\u27e824\u27e9 https://docs.rs/rdkafka/latest/rdkafka/#asynchronous-data-processing-with-tokio: \u00a7\n\u27e825\u27e9 https://tokio.rs/: Tokio\n\u27e826\u27e9 https://github.com/fede1024/rust-rdkafka/blob/master/examples/asynchronous_processing.rs: asynchronous processing example\n\u27e827\u27e9 https://docs.rs/rdkafka/latest/rdkafka/#at-least-once-delivery: \u00a7\n\u27e828\u27e9 https://github.com/fede1024/rust-rdkafka/blob/master/examples/at_least_once.rs: at-least-once delivery example\n\u27e829\u27e9 https://kafka.apache.org/0101/documentation.html#semantics: message delivery semantics\n\u27e830\u27e9 https://docs.rs/rdkafka/latest/rdkafka/#exactly-once-semantics: \u00a7\n\u27e831\u27e9 https://docs.rs/rdkafka/latest/rdkafka/producer-transactions: Transactions\n\u27e832\u27e9 https://docs.rs/rdkafka/latest/rdkafka/#users: \u00a7\n\u27e833\u27e9 https://github.com/frankmcsherry/timely-dataflow: timely-dataflow\n\u27e834\u27e9 https://github.com/frankmcsherry/blog/blob/master/posts/2017-11-08.md: blog post\n\u27e835\u27e9 https://github.com/fede1024/kafka-view: kafka-view\n\u27e836\u27e9 https://github.com/vertexclique/callysto: callysto\n\u27e837\u27e9 https://github.com/bytewax/bytewax: bytewax\n\u27e838\u27e9 https://docs.rs/rdkafka/latest/rdkafka/#installation: \u00a7\n\u27e839\u27e9 https://github.com/fede1024/rust-rdkafka/tree/master/rdkafka-sys/README.md#features: rdkafka-sys crate\u2019s documentation\n\u27e840\u27e9 https://docs.rs/rdkafka/latest/rdkafka/#minimum-supported-rust-version-msrv: \u00a7\n\u27e841\u27e9 https://docs.rs/rdkafka/latest/rdkafka/#asynchronous-runtimes: \u00a7\n\u27e842\u27e9 https://docs.rs/rdkafka/*/rdkafka/util/trait.AsyncRuntime.html: `AsyncRuntime`\n\u27e843\u27e9 https://github.com/fede1024/rust-rdkafka/blob/master/examples/runtime_smol.rs: smol\n\u27e844\u27e9 https://github.com/fede1024/rust-rdkafka/blob/master/examples/runtime_async_std.rs: async-std\n\u27e845\u27e9 https://docs.rs/rdkafka/latest/rdkafka/#examples: \u00a7\n\u27e846\u27e9 https://github.com/fede1024/rust-rdkafka/blob/master/examples/: `examples`\n\u27e847\u27e9 https://docs.rs/rdkafka/latest/rdkafka/#debugging: \u00a7\n\u27e848\u27e9 https://docs.rs/log: `log`\n\u27e849\u27e9 https://docs.rs/tracing: `tracing`\n\u27e850\u27e9 https://docs.rs/env_logger: `env_logger`\n\u27e851\u27e9 https://github.com/edenhill/librdkafka/blob/master/CONFIGURATION.md: configuration\n\u27e852\u27e9 https://docs.rs/rdkafka/latest/rdkafka/#reexports: \u00a7\n\u27e853\u27e9 https://docs.rs/rdkafka/latest/rdkafka/#modules: \u00a7\n\u27e854\u27e9 https://docs.rs/rdkafka/latest/rdkafka/admin/index.html: mod rdkafka::admin - admin\n\u27e855\u27e9 https://docs.rs/rdkafka/latest/rdkafka/bindings/index.html: mod rdkafka::bindings - bindings\n\u27e856\u27e9 https://docs.rs/rdkafka/latest/rdkafka/client/index.html: mod rdkafka::client - client\n\u27e857\u27e9 https://docs.rs/rdkafka/latest/rdkafka/config/index.html: mod rdkafka::config - config\n\u27e858\u27e9 https://docs.rs/rdkafka/latest/rdkafka/consumer/index.html: mod rdkafka::consumer - consumer\n\u27e859\u27e9 https://docs.rs/rdkafka/latest/rdkafka/error/index.html: mod rdkafka::error - error\n\u27e860\u27e9 https://docs.rs/rdkafka/latest/rdkafka/groups/index.html: mod rdkafka::groups - groups\n\u27e861\u27e9 https://docs.rs/rdkafka/latest/rdkafka/helpers/index.html: mod rdkafka::helpers - helpers\n\u27e862\u27e9 https://docs.rs/rdkafka/latest/rdkafka/message/index.html: mod rdkafka::message - message\n\u27e863\u27e9 https://docs.rs/rdkafka/latest/rdkafka/metadata/index.html: mod rdkafka::metadata - metadata\n\u27e864\u27e9 https://docs.rs/rdkafka/latest/rdkafka/mocking/index.html: mod rdkafka::mocking - mocking\n\u27e865\u27e9 https://docs.rs/rdkafka/latest/rdkafka/producer/index.html: mod rdkafka::producer - producer\n\u27e866\u27e9 https://docs.rs/rdkafka/latest/rdkafka/statistics/index.html: mod rdkafka::statistics - statistics\n\u27e867\u27e9 https://docs.rs/rdkafka/latest/rdkafka/topic_partition_list/index.html: mod rdkafka::topic_partition_list - topic_partition_list\n\u27e868\u27e9 https://docs.rs/rdkafka/latest/rdkafka/types/index.html: mod rdkafka::types - types\n\u27e869\u27e9 https://docs.rs/rdkafka/latest/rdkafka/util/index.html: mod rdkafka::util - util\n",
            "fit_markdown": "",
            "fit_html": ""
          },
          "downloads": 0,
          "github_stars": 0,
          "dependencies": [],
          "features": {},
          "code_snippets": [],
          "readme_sections": {},
          "librs_downloads": null,
          "source": "crates.io",
          "enhanced_scraping": {},
          "enhanced_features": [],
          "enhanced_dependencies": []
        },
        "enriched_crate": {
          "name": "rdkafka",
          "version": "0.37.0",
          "description": "ALLOW: Positive community sentiment",
          "repository": "",
          "keywords": [],
          "categories": [],
          "readme": {
            "raw_markdown": "[](https://docs.rs/rdkafka/latest/rdkafka/all.html \"show sidebar\")\n# Crate rdkafkaCopy item path\n[Settings](https://docs.rs/rdkafka/latest/settings.html)\n[Help](https://docs.rs/rdkafka/latest/help.html)\nSummary[Source](https://docs.rs/rdkafka/latest/src/rdkafka/lib.rs.html#1-297)\nExpand description\nA fully asynchronous, [futures](https://github.com/rust-lang/futures-rs)-enabled [Apache Kafka](https://kafka.apache.org) client library for Rust based on [librdkafka](https://github.com/edenhill/librdkafka).\n### [\u00a7](https://docs.rs/rdkafka/latest/rdkafka/#the-library)The library\n`rust-rdkafka` provides a safe Rust interface to librdkafka. This version is compatible with librdkafka v1.9.2+.\n#### [\u00a7](https://docs.rs/rdkafka/latest/rdkafka/#documentation)Documentation\n  * [Current master branch](https://fede1024.github.io/rust-rdkafka/)\n  * [Latest release](https://docs.rs/rdkafka/)\n  * [Changelog](https://github.com/fede1024/rust-rdkafka/blob/master/changelog.md)\n\n\n#### [\u00a7](https://docs.rs/rdkafka/latest/rdkafka/#features)Features\nThe main features provided at the moment are:\n  * Support for all Kafka versions since 0.8.x. For more information about broker compatibility options, check the [librdkafka documentation](https://github.com/edenhill/librdkafka/blob/master/INTRODUCTION.md#broker-version-compatibility).\n  * Consume from single or multiple topics.\n  * Automatic consumer rebalancing.\n  * Customizable rebalance, with pre and post rebalance callbacks.\n  * Synchronous or asynchronous message production.\n  * Customizable offset commit.\n  * Create and delete topics and add and edit partitions.\n  * Alter broker and topic configurations.\n  * Access to cluster metadata (list of topic-partitions, replicas, active brokers etc).\n  * Access to group metadata (list groups, list members of groups, hostnames, etc.).\n  * Access to producer and consumer metrics, errors and callbacks.\n  * Exactly-once semantics (EOS) via idempotent and transactional producers and read-committed consumers.\n\n\n#### [\u00a7](https://docs.rs/rdkafka/latest/rdkafka/#one-million-messages-per-second)One million messages per second\n`rust-rdkafka` is designed to be easy and safe to use thanks to the abstraction layer written in Rust, while at the same time being extremely fast thanks to the librdkafka C library.\nHere are some benchmark results using the [`BaseProducer`](https://docs.rs/rdkafka/*/rdkafka/producer/base_producer/struct.BaseProducer.html), sending data to a single Kafka 0.11 process running in localhost (default configuration, 3 partitions). Hardware: Dell laptop, with Intel Core i7-4712HQ @ 2.30GHz.\n  * Scenario: produce 5 million messages, 10 bytes each, wait for all of them to be acked\n    * 1045413 messages/s, 9.970 MB/s (average over 5 runs)\n  * Scenario: produce 100000 messages, 10 KB each, wait for all of them to be acked\n    * 24623 messages/s, 234.826 MB/s (average over 5 runs)\n\n\nFor more numbers, check out the [kafka-benchmark](https://github.com/fede1024/kafka-benchmark) project.\n#### [\u00a7](https://docs.rs/rdkafka/latest/rdkafka/#client-types)Client types\n`rust-rdkafka` provides low level and high level consumers and producers.\nLow level:\n  * [`BaseConsumer`](https://docs.rs/rdkafka/*/rdkafka/consumer/base_consumer/struct.BaseConsumer.html): a simple wrapper around the librdkafka consumer. It must be periodically `poll()`ed in order to execute callbacks, rebalances and to receive messages.\n  * [`BaseProducer`](https://docs.rs/rdkafka/*/rdkafka/producer/base_producer/struct.BaseProducer.html): a simple wrapper around the librdkafka producer. As in the consumer case, the user must call `poll()` periodically to execute delivery callbacks.\n  * [`ThreadedProducer`](https://docs.rs/rdkafka/*/rdkafka/producer/base_producer/struct.ThreadedProducer.html): a `BaseProducer` with a separate thread dedicated to polling the producer.\n\n\nHigh level:\n  * [`StreamConsumer`](https://docs.rs/rdkafka/*/rdkafka/consumer/stream_consumer/struct.StreamConsumer.html): a [`Stream`](https://docs.rs/futures/*/futures/stream/trait.Stream.html) of messages that takes care of polling the consumer automatically.\n  * [`FutureProducer`](https://docs.rs/rdkafka/*/rdkafka/producer/future_producer/struct.FutureProducer.html): a [`Future`](https://doc.rust-lang.org/stable/std/future/trait.Future.html) that will be completed once the message is delivered to Kafka (or failed).\n\n\nFor more information about consumers and producers, refer to their module-level documentation.\n_Warning_ : the library is under active development and the APIs are likely to change.\n#### [\u00a7](https://docs.rs/rdkafka/latest/rdkafka/#asynchronous-data-processing-with-tokio)Asynchronous data processing with Tokio\n[Tokio](https://tokio.rs/) is a platform for fast processing of asynchronous events in Rust. The interfaces exposed by the [`StreamConsumer`](https://docs.rs/rdkafka/*/rdkafka/consumer/stream_consumer/struct.StreamConsumer.html) and the [`FutureProducer`](https://docs.rs/rdkafka/*/rdkafka/producer/future_producer/struct.FutureProducer.html) allow rust-rdkafka users to easily integrate Kafka consumers and producers within the Tokio platform, and write asynchronous message processing code. Note that rust-rdkafka can be used without Tokio.\nTo see rust-rdkafka in action with Tokio, check out the [asynchronous processing example](https://github.com/fede1024/rust-rdkafka/blob/master/examples/asynchronous_processing.rs) in the examples folder.\n#### [\u00a7](https://docs.rs/rdkafka/latest/rdkafka/#at-least-once-delivery)At-least-once delivery\nAt-least-once delivery semantics are common in many streaming applications: every message is guaranteed to be processed at least once; in case of temporary failure, the message can be re-processed and/or re-delivered, but no message will be lost.\nIn order to implement at-least-once delivery the stream processing application has to carefully commit the offset only once the message has been processed. Committing the offset too early, instead, might cause message loss, since upon recovery the consumer will start from the next message, skipping the one where the failure occurred.\nTo see how to implement at-least-once delivery with `rdkafka`, check out the [at-least-once delivery example](https://github.com/fede1024/rust-rdkafka/blob/master/examples/at_least_once.rs) in the examples folder. To know more about delivery semantics, check the [message delivery semantics](https://kafka.apache.org/0101/documentation.html#semantics) chapter in the Kafka documentation.\n#### [\u00a7](https://docs.rs/rdkafka/latest/rdkafka/#exactly-once-semantics)Exactly-once semantics\nExactly-once semantics (EOS) can be achieved using transactional producers, which allow produced records and consumer offsets to be committed or aborted atomically. Consumers that set their `isolation.level` to `read_committed` will only observe committed messages.\nEOS is useful in read-process-write scenarios that require messages to be processed exactly once.\nTo learn more about using transactions in rust-rdkafka, see the [Transactions](https://docs.rs/rdkafka/latest/rdkafka/producer-transactions) section of the producer documentation.\n#### [\u00a7](https://docs.rs/rdkafka/latest/rdkafka/#users)Users\nHere are some of the projects using rust-rdkafka:\n  * [timely-dataflow](https://github.com/frankmcsherry/timely-dataflow): a distributed data-parallel compute engine. See also the [blog post](https://github.com/frankmcsherry/blog/blob/master/posts/2017-11-08.md) announcing its Kafka integration.\n  * [kafka-view](https://github.com/fede1024/kafka-view): a web interface for Kafka clusters.\n  * [kafka-benchmark](https://github.com/fede1024/kafka-benchmark): a high performance benchmarking tool for Kafka.\n  * [callysto](https://github.com/vertexclique/callysto): Stream processing framework in Rust.\n  * [bytewax](https://github.com/bytewax/bytewax): Python stream processing framework using Timely Dataflow.\n\n\n_If you are using rust-rdkafka, please let us know!_\n### [\u00a7](https://docs.rs/rdkafka/latest/rdkafka/#installation)Installation\nAdd this to your `Cargo.toml`:\n```\n[dependencies]\nrdkafka = { version = \"0.25\", features = [\"cmake-build\"] }\n```\n\nThis crate will compile librdkafka from sources and link it statically to your executable. To compile librdkafka you\u2019ll need:\n  * the GNU toolchain\n  * GNU `make`\n  * `pthreads`\n  * `zlib`: optional, but included by default (feature: `libz`)\n  * `cmake`: optional, _not_ included by default (feature: `cmake-build`)\n  * `libssl-dev`: optional, _not_ included by default (feature: `ssl`)\n  * `libsasl2-dev`: optional, _not_ included by default (feature: `gssapi`)\n  * `libzstd-dev`: optional, _not_ included by default (feature: `zstd-pkg-config`)\n\n\nNote that using the CMake build system, via the `cmake-build` feature, is encouraged if you can take the dependency on CMake.\nBy default a submodule with the librdkafka sources pinned to a specific commit will be used to compile and statically link the library. The `dynamic-linking` feature can be used to instead dynamically link rdkafka to the system\u2019s version of librdkafka. Example:\n```\n[dependencies]\nrdkafka = { version = \"0.25\", features = [\"dynamic-linking\"] }\n```\n\nFor a full listing of features, consult the [rdkafka-sys crate\u2019s documentation](https://github.com/fede1024/rust-rdkafka/tree/master/rdkafka-sys/README.md#features). All of rdkafka-sys features are re-exported as rdkafka features.\n#### [\u00a7](https://docs.rs/rdkafka/latest/rdkafka/#minimum-supported-rust-version-msrv)Minimum supported Rust version (MSRV)\nThe current minimum supported Rust version (MSRV) is 1.70.0. Note that bumping the MSRV is not considered a breaking change. Any release of rust-rdkafka may bump the MSRV.\n#### [\u00a7](https://docs.rs/rdkafka/latest/rdkafka/#asynchronous-runtimes)Asynchronous runtimes\nSome features of the [`StreamConsumer`](https://docs.rs/rdkafka/*/rdkafka/consumer/stream_consumer/struct.StreamConsumer.html) and [`FutureProducer`](https://docs.rs/rdkafka/*/rdkafka/producer/future_producer/struct.FutureProducer.html) depend on Tokio, which can be a heavyweight dependency for users who only intend to use the low-level consumers and producers. The Tokio integration is enabled by default, but can be disabled by turning off default features:\n```\n[dependencies]\nrdkafka = { version = \"0.25\", default-features = false }\n```\n\nIf you would like to use an asynchronous runtime besides Tokio, you can integrate it with rust-rdkafka by providing a shim that implements the [`AsyncRuntime`](https://docs.rs/rdkafka/*/rdkafka/util/trait.AsyncRuntime.html) trait. See the following examples for details:\n  * [smol](https://github.com/fede1024/rust-rdkafka/blob/master/examples/runtime_smol.rs)\n  * [async-std](https://github.com/fede1024/rust-rdkafka/blob/master/examples/runtime_async_std.rs)\n\n\n### [\u00a7](https://docs.rs/rdkafka/latest/rdkafka/#examples)Examples\nYou can find examples in the [`examples`](https://github.com/fede1024/rust-rdkafka/blob/master/examples/) folder. To run them:\n```\ncargo run --example <example_name> -- <example_args>\n```\n\n### [\u00a7](https://docs.rs/rdkafka/latest/rdkafka/#debugging)Debugging\nrust-rdkafka uses the [`log`](https://docs.rs/log) crate to handle logging. Optionally, enable the `tracing` feature to emit [`tracing`](https://docs.rs/tracing) events as opposed to [`log`](https://docs.rs/log) records.\nIn test and examples, rust-rdkafka uses the [`env_logger`](https://docs.rs/env_logger) crate to format logs. In those contexts, logging can be enabled using the `RUST_LOG` environment variable, for example:\n```\nRUST_LOG=\"librdkafka=trace,rdkafka::client=debug\" cargo test\n```\n\nThis will configure the logging level of librdkafka to trace, and the level of the client module of the Rust client to debug. To actually receive logs from librdkafka, you also have to set the `debug` option in the producer or consumer configuration (see librdkafka [configuration](https://github.com/edenhill/librdkafka/blob/master/CONFIGURATION.md)).\nTo enable debugging in your project, make sure you initialize the logger with `env_logger::init()`, or the equivalent for any `log`-compatible logging framework.\n## Re-exports[\u00a7](https://docs.rs/rdkafka/latest/rdkafka/#reexports)\n\n`pub use crate::client::ClientContext[](https://docs.rs/rdkafka/latest/rdkafka/client/trait.ClientContext.html \"trait rdkafka::client::ClientContext\");`\n\n\n`pub use crate::config::ClientConfig[](https://docs.rs/rdkafka/latest/rdkafka/config/struct.ClientConfig.html \"struct rdkafka::config::ClientConfig\");`\n\n\n`pub use crate::message::Message[](https://docs.rs/rdkafka/latest/rdkafka/message/trait.Message.html \"trait rdkafka::message::Message\");`\n\n\n`pub use crate::message::Timestamp[](https://docs.rs/rdkafka/latest/rdkafka/message/enum.Timestamp.html \"enum rdkafka::message::Timestamp\");`\n\n\n`pub use crate::statistics::Statistics[](https://docs.rs/rdkafka/latest/rdkafka/statistics/struct.Statistics.html \"struct rdkafka::statistics::Statistics\");`\n\n\n`pub use crate::topic_partition_list::Offset[](https://docs.rs/rdkafka/latest/rdkafka/topic_partition_list/enum.Offset.html \"enum rdkafka::topic_partition_list::Offset\");`\n\n\n`pub use crate::topic_partition_list::TopicPartitionList[](https://docs.rs/rdkafka/latest/rdkafka/topic_partition_list/struct.TopicPartitionList.html \"struct rdkafka::topic_partition_list::TopicPartitionList\");`\n\n\n`pub use crate::util::IntoOpaque[](https://docs.rs/rdkafka/latest/rdkafka/util/trait.IntoOpaque.html \"trait rdkafka::util::IntoOpaque\");`\n\n## Modules[\u00a7](https://docs.rs/rdkafka/latest/rdkafka/#modules)\n\n[admin](https://docs.rs/rdkafka/latest/rdkafka/admin/index.html \"mod rdkafka::admin\")\n    Admin client.\n\n[bindings](https://docs.rs/rdkafka/latest/rdkafka/bindings/index.html \"mod rdkafka::bindings\")\n    FFI bindings.\n\n[client](https://docs.rs/rdkafka/latest/rdkafka/client/index.html \"mod rdkafka::client\")\n    Common client functionality.\n\n[config](https://docs.rs/rdkafka/latest/rdkafka/config/index.html \"mod rdkafka::config\")\n    Producer and consumer configuration.\n\n[consumer](https://docs.rs/rdkafka/latest/rdkafka/consumer/index.html \"mod rdkafka::consumer\")\n    Kafka consumers.\n\n[error](https://docs.rs/rdkafka/latest/rdkafka/error/index.html \"mod rdkafka::error\")\n    Error manipulations.\n\n[groups](https://docs.rs/rdkafka/latest/rdkafka/groups/index.html \"mod rdkafka::groups\")\n    Group membership API.\n\n[helpers](https://docs.rs/rdkafka/latest/rdkafka/helpers/index.html \"mod rdkafka::helpers\")\n    Utility functions.\n\n[message](https://docs.rs/rdkafka/latest/rdkafka/message/index.html \"mod rdkafka::message\")\n    Store and manipulate Kafka messages.\n\n[metadata](https://docs.rs/rdkafka/latest/rdkafka/metadata/index.html \"mod rdkafka::metadata\")\n    Cluster metadata.\n\n[mocking](https://docs.rs/rdkafka/latest/rdkafka/mocking/index.html \"mod rdkafka::mocking\")\n    Mocking functionality\n\n[producer](https://docs.rs/rdkafka/latest/rdkafka/producer/index.html \"mod rdkafka::producer\")\n    Kafka producers.\n\n[statistics](https://docs.rs/rdkafka/latest/rdkafka/statistics/index.html \"mod rdkafka::statistics\")\n    Client and broker statistics.\n\n[topic_partition_list](https://docs.rs/rdkafka/latest/rdkafka/topic_partition_list/index.html \"mod rdkafka::topic_partition_list\")\n    Data structures representing topic, partitions and offsets.\n\n[types](https://docs.rs/rdkafka/latest/rdkafka/types/index.html \"mod rdkafka::types\")\n    Aliases for types defined in the auto-generated bindings.\n\n[util](https://docs.rs/rdkafka/latest/rdkafka/util/index.html \"mod rdkafka::util\")\n    Utility functions and types.\n",
            "markdown_with_citations": "[](https://docs.rs/rdkafka/latest/rdkafka/all.html \"show sidebar\")\n# Crate rdkafkaCopy item path\nSettings\u27e81\u27e9\nHelp\u27e82\u27e9\nSummarySource\u27e83\u27e9\nExpand description\nA fully asynchronous, futures\u27e84\u27e9-enabled Apache Kafka\u27e85\u27e9 client library for Rust based on librdkafka\u27e86\u27e9.\n### \u00a7\u27e87\u27e9The library\n`rust-rdkafka` provides a safe Rust interface to librdkafka. This version is compatible with librdkafka v1.9.2+.\n#### \u00a7\u27e88\u27e9Documentation\n  * Current master branch\u27e89\u27e9\n  * Latest release\u27e810\u27e9\n  * Changelog\u27e811\u27e9\n\n\n#### \u00a7\u27e812\u27e9Features\nThe main features provided at the moment are:\n  * Support for all Kafka versions since 0.8.x. For more information about broker compatibility options, check the librdkafka documentation\u27e813\u27e9.\n  * Consume from single or multiple topics.\n  * Automatic consumer rebalancing.\n  * Customizable rebalance, with pre and post rebalance callbacks.\n  * Synchronous or asynchronous message production.\n  * Customizable offset commit.\n  * Create and delete topics and add and edit partitions.\n  * Alter broker and topic configurations.\n  * Access to cluster metadata (list of topic-partitions, replicas, active brokers etc).\n  * Access to group metadata (list groups, list members of groups, hostnames, etc.).\n  * Access to producer and consumer metrics, errors and callbacks.\n  * Exactly-once semantics (EOS) via idempotent and transactional producers and read-committed consumers.\n\n\n#### \u00a7\u27e814\u27e9One million messages per second\n`rust-rdkafka` is designed to be easy and safe to use thanks to the abstraction layer written in Rust, while at the same time being extremely fast thanks to the librdkafka C library.\nHere are some benchmark results using the `BaseProducer`\u27e815\u27e9, sending data to a single Kafka 0.11 process running in localhost (default configuration, 3 partitions). Hardware: Dell laptop, with Intel Core i7-4712HQ @ 2.30GHz.\n  * Scenario: produce 5 million messages, 10 bytes each, wait for all of them to be acked\n    * 1045413 messages/s, 9.970 MB/s (average over 5 runs)\n  * Scenario: produce 100000 messages, 10 KB each, wait for all of them to be acked\n    * 24623 messages/s, 234.826 MB/s (average over 5 runs)\n\n\nFor more numbers, check out the kafka-benchmark\u27e816\u27e9 project.\n#### \u00a7\u27e817\u27e9Client types\n`rust-rdkafka` provides low level and high level consumers and producers.\nLow level:\n  * `BaseConsumer`\u27e818\u27e9: a simple wrapper around the librdkafka consumer. It must be periodically `poll()`ed in order to execute callbacks, rebalances and to receive messages.\n  * `BaseProducer`\u27e815\u27e9: a simple wrapper around the librdkafka producer. As in the consumer case, the user must call `poll()` periodically to execute delivery callbacks.\n  * `ThreadedProducer`\u27e819\u27e9: a `BaseProducer` with a separate thread dedicated to polling the producer.\n\n\nHigh level:\n  * `StreamConsumer`\u27e820\u27e9: a `Stream`\u27e821\u27e9 of messages that takes care of polling the consumer automatically.\n  * `FutureProducer`\u27e822\u27e9: a `Future`\u27e823\u27e9 that will be completed once the message is delivered to Kafka (or failed).\n\n\nFor more information about consumers and producers, refer to their module-level documentation.\n_Warning_ : the library is under active development and the APIs are likely to change.\n#### \u00a7\u27e824\u27e9Asynchronous data processing with Tokio\nTokio\u27e825\u27e9 is a platform for fast processing of asynchronous events in Rust. The interfaces exposed by the `StreamConsumer`\u27e820\u27e9 and the `FutureProducer`\u27e822\u27e9 allow rust-rdkafka users to easily integrate Kafka consumers and producers within the Tokio platform, and write asynchronous message processing code. Note that rust-rdkafka can be used without Tokio.\nTo see rust-rdkafka in action with Tokio, check out the asynchronous processing example\u27e826\u27e9 in the examples folder.\n#### \u00a7\u27e827\u27e9At-least-once delivery\nAt-least-once delivery semantics are common in many streaming applications: every message is guaranteed to be processed at least once; in case of temporary failure, the message can be re-processed and/or re-delivered, but no message will be lost.\nIn order to implement at-least-once delivery the stream processing application has to carefully commit the offset only once the message has been processed. Committing the offset too early, instead, might cause message loss, since upon recovery the consumer will start from the next message, skipping the one where the failure occurred.\nTo see how to implement at-least-once delivery with `rdkafka`, check out the at-least-once delivery example\u27e828\u27e9 in the examples folder. To know more about delivery semantics, check the message delivery semantics\u27e829\u27e9 chapter in the Kafka documentation.\n#### \u00a7\u27e830\u27e9Exactly-once semantics\nExactly-once semantics (EOS) can be achieved using transactional producers, which allow produced records and consumer offsets to be committed or aborted atomically. Consumers that set their `isolation.level` to `read_committed` will only observe committed messages.\nEOS is useful in read-process-write scenarios that require messages to be processed exactly once.\nTo learn more about using transactions in rust-rdkafka, see the Transactions\u27e831\u27e9 section of the producer documentation.\n#### \u00a7\u27e832\u27e9Users\nHere are some of the projects using rust-rdkafka:\n  * timely-dataflow\u27e833\u27e9: a distributed data-parallel compute engine. See also the blog post\u27e834\u27e9 announcing its Kafka integration.\n  * kafka-view\u27e835\u27e9: a web interface for Kafka clusters.\n  * kafka-benchmark\u27e816\u27e9: a high performance benchmarking tool for Kafka.\n  * callysto\u27e836\u27e9: Stream processing framework in Rust.\n  * bytewax\u27e837\u27e9: Python stream processing framework using Timely Dataflow.\n\n\n_If you are using rust-rdkafka, please let us know!_\n### \u00a7\u27e838\u27e9Installation\nAdd this to your `Cargo.toml`:\n```\n[dependencies]\nrdkafka = { version = \"0.25\", features = [\"cmake-build\"] }\n```\n\nThis crate will compile librdkafka from sources and link it statically to your executable. To compile librdkafka you\u2019ll need:\n  * the GNU toolchain\n  * GNU `make`\n  * `pthreads`\n  * `zlib`: optional, but included by default (feature: `libz`)\n  * `cmake`: optional, _not_ included by default (feature: `cmake-build`)\n  * `libssl-dev`: optional, _not_ included by default (feature: `ssl`)\n  * `libsasl2-dev`: optional, _not_ included by default (feature: `gssapi`)\n  * `libzstd-dev`: optional, _not_ included by default (feature: `zstd-pkg-config`)\n\n\nNote that using the CMake build system, via the `cmake-build` feature, is encouraged if you can take the dependency on CMake.\nBy default a submodule with the librdkafka sources pinned to a specific commit will be used to compile and statically link the library. The `dynamic-linking` feature can be used to instead dynamically link rdkafka to the system\u2019s version of librdkafka. Example:\n```\n[dependencies]\nrdkafka = { version = \"0.25\", features = [\"dynamic-linking\"] }\n```\n\nFor a full listing of features, consult the rdkafka-sys crate\u2019s documentation\u27e839\u27e9. All of rdkafka-sys features are re-exported as rdkafka features.\n#### \u00a7\u27e840\u27e9Minimum supported Rust version (MSRV)\nThe current minimum supported Rust version (MSRV) is 1.70.0. Note that bumping the MSRV is not considered a breaking change. Any release of rust-rdkafka may bump the MSRV.\n#### \u00a7\u27e841\u27e9Asynchronous runtimes\nSome features of the `StreamConsumer`\u27e820\u27e9 and `FutureProducer`\u27e822\u27e9 depend on Tokio, which can be a heavyweight dependency for users who only intend to use the low-level consumers and producers. The Tokio integration is enabled by default, but can be disabled by turning off default features:\n```\n[dependencies]\nrdkafka = { version = \"0.25\", default-features = false }\n```\n\nIf you would like to use an asynchronous runtime besides Tokio, you can integrate it with rust-rdkafka by providing a shim that implements the `AsyncRuntime`\u27e842\u27e9 trait. See the following examples for details:\n  * smol\u27e843\u27e9\n  * async-std\u27e844\u27e9\n\n\n### \u00a7\u27e845\u27e9Examples\nYou can find examples in the `examples`\u27e846\u27e9 folder. To run them:\n```\ncargo run --example <example_name> -- <example_args>\n```\n\n### \u00a7\u27e847\u27e9Debugging\nrust-rdkafka uses the `log`\u27e848\u27e9 crate to handle logging. Optionally, enable the `tracing` feature to emit `tracing`\u27e849\u27e9 events as opposed to `log`\u27e848\u27e9 records.\nIn test and examples, rust-rdkafka uses the `env_logger`\u27e850\u27e9 crate to format logs. In those contexts, logging can be enabled using the `RUST_LOG` environment variable, for example:\n```\nRUST_LOG=\"librdkafka=trace,rdkafka::client=debug\" cargo test\n```\n\nThis will configure the logging level of librdkafka to trace, and the level of the client module of the Rust client to debug. To actually receive logs from librdkafka, you also have to set the `debug` option in the producer or consumer configuration (see librdkafka configuration\u27e851\u27e9).\nTo enable debugging in your project, make sure you initialize the logger with `env_logger::init()`, or the equivalent for any `log`-compatible logging framework.\n## Re-exports\u00a7\u27e852\u27e9\n\n`pub use crate::client::ClientContext[](https://docs.rs/rdkafka/latest/rdkafka/client/trait.ClientContext.html \"trait rdkafka::client::ClientContext\");`\n\n\n`pub use crate::config::ClientConfig[](https://docs.rs/rdkafka/latest/rdkafka/config/struct.ClientConfig.html \"struct rdkafka::config::ClientConfig\");`\n\n\n`pub use crate::message::Message[](https://docs.rs/rdkafka/latest/rdkafka/message/trait.Message.html \"trait rdkafka::message::Message\");`\n\n\n`pub use crate::message::Timestamp[](https://docs.rs/rdkafka/latest/rdkafka/message/enum.Timestamp.html \"enum rdkafka::message::Timestamp\");`\n\n\n`pub use crate::statistics::Statistics[](https://docs.rs/rdkafka/latest/rdkafka/statistics/struct.Statistics.html \"struct rdkafka::statistics::Statistics\");`\n\n\n`pub use crate::topic_partition_list::Offset[](https://docs.rs/rdkafka/latest/rdkafka/topic_partition_list/enum.Offset.html \"enum rdkafka::topic_partition_list::Offset\");`\n\n\n`pub use crate::topic_partition_list::TopicPartitionList[](https://docs.rs/rdkafka/latest/rdkafka/topic_partition_list/struct.TopicPartitionList.html \"struct rdkafka::topic_partition_list::TopicPartitionList\");`\n\n\n`pub use crate::util::IntoOpaque[](https://docs.rs/rdkafka/latest/rdkafka/util/trait.IntoOpaque.html \"trait rdkafka::util::IntoOpaque\");`\n\n## Modules\u00a7\u27e853\u27e9\n\nadmin\u27e854\u27e9\n    Admin client.\n\nbindings\u27e855\u27e9\n    FFI bindings.\n\nclient\u27e856\u27e9\n    Common client functionality.\n\nconfig\u27e857\u27e9\n    Producer and consumer configuration.\n\nconsumer\u27e858\u27e9\n    Kafka consumers.\n\nerror\u27e859\u27e9\n    Error manipulations.\n\ngroups\u27e860\u27e9\n    Group membership API.\n\nhelpers\u27e861\u27e9\n    Utility functions.\n\nmessage\u27e862\u27e9\n    Store and manipulate Kafka messages.\n\nmetadata\u27e863\u27e9\n    Cluster metadata.\n\nmocking\u27e864\u27e9\n    Mocking functionality\n\nproducer\u27e865\u27e9\n    Kafka producers.\n\nstatistics\u27e866\u27e9\n    Client and broker statistics.\n\ntopic_partition_list\u27e867\u27e9\n    Data structures representing topic, partitions and offsets.\n\ntypes\u27e868\u27e9\n    Aliases for types defined in the auto-generated bindings.\n\nutil\u27e869\u27e9\n    Utility functions and types.\n",
            "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://docs.rs/rdkafka/latest/settings.html: Settings\n\u27e82\u27e9 https://docs.rs/rdkafka/latest/help.html: Help\n\u27e83\u27e9 https://docs.rs/rdkafka/latest/src/rdkafka/lib.rs.html#1-297: Source\n\u27e84\u27e9 https://github.com/rust-lang/futures-rs: futures\n\u27e85\u27e9 https://kafka.apache.org: Apache Kafka\n\u27e86\u27e9 https://github.com/edenhill/librdkafka: librdkafka\n\u27e87\u27e9 https://docs.rs/rdkafka/latest/rdkafka/#the-library: \u00a7\n\u27e88\u27e9 https://docs.rs/rdkafka/latest/rdkafka/#documentation: \u00a7\n\u27e89\u27e9 https://fede1024.github.io/rust-rdkafka/: Current master branch\n\u27e810\u27e9 https://docs.rs/rdkafka/: Latest release\n\u27e811\u27e9 https://github.com/fede1024/rust-rdkafka/blob/master/changelog.md: Changelog\n\u27e812\u27e9 https://docs.rs/rdkafka/latest/rdkafka/#features: \u00a7\n\u27e813\u27e9 https://github.com/edenhill/librdkafka/blob/master/INTRODUCTION.md#broker-version-compatibility: librdkafka documentation\n\u27e814\u27e9 https://docs.rs/rdkafka/latest/rdkafka/#one-million-messages-per-second: \u00a7\n\u27e815\u27e9 https://docs.rs/rdkafka/*/rdkafka/producer/base_producer/struct.BaseProducer.html: `BaseProducer`\n\u27e816\u27e9 https://github.com/fede1024/kafka-benchmark: kafka-benchmark\n\u27e817\u27e9 https://docs.rs/rdkafka/latest/rdkafka/#client-types: \u00a7\n\u27e818\u27e9 https://docs.rs/rdkafka/*/rdkafka/consumer/base_consumer/struct.BaseConsumer.html: `BaseConsumer`\n\u27e819\u27e9 https://docs.rs/rdkafka/*/rdkafka/producer/base_producer/struct.ThreadedProducer.html: `ThreadedProducer`\n\u27e820\u27e9 https://docs.rs/rdkafka/*/rdkafka/consumer/stream_consumer/struct.StreamConsumer.html: `StreamConsumer`\n\u27e821\u27e9 https://docs.rs/futures/*/futures/stream/trait.Stream.html: `Stream`\n\u27e822\u27e9 https://docs.rs/rdkafka/*/rdkafka/producer/future_producer/struct.FutureProducer.html: `FutureProducer`\n\u27e823\u27e9 https://doc.rust-lang.org/stable/std/future/trait.Future.html: `Future`\n\u27e824\u27e9 https://docs.rs/rdkafka/latest/rdkafka/#asynchronous-data-processing-with-tokio: \u00a7\n\u27e825\u27e9 https://tokio.rs/: Tokio\n\u27e826\u27e9 https://github.com/fede1024/rust-rdkafka/blob/master/examples/asynchronous_processing.rs: asynchronous processing example\n\u27e827\u27e9 https://docs.rs/rdkafka/latest/rdkafka/#at-least-once-delivery: \u00a7\n\u27e828\u27e9 https://github.com/fede1024/rust-rdkafka/blob/master/examples/at_least_once.rs: at-least-once delivery example\n\u27e829\u27e9 https://kafka.apache.org/0101/documentation.html#semantics: message delivery semantics\n\u27e830\u27e9 https://docs.rs/rdkafka/latest/rdkafka/#exactly-once-semantics: \u00a7\n\u27e831\u27e9 https://docs.rs/rdkafka/latest/rdkafka/producer-transactions: Transactions\n\u27e832\u27e9 https://docs.rs/rdkafka/latest/rdkafka/#users: \u00a7\n\u27e833\u27e9 https://github.com/frankmcsherry/timely-dataflow: timely-dataflow\n\u27e834\u27e9 https://github.com/frankmcsherry/blog/blob/master/posts/2017-11-08.md: blog post\n\u27e835\u27e9 https://github.com/fede1024/kafka-view: kafka-view\n\u27e836\u27e9 https://github.com/vertexclique/callysto: callysto\n\u27e837\u27e9 https://github.com/bytewax/bytewax: bytewax\n\u27e838\u27e9 https://docs.rs/rdkafka/latest/rdkafka/#installation: \u00a7\n\u27e839\u27e9 https://github.com/fede1024/rust-rdkafka/tree/master/rdkafka-sys/README.md#features: rdkafka-sys crate\u2019s documentation\n\u27e840\u27e9 https://docs.rs/rdkafka/latest/rdkafka/#minimum-supported-rust-version-msrv: \u00a7\n\u27e841\u27e9 https://docs.rs/rdkafka/latest/rdkafka/#asynchronous-runtimes: \u00a7\n\u27e842\u27e9 https://docs.rs/rdkafka/*/rdkafka/util/trait.AsyncRuntime.html: `AsyncRuntime`\n\u27e843\u27e9 https://github.com/fede1024/rust-rdkafka/blob/master/examples/runtime_smol.rs: smol\n\u27e844\u27e9 https://github.com/fede1024/rust-rdkafka/blob/master/examples/runtime_async_std.rs: async-std\n\u27e845\u27e9 https://docs.rs/rdkafka/latest/rdkafka/#examples: \u00a7\n\u27e846\u27e9 https://github.com/fede1024/rust-rdkafka/blob/master/examples/: `examples`\n\u27e847\u27e9 https://docs.rs/rdkafka/latest/rdkafka/#debugging: \u00a7\n\u27e848\u27e9 https://docs.rs/log: `log`\n\u27e849\u27e9 https://docs.rs/tracing: `tracing`\n\u27e850\u27e9 https://docs.rs/env_logger: `env_logger`\n\u27e851\u27e9 https://github.com/edenhill/librdkafka/blob/master/CONFIGURATION.md: configuration\n\u27e852\u27e9 https://docs.rs/rdkafka/latest/rdkafka/#reexports: \u00a7\n\u27e853\u27e9 https://docs.rs/rdkafka/latest/rdkafka/#modules: \u00a7\n\u27e854\u27e9 https://docs.rs/rdkafka/latest/rdkafka/admin/index.html: mod rdkafka::admin - admin\n\u27e855\u27e9 https://docs.rs/rdkafka/latest/rdkafka/bindings/index.html: mod rdkafka::bindings - bindings\n\u27e856\u27e9 https://docs.rs/rdkafka/latest/rdkafka/client/index.html: mod rdkafka::client - client\n\u27e857\u27e9 https://docs.rs/rdkafka/latest/rdkafka/config/index.html: mod rdkafka::config - config\n\u27e858\u27e9 https://docs.rs/rdkafka/latest/rdkafka/consumer/index.html: mod rdkafka::consumer - consumer\n\u27e859\u27e9 https://docs.rs/rdkafka/latest/rdkafka/error/index.html: mod rdkafka::error - error\n\u27e860\u27e9 https://docs.rs/rdkafka/latest/rdkafka/groups/index.html: mod rdkafka::groups - groups\n\u27e861\u27e9 https://docs.rs/rdkafka/latest/rdkafka/helpers/index.html: mod rdkafka::helpers - helpers\n\u27e862\u27e9 https://docs.rs/rdkafka/latest/rdkafka/message/index.html: mod rdkafka::message - message\n\u27e863\u27e9 https://docs.rs/rdkafka/latest/rdkafka/metadata/index.html: mod rdkafka::metadata - metadata\n\u27e864\u27e9 https://docs.rs/rdkafka/latest/rdkafka/mocking/index.html: mod rdkafka::mocking - mocking\n\u27e865\u27e9 https://docs.rs/rdkafka/latest/rdkafka/producer/index.html: mod rdkafka::producer - producer\n\u27e866\u27e9 https://docs.rs/rdkafka/latest/rdkafka/statistics/index.html: mod rdkafka::statistics - statistics\n\u27e867\u27e9 https://docs.rs/rdkafka/latest/rdkafka/topic_partition_list/index.html: mod rdkafka::topic_partition_list - topic_partition_list\n\u27e868\u27e9 https://docs.rs/rdkafka/latest/rdkafka/types/index.html: mod rdkafka::types - types\n\u27e869\u27e9 https://docs.rs/rdkafka/latest/rdkafka/util/index.html: mod rdkafka::util - util\n",
            "fit_markdown": "",
            "fit_html": ""
          },
          "downloads": 0,
          "github_stars": 0,
          "dependencies": [],
          "features": {},
          "code_snippets": [],
          "readme_sections": {},
          "librs_downloads": null,
          "source": "crates.io",
          "enhanced_scraping": {},
          "enhanced_features": [],
          "enhanced_dependencies": [],
          "readme_summary": "The `rdkafka` crate is a fully asynchronous, futures-enabled Apache Kafka client library for Rust, built on top of `librdkafka`. It supports high-performance message production and consumption, with features like automatic consumer rebalancing, customizable offset commits, exactly-once semantics (EOS), and access to cluster and group metadata. It integrates seamlessly with Tokio for asynchronous processing and provides both low-level and high-level APIs for flexible usage.",
          "feature_summary": null,
          "use_case": "Networking",
          "score": 8.5,
          "factual_counterfactual": "### Pair 1: Kafka Version Compatibility  \n\u2705 **Factual:** `rdkafka` supports all Kafka versions since 0.8.x, ensuring compatibility with a wide range of broker configurations.  \n\u274c **Counterfactual:** `rdkafka` only supports Kafka versions 2.0 and above, making it incompatible with older broker configurations.  \n\n---\n\n### Pair 2: Asynchronous Message Processing  \n\u2705 **Factual:** The `StreamConsumer` and `FutureProducer` in `rdkafka` are designed to integrate seamlessly with the Tokio platform for asynchronous message processing.  \n\u274c **Counterfactual:** `rdkafka` requires Tokio for all asynchronous processing, and cannot function without it.  \n\n---\n\n### Pair 3: Exactly-Once Semantics  \n\u2705 **Factual:** `rdkafka` provides exactly-once semantics (EOS) through idempotent and transactional producers paired with read-committed consumers.  \n\u274c **Counterfactual:** `rdkafka` does not support exactly-once semantics, requiring developers to implement custom logic for transactional guarantees.",
          "source_analysis": null,
          "user_behavior": null,
          "security": null
        }
      },
      "irl_score": 8.6,
      "execution_id": "exec-bdeefef7-793a23fd-1751263499",
      "timestamp": "2025-06-30T06:04:59.334099+00:00",
      "canon_version": "1.3.0"
    },
    "rule_zero_compliant": true
  }
]