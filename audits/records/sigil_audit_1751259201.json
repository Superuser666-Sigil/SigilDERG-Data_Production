[
  {
    "execution_id": "exec-d32ebefd-b579cfe2-1751259189",
    "timestamp": "2025-06-30T04:53:09.639980+00:00",
    "sacred_chain": {
      "input_data": "serde_cbor",
      "context_sources": [
        "crates.io",
        "github.com",
        "lib.rs",
        "docs.rs"
      ],
      "reasoning_steps": [
        "Input canonicalized: 'serde_cbor' -> 'serde_cbor'",
        "Context gathered from 4 validated sources",
        "Metadata extracted: 4 fields",
        "Documentation analyzed: quality 7.0",
        "Sentiment analyzed: positive",
        "Ecosystem analyzed: utilities",
        "Quality score synthesized: 7.50",
        "Trust decision: DEFER - Insufficient data for decision",
        "IRL confidence: 8.600"
      ],
      "suggestion": "ALLOW: Positive community sentiment",
      "verdict": "DEFER",
      "audit_info": {
        "metadata": {
          "name": "serde_cbor",
          "type": "rust_crate",
          "source": "manual_input",
          "extraction_method": "irl_engine"
        },
        "sentiment": {
          "quality_score": 7.0,
          "completeness": 0.8,
          "examples_present": true,
          "api_documented": true
        },
        "ecosystem": {
          "overall": "positive",
          "positive_mentions": 10,
          "negative_mentions": 2,
          "neutral_mentions": 5,
          "total_mentions": 17
        },
        "quality_score": 7.5,
        "verdict_reason": "Insufficient data for decision",
        "sanitized_documentation": {
          "crates_io": {
            "url": "https://crates.io/crates/serde_cbor",
            "title": "serde_cbor v0.11.2",
            "content": {
              "raw_markdown": "#  serde_cbor v0.11.2\nCBOR support for serde. \n  * [ #no_std ](https://crates.io/keywords/no_std)\n  * [ #cbor ](https://crates.io/keywords/cbor)\n  * [ #serde ](https://crates.io/keywords/serde)\n  * [ #serialization ](https://crates.io/keywords/serialization)\n\n\n  * [ Readme ](https://crates.io/crates/serde_cbor)\n  * [ 24 Versions ](https://crates.io/crates/serde_cbor/versions)\n  * [ Dependencies ](https://crates.io/crates/serde_cbor/dependencies)\n  * [ Dependents ](https://crates.io/crates/serde_cbor/reverse_dependencies)\n\n\n## Metadata\nalmost 4 years ago \n2018 edition \n[ MIT ](https://choosealicense.com/licenses/mit) OR [ Apache-2.0 ](https://choosealicense.com/licenses/apache-2.0)\n43.5 KiB \n## Install\nRun the following Cargo command in your project directory:\ncargo add serde_cbor\nOr add the following line to your Cargo.toml:\nserde_cbor = \"0.11.2\"\n## Repository\n[ github.com/pyfisch/cbor ](https://github.com/pyfisch/cbor)\n## Owners\n## Categories\n  * [Encoding](https://crates.io/categories/encoding)\n\n\n[ Report crate ](https://crates.io/support?crate=serde_cbor&inquire=crate-violation)\n### Stats Overview\n46,385,126 Downloads all time\n24 Versions published\n#### Downloads over the last 90 days\nDisplay as \nStacked \n  * Stacked \n  * Unstacked \n\n\nLoading\u2026\n",
              "markdown_with_citations": "#  serde_cbor v0.11.2\nCBOR support for serde. \n  *  #no_std \u27e81\u27e9\n  *  #cbor \u27e82\u27e9\n  *  #serde \u27e83\u27e9\n  *  #serialization \u27e84\u27e9\n\n\n  *  Readme \u27e85\u27e9\n  *  24 Versions \u27e86\u27e9\n  *  Dependencies \u27e87\u27e9\n  *  Dependents \u27e88\u27e9\n\n\n## Metadata\nalmost 4 years ago \n2018 edition \n MIT \u27e89\u27e9 OR  Apache-2.0 \u27e810\u27e9\n43.5 KiB \n## Install\nRun the following Cargo command in your project directory:\ncargo add serde_cbor\nOr add the following line to your Cargo.toml:\nserde_cbor = \"0.11.2\"\n## Repository\n github.com/pyfisch/cbor \u27e811\u27e9\n## Owners\n## Categories\n  * Encoding\u27e812\u27e9\n\n\n Report crate \u27e813\u27e9\n### Stats Overview\n46,385,126 Downloads all time\n24 Versions published\n#### Downloads over the last 90 days\nDisplay as \nStacked \n  * Stacked \n  * Unstacked \n\n\nLoading\u2026\n",
              "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://crates.io/keywords/no_std:  #no_std \n\u27e82\u27e9 https://crates.io/keywords/cbor:  #cbor \n\u27e83\u27e9 https://crates.io/keywords/serde:  #serde \n\u27e84\u27e9 https://crates.io/keywords/serialization:  #serialization \n\u27e85\u27e9 https://crates.io/crates/serde_cbor:  Readme \n\u27e86\u27e9 https://crates.io/crates/serde_cbor/versions:  24 Versions \n\u27e87\u27e9 https://crates.io/crates/serde_cbor/dependencies:  Dependencies \n\u27e88\u27e9 https://crates.io/crates/serde_cbor/reverse_dependencies:  Dependents \n\u27e89\u27e9 https://choosealicense.com/licenses/mit:  MIT \n\u27e810\u27e9 https://choosealicense.com/licenses/apache-2.0:  Apache-2.0 \n\u27e811\u27e9 https://github.com/pyfisch/cbor:  github.com/pyfisch/cbor \n\u27e812\u27e9 https://crates.io/categories/encoding: Encoding\n\u27e813\u27e9 https://crates.io/support?crate=serde_cbor&inquire=crate-violation:  Report crate \n",
              "fit_markdown": "",
              "fit_html": ""
            },
            "structured_data": {},
            "quality_score": 3.0,
            "extraction_method": "crawl4ai",
            "error": null,
            "metadata": {
              "doc_type": "docs",
              "content_length": 1267,
              "has_structured_data": false,
              "crawl_success": true
            },
            "timestamp": "112979.6692038"
          },
          "docs_rs": {
            "url": "https://docs.rs/serde_cbor",
            "title": "Crate serde_cborCopy item path",
            "content": {
              "raw_markdown": "[](https://docs.rs/serde_cbor/latest/serde_cbor/all.html \"show sidebar\")\n# Crate serde_cborCopy item path\n[Settings](https://docs.rs/serde_cbor/latest/settings.html)\n[Help](https://docs.rs/serde_cbor/latest/help.html)\nSummary[Source](https://docs.rs/serde_cbor/latest/src/serde_cbor/lib.rs.html#1-369)\nExpand description\nCBOR and serialization.\n## [\u00a7](https://docs.rs/serde_cbor/latest/serde_cbor/#usage)Usage\nSerde CBOR supports Rust 1.40 and up. Add this to your `Cargo.toml`:\n```\n[dependencies]\nserde_cbor = \"0.10\"\n```\n\nStoring and loading Rust types is easy and requires only minimal modifications to the program code.\n```\nuse serde_derive::{Deserialize, Serialize};\nuse std::error::Error;\nuse std::fs::File;\n// Types annotated with `Serialize` can be stored as CBOR.\n// To be able to load them again add `Deserialize`.\n#[derive(Debug, Serialize, Deserialize)]\nstruct Mascot {\n  name: String,\n  species: String,\n  year_of_birth: u32,\n}\nfn main() -> Result<(), Box<dyn Error>> {\n  let ferris = Mascot {\n    name: \"Ferris\".to_owned(),\n    species: \"crab\".to_owned(),\n    year_of_birth: 2015,\n  };\n  let ferris_file = File::create(\"examples/ferris.cbor\")?;\n  // Write Ferris to the given file.\n  // Instead of a file you can use any type that implements `io::Write`\n  // like a HTTP body, database connection etc.\n  serde_cbor::to_writer(ferris_file, &ferris)?;\n  let tux_file = File::open(\"examples/tux.cbor\")?;\n  // Load Tux from a file.\n  // Serde CBOR performs roundtrip serialization meaning that\n  // the data will not change in any way.\n  let tux: Mascot = serde_cbor::from_reader(tux_file)?;\n  println!(\"{:?}\", tux);\n  // prints: Mascot { name: \"Tux\", species: \"penguin\", year_of_birth: 1996 }\n  Ok(())\n}\n```\n\nThere are a lot of options available to customize the format. To operate on untyped CBOR values have a look at the `Value` type.\n## [\u00a7](https://docs.rs/serde_cbor/latest/serde_cbor/#type-based-serialization-and-deserialization)Type-based Serialization and Deserialization\nSerde provides a mechanism for low boilerplate serialization & deserialization of values to and from CBOR via the serialization API. To be able to serialize a piece of data, it must implement the `serde::Serialize` trait. To be able to deserialize a piece of data, it must implement the `serde::Deserialize` trait. Serde provides an annotation to automatically generate the code for these traits: `#[derive(Serialize, Deserialize)]`.\nThe CBOR API also provides an enum `serde_cbor::Value`.\n## [\u00a7](https://docs.rs/serde_cbor/latest/serde_cbor/#packed-encoding)Packed Encoding\nWhen serializing structs or enums in CBOR the keys or enum variant names will be serialized as string keys to a map. Especially in embedded environments this can increase the file size too much. In packed encoding all struct keys, as well as any enum variant that has no data, will be serialized as variable sized integers. The first 24 entries in any struct consume only a single byte! Packed encoding uses serde\u2019s preferred [externally tagged enum format](https://serde.rs/enum-representations.html) and therefore serializes enum variant names as string keys when that variant contains data. So, in the packed encoding example, `FirstVariant` encodes to a single byte, but encoding `SecondVariant` requires 16 bytes.\nTo serialize a document in this format use `Serializer::new(writer).packed_format()` or the shorthand `ser::to_vec_packed`. The deserialization works without any changes.\nIf you would like to omit the enum variant encoding for all variants, including ones that contain data, you can add `legacy_enums()` in addition to `packed_format()`, as can seen in the Serialize using minimal encoding example.\n## [\u00a7](https://docs.rs/serde_cbor/latest/serde_cbor/#self-describing-documents)Self describing documents\nIn some contexts different formats are used but there is no way to declare the format used out of band. For this reason CBOR has a magic number that may be added before any document. Self describing documents are created with `serializer.self_describe()`.\n## [\u00a7](https://docs.rs/serde_cbor/latest/serde_cbor/#examples)Examples\nRead a CBOR value that is known to be a map of string keys to string values and print it.\n```\nuse std::collections::BTreeMap;\nuse serde_cbor::from_slice;\nlet slice = b\"\\xa5aaaAabaBacaCadaDaeaE\";\nlet value: BTreeMap<String, String> = from_slice(slice).unwrap();\nprintln!(\"{:?}\", value); // {\"e\": \"E\", \"d\": \"D\", \"a\": \"A\", \"c\": \"C\", \"b\": \"B\"}\n```\n\nRead a general CBOR value with an unknown content.\n```\nuse serde_cbor::from_slice;\nuse serde_cbor::value::Value;\nlet slice = b\"\\x82\\x01\\xa1aaab\";\nlet value: Value = from_slice(slice).unwrap();\nprintln!(\"{:?}\", value); // Array([U64(1), Object({String(\"a\"): String(\"b\")})])\n```\n\nSerialize an object.\n```\nuse std::collections::BTreeMap;\nuse serde_cbor::to_vec;\nlet mut programming_languages = BTreeMap::new();\nprogramming_languages.insert(\"rust\", vec![\"safe\", \"concurrent\", \"fast\"]);\nprogramming_languages.insert(\"python\", vec![\"powerful\", \"friendly\", \"open\"]);\nprogramming_languages.insert(\"js\", vec![\"lightweight\", \"interpreted\", \"object-oriented\"]);\nlet encoded = to_vec(&programming_languages);\nassert_eq!(encoded.unwrap().len(), 103);\n```\n\nDeserializing data in the middle of a slice\n```\nuse serde_cbor::Deserializer;\nlet data: Vec<u8> = vec![\n  0x66, 0x66, 0x6f, 0x6f, 0x62, 0x61, 0x72, 0x66, 0x66, 0x6f, 0x6f, 0x62,\n  0x61, 0x72,\n];\nlet mut deserializer = Deserializer::from_slice(&data);\nlet value: &str = serde::de::Deserialize::deserialize(&mut deserializer)\n  .unwrap();\nlet rest = &data[deserializer.byte_offset()..];\nassert_eq!(value, \"foobar\");\nassert_eq!(rest, &[0x66, 0x66, 0x6f, 0x6f, 0x62, 0x61, 0x72]);\n```\n\nSerialize using packed encoding\n```\nuse serde_derive::{Deserialize, Serialize};\nuse serde_cbor::ser::to_vec_packed;\nuse WithTwoVariants::*;\n#[derive(Debug, Serialize, Deserialize)]\nenum WithTwoVariants {\n  FirstVariant,\n  SecondVariant(u8),\n}\nlet cbor = to_vec_packed(&FirstVariant).unwrap();\nassert_eq!(cbor.len(), 1);\nlet cbor = to_vec_packed(&SecondVariant(0)).unwrap();\nassert_eq!(cbor.len(), 16); // Includes 13 bytes of \"SecondVariant\"\n```\n\nSerialize using minimal encoding\n```\nuse serde_derive::{Deserialize, Serialize};\nuse serde_cbor::{Result, Serializer, ser::{self, IoWrite}};\nuse WithTwoVariants::*;\nfn to_vec_minimal<T>(value: &T) -> Result<Vec<u8>>\nwhere\n  T: serde::Serialize,\n{\n  let mut vec = Vec::new();\n  value.serialize(&mut Serializer::new(&mut IoWrite::new(&mut vec)).packed_format().legacy_enums())?;\n  Ok(vec)\n}\n#[derive(Debug, Serialize, Deserialize)]\nenum WithTwoVariants {\n  FirstVariant,\n  SecondVariant(u8),\n}\nlet cbor = to_vec_minimal(&FirstVariant).unwrap();\nassert_eq!(cbor.len(), 1);\nlet cbor = to_vec_minimal(&SecondVariant(0)).unwrap();\nassert_eq!(cbor.len(), 3);\n```\n\n## [\u00a7](https://docs.rs/serde_cbor/latest/serde_cbor/#no-std-support)`no-std` support\nSerde CBOR supports building in a `no_std` context, use the following lines in your `Cargo.toml` dependencies:\n```\n[dependencies]\nserde = { version = \"1.0\", default-features = false }\nserde_cbor = { version = \"0.10\", default-features = false }\n```\n\nWithout the `std` feature the functions [from_reader](https://docs.rs/serde_cbor/latest/serde_cbor/fn.from_reader.html \"fn serde_cbor::from_reader\"), [from_slice](https://docs.rs/serde_cbor/latest/serde_cbor/fn.from_slice.html \"fn serde_cbor::from_slice\"), [to_vec](https://docs.rs/serde_cbor/latest/serde_cbor/fn.to_vec.html \"fn serde_cbor::to_vec\"), and [to_writer](https://docs.rs/serde_cbor/latest/serde_cbor/fn.to_writer.html \"fn serde_cbor::to_writer\") are not exported. To export [from_slice](https://docs.rs/serde_cbor/latest/serde_cbor/fn.from_slice.html \"fn serde_cbor::from_slice\") and [to_vec](https://docs.rs/serde_cbor/latest/serde_cbor/fn.to_vec.html \"fn serde_cbor::to_vec\") enable the `alloc` feature. The `alloc` feature uses the [`alloc` library](https://doc.rust-lang.org/alloc/) and requires at least version 1.36.0 of Rust.\n_Note_ : to use derive macros in serde you will need to declare `serde` dependency like so:\n```\nserde = { version = \"1.0\", default-features = false, features = [\"derive\"] }\n```\n\nSerialize an object with `no_std` and without `alloc`.\n```\nuse serde::Serialize;\nuse serde_cbor::Serializer;\nuse serde_cbor::ser::SliceWrite;\n#[derive(Serialize)]\nstruct User {\n  user_id: u32,\n  password_hash: [u8; 4],\n}\nlet mut buf = [0u8; 100];\nlet writer = SliceWrite::new(&mut buf[..]);\nlet mut ser = Serializer::new(writer);\nlet user = User {\n  user_id: 42,\n  password_hash: [1, 2, 3, 4],\n};\nuser.serialize(&mut ser)?;\nlet writer = ser.into_inner();\nlet size = writer.bytes_written();\nlet expected = [\n  0xa2, 0x67, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x2a, 0x6d,\n  0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x5f, 0x68, 0x61, 0x73,\n  0x68, 0x84, 0x1, 0x2, 0x3, 0x4\n];\nassert_eq!(&buf[..size], expected);\n```\n\nDeserialize an object.\n```\n#[derive(Debug, PartialEq, Deserialize)]\nstruct User {\n  user_id: u32,\n  password_hash: [u8; 4],\n}\nlet value = [\n  0xa2, 0x67, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x2a, 0x6d,\n  0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x5f, 0x68, 0x61, 0x73,\n  0x68, 0x84, 0x1, 0x2, 0x3, 0x4\n];\n// from_slice_with_scratch will not alter input data, use it whenever you\n// borrow from somewhere else.\n// You will have to size your scratch according to the input data you\n// expect.\nuse serde_cbor::de::from_slice_with_scratch;\nlet mut scratch = [0u8; 32];\nlet user: User = from_slice_with_scratch(&value[..], &mut scratch)?;\nassert_eq!(user, User {\n  user_id: 42,\n  password_hash: [1, 2, 3, 4],\n});\nlet mut value = [\n  0xa2, 0x67, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x2a, 0x6d,\n  0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x5f, 0x68, 0x61, 0x73,\n  0x68, 0x84, 0x1, 0x2, 0x3, 0x4\n];\n// from_mut_slice will move data around the input slice, you may only use it\n// on data you may own or can modify.\nuse serde_cbor::de::from_mut_slice;\nlet user: User = from_mut_slice(&mut value[..])?;\nassert_eq!(user, User {\n  user_id: 42,\n  password_hash: [1, 2, 3, 4],\n});\n```\n\n## [\u00a7](https://docs.rs/serde_cbor/latest/serde_cbor/#limitations)Limitations\nWhile Serde CBOR strives to support all features of Serde and CBOR there are a few limitations.\n  * [Tags](https://tools.ietf.org/html/rfc7049#section-2.4.4) are ignored during deserialization and can\u2019t be emitted during serialization. This is because Serde has no concept of tagged values. See: [#3](https://github.com/pyfisch/cbor/issues/3)\n  * Unknown [simple values](https://tools.ietf.org/html/rfc7049#section-3.5) cause an `UnassignedCode` error. The simple values _False_ and _True_ are recognized and parsed as bool. _Null_ and _Undefined_ are both deserialized as _unit_. The _unit_ type is serialized as _Null_. See: [#86](https://github.com/pyfisch/cbor/issues/86)\n  * [128-bit integers](https://doc.rust-lang.org/std/primitive.u128.html) can\u2019t be directly encoded in CBOR. If you need them store them as a byte string. See: [#77](https://github.com/pyfisch/cbor/issues/77)\n\n\n## Modules[\u00a7](https://docs.rs/serde_cbor/latest/serde_cbor/#modules)\n\n[de](https://docs.rs/serde_cbor/latest/serde_cbor/de/index.html \"mod serde_cbor::de\")\n    Deserialization.\n\n[error](https://docs.rs/serde_cbor/latest/serde_cbor/error/index.html \"mod serde_cbor::error\")\n    When serializing or deserializing CBOR goes wrong.\n\n[ser](https://docs.rs/serde_cbor/latest/serde_cbor/ser/index.html \"mod serde_cbor::ser\")\n    Serialize a Rust data structure to CBOR data.\n\n[tags](https://docs.rs/serde_cbor/latest/serde_cbor/tags/index.html \"mod serde_cbor::tags\")\n    Support for cbor tags\n\n[value](https://docs.rs/serde_cbor/latest/serde_cbor/value/index.html \"mod serde_cbor::value\")\n    CBOR values, keys and serialization routines.\n## Structs[\u00a7](https://docs.rs/serde_cbor/latest/serde_cbor/#structs)\n\n[Deserializer](https://docs.rs/serde_cbor/latest/serde_cbor/struct.Deserializer.html \"struct serde_cbor::Deserializer\")\n    A Serde `Deserialize`r of CBOR data.\n\n[Error](https://docs.rs/serde_cbor/latest/serde_cbor/struct.Error.html \"struct serde_cbor::Error\")\n    This type represents all possible errors that can occur when serializing or deserializing CBOR data.\n\n[Serializer](https://docs.rs/serde_cbor/latest/serde_cbor/struct.Serializer.html \"struct serde_cbor::Serializer\")\n    A structure for serializing Rust values to CBOR.\n\n[StreamDeserializer](https://docs.rs/serde_cbor/latest/serde_cbor/struct.StreamDeserializer.html \"struct serde_cbor::StreamDeserializer\")\n    Iterator that deserializes a stream into multiple CBOR values.\n## Enums[\u00a7](https://docs.rs/serde_cbor/latest/serde_cbor/#enums)\n\n[Value](https://docs.rs/serde_cbor/latest/serde_cbor/enum.Value.html \"enum serde_cbor::Value\")\n    The `Value` enum, a loosely typed way of representing any valid CBOR value.\n## Functions[\u00a7](https://docs.rs/serde_cbor/latest/serde_cbor/#functions)\n\n[from_reader](https://docs.rs/serde_cbor/latest/serde_cbor/fn.from_reader.html \"fn serde_cbor::from_reader\")\n    Decodes a value from CBOR data in a reader.\n\n[from_slice](https://docs.rs/serde_cbor/latest/serde_cbor/fn.from_slice.html \"fn serde_cbor::from_slice\")\n    Decodes a value from CBOR data in a slice.\n\n[to_vec](https://docs.rs/serde_cbor/latest/serde_cbor/fn.to_vec.html \"fn serde_cbor::to_vec\")\n    Serializes a value to a vector.\n\n[to_writer](https://docs.rs/serde_cbor/latest/serde_cbor/fn.to_writer.html \"fn serde_cbor::to_writer\")\n    Serializes a value to a writer.\n## Type Aliases[\u00a7](https://docs.rs/serde_cbor/latest/serde_cbor/#types)\n\n[Result](https://docs.rs/serde_cbor/latest/serde_cbor/type.Result.html \"type serde_cbor::Result\")\n    Alias for a `Result` with the error type `serde_cbor::Error`.\n",
              "markdown_with_citations": "[](https://docs.rs/serde_cbor/latest/serde_cbor/all.html \"show sidebar\")\n# Crate serde_cborCopy item path\nSettings\u27e81\u27e9\nHelp\u27e82\u27e9\nSummarySource\u27e83\u27e9\nExpand description\nCBOR and serialization.\n## \u00a7\u27e84\u27e9Usage\nSerde CBOR supports Rust 1.40 and up. Add this to your `Cargo.toml`:\n```\n[dependencies]\nserde_cbor = \"0.10\"\n```\n\nStoring and loading Rust types is easy and requires only minimal modifications to the program code.\n```\nuse serde_derive::{Deserialize, Serialize};\nuse std::error::Error;\nuse std::fs::File;\n// Types annotated with `Serialize` can be stored as CBOR.\n// To be able to load them again add `Deserialize`.\n#[derive(Debug, Serialize, Deserialize)]\nstruct Mascot {\n  name: String,\n  species: String,\n  year_of_birth: u32,\n}\nfn main() -> Result<(), Box<dyn Error>> {\n  let ferris = Mascot {\n    name: \"Ferris\".to_owned(),\n    species: \"crab\".to_owned(),\n    year_of_birth: 2015,\n  };\n  let ferris_file = File::create(\"examples/ferris.cbor\")?;\n  // Write Ferris to the given file.\n  // Instead of a file you can use any type that implements `io::Write`\n  // like a HTTP body, database connection etc.\n  serde_cbor::to_writer(ferris_file, &ferris)?;\n  let tux_file = File::open(\"examples/tux.cbor\")?;\n  // Load Tux from a file.\n  // Serde CBOR performs roundtrip serialization meaning that\n  // the data will not change in any way.\n  let tux: Mascot = serde_cbor::from_reader(tux_file)?;\n  println!(\"{:?}\", tux);\n  // prints: Mascot { name: \"Tux\", species: \"penguin\", year_of_birth: 1996 }\n  Ok(())\n}\n```\n\nThere are a lot of options available to customize the format. To operate on untyped CBOR values have a look at the `Value` type.\n## \u00a7\u27e85\u27e9Type-based Serialization and Deserialization\nSerde provides a mechanism for low boilerplate serialization & deserialization of values to and from CBOR via the serialization API. To be able to serialize a piece of data, it must implement the `serde::Serialize` trait. To be able to deserialize a piece of data, it must implement the `serde::Deserialize` trait. Serde provides an annotation to automatically generate the code for these traits: `#[derive(Serialize, Deserialize)]`.\nThe CBOR API also provides an enum `serde_cbor::Value`.\n## \u00a7\u27e86\u27e9Packed Encoding\nWhen serializing structs or enums in CBOR the keys or enum variant names will be serialized as string keys to a map. Especially in embedded environments this can increase the file size too much. In packed encoding all struct keys, as well as any enum variant that has no data, will be serialized as variable sized integers. The first 24 entries in any struct consume only a single byte! Packed encoding uses serde\u2019s preferred externally tagged enum format\u27e87\u27e9 and therefore serializes enum variant names as string keys when that variant contains data. So, in the packed encoding example, `FirstVariant` encodes to a single byte, but encoding `SecondVariant` requires 16 bytes.\nTo serialize a document in this format use `Serializer::new(writer).packed_format()` or the shorthand `ser::to_vec_packed`. The deserialization works without any changes.\nIf you would like to omit the enum variant encoding for all variants, including ones that contain data, you can add `legacy_enums()` in addition to `packed_format()`, as can seen in the Serialize using minimal encoding example.\n## \u00a7\u27e88\u27e9Self describing documents\nIn some contexts different formats are used but there is no way to declare the format used out of band. For this reason CBOR has a magic number that may be added before any document. Self describing documents are created with `serializer.self_describe()`.\n## \u00a7\u27e89\u27e9Examples\nRead a CBOR value that is known to be a map of string keys to string values and print it.\n```\nuse std::collections::BTreeMap;\nuse serde_cbor::from_slice;\nlet slice = b\"\\xa5aaaAabaBacaCadaDaeaE\";\nlet value: BTreeMap<String, String> = from_slice(slice).unwrap();\nprintln!(\"{:?}\", value); // {\"e\": \"E\", \"d\": \"D\", \"a\": \"A\", \"c\": \"C\", \"b\": \"B\"}\n```\n\nRead a general CBOR value with an unknown content.\n```\nuse serde_cbor::from_slice;\nuse serde_cbor::value::Value;\nlet slice = b\"\\x82\\x01\\xa1aaab\";\nlet value: Value = from_slice(slice).unwrap();\nprintln!(\"{:?}\", value); // Array([U64(1), Object({String(\"a\"): String(\"b\")})])\n```\n\nSerialize an object.\n```\nuse std::collections::BTreeMap;\nuse serde_cbor::to_vec;\nlet mut programming_languages = BTreeMap::new();\nprogramming_languages.insert(\"rust\", vec![\"safe\", \"concurrent\", \"fast\"]);\nprogramming_languages.insert(\"python\", vec![\"powerful\", \"friendly\", \"open\"]);\nprogramming_languages.insert(\"js\", vec![\"lightweight\", \"interpreted\", \"object-oriented\"]);\nlet encoded = to_vec(&programming_languages);\nassert_eq!(encoded.unwrap().len(), 103);\n```\n\nDeserializing data in the middle of a slice\n```\nuse serde_cbor::Deserializer;\nlet data: Vec<u8> = vec![\n  0x66, 0x66, 0x6f, 0x6f, 0x62, 0x61, 0x72, 0x66, 0x66, 0x6f, 0x6f, 0x62,\n  0x61, 0x72,\n];\nlet mut deserializer = Deserializer::from_slice(&data);\nlet value: &str = serde::de::Deserialize::deserialize(&mut deserializer)\n  .unwrap();\nlet rest = &data[deserializer.byte_offset()..];\nassert_eq!(value, \"foobar\");\nassert_eq!(rest, &[0x66, 0x66, 0x6f, 0x6f, 0x62, 0x61, 0x72]);\n```\n\nSerialize using packed encoding\n```\nuse serde_derive::{Deserialize, Serialize};\nuse serde_cbor::ser::to_vec_packed;\nuse WithTwoVariants::*;\n#[derive(Debug, Serialize, Deserialize)]\nenum WithTwoVariants {\n  FirstVariant,\n  SecondVariant(u8),\n}\nlet cbor = to_vec_packed(&FirstVariant).unwrap();\nassert_eq!(cbor.len(), 1);\nlet cbor = to_vec_packed(&SecondVariant(0)).unwrap();\nassert_eq!(cbor.len(), 16); // Includes 13 bytes of \"SecondVariant\"\n```\n\nSerialize using minimal encoding\n```\nuse serde_derive::{Deserialize, Serialize};\nuse serde_cbor::{Result, Serializer, ser::{self, IoWrite}};\nuse WithTwoVariants::*;\nfn to_vec_minimal<T>(value: &T) -> Result<Vec<u8>>\nwhere\n  T: serde::Serialize,\n{\n  let mut vec = Vec::new();\n  value.serialize(&mut Serializer::new(&mut IoWrite::new(&mut vec)).packed_format().legacy_enums())?;\n  Ok(vec)\n}\n#[derive(Debug, Serialize, Deserialize)]\nenum WithTwoVariants {\n  FirstVariant,\n  SecondVariant(u8),\n}\nlet cbor = to_vec_minimal(&FirstVariant).unwrap();\nassert_eq!(cbor.len(), 1);\nlet cbor = to_vec_minimal(&SecondVariant(0)).unwrap();\nassert_eq!(cbor.len(), 3);\n```\n\n## \u00a7\u27e810\u27e9`no-std` support\nSerde CBOR supports building in a `no_std` context, use the following lines in your `Cargo.toml` dependencies:\n```\n[dependencies]\nserde = { version = \"1.0\", default-features = false }\nserde_cbor = { version = \"0.10\", default-features = false }\n```\n\nWithout the `std` feature the functions from_reader\u27e811\u27e9, from_slice\u27e812\u27e9, to_vec\u27e813\u27e9, and to_writer\u27e814\u27e9 are not exported. To export from_slice\u27e812\u27e9 and to_vec\u27e813\u27e9 enable the `alloc` feature. The `alloc` feature uses the `alloc` library\u27e815\u27e9 and requires at least version 1.36.0 of Rust.\n_Note_ : to use derive macros in serde you will need to declare `serde` dependency like so:\n```\nserde = { version = \"1.0\", default-features = false, features = [\"derive\"] }\n```\n\nSerialize an object with `no_std` and without `alloc`.\n```\nuse serde::Serialize;\nuse serde_cbor::Serializer;\nuse serde_cbor::ser::SliceWrite;\n#[derive(Serialize)]\nstruct User {\n  user_id: u32,\n  password_hash: [u8; 4],\n}\nlet mut buf = [0u8; 100];\nlet writer = SliceWrite::new(&mut buf[..]);\nlet mut ser = Serializer::new(writer);\nlet user = User {\n  user_id: 42,\n  password_hash: [1, 2, 3, 4],\n};\nuser.serialize(&mut ser)?;\nlet writer = ser.into_inner();\nlet size = writer.bytes_written();\nlet expected = [\n  0xa2, 0x67, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x2a, 0x6d,\n  0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x5f, 0x68, 0x61, 0x73,\n  0x68, 0x84, 0x1, 0x2, 0x3, 0x4\n];\nassert_eq!(&buf[..size], expected);\n```\n\nDeserialize an object.\n```\n#[derive(Debug, PartialEq, Deserialize)]\nstruct User {\n  user_id: u32,\n  password_hash: [u8; 4],\n}\nlet value = [\n  0xa2, 0x67, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x2a, 0x6d,\n  0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x5f, 0x68, 0x61, 0x73,\n  0x68, 0x84, 0x1, 0x2, 0x3, 0x4\n];\n// from_slice_with_scratch will not alter input data, use it whenever you\n// borrow from somewhere else.\n// You will have to size your scratch according to the input data you\n// expect.\nuse serde_cbor::de::from_slice_with_scratch;\nlet mut scratch = [0u8; 32];\nlet user: User = from_slice_with_scratch(&value[..], &mut scratch)?;\nassert_eq!(user, User {\n  user_id: 42,\n  password_hash: [1, 2, 3, 4],\n});\nlet mut value = [\n  0xa2, 0x67, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x2a, 0x6d,\n  0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x5f, 0x68, 0x61, 0x73,\n  0x68, 0x84, 0x1, 0x2, 0x3, 0x4\n];\n// from_mut_slice will move data around the input slice, you may only use it\n// on data you may own or can modify.\nuse serde_cbor::de::from_mut_slice;\nlet user: User = from_mut_slice(&mut value[..])?;\nassert_eq!(user, User {\n  user_id: 42,\n  password_hash: [1, 2, 3, 4],\n});\n```\n\n## \u00a7\u27e816\u27e9Limitations\nWhile Serde CBOR strives to support all features of Serde and CBOR there are a few limitations.\n  * Tags\u27e817\u27e9 are ignored during deserialization and can\u2019t be emitted during serialization. This is because Serde has no concept of tagged values. See: #3\u27e818\u27e9\n  * Unknown simple values\u27e819\u27e9 cause an `UnassignedCode` error. The simple values _False_ and _True_ are recognized and parsed as bool. _Null_ and _Undefined_ are both deserialized as _unit_. The _unit_ type is serialized as _Null_. See: #86\u27e820\u27e9\n  * 128-bit integers\u27e821\u27e9 can\u2019t be directly encoded in CBOR. If you need them store them as a byte string. See: #77\u27e822\u27e9\n\n\n## Modules\u00a7\u27e823\u27e9\n\nde\u27e824\u27e9\n    Deserialization.\n\nerror\u27e825\u27e9\n    When serializing or deserializing CBOR goes wrong.\n\nser\u27e826\u27e9\n    Serialize a Rust data structure to CBOR data.\n\ntags\u27e827\u27e9\n    Support for cbor tags\n\nvalue\u27e828\u27e9\n    CBOR values, keys and serialization routines.\n## Structs\u00a7\u27e829\u27e9\n\nDeserializer\u27e830\u27e9\n    A Serde `Deserialize`r of CBOR data.\n\nError\u27e831\u27e9\n    This type represents all possible errors that can occur when serializing or deserializing CBOR data.\n\nSerializer\u27e832\u27e9\n    A structure for serializing Rust values to CBOR.\n\nStreamDeserializer\u27e833\u27e9\n    Iterator that deserializes a stream into multiple CBOR values.\n## Enums\u00a7\u27e834\u27e9\n\nValue\u27e835\u27e9\n    The `Value` enum, a loosely typed way of representing any valid CBOR value.\n## Functions\u00a7\u27e836\u27e9\n\nfrom_reader\u27e811\u27e9\n    Decodes a value from CBOR data in a reader.\n\nfrom_slice\u27e812\u27e9\n    Decodes a value from CBOR data in a slice.\n\nto_vec\u27e813\u27e9\n    Serializes a value to a vector.\n\nto_writer\u27e814\u27e9\n    Serializes a value to a writer.\n## Type Aliases\u00a7\u27e837\u27e9\n\nResult\u27e838\u27e9\n    Alias for a `Result` with the error type `serde_cbor::Error`.\n",
              "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://docs.rs/serde_cbor/latest/settings.html: Settings\n\u27e82\u27e9 https://docs.rs/serde_cbor/latest/help.html: Help\n\u27e83\u27e9 https://docs.rs/serde_cbor/latest/src/serde_cbor/lib.rs.html#1-369: Source\n\u27e84\u27e9 https://docs.rs/serde_cbor/latest/serde_cbor/#usage: \u00a7\n\u27e85\u27e9 https://docs.rs/serde_cbor/latest/serde_cbor/#type-based-serialization-and-deserialization: \u00a7\n\u27e86\u27e9 https://docs.rs/serde_cbor/latest/serde_cbor/#packed-encoding: \u00a7\n\u27e87\u27e9 https://serde.rs/enum-representations.html: externally tagged enum format\n\u27e88\u27e9 https://docs.rs/serde_cbor/latest/serde_cbor/#self-describing-documents: \u00a7\n\u27e89\u27e9 https://docs.rs/serde_cbor/latest/serde_cbor/#examples: \u00a7\n\u27e810\u27e9 https://docs.rs/serde_cbor/latest/serde_cbor/#no-std-support: \u00a7\n\u27e811\u27e9 https://docs.rs/serde_cbor/latest/serde_cbor/fn.from_reader.html: fn serde_cbor::from_reader - from_reader\n\u27e812\u27e9 https://docs.rs/serde_cbor/latest/serde_cbor/fn.from_slice.html: fn serde_cbor::from_slice - from_slice\n\u27e813\u27e9 https://docs.rs/serde_cbor/latest/serde_cbor/fn.to_vec.html: fn serde_cbor::to_vec - to_vec\n\u27e814\u27e9 https://docs.rs/serde_cbor/latest/serde_cbor/fn.to_writer.html: fn serde_cbor::to_writer - to_writer\n\u27e815\u27e9 https://doc.rust-lang.org/alloc/: `alloc` library\n\u27e816\u27e9 https://docs.rs/serde_cbor/latest/serde_cbor/#limitations: \u00a7\n\u27e817\u27e9 https://tools.ietf.org/html/rfc7049#section-2.4.4: Tags\n\u27e818\u27e9 https://github.com/pyfisch/cbor/issues/3: #3\n\u27e819\u27e9 https://tools.ietf.org/html/rfc7049#section-3.5: simple values\n\u27e820\u27e9 https://github.com/pyfisch/cbor/issues/86: #86\n\u27e821\u27e9 https://doc.rust-lang.org/std/primitive.u128.html: 128-bit integers\n\u27e822\u27e9 https://github.com/pyfisch/cbor/issues/77: #77\n\u27e823\u27e9 https://docs.rs/serde_cbor/latest/serde_cbor/#modules: \u00a7\n\u27e824\u27e9 https://docs.rs/serde_cbor/latest/serde_cbor/de/index.html: mod serde_cbor::de - de\n\u27e825\u27e9 https://docs.rs/serde_cbor/latest/serde_cbor/error/index.html: mod serde_cbor::error - error\n\u27e826\u27e9 https://docs.rs/serde_cbor/latest/serde_cbor/ser/index.html: mod serde_cbor::ser - ser\n\u27e827\u27e9 https://docs.rs/serde_cbor/latest/serde_cbor/tags/index.html: mod serde_cbor::tags - tags\n\u27e828\u27e9 https://docs.rs/serde_cbor/latest/serde_cbor/value/index.html: mod serde_cbor::value - value\n\u27e829\u27e9 https://docs.rs/serde_cbor/latest/serde_cbor/#structs: \u00a7\n\u27e830\u27e9 https://docs.rs/serde_cbor/latest/serde_cbor/struct.Deserializer.html: struct serde_cbor::Deserializer - Deserializer\n\u27e831\u27e9 https://docs.rs/serde_cbor/latest/serde_cbor/struct.Error.html: struct serde_cbor::Error - Error\n\u27e832\u27e9 https://docs.rs/serde_cbor/latest/serde_cbor/struct.Serializer.html: struct serde_cbor::Serializer - Serializer\n\u27e833\u27e9 https://docs.rs/serde_cbor/latest/serde_cbor/struct.StreamDeserializer.html: struct serde_cbor::StreamDeserializer - StreamDeserializer\n\u27e834\u27e9 https://docs.rs/serde_cbor/latest/serde_cbor/#enums: \u00a7\n\u27e835\u27e9 https://docs.rs/serde_cbor/latest/serde_cbor/enum.Value.html: enum serde_cbor::Value - Value\n\u27e836\u27e9 https://docs.rs/serde_cbor/latest/serde_cbor/#functions: \u00a7\n\u27e837\u27e9 https://docs.rs/serde_cbor/latest/serde_cbor/#types: \u00a7\n\u27e838\u27e9 https://docs.rs/serde_cbor/latest/serde_cbor/type.Result.html: type serde_cbor::Result - Result\n",
              "fit_markdown": "",
              "fit_html": ""
            },
            "structured_data": {},
            "quality_score": 4.0,
            "extraction_method": "crawl4ai",
            "error": null,
            "metadata": {
              "doc_type": "docs",
              "content_length": 13730,
              "has_structured_data": false,
              "crawl_success": true
            },
            "timestamp": "112980.3166672"
          },
          "lib_rs": {
            "url": "https://lib.rs/crates/serde_cbor",
            "title": "Untitled",
            "content": {
              "raw_markdown": "###  [23 releases](https://lib.rs/crates/serde_cbor/versions)\n0.11.2 |  Aug 15, 2021   \n---|---  \n0.11.1 |  Jan 12, 2020   \n0.10.2 |  Oct 3, 2019   \n0.10.1 |  Jul 11, 2019   \n0.1.0 |  Sep 29, 2015   \n#**2029** in [Encoding](https://lib.rs/encoding \"Encoding and/or decoding data from one data format to another.\")\nDownload history 224156/week @ 2024-12-16 66563/week @ 2024-12-23 101043/week @ 2024-12-30 241109/week @ 2025-01-06 284368/week @ 2025-01-13 272057/week @ 2025-01-20 331614/week @ 2025-01-27 369227/week @ 2025-02-03 373812/week @ 2025-02-10 254693/week @ 2025-02-17 257402/week @ 2025-02-24 586954/week @ 2025-03-03 573487/week @ 2025-03-10 838507/week @ 2025-03-17 944438/week @ 2025-03-24 465239/week @ 2025-03-31\n**2,840,393** downloads per month Used in [**2,705** crates (400 directly)](https://lib.rs/crates/serde_cbor/rev)\n**MIT/Apache**\n140KB  3.5K  SLoC\n# Serde CBOR\n[![Build Status](https://img.gs/czjpqfbdkz/full/https://travis-ci.org/pyfisch/cbor.svg?branch=master)](https://travis-ci.org/pyfisch/cbor) [![Crates.io](https://img.shields.io/crates/v/serde_cbor.svg)](https://crates.io/crates/serde_cbor) [![Documentation](https://img.gs/czjpqfbdkz/full/https://docs.rs/serde_cbor/badge.svg)](https://docs.rs/serde_cbor)\n## PROJECT IS ARCHIVED\nAfter almost 6 years it is time to retire this crate. This implementation of CBOR for serde is used in hundreds of projects with widely differing needs. Besides the standard features it contains code for no-std environments, a packed encoding and CBOR tags. However while these features are useful to many people they sometimes interact poorly with each others and with optional features of serde itself. Because I don't use the crate myself and because of the potential for new errors I have been reluctant to accept any changes or additional features for the crate. Since this situation is unlikely to change anytime soon and no one else stepped up to maintain this crate I am archiving the repository today. If the crate works for you there is no need to switch to another implementation. However if you encounter problems or for new projects I recommend you take a look at these crates:\n  * [ciborium](https://lib.rs/crates/ciborium)\n  * [minicbor](https://lib.rs/crates/minicbor)\n\n\n~~ Pyfisch, August 2021\nThis crate implements the Concise Binary Object Representation from [RFC 7049](https://tools.ietf.org/html/rfc7049). It builds on [Serde](https://github.com/serde-rs/serde), the generic serialization framework for Rust. CBOR provides a binary encoding for a superset of the JSON data model that is small and very fast to parse.\n## Usage\nSerde CBOR supports Rust 1.40 and up. Add this to your ``Cargo.toml``:\n```\n```[``dependencies``]`\n`serde_cbor ``=` ``\"`0.11.2`\"``\n``\n```\n\nStoring and loading Rust types is easy and requires only minimal modifications to the program code.\n```\n``use` `serde_derive`::````{`Deserialize`,` Serialize```}```;`\n`use` `std`::```error`::``Error`;`\n`use` `std`::```fs`::``File`;`\n``//` Types annotated with `Serialize` can be stored as CBOR.`\n``//` To be able to load them again add `Deserialize`.`\n``#``[``derive```(```Debug`,` Serialize`,` Deserialize```)```]``\n``struct` ```Mascot` ````{`\n  `name``:` String,\n  `species``:` String,\n  `year_of_birth``:` `u32`,\n```}```\n``fn` `main`````(````)```` ``->` ``Result``<``(``)`, `Box``<`dyn Error`>``>``` ````{`\n  `let` ferris `=` Mascot `{`\n    name`:` ``\"`Ferris`\"```.``to_owned``(``)``,`\n    species`:` ``\"`crab`\"```.``to_owned``(``)``,`\n    year_of_birth`:` `2015``,`\n  `}``;`\n  `let` ferris_file `=` `File`::``create`(```\"`examples/ferris.cbor`\"```)``?``;`\n  ``//` Write Ferris to the given file.`\n  ``//` Instead of a file you can use any type that implements `io::Write``\n  ``//` like a HTTP body, database connection etc.`\n  `serde_cbor`::``to_writer`(`ferris_file`,` `&`ferris`)``?``;`\n  `let` tux_file `=` `File`::``open`(```\"`examples/tux.cbor`\"```)``?``;`\n  ``//` Load Tux from a file.`\n  ``//` Serde CBOR performs roundtrip serialization meaning that`\n  ``//` the data will not change in any way.`\n  `let` tux`:` Mascot `=` `serde_cbor`::``from_reader`(`tux_file`)``?``;`\n  `println!``(```\"``{:?}``\"```,` tux`)``;`\n  ``//` prints: Mascot { name: \"Tux\", species: \"penguin\", year_of_birth: 1996 }`\n  `Ok``(``(``)``)`\n```}```\n`\n```\n\nThere are a lot of options available to customize the format. To operate on untyped CBOR values have a look at the ``Value`` type.\n## License\nLicensed under either of\n  * Apache License, Version 2.0 ([LICENSE-APACHE](https://github.com/pyfisch/cbor/blob/HEAD/LICENSE-APACHE) or <http://www.apache.org/licenses/LICENSE-2.0>)\n  * MIT license ([LICENSE-MIT](https://github.com/pyfisch/cbor/blob/HEAD/LICENSE-MIT) or <http://opensource.org/licenses/MIT>)\n\n\nat your option.\n### Contribution\nUnless you explicitly state otherwise, any contribution intentionally submitted for inclusion in the work by you, as defined in the Apache-2.0 license, shall be dual licensed as above, without any additional terms or conditions.\n#### Dependencies\n~345\u2013580KB  ~13K SLoC\n  * [half](https://lib.rs/crates/half \"obsolete\") 1.2\n  * [serde](https://lib.rs/crates/serde \"1.0.14\")\n\n\n  * dev  [serde_derive](https://lib.rs/crates/serde_derive \"1.0.14\")\n\n\n#### [Other features](https://lib.rs/crates/serde_cbor/features)\n  * [alloc](https://lib.rs/crates/serde_cbor/features#feature-alloc)\n  * [std](https://lib.rs/crates/serde_cbor/features#feature-std)\n  * [tags](https://lib.rs/crates/serde_cbor/features#feature-tags)\n  * [unsealed_read_write](https://lib.rs/crates/serde_cbor/features#feature-unsealed_read_write)\n\n\n  *[SLoC]: approx. additional lines of code\n",
              "markdown_with_citations": "###  23 releases\u27e81\u27e9\n0.11.2 |  Aug 15, 2021   \n---|---  \n0.11.1 |  Jan 12, 2020   \n0.10.2 |  Oct 3, 2019   \n0.10.1 |  Jul 11, 2019   \n0.1.0 |  Sep 29, 2015   \n#**2029** in Encoding\u27e82\u27e9\nDownload history 224156/week @ 2024-12-16 66563/week @ 2024-12-23 101043/week @ 2024-12-30 241109/week @ 2025-01-06 284368/week @ 2025-01-13 272057/week @ 2025-01-20 331614/week @ 2025-01-27 369227/week @ 2025-02-03 373812/week @ 2025-02-10 254693/week @ 2025-02-17 257402/week @ 2025-02-24 586954/week @ 2025-03-03 573487/week @ 2025-03-10 838507/week @ 2025-03-17 944438/week @ 2025-03-24 465239/week @ 2025-03-31\n**2,840,393** downloads per month Used in **2,705** crates (400 directly)\u27e83\u27e9\n**MIT/Apache**\n140KB  3.5K  SLoC\n# Serde CBOR\n![Build Status\u27e84\u27e9](https://travis-ci.org/pyfisch/cbor) ![Crates.io\u27e85\u27e9](https://crates.io/crates/serde_cbor) ![Documentation\u27e86\u27e9](https://docs.rs/serde_cbor)\n## PROJECT IS ARCHIVED\nAfter almost 6 years it is time to retire this crate. This implementation of CBOR for serde is used in hundreds of projects with widely differing needs. Besides the standard features it contains code for no-std environments, a packed encoding and CBOR tags. However while these features are useful to many people they sometimes interact poorly with each others and with optional features of serde itself. Because I don't use the crate myself and because of the potential for new errors I have been reluctant to accept any changes or additional features for the crate. Since this situation is unlikely to change anytime soon and no one else stepped up to maintain this crate I am archiving the repository today. If the crate works for you there is no need to switch to another implementation. However if you encounter problems or for new projects I recommend you take a look at these crates:\n  * ciborium\u27e87\u27e9\n  * minicbor\u27e88\u27e9\n\n\n~~ Pyfisch, August 2021\nThis crate implements the Concise Binary Object Representation from RFC 7049\u27e89\u27e9. It builds on Serde\u27e810\u27e9, the generic serialization framework for Rust. CBOR provides a binary encoding for a superset of the JSON data model that is small and very fast to parse.\n## Usage\nSerde CBOR supports Rust 1.40 and up. Add this to your ``Cargo.toml``:\n```\n```[``dependencies``]`\n`serde_cbor ``=` ``\"`0.11.2`\"``\n``\n```\n\nStoring and loading Rust types is easy and requires only minimal modifications to the program code.\n```\n``use` `serde_derive`::````{`Deserialize`,` Serialize```}```;`\n`use` `std`::```error`::``Error`;`\n`use` `std`::```fs`::``File`;`\n``//` Types annotated with `Serialize` can be stored as CBOR.`\n``//` To be able to load them again add `Deserialize`.`\n``#``[``derive```(```Debug`,` Serialize`,` Deserialize```)```]``\n``struct` ```Mascot` ````{`\n  `name``:` String,\n  `species``:` String,\n  `year_of_birth``:` `u32`,\n```}```\n``fn` `main`````(````)```` ``->` ``Result``<``(``)`, `Box``<`dyn Error`>``>``` ````{`\n  `let` ferris `=` Mascot `{`\n    name`:` ``\"`Ferris`\"```.``to_owned``(``)``,`\n    species`:` ``\"`crab`\"```.``to_owned``(``)``,`\n    year_of_birth`:` `2015``,`\n  `}``;`\n  `let` ferris_file `=` `File`::``create`(```\"`examples/ferris.cbor`\"```)``?``;`\n  ``//` Write Ferris to the given file.`\n  ``//` Instead of a file you can use any type that implements `io::Write``\n  ``//` like a HTTP body, database connection etc.`\n  `serde_cbor`::``to_writer`(`ferris_file`,` `&`ferris`)``?``;`\n  `let` tux_file `=` `File`::``open`(```\"`examples/tux.cbor`\"```)``?``;`\n  ``//` Load Tux from a file.`\n  ``//` Serde CBOR performs roundtrip serialization meaning that`\n  ``//` the data will not change in any way.`\n  `let` tux`:` Mascot `=` `serde_cbor`::``from_reader`(`tux_file`)``?``;`\n  `println!``(```\"``{:?}``\"```,` tux`)``;`\n  ``//` prints: Mascot { name: \"Tux\", species: \"penguin\", year_of_birth: 1996 }`\n  `Ok``(``(``)``)`\n```}```\n`\n```\n\nThere are a lot of options available to customize the format. To operate on untyped CBOR values have a look at the ``Value`` type.\n## License\nLicensed under either of\n  * Apache License, Version 2.0 (LICENSE-APACHE\u27e811\u27e9 or <http://www.apache.org/licenses/LICENSE-2.0>)\n  * MIT license (LICENSE-MIT\u27e812\u27e9 or <http://opensource.org/licenses/MIT>)\n\n\nat your option.\n### Contribution\nUnless you explicitly state otherwise, any contribution intentionally submitted for inclusion in the work by you, as defined in the Apache-2.0 license, shall be dual licensed as above, without any additional terms or conditions.\n#### Dependencies\n~345\u2013580KB  ~13K SLoC\n  * half\u27e813\u27e9 1.2\n  * serde\u27e814\u27e9\n\n\n  * dev  serde_derive\u27e815\u27e9\n\n\n#### Other features\u27e816\u27e9\n  * alloc\u27e817\u27e9\n  * std\u27e818\u27e9\n  * tags\u27e819\u27e9\n  * unsealed_read_write\u27e820\u27e9\n\n\n  *[SLoC]: approx. additional lines of code\n",
              "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://lib.rs/crates/serde_cbor/versions: 23 releases\n\u27e82\u27e9 https://lib.rs/encoding: Encoding and/or decoding data from one data format to another. - Encoding\n\u27e83\u27e9 https://lib.rs/crates/serde_cbor/rev: **2,705** crates (400 directly)\n\u27e84\u27e9 https://img.gs/czjpqfbdkz/full/https://travis-ci.org/pyfisch/cbor.svg?branch=master: ![Build Status\n\u27e85\u27e9 https://img.shields.io/crates/v/serde_cbor.svg: ![Crates.io\n\u27e86\u27e9 https://img.gs/czjpqfbdkz/full/https://docs.rs/serde_cbor/badge.svg: ![Documentation\n\u27e87\u27e9 https://lib.rs/crates/ciborium: ciborium\n\u27e88\u27e9 https://lib.rs/crates/minicbor: minicbor\n\u27e89\u27e9 https://tools.ietf.org/html/rfc7049: RFC 7049\n\u27e810\u27e9 https://github.com/serde-rs/serde: Serde\n\u27e811\u27e9 https://github.com/pyfisch/cbor/blob/HEAD/LICENSE-APACHE: LICENSE-APACHE\n\u27e812\u27e9 https://github.com/pyfisch/cbor/blob/HEAD/LICENSE-MIT: LICENSE-MIT\n\u27e813\u27e9 https://lib.rs/crates/half: obsolete - half\n\u27e814\u27e9 https://lib.rs/crates/serde: 1.0.14 - serde\n\u27e815\u27e9 https://lib.rs/crates/serde_derive: 1.0.14 - serde_derive\n\u27e816\u27e9 https://lib.rs/crates/serde_cbor/features: Other features\n\u27e817\u27e9 https://lib.rs/crates/serde_cbor/features#feature-alloc: alloc\n\u27e818\u27e9 https://lib.rs/crates/serde_cbor/features#feature-std: std\n\u27e819\u27e9 https://lib.rs/crates/serde_cbor/features#feature-tags: tags\n\u27e820\u27e9 https://lib.rs/crates/serde_cbor/features#feature-unsealed_read_write: unsealed_read_write\n",
              "fit_markdown": "",
              "fit_html": ""
            },
            "structured_data": {},
            "quality_score": 3.0,
            "extraction_method": "crawl4ai",
            "error": null,
            "metadata": {
              "doc_type": "docs",
              "content_length": 5636,
              "has_structured_data": false,
              "crawl_success": true
            },
            "timestamp": "112980.6995743"
          }
        },
        "crate_analysis": {
          "status": "completed",
          "check": [
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#half@1.4.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\half-1.4.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "half",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\half-1.4.0\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpf3s3x02n\\serde_cbor-0.11.2\\target\\debug\\deps\\libhalf-73106fcc427ed830.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#serde@1.0.104",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde-1.0.104\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde-1.0.104\\build.rs",
                "edition": "2015",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpf3s3x02n\\serde_cbor-0.11.2\\target\\debug\\build\\serde-cead980be0de3804\\build-script-build.exe",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpf3s3x02n\\serde_cbor-0.11.2\\target\\debug\\build\\serde-cead980be0de3804\\build_script_build.pdb"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "build-script-executed",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#serde@1.0.104",
              "linked_libs": [],
              "linked_paths": [],
              "cfgs": [
                "ops_bound",
                "core_reverse",
                "de_boxed_c_str",
                "de_boxed_path",
                "de_rc_dst",
                "core_duration",
                "integer128",
                "range_inclusive",
                "num_nonzero",
                "core_try_from",
                "num_nonzero_signed",
                "std_atomic64",
                "std_atomic"
              ],
              "env": [],
              "out_dir": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpf3s3x02n\\serde_cbor-0.11.2\\target\\debug\\build\\serde-ea1b189fb60d256c\\out"
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#serde@1.0.104",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde-1.0.104\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "serde",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde-1.0.104\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpf3s3x02n\\serde_cbor-0.11.2\\target\\debug\\deps\\libserde-da6ffa4bb375f658.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpf3s3x02n/serde_cbor-0.11.2#serde_cbor@0.11.2",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpf3s3x02n\\serde_cbor-0.11.2\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "serde_cbor",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpf3s3x02n\\serde_cbor-0.11.2\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpf3s3x02n\\serde_cbor-0.11.2\\target\\debug\\deps\\libserde_cbor-ebdf809a90230ccc.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "build-finished",
              "success": true
            }
          ],
          "clippy": [
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#serde@1.0.104",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde-1.0.104\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde-1.0.104\\build.rs",
                "edition": "2015",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpf3s3x02n\\serde_cbor-0.11.2\\target\\debug\\build\\serde-cead980be0de3804\\build-script-build.exe",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpf3s3x02n\\serde_cbor-0.11.2\\target\\debug\\build\\serde-cead980be0de3804\\build_script_build.pdb"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "build-script-executed",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#serde@1.0.104",
              "linked_libs": [],
              "linked_paths": [],
              "cfgs": [
                "ops_bound",
                "core_reverse",
                "de_boxed_c_str",
                "de_boxed_path",
                "de_rc_dst",
                "core_duration",
                "integer128",
                "range_inclusive",
                "num_nonzero",
                "core_try_from",
                "num_nonzero_signed",
                "std_atomic64",
                "std_atomic"
              ],
              "env": [],
              "out_dir": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpf3s3x02n\\serde_cbor-0.11.2\\target\\debug\\build\\serde-ea1b189fb60d256c\\out"
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#half@1.4.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\half-1.4.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "half",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\half-1.4.0\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpf3s3x02n\\serde_cbor-0.11.2\\target\\debug\\deps\\libhalf-73106fcc427ed830.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#serde@1.0.104",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde-1.0.104\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "serde",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde-1.0.104\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpf3s3x02n\\serde_cbor-0.11.2\\target\\debug\\deps\\libserde-da6ffa4bb375f658.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpf3s3x02n/serde_cbor-0.11.2#serde_cbor@0.11.2",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpf3s3x02n\\serde_cbor-0.11.2\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "serde_cbor",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpf3s3x02n\\serde_cbor-0.11.2\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: empty line after doc comment\n  --> src\\read.rs:27:5\n   |\n27 | /     /// implementation does).\n28 | |\n   | |_^\n...\n34 |       fn read<'a>(&'a mut self, n: usize) -> Result<EitherLifetime<'a, 'de>> {\n   |       ------- the comment documents this function\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#empty_line_after_doc_comments\n   = note: `#[warn(clippy::empty_line_after_doc_comments)]` on by default\n   = help: if the empty line is unintentional, remove it\nhelp: if the doc comment should not document function `read` then comment it out\n   |\n18 ~     // #[doc(hidden)]\n19 ~     // /// Read n bytes from the input.\n20 ~     // ///\n21 ~     // /// Implementations that can are asked to return a slice with a Long lifetime that outlives the\n22 ~     // /// decoder, but others (eg. ones that need to allocate the data into a temporary buffer) can\n23 ~     // /// return it with a Short lifetime that just lives for the time of read's mutable borrow of\n24 ~     // /// the reader.\n25 ~     // ///\n26 ~     // /// This may, as a side effect, clear the reader's scratch buffer (as the provided\n27 ~     // /// implementation does).\n   |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#empty_line_after_doc_comments",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "`#[warn(clippy::empty_line_after_doc_comments)]` on by default",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "if the empty line is unintentional, remove it",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 1039,
                        "byte_start": 1038,
                        "column_end": 1,
                        "column_start": 30,
                        "expansion": null,
                        "file_name": "src\\read.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 28,
                        "line_start": 27,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 30,
                            "highlight_start": 30,
                            "text": "    /// implementation does)."
                          },
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": ""
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "if the doc comment should not document function `read` then comment it out",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 539,
                        "byte_start": 539,
                        "column_end": 5,
                        "column_start": 5,
                        "expansion": null,
                        "file_name": "src\\read.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 18,
                        "line_start": 18,
                        "suggested_replacement": "// ",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 5,
                            "highlight_start": 5,
                            "text": "    #[doc(hidden)]"
                          }
                        ]
                      },
                      {
                        "byte_end": 558,
                        "byte_start": 558,
                        "column_end": 5,
                        "column_start": 5,
                        "expansion": null,
                        "file_name": "src\\read.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 19,
                        "line_start": 19,
                        "suggested_replacement": "// ",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 5,
                            "highlight_start": 5,
                            "text": "    /// Read n bytes from the input."
                          }
                        ]
                      },
                      {
                        "byte_end": 595,
                        "byte_start": 595,
                        "column_end": 5,
                        "column_start": 5,
                        "expansion": null,
                        "file_name": "src\\read.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 20,
                        "line_start": 20,
                        "suggested_replacement": "// ",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 5,
                            "highlight_start": 5,
                            "text": "    ///"
                          }
                        ]
                      },
                      {
                        "byte_end": 603,
                        "byte_start": 603,
                        "column_end": 5,
                        "column_start": 5,
                        "expansion": null,
                        "file_name": "src\\read.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 21,
                        "line_start": 21,
                        "suggested_replacement": "// ",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 5,
                            "highlight_start": 5,
                            "text": "    /// Implementations that can are asked to return a slice with a Long lifetime that outlives the"
                          }
                        ]
                      },
                      {
                        "byte_end": 703,
                        "byte_start": 703,
                        "column_end": 5,
                        "column_start": 5,
                        "expansion": null,
                        "file_name": "src\\read.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 22,
                        "line_start": 22,
                        "suggested_replacement": "// ",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 5,
                            "highlight_start": 5,
                            "text": "    /// decoder, but others (eg. ones that need to allocate the data into a temporary buffer) can"
                          }
                        ]
                      },
                      {
                        "byte_end": 801,
                        "byte_start": 801,
                        "column_end": 5,
                        "column_start": 5,
                        "expansion": null,
                        "file_name": "src\\read.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 23,
                        "line_start": 23,
                        "suggested_replacement": "// ",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 5,
                            "highlight_start": 5,
                            "text": "    /// return it with a Short lifetime that just lives for the time of read's mutable borrow of"
                          }
                        ]
                      },
                      {
                        "byte_end": 898,
                        "byte_start": 898,
                        "column_end": 5,
                        "column_start": 5,
                        "expansion": null,
                        "file_name": "src\\read.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 24,
                        "line_start": 24,
                        "suggested_replacement": "// ",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 5,
                            "highlight_start": 5,
                            "text": "    /// the reader."
                          }
                        ]
                      },
                      {
                        "byte_end": 918,
                        "byte_start": 918,
                        "column_end": 5,
                        "column_start": 5,
                        "expansion": null,
                        "file_name": "src\\read.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 25,
                        "line_start": 25,
                        "suggested_replacement": "// ",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 5,
                            "highlight_start": 5,
                            "text": "    ///"
                          }
                        ]
                      },
                      {
                        "byte_end": 926,
                        "byte_start": 926,
                        "column_end": 5,
                        "column_start": 5,
                        "expansion": null,
                        "file_name": "src\\read.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 26,
                        "line_start": 26,
                        "suggested_replacement": "// ",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 5,
                            "highlight_start": 5,
                            "text": "    /// This may, as a side effect, clear the reader's scratch buffer (as the provided"
                          }
                        ]
                      },
                      {
                        "byte_end": 1013,
                        "byte_start": 1013,
                        "column_end": 5,
                        "column_start": 5,
                        "expansion": null,
                        "file_name": "src\\read.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 27,
                        "line_start": 27,
                        "suggested_replacement": "// ",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 5,
                            "highlight_start": 5,
                            "text": "    /// implementation does)."
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::empty_line_after_doc_comments",
                  "explanation": null
                },
                "level": "warning",
                "message": "empty line after doc comment",
                "spans": [
                  {
                    "byte_end": 1527,
                    "byte_start": 1520,
                    "column_end": 12,
                    "column_start": 5,
                    "expansion": null,
                    "file_name": "src\\read.rs",
                    "is_primary": false,
                    "label": "the comment documents this function",
                    "line_end": 34,
                    "line_start": 34,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 12,
                        "highlight_start": 5,
                        "text": "    fn read<'a>(&'a mut self, n: usize) -> Result<EitherLifetime<'a, 'de>> {"
                      }
                    ]
                  },
                  {
                    "byte_end": 1039,
                    "byte_start": 1013,
                    "column_end": 1,
                    "column_start": 5,
                    "expansion": null,
                    "file_name": "src\\read.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 28,
                    "line_start": 27,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 30,
                        "highlight_start": 5,
                        "text": "    /// implementation does)."
                      },
                      {
                        "highlight_end": 1,
                        "highlight_start": 1,
                        "text": ""
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpf3s3x02n/serde_cbor-0.11.2#serde_cbor@0.11.2",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpf3s3x02n\\serde_cbor-0.11.2\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "serde_cbor",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpf3s3x02n\\serde_cbor-0.11.2\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: bound is defined in more than one place\n   --> src\\value\\ser.rs:148:33\n    |\n148 |     fn serialize_newtype_struct<T: ?Sized>(\n    |                                 ^\n...\n154 |         T: Serialize,\n    |         ^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#multiple_bound_locations\n    = note: `#[warn(clippy::multiple_bound_locations)]` on by default\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#multiple_bound_locations",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "`#[warn(clippy::multiple_bound_locations)]` on by default",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "clippy::multiple_bound_locations",
                  "explanation": null
                },
                "level": "warning",
                "message": "bound is defined in more than one place",
                "spans": [
                  {
                    "byte_end": 4172,
                    "byte_start": 4171,
                    "column_end": 34,
                    "column_start": 33,
                    "expansion": null,
                    "file_name": "src\\value\\ser.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 148,
                    "line_start": 148,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 34,
                        "highlight_start": 33,
                        "text": "    fn serialize_newtype_struct<T: ?Sized>("
                      }
                    ]
                  },
                  {
                    "byte_end": 4294,
                    "byte_start": 4293,
                    "column_end": 10,
                    "column_start": 9,
                    "expansion": null,
                    "file_name": "src\\value\\ser.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 154,
                    "line_start": 154,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 10,
                        "highlight_start": 9,
                        "text": "        T: Serialize,"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpf3s3x02n/serde_cbor-0.11.2#serde_cbor@0.11.2",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpf3s3x02n\\serde_cbor-0.11.2\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "serde_cbor",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpf3s3x02n\\serde_cbor-0.11.2\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: bound is defined in more than one place\n   --> src\\value\\ser.rs:159:34\n    |\n159 |     fn serialize_newtype_variant<T: ?Sized>(\n    |                                  ^\n...\n167 |         T: Serialize,\n    |         ^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#multiple_bound_locations\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#multiple_bound_locations",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "clippy::multiple_bound_locations",
                  "explanation": null
                },
                "level": "warning",
                "message": "bound is defined in more than one place",
                "spans": [
                  {
                    "byte_end": 4384,
                    "byte_start": 4383,
                    "column_end": 35,
                    "column_start": 34,
                    "expansion": null,
                    "file_name": "src\\value\\ser.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 159,
                    "line_start": 159,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 35,
                        "highlight_start": 34,
                        "text": "    fn serialize_newtype_variant<T: ?Sized>("
                      }
                    ]
                  },
                  {
                    "byte_end": 4566,
                    "byte_start": 4565,
                    "column_end": 10,
                    "column_start": 9,
                    "expansion": null,
                    "file_name": "src\\value\\ser.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 167,
                    "line_start": 167,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 10,
                        "highlight_start": 9,
                        "text": "        T: Serialize,"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpf3s3x02n/serde_cbor-0.11.2#serde_cbor@0.11.2",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpf3s3x02n\\serde_cbor-0.11.2\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "serde_cbor",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpf3s3x02n\\serde_cbor-0.11.2\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: bound is defined in more than one place\n   --> src\\value\\ser.rs:180:23\n    |\n180 |     fn serialize_some<T: ?Sized>(self, value: &T) -> Result<Value, Error>\n    |                       ^\n181 |     where\n182 |         T: Serialize,\n    |         ^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#multiple_bound_locations\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#multiple_bound_locations",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "clippy::multiple_bound_locations",
                  "explanation": null
                },
                "level": "warning",
                "message": "bound is defined in more than one place",
                "spans": [
                  {
                    "byte_end": 4882,
                    "byte_start": 4881,
                    "column_end": 24,
                    "column_start": 23,
                    "expansion": null,
                    "file_name": "src\\value\\ser.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 180,
                    "line_start": 180,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 24,
                        "highlight_start": 23,
                        "text": "    fn serialize_some<T: ?Sized>(self, value: &T) -> Result<Value, Error>"
                      }
                    ]
                  },
                  {
                    "byte_end": 4952,
                    "byte_start": 4951,
                    "column_end": 10,
                    "column_start": 9,
                    "expansion": null,
                    "file_name": "src\\value\\ser.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 182,
                    "line_start": 182,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 10,
                        "highlight_start": 9,
                        "text": "        T: Serialize,"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpf3s3x02n/serde_cbor-0.11.2#serde_cbor@0.11.2",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpf3s3x02n\\serde_cbor-0.11.2\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "serde_cbor",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpf3s3x02n\\serde_cbor-0.11.2\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: bound is defined in more than one place\n   --> src\\value\\ser.rs:275:26\n    |\n275 |     fn serialize_element<T: ?Sized>(&mut self, value: &T) -> Result<(), Error>\n    |                          ^\n276 |     where\n277 |         T: Serialize,\n    |         ^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#multiple_bound_locations\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#multiple_bound_locations",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "clippy::multiple_bound_locations",
                  "explanation": null
                },
                "level": "warning",
                "message": "bound is defined in more than one place",
                "spans": [
                  {
                    "byte_end": 7076,
                    "byte_start": 7075,
                    "column_end": 27,
                    "column_start": 26,
                    "expansion": null,
                    "file_name": "src\\value\\ser.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 275,
                    "line_start": 275,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 27,
                        "highlight_start": 26,
                        "text": "    fn serialize_element<T: ?Sized>(&mut self, value: &T) -> Result<(), Error>"
                      }
                    ]
                  },
                  {
                    "byte_end": 7148,
                    "byte_start": 7147,
                    "column_end": 10,
                    "column_start": 9,
                    "expansion": null,
                    "file_name": "src\\value\\ser.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 277,
                    "line_start": 277,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 10,
                        "highlight_start": 9,
                        "text": "        T: Serialize,"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpf3s3x02n/serde_cbor-0.11.2#serde_cbor@0.11.2",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpf3s3x02n\\serde_cbor-0.11.2\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "serde_cbor",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpf3s3x02n\\serde_cbor-0.11.2\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: bound is defined in more than one place\n   --> src\\value\\ser.rs:292:26\n    |\n292 |     fn serialize_element<T: ?Sized>(&mut self, value: &T) -> Result<(), Error>\n    |                          ^\n293 |     where\n294 |         T: Serialize,\n    |         ^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#multiple_bound_locations\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#multiple_bound_locations",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "clippy::multiple_bound_locations",
                  "explanation": null
                },
                "level": "warning",
                "message": "bound is defined in more than one place",
                "spans": [
                  {
                    "byte_end": 7441,
                    "byte_start": 7440,
                    "column_end": 27,
                    "column_start": 26,
                    "expansion": null,
                    "file_name": "src\\value\\ser.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 292,
                    "line_start": 292,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 27,
                        "highlight_start": 26,
                        "text": "    fn serialize_element<T: ?Sized>(&mut self, value: &T) -> Result<(), Error>"
                      }
                    ]
                  },
                  {
                    "byte_end": 7513,
                    "byte_start": 7512,
                    "column_end": 10,
                    "column_start": 9,
                    "expansion": null,
                    "file_name": "src\\value\\ser.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 294,
                    "line_start": 294,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 10,
                        "highlight_start": 9,
                        "text": "        T: Serialize,"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpf3s3x02n/serde_cbor-0.11.2#serde_cbor@0.11.2",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpf3s3x02n\\serde_cbor-0.11.2\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "serde_cbor",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpf3s3x02n\\serde_cbor-0.11.2\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: bound is defined in more than one place\n   --> src\\value\\ser.rs:308:24\n    |\n308 |     fn serialize_field<T: ?Sized>(&mut self, value: &T) -> Result<(), Error>\n    |                        ^\n309 |     where\n310 |         T: Serialize,\n    |         ^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#multiple_bound_locations\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#multiple_bound_locations",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "clippy::multiple_bound_locations",
                  "explanation": null
                },
                "level": "warning",
                "message": "bound is defined in more than one place",
                "spans": [
                  {
                    "byte_end": 7827,
                    "byte_start": 7826,
                    "column_end": 25,
                    "column_start": 24,
                    "expansion": null,
                    "file_name": "src\\value\\ser.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 308,
                    "line_start": 308,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 25,
                        "highlight_start": 24,
                        "text": "    fn serialize_field<T: ?Sized>(&mut self, value: &T) -> Result<(), Error>"
                      }
                    ]
                  },
                  {
                    "byte_end": 7899,
                    "byte_start": 7898,
                    "column_end": 10,
                    "column_start": 9,
                    "expansion": null,
                    "file_name": "src\\value\\ser.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 310,
                    "line_start": 310,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 10,
                        "highlight_start": 9,
                        "text": "        T: Serialize,"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpf3s3x02n/serde_cbor-0.11.2#serde_cbor@0.11.2",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpf3s3x02n\\serde_cbor-0.11.2\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "serde_cbor",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpf3s3x02n\\serde_cbor-0.11.2\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: bound is defined in more than one place\n   --> src\\value\\ser.rs:324:24\n    |\n324 |     fn serialize_field<T: ?Sized>(&mut self, value: &T) -> Result<(), Error>\n    |                        ^\n325 |     where\n326 |         T: Serialize,\n    |         ^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#multiple_bound_locations\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#multiple_bound_locations",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "clippy::multiple_bound_locations",
                  "explanation": null
                },
                "level": "warning",
                "message": "bound is defined in more than one place",
                "spans": [
                  {
                    "byte_end": 8223,
                    "byte_start": 8222,
                    "column_end": 25,
                    "column_start": 24,
                    "expansion": null,
                    "file_name": "src\\value\\ser.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 324,
                    "line_start": 324,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 25,
                        "highlight_start": 24,
                        "text": "    fn serialize_field<T: ?Sized>(&mut self, value: &T) -> Result<(), Error>"
                      }
                    ]
                  },
                  {
                    "byte_end": 8295,
                    "byte_start": 8294,
                    "column_end": 10,
                    "column_start": 9,
                    "expansion": null,
                    "file_name": "src\\value\\ser.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 326,
                    "line_start": 326,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 10,
                        "highlight_start": 9,
                        "text": "        T: Serialize,"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpf3s3x02n/serde_cbor-0.11.2#serde_cbor@0.11.2",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpf3s3x02n\\serde_cbor-0.11.2\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "serde_cbor",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpf3s3x02n\\serde_cbor-0.11.2\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: bound is defined in more than one place\n   --> src\\value\\ser.rs:345:22\n    |\n345 |     fn serialize_key<T: ?Sized>(&mut self, key: &T) -> Result<(), Error>\n    |                      ^\n346 |     where\n347 |         T: Serialize,\n    |         ^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#multiple_bound_locations\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#multiple_bound_locations",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "clippy::multiple_bound_locations",
                  "explanation": null
                },
                "level": "warning",
                "message": "bound is defined in more than one place",
                "spans": [
                  {
                    "byte_end": 8693,
                    "byte_start": 8692,
                    "column_end": 23,
                    "column_start": 22,
                    "expansion": null,
                    "file_name": "src\\value\\ser.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 345,
                    "line_start": 345,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 23,
                        "highlight_start": 22,
                        "text": "    fn serialize_key<T: ?Sized>(&mut self, key: &T) -> Result<(), Error>"
                      }
                    ]
                  },
                  {
                    "byte_end": 8763,
                    "byte_start": 8762,
                    "column_end": 10,
                    "column_start": 9,
                    "expansion": null,
                    "file_name": "src\\value\\ser.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 347,
                    "line_start": 347,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 10,
                        "highlight_start": 9,
                        "text": "        T: Serialize,"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpf3s3x02n/serde_cbor-0.11.2#serde_cbor@0.11.2",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpf3s3x02n\\serde_cbor-0.11.2\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "serde_cbor",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpf3s3x02n\\serde_cbor-0.11.2\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: bound is defined in more than one place\n   --> src\\value\\ser.rs:353:24\n    |\n353 |     fn serialize_value<T: ?Sized>(&mut self, value: &T) -> Result<(), Error>\n    |                        ^\n354 |     where\n355 |         T: Serialize,\n    |         ^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#multiple_bound_locations\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#multiple_bound_locations",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "clippy::multiple_bound_locations",
                  "explanation": null
                },
                "level": "warning",
                "message": "bound is defined in more than one place",
                "spans": [
                  {
                    "byte_end": 8875,
                    "byte_start": 8874,
                    "column_end": 25,
                    "column_start": 24,
                    "expansion": null,
                    "file_name": "src\\value\\ser.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 353,
                    "line_start": 353,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 25,
                        "highlight_start": 24,
                        "text": "    fn serialize_value<T: ?Sized>(&mut self, value: &T) -> Result<(), Error>"
                      }
                    ]
                  },
                  {
                    "byte_end": 8947,
                    "byte_start": 8946,
                    "column_end": 10,
                    "column_start": 9,
                    "expansion": null,
                    "file_name": "src\\value\\ser.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 355,
                    "line_start": 355,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 10,
                        "highlight_start": 9,
                        "text": "        T: Serialize,"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpf3s3x02n/serde_cbor-0.11.2#serde_cbor@0.11.2",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpf3s3x02n\\serde_cbor-0.11.2\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "serde_cbor",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpf3s3x02n\\serde_cbor-0.11.2\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: bound is defined in more than one place\n   --> src\\value\\ser.rs:374:24\n    |\n374 |     fn serialize_field<T: ?Sized>(&mut self, key: &'static str, value: &T) -> Result<(), Error>\n    |                        ^\n375 |     where\n376 |         T: Serialize,\n    |         ^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#multiple_bound_locations\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#multiple_bound_locations",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "clippy::multiple_bound_locations",
                  "explanation": null
                },
                "level": "warning",
                "message": "bound is defined in more than one place",
                "spans": [
                  {
                    "byte_end": 9466,
                    "byte_start": 9465,
                    "column_end": 25,
                    "column_start": 24,
                    "expansion": null,
                    "file_name": "src\\value\\ser.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 374,
                    "line_start": 374,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 25,
                        "highlight_start": 24,
                        "text": "    fn serialize_field<T: ?Sized>(&mut self, key: &'static str, value: &T) -> Result<(), Error>"
                      }
                    ]
                  },
                  {
                    "byte_end": 9557,
                    "byte_start": 9556,
                    "column_end": 10,
                    "column_start": 9,
                    "expansion": null,
                    "file_name": "src\\value\\ser.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 376,
                    "line_start": 376,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 10,
                        "highlight_start": 9,
                        "text": "        T: Serialize,"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpf3s3x02n/serde_cbor-0.11.2#serde_cbor@0.11.2",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpf3s3x02n\\serde_cbor-0.11.2\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "serde_cbor",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpf3s3x02n\\serde_cbor-0.11.2\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: bound is defined in more than one place\n   --> src\\value\\ser.rs:391:24\n    |\n391 |     fn serialize_field<T: ?Sized>(&mut self, key: &'static str, value: &T) -> Result<(), Error>\n    |                        ^\n392 |     where\n393 |         T: Serialize,\n    |         ^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#multiple_bound_locations\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#multiple_bound_locations",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "clippy::multiple_bound_locations",
                  "explanation": null
                },
                "level": "warning",
                "message": "bound is defined in more than one place",
                "spans": [
                  {
                    "byte_end": 9942,
                    "byte_start": 9941,
                    "column_end": 25,
                    "column_start": 24,
                    "expansion": null,
                    "file_name": "src\\value\\ser.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 391,
                    "line_start": 391,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 25,
                        "highlight_start": 24,
                        "text": "    fn serialize_field<T: ?Sized>(&mut self, key: &'static str, value: &T) -> Result<(), Error>"
                      }
                    ]
                  },
                  {
                    "byte_end": 10033,
                    "byte_start": 10032,
                    "column_end": 10,
                    "column_start": 9,
                    "expansion": null,
                    "file_name": "src\\value\\ser.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 393,
                    "line_start": 393,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 10,
                        "highlight_start": 9,
                        "text": "        T: Serialize,"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpf3s3x02n/serde_cbor-0.11.2#serde_cbor@0.11.2",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpf3s3x02n\\serde_cbor-0.11.2\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "serde_cbor",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpf3s3x02n\\serde_cbor-0.11.2\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: doc list item overindented\n   --> src\\lib.rs:301:5\n    |\n301 | //!     serialization. This is because Serde has no concept of tagged\n    |     ^^^^ help: try using `  ` (2 spaces)\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#doc_overindented_list_items\n    = note: `#[warn(clippy::doc_overindented_list_items)]` on by default\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#doc_overindented_list_items",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "`#[warn(clippy::doc_overindented_list_items)]` on by default",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "try using `  ` (2 spaces)",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 10610,
                        "byte_start": 10606,
                        "column_end": 9,
                        "column_start": 5,
                        "expansion": null,
                        "file_name": "src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 301,
                        "line_start": 301,
                        "suggested_replacement": "  ",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 9,
                            "highlight_start": 5,
                            "text": "//!     serialization. This is because Serde has no concept of tagged"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::doc_overindented_list_items",
                  "explanation": null
                },
                "level": "warning",
                "message": "doc list item overindented",
                "spans": [
                  {
                    "byte_end": 10610,
                    "byte_start": 10606,
                    "column_end": 9,
                    "column_start": 5,
                    "expansion": null,
                    "file_name": "src\\lib.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 301,
                    "line_start": 301,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 9,
                        "highlight_start": 5,
                        "text": "//!     serialization. This is because Serde has no concept of tagged"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpf3s3x02n/serde_cbor-0.11.2#serde_cbor@0.11.2",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpf3s3x02n\\serde_cbor-0.11.2\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "serde_cbor",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpf3s3x02n\\serde_cbor-0.11.2\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: doc list item overindented\n   --> src\\lib.rs:302:5\n    |\n302 | //!     values. See:&nbsp;[#3]\n    |     ^^^^ help: try using `  ` (2 spaces)\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#doc_overindented_list_items\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#doc_overindented_list_items",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "try using `  ` (2 spaces)",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 10680,
                        "byte_start": 10676,
                        "column_end": 9,
                        "column_start": 5,
                        "expansion": null,
                        "file_name": "src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 302,
                        "line_start": 302,
                        "suggested_replacement": "  ",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 9,
                            "highlight_start": 5,
                            "text": "//!     values. See:&nbsp;[#3]"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::doc_overindented_list_items",
                  "explanation": null
                },
                "level": "warning",
                "message": "doc list item overindented",
                "spans": [
                  {
                    "byte_end": 10680,
                    "byte_start": 10676,
                    "column_end": 9,
                    "column_start": 5,
                    "expansion": null,
                    "file_name": "src\\lib.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 302,
                    "line_start": 302,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 9,
                        "highlight_start": 5,
                        "text": "//!     values. See:&nbsp;[#3]"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpf3s3x02n/serde_cbor-0.11.2#serde_cbor@0.11.2",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpf3s3x02n\\serde_cbor-0.11.2\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "serde_cbor",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpf3s3x02n\\serde_cbor-0.11.2\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: doc list item overindented\n   --> src\\lib.rs:304:5\n    |\n304 | //!     The simple values *False* and *True* are recognized and parsed as bool.\n    |     ^^^^ help: try using `  ` (2 spaces)\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#doc_overindented_list_items\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#doc_overindented_list_items",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "try using `  ` (2 spaces)",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 10774,
                        "byte_start": 10770,
                        "column_end": 9,
                        "column_start": 5,
                        "expansion": null,
                        "file_name": "src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 304,
                        "line_start": 304,
                        "suggested_replacement": "  ",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 9,
                            "highlight_start": 5,
                            "text": "//!     The simple values *False* and *True* are recognized and parsed as bool."
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::doc_overindented_list_items",
                  "explanation": null
                },
                "level": "warning",
                "message": "doc list item overindented",
                "spans": [
                  {
                    "byte_end": 10774,
                    "byte_start": 10770,
                    "column_end": 9,
                    "column_start": 5,
                    "expansion": null,
                    "file_name": "src\\lib.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 304,
                    "line_start": 304,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 9,
                        "highlight_start": 5,
                        "text": "//!     The simple values *False* and *True* are recognized and parsed as bool."
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpf3s3x02n/serde_cbor-0.11.2#serde_cbor@0.11.2",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpf3s3x02n\\serde_cbor-0.11.2\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "serde_cbor",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpf3s3x02n\\serde_cbor-0.11.2\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: doc list item overindented\n   --> src\\lib.rs:305:5\n    |\n305 | //!     *Null* and *Undefined* are both deserialized as *unit*.\n    |     ^^^^ help: try using `  ` (2 spaces)\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#doc_overindented_list_items\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#doc_overindented_list_items",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "try using `  ` (2 spaces)",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 10854,
                        "byte_start": 10850,
                        "column_end": 9,
                        "column_start": 5,
                        "expansion": null,
                        "file_name": "src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 305,
                        "line_start": 305,
                        "suggested_replacement": "  ",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 9,
                            "highlight_start": 5,
                            "text": "//!     *Null* and *Undefined* are both deserialized as *unit*."
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::doc_overindented_list_items",
                  "explanation": null
                },
                "level": "warning",
                "message": "doc list item overindented",
                "spans": [
                  {
                    "byte_end": 10854,
                    "byte_start": 10850,
                    "column_end": 9,
                    "column_start": 5,
                    "expansion": null,
                    "file_name": "src\\lib.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 305,
                    "line_start": 305,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 9,
                        "highlight_start": 5,
                        "text": "//!     *Null* and *Undefined* are both deserialized as *unit*."
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpf3s3x02n/serde_cbor-0.11.2#serde_cbor@0.11.2",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpf3s3x02n\\serde_cbor-0.11.2\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "serde_cbor",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpf3s3x02n\\serde_cbor-0.11.2\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: doc list item overindented\n   --> src\\lib.rs:306:5\n    |\n306 | //!     The *unit* type is serialized as *Null*. See:&nbsp;[#86]\n    |     ^^^^ help: try using `  ` (2 spaces)\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#doc_overindented_list_items\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#doc_overindented_list_items",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "try using `  ` (2 spaces)",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 10918,
                        "byte_start": 10914,
                        "column_end": 9,
                        "column_start": 5,
                        "expansion": null,
                        "file_name": "src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 306,
                        "line_start": 306,
                        "suggested_replacement": "  ",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 9,
                            "highlight_start": 5,
                            "text": "//!     The *unit* type is serialized as *Null*. See:&nbsp;[#86]"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::doc_overindented_list_items",
                  "explanation": null
                },
                "level": "warning",
                "message": "doc list item overindented",
                "spans": [
                  {
                    "byte_end": 10918,
                    "byte_start": 10914,
                    "column_end": 9,
                    "column_start": 5,
                    "expansion": null,
                    "file_name": "src\\lib.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 306,
                    "line_start": 306,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 9,
                        "highlight_start": 5,
                        "text": "//!     The *unit* type is serialized as *Null*. See:&nbsp;[#86]"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpf3s3x02n/serde_cbor-0.11.2#serde_cbor@0.11.2",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpf3s3x02n\\serde_cbor-0.11.2\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "serde_cbor",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpf3s3x02n\\serde_cbor-0.11.2\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: doc list item overindented\n   --> src\\lib.rs:308:5\n    |\n308 | //!     store them as a byte string. See:&nbsp;[#77]\n    |     ^^^^ help: try using `  ` (2 spaces)\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#doc_overindented_list_items\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#doc_overindented_list_items",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "try using `  ` (2 spaces)",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 11060,
                        "byte_start": 11056,
                        "column_end": 9,
                        "column_start": 5,
                        "expansion": null,
                        "file_name": "src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 308,
                        "line_start": 308,
                        "suggested_replacement": "  ",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 9,
                            "highlight_start": 5,
                            "text": "//!     store them as a byte string. See:&nbsp;[#77]"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::doc_overindented_list_items",
                  "explanation": null
                },
                "level": "warning",
                "message": "doc list item overindented",
                "spans": [
                  {
                    "byte_end": 11060,
                    "byte_start": 11056,
                    "column_end": 9,
                    "column_start": 5,
                    "expansion": null,
                    "file_name": "src\\lib.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 308,
                    "line_start": 308,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 9,
                        "highlight_start": 5,
                        "text": "//!     store them as a byte string. See:&nbsp;[#77]"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpf3s3x02n/serde_cbor-0.11.2#serde_cbor@0.11.2",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpf3s3x02n\\serde_cbor-0.11.2\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "serde_cbor",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpf3s3x02n\\serde_cbor-0.11.2\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: usage of a legacy numeric method\n   --> src\\de.rs:312:37\n    |\n312 |                     if len > usize::max_value() as u64 {\n    |                                     ^^^^^^^^^^^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#legacy_numeric_constants\n    = note: `#[warn(clippy::legacy_numeric_constants)]` on by default\nhelp: use the associated constant instead\n    |\n312 -                     if len > usize::max_value() as u64 {\n312 +                     if len > usize::MAX as u64 {\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#legacy_numeric_constants",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "`#[warn(clippy::legacy_numeric_constants)]` on by default",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "use the associated constant instead",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 9492,
                        "byte_start": 9481,
                        "column_end": 48,
                        "column_start": 37,
                        "expansion": null,
                        "file_name": "src\\de.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 312,
                        "line_start": 312,
                        "suggested_replacement": "MAX",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 48,
                            "highlight_start": 37,
                            "text": "                    if len > usize::max_value() as u64 {"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::legacy_numeric_constants",
                  "explanation": null
                },
                "level": "warning",
                "message": "usage of a legacy numeric method",
                "spans": [
                  {
                    "byte_end": 9492,
                    "byte_start": 9481,
                    "column_end": 48,
                    "column_start": 37,
                    "expansion": null,
                    "file_name": "src\\de.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 312,
                    "line_start": 312,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 48,
                        "highlight_start": 37,
                        "text": "                    if len > usize::max_value() as u64 {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpf3s3x02n/serde_cbor-0.11.2#serde_cbor@0.11.2",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpf3s3x02n\\serde_cbor-0.11.2\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "serde_cbor",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpf3s3x02n\\serde_cbor-0.11.2\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: the following explicit lifetimes could be elided: 'a\n   --> src\\de.rs:330:20\n    |\n330 |     fn convert_str<'a>(buf: &'a [u8], buf_end_offset: u64) -> Result<&'a str> {\n    |                    ^^        ^^                                       ^^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_lifetimes\n    = note: `#[warn(clippy::needless_lifetimes)]` on by default\nhelp: elide the lifetimes\n    |\n330 -     fn convert_str<'a>(buf: &'a [u8], buf_end_offset: u64) -> Result<&'a str> {\n330 +     fn convert_str(buf: &[u8], buf_end_offset: u64) -> Result<&str> {\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_lifetimes",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "`#[warn(clippy::needless_lifetimes)]` on by default",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "elide the lifetimes",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 10049,
                        "byte_start": 10045,
                        "column_end": 23,
                        "column_start": 19,
                        "expansion": null,
                        "file_name": "src\\de.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 330,
                        "line_start": 330,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 23,
                            "highlight_start": 19,
                            "text": "    fn convert_str<'a>(buf: &'a [u8], buf_end_offset: u64) -> Result<&'a str> {"
                          }
                        ]
                      },
                      {
                        "byte_end": 10059,
                        "byte_start": 10056,
                        "column_end": 33,
                        "column_start": 30,
                        "expansion": null,
                        "file_name": "src\\de.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 330,
                        "line_start": 330,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 33,
                            "highlight_start": 30,
                            "text": "    fn convert_str<'a>(buf: &'a [u8], buf_end_offset: u64) -> Result<&'a str> {"
                          }
                        ]
                      },
                      {
                        "byte_end": 10100,
                        "byte_start": 10097,
                        "column_end": 74,
                        "column_start": 71,
                        "expansion": null,
                        "file_name": "src\\de.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 330,
                        "line_start": 330,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 74,
                            "highlight_start": 71,
                            "text": "    fn convert_str<'a>(buf: &'a [u8], buf_end_offset: u64) -> Result<&'a str> {"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::needless_lifetimes",
                  "explanation": null
                },
                "level": "warning",
                "message": "the following explicit lifetimes could be elided: 'a",
                "spans": [
                  {
                    "byte_end": 10048,
                    "byte_start": 10046,
                    "column_end": 22,
                    "column_start": 20,
                    "expansion": null,
                    "file_name": "src\\de.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 330,
                    "line_start": 330,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 22,
                        "highlight_start": 20,
                        "text": "    fn convert_str<'a>(buf: &'a [u8], buf_end_offset: u64) -> Result<&'a str> {"
                      }
                    ]
                  },
                  {
                    "byte_end": 10058,
                    "byte_start": 10056,
                    "column_end": 32,
                    "column_start": 30,
                    "expansion": null,
                    "file_name": "src\\de.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 330,
                    "line_start": 330,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 32,
                        "highlight_start": 30,
                        "text": "    fn convert_str<'a>(buf: &'a [u8], buf_end_offset: u64) -> Result<&'a str> {"
                      }
                    ]
                  },
                  {
                    "byte_end": 10099,
                    "byte_start": 10097,
                    "column_end": 73,
                    "column_start": 71,
                    "expansion": null,
                    "file_name": "src\\de.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 330,
                    "line_start": 330,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 73,
                        "highlight_start": 71,
                        "text": "    fn convert_str<'a>(buf: &'a [u8], buf_end_offset: u64) -> Result<&'a str> {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpf3s3x02n/serde_cbor-0.11.2#serde_cbor@0.11.2",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpf3s3x02n\\serde_cbor-0.11.2\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "serde_cbor",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpf3s3x02n\\serde_cbor-0.11.2\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: usage of a legacy numeric method\n   --> src\\de.rs:379:37\n    |\n379 |                     if len > usize::max_value() as u64 {\n    |                                     ^^^^^^^^^^^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#legacy_numeric_constants\nhelp: use the associated constant instead\n    |\n379 -                     if len > usize::max_value() as u64 {\n379 +                     if len > usize::MAX as u64 {\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#legacy_numeric_constants",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "use the associated constant instead",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 11786,
                        "byte_start": 11775,
                        "column_end": 48,
                        "column_start": 37,
                        "expansion": null,
                        "file_name": "src\\de.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 379,
                        "line_start": 379,
                        "suggested_replacement": "MAX",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 48,
                            "highlight_start": 37,
                            "text": "                    if len > usize::max_value() as u64 {"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::legacy_numeric_constants",
                  "explanation": null
                },
                "level": "warning",
                "message": "usage of a legacy numeric method",
                "spans": [
                  {
                    "byte_end": 11786,
                    "byte_start": 11775,
                    "column_end": 48,
                    "column_start": 37,
                    "expansion": null,
                    "file_name": "src\\de.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 379,
                    "line_start": 379,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 48,
                        "highlight_start": 37,
                        "text": "                    if len > usize::max_value() as u64 {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpf3s3x02n/serde_cbor-0.11.2#serde_cbor@0.11.2",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpf3s3x02n\\serde_cbor-0.11.2\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "serde_cbor",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpf3s3x02n\\serde_cbor-0.11.2\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: redundant closure\n   --> src\\de.rs:572:30\n    |\n572 |         self.parse_u32().map(|i| f32::from_bits(i))\n    |                              ^^^^^^^^^^^^^^^^^^^^^ help: replace the closure with the function itself: `f32::from_bits`\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#redundant_closure\n    = note: `#[warn(clippy::redundant_closure)]` on by default\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#redundant_closure",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "`#[warn(clippy::redundant_closure)]` on by default",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "replace the closure with the function itself",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 17470,
                        "byte_start": 17449,
                        "column_end": 51,
                        "column_start": 30,
                        "expansion": null,
                        "file_name": "src\\de.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 572,
                        "line_start": 572,
                        "suggested_replacement": "f32::from_bits",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 51,
                            "highlight_start": 30,
                            "text": "        self.parse_u32().map(|i| f32::from_bits(i))"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::redundant_closure",
                  "explanation": null
                },
                "level": "warning",
                "message": "redundant closure",
                "spans": [
                  {
                    "byte_end": 17470,
                    "byte_start": 17449,
                    "column_end": 51,
                    "column_start": 30,
                    "expansion": null,
                    "file_name": "src\\de.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 572,
                    "line_start": 572,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 51,
                        "highlight_start": 30,
                        "text": "        self.parse_u32().map(|i| f32::from_bits(i))"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpf3s3x02n/serde_cbor-0.11.2#serde_cbor@0.11.2",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpf3s3x02n\\serde_cbor-0.11.2\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "serde_cbor",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpf3s3x02n\\serde_cbor-0.11.2\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: redundant closure\n   --> src\\de.rs:576:30\n    |\n576 |         self.parse_u64().map(|i| f64::from_bits(i))\n    |                              ^^^^^^^^^^^^^^^^^^^^^ help: replace the closure with the function itself: `f64::from_bits`\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#redundant_closure\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#redundant_closure",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "replace the closure with the function itself",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 17574,
                        "byte_start": 17553,
                        "column_end": 51,
                        "column_start": 30,
                        "expansion": null,
                        "file_name": "src\\de.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 576,
                        "line_start": 576,
                        "suggested_replacement": "f64::from_bits",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 51,
                            "highlight_start": 30,
                            "text": "        self.parse_u64().map(|i| f64::from_bits(i))"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::redundant_closure",
                  "explanation": null
                },
                "level": "warning",
                "message": "redundant closure",
                "spans": [
                  {
                    "byte_end": 17574,
                    "byte_start": 17553,
                    "column_end": 51,
                    "column_start": 30,
                    "expansion": null,
                    "file_name": "src\\de.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 576,
                    "line_start": 576,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 51,
                        "highlight_start": 30,
                        "text": "        self.parse_u64().map(|i| f64::from_bits(i))"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpf3s3x02n/serde_cbor-0.11.2#serde_cbor@0.11.2",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpf3s3x02n\\serde_cbor-0.11.2\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "serde_cbor",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpf3s3x02n\\serde_cbor-0.11.2\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: usage of a legacy numeric method\n   --> src\\de.rs:624:33\n    |\n624 |                 if value > i64::max_value() as u64 {\n    |                                 ^^^^^^^^^^^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#legacy_numeric_constants\nhelp: use the associated constant instead\n    |\n624 -                 if value > i64::max_value() as u64 {\n624 +                 if value > i64::MAX as u64 {\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#legacy_numeric_constants",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "use the associated constant instead",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 19208,
                        "byte_start": 19197,
                        "column_end": 44,
                        "column_start": 33,
                        "expansion": null,
                        "file_name": "src\\de.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 624,
                        "line_start": 624,
                        "suggested_replacement": "MAX",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 44,
                            "highlight_start": 33,
                            "text": "                if value > i64::max_value() as u64 {"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::legacy_numeric_constants",
                  "explanation": null
                },
                "level": "warning",
                "message": "usage of a legacy numeric method",
                "spans": [
                  {
                    "byte_end": 19208,
                    "byte_start": 19197,
                    "column_end": 44,
                    "column_start": 33,
                    "expansion": null,
                    "file_name": "src\\de.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 624,
                    "line_start": 624,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 44,
                        "highlight_start": 33,
                        "text": "                if value > i64::max_value() as u64 {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpf3s3x02n/serde_cbor-0.11.2#serde_cbor@0.11.2",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpf3s3x02n\\serde_cbor-0.11.2\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "serde_cbor",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpf3s3x02n\\serde_cbor-0.11.2\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: usage of a legacy numeric method\n   --> src\\de.rs:647:33\n    |\n647 |                 if len > usize::max_value() as u64 {\n    |                                 ^^^^^^^^^^^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#legacy_numeric_constants\nhelp: use the associated constant instead\n    |\n647 -                 if len > usize::max_value() as u64 {\n647 +                 if len > usize::MAX as u64 {\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#legacy_numeric_constants",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "use the associated constant instead",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 20085,
                        "byte_start": 20074,
                        "column_end": 44,
                        "column_start": 33,
                        "expansion": null,
                        "file_name": "src\\de.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 647,
                        "line_start": 647,
                        "suggested_replacement": "MAX",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 44,
                            "highlight_start": 33,
                            "text": "                if len > usize::max_value() as u64 {"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::legacy_numeric_constants",
                  "explanation": null
                },
                "level": "warning",
                "message": "usage of a legacy numeric method",
                "spans": [
                  {
                    "byte_end": 20085,
                    "byte_start": 20074,
                    "column_end": 44,
                    "column_start": 33,
                    "expansion": null,
                    "file_name": "src\\de.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 647,
                    "line_start": 647,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 44,
                        "highlight_start": 33,
                        "text": "                if len > usize::max_value() as u64 {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpf3s3x02n/serde_cbor-0.11.2#serde_cbor@0.11.2",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpf3s3x02n\\serde_cbor-0.11.2\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "serde_cbor",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpf3s3x02n\\serde_cbor-0.11.2\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: usage of a legacy numeric method\n   --> src\\de.rs:671:33\n    |\n671 |                 if len > usize::max_value() as u64 {\n    |                                 ^^^^^^^^^^^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#legacy_numeric_constants\nhelp: use the associated constant instead\n    |\n671 -                 if len > usize::max_value() as u64 {\n671 +                 if len > usize::MAX as u64 {\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#legacy_numeric_constants",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "use the associated constant instead",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 21017,
                        "byte_start": 21006,
                        "column_end": 44,
                        "column_start": 33,
                        "expansion": null,
                        "file_name": "src\\de.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 671,
                        "line_start": 671,
                        "suggested_replacement": "MAX",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 44,
                            "highlight_start": 33,
                            "text": "                if len > usize::max_value() as u64 {"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::legacy_numeric_constants",
                  "explanation": null
                },
                "level": "warning",
                "message": "usage of a legacy numeric method",
                "spans": [
                  {
                    "byte_end": 21017,
                    "byte_start": 21006,
                    "column_end": 44,
                    "column_start": 33,
                    "expansion": null,
                    "file_name": "src\\de.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 671,
                    "line_start": 671,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 44,
                        "highlight_start": 33,
                        "text": "                if len > usize::max_value() as u64 {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpf3s3x02n/serde_cbor-0.11.2#serde_cbor@0.11.2",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpf3s3x02n\\serde_cbor-0.11.2\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "serde_cbor",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpf3s3x02n\\serde_cbor-0.11.2\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: usage of a legacy numeric method\n   --> src\\de.rs:695:33\n    |\n695 |                 if len > usize::max_value() as u64 {\n    |                                 ^^^^^^^^^^^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#legacy_numeric_constants\nhelp: use the associated constant instead\n    |\n695 -                 if len > usize::max_value() as u64 {\n695 +                 if len > usize::MAX as u64 {\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#legacy_numeric_constants",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "use the associated constant instead",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 21962,
                        "byte_start": 21951,
                        "column_end": 44,
                        "column_start": 33,
                        "expansion": null,
                        "file_name": "src\\de.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 695,
                        "line_start": 695,
                        "suggested_replacement": "MAX",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 44,
                            "highlight_start": 33,
                            "text": "                if len > usize::max_value() as u64 {"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::legacy_numeric_constants",
                  "explanation": null
                },
                "level": "warning",
                "message": "usage of a legacy numeric method",
                "spans": [
                  {
                    "byte_end": 21962,
                    "byte_start": 21951,
                    "column_end": 44,
                    "column_start": 33,
                    "expansion": null,
                    "file_name": "src\\de.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 695,
                    "line_start": 695,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 44,
                        "highlight_start": 33,
                        "text": "                if len > usize::max_value() as u64 {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpf3s3x02n/serde_cbor-0.11.2#serde_cbor@0.11.2",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpf3s3x02n\\serde_cbor-0.11.2\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "serde_cbor",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpf3s3x02n\\serde_cbor-0.11.2\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: usage of a legacy numeric method\n   --> src\\de.rs:719:33\n    |\n719 |                 if len > usize::max_value() as u64 {\n    |                                 ^^^^^^^^^^^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#legacy_numeric_constants\nhelp: use the associated constant instead\n    |\n719 -                 if len > usize::max_value() as u64 {\n719 +                 if len > usize::MAX as u64 {\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#legacy_numeric_constants",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "use the associated constant instead",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 22909,
                        "byte_start": 22898,
                        "column_end": 44,
                        "column_start": 33,
                        "expansion": null,
                        "file_name": "src\\de.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 719,
                        "line_start": 719,
                        "suggested_replacement": "MAX",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 44,
                            "highlight_start": 33,
                            "text": "                if len > usize::max_value() as u64 {"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::legacy_numeric_constants",
                  "explanation": null
                },
                "level": "warning",
                "message": "usage of a legacy numeric method",
                "spans": [
                  {
                    "byte_end": 22909,
                    "byte_start": 22898,
                    "column_end": 44,
                    "column_start": 33,
                    "expansion": null,
                    "file_name": "src\\de.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 719,
                    "line_start": 719,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 44,
                        "highlight_start": 33,
                        "text": "                if len > usize::max_value() as u64 {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpf3s3x02n/serde_cbor-0.11.2#serde_cbor@0.11.2",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpf3s3x02n\\serde_cbor-0.11.2\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "serde_cbor",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpf3s3x02n\\serde_cbor-0.11.2\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: the following explicit lifetimes could be elided: 'a\n   --> src\\de.rs:777:11\n    |\n777 | impl<'de, 'a, R> de::Deserializer<'de> for &'a mut Deserializer<R>\n    |           ^^                                ^^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_lifetimes\nhelp: elide the lifetimes\n    |\n777 - impl<'de, 'a, R> de::Deserializer<'de> for &'a mut Deserializer<R>\n777 + impl<'de, R> de::Deserializer<'de> for &mut Deserializer<R>\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_lifetimes",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "elide the lifetimes",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 25053,
                        "byte_start": 25049,
                        "column_end": 15,
                        "column_start": 11,
                        "expansion": null,
                        "file_name": "src\\de.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 777,
                        "line_start": 777,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 15,
                            "highlight_start": 11,
                            "text": "impl<'de, 'a, R> de::Deserializer<'de> for &'a mut Deserializer<R>"
                          }
                        ]
                      },
                      {
                        "byte_end": 25086,
                        "byte_start": 25083,
                        "column_end": 48,
                        "column_start": 45,
                        "expansion": null,
                        "file_name": "src\\de.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 777,
                        "line_start": 777,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 48,
                            "highlight_start": 45,
                            "text": "impl<'de, 'a, R> de::Deserializer<'de> for &'a mut Deserializer<R>"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::needless_lifetimes",
                  "explanation": null
                },
                "level": "warning",
                "message": "the following explicit lifetimes could be elided: 'a",
                "spans": [
                  {
                    "byte_end": 25051,
                    "byte_start": 25049,
                    "column_end": 13,
                    "column_start": 11,
                    "expansion": null,
                    "file_name": "src\\de.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 777,
                    "line_start": 777,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 13,
                        "highlight_start": 11,
                        "text": "impl<'de, 'a, R> de::Deserializer<'de> for &'a mut Deserializer<R>"
                      }
                    ]
                  },
                  {
                    "byte_end": 25085,
                    "byte_start": 25083,
                    "column_end": 47,
                    "column_start": 45,
                    "expansion": null,
                    "file_name": "src\\de.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 777,
                    "line_start": 777,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 47,
                        "highlight_start": 45,
                        "text": "impl<'de, 'a, R> de::Deserializer<'de> for &'a mut Deserializer<R>"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpf3s3x02n/serde_cbor-0.11.2#serde_cbor@0.11.2",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpf3s3x02n\\serde_cbor-0.11.2\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "serde_cbor",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpf3s3x02n\\serde_cbor-0.11.2\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: usage of a legacy numeric method\n   --> src\\de.rs:848:41\n    |\n848 |                         if len > usize::max_value() as u64 {\n    |                                         ^^^^^^^^^^^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#legacy_numeric_constants\nhelp: use the associated constant instead\n    |\n848 -                         if len > usize::max_value() as u64 {\n848 +                         if len > usize::MAX as u64 {\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#legacy_numeric_constants",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "use the associated constant instead",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 27303,
                        "byte_start": 27292,
                        "column_end": 52,
                        "column_start": 41,
                        "expansion": null,
                        "file_name": "src\\de.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 848,
                        "line_start": 848,
                        "suggested_replacement": "MAX",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 52,
                            "highlight_start": 41,
                            "text": "                        if len > usize::max_value() as u64 {"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::legacy_numeric_constants",
                  "explanation": null
                },
                "level": "warning",
                "message": "usage of a legacy numeric method",
                "spans": [
                  {
                    "byte_end": 27303,
                    "byte_start": 27292,
                    "column_end": 52,
                    "column_start": 41,
                    "expansion": null,
                    "file_name": "src\\de.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 848,
                    "line_start": 848,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 52,
                        "highlight_start": 41,
                        "text": "                        if len > usize::max_value() as u64 {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpf3s3x02n/serde_cbor-0.11.2#serde_cbor@0.11.2",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpf3s3x02n\\serde_cbor-0.11.2\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "serde_cbor",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpf3s3x02n\\serde_cbor-0.11.2\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: match expression looks like `matches!` macro\n   --> src\\error.rs:154:9\n    |\n154 | /         match self.classify() {\n155 | |             Category::Io => true,\n156 | |             _ => false,\n157 | |         }\n    | |_________^ help: try: `matches!(self.classify(), Category::Io)`\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#match_like_matches_macro\n    = note: `#[warn(clippy::match_like_matches_macro)]` on by default\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#match_like_matches_macro",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "`#[warn(clippy::match_like_matches_macro)]` on by default",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "try",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 4872,
                        "byte_start": 4781,
                        "column_end": 10,
                        "column_start": 9,
                        "expansion": null,
                        "file_name": "src\\error.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 157,
                        "line_start": 154,
                        "suggested_replacement": "matches!(self.classify(), Category::Io)",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 32,
                            "highlight_start": 9,
                            "text": "        match self.classify() {"
                          },
                          {
                            "highlight_end": 34,
                            "highlight_start": 1,
                            "text": "            Category::Io => true,"
                          },
                          {
                            "highlight_end": 24,
                            "highlight_start": 1,
                            "text": "            _ => false,"
                          },
                          {
                            "highlight_end": 10,
                            "highlight_start": 1,
                            "text": "        }"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::match_like_matches_macro",
                  "explanation": null
                },
                "level": "warning",
                "message": "match expression looks like `matches!` macro",
                "spans": [
                  {
                    "byte_end": 4872,
                    "byte_start": 4781,
                    "column_end": 10,
                    "column_start": 9,
                    "expansion": null,
                    "file_name": "src\\error.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 157,
                    "line_start": 154,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 32,
                        "highlight_start": 9,
                        "text": "        match self.classify() {"
                      },
                      {
                        "highlight_end": 34,
                        "highlight_start": 1,
                        "text": "            Category::Io => true,"
                      },
                      {
                        "highlight_end": 24,
                        "highlight_start": 1,
                        "text": "            _ => false,"
                      },
                      {
                        "highlight_end": 10,
                        "highlight_start": 1,
                        "text": "        }"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpf3s3x02n/serde_cbor-0.11.2#serde_cbor@0.11.2",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpf3s3x02n\\serde_cbor-0.11.2\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "serde_cbor",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpf3s3x02n\\serde_cbor-0.11.2\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: match expression looks like `matches!` macro\n   --> src\\error.rs:162:9\n    |\n162 | /         match self.classify() {\n163 | |             Category::Syntax => true,\n164 | |             _ => false,\n165 | |         }\n    | |_________^ help: try: `matches!(self.classify(), Category::Syntax)`\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#match_like_matches_macro\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#match_like_matches_macro",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "try",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 5115,
                        "byte_start": 5020,
                        "column_end": 10,
                        "column_start": 9,
                        "expansion": null,
                        "file_name": "src\\error.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 165,
                        "line_start": 162,
                        "suggested_replacement": "matches!(self.classify(), Category::Syntax)",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 32,
                            "highlight_start": 9,
                            "text": "        match self.classify() {"
                          },
                          {
                            "highlight_end": 38,
                            "highlight_start": 1,
                            "text": "            Category::Syntax => true,"
                          },
                          {
                            "highlight_end": 24,
                            "highlight_start": 1,
                            "text": "            _ => false,"
                          },
                          {
                            "highlight_end": 10,
                            "highlight_start": 1,
                            "text": "        }"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::match_like_matches_macro",
                  "explanation": null
                },
                "level": "warning",
                "message": "match expression looks like `matches!` macro",
                "spans": [
                  {
                    "byte_end": 5115,
                    "byte_start": 5020,
                    "column_end": 10,
                    "column_start": 9,
                    "expansion": null,
                    "file_name": "src\\error.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 165,
                    "line_start": 162,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 32,
                        "highlight_start": 9,
                        "text": "        match self.classify() {"
                      },
                      {
                        "highlight_end": 38,
                        "highlight_start": 1,
                        "text": "            Category::Syntax => true,"
                      },
                      {
                        "highlight_end": 24,
                        "highlight_start": 1,
                        "text": "            _ => false,"
                      },
                      {
                        "highlight_end": 10,
                        "highlight_start": 1,
                        "text": "        }"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpf3s3x02n/serde_cbor-0.11.2#serde_cbor@0.11.2",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpf3s3x02n\\serde_cbor-0.11.2\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "serde_cbor",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpf3s3x02n\\serde_cbor-0.11.2\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: match expression looks like `matches!` macro\n   --> src\\error.rs:170:9\n    |\n170 | /         match self.classify() {\n171 | |             Category::Data => true,\n172 | |             _ => false,\n173 | |         }\n    | |_________^ help: try: `matches!(self.classify(), Category::Data)`\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#match_like_matches_macro\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#match_like_matches_macro",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "try",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 5347,
                        "byte_start": 5254,
                        "column_end": 10,
                        "column_start": 9,
                        "expansion": null,
                        "file_name": "src\\error.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 173,
                        "line_start": 170,
                        "suggested_replacement": "matches!(self.classify(), Category::Data)",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 32,
                            "highlight_start": 9,
                            "text": "        match self.classify() {"
                          },
                          {
                            "highlight_end": 36,
                            "highlight_start": 1,
                            "text": "            Category::Data => true,"
                          },
                          {
                            "highlight_end": 24,
                            "highlight_start": 1,
                            "text": "            _ => false,"
                          },
                          {
                            "highlight_end": 10,
                            "highlight_start": 1,
                            "text": "        }"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::match_like_matches_macro",
                  "explanation": null
                },
                "level": "warning",
                "message": "match expression looks like `matches!` macro",
                "spans": [
                  {
                    "byte_end": 5347,
                    "byte_start": 5254,
                    "column_end": 10,
                    "column_start": 9,
                    "expansion": null,
                    "file_name": "src\\error.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 173,
                    "line_start": 170,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 32,
                        "highlight_start": 9,
                        "text": "        match self.classify() {"
                      },
                      {
                        "highlight_end": 36,
                        "highlight_start": 1,
                        "text": "            Category::Data => true,"
                      },
                      {
                        "highlight_end": 24,
                        "highlight_start": 1,
                        "text": "            _ => false,"
                      },
                      {
                        "highlight_end": 10,
                        "highlight_start": 1,
                        "text": "        }"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpf3s3x02n/serde_cbor-0.11.2#serde_cbor@0.11.2",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpf3s3x02n\\serde_cbor-0.11.2\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "serde_cbor",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpf3s3x02n\\serde_cbor-0.11.2\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: match expression looks like `matches!` macro\n   --> src\\error.rs:178:9\n    |\n178 | /         match self.classify() {\n179 | |             Category::Eof => true,\n180 | |             _ => false,\n181 | |         }\n    | |_________^ help: try: `matches!(self.classify(), Category::Eof)`\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#match_like_matches_macro\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#match_like_matches_macro",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "try",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 5587,
                        "byte_start": 5495,
                        "column_end": 10,
                        "column_start": 9,
                        "expansion": null,
                        "file_name": "src\\error.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 181,
                        "line_start": 178,
                        "suggested_replacement": "matches!(self.classify(), Category::Eof)",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 32,
                            "highlight_start": 9,
                            "text": "        match self.classify() {"
                          },
                          {
                            "highlight_end": 35,
                            "highlight_start": 1,
                            "text": "            Category::Eof => true,"
                          },
                          {
                            "highlight_end": 24,
                            "highlight_start": 1,
                            "text": "            _ => false,"
                          },
                          {
                            "highlight_end": 10,
                            "highlight_start": 1,
                            "text": "        }"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::match_like_matches_macro",
                  "explanation": null
                },
                "level": "warning",
                "message": "match expression looks like `matches!` macro",
                "spans": [
                  {
                    "byte_end": 5587,
                    "byte_start": 5495,
                    "column_end": 10,
                    "column_start": 9,
                    "expansion": null,
                    "file_name": "src\\error.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 181,
                    "line_start": 178,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 32,
                        "highlight_start": 9,
                        "text": "        match self.classify() {"
                      },
                      {
                        "highlight_end": 35,
                        "highlight_start": 1,
                        "text": "            Category::Eof => true,"
                      },
                      {
                        "highlight_end": 24,
                        "highlight_start": 1,
                        "text": "            _ => false,"
                      },
                      {
                        "highlight_end": 10,
                        "highlight_start": 1,
                        "text": "        }"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpf3s3x02n/serde_cbor-0.11.2#serde_cbor@0.11.2",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpf3s3x02n\\serde_cbor-0.11.2\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "serde_cbor",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpf3s3x02n\\serde_cbor-0.11.2\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: match expression looks like `matches!` macro\n   --> src\\error.rs:188:9\n    |\n188 | /         match self.0.code {\n189 | |             ErrorCode::ScratchTooSmall => true,\n190 | |             _ => false,\n191 | |         }\n    | |_________^ help: try: `matches!(self.0.code, ErrorCode::ScratchTooSmall)`\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#match_like_matches_macro\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#match_like_matches_macro",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "try",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 5916,
                        "byte_start": 5815,
                        "column_end": 10,
                        "column_start": 9,
                        "expansion": null,
                        "file_name": "src\\error.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 191,
                        "line_start": 188,
                        "suggested_replacement": "matches!(self.0.code, ErrorCode::ScratchTooSmall)",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 28,
                            "highlight_start": 9,
                            "text": "        match self.0.code {"
                          },
                          {
                            "highlight_end": 48,
                            "highlight_start": 1,
                            "text": "            ErrorCode::ScratchTooSmall => true,"
                          },
                          {
                            "highlight_end": 24,
                            "highlight_start": 1,
                            "text": "            _ => false,"
                          },
                          {
                            "highlight_end": 10,
                            "highlight_start": 1,
                            "text": "        }"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::match_like_matches_macro",
                  "explanation": null
                },
                "level": "warning",
                "message": "match expression looks like `matches!` macro",
                "spans": [
                  {
                    "byte_end": 5916,
                    "byte_start": 5815,
                    "column_end": 10,
                    "column_start": 9,
                    "expansion": null,
                    "file_name": "src\\error.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 191,
                    "line_start": 188,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 28,
                        "highlight_start": 9,
                        "text": "        match self.0.code {"
                      },
                      {
                        "highlight_end": 48,
                        "highlight_start": 1,
                        "text": "            ErrorCode::ScratchTooSmall => true,"
                      },
                      {
                        "highlight_end": 24,
                        "highlight_start": 1,
                        "text": "            _ => false,"
                      },
                      {
                        "highlight_end": 10,
                        "highlight_start": 1,
                        "text": "        }"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpf3s3x02n/serde_cbor-0.11.2#serde_cbor@0.11.2",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpf3s3x02n\\serde_cbor-0.11.2\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "serde_cbor",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpf3s3x02n\\serde_cbor-0.11.2\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: variables can be used directly in the `format!` string\n   --> src\\error.rs:228:27\n    |\n228 |             Error::custom(format_args!(\"invalid type: null, expected {}\", exp))\n    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args\n    = note: `#[warn(clippy::uninlined_format_args)]` on by default\nhelp: change this to\n    |\n228 -             Error::custom(format_args!(\"invalid type: null, expected {}\", exp))\n228 +             Error::custom(format_args!(\"invalid type: null, expected {exp}\"))\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "`#[warn(clippy::uninlined_format_args)]` on by default",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "change this to",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 6886,
                        "byte_start": 6886,
                        "column_end": 71,
                        "column_start": 71,
                        "expansion": null,
                        "file_name": "src\\error.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 228,
                        "line_start": 228,
                        "suggested_replacement": "exp",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 71,
                            "highlight_start": 71,
                            "text": "            Error::custom(format_args!(\"invalid type: null, expected {}\", exp))"
                          }
                        ]
                      },
                      {
                        "byte_end": 6893,
                        "byte_start": 6888,
                        "column_end": 78,
                        "column_start": 73,
                        "expansion": null,
                        "file_name": "src\\error.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 228,
                        "line_start": 228,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 78,
                            "highlight_start": 73,
                            "text": "            Error::custom(format_args!(\"invalid type: null, expected {}\", exp))"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::uninlined_format_args",
                  "explanation": null
                },
                "level": "warning",
                "message": "variables can be used directly in the `format!` string",
                "spans": [
                  {
                    "byte_end": 6894,
                    "byte_start": 6842,
                    "column_end": 79,
                    "column_start": 27,
                    "expansion": null,
                    "file_name": "src\\error.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 228,
                    "line_start": 228,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 79,
                        "highlight_start": 27,
                        "text": "            Error::custom(format_args!(\"invalid type: null, expected {}\", exp))"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpf3s3x02n/serde_cbor-0.11.2#serde_cbor@0.11.2",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpf3s3x02n\\serde_cbor-0.11.2\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "serde_cbor",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpf3s3x02n\\serde_cbor-0.11.2\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: variables can be used directly in the `format!` string\n   --> src\\error.rs:230:27\n    |\n230 |             Error::custom(format_args!(\"invalid type: {}, expected {}\", unexp, exp))\n    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args\nhelp: change this to\n    |\n230 -             Error::custom(format_args!(\"invalid type: {}, expected {}\", unexp, exp))\n230 +             Error::custom(format_args!(\"invalid type: {unexp}, expected {exp}\"))\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "change this to",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 6968,
                        "byte_start": 6968,
                        "column_end": 56,
                        "column_start": 56,
                        "expansion": null,
                        "file_name": "src\\error.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 230,
                        "line_start": 230,
                        "suggested_replacement": "unexp",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 56,
                            "highlight_start": 56,
                            "text": "            Error::custom(format_args!(\"invalid type: {}, expected {}\", unexp, exp))"
                          }
                        ]
                      },
                      {
                        "byte_end": 6981,
                        "byte_start": 6981,
                        "column_end": 69,
                        "column_start": 69,
                        "expansion": null,
                        "file_name": "src\\error.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 230,
                        "line_start": 230,
                        "suggested_replacement": "exp",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 69,
                            "highlight_start": 69,
                            "text": "            Error::custom(format_args!(\"invalid type: {}, expected {}\", unexp, exp))"
                          }
                        ]
                      },
                      {
                        "byte_end": 6990,
                        "byte_start": 6983,
                        "column_end": 78,
                        "column_start": 71,
                        "expansion": null,
                        "file_name": "src\\error.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 230,
                        "line_start": 230,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 78,
                            "highlight_start": 71,
                            "text": "            Error::custom(format_args!(\"invalid type: {}, expected {}\", unexp, exp))"
                          }
                        ]
                      },
                      {
                        "byte_end": 6995,
                        "byte_start": 6990,
                        "column_end": 83,
                        "column_start": 78,
                        "expansion": null,
                        "file_name": "src\\error.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 230,
                        "line_start": 230,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 83,
                            "highlight_start": 78,
                            "text": "            Error::custom(format_args!(\"invalid type: {}, expected {}\", unexp, exp))"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::uninlined_format_args",
                  "explanation": null
                },
                "level": "warning",
                "message": "variables can be used directly in the `format!` string",
                "spans": [
                  {
                    "byte_end": 6996,
                    "byte_start": 6939,
                    "column_end": 84,
                    "column_start": 27,
                    "expansion": null,
                    "file_name": "src\\error.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 230,
                    "line_start": 230,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 84,
                        "highlight_start": 27,
                        "text": "            Error::custom(format_args!(\"invalid type: {}, expected {}\", unexp, exp))"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpf3s3x02n/serde_cbor-0.11.2#serde_cbor@0.11.2",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpf3s3x02n\\serde_cbor-0.11.2\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "serde_cbor",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpf3s3x02n\\serde_cbor-0.11.2\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: this expression creates a reference which is immediately dereferenced by the compiler\n   --> src\\read.rs:481:71\n    |\n481 |         self.scratch[self.scratch_index..scratch_end].copy_from_slice(&slice);\n    |                                                                       ^^^^^^ help: change this to: `slice`\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_borrow\n    = note: `#[warn(clippy::needless_borrow)]` on by default\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_borrow",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "`#[warn(clippy::needless_borrow)]` on by default",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "change this to",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 13910,
                        "byte_start": 13904,
                        "column_end": 77,
                        "column_start": 71,
                        "expansion": null,
                        "file_name": "src\\read.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 481,
                        "line_start": 481,
                        "suggested_replacement": "slice",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 77,
                            "highlight_start": 71,
                            "text": "        self.scratch[self.scratch_index..scratch_end].copy_from_slice(&slice);"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::needless_borrow",
                  "explanation": null
                },
                "level": "warning",
                "message": "this expression creates a reference which is immediately dereferenced by the compiler",
                "spans": [
                  {
                    "byte_end": 13910,
                    "byte_start": 13904,
                    "column_end": 77,
                    "column_start": 71,
                    "expansion": null,
                    "file_name": "src\\read.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 481,
                    "line_start": 481,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 77,
                        "highlight_start": 71,
                        "text": "        self.scratch[self.scratch_index..scratch_end].copy_from_slice(&slice);"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpf3s3x02n/serde_cbor-0.11.2#serde_cbor@0.11.2",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpf3s3x02n\\serde_cbor-0.11.2\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "serde_cbor",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpf3s3x02n\\serde_cbor-0.11.2\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: replacing a value of type `T` with `T::default()` is better expressed using `std::mem::take`\n   --> src\\read.rs:589:27\n    |\n589 |         self.slice = &mut mem::replace(&mut self.slice, &mut [])[self.index..];\n    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `std::mem::take(&mut self.slice)`\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#mem_replace_with_default\n    = note: `#[warn(clippy::mem_replace_with_default)]` on by default\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#mem_replace_with_default",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "`#[warn(clippy::mem_replace_with_default)]` on by default",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider using",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 16955,
                        "byte_start": 16917,
                        "column_end": 65,
                        "column_start": 27,
                        "expansion": null,
                        "file_name": "src\\read.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 589,
                        "line_start": 589,
                        "suggested_replacement": "std::mem::take(&mut self.slice)",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 65,
                            "highlight_start": 27,
                            "text": "        self.slice = &mut mem::replace(&mut self.slice, &mut [])[self.index..];"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::mem_replace_with_default",
                  "explanation": null
                },
                "level": "warning",
                "message": "replacing a value of type `T` with `T::default()` is better expressed using `std::mem::take`",
                "spans": [
                  {
                    "byte_end": 16955,
                    "byte_start": 16917,
                    "column_end": 65,
                    "column_start": 27,
                    "expansion": null,
                    "file_name": "src\\read.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 589,
                    "line_start": 589,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 65,
                        "highlight_start": 27,
                        "text": "        self.slice = &mut mem::replace(&mut self.slice, &mut [])[self.index..];"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpf3s3x02n/serde_cbor-0.11.2#serde_cbor@0.11.2",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpf3s3x02n\\serde_cbor-0.11.2\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "serde_cbor",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpf3s3x02n\\serde_cbor-0.11.2\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: replacing a value of type `T` with `T::default()` is better expressed using `std::mem::take`\n   --> src\\read.rs:609:29\n    |\n609 |         let (left, right) = mem::replace(&mut self.slice, &mut []).split_at_mut(self.index);\n    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `std::mem::take(&mut self.slice)`\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#mem_replace_with_default\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#mem_replace_with_default",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider using",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 17604,
                        "byte_start": 17566,
                        "column_end": 67,
                        "column_start": 29,
                        "expansion": null,
                        "file_name": "src\\read.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 609,
                        "line_start": 609,
                        "suggested_replacement": "std::mem::take(&mut self.slice)",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 67,
                            "highlight_start": 29,
                            "text": "        let (left, right) = mem::replace(&mut self.slice, &mut []).split_at_mut(self.index);"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::mem_replace_with_default",
                  "explanation": null
                },
                "level": "warning",
                "message": "replacing a value of type `T` with `T::default()` is better expressed using `std::mem::take`",
                "spans": [
                  {
                    "byte_end": 17604,
                    "byte_start": 17566,
                    "column_end": 67,
                    "column_start": 29,
                    "expansion": null,
                    "file_name": "src\\read.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 609,
                    "line_start": 609,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 67,
                        "highlight_start": 29,
                        "text": "        let (left, right) = mem::replace(&mut self.slice, &mut []).split_at_mut(self.index);"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpf3s3x02n/serde_cbor-0.11.2#serde_cbor@0.11.2",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpf3s3x02n\\serde_cbor-0.11.2\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "serde_cbor",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpf3s3x02n\\serde_cbor-0.11.2\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: this expression borrows a value the compiler would automatically borrow\n   --> src\\ser.rs:130:9\n    |\n130 |         (&mut buf[1..]).copy_from_slice(&55799u16.to_be_bytes());\n    |         ^^^^^^^^^^^^^^^ help: change this to: `buf[1..]`\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_borrow\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_borrow",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "change this to",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 3556,
                        "byte_start": 3541,
                        "column_end": 24,
                        "column_start": 9,
                        "expansion": null,
                        "file_name": "src\\ser.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 130,
                        "line_start": 130,
                        "suggested_replacement": "buf[1..]",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 24,
                            "highlight_start": 9,
                            "text": "        (&mut buf[1..]).copy_from_slice(&55799u16.to_be_bytes());"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::needless_borrow",
                  "explanation": null
                },
                "level": "warning",
                "message": "this expression borrows a value the compiler would automatically borrow",
                "spans": [
                  {
                    "byte_end": 3556,
                    "byte_start": 3541,
                    "column_end": 24,
                    "column_start": 9,
                    "expansion": null,
                    "file_name": "src\\ser.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 130,
                    "line_start": 130,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 24,
                        "highlight_start": 9,
                        "text": "        (&mut buf[1..]).copy_from_slice(&55799u16.to_be_bytes());"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpf3s3x02n/serde_cbor-0.11.2#serde_cbor@0.11.2",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpf3s3x02n\\serde_cbor-0.11.2\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "serde_cbor",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpf3s3x02n\\serde_cbor-0.11.2\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: usage of a legacy numeric method\n   --> src\\ser.rs:153:35\n    |\n153 |         if value <= u16::from(u8::max_value()) {\n    |                                   ^^^^^^^^^^^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#legacy_numeric_constants\nhelp: use the associated constant instead\n    |\n153 -         if value <= u16::from(u8::max_value()) {\n153 +         if value <= u16::from(u8::MAX) {\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#legacy_numeric_constants",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "use the associated constant instead",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 4233,
                        "byte_start": 4222,
                        "column_end": 46,
                        "column_start": 35,
                        "expansion": null,
                        "file_name": "src\\ser.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 153,
                        "line_start": 153,
                        "suggested_replacement": "MAX",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 46,
                            "highlight_start": 35,
                            "text": "        if value <= u16::from(u8::max_value()) {"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::legacy_numeric_constants",
                  "explanation": null
                },
                "level": "warning",
                "message": "usage of a legacy numeric method",
                "spans": [
                  {
                    "byte_end": 4233,
                    "byte_start": 4222,
                    "column_end": 46,
                    "column_start": 35,
                    "expansion": null,
                    "file_name": "src\\ser.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 153,
                    "line_start": 153,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 46,
                        "highlight_start": 35,
                        "text": "        if value <= u16::from(u8::max_value()) {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpf3s3x02n/serde_cbor-0.11.2#serde_cbor@0.11.2",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpf3s3x02n\\serde_cbor-0.11.2\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "serde_cbor",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpf3s3x02n\\serde_cbor-0.11.2\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: this expression borrows a value the compiler would automatically borrow\n   --> src\\ser.rs:157:13\n    |\n157 |             (&mut buf[1..]).copy_from_slice(&value.to_be_bytes());\n    |             ^^^^^^^^^^^^^^^ help: change this to: `buf[1..]`\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_borrow\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_borrow",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "change this to",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 4378,
                        "byte_start": 4363,
                        "column_end": 28,
                        "column_start": 13,
                        "expansion": null,
                        "file_name": "src\\ser.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 157,
                        "line_start": 157,
                        "suggested_replacement": "buf[1..]",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 28,
                            "highlight_start": 13,
                            "text": "            (&mut buf[1..]).copy_from_slice(&value.to_be_bytes());"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::needless_borrow",
                  "explanation": null
                },
                "level": "warning",
                "message": "this expression borrows a value the compiler would automatically borrow",
                "spans": [
                  {
                    "byte_end": 4378,
                    "byte_start": 4363,
                    "column_end": 28,
                    "column_start": 13,
                    "expansion": null,
                    "file_name": "src\\ser.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 157,
                    "line_start": 157,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 28,
                        "highlight_start": 13,
                        "text": "            (&mut buf[1..]).copy_from_slice(&value.to_be_bytes());"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpf3s3x02n/serde_cbor-0.11.2#serde_cbor@0.11.2",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpf3s3x02n\\serde_cbor-0.11.2\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "serde_cbor",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpf3s3x02n\\serde_cbor-0.11.2\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: usage of a legacy numeric method\n   --> src\\ser.rs:164:36\n    |\n164 |         if value <= u32::from(u16::max_value()) {\n    |                                    ^^^^^^^^^^^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#legacy_numeric_constants\nhelp: use the associated constant instead\n    |\n164 -         if value <= u32::from(u16::max_value()) {\n164 +         if value <= u32::from(u16::MAX) {\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#legacy_numeric_constants",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "use the associated constant instead",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 4624,
                        "byte_start": 4613,
                        "column_end": 47,
                        "column_start": 36,
                        "expansion": null,
                        "file_name": "src\\ser.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 164,
                        "line_start": 164,
                        "suggested_replacement": "MAX",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 47,
                            "highlight_start": 36,
                            "text": "        if value <= u32::from(u16::max_value()) {"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::legacy_numeric_constants",
                  "explanation": null
                },
                "level": "warning",
                "message": "usage of a legacy numeric method",
                "spans": [
                  {
                    "byte_end": 4624,
                    "byte_start": 4613,
                    "column_end": 47,
                    "column_start": 36,
                    "expansion": null,
                    "file_name": "src\\ser.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 164,
                    "line_start": 164,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 47,
                        "highlight_start": 36,
                        "text": "        if value <= u32::from(u16::max_value()) {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpf3s3x02n/serde_cbor-0.11.2#serde_cbor@0.11.2",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpf3s3x02n\\serde_cbor-0.11.2\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "serde_cbor",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpf3s3x02n\\serde_cbor-0.11.2\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: this expression borrows a value the compiler would automatically borrow\n   --> src\\ser.rs:168:13\n    |\n168 |             (&mut buf[1..]).copy_from_slice(&value.to_be_bytes());\n    |             ^^^^^^^^^^^^^^^ help: change this to: `buf[1..]`\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_borrow\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_borrow",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "change this to",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 4777,
                        "byte_start": 4762,
                        "column_end": 28,
                        "column_start": 13,
                        "expansion": null,
                        "file_name": "src\\ser.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 168,
                        "line_start": 168,
                        "suggested_replacement": "buf[1..]",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 28,
                            "highlight_start": 13,
                            "text": "            (&mut buf[1..]).copy_from_slice(&value.to_be_bytes());"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::needless_borrow",
                  "explanation": null
                },
                "level": "warning",
                "message": "this expression borrows a value the compiler would automatically borrow",
                "spans": [
                  {
                    "byte_end": 4777,
                    "byte_start": 4762,
                    "column_end": 28,
                    "column_start": 13,
                    "expansion": null,
                    "file_name": "src\\ser.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 168,
                    "line_start": 168,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 28,
                        "highlight_start": 13,
                        "text": "            (&mut buf[1..]).copy_from_slice(&value.to_be_bytes());"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpf3s3x02n/serde_cbor-0.11.2#serde_cbor@0.11.2",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpf3s3x02n\\serde_cbor-0.11.2\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "serde_cbor",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpf3s3x02n\\serde_cbor-0.11.2\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: usage of a legacy numeric method\n   --> src\\ser.rs:175:36\n    |\n175 |         if value <= u64::from(u32::max_value()) {\n    |                                    ^^^^^^^^^^^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#legacy_numeric_constants\nhelp: use the associated constant instead\n    |\n175 -         if value <= u64::from(u32::max_value()) {\n175 +         if value <= u64::from(u32::MAX) {\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#legacy_numeric_constants",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "use the associated constant instead",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 5023,
                        "byte_start": 5012,
                        "column_end": 47,
                        "column_start": 36,
                        "expansion": null,
                        "file_name": "src\\ser.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 175,
                        "line_start": 175,
                        "suggested_replacement": "MAX",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 47,
                            "highlight_start": 36,
                            "text": "        if value <= u64::from(u32::max_value()) {"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::legacy_numeric_constants",
                  "explanation": null
                },
                "level": "warning",
                "message": "usage of a legacy numeric method",
                "spans": [
                  {
                    "byte_end": 5023,
                    "byte_start": 5012,
                    "column_end": 47,
                    "column_start": 36,
                    "expansion": null,
                    "file_name": "src\\ser.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 175,
                    "line_start": 175,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 47,
                        "highlight_start": 36,
                        "text": "        if value <= u64::from(u32::max_value()) {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpf3s3x02n/serde_cbor-0.11.2#serde_cbor@0.11.2",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpf3s3x02n\\serde_cbor-0.11.2\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "serde_cbor",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpf3s3x02n\\serde_cbor-0.11.2\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: this expression borrows a value the compiler would automatically borrow\n   --> src\\ser.rs:179:13\n    |\n179 |             (&mut buf[1..]).copy_from_slice(&value.to_be_bytes());\n    |             ^^^^^^^^^^^^^^^ help: change this to: `buf[1..]`\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_borrow\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_borrow",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "change this to",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 5188,
                        "byte_start": 5173,
                        "column_end": 28,
                        "column_start": 13,
                        "expansion": null,
                        "file_name": "src\\ser.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 179,
                        "line_start": 179,
                        "suggested_replacement": "buf[1..]",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 28,
                            "highlight_start": 13,
                            "text": "            (&mut buf[1..]).copy_from_slice(&value.to_be_bytes());"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::needless_borrow",
                  "explanation": null
                },
                "level": "warning",
                "message": "this expression borrows a value the compiler would automatically borrow",
                "spans": [
                  {
                    "byte_end": 5188,
                    "byte_start": 5173,
                    "column_end": 28,
                    "column_start": 13,
                    "expansion": null,
                    "file_name": "src\\ser.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 179,
                    "line_start": 179,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 28,
                        "highlight_start": 13,
                        "text": "            (&mut buf[1..]).copy_from_slice(&value.to_be_bytes());"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpf3s3x02n/serde_cbor-0.11.2#serde_cbor@0.11.2",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpf3s3x02n\\serde_cbor-0.11.2\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "serde_cbor",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpf3s3x02n\\serde_cbor-0.11.2\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: usage of a legacy numeric method\n   --> src\\ser.rs:270:47\n    |\n270 |             if -(value + 1) > i128::from(u64::max_value()) {\n    |                                               ^^^^^^^^^^^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#legacy_numeric_constants\nhelp: use the associated constant instead\n    |\n270 -             if -(value + 1) > i128::from(u64::max_value()) {\n270 +             if -(value + 1) > i128::from(u64::MAX) {\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#legacy_numeric_constants",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "use the associated constant instead",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 7633,
                        "byte_start": 7622,
                        "column_end": 58,
                        "column_start": 47,
                        "expansion": null,
                        "file_name": "src\\ser.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 270,
                        "line_start": 270,
                        "suggested_replacement": "MAX",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 58,
                            "highlight_start": 47,
                            "text": "            if -(value + 1) > i128::from(u64::max_value()) {"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::legacy_numeric_constants",
                  "explanation": null
                },
                "level": "warning",
                "message": "usage of a legacy numeric method",
                "spans": [
                  {
                    "byte_end": 7633,
                    "byte_start": 7622,
                    "column_end": 58,
                    "column_start": 47,
                    "expansion": null,
                    "file_name": "src\\ser.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 270,
                    "line_start": 270,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 58,
                        "highlight_start": 47,
                        "text": "            if -(value + 1) > i128::from(u64::max_value()) {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpf3s3x02n/serde_cbor-0.11.2#serde_cbor@0.11.2",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpf3s3x02n\\serde_cbor-0.11.2\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "serde_cbor",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpf3s3x02n\\serde_cbor-0.11.2\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: usage of a legacy numeric method\n   --> src\\ser.rs:275:40\n    |\n275 |             if value > i128::from(u64::max_value()) {\n    |                                        ^^^^^^^^^^^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#legacy_numeric_constants\nhelp: use the associated constant instead\n    |\n275 -             if value > i128::from(u64::max_value()) {\n275 +             if value > i128::from(u64::MAX) {\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#legacy_numeric_constants",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "use the associated constant instead",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 7851,
                        "byte_start": 7840,
                        "column_end": 51,
                        "column_start": 40,
                        "expansion": null,
                        "file_name": "src\\ser.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 275,
                        "line_start": 275,
                        "suggested_replacement": "MAX",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 51,
                            "highlight_start": 40,
                            "text": "            if value > i128::from(u64::max_value()) {"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::legacy_numeric_constants",
                  "explanation": null
                },
                "level": "warning",
                "message": "usage of a legacy numeric method",
                "spans": [
                  {
                    "byte_end": 7851,
                    "byte_start": 7840,
                    "column_end": 51,
                    "column_start": 40,
                    "expansion": null,
                    "file_name": "src\\ser.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 275,
                    "line_start": 275,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 51,
                        "highlight_start": 40,
                        "text": "            if value > i128::from(u64::max_value()) {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpf3s3x02n/serde_cbor-0.11.2#serde_cbor@0.11.2",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpf3s3x02n\\serde_cbor-0.11.2\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "serde_cbor",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpf3s3x02n\\serde_cbor-0.11.2\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: usage of a legacy numeric method\n   --> src\\ser.rs:304:36\n    |\n304 |         if value > u128::from(u64::max_value()) {\n    |                                    ^^^^^^^^^^^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#legacy_numeric_constants\nhelp: use the associated constant instead\n    |\n304 -         if value > u128::from(u64::max_value()) {\n304 +         if value > u128::from(u64::MAX) {\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#legacy_numeric_constants",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "use the associated constant instead",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 8562,
                        "byte_start": 8551,
                        "column_end": 47,
                        "column_start": 36,
                        "expansion": null,
                        "file_name": "src\\ser.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 304,
                        "line_start": 304,
                        "suggested_replacement": "MAX",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 47,
                            "highlight_start": 36,
                            "text": "        if value > u128::from(u64::max_value()) {"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::legacy_numeric_constants",
                  "explanation": null
                },
                "level": "warning",
                "message": "usage of a legacy numeric method",
                "spans": [
                  {
                    "byte_end": 8562,
                    "byte_start": 8551,
                    "column_end": 47,
                    "column_start": 36,
                    "expansion": null,
                    "file_name": "src\\ser.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 304,
                    "line_start": 304,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 47,
                        "highlight_start": 36,
                        "text": "        if value > u128::from(u64::max_value()) {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpf3s3x02n/serde_cbor-0.11.2#serde_cbor@0.11.2",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpf3s3x02n\\serde_cbor-0.11.2\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "serde_cbor",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpf3s3x02n\\serde_cbor-0.11.2\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: this expression borrows a value the compiler would automatically borrow\n   --> src\\ser.rs:323:13\n    |\n323 |             (&mut buf[1..]).copy_from_slice(&f16::from_f32(value).to_bits().to_be_bytes());\n    |             ^^^^^^^^^^^^^^^ help: change this to: `buf[1..]`\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_borrow\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_borrow",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "change this to",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 9248,
                        "byte_start": 9233,
                        "column_end": 28,
                        "column_start": 13,
                        "expansion": null,
                        "file_name": "src\\ser.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 323,
                        "line_start": 323,
                        "suggested_replacement": "buf[1..]",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 28,
                            "highlight_start": 13,
                            "text": "            (&mut buf[1..]).copy_from_slice(&f16::from_f32(value).to_bits().to_be_bytes());"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::needless_borrow",
                  "explanation": null
                },
                "level": "warning",
                "message": "this expression borrows a value the compiler would automatically borrow",
                "spans": [
                  {
                    "byte_end": 9248,
                    "byte_start": 9233,
                    "column_end": 28,
                    "column_start": 13,
                    "expansion": null,
                    "file_name": "src\\ser.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 323,
                    "line_start": 323,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 28,
                        "highlight_start": 13,
                        "text": "            (&mut buf[1..]).copy_from_slice(&f16::from_f32(value).to_bits().to_be_bytes());"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpf3s3x02n/serde_cbor-0.11.2#serde_cbor@0.11.2",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpf3s3x02n\\serde_cbor-0.11.2\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "serde_cbor",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpf3s3x02n\\serde_cbor-0.11.2\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: this expression borrows a value the compiler would automatically borrow\n   --> src\\ser.rs:327:13\n    |\n327 |             (&mut buf[1..]).copy_from_slice(&value.to_bits().to_be_bytes());\n    |             ^^^^^^^^^^^^^^^ help: change this to: `buf[1..]`\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_borrow\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_borrow",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "change this to",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 9443,
                        "byte_start": 9428,
                        "column_end": 28,
                        "column_start": 13,
                        "expansion": null,
                        "file_name": "src\\ser.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 327,
                        "line_start": 327,
                        "suggested_replacement": "buf[1..]",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 28,
                            "highlight_start": 13,
                            "text": "            (&mut buf[1..]).copy_from_slice(&value.to_bits().to_be_bytes());"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::needless_borrow",
                  "explanation": null
                },
                "level": "warning",
                "message": "this expression borrows a value the compiler would automatically borrow",
                "spans": [
                  {
                    "byte_end": 9443,
                    "byte_start": 9428,
                    "column_end": 28,
                    "column_start": 13,
                    "expansion": null,
                    "file_name": "src\\ser.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 327,
                    "line_start": 327,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 28,
                        "highlight_start": 13,
                        "text": "            (&mut buf[1..]).copy_from_slice(&value.to_bits().to_be_bytes());"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpf3s3x02n/serde_cbor-0.11.2#serde_cbor@0.11.2",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpf3s3x02n\\serde_cbor-0.11.2\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "serde_cbor",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpf3s3x02n\\serde_cbor-0.11.2\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: this expression borrows a value the compiler would automatically borrow\n   --> src\\ser.rs:340:13\n    |\n340 |             (&mut buf[1..]).copy_from_slice(&value.to_bits().to_be_bytes());\n    |             ^^^^^^^^^^^^^^^ help: change this to: `buf[1..]`\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_borrow\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_borrow",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "change this to",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 9897,
                        "byte_start": 9882,
                        "column_end": 28,
                        "column_start": 13,
                        "expansion": null,
                        "file_name": "src\\ser.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 340,
                        "line_start": 340,
                        "suggested_replacement": "buf[1..]",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 28,
                            "highlight_start": 13,
                            "text": "            (&mut buf[1..]).copy_from_slice(&value.to_bits().to_be_bytes());"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::needless_borrow",
                  "explanation": null
                },
                "level": "warning",
                "message": "this expression borrows a value the compiler would automatically borrow",
                "spans": [
                  {
                    "byte_end": 9897,
                    "byte_start": 9882,
                    "column_end": 28,
                    "column_start": 13,
                    "expansion": null,
                    "file_name": "src\\ser.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 340,
                    "line_start": 340,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 28,
                        "highlight_start": 13,
                        "text": "            (&mut buf[1..]).copy_from_slice(&value.to_bits().to_be_bytes());"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpf3s3x02n/serde_cbor-0.11.2#serde_cbor@0.11.2",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpf3s3x02n\\serde_cbor-0.11.2\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "serde_cbor",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpf3s3x02n\\serde_cbor-0.11.2\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: the following explicit lifetimes could be elided: 'a\n   --> src\\ser.rs:523:6\n    |\n523 | impl<'a, W> ser::SerializeTuple for &'a mut Serializer<W>\n    |      ^^                              ^^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_lifetimes\nhelp: elide the lifetimes\n    |\n523 - impl<'a, W> ser::SerializeTuple for &'a mut Serializer<W>\n523 + impl<W> ser::SerializeTuple for &mut Serializer<W>\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_lifetimes",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "elide the lifetimes",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 14669,
                        "byte_start": 14665,
                        "column_end": 10,
                        "column_start": 6,
                        "expansion": null,
                        "file_name": "src\\ser.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 523,
                        "line_start": 523,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 10,
                            "highlight_start": 6,
                            "text": "impl<'a, W> ser::SerializeTuple for &'a mut Serializer<W>"
                          }
                        ]
                      },
                      {
                        "byte_end": 14700,
                        "byte_start": 14697,
                        "column_end": 41,
                        "column_start": 38,
                        "expansion": null,
                        "file_name": "src\\ser.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 523,
                        "line_start": 523,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 41,
                            "highlight_start": 38,
                            "text": "impl<'a, W> ser::SerializeTuple for &'a mut Serializer<W>"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::needless_lifetimes",
                  "explanation": null
                },
                "level": "warning",
                "message": "the following explicit lifetimes could be elided: 'a",
                "spans": [
                  {
                    "byte_end": 14667,
                    "byte_start": 14665,
                    "column_end": 8,
                    "column_start": 6,
                    "expansion": null,
                    "file_name": "src\\ser.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 523,
                    "line_start": 523,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 8,
                        "highlight_start": 6,
                        "text": "impl<'a, W> ser::SerializeTuple for &'a mut Serializer<W>"
                      }
                    ]
                  },
                  {
                    "byte_end": 14699,
                    "byte_start": 14697,
                    "column_end": 40,
                    "column_start": 38,
                    "expansion": null,
                    "file_name": "src\\ser.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 523,
                    "line_start": 523,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 40,
                        "highlight_start": 38,
                        "text": "impl<'a, W> ser::SerializeTuple for &'a mut Serializer<W>"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpf3s3x02n/serde_cbor-0.11.2#serde_cbor@0.11.2",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpf3s3x02n\\serde_cbor-0.11.2\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "serde_cbor",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpf3s3x02n\\serde_cbor-0.11.2\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: the following explicit lifetimes could be elided: 'a\n   --> src\\ser.rs:544:6\n    |\n544 | impl<'a, W> ser::SerializeTupleStruct for &'a mut Serializer<W>\n    |      ^^                                    ^^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_lifetimes\nhelp: elide the lifetimes\n    |\n544 - impl<'a, W> ser::SerializeTupleStruct for &'a mut Serializer<W>\n544 + impl<W> ser::SerializeTupleStruct for &mut Serializer<W>\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_lifetimes",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "elide the lifetimes",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 15037,
                        "byte_start": 15033,
                        "column_end": 10,
                        "column_start": 6,
                        "expansion": null,
                        "file_name": "src\\ser.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 544,
                        "line_start": 544,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 10,
                            "highlight_start": 6,
                            "text": "impl<'a, W> ser::SerializeTupleStruct for &'a mut Serializer<W>"
                          }
                        ]
                      },
                      {
                        "byte_end": 15074,
                        "byte_start": 15071,
                        "column_end": 47,
                        "column_start": 44,
                        "expansion": null,
                        "file_name": "src\\ser.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 544,
                        "line_start": 544,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 47,
                            "highlight_start": 44,
                            "text": "impl<'a, W> ser::SerializeTupleStruct for &'a mut Serializer<W>"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::needless_lifetimes",
                  "explanation": null
                },
                "level": "warning",
                "message": "the following explicit lifetimes could be elided: 'a",
                "spans": [
                  {
                    "byte_end": 15035,
                    "byte_start": 15033,
                    "column_end": 8,
                    "column_start": 6,
                    "expansion": null,
                    "file_name": "src\\ser.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 544,
                    "line_start": 544,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 8,
                        "highlight_start": 6,
                        "text": "impl<'a, W> ser::SerializeTupleStruct for &'a mut Serializer<W>"
                      }
                    ]
                  },
                  {
                    "byte_end": 15073,
                    "byte_start": 15071,
                    "column_end": 46,
                    "column_start": 44,
                    "expansion": null,
                    "file_name": "src\\ser.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 544,
                    "line_start": 544,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 46,
                        "highlight_start": 44,
                        "text": "impl<'a, W> ser::SerializeTupleStruct for &'a mut Serializer<W>"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpf3s3x02n/serde_cbor-0.11.2#serde_cbor@0.11.2",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpf3s3x02n\\serde_cbor-0.11.2\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "serde_cbor",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpf3s3x02n\\serde_cbor-0.11.2\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: the following explicit lifetimes could be elided: 'a\n   --> src\\ser.rs:565:6\n    |\n565 | impl<'a, W> ser::SerializeTupleVariant for &'a mut Serializer<W>\n    |      ^^                                     ^^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_lifetimes\nhelp: elide the lifetimes\n    |\n565 - impl<'a, W> ser::SerializeTupleVariant for &'a mut Serializer<W>\n565 + impl<W> ser::SerializeTupleVariant for &mut Serializer<W>\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_lifetimes",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "elide the lifetimes",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 15409,
                        "byte_start": 15405,
                        "column_end": 10,
                        "column_start": 6,
                        "expansion": null,
                        "file_name": "src\\ser.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 565,
                        "line_start": 565,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 10,
                            "highlight_start": 6,
                            "text": "impl<'a, W> ser::SerializeTupleVariant for &'a mut Serializer<W>"
                          }
                        ]
                      },
                      {
                        "byte_end": 15447,
                        "byte_start": 15444,
                        "column_end": 48,
                        "column_start": 45,
                        "expansion": null,
                        "file_name": "src\\ser.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 565,
                        "line_start": 565,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 48,
                            "highlight_start": 45,
                            "text": "impl<'a, W> ser::SerializeTupleVariant for &'a mut Serializer<W>"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::needless_lifetimes",
                  "explanation": null
                },
                "level": "warning",
                "message": "the following explicit lifetimes could be elided: 'a",
                "spans": [
                  {
                    "byte_end": 15407,
                    "byte_start": 15405,
                    "column_end": 8,
                    "column_start": 6,
                    "expansion": null,
                    "file_name": "src\\ser.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 565,
                    "line_start": 565,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 8,
                        "highlight_start": 6,
                        "text": "impl<'a, W> ser::SerializeTupleVariant for &'a mut Serializer<W>"
                      }
                    ]
                  },
                  {
                    "byte_end": 15446,
                    "byte_start": 15444,
                    "column_end": 47,
                    "column_start": 45,
                    "expansion": null,
                    "file_name": "src\\ser.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 565,
                    "line_start": 565,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 47,
                        "highlight_start": 45,
                        "text": "impl<'a, W> ser::SerializeTupleVariant for &'a mut Serializer<W>"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpf3s3x02n/serde_cbor-0.11.2#serde_cbor@0.11.2",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpf3s3x02n\\serde_cbor-0.11.2\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "serde_cbor",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpf3s3x02n\\serde_cbor-0.11.2\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: this expression creates a reference which is immediately dereferenced by the compiler\n  --> src\\value\\ser.rs:25:63\n   |\n25 |             Value::Bytes(ref v) => serializer.serialize_bytes(&v),\n   |                                                               ^^ help: change this to: `v`\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_borrow\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_borrow",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "change this to",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 791,
                        "byte_start": 789,
                        "column_end": 65,
                        "column_start": 63,
                        "expansion": null,
                        "file_name": "src\\value\\ser.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 25,
                        "line_start": 25,
                        "suggested_replacement": "v",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 65,
                            "highlight_start": 63,
                            "text": "            Value::Bytes(ref v) => serializer.serialize_bytes(&v),"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::needless_borrow",
                  "explanation": null
                },
                "level": "warning",
                "message": "this expression creates a reference which is immediately dereferenced by the compiler",
                "spans": [
                  {
                    "byte_end": 791,
                    "byte_start": 789,
                    "column_end": 65,
                    "column_start": 63,
                    "expansion": null,
                    "file_name": "src\\value\\ser.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 25,
                    "line_start": 25,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 65,
                        "highlight_start": 63,
                        "text": "            Value::Bytes(ref v) => serializer.serialize_bytes(&v),"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpf3s3x02n/serde_cbor-0.11.2#serde_cbor@0.11.2",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpf3s3x02n\\serde_cbor-0.11.2\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "serde_cbor",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpf3s3x02n\\serde_cbor-0.11.2\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: this expression creates a reference which is immediately dereferenced by the compiler\n  --> src\\value\\ser.rs:26:60\n   |\n26 |             Value::Text(ref v) => serializer.serialize_str(&v),\n   |                                                            ^^ help: change this to: `v`\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_borrow\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_borrow",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "change this to",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 855,
                        "byte_start": 853,
                        "column_end": 62,
                        "column_start": 60,
                        "expansion": null,
                        "file_name": "src\\value\\ser.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 26,
                        "line_start": 26,
                        "suggested_replacement": "v",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 62,
                            "highlight_start": 60,
                            "text": "            Value::Text(ref v) => serializer.serialize_str(&v),"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::needless_borrow",
                  "explanation": null
                },
                "level": "warning",
                "message": "this expression creates a reference which is immediately dereferenced by the compiler",
                "spans": [
                  {
                    "byte_end": 855,
                    "byte_start": 853,
                    "column_end": 62,
                    "column_start": 60,
                    "expansion": null,
                    "file_name": "src\\value\\ser.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 26,
                    "line_start": 26,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 62,
                        "highlight_start": 60,
                        "text": "            Value::Text(ref v) => serializer.serialize_str(&v),"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpf3s3x02n/serde_cbor-0.11.2#serde_cbor@0.11.2",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpf3s3x02n\\serde_cbor-0.11.2\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "serde_cbor",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpf3s3x02n\\serde_cbor-0.11.2\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: the borrowed expression implements the required traits\n   --> src\\value\\ser.rs:170:65\n    |\n170 |         values.insert(Value::from(variant.to_owned()), to_value(&value)?);\n    |                                                                 ^^^^^^ help: change this to: `value`\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_borrows_for_generic_args\n    = note: `#[warn(clippy::needless_borrows_for_generic_args)]` on by default\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_borrows_for_generic_args",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "`#[warn(clippy::needless_borrows_for_generic_args)]` on by default",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "change this to",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 4697,
                        "byte_start": 4691,
                        "column_end": 71,
                        "column_start": 65,
                        "expansion": null,
                        "file_name": "src\\value\\ser.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 170,
                        "line_start": 170,
                        "suggested_replacement": "value",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 71,
                            "highlight_start": 65,
                            "text": "        values.insert(Value::from(variant.to_owned()), to_value(&value)?);"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::needless_borrows_for_generic_args",
                  "explanation": null
                },
                "level": "warning",
                "message": "the borrowed expression implements the required traits",
                "spans": [
                  {
                    "byte_end": 4697,
                    "byte_start": 4691,
                    "column_end": 71,
                    "column_start": 65,
                    "expansion": null,
                    "file_name": "src\\value\\ser.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 170,
                    "line_start": 170,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 71,
                        "highlight_start": 65,
                        "text": "        values.insert(Value::from(variant.to_owned()), to_value(&value)?);"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpf3s3x02n/serde_cbor-0.11.2#serde_cbor@0.11.2",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpf3s3x02n\\serde_cbor-0.11.2\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "serde_cbor",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpf3s3x02n\\serde_cbor-0.11.2\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: the borrowed expression implements the required traits\n   --> src\\value\\ser.rs:279:32\n    |\n279 |         self.vec.push(to_value(&value)?);\n    |                                ^^^^^^ help: change this to: `value`\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_borrows_for_generic_args\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_borrows_for_generic_args",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "change this to",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 7204,
                        "byte_start": 7198,
                        "column_end": 38,
                        "column_start": 32,
                        "expansion": null,
                        "file_name": "src\\value\\ser.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 279,
                        "line_start": 279,
                        "suggested_replacement": "value",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 38,
                            "highlight_start": 32,
                            "text": "        self.vec.push(to_value(&value)?);"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::needless_borrows_for_generic_args",
                  "explanation": null
                },
                "level": "warning",
                "message": "the borrowed expression implements the required traits",
                "spans": [
                  {
                    "byte_end": 7204,
                    "byte_start": 7198,
                    "column_end": 38,
                    "column_start": 32,
                    "expansion": null,
                    "file_name": "src\\value\\ser.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 279,
                    "line_start": 279,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 38,
                        "highlight_start": 32,
                        "text": "        self.vec.push(to_value(&value)?);"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpf3s3x02n/serde_cbor-0.11.2#serde_cbor@0.11.2",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpf3s3x02n\\serde_cbor-0.11.2\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "serde_cbor",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpf3s3x02n\\serde_cbor-0.11.2\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: the borrowed expression implements the required traits\n   --> src\\value\\ser.rs:328:32\n    |\n328 |         self.vec.push(to_value(&value)?);\n    |                                ^^^^^^ help: change this to: `value`\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_borrows_for_generic_args\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_borrows_for_generic_args",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "change this to",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 8351,
                        "byte_start": 8345,
                        "column_end": 38,
                        "column_start": 32,
                        "expansion": null,
                        "file_name": "src\\value\\ser.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 328,
                        "line_start": 328,
                        "suggested_replacement": "value",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 38,
                            "highlight_start": 32,
                            "text": "        self.vec.push(to_value(&value)?);"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::needless_borrows_for_generic_args",
                  "explanation": null
                },
                "level": "warning",
                "message": "the borrowed expression implements the required traits",
                "spans": [
                  {
                    "byte_end": 8351,
                    "byte_start": 8345,
                    "column_end": 38,
                    "column_start": 32,
                    "expansion": null,
                    "file_name": "src\\value\\ser.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 328,
                    "line_start": 328,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 38,
                        "highlight_start": 32,
                        "text": "        self.vec.push(to_value(&value)?);"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpf3s3x02n/serde_cbor-0.11.2#serde_cbor@0.11.2",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpf3s3x02n\\serde_cbor-0.11.2\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "serde_cbor",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpf3s3x02n\\serde_cbor-0.11.2\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: the borrowed expression implements the required traits\n   --> src\\value\\ser.rs:349:39\n    |\n349 |         self.next_key = Some(to_value(&key)?);\n    |                                       ^^^^ help: change this to: `key`\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_borrows_for_generic_args\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_borrows_for_generic_args",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "change this to",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 8824,
                        "byte_start": 8820,
                        "column_end": 43,
                        "column_start": 39,
                        "expansion": null,
                        "file_name": "src\\value\\ser.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 349,
                        "line_start": 349,
                        "suggested_replacement": "key",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 43,
                            "highlight_start": 39,
                            "text": "        self.next_key = Some(to_value(&key)?);"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::needless_borrows_for_generic_args",
                  "explanation": null
                },
                "level": "warning",
                "message": "the borrowed expression implements the required traits",
                "spans": [
                  {
                    "byte_end": 8824,
                    "byte_start": 8820,
                    "column_end": 43,
                    "column_start": 39,
                    "expansion": null,
                    "file_name": "src\\value\\ser.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 349,
                    "line_start": 349,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 43,
                        "highlight_start": 39,
                        "text": "        self.next_key = Some(to_value(&key)?);"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpf3s3x02n/serde_cbor-0.11.2#serde_cbor@0.11.2",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpf3s3x02n\\serde_cbor-0.11.2\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "serde_cbor",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpf3s3x02n\\serde_cbor-0.11.2\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: the borrowed expression implements the required traits\n   --> src\\value\\ser.rs:361:39\n    |\n361 |         self.map.insert(key, to_value(&value)?);\n    |                                       ^^^^^^ help: change this to: `value`\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_borrows_for_generic_args\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_borrows_for_generic_args",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "change this to",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 9232,
                        "byte_start": 9226,
                        "column_end": 45,
                        "column_start": 39,
                        "expansion": null,
                        "file_name": "src\\value\\ser.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 361,
                        "line_start": 361,
                        "suggested_replacement": "value",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 45,
                            "highlight_start": 39,
                            "text": "        self.map.insert(key, to_value(&value)?);"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::needless_borrows_for_generic_args",
                  "explanation": null
                },
                "level": "warning",
                "message": "the borrowed expression implements the required traits",
                "spans": [
                  {
                    "byte_end": 9232,
                    "byte_start": 9226,
                    "column_end": 45,
                    "column_start": 39,
                    "expansion": null,
                    "file_name": "src\\value\\ser.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 361,
                    "line_start": 361,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 45,
                        "highlight_start": 39,
                        "text": "        self.map.insert(key, to_value(&value)?);"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpf3s3x02n/serde_cbor-0.11.2#serde_cbor@0.11.2",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpf3s3x02n\\serde_cbor-0.11.2\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "serde_cbor",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpf3s3x02n\\serde_cbor-0.11.2\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: the borrowed expression implements the required traits\n   --> src\\value\\ser.rs:396:62\n    |\n396 |             .insert(Value::from(String::from(key)), to_value(&value)?);\n    |                                                              ^^^^^^ help: change this to: `value`\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_borrows_for_generic_args\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_borrows_for_generic_args",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "change this to",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 10136,
                        "byte_start": 10130,
                        "column_end": 68,
                        "column_start": 62,
                        "expansion": null,
                        "file_name": "src\\value\\ser.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 396,
                        "line_start": 396,
                        "suggested_replacement": "value",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 68,
                            "highlight_start": 62,
                            "text": "            .insert(Value::from(String::from(key)), to_value(&value)?);"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::needless_borrows_for_generic_args",
                  "explanation": null
                },
                "level": "warning",
                "message": "the borrowed expression implements the required traits",
                "spans": [
                  {
                    "byte_end": 10136,
                    "byte_start": 10130,
                    "column_end": 68,
                    "column_start": 62,
                    "expansion": null,
                    "file_name": "src\\value\\ser.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 396,
                    "line_start": 396,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 68,
                        "highlight_start": 62,
                        "text": "            .insert(Value::from(String::from(key)), to_value(&value)?);"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-artifact",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpf3s3x02n/serde_cbor-0.11.2#serde_cbor@0.11.2",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpf3s3x02n\\serde_cbor-0.11.2\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "serde_cbor",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpf3s3x02n\\serde_cbor-0.11.2\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpf3s3x02n\\serde_cbor-0.11.2\\target\\debug\\deps\\libserde_cbor-5a7ee4991c9a3c82.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "build-finished",
              "success": true
            }
          ],
          "audit": {
            "database": {
              "advisory-count": 787,
              "last-commit": "7573f55ba337263f61167dbb0ea926cdc7c8eb5d",
              "last-updated": "2025-06-17T11:04:25+02:00"
            },
            "lockfile": {
              "dependency-count": 8
            },
            "settings": {
              "target_arch": [],
              "target_os": [],
              "severity": null,
              "ignore": [],
              "informational_warnings": [
                "unmaintained",
                "unsound",
                "notice"
              ]
            },
            "vulnerabilities": {
              "found": false,
              "count": 0,
              "list": []
            },
            "warnings": {
              "unmaintained": [
                {
                  "kind": "unmaintained",
                  "package": {
                    "name": "serde_cbor",
                    "version": "0.11.2",
                    "source": null,
                    "checksum": null,
                    "dependencies": [
                      {
                        "name": "half",
                        "version": "1.4.0",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "serde",
                        "version": "1.0.104",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "serde_derive",
                        "version": "1.0.104",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      }
                    ],
                    "replace": null
                  },
                  "advisory": {
                    "id": "RUSTSEC-2021-0127",
                    "package": "serde_cbor",
                    "title": "serde_cbor is unmaintained",
                    "description": "The `serde_cbor` crate is unmaintained. The author has archived the github repository.\n\nAlternatives proposed by the author:\n\n * [`ciborium`](https://crates.io/crates/ciborium)\n * [`minicbor`](https://crates.io/crates/minicbor)",
                    "date": "2021-08-15",
                    "aliases": [],
                    "related": [],
                    "collection": "crates",
                    "categories": [],
                    "keywords": [],
                    "cvss": null,
                    "informational": "unmaintained",
                    "references": [],
                    "source": null,
                    "url": "https://github.com/pyfisch/cbor",
                    "withdrawn": null,
                    "license": "CC0-1.0"
                  },
                  "affected": null,
                  "versions": {
                    "patched": [],
                    "unaffected": []
                  }
                }
              ]
            }
          },
          "note": "Crate analysis performed with stable toolchain."
        },
        "crate_metadata": {
          "name": "serde_cbor",
          "version": "0.11.2",
          "description": "ALLOW: Positive community sentiment",
          "repository": "",
          "keywords": [],
          "categories": [],
          "readme": {
            "raw_markdown": "[](https://docs.rs/serde_cbor/latest/serde_cbor/all.html \"show sidebar\")\n# Crate serde_cborCopy item path\n[Settings](https://docs.rs/serde_cbor/latest/settings.html)\n[Help](https://docs.rs/serde_cbor/latest/help.html)\nSummary[Source](https://docs.rs/serde_cbor/latest/src/serde_cbor/lib.rs.html#1-369)\nExpand description\nCBOR and serialization.\n## [\u00a7](https://docs.rs/serde_cbor/latest/serde_cbor/#usage)Usage\nSerde CBOR supports Rust 1.40 and up. Add this to your `Cargo.toml`:\n```\n[dependencies]\nserde_cbor = \"0.10\"\n```\n\nStoring and loading Rust types is easy and requires only minimal modifications to the program code.\n```\nuse serde_derive::{Deserialize, Serialize};\nuse std::error::Error;\nuse std::fs::File;\n// Types annotated with `Serialize` can be stored as CBOR.\n// To be able to load them again add `Deserialize`.\n#[derive(Debug, Serialize, Deserialize)]\nstruct Mascot {\n  name: String,\n  species: String,\n  year_of_birth: u32,\n}\nfn main() -> Result<(), Box<dyn Error>> {\n  let ferris = Mascot {\n    name: \"Ferris\".to_owned(),\n    species: \"crab\".to_owned(),\n    year_of_birth: 2015,\n  };\n  let ferris_file = File::create(\"examples/ferris.cbor\")?;\n  // Write Ferris to the given file.\n  // Instead of a file you can use any type that implements `io::Write`\n  // like a HTTP body, database connection etc.\n  serde_cbor::to_writer(ferris_file, &ferris)?;\n  let tux_file = File::open(\"examples/tux.cbor\")?;\n  // Load Tux from a file.\n  // Serde CBOR performs roundtrip serialization meaning that\n  // the data will not change in any way.\n  let tux: Mascot = serde_cbor::from_reader(tux_file)?;\n  println!(\"{:?}\", tux);\n  // prints: Mascot { name: \"Tux\", species: \"penguin\", year_of_birth: 1996 }\n  Ok(())\n}\n```\n\nThere are a lot of options available to customize the format. To operate on untyped CBOR values have a look at the `Value` type.\n## [\u00a7](https://docs.rs/serde_cbor/latest/serde_cbor/#type-based-serialization-and-deserialization)Type-based Serialization and Deserialization\nSerde provides a mechanism for low boilerplate serialization & deserialization of values to and from CBOR via the serialization API. To be able to serialize a piece of data, it must implement the `serde::Serialize` trait. To be able to deserialize a piece of data, it must implement the `serde::Deserialize` trait. Serde provides an annotation to automatically generate the code for these traits: `#[derive(Serialize, Deserialize)]`.\nThe CBOR API also provides an enum `serde_cbor::Value`.\n## [\u00a7](https://docs.rs/serde_cbor/latest/serde_cbor/#packed-encoding)Packed Encoding\nWhen serializing structs or enums in CBOR the keys or enum variant names will be serialized as string keys to a map. Especially in embedded environments this can increase the file size too much. In packed encoding all struct keys, as well as any enum variant that has no data, will be serialized as variable sized integers. The first 24 entries in any struct consume only a single byte! Packed encoding uses serde\u2019s preferred [externally tagged enum format](https://serde.rs/enum-representations.html) and therefore serializes enum variant names as string keys when that variant contains data. So, in the packed encoding example, `FirstVariant` encodes to a single byte, but encoding `SecondVariant` requires 16 bytes.\nTo serialize a document in this format use `Serializer::new(writer).packed_format()` or the shorthand `ser::to_vec_packed`. The deserialization works without any changes.\nIf you would like to omit the enum variant encoding for all variants, including ones that contain data, you can add `legacy_enums()` in addition to `packed_format()`, as can seen in the Serialize using minimal encoding example.\n## [\u00a7](https://docs.rs/serde_cbor/latest/serde_cbor/#self-describing-documents)Self describing documents\nIn some contexts different formats are used but there is no way to declare the format used out of band. For this reason CBOR has a magic number that may be added before any document. Self describing documents are created with `serializer.self_describe()`.\n## [\u00a7](https://docs.rs/serde_cbor/latest/serde_cbor/#examples)Examples\nRead a CBOR value that is known to be a map of string keys to string values and print it.\n```\nuse std::collections::BTreeMap;\nuse serde_cbor::from_slice;\nlet slice = b\"\\xa5aaaAabaBacaCadaDaeaE\";\nlet value: BTreeMap<String, String> = from_slice(slice).unwrap();\nprintln!(\"{:?}\", value); // {\"e\": \"E\", \"d\": \"D\", \"a\": \"A\", \"c\": \"C\", \"b\": \"B\"}\n```\n\nRead a general CBOR value with an unknown content.\n```\nuse serde_cbor::from_slice;\nuse serde_cbor::value::Value;\nlet slice = b\"\\x82\\x01\\xa1aaab\";\nlet value: Value = from_slice(slice).unwrap();\nprintln!(\"{:?}\", value); // Array([U64(1), Object({String(\"a\"): String(\"b\")})])\n```\n\nSerialize an object.\n```\nuse std::collections::BTreeMap;\nuse serde_cbor::to_vec;\nlet mut programming_languages = BTreeMap::new();\nprogramming_languages.insert(\"rust\", vec![\"safe\", \"concurrent\", \"fast\"]);\nprogramming_languages.insert(\"python\", vec![\"powerful\", \"friendly\", \"open\"]);\nprogramming_languages.insert(\"js\", vec![\"lightweight\", \"interpreted\", \"object-oriented\"]);\nlet encoded = to_vec(&programming_languages);\nassert_eq!(encoded.unwrap().len(), 103);\n```\n\nDeserializing data in the middle of a slice\n```\nuse serde_cbor::Deserializer;\nlet data: Vec<u8> = vec![\n  0x66, 0x66, 0x6f, 0x6f, 0x62, 0x61, 0x72, 0x66, 0x66, 0x6f, 0x6f, 0x62,\n  0x61, 0x72,\n];\nlet mut deserializer = Deserializer::from_slice(&data);\nlet value: &str = serde::de::Deserialize::deserialize(&mut deserializer)\n  .unwrap();\nlet rest = &data[deserializer.byte_offset()..];\nassert_eq!(value, \"foobar\");\nassert_eq!(rest, &[0x66, 0x66, 0x6f, 0x6f, 0x62, 0x61, 0x72]);\n```\n\nSerialize using packed encoding\n```\nuse serde_derive::{Deserialize, Serialize};\nuse serde_cbor::ser::to_vec_packed;\nuse WithTwoVariants::*;\n#[derive(Debug, Serialize, Deserialize)]\nenum WithTwoVariants {\n  FirstVariant,\n  SecondVariant(u8),\n}\nlet cbor = to_vec_packed(&FirstVariant).unwrap();\nassert_eq!(cbor.len(), 1);\nlet cbor = to_vec_packed(&SecondVariant(0)).unwrap();\nassert_eq!(cbor.len(), 16); // Includes 13 bytes of \"SecondVariant\"\n```\n\nSerialize using minimal encoding\n```\nuse serde_derive::{Deserialize, Serialize};\nuse serde_cbor::{Result, Serializer, ser::{self, IoWrite}};\nuse WithTwoVariants::*;\nfn to_vec_minimal<T>(value: &T) -> Result<Vec<u8>>\nwhere\n  T: serde::Serialize,\n{\n  let mut vec = Vec::new();\n  value.serialize(&mut Serializer::new(&mut IoWrite::new(&mut vec)).packed_format().legacy_enums())?;\n  Ok(vec)\n}\n#[derive(Debug, Serialize, Deserialize)]\nenum WithTwoVariants {\n  FirstVariant,\n  SecondVariant(u8),\n}\nlet cbor = to_vec_minimal(&FirstVariant).unwrap();\nassert_eq!(cbor.len(), 1);\nlet cbor = to_vec_minimal(&SecondVariant(0)).unwrap();\nassert_eq!(cbor.len(), 3);\n```\n\n## [\u00a7](https://docs.rs/serde_cbor/latest/serde_cbor/#no-std-support)`no-std` support\nSerde CBOR supports building in a `no_std` context, use the following lines in your `Cargo.toml` dependencies:\n```\n[dependencies]\nserde = { version = \"1.0\", default-features = false }\nserde_cbor = { version = \"0.10\", default-features = false }\n```\n\nWithout the `std` feature the functions [from_reader](https://docs.rs/serde_cbor/latest/serde_cbor/fn.from_reader.html \"fn serde_cbor::from_reader\"), [from_slice](https://docs.rs/serde_cbor/latest/serde_cbor/fn.from_slice.html \"fn serde_cbor::from_slice\"), [to_vec](https://docs.rs/serde_cbor/latest/serde_cbor/fn.to_vec.html \"fn serde_cbor::to_vec\"), and [to_writer](https://docs.rs/serde_cbor/latest/serde_cbor/fn.to_writer.html \"fn serde_cbor::to_writer\") are not exported. To export [from_slice](https://docs.rs/serde_cbor/latest/serde_cbor/fn.from_slice.html \"fn serde_cbor::from_slice\") and [to_vec](https://docs.rs/serde_cbor/latest/serde_cbor/fn.to_vec.html \"fn serde_cbor::to_vec\") enable the `alloc` feature. The `alloc` feature uses the [`alloc` library](https://doc.rust-lang.org/alloc/) and requires at least version 1.36.0 of Rust.\n_Note_ : to use derive macros in serde you will need to declare `serde` dependency like so:\n```\nserde = { version = \"1.0\", default-features = false, features = [\"derive\"] }\n```\n\nSerialize an object with `no_std` and without `alloc`.\n```\nuse serde::Serialize;\nuse serde_cbor::Serializer;\nuse serde_cbor::ser::SliceWrite;\n#[derive(Serialize)]\nstruct User {\n  user_id: u32,\n  password_hash: [u8; 4],\n}\nlet mut buf = [0u8; 100];\nlet writer = SliceWrite::new(&mut buf[..]);\nlet mut ser = Serializer::new(writer);\nlet user = User {\n  user_id: 42,\n  password_hash: [1, 2, 3, 4],\n};\nuser.serialize(&mut ser)?;\nlet writer = ser.into_inner();\nlet size = writer.bytes_written();\nlet expected = [\n  0xa2, 0x67, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x2a, 0x6d,\n  0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x5f, 0x68, 0x61, 0x73,\n  0x68, 0x84, 0x1, 0x2, 0x3, 0x4\n];\nassert_eq!(&buf[..size], expected);\n```\n\nDeserialize an object.\n```\n#[derive(Debug, PartialEq, Deserialize)]\nstruct User {\n  user_id: u32,\n  password_hash: [u8; 4],\n}\nlet value = [\n  0xa2, 0x67, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x2a, 0x6d,\n  0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x5f, 0x68, 0x61, 0x73,\n  0x68, 0x84, 0x1, 0x2, 0x3, 0x4\n];\n// from_slice_with_scratch will not alter input data, use it whenever you\n// borrow from somewhere else.\n// You will have to size your scratch according to the input data you\n// expect.\nuse serde_cbor::de::from_slice_with_scratch;\nlet mut scratch = [0u8; 32];\nlet user: User = from_slice_with_scratch(&value[..], &mut scratch)?;\nassert_eq!(user, User {\n  user_id: 42,\n  password_hash: [1, 2, 3, 4],\n});\nlet mut value = [\n  0xa2, 0x67, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x2a, 0x6d,\n  0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x5f, 0x68, 0x61, 0x73,\n  0x68, 0x84, 0x1, 0x2, 0x3, 0x4\n];\n// from_mut_slice will move data around the input slice, you may only use it\n// on data you may own or can modify.\nuse serde_cbor::de::from_mut_slice;\nlet user: User = from_mut_slice(&mut value[..])?;\nassert_eq!(user, User {\n  user_id: 42,\n  password_hash: [1, 2, 3, 4],\n});\n```\n\n## [\u00a7](https://docs.rs/serde_cbor/latest/serde_cbor/#limitations)Limitations\nWhile Serde CBOR strives to support all features of Serde and CBOR there are a few limitations.\n  * [Tags](https://tools.ietf.org/html/rfc7049#section-2.4.4) are ignored during deserialization and can\u2019t be emitted during serialization. This is because Serde has no concept of tagged values. See: [#3](https://github.com/pyfisch/cbor/issues/3)\n  * Unknown [simple values](https://tools.ietf.org/html/rfc7049#section-3.5) cause an `UnassignedCode` error. The simple values _False_ and _True_ are recognized and parsed as bool. _Null_ and _Undefined_ are both deserialized as _unit_. The _unit_ type is serialized as _Null_. See: [#86](https://github.com/pyfisch/cbor/issues/86)\n  * [128-bit integers](https://doc.rust-lang.org/std/primitive.u128.html) can\u2019t be directly encoded in CBOR. If you need them store them as a byte string. See: [#77](https://github.com/pyfisch/cbor/issues/77)\n\n\n## Modules[\u00a7](https://docs.rs/serde_cbor/latest/serde_cbor/#modules)\n\n[de](https://docs.rs/serde_cbor/latest/serde_cbor/de/index.html \"mod serde_cbor::de\")\n    Deserialization.\n\n[error](https://docs.rs/serde_cbor/latest/serde_cbor/error/index.html \"mod serde_cbor::error\")\n    When serializing or deserializing CBOR goes wrong.\n\n[ser](https://docs.rs/serde_cbor/latest/serde_cbor/ser/index.html \"mod serde_cbor::ser\")\n    Serialize a Rust data structure to CBOR data.\n\n[tags](https://docs.rs/serde_cbor/latest/serde_cbor/tags/index.html \"mod serde_cbor::tags\")\n    Support for cbor tags\n\n[value](https://docs.rs/serde_cbor/latest/serde_cbor/value/index.html \"mod serde_cbor::value\")\n    CBOR values, keys and serialization routines.\n## Structs[\u00a7](https://docs.rs/serde_cbor/latest/serde_cbor/#structs)\n\n[Deserializer](https://docs.rs/serde_cbor/latest/serde_cbor/struct.Deserializer.html \"struct serde_cbor::Deserializer\")\n    A Serde `Deserialize`r of CBOR data.\n\n[Error](https://docs.rs/serde_cbor/latest/serde_cbor/struct.Error.html \"struct serde_cbor::Error\")\n    This type represents all possible errors that can occur when serializing or deserializing CBOR data.\n\n[Serializer](https://docs.rs/serde_cbor/latest/serde_cbor/struct.Serializer.html \"struct serde_cbor::Serializer\")\n    A structure for serializing Rust values to CBOR.\n\n[StreamDeserializer](https://docs.rs/serde_cbor/latest/serde_cbor/struct.StreamDeserializer.html \"struct serde_cbor::StreamDeserializer\")\n    Iterator that deserializes a stream into multiple CBOR values.\n## Enums[\u00a7](https://docs.rs/serde_cbor/latest/serde_cbor/#enums)\n\n[Value](https://docs.rs/serde_cbor/latest/serde_cbor/enum.Value.html \"enum serde_cbor::Value\")\n    The `Value` enum, a loosely typed way of representing any valid CBOR value.\n## Functions[\u00a7](https://docs.rs/serde_cbor/latest/serde_cbor/#functions)\n\n[from_reader](https://docs.rs/serde_cbor/latest/serde_cbor/fn.from_reader.html \"fn serde_cbor::from_reader\")\n    Decodes a value from CBOR data in a reader.\n\n[from_slice](https://docs.rs/serde_cbor/latest/serde_cbor/fn.from_slice.html \"fn serde_cbor::from_slice\")\n    Decodes a value from CBOR data in a slice.\n\n[to_vec](https://docs.rs/serde_cbor/latest/serde_cbor/fn.to_vec.html \"fn serde_cbor::to_vec\")\n    Serializes a value to a vector.\n\n[to_writer](https://docs.rs/serde_cbor/latest/serde_cbor/fn.to_writer.html \"fn serde_cbor::to_writer\")\n    Serializes a value to a writer.\n## Type Aliases[\u00a7](https://docs.rs/serde_cbor/latest/serde_cbor/#types)\n\n[Result](https://docs.rs/serde_cbor/latest/serde_cbor/type.Result.html \"type serde_cbor::Result\")\n    Alias for a `Result` with the error type `serde_cbor::Error`.\n",
            "markdown_with_citations": "[](https://docs.rs/serde_cbor/latest/serde_cbor/all.html \"show sidebar\")\n# Crate serde_cborCopy item path\nSettings\u27e81\u27e9\nHelp\u27e82\u27e9\nSummarySource\u27e83\u27e9\nExpand description\nCBOR and serialization.\n## \u00a7\u27e84\u27e9Usage\nSerde CBOR supports Rust 1.40 and up. Add this to your `Cargo.toml`:\n```\n[dependencies]\nserde_cbor = \"0.10\"\n```\n\nStoring and loading Rust types is easy and requires only minimal modifications to the program code.\n```\nuse serde_derive::{Deserialize, Serialize};\nuse std::error::Error;\nuse std::fs::File;\n// Types annotated with `Serialize` can be stored as CBOR.\n// To be able to load them again add `Deserialize`.\n#[derive(Debug, Serialize, Deserialize)]\nstruct Mascot {\n  name: String,\n  species: String,\n  year_of_birth: u32,\n}\nfn main() -> Result<(), Box<dyn Error>> {\n  let ferris = Mascot {\n    name: \"Ferris\".to_owned(),\n    species: \"crab\".to_owned(),\n    year_of_birth: 2015,\n  };\n  let ferris_file = File::create(\"examples/ferris.cbor\")?;\n  // Write Ferris to the given file.\n  // Instead of a file you can use any type that implements `io::Write`\n  // like a HTTP body, database connection etc.\n  serde_cbor::to_writer(ferris_file, &ferris)?;\n  let tux_file = File::open(\"examples/tux.cbor\")?;\n  // Load Tux from a file.\n  // Serde CBOR performs roundtrip serialization meaning that\n  // the data will not change in any way.\n  let tux: Mascot = serde_cbor::from_reader(tux_file)?;\n  println!(\"{:?}\", tux);\n  // prints: Mascot { name: \"Tux\", species: \"penguin\", year_of_birth: 1996 }\n  Ok(())\n}\n```\n\nThere are a lot of options available to customize the format. To operate on untyped CBOR values have a look at the `Value` type.\n## \u00a7\u27e85\u27e9Type-based Serialization and Deserialization\nSerde provides a mechanism for low boilerplate serialization & deserialization of values to and from CBOR via the serialization API. To be able to serialize a piece of data, it must implement the `serde::Serialize` trait. To be able to deserialize a piece of data, it must implement the `serde::Deserialize` trait. Serde provides an annotation to automatically generate the code for these traits: `#[derive(Serialize, Deserialize)]`.\nThe CBOR API also provides an enum `serde_cbor::Value`.\n## \u00a7\u27e86\u27e9Packed Encoding\nWhen serializing structs or enums in CBOR the keys or enum variant names will be serialized as string keys to a map. Especially in embedded environments this can increase the file size too much. In packed encoding all struct keys, as well as any enum variant that has no data, will be serialized as variable sized integers. The first 24 entries in any struct consume only a single byte! Packed encoding uses serde\u2019s preferred externally tagged enum format\u27e87\u27e9 and therefore serializes enum variant names as string keys when that variant contains data. So, in the packed encoding example, `FirstVariant` encodes to a single byte, but encoding `SecondVariant` requires 16 bytes.\nTo serialize a document in this format use `Serializer::new(writer).packed_format()` or the shorthand `ser::to_vec_packed`. The deserialization works without any changes.\nIf you would like to omit the enum variant encoding for all variants, including ones that contain data, you can add `legacy_enums()` in addition to `packed_format()`, as can seen in the Serialize using minimal encoding example.\n## \u00a7\u27e88\u27e9Self describing documents\nIn some contexts different formats are used but there is no way to declare the format used out of band. For this reason CBOR has a magic number that may be added before any document. Self describing documents are created with `serializer.self_describe()`.\n## \u00a7\u27e89\u27e9Examples\nRead a CBOR value that is known to be a map of string keys to string values and print it.\n```\nuse std::collections::BTreeMap;\nuse serde_cbor::from_slice;\nlet slice = b\"\\xa5aaaAabaBacaCadaDaeaE\";\nlet value: BTreeMap<String, String> = from_slice(slice).unwrap();\nprintln!(\"{:?}\", value); // {\"e\": \"E\", \"d\": \"D\", \"a\": \"A\", \"c\": \"C\", \"b\": \"B\"}\n```\n\nRead a general CBOR value with an unknown content.\n```\nuse serde_cbor::from_slice;\nuse serde_cbor::value::Value;\nlet slice = b\"\\x82\\x01\\xa1aaab\";\nlet value: Value = from_slice(slice).unwrap();\nprintln!(\"{:?}\", value); // Array([U64(1), Object({String(\"a\"): String(\"b\")})])\n```\n\nSerialize an object.\n```\nuse std::collections::BTreeMap;\nuse serde_cbor::to_vec;\nlet mut programming_languages = BTreeMap::new();\nprogramming_languages.insert(\"rust\", vec![\"safe\", \"concurrent\", \"fast\"]);\nprogramming_languages.insert(\"python\", vec![\"powerful\", \"friendly\", \"open\"]);\nprogramming_languages.insert(\"js\", vec![\"lightweight\", \"interpreted\", \"object-oriented\"]);\nlet encoded = to_vec(&programming_languages);\nassert_eq!(encoded.unwrap().len(), 103);\n```\n\nDeserializing data in the middle of a slice\n```\nuse serde_cbor::Deserializer;\nlet data: Vec<u8> = vec![\n  0x66, 0x66, 0x6f, 0x6f, 0x62, 0x61, 0x72, 0x66, 0x66, 0x6f, 0x6f, 0x62,\n  0x61, 0x72,\n];\nlet mut deserializer = Deserializer::from_slice(&data);\nlet value: &str = serde::de::Deserialize::deserialize(&mut deserializer)\n  .unwrap();\nlet rest = &data[deserializer.byte_offset()..];\nassert_eq!(value, \"foobar\");\nassert_eq!(rest, &[0x66, 0x66, 0x6f, 0x6f, 0x62, 0x61, 0x72]);\n```\n\nSerialize using packed encoding\n```\nuse serde_derive::{Deserialize, Serialize};\nuse serde_cbor::ser::to_vec_packed;\nuse WithTwoVariants::*;\n#[derive(Debug, Serialize, Deserialize)]\nenum WithTwoVariants {\n  FirstVariant,\n  SecondVariant(u8),\n}\nlet cbor = to_vec_packed(&FirstVariant).unwrap();\nassert_eq!(cbor.len(), 1);\nlet cbor = to_vec_packed(&SecondVariant(0)).unwrap();\nassert_eq!(cbor.len(), 16); // Includes 13 bytes of \"SecondVariant\"\n```\n\nSerialize using minimal encoding\n```\nuse serde_derive::{Deserialize, Serialize};\nuse serde_cbor::{Result, Serializer, ser::{self, IoWrite}};\nuse WithTwoVariants::*;\nfn to_vec_minimal<T>(value: &T) -> Result<Vec<u8>>\nwhere\n  T: serde::Serialize,\n{\n  let mut vec = Vec::new();\n  value.serialize(&mut Serializer::new(&mut IoWrite::new(&mut vec)).packed_format().legacy_enums())?;\n  Ok(vec)\n}\n#[derive(Debug, Serialize, Deserialize)]\nenum WithTwoVariants {\n  FirstVariant,\n  SecondVariant(u8),\n}\nlet cbor = to_vec_minimal(&FirstVariant).unwrap();\nassert_eq!(cbor.len(), 1);\nlet cbor = to_vec_minimal(&SecondVariant(0)).unwrap();\nassert_eq!(cbor.len(), 3);\n```\n\n## \u00a7\u27e810\u27e9`no-std` support\nSerde CBOR supports building in a `no_std` context, use the following lines in your `Cargo.toml` dependencies:\n```\n[dependencies]\nserde = { version = \"1.0\", default-features = false }\nserde_cbor = { version = \"0.10\", default-features = false }\n```\n\nWithout the `std` feature the functions from_reader\u27e811\u27e9, from_slice\u27e812\u27e9, to_vec\u27e813\u27e9, and to_writer\u27e814\u27e9 are not exported. To export from_slice\u27e812\u27e9 and to_vec\u27e813\u27e9 enable the `alloc` feature. The `alloc` feature uses the `alloc` library\u27e815\u27e9 and requires at least version 1.36.0 of Rust.\n_Note_ : to use derive macros in serde you will need to declare `serde` dependency like so:\n```\nserde = { version = \"1.0\", default-features = false, features = [\"derive\"] }\n```\n\nSerialize an object with `no_std` and without `alloc`.\n```\nuse serde::Serialize;\nuse serde_cbor::Serializer;\nuse serde_cbor::ser::SliceWrite;\n#[derive(Serialize)]\nstruct User {\n  user_id: u32,\n  password_hash: [u8; 4],\n}\nlet mut buf = [0u8; 100];\nlet writer = SliceWrite::new(&mut buf[..]);\nlet mut ser = Serializer::new(writer);\nlet user = User {\n  user_id: 42,\n  password_hash: [1, 2, 3, 4],\n};\nuser.serialize(&mut ser)?;\nlet writer = ser.into_inner();\nlet size = writer.bytes_written();\nlet expected = [\n  0xa2, 0x67, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x2a, 0x6d,\n  0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x5f, 0x68, 0x61, 0x73,\n  0x68, 0x84, 0x1, 0x2, 0x3, 0x4\n];\nassert_eq!(&buf[..size], expected);\n```\n\nDeserialize an object.\n```\n#[derive(Debug, PartialEq, Deserialize)]\nstruct User {\n  user_id: u32,\n  password_hash: [u8; 4],\n}\nlet value = [\n  0xa2, 0x67, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x2a, 0x6d,\n  0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x5f, 0x68, 0x61, 0x73,\n  0x68, 0x84, 0x1, 0x2, 0x3, 0x4\n];\n// from_slice_with_scratch will not alter input data, use it whenever you\n// borrow from somewhere else.\n// You will have to size your scratch according to the input data you\n// expect.\nuse serde_cbor::de::from_slice_with_scratch;\nlet mut scratch = [0u8; 32];\nlet user: User = from_slice_with_scratch(&value[..], &mut scratch)?;\nassert_eq!(user, User {\n  user_id: 42,\n  password_hash: [1, 2, 3, 4],\n});\nlet mut value = [\n  0xa2, 0x67, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x2a, 0x6d,\n  0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x5f, 0x68, 0x61, 0x73,\n  0x68, 0x84, 0x1, 0x2, 0x3, 0x4\n];\n// from_mut_slice will move data around the input slice, you may only use it\n// on data you may own or can modify.\nuse serde_cbor::de::from_mut_slice;\nlet user: User = from_mut_slice(&mut value[..])?;\nassert_eq!(user, User {\n  user_id: 42,\n  password_hash: [1, 2, 3, 4],\n});\n```\n\n## \u00a7\u27e816\u27e9Limitations\nWhile Serde CBOR strives to support all features of Serde and CBOR there are a few limitations.\n  * Tags\u27e817\u27e9 are ignored during deserialization and can\u2019t be emitted during serialization. This is because Serde has no concept of tagged values. See: #3\u27e818\u27e9\n  * Unknown simple values\u27e819\u27e9 cause an `UnassignedCode` error. The simple values _False_ and _True_ are recognized and parsed as bool. _Null_ and _Undefined_ are both deserialized as _unit_. The _unit_ type is serialized as _Null_. See: #86\u27e820\u27e9\n  * 128-bit integers\u27e821\u27e9 can\u2019t be directly encoded in CBOR. If you need them store them as a byte string. See: #77\u27e822\u27e9\n\n\n## Modules\u00a7\u27e823\u27e9\n\nde\u27e824\u27e9\n    Deserialization.\n\nerror\u27e825\u27e9\n    When serializing or deserializing CBOR goes wrong.\n\nser\u27e826\u27e9\n    Serialize a Rust data structure to CBOR data.\n\ntags\u27e827\u27e9\n    Support for cbor tags\n\nvalue\u27e828\u27e9\n    CBOR values, keys and serialization routines.\n## Structs\u00a7\u27e829\u27e9\n\nDeserializer\u27e830\u27e9\n    A Serde `Deserialize`r of CBOR data.\n\nError\u27e831\u27e9\n    This type represents all possible errors that can occur when serializing or deserializing CBOR data.\n\nSerializer\u27e832\u27e9\n    A structure for serializing Rust values to CBOR.\n\nStreamDeserializer\u27e833\u27e9\n    Iterator that deserializes a stream into multiple CBOR values.\n## Enums\u00a7\u27e834\u27e9\n\nValue\u27e835\u27e9\n    The `Value` enum, a loosely typed way of representing any valid CBOR value.\n## Functions\u00a7\u27e836\u27e9\n\nfrom_reader\u27e811\u27e9\n    Decodes a value from CBOR data in a reader.\n\nfrom_slice\u27e812\u27e9\n    Decodes a value from CBOR data in a slice.\n\nto_vec\u27e813\u27e9\n    Serializes a value to a vector.\n\nto_writer\u27e814\u27e9\n    Serializes a value to a writer.\n## Type Aliases\u00a7\u27e837\u27e9\n\nResult\u27e838\u27e9\n    Alias for a `Result` with the error type `serde_cbor::Error`.\n",
            "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://docs.rs/serde_cbor/latest/settings.html: Settings\n\u27e82\u27e9 https://docs.rs/serde_cbor/latest/help.html: Help\n\u27e83\u27e9 https://docs.rs/serde_cbor/latest/src/serde_cbor/lib.rs.html#1-369: Source\n\u27e84\u27e9 https://docs.rs/serde_cbor/latest/serde_cbor/#usage: \u00a7\n\u27e85\u27e9 https://docs.rs/serde_cbor/latest/serde_cbor/#type-based-serialization-and-deserialization: \u00a7\n\u27e86\u27e9 https://docs.rs/serde_cbor/latest/serde_cbor/#packed-encoding: \u00a7\n\u27e87\u27e9 https://serde.rs/enum-representations.html: externally tagged enum format\n\u27e88\u27e9 https://docs.rs/serde_cbor/latest/serde_cbor/#self-describing-documents: \u00a7\n\u27e89\u27e9 https://docs.rs/serde_cbor/latest/serde_cbor/#examples: \u00a7\n\u27e810\u27e9 https://docs.rs/serde_cbor/latest/serde_cbor/#no-std-support: \u00a7\n\u27e811\u27e9 https://docs.rs/serde_cbor/latest/serde_cbor/fn.from_reader.html: fn serde_cbor::from_reader - from_reader\n\u27e812\u27e9 https://docs.rs/serde_cbor/latest/serde_cbor/fn.from_slice.html: fn serde_cbor::from_slice - from_slice\n\u27e813\u27e9 https://docs.rs/serde_cbor/latest/serde_cbor/fn.to_vec.html: fn serde_cbor::to_vec - to_vec\n\u27e814\u27e9 https://docs.rs/serde_cbor/latest/serde_cbor/fn.to_writer.html: fn serde_cbor::to_writer - to_writer\n\u27e815\u27e9 https://doc.rust-lang.org/alloc/: `alloc` library\n\u27e816\u27e9 https://docs.rs/serde_cbor/latest/serde_cbor/#limitations: \u00a7\n\u27e817\u27e9 https://tools.ietf.org/html/rfc7049#section-2.4.4: Tags\n\u27e818\u27e9 https://github.com/pyfisch/cbor/issues/3: #3\n\u27e819\u27e9 https://tools.ietf.org/html/rfc7049#section-3.5: simple values\n\u27e820\u27e9 https://github.com/pyfisch/cbor/issues/86: #86\n\u27e821\u27e9 https://doc.rust-lang.org/std/primitive.u128.html: 128-bit integers\n\u27e822\u27e9 https://github.com/pyfisch/cbor/issues/77: #77\n\u27e823\u27e9 https://docs.rs/serde_cbor/latest/serde_cbor/#modules: \u00a7\n\u27e824\u27e9 https://docs.rs/serde_cbor/latest/serde_cbor/de/index.html: mod serde_cbor::de - de\n\u27e825\u27e9 https://docs.rs/serde_cbor/latest/serde_cbor/error/index.html: mod serde_cbor::error - error\n\u27e826\u27e9 https://docs.rs/serde_cbor/latest/serde_cbor/ser/index.html: mod serde_cbor::ser - ser\n\u27e827\u27e9 https://docs.rs/serde_cbor/latest/serde_cbor/tags/index.html: mod serde_cbor::tags - tags\n\u27e828\u27e9 https://docs.rs/serde_cbor/latest/serde_cbor/value/index.html: mod serde_cbor::value - value\n\u27e829\u27e9 https://docs.rs/serde_cbor/latest/serde_cbor/#structs: \u00a7\n\u27e830\u27e9 https://docs.rs/serde_cbor/latest/serde_cbor/struct.Deserializer.html: struct serde_cbor::Deserializer - Deserializer\n\u27e831\u27e9 https://docs.rs/serde_cbor/latest/serde_cbor/struct.Error.html: struct serde_cbor::Error - Error\n\u27e832\u27e9 https://docs.rs/serde_cbor/latest/serde_cbor/struct.Serializer.html: struct serde_cbor::Serializer - Serializer\n\u27e833\u27e9 https://docs.rs/serde_cbor/latest/serde_cbor/struct.StreamDeserializer.html: struct serde_cbor::StreamDeserializer - StreamDeserializer\n\u27e834\u27e9 https://docs.rs/serde_cbor/latest/serde_cbor/#enums: \u00a7\n\u27e835\u27e9 https://docs.rs/serde_cbor/latest/serde_cbor/enum.Value.html: enum serde_cbor::Value - Value\n\u27e836\u27e9 https://docs.rs/serde_cbor/latest/serde_cbor/#functions: \u00a7\n\u27e837\u27e9 https://docs.rs/serde_cbor/latest/serde_cbor/#types: \u00a7\n\u27e838\u27e9 https://docs.rs/serde_cbor/latest/serde_cbor/type.Result.html: type serde_cbor::Result - Result\n",
            "fit_markdown": "",
            "fit_html": ""
          },
          "downloads": 0,
          "github_stars": 0,
          "dependencies": [],
          "features": {},
          "code_snippets": [],
          "readme_sections": {},
          "librs_downloads": null,
          "source": "crates.io",
          "enhanced_scraping": {},
          "enhanced_features": [],
          "enhanced_dependencies": []
        },
        "enriched_crate": {
          "name": "serde_cbor",
          "version": "0.11.2",
          "description": "ALLOW: Positive community sentiment",
          "repository": "",
          "keywords": [],
          "categories": [],
          "readme": {
            "raw_markdown": "[](https://docs.rs/serde_cbor/latest/serde_cbor/all.html \"show sidebar\")\n# Crate serde_cborCopy item path\n[Settings](https://docs.rs/serde_cbor/latest/settings.html)\n[Help](https://docs.rs/serde_cbor/latest/help.html)\nSummary[Source](https://docs.rs/serde_cbor/latest/src/serde_cbor/lib.rs.html#1-369)\nExpand description\nCBOR and serialization.\n## [\u00a7](https://docs.rs/serde_cbor/latest/serde_cbor/#usage)Usage\nSerde CBOR supports Rust 1.40 and up. Add this to your `Cargo.toml`:\n```\n[dependencies]\nserde_cbor = \"0.10\"\n```\n\nStoring and loading Rust types is easy and requires only minimal modifications to the program code.\n```\nuse serde_derive::{Deserialize, Serialize};\nuse std::error::Error;\nuse std::fs::File;\n// Types annotated with `Serialize` can be stored as CBOR.\n// To be able to load them again add `Deserialize`.\n#[derive(Debug, Serialize, Deserialize)]\nstruct Mascot {\n  name: String,\n  species: String,\n  year_of_birth: u32,\n}\nfn main() -> Result<(), Box<dyn Error>> {\n  let ferris = Mascot {\n    name: \"Ferris\".to_owned(),\n    species: \"crab\".to_owned(),\n    year_of_birth: 2015,\n  };\n  let ferris_file = File::create(\"examples/ferris.cbor\")?;\n  // Write Ferris to the given file.\n  // Instead of a file you can use any type that implements `io::Write`\n  // like a HTTP body, database connection etc.\n  serde_cbor::to_writer(ferris_file, &ferris)?;\n  let tux_file = File::open(\"examples/tux.cbor\")?;\n  // Load Tux from a file.\n  // Serde CBOR performs roundtrip serialization meaning that\n  // the data will not change in any way.\n  let tux: Mascot = serde_cbor::from_reader(tux_file)?;\n  println!(\"{:?}\", tux);\n  // prints: Mascot { name: \"Tux\", species: \"penguin\", year_of_birth: 1996 }\n  Ok(())\n}\n```\n\nThere are a lot of options available to customize the format. To operate on untyped CBOR values have a look at the `Value` type.\n## [\u00a7](https://docs.rs/serde_cbor/latest/serde_cbor/#type-based-serialization-and-deserialization)Type-based Serialization and Deserialization\nSerde provides a mechanism for low boilerplate serialization & deserialization of values to and from CBOR via the serialization API. To be able to serialize a piece of data, it must implement the `serde::Serialize` trait. To be able to deserialize a piece of data, it must implement the `serde::Deserialize` trait. Serde provides an annotation to automatically generate the code for these traits: `#[derive(Serialize, Deserialize)]`.\nThe CBOR API also provides an enum `serde_cbor::Value`.\n## [\u00a7](https://docs.rs/serde_cbor/latest/serde_cbor/#packed-encoding)Packed Encoding\nWhen serializing structs or enums in CBOR the keys or enum variant names will be serialized as string keys to a map. Especially in embedded environments this can increase the file size too much. In packed encoding all struct keys, as well as any enum variant that has no data, will be serialized as variable sized integers. The first 24 entries in any struct consume only a single byte! Packed encoding uses serde\u2019s preferred [externally tagged enum format](https://serde.rs/enum-representations.html) and therefore serializes enum variant names as string keys when that variant contains data. So, in the packed encoding example, `FirstVariant` encodes to a single byte, but encoding `SecondVariant` requires 16 bytes.\nTo serialize a document in this format use `Serializer::new(writer).packed_format()` or the shorthand `ser::to_vec_packed`. The deserialization works without any changes.\nIf you would like to omit the enum variant encoding for all variants, including ones that contain data, you can add `legacy_enums()` in addition to `packed_format()`, as can seen in the Serialize using minimal encoding example.\n## [\u00a7](https://docs.rs/serde_cbor/latest/serde_cbor/#self-describing-documents)Self describing documents\nIn some contexts different formats are used but there is no way to declare the format used out of band. For this reason CBOR has a magic number that may be added before any document. Self describing documents are created with `serializer.self_describe()`.\n## [\u00a7](https://docs.rs/serde_cbor/latest/serde_cbor/#examples)Examples\nRead a CBOR value that is known to be a map of string keys to string values and print it.\n```\nuse std::collections::BTreeMap;\nuse serde_cbor::from_slice;\nlet slice = b\"\\xa5aaaAabaBacaCadaDaeaE\";\nlet value: BTreeMap<String, String> = from_slice(slice).unwrap();\nprintln!(\"{:?}\", value); // {\"e\": \"E\", \"d\": \"D\", \"a\": \"A\", \"c\": \"C\", \"b\": \"B\"}\n```\n\nRead a general CBOR value with an unknown content.\n```\nuse serde_cbor::from_slice;\nuse serde_cbor::value::Value;\nlet slice = b\"\\x82\\x01\\xa1aaab\";\nlet value: Value = from_slice(slice).unwrap();\nprintln!(\"{:?}\", value); // Array([U64(1), Object({String(\"a\"): String(\"b\")})])\n```\n\nSerialize an object.\n```\nuse std::collections::BTreeMap;\nuse serde_cbor::to_vec;\nlet mut programming_languages = BTreeMap::new();\nprogramming_languages.insert(\"rust\", vec![\"safe\", \"concurrent\", \"fast\"]);\nprogramming_languages.insert(\"python\", vec![\"powerful\", \"friendly\", \"open\"]);\nprogramming_languages.insert(\"js\", vec![\"lightweight\", \"interpreted\", \"object-oriented\"]);\nlet encoded = to_vec(&programming_languages);\nassert_eq!(encoded.unwrap().len(), 103);\n```\n\nDeserializing data in the middle of a slice\n```\nuse serde_cbor::Deserializer;\nlet data: Vec<u8> = vec![\n  0x66, 0x66, 0x6f, 0x6f, 0x62, 0x61, 0x72, 0x66, 0x66, 0x6f, 0x6f, 0x62,\n  0x61, 0x72,\n];\nlet mut deserializer = Deserializer::from_slice(&data);\nlet value: &str = serde::de::Deserialize::deserialize(&mut deserializer)\n  .unwrap();\nlet rest = &data[deserializer.byte_offset()..];\nassert_eq!(value, \"foobar\");\nassert_eq!(rest, &[0x66, 0x66, 0x6f, 0x6f, 0x62, 0x61, 0x72]);\n```\n\nSerialize using packed encoding\n```\nuse serde_derive::{Deserialize, Serialize};\nuse serde_cbor::ser::to_vec_packed;\nuse WithTwoVariants::*;\n#[derive(Debug, Serialize, Deserialize)]\nenum WithTwoVariants {\n  FirstVariant,\n  SecondVariant(u8),\n}\nlet cbor = to_vec_packed(&FirstVariant).unwrap();\nassert_eq!(cbor.len(), 1);\nlet cbor = to_vec_packed(&SecondVariant(0)).unwrap();\nassert_eq!(cbor.len(), 16); // Includes 13 bytes of \"SecondVariant\"\n```\n\nSerialize using minimal encoding\n```\nuse serde_derive::{Deserialize, Serialize};\nuse serde_cbor::{Result, Serializer, ser::{self, IoWrite}};\nuse WithTwoVariants::*;\nfn to_vec_minimal<T>(value: &T) -> Result<Vec<u8>>\nwhere\n  T: serde::Serialize,\n{\n  let mut vec = Vec::new();\n  value.serialize(&mut Serializer::new(&mut IoWrite::new(&mut vec)).packed_format().legacy_enums())?;\n  Ok(vec)\n}\n#[derive(Debug, Serialize, Deserialize)]\nenum WithTwoVariants {\n  FirstVariant,\n  SecondVariant(u8),\n}\nlet cbor = to_vec_minimal(&FirstVariant).unwrap();\nassert_eq!(cbor.len(), 1);\nlet cbor = to_vec_minimal(&SecondVariant(0)).unwrap();\nassert_eq!(cbor.len(), 3);\n```\n\n## [\u00a7](https://docs.rs/serde_cbor/latest/serde_cbor/#no-std-support)`no-std` support\nSerde CBOR supports building in a `no_std` context, use the following lines in your `Cargo.toml` dependencies:\n```\n[dependencies]\nserde = { version = \"1.0\", default-features = false }\nserde_cbor = { version = \"0.10\", default-features = false }\n```\n\nWithout the `std` feature the functions [from_reader](https://docs.rs/serde_cbor/latest/serde_cbor/fn.from_reader.html \"fn serde_cbor::from_reader\"), [from_slice](https://docs.rs/serde_cbor/latest/serde_cbor/fn.from_slice.html \"fn serde_cbor::from_slice\"), [to_vec](https://docs.rs/serde_cbor/latest/serde_cbor/fn.to_vec.html \"fn serde_cbor::to_vec\"), and [to_writer](https://docs.rs/serde_cbor/latest/serde_cbor/fn.to_writer.html \"fn serde_cbor::to_writer\") are not exported. To export [from_slice](https://docs.rs/serde_cbor/latest/serde_cbor/fn.from_slice.html \"fn serde_cbor::from_slice\") and [to_vec](https://docs.rs/serde_cbor/latest/serde_cbor/fn.to_vec.html \"fn serde_cbor::to_vec\") enable the `alloc` feature. The `alloc` feature uses the [`alloc` library](https://doc.rust-lang.org/alloc/) and requires at least version 1.36.0 of Rust.\n_Note_ : to use derive macros in serde you will need to declare `serde` dependency like so:\n```\nserde = { version = \"1.0\", default-features = false, features = [\"derive\"] }\n```\n\nSerialize an object with `no_std` and without `alloc`.\n```\nuse serde::Serialize;\nuse serde_cbor::Serializer;\nuse serde_cbor::ser::SliceWrite;\n#[derive(Serialize)]\nstruct User {\n  user_id: u32,\n  password_hash: [u8; 4],\n}\nlet mut buf = [0u8; 100];\nlet writer = SliceWrite::new(&mut buf[..]);\nlet mut ser = Serializer::new(writer);\nlet user = User {\n  user_id: 42,\n  password_hash: [1, 2, 3, 4],\n};\nuser.serialize(&mut ser)?;\nlet writer = ser.into_inner();\nlet size = writer.bytes_written();\nlet expected = [\n  0xa2, 0x67, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x2a, 0x6d,\n  0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x5f, 0x68, 0x61, 0x73,\n  0x68, 0x84, 0x1, 0x2, 0x3, 0x4\n];\nassert_eq!(&buf[..size], expected);\n```\n\nDeserialize an object.\n```\n#[derive(Debug, PartialEq, Deserialize)]\nstruct User {\n  user_id: u32,\n  password_hash: [u8; 4],\n}\nlet value = [\n  0xa2, 0x67, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x2a, 0x6d,\n  0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x5f, 0x68, 0x61, 0x73,\n  0x68, 0x84, 0x1, 0x2, 0x3, 0x4\n];\n// from_slice_with_scratch will not alter input data, use it whenever you\n// borrow from somewhere else.\n// You will have to size your scratch according to the input data you\n// expect.\nuse serde_cbor::de::from_slice_with_scratch;\nlet mut scratch = [0u8; 32];\nlet user: User = from_slice_with_scratch(&value[..], &mut scratch)?;\nassert_eq!(user, User {\n  user_id: 42,\n  password_hash: [1, 2, 3, 4],\n});\nlet mut value = [\n  0xa2, 0x67, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x2a, 0x6d,\n  0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x5f, 0x68, 0x61, 0x73,\n  0x68, 0x84, 0x1, 0x2, 0x3, 0x4\n];\n// from_mut_slice will move data around the input slice, you may only use it\n// on data you may own or can modify.\nuse serde_cbor::de::from_mut_slice;\nlet user: User = from_mut_slice(&mut value[..])?;\nassert_eq!(user, User {\n  user_id: 42,\n  password_hash: [1, 2, 3, 4],\n});\n```\n\n## [\u00a7](https://docs.rs/serde_cbor/latest/serde_cbor/#limitations)Limitations\nWhile Serde CBOR strives to support all features of Serde and CBOR there are a few limitations.\n  * [Tags](https://tools.ietf.org/html/rfc7049#section-2.4.4) are ignored during deserialization and can\u2019t be emitted during serialization. This is because Serde has no concept of tagged values. See: [#3](https://github.com/pyfisch/cbor/issues/3)\n  * Unknown [simple values](https://tools.ietf.org/html/rfc7049#section-3.5) cause an `UnassignedCode` error. The simple values _False_ and _True_ are recognized and parsed as bool. _Null_ and _Undefined_ are both deserialized as _unit_. The _unit_ type is serialized as _Null_. See: [#86](https://github.com/pyfisch/cbor/issues/86)\n  * [128-bit integers](https://doc.rust-lang.org/std/primitive.u128.html) can\u2019t be directly encoded in CBOR. If you need them store them as a byte string. See: [#77](https://github.com/pyfisch/cbor/issues/77)\n\n\n## Modules[\u00a7](https://docs.rs/serde_cbor/latest/serde_cbor/#modules)\n\n[de](https://docs.rs/serde_cbor/latest/serde_cbor/de/index.html \"mod serde_cbor::de\")\n    Deserialization.\n\n[error](https://docs.rs/serde_cbor/latest/serde_cbor/error/index.html \"mod serde_cbor::error\")\n    When serializing or deserializing CBOR goes wrong.\n\n[ser](https://docs.rs/serde_cbor/latest/serde_cbor/ser/index.html \"mod serde_cbor::ser\")\n    Serialize a Rust data structure to CBOR data.\n\n[tags](https://docs.rs/serde_cbor/latest/serde_cbor/tags/index.html \"mod serde_cbor::tags\")\n    Support for cbor tags\n\n[value](https://docs.rs/serde_cbor/latest/serde_cbor/value/index.html \"mod serde_cbor::value\")\n    CBOR values, keys and serialization routines.\n## Structs[\u00a7](https://docs.rs/serde_cbor/latest/serde_cbor/#structs)\n\n[Deserializer](https://docs.rs/serde_cbor/latest/serde_cbor/struct.Deserializer.html \"struct serde_cbor::Deserializer\")\n    A Serde `Deserialize`r of CBOR data.\n\n[Error](https://docs.rs/serde_cbor/latest/serde_cbor/struct.Error.html \"struct serde_cbor::Error\")\n    This type represents all possible errors that can occur when serializing or deserializing CBOR data.\n\n[Serializer](https://docs.rs/serde_cbor/latest/serde_cbor/struct.Serializer.html \"struct serde_cbor::Serializer\")\n    A structure for serializing Rust values to CBOR.\n\n[StreamDeserializer](https://docs.rs/serde_cbor/latest/serde_cbor/struct.StreamDeserializer.html \"struct serde_cbor::StreamDeserializer\")\n    Iterator that deserializes a stream into multiple CBOR values.\n## Enums[\u00a7](https://docs.rs/serde_cbor/latest/serde_cbor/#enums)\n\n[Value](https://docs.rs/serde_cbor/latest/serde_cbor/enum.Value.html \"enum serde_cbor::Value\")\n    The `Value` enum, a loosely typed way of representing any valid CBOR value.\n## Functions[\u00a7](https://docs.rs/serde_cbor/latest/serde_cbor/#functions)\n\n[from_reader](https://docs.rs/serde_cbor/latest/serde_cbor/fn.from_reader.html \"fn serde_cbor::from_reader\")\n    Decodes a value from CBOR data in a reader.\n\n[from_slice](https://docs.rs/serde_cbor/latest/serde_cbor/fn.from_slice.html \"fn serde_cbor::from_slice\")\n    Decodes a value from CBOR data in a slice.\n\n[to_vec](https://docs.rs/serde_cbor/latest/serde_cbor/fn.to_vec.html \"fn serde_cbor::to_vec\")\n    Serializes a value to a vector.\n\n[to_writer](https://docs.rs/serde_cbor/latest/serde_cbor/fn.to_writer.html \"fn serde_cbor::to_writer\")\n    Serializes a value to a writer.\n## Type Aliases[\u00a7](https://docs.rs/serde_cbor/latest/serde_cbor/#types)\n\n[Result](https://docs.rs/serde_cbor/latest/serde_cbor/type.Result.html \"type serde_cbor::Result\")\n    Alias for a `Result` with the error type `serde_cbor::Error`.\n",
            "markdown_with_citations": "[](https://docs.rs/serde_cbor/latest/serde_cbor/all.html \"show sidebar\")\n# Crate serde_cborCopy item path\nSettings\u27e81\u27e9\nHelp\u27e82\u27e9\nSummarySource\u27e83\u27e9\nExpand description\nCBOR and serialization.\n## \u00a7\u27e84\u27e9Usage\nSerde CBOR supports Rust 1.40 and up. Add this to your `Cargo.toml`:\n```\n[dependencies]\nserde_cbor = \"0.10\"\n```\n\nStoring and loading Rust types is easy and requires only minimal modifications to the program code.\n```\nuse serde_derive::{Deserialize, Serialize};\nuse std::error::Error;\nuse std::fs::File;\n// Types annotated with `Serialize` can be stored as CBOR.\n// To be able to load them again add `Deserialize`.\n#[derive(Debug, Serialize, Deserialize)]\nstruct Mascot {\n  name: String,\n  species: String,\n  year_of_birth: u32,\n}\nfn main() -> Result<(), Box<dyn Error>> {\n  let ferris = Mascot {\n    name: \"Ferris\".to_owned(),\n    species: \"crab\".to_owned(),\n    year_of_birth: 2015,\n  };\n  let ferris_file = File::create(\"examples/ferris.cbor\")?;\n  // Write Ferris to the given file.\n  // Instead of a file you can use any type that implements `io::Write`\n  // like a HTTP body, database connection etc.\n  serde_cbor::to_writer(ferris_file, &ferris)?;\n  let tux_file = File::open(\"examples/tux.cbor\")?;\n  // Load Tux from a file.\n  // Serde CBOR performs roundtrip serialization meaning that\n  // the data will not change in any way.\n  let tux: Mascot = serde_cbor::from_reader(tux_file)?;\n  println!(\"{:?}\", tux);\n  // prints: Mascot { name: \"Tux\", species: \"penguin\", year_of_birth: 1996 }\n  Ok(())\n}\n```\n\nThere are a lot of options available to customize the format. To operate on untyped CBOR values have a look at the `Value` type.\n## \u00a7\u27e85\u27e9Type-based Serialization and Deserialization\nSerde provides a mechanism for low boilerplate serialization & deserialization of values to and from CBOR via the serialization API. To be able to serialize a piece of data, it must implement the `serde::Serialize` trait. To be able to deserialize a piece of data, it must implement the `serde::Deserialize` trait. Serde provides an annotation to automatically generate the code for these traits: `#[derive(Serialize, Deserialize)]`.\nThe CBOR API also provides an enum `serde_cbor::Value`.\n## \u00a7\u27e86\u27e9Packed Encoding\nWhen serializing structs or enums in CBOR the keys or enum variant names will be serialized as string keys to a map. Especially in embedded environments this can increase the file size too much. In packed encoding all struct keys, as well as any enum variant that has no data, will be serialized as variable sized integers. The first 24 entries in any struct consume only a single byte! Packed encoding uses serde\u2019s preferred externally tagged enum format\u27e87\u27e9 and therefore serializes enum variant names as string keys when that variant contains data. So, in the packed encoding example, `FirstVariant` encodes to a single byte, but encoding `SecondVariant` requires 16 bytes.\nTo serialize a document in this format use `Serializer::new(writer).packed_format()` or the shorthand `ser::to_vec_packed`. The deserialization works without any changes.\nIf you would like to omit the enum variant encoding for all variants, including ones that contain data, you can add `legacy_enums()` in addition to `packed_format()`, as can seen in the Serialize using minimal encoding example.\n## \u00a7\u27e88\u27e9Self describing documents\nIn some contexts different formats are used but there is no way to declare the format used out of band. For this reason CBOR has a magic number that may be added before any document. Self describing documents are created with `serializer.self_describe()`.\n## \u00a7\u27e89\u27e9Examples\nRead a CBOR value that is known to be a map of string keys to string values and print it.\n```\nuse std::collections::BTreeMap;\nuse serde_cbor::from_slice;\nlet slice = b\"\\xa5aaaAabaBacaCadaDaeaE\";\nlet value: BTreeMap<String, String> = from_slice(slice).unwrap();\nprintln!(\"{:?}\", value); // {\"e\": \"E\", \"d\": \"D\", \"a\": \"A\", \"c\": \"C\", \"b\": \"B\"}\n```\n\nRead a general CBOR value with an unknown content.\n```\nuse serde_cbor::from_slice;\nuse serde_cbor::value::Value;\nlet slice = b\"\\x82\\x01\\xa1aaab\";\nlet value: Value = from_slice(slice).unwrap();\nprintln!(\"{:?}\", value); // Array([U64(1), Object({String(\"a\"): String(\"b\")})])\n```\n\nSerialize an object.\n```\nuse std::collections::BTreeMap;\nuse serde_cbor::to_vec;\nlet mut programming_languages = BTreeMap::new();\nprogramming_languages.insert(\"rust\", vec![\"safe\", \"concurrent\", \"fast\"]);\nprogramming_languages.insert(\"python\", vec![\"powerful\", \"friendly\", \"open\"]);\nprogramming_languages.insert(\"js\", vec![\"lightweight\", \"interpreted\", \"object-oriented\"]);\nlet encoded = to_vec(&programming_languages);\nassert_eq!(encoded.unwrap().len(), 103);\n```\n\nDeserializing data in the middle of a slice\n```\nuse serde_cbor::Deserializer;\nlet data: Vec<u8> = vec![\n  0x66, 0x66, 0x6f, 0x6f, 0x62, 0x61, 0x72, 0x66, 0x66, 0x6f, 0x6f, 0x62,\n  0x61, 0x72,\n];\nlet mut deserializer = Deserializer::from_slice(&data);\nlet value: &str = serde::de::Deserialize::deserialize(&mut deserializer)\n  .unwrap();\nlet rest = &data[deserializer.byte_offset()..];\nassert_eq!(value, \"foobar\");\nassert_eq!(rest, &[0x66, 0x66, 0x6f, 0x6f, 0x62, 0x61, 0x72]);\n```\n\nSerialize using packed encoding\n```\nuse serde_derive::{Deserialize, Serialize};\nuse serde_cbor::ser::to_vec_packed;\nuse WithTwoVariants::*;\n#[derive(Debug, Serialize, Deserialize)]\nenum WithTwoVariants {\n  FirstVariant,\n  SecondVariant(u8),\n}\nlet cbor = to_vec_packed(&FirstVariant).unwrap();\nassert_eq!(cbor.len(), 1);\nlet cbor = to_vec_packed(&SecondVariant(0)).unwrap();\nassert_eq!(cbor.len(), 16); // Includes 13 bytes of \"SecondVariant\"\n```\n\nSerialize using minimal encoding\n```\nuse serde_derive::{Deserialize, Serialize};\nuse serde_cbor::{Result, Serializer, ser::{self, IoWrite}};\nuse WithTwoVariants::*;\nfn to_vec_minimal<T>(value: &T) -> Result<Vec<u8>>\nwhere\n  T: serde::Serialize,\n{\n  let mut vec = Vec::new();\n  value.serialize(&mut Serializer::new(&mut IoWrite::new(&mut vec)).packed_format().legacy_enums())?;\n  Ok(vec)\n}\n#[derive(Debug, Serialize, Deserialize)]\nenum WithTwoVariants {\n  FirstVariant,\n  SecondVariant(u8),\n}\nlet cbor = to_vec_minimal(&FirstVariant).unwrap();\nassert_eq!(cbor.len(), 1);\nlet cbor = to_vec_minimal(&SecondVariant(0)).unwrap();\nassert_eq!(cbor.len(), 3);\n```\n\n## \u00a7\u27e810\u27e9`no-std` support\nSerde CBOR supports building in a `no_std` context, use the following lines in your `Cargo.toml` dependencies:\n```\n[dependencies]\nserde = { version = \"1.0\", default-features = false }\nserde_cbor = { version = \"0.10\", default-features = false }\n```\n\nWithout the `std` feature the functions from_reader\u27e811\u27e9, from_slice\u27e812\u27e9, to_vec\u27e813\u27e9, and to_writer\u27e814\u27e9 are not exported. To export from_slice\u27e812\u27e9 and to_vec\u27e813\u27e9 enable the `alloc` feature. The `alloc` feature uses the `alloc` library\u27e815\u27e9 and requires at least version 1.36.0 of Rust.\n_Note_ : to use derive macros in serde you will need to declare `serde` dependency like so:\n```\nserde = { version = \"1.0\", default-features = false, features = [\"derive\"] }\n```\n\nSerialize an object with `no_std` and without `alloc`.\n```\nuse serde::Serialize;\nuse serde_cbor::Serializer;\nuse serde_cbor::ser::SliceWrite;\n#[derive(Serialize)]\nstruct User {\n  user_id: u32,\n  password_hash: [u8; 4],\n}\nlet mut buf = [0u8; 100];\nlet writer = SliceWrite::new(&mut buf[..]);\nlet mut ser = Serializer::new(writer);\nlet user = User {\n  user_id: 42,\n  password_hash: [1, 2, 3, 4],\n};\nuser.serialize(&mut ser)?;\nlet writer = ser.into_inner();\nlet size = writer.bytes_written();\nlet expected = [\n  0xa2, 0x67, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x2a, 0x6d,\n  0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x5f, 0x68, 0x61, 0x73,\n  0x68, 0x84, 0x1, 0x2, 0x3, 0x4\n];\nassert_eq!(&buf[..size], expected);\n```\n\nDeserialize an object.\n```\n#[derive(Debug, PartialEq, Deserialize)]\nstruct User {\n  user_id: u32,\n  password_hash: [u8; 4],\n}\nlet value = [\n  0xa2, 0x67, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x2a, 0x6d,\n  0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x5f, 0x68, 0x61, 0x73,\n  0x68, 0x84, 0x1, 0x2, 0x3, 0x4\n];\n// from_slice_with_scratch will not alter input data, use it whenever you\n// borrow from somewhere else.\n// You will have to size your scratch according to the input data you\n// expect.\nuse serde_cbor::de::from_slice_with_scratch;\nlet mut scratch = [0u8; 32];\nlet user: User = from_slice_with_scratch(&value[..], &mut scratch)?;\nassert_eq!(user, User {\n  user_id: 42,\n  password_hash: [1, 2, 3, 4],\n});\nlet mut value = [\n  0xa2, 0x67, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x2a, 0x6d,\n  0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x5f, 0x68, 0x61, 0x73,\n  0x68, 0x84, 0x1, 0x2, 0x3, 0x4\n];\n// from_mut_slice will move data around the input slice, you may only use it\n// on data you may own or can modify.\nuse serde_cbor::de::from_mut_slice;\nlet user: User = from_mut_slice(&mut value[..])?;\nassert_eq!(user, User {\n  user_id: 42,\n  password_hash: [1, 2, 3, 4],\n});\n```\n\n## \u00a7\u27e816\u27e9Limitations\nWhile Serde CBOR strives to support all features of Serde and CBOR there are a few limitations.\n  * Tags\u27e817\u27e9 are ignored during deserialization and can\u2019t be emitted during serialization. This is because Serde has no concept of tagged values. See: #3\u27e818\u27e9\n  * Unknown simple values\u27e819\u27e9 cause an `UnassignedCode` error. The simple values _False_ and _True_ are recognized and parsed as bool. _Null_ and _Undefined_ are both deserialized as _unit_. The _unit_ type is serialized as _Null_. See: #86\u27e820\u27e9\n  * 128-bit integers\u27e821\u27e9 can\u2019t be directly encoded in CBOR. If you need them store them as a byte string. See: #77\u27e822\u27e9\n\n\n## Modules\u00a7\u27e823\u27e9\n\nde\u27e824\u27e9\n    Deserialization.\n\nerror\u27e825\u27e9\n    When serializing or deserializing CBOR goes wrong.\n\nser\u27e826\u27e9\n    Serialize a Rust data structure to CBOR data.\n\ntags\u27e827\u27e9\n    Support for cbor tags\n\nvalue\u27e828\u27e9\n    CBOR values, keys and serialization routines.\n## Structs\u00a7\u27e829\u27e9\n\nDeserializer\u27e830\u27e9\n    A Serde `Deserialize`r of CBOR data.\n\nError\u27e831\u27e9\n    This type represents all possible errors that can occur when serializing or deserializing CBOR data.\n\nSerializer\u27e832\u27e9\n    A structure for serializing Rust values to CBOR.\n\nStreamDeserializer\u27e833\u27e9\n    Iterator that deserializes a stream into multiple CBOR values.\n## Enums\u00a7\u27e834\u27e9\n\nValue\u27e835\u27e9\n    The `Value` enum, a loosely typed way of representing any valid CBOR value.\n## Functions\u00a7\u27e836\u27e9\n\nfrom_reader\u27e811\u27e9\n    Decodes a value from CBOR data in a reader.\n\nfrom_slice\u27e812\u27e9\n    Decodes a value from CBOR data in a slice.\n\nto_vec\u27e813\u27e9\n    Serializes a value to a vector.\n\nto_writer\u27e814\u27e9\n    Serializes a value to a writer.\n## Type Aliases\u00a7\u27e837\u27e9\n\nResult\u27e838\u27e9\n    Alias for a `Result` with the error type `serde_cbor::Error`.\n",
            "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://docs.rs/serde_cbor/latest/settings.html: Settings\n\u27e82\u27e9 https://docs.rs/serde_cbor/latest/help.html: Help\n\u27e83\u27e9 https://docs.rs/serde_cbor/latest/src/serde_cbor/lib.rs.html#1-369: Source\n\u27e84\u27e9 https://docs.rs/serde_cbor/latest/serde_cbor/#usage: \u00a7\n\u27e85\u27e9 https://docs.rs/serde_cbor/latest/serde_cbor/#type-based-serialization-and-deserialization: \u00a7\n\u27e86\u27e9 https://docs.rs/serde_cbor/latest/serde_cbor/#packed-encoding: \u00a7\n\u27e87\u27e9 https://serde.rs/enum-representations.html: externally tagged enum format\n\u27e88\u27e9 https://docs.rs/serde_cbor/latest/serde_cbor/#self-describing-documents: \u00a7\n\u27e89\u27e9 https://docs.rs/serde_cbor/latest/serde_cbor/#examples: \u00a7\n\u27e810\u27e9 https://docs.rs/serde_cbor/latest/serde_cbor/#no-std-support: \u00a7\n\u27e811\u27e9 https://docs.rs/serde_cbor/latest/serde_cbor/fn.from_reader.html: fn serde_cbor::from_reader - from_reader\n\u27e812\u27e9 https://docs.rs/serde_cbor/latest/serde_cbor/fn.from_slice.html: fn serde_cbor::from_slice - from_slice\n\u27e813\u27e9 https://docs.rs/serde_cbor/latest/serde_cbor/fn.to_vec.html: fn serde_cbor::to_vec - to_vec\n\u27e814\u27e9 https://docs.rs/serde_cbor/latest/serde_cbor/fn.to_writer.html: fn serde_cbor::to_writer - to_writer\n\u27e815\u27e9 https://doc.rust-lang.org/alloc/: `alloc` library\n\u27e816\u27e9 https://docs.rs/serde_cbor/latest/serde_cbor/#limitations: \u00a7\n\u27e817\u27e9 https://tools.ietf.org/html/rfc7049#section-2.4.4: Tags\n\u27e818\u27e9 https://github.com/pyfisch/cbor/issues/3: #3\n\u27e819\u27e9 https://tools.ietf.org/html/rfc7049#section-3.5: simple values\n\u27e820\u27e9 https://github.com/pyfisch/cbor/issues/86: #86\n\u27e821\u27e9 https://doc.rust-lang.org/std/primitive.u128.html: 128-bit integers\n\u27e822\u27e9 https://github.com/pyfisch/cbor/issues/77: #77\n\u27e823\u27e9 https://docs.rs/serde_cbor/latest/serde_cbor/#modules: \u00a7\n\u27e824\u27e9 https://docs.rs/serde_cbor/latest/serde_cbor/de/index.html: mod serde_cbor::de - de\n\u27e825\u27e9 https://docs.rs/serde_cbor/latest/serde_cbor/error/index.html: mod serde_cbor::error - error\n\u27e826\u27e9 https://docs.rs/serde_cbor/latest/serde_cbor/ser/index.html: mod serde_cbor::ser - ser\n\u27e827\u27e9 https://docs.rs/serde_cbor/latest/serde_cbor/tags/index.html: mod serde_cbor::tags - tags\n\u27e828\u27e9 https://docs.rs/serde_cbor/latest/serde_cbor/value/index.html: mod serde_cbor::value - value\n\u27e829\u27e9 https://docs.rs/serde_cbor/latest/serde_cbor/#structs: \u00a7\n\u27e830\u27e9 https://docs.rs/serde_cbor/latest/serde_cbor/struct.Deserializer.html: struct serde_cbor::Deserializer - Deserializer\n\u27e831\u27e9 https://docs.rs/serde_cbor/latest/serde_cbor/struct.Error.html: struct serde_cbor::Error - Error\n\u27e832\u27e9 https://docs.rs/serde_cbor/latest/serde_cbor/struct.Serializer.html: struct serde_cbor::Serializer - Serializer\n\u27e833\u27e9 https://docs.rs/serde_cbor/latest/serde_cbor/struct.StreamDeserializer.html: struct serde_cbor::StreamDeserializer - StreamDeserializer\n\u27e834\u27e9 https://docs.rs/serde_cbor/latest/serde_cbor/#enums: \u00a7\n\u27e835\u27e9 https://docs.rs/serde_cbor/latest/serde_cbor/enum.Value.html: enum serde_cbor::Value - Value\n\u27e836\u27e9 https://docs.rs/serde_cbor/latest/serde_cbor/#functions: \u00a7\n\u27e837\u27e9 https://docs.rs/serde_cbor/latest/serde_cbor/#types: \u00a7\n\u27e838\u27e9 https://docs.rs/serde_cbor/latest/serde_cbor/type.Result.html: type serde_cbor::Result - Result\n",
            "fit_markdown": "",
            "fit_html": ""
          },
          "downloads": 0,
          "github_stars": 0,
          "dependencies": [],
          "features": {},
          "code_snippets": [],
          "readme_sections": {},
          "librs_downloads": null,
          "source": "crates.io",
          "enhanced_scraping": {},
          "enhanced_features": [],
          "enhanced_dependencies": [],
          "readme_summary": "The `serde_cbor` crate provides efficient serialization and deserialization of Rust data structures to and from the CBOR (Concise Binary Object Representation) format using Serde. It supports type-based serialization, packed encoding for reduced size, self-describing documents, and untyped CBOR manipulation via the `Value` type. Additionally, it offers `no_std` support for embedded environments and customizable encoding options.",
          "feature_summary": null,
          "use_case": "Serialization",
          "score": 7.0,
          "factual_counterfactual": "### Pair 1: Serialization and Deserialization\n\u2705 **Factual:** Serde CBOR supports type-based serialization and deserialization, allowing Rust types that implement `serde::Serialize` and `serde::Deserialize` to be easily converted to and from CBOR format.  \n\u274c **Counterfactual:** Serde CBOR requires manual implementation of serialization and deserialization traits for all Rust types, as it does not support `#[derive(Serialize, Deserialize)]`.\n\n---\n\n### Pair 2: Packed Encoding\n\u2705 **Factual:** Serde CBOR provides a packed encoding mode that minimizes the size of serialized data by using variable-sized integers for struct keys and certain enum variants, which is particularly useful in embedded systems.  \n\u274c **Counterfactual:** Serde CBOR's packed encoding mode serializes all struct keys and enum variants as fixed-size integers, leading to larger file sizes in embedded environments.\n\n---\n\n### Pair 3: Self-Describing Documents\n\u2705 **Factual:** Serde CBOR supports self-describing documents by including a CBOR-specific magic number at the beginning of the serialized data, enabling format identification without external metadata.  \n\u274c **Counterfactual:** Serde CBOR does not support self-describing documents, requiring external metadata to identify the format of serialized data.",
          "source_analysis": null,
          "user_behavior": null,
          "security": null
        }
      },
      "irl_score": 8.6,
      "execution_id": "exec-d32ebefd-b579cfe2-1751259189",
      "timestamp": "2025-06-30T04:53:09.639980+00:00",
      "canon_version": "1.3.0"
    },
    "rule_zero_compliant": true
  }
]