[
  {
    "execution_id": "exec-7ce54cba-8e949f09-1751266621",
    "timestamp": "2025-06-30T06:57:01.789243+00:00",
    "sacred_chain": {
      "input_data": "websocket",
      "context_sources": [
        "crates.io",
        "github.com",
        "lib.rs",
        "docs.rs"
      ],
      "reasoning_steps": [
        "Input canonicalized: 'websocket' -> 'websocket'",
        "Context gathered from 4 validated sources",
        "Metadata extracted: 4 fields",
        "Documentation analyzed: quality 7.0",
        "Sentiment analyzed: positive",
        "Ecosystem analyzed: utilities",
        "Quality score synthesized: 7.50",
        "Trust decision: DEFER - Insufficient data for decision",
        "IRL confidence: 8.600"
      ],
      "suggestion": "ALLOW: Positive community sentiment",
      "verdict": "DEFER",
      "audit_info": {
        "metadata": {
          "name": "websocket",
          "type": "rust_crate",
          "source": "manual_input",
          "extraction_method": "irl_engine"
        },
        "sentiment": {
          "quality_score": 7.0,
          "completeness": 0.8,
          "examples_present": true,
          "api_documented": true
        },
        "ecosystem": {
          "overall": "positive",
          "positive_mentions": 10,
          "negative_mentions": 2,
          "neutral_mentions": 5,
          "total_mentions": 17
        },
        "quality_score": 7.5,
        "verdict_reason": "Insufficient data for decision",
        "sanitized_documentation": {
          "crates_io": {
            "url": "https://crates.io/crates/websocket",
            "title": "websocket v0.27.1",
            "content": {
              "raw_markdown": "#  websocket v0.27.1\n[deprecated] A WebSocket (RFC6455) library for Rust. \n  * [ #rfc6455 ](https://crates.io/keywords/rfc6455)\n  * [ #tokio ](https://crates.io/keywords/tokio)\n  * [ #websockets ](https://crates.io/keywords/websockets)\n  * [ #websocket ](https://crates.io/keywords/websocket)\n  * [ #async ](https://crates.io/keywords/async)\n\n\n  * [ Readme ](https://crates.io/crates/websocket)\n  * [ 79 Versions ](https://crates.io/crates/websocket/versions)\n  * [ Dependencies ](https://crates.io/crates/websocket/dependencies)\n  * [ Dependents ](https://crates.io/crates/websocket/reverse_dependencies)\n\n\n## Metadata\nabout 1 year ago \n2018 edition \n[ MIT ](https://choosealicense.com/licenses/mit)\n60.9 KiB \n## Install\nRun the following Cargo command in your project directory:\ncargo add websocket\nOr add the following line to your Cargo.toml:\nwebsocket = \"0.27.1\"\n## Documentation\n[ docs.rs/websocket ](https://docs.rs/websocket/)\n## Repository\n[ github.com/websockets-rs/rust-websocket ](https://github.com/websockets-rs/rust-websocket)\n## Owners\n## Categories\n  * [Asynchronous](https://crates.io/categories/asynchronous)\n  * [Network programming](https://crates.io/categories/network-programming)\n  * [Web programming](https://crates.io/categories/web-programming)\n  * [WebSocket](https://crates.io/categories/web-programming::websocket)\n\n\n[ Report crate ](https://crates.io/support?crate=websocket&inquire=crate-violation)\n### Stats Overview\n2,047,212 Downloads all time\n79 Versions published\n#### Downloads over the last 90 days\nDisplay as \nStacked \n  * Stacked \n  * Unstacked \n\n\nLoading\u2026\n",
              "markdown_with_citations": "#  websocket v0.27.1\n[deprecated] A WebSocket (RFC6455) library for Rust. \n  *  #rfc6455 \u27e81\u27e9\n  *  #tokio \u27e82\u27e9\n  *  #websockets \u27e83\u27e9\n  *  #websocket \u27e84\u27e9\n  *  #async \u27e85\u27e9\n\n\n  *  Readme \u27e86\u27e9\n  *  79 Versions \u27e87\u27e9\n  *  Dependencies \u27e88\u27e9\n  *  Dependents \u27e89\u27e9\n\n\n## Metadata\nabout 1 year ago \n2018 edition \n MIT \u27e810\u27e9\n60.9 KiB \n## Install\nRun the following Cargo command in your project directory:\ncargo add websocket\nOr add the following line to your Cargo.toml:\nwebsocket = \"0.27.1\"\n## Documentation\n docs.rs/websocket \u27e811\u27e9\n## Repository\n github.com/websockets-rs/rust-websocket \u27e812\u27e9\n## Owners\n## Categories\n  * Asynchronous\u27e813\u27e9\n  * Network programming\u27e814\u27e9\n  * Web programming\u27e815\u27e9\n  * WebSocket\u27e816\u27e9\n\n\n Report crate \u27e817\u27e9\n### Stats Overview\n2,047,212 Downloads all time\n79 Versions published\n#### Downloads over the last 90 days\nDisplay as \nStacked \n  * Stacked \n  * Unstacked \n\n\nLoading\u2026\n",
              "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://crates.io/keywords/rfc6455:  #rfc6455 \n\u27e82\u27e9 https://crates.io/keywords/tokio:  #tokio \n\u27e83\u27e9 https://crates.io/keywords/websockets:  #websockets \n\u27e84\u27e9 https://crates.io/keywords/websocket:  #websocket \n\u27e85\u27e9 https://crates.io/keywords/async:  #async \n\u27e86\u27e9 https://crates.io/crates/websocket:  Readme \n\u27e87\u27e9 https://crates.io/crates/websocket/versions:  79 Versions \n\u27e88\u27e9 https://crates.io/crates/websocket/dependencies:  Dependencies \n\u27e89\u27e9 https://crates.io/crates/websocket/reverse_dependencies:  Dependents \n\u27e810\u27e9 https://choosealicense.com/licenses/mit:  MIT \n\u27e811\u27e9 https://docs.rs/websocket/:  docs.rs/websocket \n\u27e812\u27e9 https://github.com/websockets-rs/rust-websocket:  github.com/websockets-rs/rust-websocket \n\u27e813\u27e9 https://crates.io/categories/asynchronous: Asynchronous\n\u27e814\u27e9 https://crates.io/categories/network-programming: Network programming\n\u27e815\u27e9 https://crates.io/categories/web-programming: Web programming\n\u27e816\u27e9 https://crates.io/categories/web-programming::websocket: WebSocket\n\u27e817\u27e9 https://crates.io/support?crate=websocket&inquire=crate-violation:  Report crate \n",
              "fit_markdown": "",
              "fit_html": ""
            },
            "structured_data": {},
            "quality_score": 3.0,
            "extraction_method": "crawl4ai",
            "error": null,
            "metadata": {
              "doc_type": "docs",
              "content_length": 1598,
              "has_structured_data": false,
              "crawl_success": true
            },
            "timestamp": "120411.8317594"
          },
          "docs_rs": {
            "url": "https://docs.rs/websocket",
            "title": "Crate websocketCopy item path",
            "content": {
              "raw_markdown": "[](https://docs.rs/websocket/latest/websocket/all.html \"show sidebar\")\n# Crate websocketCopy item path\n[Settings](https://docs.rs/websocket/latest/settings.html)\n[Help](https://docs.rs/websocket/latest/help.html)\nSummary[Source](https://docs.rs/websocket/latest/src/websocket/lib.rs.html#1-164)\nExpand description\nRust-WebSocket is a WebSocket (RFC6455) library written in Rust.\n## [\u00a7](https://docs.rs/websocket/latest/websocket/#synchronous-and-asynchronous)Synchronous and Asynchronous\nThis crate has both async and sync implementations of websockets, you are free to choose which one you would like to use by switching on the `async` or `sync` features for this crate. By default both are switched on since they do not conflict with each other.\nYou\u2019ll find many modules with `::sync` and `::async` submodules that separate these behaviours. Since it gets tedious to add these on when appropriate, a top-level convenience module called `websocket::sync` and `websocket::async` has been added that groups all the sync and async stuff, respectively.\n## [\u00a7](https://docs.rs/websocket/latest/websocket/#clients)Clients\nTo make a client use the `ClientBuilder` struct, this builder has methods for creating both synchronous and asynchronous clients.\n## [\u00a7](https://docs.rs/websocket/latest/websocket/#servers)Servers\nWebSocket servers act similarly to the `TcpListener`, and listen for connections. See the `Server` struct documentation for more information. The `bind()` and `bind_secure()` functions will bind the server to the given `SocketAddr`.\n## [\u00a7](https://docs.rs/websocket/latest/websocket/#extending-rust-websocket)Extending Rust-WebSocket\nThe `ws` module contains the traits and functions used by Rust-WebSocket at a lower level. Their usage is explained in the module documentation.\n## Re-exports[\u00a7](https://docs.rs/websocket/latest/websocket/#reexports)\n\n`pub extern crate futures[](https://docs.rs/futures/0.1.31/x86_64-unknown-linux-gnu/futures/index.html \"mod futures\");`\n\n\n`pub extern crate native_tls[](https://docs.rs/native-tls/0.2.14/x86_64-unknown-linux-gnu/native_tls/index.html \"mod native_tls\");`\n\n\n`pub extern crate url[](https://docs.rs/url/1.7.2/x86_64-unknown-linux-gnu/url/index.html \"mod url\");`\n\n\n`pub extern crate websocket_base[](https://docs.rs/websocket-base/0.26.5/x86_64-unknown-linux-gnu/websocket_base/index.html \"mod websocket_base\");`\n\n\n`pub use self::client::builder::ClientBuilder[](https://docs.rs/websocket/latest/websocket/client/builder/struct.ClientBuilder.html \"struct websocket::client::builder::ClientBuilder\");`\n\n\n`pub use self::result::WebSocketResult[](https://docs.rs/websocket/latest/websocket/result/type.WebSocketResult.html \"type websocket::result::WebSocketResult\");`\n\n## Modules[\u00a7](https://docs.rs/websocket/latest/websocket/#modules)\n\n[async](https://docs.rs/websocket/latest/websocket/async/index.html \"mod websocket::async\")\n    A collection of handy asynchronous-only parts of the crate.\n\n[client](https://docs.rs/websocket/latest/websocket/client/index.html \"mod websocket::client\")\n    Build and use asynchronously or synchronous websocket clients.\n\n[codec](https://docs.rs/websocket/latest/websocket/codec/index.html \"mod websocket::codec\")\n    Useful `Codec` types for asynchronously encoding and decoding messages.\n\n[dataframe](https://docs.rs/websocket/latest/websocket/dataframe/index.html \"mod websocket::dataframe\")\n    Module containing the default implementation of data frames.\n\n[header](https://docs.rs/websocket/latest/websocket/header/index.html \"mod websocket::header\")\n    Structs representing headers relevant in a WebSocket context.\n\n[message](https://docs.rs/websocket/latest/websocket/message/index.html \"mod websocket::message\")\n    Module containing the default implementation for messages.\n\n[receiver](https://docs.rs/websocket/latest/websocket/receiver/index.html \"mod websocket::receiver\")\n    The default implementation of a WebSocket Receiver.\n\n[result](https://docs.rs/websocket/latest/websocket/result/index.html \"mod websocket::result\")\n    The result type used within Rust-WebSocket\n\n[sender](https://docs.rs/websocket/latest/websocket/sender/index.html \"mod websocket::sender\")\n    The default implementation of a WebSocket Sender.\n\n[server](https://docs.rs/websocket/latest/websocket/server/index.html \"mod websocket::server\")\n    Provides an implementation of a WebSocket server\n\n[stream](https://docs.rs/websocket/latest/websocket/stream/index.html \"mod websocket::stream\")\n    Provides the default stream type for WebSocket connections.\n\n[sync](https://docs.rs/websocket/latest/websocket/sync/index.html \"mod websocket::sync\")\n    A collection of handy synchronous-only parts of the crate.\n\n[ws](https://docs.rs/websocket/latest/websocket/ws/index.html \"mod websocket::ws\")\n    A module containing the traits and structs that lower layer of Rust-WebSocket is based on.\n## Structs[\u00a7](https://docs.rs/websocket/latest/websocket/#structs)\n\n[CloseData](https://docs.rs/websocket/latest/websocket/struct.CloseData.html \"struct websocket::CloseData\")\n    Represents data contained in a Close message\n\n[Message](https://docs.rs/websocket/latest/websocket/struct.Message.html \"struct websocket::Message\")\n    Represents a WebSocket message.\n## Enums[\u00a7](https://docs.rs/websocket/latest/websocket/#enums)\n\n[OwnedMessage](https://docs.rs/websocket/latest/websocket/enum.OwnedMessage.html \"enum websocket::OwnedMessage\")\n    Represents an owned WebSocket message.\n\n[WebSocketError](https://docs.rs/websocket/latest/websocket/enum.WebSocketError.html \"enum websocket::WebSocketError\")\n    Represents a WebSocket error\n",
              "markdown_with_citations": "[](https://docs.rs/websocket/latest/websocket/all.html \"show sidebar\")\n# Crate websocketCopy item path\nSettings\u27e81\u27e9\nHelp\u27e82\u27e9\nSummarySource\u27e83\u27e9\nExpand description\nRust-WebSocket is a WebSocket (RFC6455) library written in Rust.\n## \u00a7\u27e84\u27e9Synchronous and Asynchronous\nThis crate has both async and sync implementations of websockets, you are free to choose which one you would like to use by switching on the `async` or `sync` features for this crate. By default both are switched on since they do not conflict with each other.\nYou\u2019ll find many modules with `::sync` and `::async` submodules that separate these behaviours. Since it gets tedious to add these on when appropriate, a top-level convenience module called `websocket::sync` and `websocket::async` has been added that groups all the sync and async stuff, respectively.\n## \u00a7\u27e85\u27e9Clients\nTo make a client use the `ClientBuilder` struct, this builder has methods for creating both synchronous and asynchronous clients.\n## \u00a7\u27e86\u27e9Servers\nWebSocket servers act similarly to the `TcpListener`, and listen for connections. See the `Server` struct documentation for more information. The `bind()` and `bind_secure()` functions will bind the server to the given `SocketAddr`.\n## \u00a7\u27e87\u27e9Extending Rust-WebSocket\nThe `ws` module contains the traits and functions used by Rust-WebSocket at a lower level. Their usage is explained in the module documentation.\n## Re-exports\u00a7\u27e88\u27e9\n\n`pub extern crate futures[](https://docs.rs/futures/0.1.31/x86_64-unknown-linux-gnu/futures/index.html \"mod futures\");`\n\n\n`pub extern crate native_tls[](https://docs.rs/native-tls/0.2.14/x86_64-unknown-linux-gnu/native_tls/index.html \"mod native_tls\");`\n\n\n`pub extern crate url[](https://docs.rs/url/1.7.2/x86_64-unknown-linux-gnu/url/index.html \"mod url\");`\n\n\n`pub extern crate websocket_base[](https://docs.rs/websocket-base/0.26.5/x86_64-unknown-linux-gnu/websocket_base/index.html \"mod websocket_base\");`\n\n\n`pub use self::client::builder::ClientBuilder[](https://docs.rs/websocket/latest/websocket/client/builder/struct.ClientBuilder.html \"struct websocket::client::builder::ClientBuilder\");`\n\n\n`pub use self::result::WebSocketResult[](https://docs.rs/websocket/latest/websocket/result/type.WebSocketResult.html \"type websocket::result::WebSocketResult\");`\n\n## Modules\u00a7\u27e89\u27e9\n\nasync\u27e810\u27e9\n    A collection of handy asynchronous-only parts of the crate.\n\nclient\u27e811\u27e9\n    Build and use asynchronously or synchronous websocket clients.\n\ncodec\u27e812\u27e9\n    Useful `Codec` types for asynchronously encoding and decoding messages.\n\ndataframe\u27e813\u27e9\n    Module containing the default implementation of data frames.\n\nheader\u27e814\u27e9\n    Structs representing headers relevant in a WebSocket context.\n\nmessage\u27e815\u27e9\n    Module containing the default implementation for messages.\n\nreceiver\u27e816\u27e9\n    The default implementation of a WebSocket Receiver.\n\nresult\u27e817\u27e9\n    The result type used within Rust-WebSocket\n\nsender\u27e818\u27e9\n    The default implementation of a WebSocket Sender.\n\nserver\u27e819\u27e9\n    Provides an implementation of a WebSocket server\n\nstream\u27e820\u27e9\n    Provides the default stream type for WebSocket connections.\n\nsync\u27e821\u27e9\n    A collection of handy synchronous-only parts of the crate.\n\nws\u27e822\u27e9\n    A module containing the traits and structs that lower layer of Rust-WebSocket is based on.\n## Structs\u00a7\u27e823\u27e9\n\nCloseData\u27e824\u27e9\n    Represents data contained in a Close message\n\nMessage\u27e825\u27e9\n    Represents a WebSocket message.\n## Enums\u00a7\u27e826\u27e9\n\nOwnedMessage\u27e827\u27e9\n    Represents an owned WebSocket message.\n\nWebSocketError\u27e828\u27e9\n    Represents a WebSocket error\n",
              "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://docs.rs/websocket/latest/settings.html: Settings\n\u27e82\u27e9 https://docs.rs/websocket/latest/help.html: Help\n\u27e83\u27e9 https://docs.rs/websocket/latest/src/websocket/lib.rs.html#1-164: Source\n\u27e84\u27e9 https://docs.rs/websocket/latest/websocket/#synchronous-and-asynchronous: \u00a7\n\u27e85\u27e9 https://docs.rs/websocket/latest/websocket/#clients: \u00a7\n\u27e86\u27e9 https://docs.rs/websocket/latest/websocket/#servers: \u00a7\n\u27e87\u27e9 https://docs.rs/websocket/latest/websocket/#extending-rust-websocket: \u00a7\n\u27e88\u27e9 https://docs.rs/websocket/latest/websocket/#reexports: \u00a7\n\u27e89\u27e9 https://docs.rs/websocket/latest/websocket/#modules: \u00a7\n\u27e810\u27e9 https://docs.rs/websocket/latest/websocket/async/index.html: mod websocket::async - async\n\u27e811\u27e9 https://docs.rs/websocket/latest/websocket/client/index.html: mod websocket::client - client\n\u27e812\u27e9 https://docs.rs/websocket/latest/websocket/codec/index.html: mod websocket::codec - codec\n\u27e813\u27e9 https://docs.rs/websocket/latest/websocket/dataframe/index.html: mod websocket::dataframe - dataframe\n\u27e814\u27e9 https://docs.rs/websocket/latest/websocket/header/index.html: mod websocket::header - header\n\u27e815\u27e9 https://docs.rs/websocket/latest/websocket/message/index.html: mod websocket::message - message\n\u27e816\u27e9 https://docs.rs/websocket/latest/websocket/receiver/index.html: mod websocket::receiver - receiver\n\u27e817\u27e9 https://docs.rs/websocket/latest/websocket/result/index.html: mod websocket::result - result\n\u27e818\u27e9 https://docs.rs/websocket/latest/websocket/sender/index.html: mod websocket::sender - sender\n\u27e819\u27e9 https://docs.rs/websocket/latest/websocket/server/index.html: mod websocket::server - server\n\u27e820\u27e9 https://docs.rs/websocket/latest/websocket/stream/index.html: mod websocket::stream - stream\n\u27e821\u27e9 https://docs.rs/websocket/latest/websocket/sync/index.html: mod websocket::sync - sync\n\u27e822\u27e9 https://docs.rs/websocket/latest/websocket/ws/index.html: mod websocket::ws - ws\n\u27e823\u27e9 https://docs.rs/websocket/latest/websocket/#structs: \u00a7\n\u27e824\u27e9 https://docs.rs/websocket/latest/websocket/struct.CloseData.html: struct websocket::CloseData - CloseData\n\u27e825\u27e9 https://docs.rs/websocket/latest/websocket/struct.Message.html: struct websocket::Message - Message\n\u27e826\u27e9 https://docs.rs/websocket/latest/websocket/#enums: \u00a7\n\u27e827\u27e9 https://docs.rs/websocket/latest/websocket/enum.OwnedMessage.html: enum websocket::OwnedMessage - OwnedMessage\n\u27e828\u27e9 https://docs.rs/websocket/latest/websocket/enum.WebSocketError.html: enum websocket::WebSocketError - WebSocketError\n",
              "fit_markdown": "",
              "fit_html": ""
            },
            "structured_data": {},
            "quality_score": 4.0,
            "extraction_method": "crawl4ai",
            "error": null,
            "metadata": {
              "doc_type": "docs",
              "content_length": 5607,
              "has_structured_data": false,
              "crawl_success": true
            },
            "timestamp": "120412.5467297"
          },
          "lib_rs": {
            "url": "https://lib.rs/crates/websocket",
            "title": "Untitled",
            "content": {
              "raw_markdown": "###  [79 releases](https://lib.rs/crates/websocket/versions)\n0.27.1 |  Mar 31, 2024   \n---|---  \n0.27.0 |  Sep 17, 2023   \n0.26.5 |  Jul 24, 2022   \n0.26.4 |  Mar 31, 2022   \n0.4.0 |  Nov 30, 2014   \n#**9** in [#rfc6455](https://lib.rs/keywords/rfc6455)\nDownload history 3202/week @ 2024-11-15 3459/week @ 2024-11-22 3476/week @ 2024-11-29 4528/week @ 2024-12-06 5098/week @ 2024-12-13 2359/week @ 2024-12-20 1351/week @ 2024-12-27 3312/week @ 2025-01-03 5299/week @ 2025-01-10 5123/week @ 2025-01-17 3640/week @ 2025-01-24 4934/week @ 2025-01-31 6065/week @ 2025-02-07 4506/week @ 2025-02-14 5081/week @ 2025-02-21 4008/week @ 2025-02-28\n**20,620** downloads per month Used in [fewer than **65** crates](https://lib.rs/crates/websocket/rev)\n**MIT** license \n230KB  4.5K  SLoC\n# Rust-WebSocket [![Build Status](https://img.gs/czjpqfbdkz/full/https://travis-ci.com/websockets-rs/rust-websocket.svg?branch=master)](https://travis-ci.com/websockets-rs/rust-websocket) [![docs.rs](https://img.gs/czjpqfbdkz/full/https://docs.rs/websocket/badge.svg)](https://docs.rs/websocket)\n**Note: Maintainership of this project is slugglish. You may want to use[tungstenite](https://lib.rs/crates/tungstenite) or [tokio-tungstenite](https://lib.rs/crates/tokio-tungstenite) instead.**  \n---  \nRust-WebSocket is a WebSocket ([RFC6455](https://datatracker.ietf.org/doc/rfc6455/)) library written in Rust.\n**Note that this particular library is based on obsolete dependencies (Hyper 0.10, Tokio 0.1), so is a poor choice for new projects. You are adviced to use other Websocket libraries.**\nRust-WebSocket provides a framework for dealing with WebSocket connections (both clients and servers). The library is currently in an experimental state, but provides functionality for both normal and secure WebSockets, a message level API supporting fragmentation, a data frame level API, and the ability to extend and customize behaviour.\n## Installation\nTo add a library release version from [crates.io](https://crates.io/crates/websocket) to a Cargo project, add this to the 'dependencies' section of your Cargo.toml:\n```\n`websocket = \"0.24.0\"\n`\n```\n\nTo add the library's Git repository to a Cargo project, add this to your Cargo.toml:\n```\n```[``dependencies.websocket``]`\n`git ``=` ``\"`https://github.com/websockets-rs/rust-websocket.git`\"``\n``\n```\n\nOptionally add ```extern` `crate` websocket`;``` to your project.\nNote that ```0.``24``.``0``` is the last version of ``rust-websocket`` that supports some very old Rust versions (I'm not sure which exactly, maybe 1.28).\n## Usage\nThe library can be compiled with tests and benches and some extra capabilities on Rust nightly. To enable the nightly features, use ````cargo````` --`features` nightly ...```.\nSee the documentation for the latest release of the library [here](https://docs.rs/websocket/), and also the examples, which are located in ``/examples`` and can be run with:\n```\n```cargo``` run`` --`example` server`\n`\n```\n\nAnd in a separate terminal:\n```\n```cargo``` run`` --`example` client`\n`\n```\n\n## Testing\nThe library can be tested using ````cargo``` test``` to run tests and ````cargo``` bench``` to run bench tests.\nA number of tests are included, which ensure core WebSocket functionality works as expected. These tests are not yet comprehensive, and are still being worked on.\n## Autobahn TestSuite\nRust-WebSocket uses the [Autobahn TestSuite](https://crossbar.io/autobahn/) to test conformance to RFC6455. If you have Autobahn TestSuite installed you can run these tests yourself using the commands:\n```\n`wstest `-`m fuzzingserver\ncargo run `-``-`example autobahn`-`client\n`\n```\n\nTo test the client implementation, and\n```\n`wstest `-`m fuzzingclient\ncargo run `-``-`example autobahn`-`server\n`\n```\n\nTo test the server implementation. The spec files are available [here](http://websockets-rs.github.io/rust-websocket/autobahn).\nThe results of these tests are available [here](http://websockets-rs.github.io/rust-websocket/autobahn).\n## Contributing\nBefore you make a PR be sure to run all the tests!\n```\n```#``` install\n`rustup component add rustfmt-preview\nrustup component add clippy-preview\n# test\ncargo +nightly fmt -- --check\ncargo +nightly clippy --all-features -- -D clippy::all\ncargo test --features nightly\ncargo bench --features nightly\n./scripts/build-all.sh\n`\n```\n\n## License\n### The MIT License (MIT)\nCopyright (c) 2014-2015 Cyderize\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n#### Dependencies\n~5\u201315MB  ~238K SLoC\n  * [async](https://lib.rs/crates/websocket/features#feature-async \"default feature\") [bytes](https://lib.rs/crates/bytes \"obsolete\") 0.4\n  * [async](https://lib.rs/crates/websocket/features#feature-async \"default feature\") [futures](https://lib.rs/crates/futures \"deprecated\") 0.1\n  * [async](https://lib.rs/crates/websocket/features#feature-async \"default feature\") [tokio-codec](https://lib.rs/crates/tokio-codec \"deprecated\") 0.1\n  * [async](https://lib.rs/crates/websocket/features#feature-async \"default feature\") [tokio-io](https://lib.rs/crates/tokio-io \"deprecated\") 0.1\n  * [async](https://lib.rs/crates/websocket/features#feature-async \"default feature\") [tokio-reactor](https://lib.rs/crates/tokio-reactor \"deprecated\") 0.1\n  * [async](https://lib.rs/crates/websocket/features#feature-async \"default feature\") [tokio-tcp](https://lib.rs/crates/tokio-tcp \"deprecated\") 0.1\n  * [hyper](https://lib.rs/crates/hyper \"obsolete\") 0.10.6\n  * [async-ssl](https://lib.rs/crates/websocket/features#feature-async-ssl \"default feature\") [native-tls](https://lib.rs/crates/native-tls \"0.2.1\")\n  * [async-ssl](https://lib.rs/crates/websocket/features#feature-async-ssl \"default feature\") [tokio-tls](https://lib.rs/crates/tokio-tls \"deprecated\") 0.2\n  * [rand](https://lib.rs/crates/rand \"obsolete\") 0.6.1\n  * [unicase](https://lib.rs/crates/unicase \"obsolete\") 1.0\n  * [url](https://lib.rs/crates/url \"obsolete\") 1.0\n  * [websocket-base](https://lib.rs/crates/websocket-base \"new\") 0.26.5\n\n\n  * dev  [futures-cpupool](https://lib.rs/crates/futures-cpupool \"deprecated\") 0.1\n  * dev  [tokio](https://lib.rs/crates/tokio \"deprecated\") 0.1[+codec](https://lib.rs/crates/tokio/features#feature-codec)[+tcp](https://lib.rs/crates/tokio/features#feature-tcp)[+rt-full](https://lib.rs/crates/tokio/features#feature-rt-full)\n\n\n#### [Other features](https://lib.rs/crates/websocket/features)\n  * [nightly](https://lib.rs/crates/websocket/features#feature-nightly)\n  * [sync](https://lib.rs/crates/websocket/features#feature-sync)\n  * [sync-ssl](https://lib.rs/crates/websocket/features#feature-sync-ssl)\n\n\n  *[SLoC]: approx. additional lines of code\n",
              "markdown_with_citations": "###  79 releases\u27e81\u27e9\n0.27.1 |  Mar 31, 2024   \n---|---  \n0.27.0 |  Sep 17, 2023   \n0.26.5 |  Jul 24, 2022   \n0.26.4 |  Mar 31, 2022   \n0.4.0 |  Nov 30, 2014   \n#**9** in #rfc6455\u27e82\u27e9\nDownload history 3202/week @ 2024-11-15 3459/week @ 2024-11-22 3476/week @ 2024-11-29 4528/week @ 2024-12-06 5098/week @ 2024-12-13 2359/week @ 2024-12-20 1351/week @ 2024-12-27 3312/week @ 2025-01-03 5299/week @ 2025-01-10 5123/week @ 2025-01-17 3640/week @ 2025-01-24 4934/week @ 2025-01-31 6065/week @ 2025-02-07 4506/week @ 2025-02-14 5081/week @ 2025-02-21 4008/week @ 2025-02-28\n**20,620** downloads per month Used in fewer than **65** crates\u27e83\u27e9\n**MIT** license \n230KB  4.5K  SLoC\n# Rust-WebSocket ![Build Status\u27e84\u27e9](https://travis-ci.com/websockets-rs/rust-websocket) ![docs.rs\u27e85\u27e9](https://docs.rs/websocket)\n**Note: Maintainership of this project is slugglish. You may want to usetungstenite\u27e86\u27e9 or tokio-tungstenite\u27e87\u27e9 instead.**  \n---  \nRust-WebSocket is a WebSocket (RFC6455\u27e88\u27e9) library written in Rust.\n**Note that this particular library is based on obsolete dependencies (Hyper 0.10, Tokio 0.1), so is a poor choice for new projects. You are adviced to use other Websocket libraries.**\nRust-WebSocket provides a framework for dealing with WebSocket connections (both clients and servers). The library is currently in an experimental state, but provides functionality for both normal and secure WebSockets, a message level API supporting fragmentation, a data frame level API, and the ability to extend and customize behaviour.\n## Installation\nTo add a library release version from crates.io\u27e89\u27e9 to a Cargo project, add this to the 'dependencies' section of your Cargo.toml:\n```\n`websocket = \"0.24.0\"\n`\n```\n\nTo add the library's Git repository to a Cargo project, add this to your Cargo.toml:\n```\n```[``dependencies.websocket``]`\n`git ``=` ``\"`https://github.com/websockets-rs/rust-websocket.git`\"``\n``\n```\n\nOptionally add ```extern` `crate` websocket`;``` to your project.\nNote that ```0.``24``.``0``` is the last version of ``rust-websocket`` that supports some very old Rust versions (I'm not sure which exactly, maybe 1.28).\n## Usage\nThe library can be compiled with tests and benches and some extra capabilities on Rust nightly. To enable the nightly features, use ````cargo````` --`features` nightly ...```.\nSee the documentation for the latest release of the library here\u27e810\u27e9, and also the examples, which are located in ``/examples`` and can be run with:\n```\n```cargo``` run`` --`example` server`\n`\n```\n\nAnd in a separate terminal:\n```\n```cargo``` run`` --`example` client`\n`\n```\n\n## Testing\nThe library can be tested using ````cargo``` test``` to run tests and ````cargo``` bench``` to run bench tests.\nA number of tests are included, which ensure core WebSocket functionality works as expected. These tests are not yet comprehensive, and are still being worked on.\n## Autobahn TestSuite\nRust-WebSocket uses the Autobahn TestSuite\u27e811\u27e9 to test conformance to RFC6455. If you have Autobahn TestSuite installed you can run these tests yourself using the commands:\n```\n`wstest `-`m fuzzingserver\ncargo run `-``-`example autobahn`-`client\n`\n```\n\nTo test the client implementation, and\n```\n`wstest `-`m fuzzingclient\ncargo run `-``-`example autobahn`-`server\n`\n```\n\nTo test the server implementation. The spec files are available here\u27e812\u27e9.\nThe results of these tests are available here\u27e812\u27e9.\n## Contributing\nBefore you make a PR be sure to run all the tests!\n```\n```#``` install\n`rustup component add rustfmt-preview\nrustup component add clippy-preview\n# test\ncargo +nightly fmt -- --check\ncargo +nightly clippy --all-features -- -D clippy::all\ncargo test --features nightly\ncargo bench --features nightly\n./scripts/build-all.sh\n`\n```\n\n## License\n### The MIT License (MIT)\nCopyright (c) 2014-2015 Cyderize\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n#### Dependencies\n~5\u201315MB  ~238K SLoC\n  * async\u27e813\u27e9 bytes\u27e814\u27e9 0.4\n  * async\u27e813\u27e9 futures\u27e815\u27e9 0.1\n  * async\u27e813\u27e9 tokio-codec\u27e816\u27e9 0.1\n  * async\u27e813\u27e9 tokio-io\u27e817\u27e9 0.1\n  * async\u27e813\u27e9 tokio-reactor\u27e818\u27e9 0.1\n  * async\u27e813\u27e9 tokio-tcp\u27e819\u27e9 0.1\n  * hyper\u27e820\u27e9 0.10.6\n  * async-ssl\u27e821\u27e9 native-tls\u27e822\u27e9\n  * async-ssl\u27e821\u27e9 tokio-tls\u27e823\u27e9 0.2\n  * rand\u27e824\u27e9 0.6.1\n  * unicase\u27e825\u27e9 1.0\n  * url\u27e826\u27e9 1.0\n  * websocket-base\u27e827\u27e9 0.26.5\n\n\n  * dev  futures-cpupool\u27e828\u27e9 0.1\n  * dev  tokio\u27e829\u27e9 0.1+codec\u27e830\u27e9+tcp\u27e831\u27e9+rt-full\u27e832\u27e9\n\n\n#### Other features\u27e833\u27e9\n  * nightly\u27e834\u27e9\n  * sync\u27e835\u27e9\n  * sync-ssl\u27e836\u27e9\n\n\n  *[SLoC]: approx. additional lines of code\n",
              "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://lib.rs/crates/websocket/versions: 79 releases\n\u27e82\u27e9 https://lib.rs/keywords/rfc6455: #rfc6455\n\u27e83\u27e9 https://lib.rs/crates/websocket/rev: fewer than **65** crates\n\u27e84\u27e9 https://img.gs/czjpqfbdkz/full/https://travis-ci.com/websockets-rs/rust-websocket.svg?branch=master: ![Build Status\n\u27e85\u27e9 https://img.gs/czjpqfbdkz/full/https://docs.rs/websocket/badge.svg: ![docs.rs\n\u27e86\u27e9 https://lib.rs/crates/tungstenite: tungstenite\n\u27e87\u27e9 https://lib.rs/crates/tokio-tungstenite: tokio-tungstenite\n\u27e88\u27e9 https://datatracker.ietf.org/doc/rfc6455/: RFC6455\n\u27e89\u27e9 https://crates.io/crates/websocket: crates.io\n\u27e810\u27e9 https://docs.rs/websocket/: here\n\u27e811\u27e9 https://crossbar.io/autobahn/: Autobahn TestSuite\n\u27e812\u27e9 http://websockets-rs.github.io/rust-websocket/autobahn: here\n\u27e813\u27e9 https://lib.rs/crates/websocket/features#feature-async: default feature - async\n\u27e814\u27e9 https://lib.rs/crates/bytes: obsolete - bytes\n\u27e815\u27e9 https://lib.rs/crates/futures: deprecated - futures\n\u27e816\u27e9 https://lib.rs/crates/tokio-codec: deprecated - tokio-codec\n\u27e817\u27e9 https://lib.rs/crates/tokio-io: deprecated - tokio-io\n\u27e818\u27e9 https://lib.rs/crates/tokio-reactor: deprecated - tokio-reactor\n\u27e819\u27e9 https://lib.rs/crates/tokio-tcp: deprecated - tokio-tcp\n\u27e820\u27e9 https://lib.rs/crates/hyper: obsolete - hyper\n\u27e821\u27e9 https://lib.rs/crates/websocket/features#feature-async-ssl: default feature - async-ssl\n\u27e822\u27e9 https://lib.rs/crates/native-tls: 0.2.1 - native-tls\n\u27e823\u27e9 https://lib.rs/crates/tokio-tls: deprecated - tokio-tls\n\u27e824\u27e9 https://lib.rs/crates/rand: obsolete - rand\n\u27e825\u27e9 https://lib.rs/crates/unicase: obsolete - unicase\n\u27e826\u27e9 https://lib.rs/crates/url: obsolete - url\n\u27e827\u27e9 https://lib.rs/crates/websocket-base: new - websocket-base\n\u27e828\u27e9 https://lib.rs/crates/futures-cpupool: deprecated - futures-cpupool\n\u27e829\u27e9 https://lib.rs/crates/tokio: deprecated - tokio\n\u27e830\u27e9 https://lib.rs/crates/tokio/features#feature-codec: +codec\n\u27e831\u27e9 https://lib.rs/crates/tokio/features#feature-tcp: +tcp\n\u27e832\u27e9 https://lib.rs/crates/tokio/features#feature-rt-full: +rt-full\n\u27e833\u27e9 https://lib.rs/crates/websocket/features: Other features\n\u27e834\u27e9 https://lib.rs/crates/websocket/features#feature-nightly: nightly\n\u27e835\u27e9 https://lib.rs/crates/websocket/features#feature-sync: sync\n\u27e836\u27e9 https://lib.rs/crates/websocket/features#feature-sync-ssl: sync-ssl\n",
              "fit_markdown": "",
              "fit_html": ""
            },
            "structured_data": {},
            "quality_score": 3.0,
            "extraction_method": "crawl4ai",
            "error": null,
            "metadata": {
              "doc_type": "docs",
              "content_length": 7589,
              "has_structured_data": false,
              "crawl_success": true
            },
            "timestamp": "120412.9633706"
          }
        },
        "crate_analysis": {
          "status": "completed",
          "check": [
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#cfg-if@1.0.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\cfg-if-1.0.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "cfg_if",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\cfg-if-1.0.0\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmppk0ok6_5\\websocket-0.27.1\\target\\debug\\deps\\libcfg_if-f755e379589b9030.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#cfg-if@0.1.10",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\cfg-if-0.1.10\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "cfg_if",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\cfg-if-0.1.10\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmppk0ok6_5\\websocket-0.27.1\\target\\debug\\deps\\libcfg_if-0bd16a779d0507b1.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#lazy_static@1.4.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\lazy_static-1.4.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "lazy_static",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\lazy_static-1.4.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmppk0ok6_5\\websocket-0.27.1\\target\\debug\\deps\\liblazy_static-1b2aa05184283f8f.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#tinyvec_macros@0.1.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\tinyvec_macros-0.1.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "tinyvec_macros",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\tinyvec_macros-0.1.0\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0786]: found invalid metadata files for crate `core`\n  |\n  = note: failed to mmap file 'C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib\\rustlib\\x86_64-pc-windows-msvc\\lib\\libcore-50d17f87cee49b53.rlib': The paging file is too small for this operation to complete. (os error 1455)\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "failed to mmap file 'C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib\\rustlib\\x86_64-pc-windows-msvc\\lib\\libcore-50d17f87cee49b53.rlib': The paging file is too small for this operation to complete. (os error 1455)",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "E0786",
                  "explanation": "A metadata file was invalid.\n\nErroneous code example:\n\n```ignore (needs extern files)\nuse ::foo; // error: found invalid metadata files for crate `foo`\n```\n\nWhen loading crates, each crate must have a valid metadata file.\nInvalid files could be caused by filesystem corruption,\nan IO error while reading the file, or (rarely) a bug in the compiler itself.\n\nConsider deleting the file and recreating it,\nor reporting a bug against the compiler.\n"
                },
                "level": "error",
                "message": "found invalid metadata files for crate `core`",
                "spans": [
                  {
                    "byte_end": 0,
                    "byte_start": 0,
                    "column_end": 1,
                    "column_start": 1,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\tinyvec_macros-0.1.0\\src\\lib.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 1,
                    "line_start": 1,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": []
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#autocfg@0.1.7",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "autocfg",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0462]: found staticlib `std` instead of rlib or dylib\n  |\n  = note: the following crate versions were found:\n          crate `std`: C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib\\rustlib\\x86_64-pc-windows-msvc\\lib\\std-c85e9beb7923f636.dll.lib\n  = help: please recompile that crate using --crate-type lib\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "the following crate versions were found:\ncrate `std`: C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib\\rustlib\\x86_64-pc-windows-msvc\\lib\\std-c85e9beb7923f636.dll.lib",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "please recompile that crate using --crate-type lib",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "E0462",
                  "explanation": "Found `staticlib` `..` instead of `rlib` or `dylib`.\n\nConsider the following two files:\n\n`a.rs`\n```ignore (cannot-link-with-other-tests)\n#![crate_type = \"staticlib\"]\n\nfn foo() {}\n```\n\n`main.rs`\n```ignore (cannot-link-with-other-tests)\nextern crate a;\n\nfn main() {\n    a::foo();\n}\n```\n\nCrate `a` is compiled as a `staticlib`. A `staticlib` is a system-dependant\nlibrary only intended for linking with non-Rust applications (C programs). Note\nthat `staticlib`s include all upstream dependencies (`core`, `std`, other user\ndependencies, etc) which makes them significantly larger than `dylib`s:\nprefer `staticlib` for linking with C programs. Learn more about different\n`crate_type`s in [this section of the Reference](../reference/linkage.html).\n\nThis error can be fixed by:\n * Using [Cargo](../cargo/index.html), the Rust package manager, automatically\n   fixing this issue.\n * Recompiling the crate as a `rlib` or `dylib`; formats suitable for Rust\n   linking.\n"
                },
                "level": "error",
                "message": "found staticlib `std` instead of rlib or dylib",
                "spans": [
                  {
                    "byte_end": 0,
                    "byte_start": 0,
                    "column_end": 1,
                    "column_start": 1,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\src\\lib.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 1,
                    "line_start": 1,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": []
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#iovec@0.1.4",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\iovec-0.1.4\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "iovec",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\iovec-0.1.4\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0786]: found invalid metadata files for crate `core` which `std` depends on\n  |\n  = note: failed to mmap file 'C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib\\rustlib\\x86_64-pc-windows-msvc\\lib\\libcore-50d17f87cee49b53.rlib': The paging file is too small for this operation to complete. (os error 1455)\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "failed to mmap file 'C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib\\rustlib\\x86_64-pc-windows-msvc\\lib\\libcore-50d17f87cee49b53.rlib': The paging file is too small for this operation to complete. (os error 1455)",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "E0786",
                  "explanation": "A metadata file was invalid.\n\nErroneous code example:\n\n```ignore (needs extern files)\nuse ::foo; // error: found invalid metadata files for crate `foo`\n```\n\nWhen loading crates, each crate must have a valid metadata file.\nInvalid files could be caused by filesystem corruption,\nan IO error while reading the file, or (rarely) a bug in the compiler itself.\n\nConsider deleting the file and recreating it,\nor reporting a bug against the compiler.\n"
                },
                "level": "error",
                "message": "found invalid metadata files for crate `core` which `std` depends on",
                "spans": [
                  {
                    "byte_end": 0,
                    "byte_start": 0,
                    "column_end": 1,
                    "column_start": 1,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\iovec-0.1.4\\src\\lib.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 1,
                    "line_start": 1,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": []
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#semver-parser@0.7.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "semver_parser",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0462]: found staticlib `std` instead of rlib or dylib\n  |\n  = note: the following crate versions were found:\n          crate `std`: C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib\\rustlib\\x86_64-pc-windows-msvc\\lib\\std-c85e9beb7923f636.dll.lib\n  = help: please recompile that crate using --crate-type lib\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "the following crate versions were found:\ncrate `std`: C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib\\rustlib\\x86_64-pc-windows-msvc\\lib\\std-c85e9beb7923f636.dll.lib",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "please recompile that crate using --crate-type lib",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "E0462",
                  "explanation": "Found `staticlib` `..` instead of `rlib` or `dylib`.\n\nConsider the following two files:\n\n`a.rs`\n```ignore (cannot-link-with-other-tests)\n#![crate_type = \"staticlib\"]\n\nfn foo() {}\n```\n\n`main.rs`\n```ignore (cannot-link-with-other-tests)\nextern crate a;\n\nfn main() {\n    a::foo();\n}\n```\n\nCrate `a` is compiled as a `staticlib`. A `staticlib` is a system-dependant\nlibrary only intended for linking with non-Rust applications (C programs). Note\nthat `staticlib`s include all upstream dependencies (`core`, `std`, other user\ndependencies, etc) which makes them significantly larger than `dylib`s:\nprefer `staticlib` for linking with C programs. Learn more about different\n`crate_type`s in [this section of the Reference](../reference/linkage.html).\n\nThis error can be fixed by:\n * Using [Cargo](../cargo/index.html), the Rust package manager, automatically\n   fixing this issue.\n * Recompiling the crate as a `rlib` or `dylib`; formats suitable for Rust\n   linking.\n"
                },
                "level": "error",
                "message": "found staticlib `std` instead of rlib or dylib",
                "spans": [
                  {
                    "byte_end": 0,
                    "byte_start": 0,
                    "column_end": 1,
                    "column_start": 1,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\lib.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 1,
                    "line_start": 1,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": []
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#iovec@0.1.4",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\iovec-0.1.4\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "iovec",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\iovec-0.1.4\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error: cannot find macro `panic` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\iovec-0.1.4\\src\\lib.rs:139:9\n    |\n139 |         panic!(\"this implementation was accidentally provided but is \\\n    |         ^^^^^\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": null,
                "level": "error",
                "message": "cannot find macro `panic` in this scope",
                "spans": [
                  {
                    "byte_end": 3696,
                    "byte_start": 3691,
                    "column_end": 14,
                    "column_start": 9,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\iovec-0.1.4\\src\\lib.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 139,
                    "line_start": 139,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 14,
                        "highlight_start": 9,
                        "text": "        panic!(\"this implementation was accidentally provided but is \\"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#iovec@0.1.4",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\iovec-0.1.4\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "iovec",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\iovec-0.1.4\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error: cannot find macro `panic` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\iovec-0.1.4\\src\\lib.rs:130:9\n    |\n130 |         panic!(\"this implementation was accidentally provided but is \\\n    |         ^^^^^\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": null,
                "level": "error",
                "message": "cannot find macro `panic` in this scope",
                "spans": [
                  {
                    "byte_end": 3385,
                    "byte_start": 3380,
                    "column_end": 14,
                    "column_start": 9,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\iovec-0.1.4\\src\\lib.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 130,
                    "line_start": 130,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 14,
                        "highlight_start": 9,
                        "text": "        panic!(\"this implementation was accidentally provided but is \\"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#iovec@0.1.4",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\iovec-0.1.4\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "iovec",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\iovec-0.1.4\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error: cannot find macro `assert` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\iovec-0.1.4\\src\\sys\\windows.rs:59:9\n   |\n59 |         assert!(src.len() <= MAX_LENGTH);\n   |         ^^^^^^\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": null,
                "level": "error",
                "message": "cannot find macro `assert` in this scope",
                "spans": [
                  {
                    "byte_end": 1283,
                    "byte_start": 1277,
                    "column_end": 15,
                    "column_start": 9,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\iovec-0.1.4\\src\\sys\\windows.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 59,
                    "line_start": 59,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 15,
                        "highlight_start": 9,
                        "text": "        assert!(src.len() <= MAX_LENGTH);"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#iovec@0.1.4",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\iovec-0.1.4\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "iovec",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\iovec-0.1.4\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error: cannot find macro `assert` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\iovec-0.1.4\\src\\sys\\windows.rs:58:9\n   |\n58 |         assert!(src.len() > 0);\n   |         ^^^^^^\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": null,
                "level": "error",
                "message": "cannot find macro `assert` in this scope",
                "spans": [
                  {
                    "byte_end": 1251,
                    "byte_start": 1245,
                    "column_end": 15,
                    "column_start": 9,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\iovec-0.1.4\\src\\sys\\windows.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 58,
                    "line_start": 58,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 15,
                        "highlight_start": 9,
                        "text": "        assert!(src.len() > 0);"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#autocfg@0.1.7",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "autocfg",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error: cannot find attribute `derive` in this scope\n --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\src\\error.rs:8:3\n  |\n8 | #[derive(Debug)]\n  |   ^^^^^^\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": null,
                "level": "error",
                "message": "cannot find attribute `derive` in this scope",
                "spans": [
                  {
                    "byte_end": 129,
                    "byte_start": 123,
                    "column_end": 9,
                    "column_start": 3,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\src\\error.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 8,
                    "line_start": 8,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 9,
                        "highlight_start": 3,
                        "text": "#[derive(Debug)]"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#autocfg@0.1.7",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "autocfg",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error: cannot find attribute `derive` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\src\\error.rs:39:3\n   |\n39 | #[derive(Debug)]\n   |   ^^^^^^\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": null,
                "level": "error",
                "message": "cannot find attribute `derive` in this scope",
                "spans": [
                  {
                    "byte_end": 888,
                    "byte_start": 882,
                    "column_end": 9,
                    "column_start": 3,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\src\\error.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 39,
                    "line_start": 39,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 9,
                        "highlight_start": 3,
                        "text": "#[derive(Debug)]"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#iovec@0.1.4",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\iovec-0.1.4\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "iovec",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\iovec-0.1.4\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error: cannot find macro `assert` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\iovec-0.1.4\\src\\sys\\windows.rs:45:9\n   |\n45 |         assert!(src.len() <= MAX_LENGTH);\n   |         ^^^^^^\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": null,
                "level": "error",
                "message": "cannot find macro `assert` in this scope",
                "spans": [
                  {
                    "byte_end": 946,
                    "byte_start": 940,
                    "column_end": 15,
                    "column_start": 9,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\iovec-0.1.4\\src\\sys\\windows.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 45,
                    "line_start": 45,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 15,
                        "highlight_start": 9,
                        "text": "        assert!(src.len() <= MAX_LENGTH);"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#autocfg@0.1.7",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "autocfg",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error: cannot find attribute `derive` in this scope\n --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\src\\version.rs:8:3\n  |\n8 | #[derive(Clone, Debug, PartialEq, Eq, PartialOrd, Ord)]\n  |   ^^^^^^\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": null,
                "level": "error",
                "message": "cannot find attribute `derive` in this scope",
                "spans": [
                  {
                    "byte_end": 156,
                    "byte_start": 150,
                    "column_end": 9,
                    "column_start": 3,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\src\\version.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 8,
                    "line_start": 8,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 9,
                        "highlight_start": 3,
                        "text": "#[derive(Clone, Debug, PartialEq, Eq, PartialOrd, Ord)]"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#iovec@0.1.4",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\iovec-0.1.4\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "iovec",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\iovec-0.1.4\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error: cannot find macro `assert` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\iovec-0.1.4\\src\\sys\\windows.rs:44:9\n   |\n44 |         assert!(src.len() > 0);\n   |         ^^^^^^\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": null,
                "level": "error",
                "message": "cannot find macro `assert` in this scope",
                "spans": [
                  {
                    "byte_end": 914,
                    "byte_start": 908,
                    "column_end": 15,
                    "column_start": 9,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\iovec-0.1.4\\src\\sys\\windows.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 44,
                    "line_start": 44,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 15,
                        "highlight_start": 9,
                        "text": "        assert!(src.len() > 0);"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#semver-parser@0.7.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "semver_parser",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error: cannot find macro `try` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\range.rs:184:22\n    |\n184 |     let predicates = try!(predicates);\n    |                      ^^^\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": null,
                "level": "error",
                "message": "cannot find macro `try` in this scope",
                "spans": [
                  {
                    "byte_end": 4732,
                    "byte_start": 4729,
                    "column_end": 25,
                    "column_start": 22,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\range.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 184,
                    "line_start": 184,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 25,
                        "highlight_start": 22,
                        "text": "    let predicates = try!(predicates);"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#autocfg@0.1.7",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "autocfg",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error: cannot find attribute `derive` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\src\\lib.rs:74:3\n   |\n74 | #[derive(Clone, Debug)]\n   |   ^^^^^^\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": null,
                "level": "error",
                "message": "cannot find attribute `derive` in this scope",
                "spans": [
                  {
                    "byte_end": 2080,
                    "byte_start": 2074,
                    "column_end": 9,
                    "column_start": 3,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\src\\lib.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 74,
                    "line_start": 74,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 9,
                        "highlight_start": 3,
                        "text": "#[derive(Clone, Debug)]"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#autocfg@0.1.7",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "autocfg",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error: cannot find macro `println` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\src\\lib.rs:90:5\n   |\n90 |     println!(\"cargo:rustc-cfg={}\", cfg);\n   |     ^^^^^^^\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": null,
                "level": "error",
                "message": "cannot find macro `println` in this scope",
                "spans": [
                  {
                    "byte_end": 2478,
                    "byte_start": 2471,
                    "column_end": 12,
                    "column_start": 5,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\src\\lib.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 90,
                    "line_start": 90,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 12,
                        "highlight_start": 5,
                        "text": "    println!(\"cargo:rustc-cfg={}\", cfg);"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#tinyvec_macros@0.1.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\tinyvec_macros-0.1.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "tinyvec_macros",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\tinyvec_macros-0.1.0\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "For more information about this error, try `rustc --explain E0786`.\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": null,
                "level": "failure-note",
                "message": "For more information about this error, try `rustc --explain E0786`.",
                "spans": []
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#autocfg@0.1.7",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "autocfg",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error: cannot find macro `println` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\src\\lib.rs:100:5\n    |\n100 |     println!(\"cargo:rerun-if-changed={}\", path);\n    |     ^^^^^^^\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": null,
                "level": "error",
                "message": "cannot find macro `println` in this scope",
                "spans": [
                  {
                    "byte_end": 2825,
                    "byte_start": 2818,
                    "column_end": 12,
                    "column_start": 5,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\src\\lib.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 100,
                    "line_start": 100,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 12,
                        "highlight_start": 5,
                        "text": "    println!(\"cargo:rerun-if-changed={}\", path);"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#semver-parser@0.7.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "semver_parser",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error: cannot find macro `vec` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\range.rs:164:25\n    |\n164 |             predicates: vec![Predicate {\n    |                         ^^^\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": null,
                "level": "error",
                "message": "cannot find macro `vec` in this scope",
                "spans": [
                  {
                    "byte_end": 4288,
                    "byte_start": 4285,
                    "column_end": 28,
                    "column_start": 25,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\range.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 164,
                    "line_start": 164,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 28,
                        "highlight_start": 25,
                        "text": "            predicates: vec![Predicate {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#autocfg@0.1.7",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "autocfg",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error: cannot find macro `println` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\src\\lib.rs:111:5\n    |\n111 |     println!(\"cargo:rerun-if-env-changed={}\", var);\n    |     ^^^^^^^\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": null,
                "level": "error",
                "message": "cannot find macro `println` in this scope",
                "spans": [
                  {
                    "byte_end": 3211,
                    "byte_start": 3204,
                    "column_end": 12,
                    "column_start": 5,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\src\\lib.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 111,
                    "line_start": 111,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 12,
                        "highlight_start": 5,
                        "text": "    println!(\"cargo:rerun-if-env-changed={}\", var);"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#autocfg@0.1.7",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "autocfg",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error: cannot find macro `format` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\src\\lib.rs:213:19\n    |\n213 |             emit(&format!(\"rustc_{}_{}\", major, minor));\n    |                   ^^^^^^\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": null,
                "level": "error",
                "message": "cannot find macro `format` in this scope",
                "spans": [
                  {
                    "byte_end": 7107,
                    "byte_start": 7101,
                    "column_end": 25,
                    "column_start": 19,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\src\\lib.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 213,
                    "line_start": 213,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 25,
                        "highlight_start": 19,
                        "text": "            emit(&format!(\"rustc_{}_{}\", major, minor));"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#autocfg@0.1.7",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "autocfg",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error: cannot find macro `format` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\src\\lib.rs:225:18\n    |\n225 |             .arg(format!(\"probe{}\", id))\n    |                  ^^^^^^\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": null,
                "level": "error",
                "message": "cannot find macro `format` in this scope",
                "spans": [
                  {
                    "byte_end": 7487,
                    "byte_start": 7481,
                    "column_end": 24,
                    "column_start": 18,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\src\\lib.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 225,
                    "line_start": 225,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 24,
                        "highlight_start": 18,
                        "text": "            .arg(format!(\"probe{}\", id))"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#autocfg@0.1.7",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "autocfg",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error: cannot find macro `format` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\src\\lib.rs:261:20\n    |\n261 |         self.probe(format!(\"extern crate {} as probe;\", name)) // `as _` wasn't stabilized until Rust 1.33\n    |                    ^^^^^^\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": null,
                "level": "error",
                "message": "cannot find macro `format` in this scope",
                "spans": [
                  {
                    "byte_end": 8645,
                    "byte_start": 8639,
                    "column_end": 26,
                    "column_start": 20,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\src\\lib.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 261,
                    "line_start": 261,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 26,
                        "highlight_start": 20,
                        "text": "        self.probe(format!(\"extern crate {} as probe;\", name)) // `as _` wasn't stabilized until Rust 1.33"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#autocfg@0.1.7",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "autocfg",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error: cannot find macro `format` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\src\\lib.rs:268:19\n    |\n268 |             emit(&format!(\"has_{}\", mangle(name)));\n    |                   ^^^^^^\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": null,
                "level": "error",
                "message": "cannot find macro `format` in this scope",
                "spans": [
                  {
                    "byte_end": 8963,
                    "byte_start": 8957,
                    "column_end": 25,
                    "column_start": 19,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\src\\lib.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 268,
                    "line_start": 268,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 25,
                        "highlight_start": 19,
                        "text": "            emit(&format!(\"has_{}\", mangle(name)));"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#autocfg@0.1.7",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "autocfg",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error: cannot find macro `format` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\src\\lib.rs:280:20\n    |\n280 |         self.probe(format!(\"pub use {};\", path)).unwrap_or(false)\n    |                    ^^^^^^\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": null,
                "level": "error",
                "message": "cannot find macro `format` in this scope",
                "spans": [
                  {
                    "byte_end": 9272,
                    "byte_start": 9266,
                    "column_end": 26,
                    "column_start": 20,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\src\\lib.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 280,
                    "line_start": 280,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 26,
                        "highlight_start": 20,
                        "text": "        self.probe(format!(\"pub use {};\", path)).unwrap_or(false)"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#autocfg@0.1.7",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "autocfg",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error: cannot find macro `format` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\src\\lib.rs:289:19\n    |\n289 |             emit(&format!(\"has_{}\", mangle(path)));\n    |                   ^^^^^^\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": null,
                "level": "error",
                "message": "cannot find macro `format` in this scope",
                "spans": [
                  {
                    "byte_end": 9620,
                    "byte_start": 9614,
                    "column_end": 25,
                    "column_start": 19,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\src\\lib.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 289,
                    "line_start": 289,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 25,
                        "highlight_start": 19,
                        "text": "            emit(&format!(\"has_{}\", mangle(path)));"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#autocfg@0.1.7",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "autocfg",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error: cannot find macro `format` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\src\\lib.rs:308:20\n    |\n308 |         self.probe(format!(\"pub trait Probe: {} + Sized {{}}\", name))\n    |                    ^^^^^^\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": null,
                "level": "error",
                "message": "cannot find macro `format` in this scope",
                "spans": [
                  {
                    "byte_end": 10149,
                    "byte_start": 10143,
                    "column_end": 26,
                    "column_start": 20,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\src\\lib.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 308,
                    "line_start": 308,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 26,
                        "highlight_start": 20,
                        "text": "        self.probe(format!(\"pub trait Probe: {} + Sized {{}}\", name))"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#autocfg@0.1.7",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "autocfg",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error: cannot find macro `format` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\src\\lib.rs:318:19\n    |\n318 |             emit(&format!(\"has_{}\", mangle(name)));\n    |                   ^^^^^^\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": null,
                "level": "error",
                "message": "cannot find macro `format` in this scope",
                "spans": [
                  {
                    "byte_end": 10541,
                    "byte_start": 10535,
                    "column_end": 25,
                    "column_start": 19,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\src\\lib.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 318,
                    "line_start": 318,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 25,
                        "highlight_start": 19,
                        "text": "            emit(&format!(\"has_{}\", mangle(name)));"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#autocfg@0.1.7",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "autocfg",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error: cannot find macro `format` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\src\\lib.rs:337:20\n    |\n337 |         self.probe(format!(\"pub type Probe = {};\", name))\n    |                    ^^^^^^\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": null,
                "level": "error",
                "message": "cannot find macro `format` in this scope",
                "spans": [
                  {
                    "byte_end": 11060,
                    "byte_start": 11054,
                    "column_end": 26,
                    "column_start": 20,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\src\\lib.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 337,
                    "line_start": 337,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 26,
                        "highlight_start": 20,
                        "text": "        self.probe(format!(\"pub type Probe = {};\", name))"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#autocfg@0.1.7",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "autocfg",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error: cannot find macro `format` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\src\\lib.rs:347:19\n    |\n347 |             emit(&format!(\"has_{}\", mangle(name)));\n    |                   ^^^^^^\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": null,
                "level": "error",
                "message": "cannot find macro `format` in this scope",
                "spans": [
                  {
                    "byte_end": 11435,
                    "byte_start": 11429,
                    "column_end": 25,
                    "column_start": 19,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\src\\lib.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 347,
                    "line_start": 347,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 25,
                        "highlight_start": 19,
                        "text": "            emit(&format!(\"has_{}\", mangle(name)));"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#semver-parser@0.7.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "semver_parser",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error: cannot find attribute `derive` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\range.rs:47:3\n   |\n47 | #[derive(PartialEq,Debug)]\n   |   ^^^^^^\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": null,
                "level": "error",
                "message": "cannot find attribute `derive` in this scope",
                "spans": [
                  {
                    "byte_end": 1071,
                    "byte_start": 1065,
                    "column_end": 9,
                    "column_start": 3,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\range.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 47,
                    "line_start": 47,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 9,
                        "highlight_start": 3,
                        "text": "#[derive(PartialEq,Debug)]"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#semver-parser@0.7.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "semver_parser",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error: cannot find attribute `derive` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\range.rs:18:3\n   |\n18 | #[derive(PartialEq,Debug)]\n   |   ^^^^^^\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": null,
                "level": "error",
                "message": "cannot find attribute `derive` in this scope",
                "spans": [
                  {
                    "byte_end": 324,
                    "byte_start": 318,
                    "column_end": 9,
                    "column_start": 3,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\range.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 18,
                    "line_start": 18,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 9,
                        "highlight_start": 3,
                        "text": "#[derive(PartialEq,Debug)]"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#semver-parser@0.7.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "semver_parser",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error: cannot find attribute `derive` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\range.rs:11:3\n   |\n11 | #[derive(PartialEq,Debug)]\n   |   ^^^^^^\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": null,
                "level": "error",
                "message": "cannot find attribute `derive` in this scope",
                "spans": [
                  {
                    "byte_end": 234,
                    "byte_start": 228,
                    "column_end": 9,
                    "column_start": 3,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\range.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 11,
                    "line_start": 11,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 9,
                        "highlight_start": 3,
                        "text": "#[derive(PartialEq,Debug)]"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#semver-parser@0.7.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "semver_parser",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error: cannot find attribute `derive` in this scope\n --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\range.rs:6:3\n  |\n6 | #[derive(Debug)]\n  |   ^^^^^^\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": null,
                "level": "error",
                "message": "cannot find attribute `derive` in this scope",
                "spans": [
                  {
                    "byte_end": 154,
                    "byte_start": 148,
                    "column_end": 9,
                    "column_start": 3,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\range.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 6,
                    "line_start": 6,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 9,
                        "highlight_start": 3,
                        "text": "#[derive(Debug)]"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#semver-parser@0.7.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "semver_parser",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error: cannot find macro `try` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\version.rs:84:13\n   |\n84 |             try!(write!(f, \"+{}\", strs.join(\".\")));\n   |             ^^^\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": null,
                "level": "error",
                "message": "cannot find macro `try` in this scope",
                "spans": [
                  {
                    "byte_end": 2393,
                    "byte_start": 2390,
                    "column_end": 16,
                    "column_start": 13,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\version.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 84,
                    "line_start": 84,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 16,
                        "highlight_start": 13,
                        "text": "            try!(write!(f, \"+{}\", strs.join(\".\")));"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#semver-parser@0.7.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "semver_parser",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error: cannot find macro `try` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\version.rs:79:13\n   |\n79 |             try!(write!(f, \"-{}\", strs.join(\".\")));\n   |             ^^^\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": null,
                "level": "error",
                "message": "cannot find macro `try` in this scope",
                "spans": [
                  {
                    "byte_end": 2194,
                    "byte_start": 2191,
                    "column_end": 16,
                    "column_start": 13,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\version.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 79,
                    "line_start": 79,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 16,
                        "highlight_start": 13,
                        "text": "            try!(write!(f, \"-{}\", strs.join(\".\")));"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#semver-parser@0.7.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "semver_parser",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error: cannot find macro `try` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\version.rs:75:9\n   |\n75 |         try!(write!(f, \"{}.{}.{}\", self.major, self.minor, self.patch));\n   |         ^^^\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": null,
                "level": "error",
                "message": "cannot find macro `try` in this scope",
                "spans": [
                  {
                    "byte_end": 1984,
                    "byte_start": 1981,
                    "column_end": 12,
                    "column_start": 9,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\version.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 75,
                    "line_start": 75,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 12,
                        "highlight_start": 9,
                        "text": "        try!(write!(f, \"{}.{}.{}\", self.major, self.minor, self.patch));"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#semver-parser@0.7.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "semver_parser",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error: cannot find attribute `derive` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\version.rs:17:3\n   |\n17 | #[derive(Clone, Debug, PartialEq, Eq)]\n   |   ^^^^^^\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": null,
                "level": "error",
                "message": "cannot find attribute `derive` in this scope",
                "spans": [
                  {
                    "byte_end": 293,
                    "byte_start": 287,
                    "column_end": 9,
                    "column_start": 3,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\version.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 17,
                    "line_start": 17,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 9,
                        "highlight_start": 3,
                        "text": "#[derive(Clone, Debug, PartialEq, Eq)]"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#semver-parser@0.7.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "semver_parser",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error: cannot find attribute `derive` in this scope\n --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\version.rs:8:3\n  |\n8 | #[derive(Clone, Debug, PartialEq, Eq)]\n  |   ^^^^^^\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": null,
                "level": "error",
                "message": "cannot find attribute `derive` in this scope",
                "spans": [
                  {
                    "byte_end": 108,
                    "byte_start": 102,
                    "column_end": 9,
                    "column_start": 3,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\version.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 8,
                    "line_start": 8,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 9,
                        "highlight_start": 3,
                        "text": "#[derive(Clone, Debug, PartialEq, Eq)]"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#autocfg@0.1.7",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "autocfg",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0412]: cannot find type `Option` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\src\\error.rs:18:24\n   |\n18 |     fn cause(&self) -> Option<&error::Error> {\n   |                        ^^^^^^ not found in this scope\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0412",
                  "explanation": "A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"
                },
                "level": "error",
                "message": "cannot find type `Option` in this scope",
                "spans": [
                  {
                    "byte_end": 307,
                    "byte_start": 301,
                    "column_end": 30,
                    "column_start": 24,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\src\\error.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 18,
                    "line_start": 18,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 30,
                        "highlight_start": 24,
                        "text": "    fn cause(&self) -> Option<&error::Error> {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#autocfg@0.1.7",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "autocfg",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0425]: cannot find value `None` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\src\\error.rs:23:36\n   |\n23 |             ErrorKind::Other(_) => None,\n   |                                    ^^^^ not found in this scope\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0425",
                  "explanation": "An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"
                },
                "level": "error",
                "message": "cannot find value `None` in this scope",
                "spans": [
                  {
                    "byte_end": 528,
                    "byte_start": 524,
                    "column_end": 40,
                    "column_start": 36,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\src\\error.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 23,
                    "line_start": 23,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 40,
                        "highlight_start": 36,
                        "text": "            ErrorKind::Other(_) => None,"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#autocfg@0.1.7",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "autocfg",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0412]: cannot find type `Result` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\src\\error.rs:29:46\n   |\n29 |     fn fmt(&self, f: &mut fmt::Formatter) -> Result<(), fmt::Error> {\n   |                                              ^^^^^^ not found in this scope\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0412",
                  "explanation": "A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"
                },
                "level": "error",
                "message": "cannot find type `Result` in this scope",
                "spans": [
                  {
                    "byte_end": 630,
                    "byte_start": 624,
                    "column_end": 52,
                    "column_start": 46,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\src\\error.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 29,
                    "line_start": 29,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 52,
                        "highlight_start": 46,
                        "text": "    fn fmt(&self, f: &mut fmt::Formatter) -> Result<(), fmt::Error> {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#autocfg@0.1.7",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "autocfg",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0412]: cannot find type `Result` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\src\\version.rs:25:40\n   |\n25 |     pub fn from_rustc(rustc: &Path) -> Result<Self, Error> {\n   |                                        ^^^^^^ not found in this scope\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0412",
                  "explanation": "A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"
                },
                "level": "error",
                "message": "cannot find type `Result` in this scope",
                "spans": [
                  {
                    "byte_end": 603,
                    "byte_start": 597,
                    "column_end": 46,
                    "column_start": 40,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\src\\version.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 25,
                    "line_start": 25,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 46,
                        "highlight_start": 40,
                        "text": "    pub fn from_rustc(rustc: &Path) -> Result<Self, Error> {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#autocfg@0.1.7",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "autocfg",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0531]: cannot find tuple struct or tuple variant `Ok` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\src\\lib.rs:48:13\n   |\n48 |               Ok(value) => value,\n   |               ^^ not found in this scope\n   |\n  ::: C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\src\\version.rs:27:22\n   |\n27 |           let output = try!(Command::new(rustc)\n   |  ______________________-\n28 | |             .args(&[\"--version\", \"--verbose\"])\n29 | |             .output()\n30 | |             .map_err(error::from_io));\n   | |_____________________________________- in this macro invocation\n   |\n   = note: this error originates in the macro `try` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0531",
                  "explanation": "An unknown tuple struct/variant has been used.\n\nErroneous code example:\n\n```compile_fail,E0531\nlet Type(x) = Type(12); // error!\nmatch Bar(12) {\n    Bar(x) => {} // error!\n    _ => {}\n}\n```\n\nIn most cases, it's either a forgotten import or a typo. However, let's look at\nhow you can have such a type:\n\n```edition2018\nstruct Type(u32); // this is a tuple struct\n\nenum Foo {\n    Bar(u32), // this is a tuple variant\n}\n\nuse Foo::*; // To use Foo's variant directly, we need to import them in\n            // the scope.\n```\n\nEither way, it should work fine with our previous code:\n\n```edition2018\nstruct Type(u32);\n\nenum Foo {\n    Bar(u32),\n}\nuse Foo::*;\n\nlet Type(x) = Type(12); // ok!\nmatch Type(12) {\n    Type(x) => {} // ok!\n    _ => {}\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find tuple struct or tuple variant `Ok` in this scope",
                "spans": [
                  {
                    "byte_end": 1567,
                    "byte_start": 1565,
                    "column_end": 15,
                    "column_start": 13,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 1502,
                        "byte_start": 1486,
                        "column_end": 17,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\src\\lib.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 45,
                        "line_start": 45,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 17,
                            "highlight_start": 1,
                            "text": "macro_rules! try {"
                          }
                        ]
                      },
                      "macro_decl_name": "try!",
                      "span": {
                        "byte_end": 810,
                        "byte_start": 679,
                        "column_end": 38,
                        "column_start": 22,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\src\\version.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 30,
                        "line_start": 27,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 46,
                            "highlight_start": 22,
                            "text": "        let output = try!(Command::new(rustc)"
                          },
                          {
                            "highlight_end": 47,
                            "highlight_start": 1,
                            "text": "            .args(&[\"--version\", \"--verbose\"])"
                          },
                          {
                            "highlight_end": 22,
                            "highlight_start": 1,
                            "text": "            .output()"
                          },
                          {
                            "highlight_end": 38,
                            "highlight_start": 1,
                            "text": "            .map_err(error::from_io));"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 48,
                    "line_start": 48,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 15,
                        "highlight_start": 13,
                        "text": "            Ok(value) => value,"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#autocfg@0.1.7",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "autocfg",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0531]: cannot find tuple struct or tuple variant `Err` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\src\\lib.rs:49:13\n   |\n49 |               Err(error) => return Err(error),\n   |               ^^^ not found in this scope\n   |\n  ::: C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\src\\version.rs:27:22\n   |\n27 |           let output = try!(Command::new(rustc)\n   |  ______________________-\n28 | |             .args(&[\"--version\", \"--verbose\"])\n29 | |             .output()\n30 | |             .map_err(error::from_io));\n   | |_____________________________________- in this macro invocation\n   |\n   = note: this error originates in the macro `try` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0531",
                  "explanation": "An unknown tuple struct/variant has been used.\n\nErroneous code example:\n\n```compile_fail,E0531\nlet Type(x) = Type(12); // error!\nmatch Bar(12) {\n    Bar(x) => {} // error!\n    _ => {}\n}\n```\n\nIn most cases, it's either a forgotten import or a typo. However, let's look at\nhow you can have such a type:\n\n```edition2018\nstruct Type(u32); // this is a tuple struct\n\nenum Foo {\n    Bar(u32), // this is a tuple variant\n}\n\nuse Foo::*; // To use Foo's variant directly, we need to import them in\n            // the scope.\n```\n\nEither way, it should work fine with our previous code:\n\n```edition2018\nstruct Type(u32);\n\nenum Foo {\n    Bar(u32),\n}\nuse Foo::*;\n\nlet Type(x) = Type(12); // ok!\nmatch Type(12) {\n    Type(x) => {} // ok!\n    _ => {}\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find tuple struct or tuple variant `Err` in this scope",
                "spans": [
                  {
                    "byte_end": 1600,
                    "byte_start": 1597,
                    "column_end": 16,
                    "column_start": 13,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 1502,
                        "byte_start": 1486,
                        "column_end": 17,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\src\\lib.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 45,
                        "line_start": 45,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 17,
                            "highlight_start": 1,
                            "text": "macro_rules! try {"
                          }
                        ]
                      },
                      "macro_decl_name": "try!",
                      "span": {
                        "byte_end": 810,
                        "byte_start": 679,
                        "column_end": 38,
                        "column_start": 22,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\src\\version.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 30,
                        "line_start": 27,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 46,
                            "highlight_start": 22,
                            "text": "        let output = try!(Command::new(rustc)"
                          },
                          {
                            "highlight_end": 47,
                            "highlight_start": 1,
                            "text": "            .args(&[\"--version\", \"--verbose\"])"
                          },
                          {
                            "highlight_end": 22,
                            "highlight_start": 1,
                            "text": "            .output()"
                          },
                          {
                            "highlight_end": 38,
                            "highlight_start": 1,
                            "text": "            .map_err(error::from_io));"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 49,
                    "line_start": 49,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 16,
                        "highlight_start": 13,
                        "text": "            Err(error) => return Err(error),"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#autocfg@0.1.7",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "autocfg",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0531]: cannot find tuple struct or tuple variant `Ok` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\src\\lib.rs:48:13\n   |\n48 |             Ok(value) => value,\n   |             ^^ not found in this scope\n   |\n  ::: C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\src\\version.rs:34:22\n   |\n34 |         let output = try!(str::from_utf8(&output.stdout).map_err(error::from_utf8));\n   |                      -------------------------------------------------------------- in this macro invocation\n   |\n   = note: this error originates in the macro `try` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0531",
                  "explanation": "An unknown tuple struct/variant has been used.\n\nErroneous code example:\n\n```compile_fail,E0531\nlet Type(x) = Type(12); // error!\nmatch Bar(12) {\n    Bar(x) => {} // error!\n    _ => {}\n}\n```\n\nIn most cases, it's either a forgotten import or a typo. However, let's look at\nhow you can have such a type:\n\n```edition2018\nstruct Type(u32); // this is a tuple struct\n\nenum Foo {\n    Bar(u32), // this is a tuple variant\n}\n\nuse Foo::*; // To use Foo's variant directly, we need to import them in\n            // the scope.\n```\n\nEither way, it should work fine with our previous code:\n\n```edition2018\nstruct Type(u32);\n\nenum Foo {\n    Bar(u32),\n}\nuse Foo::*;\n\nlet Type(x) = Type(12); // ok!\nmatch Type(12) {\n    Type(x) => {} // ok!\n    _ => {}\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find tuple struct or tuple variant `Ok` in this scope",
                "spans": [
                  {
                    "byte_end": 1567,
                    "byte_start": 1565,
                    "column_end": 15,
                    "column_start": 13,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 1502,
                        "byte_start": 1486,
                        "column_end": 17,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\src\\lib.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 45,
                        "line_start": 45,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 17,
                            "highlight_start": 1,
                            "text": "macro_rules! try {"
                          }
                        ]
                      },
                      "macro_decl_name": "try!",
                      "span": {
                        "byte_end": 1011,
                        "byte_start": 949,
                        "column_end": 84,
                        "column_start": 22,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\src\\version.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 34,
                        "line_start": 34,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 84,
                            "highlight_start": 22,
                            "text": "        let output = try!(str::from_utf8(&output.stdout).map_err(error::from_utf8));"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 48,
                    "line_start": 48,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 15,
                        "highlight_start": 13,
                        "text": "            Ok(value) => value,"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#autocfg@0.1.7",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "autocfg",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0531]: cannot find tuple struct or tuple variant `Err` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\src\\lib.rs:49:13\n   |\n49 |             Err(error) => return Err(error),\n   |             ^^^ not found in this scope\n   |\n  ::: C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\src\\version.rs:34:22\n   |\n34 |         let output = try!(str::from_utf8(&output.stdout).map_err(error::from_utf8));\n   |                      -------------------------------------------------------------- in this macro invocation\n   |\n   = note: this error originates in the macro `try` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0531",
                  "explanation": "An unknown tuple struct/variant has been used.\n\nErroneous code example:\n\n```compile_fail,E0531\nlet Type(x) = Type(12); // error!\nmatch Bar(12) {\n    Bar(x) => {} // error!\n    _ => {}\n}\n```\n\nIn most cases, it's either a forgotten import or a typo. However, let's look at\nhow you can have such a type:\n\n```edition2018\nstruct Type(u32); // this is a tuple struct\n\nenum Foo {\n    Bar(u32), // this is a tuple variant\n}\n\nuse Foo::*; // To use Foo's variant directly, we need to import them in\n            // the scope.\n```\n\nEither way, it should work fine with our previous code:\n\n```edition2018\nstruct Type(u32);\n\nenum Foo {\n    Bar(u32),\n}\nuse Foo::*;\n\nlet Type(x) = Type(12); // ok!\nmatch Type(12) {\n    Type(x) => {} // ok!\n    _ => {}\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find tuple struct or tuple variant `Err` in this scope",
                "spans": [
                  {
                    "byte_end": 1600,
                    "byte_start": 1597,
                    "column_end": 16,
                    "column_start": 13,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 1502,
                        "byte_start": 1486,
                        "column_end": 17,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\src\\lib.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 45,
                        "line_start": 45,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 17,
                            "highlight_start": 1,
                            "text": "macro_rules! try {"
                          }
                        ]
                      },
                      "macro_decl_name": "try!",
                      "span": {
                        "byte_end": 1011,
                        "byte_start": 949,
                        "column_end": 84,
                        "column_start": 22,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\src\\version.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 34,
                        "line_start": 34,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 84,
                            "highlight_start": 22,
                            "text": "        let output = try!(str::from_utf8(&output.stdout).map_err(error::from_utf8));"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 49,
                    "line_start": 49,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 16,
                        "highlight_start": 13,
                        "text": "            Err(error) => return Err(error),"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#autocfg@0.1.7",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "autocfg",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0531]: cannot find tuple struct or tuple variant `Some` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\src\\version.rs:38:13\n   |\n38 |             Some(line) => &line[\"release: \".len()..],\n   |             ^^^^ not found in this scope\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0531",
                  "explanation": "An unknown tuple struct/variant has been used.\n\nErroneous code example:\n\n```compile_fail,E0531\nlet Type(x) = Type(12); // error!\nmatch Bar(12) {\n    Bar(x) => {} // error!\n    _ => {}\n}\n```\n\nIn most cases, it's either a forgotten import or a typo. However, let's look at\nhow you can have such a type:\n\n```edition2018\nstruct Type(u32); // this is a tuple struct\n\nenum Foo {\n    Bar(u32), // this is a tuple variant\n}\n\nuse Foo::*; // To use Foo's variant directly, we need to import them in\n            // the scope.\n```\n\nEither way, it should work fine with our previous code:\n\n```edition2018\nstruct Type(u32);\n\nenum Foo {\n    Bar(u32),\n}\nuse Foo::*;\n\nlet Type(x) = Type(12); // ok!\nmatch Type(12) {\n    Type(x) => {} // ok!\n    _ => {}\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find tuple struct or tuple variant `Some` in this scope",
                "spans": [
                  {
                    "byte_end": 1182,
                    "byte_start": 1178,
                    "column_end": 17,
                    "column_start": 13,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\src\\version.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 38,
                    "line_start": 38,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 17,
                        "highlight_start": 13,
                        "text": "            Some(line) => &line[\"release: \".len()..],"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#autocfg@0.1.7",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "autocfg",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0531]: cannot find tuple struct or tuple variant `Some` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\src\\version.rs:44:13\n   |\n44 |             Some(i) => &release[..i],\n   |             ^^^^ not found in this scope\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0531",
                  "explanation": "An unknown tuple struct/variant has been used.\n\nErroneous code example:\n\n```compile_fail,E0531\nlet Type(x) = Type(12); // error!\nmatch Bar(12) {\n    Bar(x) => {} // error!\n    _ => {}\n}\n```\n\nIn most cases, it's either a forgotten import or a typo. However, let's look at\nhow you can have such a type:\n\n```edition2018\nstruct Type(u32); // this is a tuple struct\n\nenum Foo {\n    Bar(u32), // this is a tuple variant\n}\n\nuse Foo::*; // To use Foo's variant directly, we need to import them in\n            // the scope.\n```\n\nEither way, it should work fine with our previous code:\n\n```edition2018\nstruct Type(u32);\n\nenum Foo {\n    Bar(u32),\n}\nuse Foo::*;\n\nlet Type(x) = Type(12); // ok!\nmatch Type(12) {\n    Type(x) => {} // ok!\n    _ => {}\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find tuple struct or tuple variant `Some` in this scope",
                "spans": [
                  {
                    "byte_end": 1449,
                    "byte_start": 1445,
                    "column_end": 17,
                    "column_start": 13,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\src\\version.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 44,
                    "line_start": 44,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 17,
                        "highlight_start": 13,
                        "text": "            Some(i) => &release[..i],"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#autocfg@0.1.7",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "autocfg",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0531]: cannot find tuple struct or tuple variant `Ok` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\src\\lib.rs:48:13\n   |\n48 |             Ok(value) => value,\n   |             ^^ not found in this scope\n   |\n  ::: C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\src\\version.rs:50:21\n   |\n50 |         let major = try!(iter.next().ok_or(error::from_str(\"missing major version\")));\n   |                     ----------------------------------------------------------------- in this macro invocation\n   |\n   = note: this error originates in the macro `try` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0531",
                  "explanation": "An unknown tuple struct/variant has been used.\n\nErroneous code example:\n\n```compile_fail,E0531\nlet Type(x) = Type(12); // error!\nmatch Bar(12) {\n    Bar(x) => {} // error!\n    _ => {}\n}\n```\n\nIn most cases, it's either a forgotten import or a typo. However, let's look at\nhow you can have such a type:\n\n```edition2018\nstruct Type(u32); // this is a tuple struct\n\nenum Foo {\n    Bar(u32), // this is a tuple variant\n}\n\nuse Foo::*; // To use Foo's variant directly, we need to import them in\n            // the scope.\n```\n\nEither way, it should work fine with our previous code:\n\n```edition2018\nstruct Type(u32);\n\nenum Foo {\n    Bar(u32),\n}\nuse Foo::*;\n\nlet Type(x) = Type(12); // ok!\nmatch Type(12) {\n    Type(x) => {} // ok!\n    _ => {}\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find tuple struct or tuple variant `Ok` in this scope",
                "spans": [
                  {
                    "byte_end": 1567,
                    "byte_start": 1565,
                    "column_end": 15,
                    "column_start": 13,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 1502,
                        "byte_start": 1486,
                        "column_end": 17,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\src\\lib.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 45,
                        "line_start": 45,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 17,
                            "highlight_start": 1,
                            "text": "macro_rules! try {"
                          }
                        ]
                      },
                      "macro_decl_name": "try!",
                      "span": {
                        "byte_end": 1697,
                        "byte_start": 1632,
                        "column_end": 86,
                        "column_start": 21,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\src\\version.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 50,
                        "line_start": 50,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 86,
                            "highlight_start": 21,
                            "text": "        let major = try!(iter.next().ok_or(error::from_str(\"missing major version\")));"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 48,
                    "line_start": 48,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 15,
                        "highlight_start": 13,
                        "text": "            Ok(value) => value,"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#autocfg@0.1.7",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "autocfg",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0531]: cannot find tuple struct or tuple variant `Err` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\src\\lib.rs:49:13\n   |\n49 |             Err(error) => return Err(error),\n   |             ^^^ not found in this scope\n   |\n  ::: C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\src\\version.rs:50:21\n   |\n50 |         let major = try!(iter.next().ok_or(error::from_str(\"missing major version\")));\n   |                     ----------------------------------------------------------------- in this macro invocation\n   |\n   = note: this error originates in the macro `try` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0531",
                  "explanation": "An unknown tuple struct/variant has been used.\n\nErroneous code example:\n\n```compile_fail,E0531\nlet Type(x) = Type(12); // error!\nmatch Bar(12) {\n    Bar(x) => {} // error!\n    _ => {}\n}\n```\n\nIn most cases, it's either a forgotten import or a typo. However, let's look at\nhow you can have such a type:\n\n```edition2018\nstruct Type(u32); // this is a tuple struct\n\nenum Foo {\n    Bar(u32), // this is a tuple variant\n}\n\nuse Foo::*; // To use Foo's variant directly, we need to import them in\n            // the scope.\n```\n\nEither way, it should work fine with our previous code:\n\n```edition2018\nstruct Type(u32);\n\nenum Foo {\n    Bar(u32),\n}\nuse Foo::*;\n\nlet Type(x) = Type(12); // ok!\nmatch Type(12) {\n    Type(x) => {} // ok!\n    _ => {}\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find tuple struct or tuple variant `Err` in this scope",
                "spans": [
                  {
                    "byte_end": 1600,
                    "byte_start": 1597,
                    "column_end": 16,
                    "column_start": 13,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 1502,
                        "byte_start": 1486,
                        "column_end": 17,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\src\\lib.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 45,
                        "line_start": 45,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 17,
                            "highlight_start": 1,
                            "text": "macro_rules! try {"
                          }
                        ]
                      },
                      "macro_decl_name": "try!",
                      "span": {
                        "byte_end": 1697,
                        "byte_start": 1632,
                        "column_end": 86,
                        "column_start": 21,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\src\\version.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 50,
                        "line_start": 50,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 86,
                            "highlight_start": 21,
                            "text": "        let major = try!(iter.next().ok_or(error::from_str(\"missing major version\")));"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 49,
                    "line_start": 49,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 16,
                        "highlight_start": 13,
                        "text": "            Err(error) => return Err(error),"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#autocfg@0.1.7",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "autocfg",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0531]: cannot find tuple struct or tuple variant `Ok` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\src\\lib.rs:48:13\n   |\n48 |             Ok(value) => value,\n   |             ^^ not found in this scope\n   |\n  ::: C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\src\\version.rs:51:21\n   |\n51 |         let minor = try!(iter.next().ok_or(error::from_str(\"missing minor version\")));\n   |                     ----------------------------------------------------------------- in this macro invocation\n   |\n   = note: this error originates in the macro `try` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0531",
                  "explanation": "An unknown tuple struct/variant has been used.\n\nErroneous code example:\n\n```compile_fail,E0531\nlet Type(x) = Type(12); // error!\nmatch Bar(12) {\n    Bar(x) => {} // error!\n    _ => {}\n}\n```\n\nIn most cases, it's either a forgotten import or a typo. However, let's look at\nhow you can have such a type:\n\n```edition2018\nstruct Type(u32); // this is a tuple struct\n\nenum Foo {\n    Bar(u32), // this is a tuple variant\n}\n\nuse Foo::*; // To use Foo's variant directly, we need to import them in\n            // the scope.\n```\n\nEither way, it should work fine with our previous code:\n\n```edition2018\nstruct Type(u32);\n\nenum Foo {\n    Bar(u32),\n}\nuse Foo::*;\n\nlet Type(x) = Type(12); // ok!\nmatch Type(12) {\n    Type(x) => {} // ok!\n    _ => {}\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find tuple struct or tuple variant `Ok` in this scope",
                "spans": [
                  {
                    "byte_end": 1567,
                    "byte_start": 1565,
                    "column_end": 15,
                    "column_start": 13,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 1502,
                        "byte_start": 1486,
                        "column_end": 17,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\src\\lib.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 45,
                        "line_start": 45,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 17,
                            "highlight_start": 1,
                            "text": "macro_rules! try {"
                          }
                        ]
                      },
                      "macro_decl_name": "try!",
                      "span": {
                        "byte_end": 1784,
                        "byte_start": 1719,
                        "column_end": 86,
                        "column_start": 21,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\src\\version.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 51,
                        "line_start": 51,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 86,
                            "highlight_start": 21,
                            "text": "        let minor = try!(iter.next().ok_or(error::from_str(\"missing minor version\")));"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 48,
                    "line_start": 48,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 15,
                        "highlight_start": 13,
                        "text": "            Ok(value) => value,"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#autocfg@0.1.7",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "autocfg",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0531]: cannot find tuple struct or tuple variant `Err` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\src\\lib.rs:49:13\n   |\n49 |             Err(error) => return Err(error),\n   |             ^^^ not found in this scope\n   |\n  ::: C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\src\\version.rs:51:21\n   |\n51 |         let minor = try!(iter.next().ok_or(error::from_str(\"missing minor version\")));\n   |                     ----------------------------------------------------------------- in this macro invocation\n   |\n   = note: this error originates in the macro `try` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0531",
                  "explanation": "An unknown tuple struct/variant has been used.\n\nErroneous code example:\n\n```compile_fail,E0531\nlet Type(x) = Type(12); // error!\nmatch Bar(12) {\n    Bar(x) => {} // error!\n    _ => {}\n}\n```\n\nIn most cases, it's either a forgotten import or a typo. However, let's look at\nhow you can have such a type:\n\n```edition2018\nstruct Type(u32); // this is a tuple struct\n\nenum Foo {\n    Bar(u32), // this is a tuple variant\n}\n\nuse Foo::*; // To use Foo's variant directly, we need to import them in\n            // the scope.\n```\n\nEither way, it should work fine with our previous code:\n\n```edition2018\nstruct Type(u32);\n\nenum Foo {\n    Bar(u32),\n}\nuse Foo::*;\n\nlet Type(x) = Type(12); // ok!\nmatch Type(12) {\n    Type(x) => {} // ok!\n    _ => {}\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find tuple struct or tuple variant `Err` in this scope",
                "spans": [
                  {
                    "byte_end": 1600,
                    "byte_start": 1597,
                    "column_end": 16,
                    "column_start": 13,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 1502,
                        "byte_start": 1486,
                        "column_end": 17,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\src\\lib.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 45,
                        "line_start": 45,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 17,
                            "highlight_start": 1,
                            "text": "macro_rules! try {"
                          }
                        ]
                      },
                      "macro_decl_name": "try!",
                      "span": {
                        "byte_end": 1784,
                        "byte_start": 1719,
                        "column_end": 86,
                        "column_start": 21,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\src\\version.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 51,
                        "line_start": 51,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 86,
                            "highlight_start": 21,
                            "text": "        let minor = try!(iter.next().ok_or(error::from_str(\"missing minor version\")));"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 49,
                    "line_start": 49,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 16,
                        "highlight_start": 13,
                        "text": "            Err(error) => return Err(error),"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#autocfg@0.1.7",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "autocfg",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0531]: cannot find tuple struct or tuple variant `Ok` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\src\\lib.rs:48:13\n   |\n48 |             Ok(value) => value,\n   |             ^^ not found in this scope\n   |\n  ::: C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\src\\version.rs:52:21\n   |\n52 |         let patch = try!(iter.next().ok_or(error::from_str(\"missing patch version\")));\n   |                     ----------------------------------------------------------------- in this macro invocation\n   |\n   = note: this error originates in the macro `try` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0531",
                  "explanation": "An unknown tuple struct/variant has been used.\n\nErroneous code example:\n\n```compile_fail,E0531\nlet Type(x) = Type(12); // error!\nmatch Bar(12) {\n    Bar(x) => {} // error!\n    _ => {}\n}\n```\n\nIn most cases, it's either a forgotten import or a typo. However, let's look at\nhow you can have such a type:\n\n```edition2018\nstruct Type(u32); // this is a tuple struct\n\nenum Foo {\n    Bar(u32), // this is a tuple variant\n}\n\nuse Foo::*; // To use Foo's variant directly, we need to import them in\n            // the scope.\n```\n\nEither way, it should work fine with our previous code:\n\n```edition2018\nstruct Type(u32);\n\nenum Foo {\n    Bar(u32),\n}\nuse Foo::*;\n\nlet Type(x) = Type(12); // ok!\nmatch Type(12) {\n    Type(x) => {} // ok!\n    _ => {}\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find tuple struct or tuple variant `Ok` in this scope",
                "spans": [
                  {
                    "byte_end": 1567,
                    "byte_start": 1565,
                    "column_end": 15,
                    "column_start": 13,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 1502,
                        "byte_start": 1486,
                        "column_end": 17,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\src\\lib.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 45,
                        "line_start": 45,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 17,
                            "highlight_start": 1,
                            "text": "macro_rules! try {"
                          }
                        ]
                      },
                      "macro_decl_name": "try!",
                      "span": {
                        "byte_end": 1871,
                        "byte_start": 1806,
                        "column_end": 86,
                        "column_start": 21,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\src\\version.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 52,
                        "line_start": 52,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 86,
                            "highlight_start": 21,
                            "text": "        let patch = try!(iter.next().ok_or(error::from_str(\"missing patch version\")));"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 48,
                    "line_start": 48,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 15,
                        "highlight_start": 13,
                        "text": "            Ok(value) => value,"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#autocfg@0.1.7",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "autocfg",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0531]: cannot find tuple struct or tuple variant `Err` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\src\\lib.rs:49:13\n   |\n49 |             Err(error) => return Err(error),\n   |             ^^^ not found in this scope\n   |\n  ::: C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\src\\version.rs:52:21\n   |\n52 |         let patch = try!(iter.next().ok_or(error::from_str(\"missing patch version\")));\n   |                     ----------------------------------------------------------------- in this macro invocation\n   |\n   = note: this error originates in the macro `try` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0531",
                  "explanation": "An unknown tuple struct/variant has been used.\n\nErroneous code example:\n\n```compile_fail,E0531\nlet Type(x) = Type(12); // error!\nmatch Bar(12) {\n    Bar(x) => {} // error!\n    _ => {}\n}\n```\n\nIn most cases, it's either a forgotten import or a typo. However, let's look at\nhow you can have such a type:\n\n```edition2018\nstruct Type(u32); // this is a tuple struct\n\nenum Foo {\n    Bar(u32), // this is a tuple variant\n}\n\nuse Foo::*; // To use Foo's variant directly, we need to import them in\n            // the scope.\n```\n\nEither way, it should work fine with our previous code:\n\n```edition2018\nstruct Type(u32);\n\nenum Foo {\n    Bar(u32),\n}\nuse Foo::*;\n\nlet Type(x) = Type(12); // ok!\nmatch Type(12) {\n    Type(x) => {} // ok!\n    _ => {}\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find tuple struct or tuple variant `Err` in this scope",
                "spans": [
                  {
                    "byte_end": 1600,
                    "byte_start": 1597,
                    "column_end": 16,
                    "column_start": 13,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 1502,
                        "byte_start": 1486,
                        "column_end": 17,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\src\\lib.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 45,
                        "line_start": 45,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 17,
                            "highlight_start": 1,
                            "text": "macro_rules! try {"
                          }
                        ]
                      },
                      "macro_decl_name": "try!",
                      "span": {
                        "byte_end": 1871,
                        "byte_start": 1806,
                        "column_end": 86,
                        "column_start": 21,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\src\\version.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 52,
                        "line_start": 52,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 86,
                            "highlight_start": 21,
                            "text": "        let patch = try!(iter.next().ok_or(error::from_str(\"missing patch version\")));"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 49,
                    "line_start": 49,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 16,
                        "highlight_start": 13,
                        "text": "            Err(error) => return Err(error),"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#autocfg@0.1.7",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "autocfg",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0531]: cannot find tuple struct or tuple variant `Ok` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\src\\lib.rs:48:13\n   |\n48 |             Ok(value) => value,\n   |             ^^ not found in this scope\n   |\n  ::: C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\src\\version.rs:55:13\n   |\n55 |             try!(major.parse().map_err(error::from_num)),\n   |             -------------------------------------------- in this macro invocation\n   |\n   = note: this error originates in the macro `try` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0531",
                  "explanation": "An unknown tuple struct/variant has been used.\n\nErroneous code example:\n\n```compile_fail,E0531\nlet Type(x) = Type(12); // error!\nmatch Bar(12) {\n    Bar(x) => {} // error!\n    _ => {}\n}\n```\n\nIn most cases, it's either a forgotten import or a typo. However, let's look at\nhow you can have such a type:\n\n```edition2018\nstruct Type(u32); // this is a tuple struct\n\nenum Foo {\n    Bar(u32), // this is a tuple variant\n}\n\nuse Foo::*; // To use Foo's variant directly, we need to import them in\n            // the scope.\n```\n\nEither way, it should work fine with our previous code:\n\n```edition2018\nstruct Type(u32);\n\nenum Foo {\n    Bar(u32),\n}\nuse Foo::*;\n\nlet Type(x) = Type(12); // ok!\nmatch Type(12) {\n    Type(x) => {} // ok!\n    _ => {}\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find tuple struct or tuple variant `Ok` in this scope",
                "spans": [
                  {
                    "byte_end": 1567,
                    "byte_start": 1565,
                    "column_end": 15,
                    "column_start": 13,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 1502,
                        "byte_start": 1486,
                        "column_end": 17,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\src\\lib.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 45,
                        "line_start": 45,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 17,
                            "highlight_start": 1,
                            "text": "macro_rules! try {"
                          }
                        ]
                      },
                      "macro_decl_name": "try!",
                      "span": {
                        "byte_end": 1955,
                        "byte_start": 1911,
                        "column_end": 57,
                        "column_start": 13,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\src\\version.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 55,
                        "line_start": 55,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 57,
                            "highlight_start": 13,
                            "text": "            try!(major.parse().map_err(error::from_num)),"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 48,
                    "line_start": 48,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 15,
                        "highlight_start": 13,
                        "text": "            Ok(value) => value,"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#autocfg@0.1.7",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "autocfg",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0531]: cannot find tuple struct or tuple variant `Err` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\src\\lib.rs:49:13\n   |\n49 |             Err(error) => return Err(error),\n   |             ^^^ not found in this scope\n   |\n  ::: C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\src\\version.rs:55:13\n   |\n55 |             try!(major.parse().map_err(error::from_num)),\n   |             -------------------------------------------- in this macro invocation\n   |\n   = note: this error originates in the macro `try` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0531",
                  "explanation": "An unknown tuple struct/variant has been used.\n\nErroneous code example:\n\n```compile_fail,E0531\nlet Type(x) = Type(12); // error!\nmatch Bar(12) {\n    Bar(x) => {} // error!\n    _ => {}\n}\n```\n\nIn most cases, it's either a forgotten import or a typo. However, let's look at\nhow you can have such a type:\n\n```edition2018\nstruct Type(u32); // this is a tuple struct\n\nenum Foo {\n    Bar(u32), // this is a tuple variant\n}\n\nuse Foo::*; // To use Foo's variant directly, we need to import them in\n            // the scope.\n```\n\nEither way, it should work fine with our previous code:\n\n```edition2018\nstruct Type(u32);\n\nenum Foo {\n    Bar(u32),\n}\nuse Foo::*;\n\nlet Type(x) = Type(12); // ok!\nmatch Type(12) {\n    Type(x) => {} // ok!\n    _ => {}\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find tuple struct or tuple variant `Err` in this scope",
                "spans": [
                  {
                    "byte_end": 1600,
                    "byte_start": 1597,
                    "column_end": 16,
                    "column_start": 13,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 1502,
                        "byte_start": 1486,
                        "column_end": 17,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\src\\lib.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 45,
                        "line_start": 45,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 17,
                            "highlight_start": 1,
                            "text": "macro_rules! try {"
                          }
                        ]
                      },
                      "macro_decl_name": "try!",
                      "span": {
                        "byte_end": 1955,
                        "byte_start": 1911,
                        "column_end": 57,
                        "column_start": 13,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\src\\version.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 55,
                        "line_start": 55,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 57,
                            "highlight_start": 13,
                            "text": "            try!(major.parse().map_err(error::from_num)),"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 49,
                    "line_start": 49,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 16,
                        "highlight_start": 13,
                        "text": "            Err(error) => return Err(error),"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#autocfg@0.1.7",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "autocfg",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0531]: cannot find tuple struct or tuple variant `Ok` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\src\\lib.rs:48:13\n   |\n48 |             Ok(value) => value,\n   |             ^^ not found in this scope\n   |\n  ::: C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\src\\version.rs:56:13\n   |\n56 |             try!(minor.parse().map_err(error::from_num)),\n   |             -------------------------------------------- in this macro invocation\n   |\n   = note: this error originates in the macro `try` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0531",
                  "explanation": "An unknown tuple struct/variant has been used.\n\nErroneous code example:\n\n```compile_fail,E0531\nlet Type(x) = Type(12); // error!\nmatch Bar(12) {\n    Bar(x) => {} // error!\n    _ => {}\n}\n```\n\nIn most cases, it's either a forgotten import or a typo. However, let's look at\nhow you can have such a type:\n\n```edition2018\nstruct Type(u32); // this is a tuple struct\n\nenum Foo {\n    Bar(u32), // this is a tuple variant\n}\n\nuse Foo::*; // To use Foo's variant directly, we need to import them in\n            // the scope.\n```\n\nEither way, it should work fine with our previous code:\n\n```edition2018\nstruct Type(u32);\n\nenum Foo {\n    Bar(u32),\n}\nuse Foo::*;\n\nlet Type(x) = Type(12); // ok!\nmatch Type(12) {\n    Type(x) => {} // ok!\n    _ => {}\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find tuple struct or tuple variant `Ok` in this scope",
                "spans": [
                  {
                    "byte_end": 1567,
                    "byte_start": 1565,
                    "column_end": 15,
                    "column_start": 13,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 1502,
                        "byte_start": 1486,
                        "column_end": 17,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\src\\lib.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 45,
                        "line_start": 45,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 17,
                            "highlight_start": 1,
                            "text": "macro_rules! try {"
                          }
                        ]
                      },
                      "macro_decl_name": "try!",
                      "span": {
                        "byte_end": 2013,
                        "byte_start": 1969,
                        "column_end": 57,
                        "column_start": 13,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\src\\version.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 56,
                        "line_start": 56,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 57,
                            "highlight_start": 13,
                            "text": "            try!(minor.parse().map_err(error::from_num)),"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 48,
                    "line_start": 48,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 15,
                        "highlight_start": 13,
                        "text": "            Ok(value) => value,"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#autocfg@0.1.7",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "autocfg",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0531]: cannot find tuple struct or tuple variant `Err` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\src\\lib.rs:49:13\n   |\n49 |             Err(error) => return Err(error),\n   |             ^^^ not found in this scope\n   |\n  ::: C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\src\\version.rs:56:13\n   |\n56 |             try!(minor.parse().map_err(error::from_num)),\n   |             -------------------------------------------- in this macro invocation\n   |\n   = note: this error originates in the macro `try` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0531",
                  "explanation": "An unknown tuple struct/variant has been used.\n\nErroneous code example:\n\n```compile_fail,E0531\nlet Type(x) = Type(12); // error!\nmatch Bar(12) {\n    Bar(x) => {} // error!\n    _ => {}\n}\n```\n\nIn most cases, it's either a forgotten import or a typo. However, let's look at\nhow you can have such a type:\n\n```edition2018\nstruct Type(u32); // this is a tuple struct\n\nenum Foo {\n    Bar(u32), // this is a tuple variant\n}\n\nuse Foo::*; // To use Foo's variant directly, we need to import them in\n            // the scope.\n```\n\nEither way, it should work fine with our previous code:\n\n```edition2018\nstruct Type(u32);\n\nenum Foo {\n    Bar(u32),\n}\nuse Foo::*;\n\nlet Type(x) = Type(12); // ok!\nmatch Type(12) {\n    Type(x) => {} // ok!\n    _ => {}\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find tuple struct or tuple variant `Err` in this scope",
                "spans": [
                  {
                    "byte_end": 1600,
                    "byte_start": 1597,
                    "column_end": 16,
                    "column_start": 13,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 1502,
                        "byte_start": 1486,
                        "column_end": 17,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\src\\lib.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 45,
                        "line_start": 45,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 17,
                            "highlight_start": 1,
                            "text": "macro_rules! try {"
                          }
                        ]
                      },
                      "macro_decl_name": "try!",
                      "span": {
                        "byte_end": 2013,
                        "byte_start": 1969,
                        "column_end": 57,
                        "column_start": 13,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\src\\version.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 56,
                        "line_start": 56,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 57,
                            "highlight_start": 13,
                            "text": "            try!(minor.parse().map_err(error::from_num)),"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 49,
                    "line_start": 49,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 16,
                        "highlight_start": 13,
                        "text": "            Err(error) => return Err(error),"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#autocfg@0.1.7",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "autocfg",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0531]: cannot find tuple struct or tuple variant `Ok` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\src\\lib.rs:48:13\n   |\n48 |             Ok(value) => value,\n   |             ^^ not found in this scope\n   |\n  ::: C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\src\\version.rs:57:13\n   |\n57 |             try!(patch.parse().map_err(error::from_num)),\n   |             -------------------------------------------- in this macro invocation\n   |\n   = note: this error originates in the macro `try` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0531",
                  "explanation": "An unknown tuple struct/variant has been used.\n\nErroneous code example:\n\n```compile_fail,E0531\nlet Type(x) = Type(12); // error!\nmatch Bar(12) {\n    Bar(x) => {} // error!\n    _ => {}\n}\n```\n\nIn most cases, it's either a forgotten import or a typo. However, let's look at\nhow you can have such a type:\n\n```edition2018\nstruct Type(u32); // this is a tuple struct\n\nenum Foo {\n    Bar(u32), // this is a tuple variant\n}\n\nuse Foo::*; // To use Foo's variant directly, we need to import them in\n            // the scope.\n```\n\nEither way, it should work fine with our previous code:\n\n```edition2018\nstruct Type(u32);\n\nenum Foo {\n    Bar(u32),\n}\nuse Foo::*;\n\nlet Type(x) = Type(12); // ok!\nmatch Type(12) {\n    Type(x) => {} // ok!\n    _ => {}\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find tuple struct or tuple variant `Ok` in this scope",
                "spans": [
                  {
                    "byte_end": 1567,
                    "byte_start": 1565,
                    "column_end": 15,
                    "column_start": 13,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 1502,
                        "byte_start": 1486,
                        "column_end": 17,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\src\\lib.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 45,
                        "line_start": 45,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 17,
                            "highlight_start": 1,
                            "text": "macro_rules! try {"
                          }
                        ]
                      },
                      "macro_decl_name": "try!",
                      "span": {
                        "byte_end": 2071,
                        "byte_start": 2027,
                        "column_end": 57,
                        "column_start": 13,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\src\\version.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 57,
                        "line_start": 57,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 57,
                            "highlight_start": 13,
                            "text": "            try!(patch.parse().map_err(error::from_num)),"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 48,
                    "line_start": 48,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 15,
                        "highlight_start": 13,
                        "text": "            Ok(value) => value,"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#autocfg@0.1.7",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "autocfg",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0531]: cannot find tuple struct or tuple variant `Err` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\src\\lib.rs:49:13\n   |\n49 |             Err(error) => return Err(error),\n   |             ^^^ not found in this scope\n   |\n  ::: C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\src\\version.rs:57:13\n   |\n57 |             try!(patch.parse().map_err(error::from_num)),\n   |             -------------------------------------------- in this macro invocation\n   |\n   = note: this error originates in the macro `try` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0531",
                  "explanation": "An unknown tuple struct/variant has been used.\n\nErroneous code example:\n\n```compile_fail,E0531\nlet Type(x) = Type(12); // error!\nmatch Bar(12) {\n    Bar(x) => {} // error!\n    _ => {}\n}\n```\n\nIn most cases, it's either a forgotten import or a typo. However, let's look at\nhow you can have such a type:\n\n```edition2018\nstruct Type(u32); // this is a tuple struct\n\nenum Foo {\n    Bar(u32), // this is a tuple variant\n}\n\nuse Foo::*; // To use Foo's variant directly, we need to import them in\n            // the scope.\n```\n\nEither way, it should work fine with our previous code:\n\n```edition2018\nstruct Type(u32);\n\nenum Foo {\n    Bar(u32),\n}\nuse Foo::*;\n\nlet Type(x) = Type(12); // ok!\nmatch Type(12) {\n    Type(x) => {} // ok!\n    _ => {}\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find tuple struct or tuple variant `Err` in this scope",
                "spans": [
                  {
                    "byte_end": 1600,
                    "byte_start": 1597,
                    "column_end": 16,
                    "column_start": 13,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 1502,
                        "byte_start": 1486,
                        "column_end": 17,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\src\\lib.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 45,
                        "line_start": 45,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 17,
                            "highlight_start": 1,
                            "text": "macro_rules! try {"
                          }
                        ]
                      },
                      "macro_decl_name": "try!",
                      "span": {
                        "byte_end": 2071,
                        "byte_start": 2027,
                        "column_end": 57,
                        "column_start": 13,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\src\\version.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 57,
                        "line_start": 57,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 57,
                            "highlight_start": 13,
                            "text": "            try!(patch.parse().map_err(error::from_num)),"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 49,
                    "line_start": 49,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 16,
                        "highlight_start": 13,
                        "text": "            Err(error) => return Err(error),"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#autocfg@0.1.7",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "autocfg",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0412]: cannot find type `Option` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\src\\lib.rs:79:13\n   |\n79 |     target: Option<OsString>,\n   |             ^^^^^^ not found in this scope\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0412",
                  "explanation": "A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"
                },
                "level": "error",
                "message": "cannot find type `Option` in this scope",
                "spans": [
                  {
                    "byte_end": 2205,
                    "byte_start": 2199,
                    "column_end": 19,
                    "column_start": 13,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 79,
                    "line_start": 79,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 19,
                        "highlight_start": 13,
                        "text": "    target: Option<OsString>,"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#autocfg@0.1.7",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "autocfg",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0412]: cannot find type `Option` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\src\\lib.rs:81:16\n   |\n81 |     rustflags: Option<Vec<String>>,\n   |                ^^^^^^ not found in this scope\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0412",
                  "explanation": "A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"
                },
                "level": "error",
                "message": "cannot find type `Option` in this scope",
                "spans": [
                  {
                    "byte_end": 2256,
                    "byte_start": 2250,
                    "column_end": 22,
                    "column_start": 16,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 81,
                    "line_start": 81,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 22,
                        "highlight_start": 16,
                        "text": "    rustflags: Option<Vec<String>>,"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#autocfg@0.1.7",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "autocfg",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0412]: cannot find type `Vec` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\src\\lib.rs:81:23\n   |\n81 |     rustflags: Option<Vec<String>>,\n   |                       ^^^ not found in this scope\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0412",
                  "explanation": "A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"
                },
                "level": "error",
                "message": "cannot find type `Vec` in this scope",
                "spans": [
                  {
                    "byte_end": 2260,
                    "byte_start": 2257,
                    "column_end": 26,
                    "column_start": 23,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 81,
                    "line_start": 81,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 26,
                        "highlight_start": 23,
                        "text": "    rustflags: Option<Vec<String>>,"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#autocfg@0.1.7",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "autocfg",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0412]: cannot find type `String` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\src\\lib.rs:81:27\n   |\n81 |     rustflags: Option<Vec<String>>,\n   |                           ^^^^^^ not found in this scope\n   |\nhelp: you might be missing a type parameter\n   |\n75 | pub struct AutoCfg<String> {\n   |                   ++++++++\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "you might be missing a type parameter",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 2114,
                        "byte_start": 2114,
                        "column_end": 19,
                        "column_start": 19,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 75,
                        "line_start": 75,
                        "suggested_replacement": "<String>",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 19,
                            "highlight_start": 19,
                            "text": "pub struct AutoCfg {"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0412",
                  "explanation": "A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"
                },
                "level": "error",
                "message": "cannot find type `String` in this scope",
                "spans": [
                  {
                    "byte_end": 2267,
                    "byte_start": 2261,
                    "column_end": 33,
                    "column_start": 27,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 81,
                    "line_start": 81,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 33,
                        "highlight_start": 27,
                        "text": "    rustflags: Option<Vec<String>>,"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#autocfg@0.1.7",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "autocfg",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0412]: cannot find type `Result` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\src\\lib.rs:132:21\n    |\n132 |     pub fn new() -> Result<Self, Error> {\n    |                     ^^^^^^ not found in this scope\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0412",
                  "explanation": "A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"
                },
                "level": "error",
                "message": "cannot find type `Result` in this scope",
                "spans": [
                  {
                    "byte_end": 3759,
                    "byte_start": 3753,
                    "column_end": 27,
                    "column_start": 21,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 132,
                    "line_start": 132,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 27,
                        "highlight_start": 21,
                        "text": "    pub fn new() -> Result<Self, Error> {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#autocfg@0.1.7",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "autocfg",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0531]: cannot find tuple struct or tuple variant `Some` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\src\\lib.rs:134:13\n    |\n134 |             Some(d) => Self::with_dir(d),\n    |             ^^^^ not found in this scope\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0531",
                  "explanation": "An unknown tuple struct/variant has been used.\n\nErroneous code example:\n\n```compile_fail,E0531\nlet Type(x) = Type(12); // error!\nmatch Bar(12) {\n    Bar(x) => {} // error!\n    _ => {}\n}\n```\n\nIn most cases, it's either a forgotten import or a typo. However, let's look at\nhow you can have such a type:\n\n```edition2018\nstruct Type(u32); // this is a tuple struct\n\nenum Foo {\n    Bar(u32), // this is a tuple variant\n}\n\nuse Foo::*; // To use Foo's variant directly, we need to import them in\n            // the scope.\n```\n\nEither way, it should work fine with our previous code:\n\n```edition2018\nstruct Type(u32);\n\nenum Foo {\n    Bar(u32),\n}\nuse Foo::*;\n\nlet Type(x) = Type(12); // ok!\nmatch Type(12) {\n    Type(x) => {} // ok!\n    _ => {}\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find tuple struct or tuple variant `Some` in this scope",
                "spans": [
                  {
                    "byte_end": 3830,
                    "byte_start": 3826,
                    "column_end": 17,
                    "column_start": 13,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 134,
                    "line_start": 134,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 17,
                        "highlight_start": 13,
                        "text": "            Some(d) => Self::with_dir(d),"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#autocfg@0.1.7",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "autocfg",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0405]: cannot find trait `Into` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\src\\lib.rs:147:24\n    |\n147 |     pub fn with_dir<T: Into<PathBuf>>(dir: T) -> Result<Self, Error> {\n    |                        ^^^^ not found in this scope\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0405",
                  "explanation": "The code refers to a trait that is not in scope.\n\nErroneous code example:\n\n```compile_fail,E0405\nstruct Foo;\n\nimpl SomeTrait for Foo {} // error: trait `SomeTrait` is not in scope\n```\n\nPlease verify that the name of the trait wasn't misspelled and ensure that it\nwas imported. Example:\n\n```\n# #[cfg(for_demonstration_only)]\n// solution 1:\nuse some_file::SomeTrait;\n\n// solution 2:\ntrait SomeTrait {\n    // some functions\n}\n\nstruct Foo;\n\nimpl SomeTrait for Foo { // ok!\n    // implements functions\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find trait `Into` in this scope",
                "spans": [
                  {
                    "byte_end": 4264,
                    "byte_start": 4260,
                    "column_end": 28,
                    "column_start": 24,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 147,
                    "line_start": 147,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 28,
                        "highlight_start": 24,
                        "text": "    pub fn with_dir<T: Into<PathBuf>>(dir: T) -> Result<Self, Error> {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#autocfg@0.1.7",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "autocfg",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0412]: cannot find type `Result` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\src\\lib.rs:147:50\n    |\n147 |     pub fn with_dir<T: Into<PathBuf>>(dir: T) -> Result<Self, Error> {\n    |                                                  ^^^^^^ not found in this scope\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0412",
                  "explanation": "A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"
                },
                "level": "error",
                "message": "cannot find type `Result` in this scope",
                "spans": [
                  {
                    "byte_end": 4292,
                    "byte_start": 4286,
                    "column_end": 56,
                    "column_start": 50,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 147,
                    "line_start": 147,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 56,
                        "highlight_start": 50,
                        "text": "    pub fn with_dir<T: Into<PathBuf>>(dir: T) -> Result<Self, Error> {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#autocfg@0.1.7",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "autocfg",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0531]: cannot find tuple struct or tuple variant `Ok` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\src\\lib.rs:48:13\n    |\n48  |             Ok(value) => value,\n    |             ^^ not found in this scope\n...\n150 |         let rustc_version = try!(Version::from_rustc(&rustc));\n    |                             --------------------------------- in this macro invocation\n    |\n    = note: this error originates in the macro `try` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0531",
                  "explanation": "An unknown tuple struct/variant has been used.\n\nErroneous code example:\n\n```compile_fail,E0531\nlet Type(x) = Type(12); // error!\nmatch Bar(12) {\n    Bar(x) => {} // error!\n    _ => {}\n}\n```\n\nIn most cases, it's either a forgotten import or a typo. However, let's look at\nhow you can have such a type:\n\n```edition2018\nstruct Type(u32); // this is a tuple struct\n\nenum Foo {\n    Bar(u32), // this is a tuple variant\n}\n\nuse Foo::*; // To use Foo's variant directly, we need to import them in\n            // the scope.\n```\n\nEither way, it should work fine with our previous code:\n\n```edition2018\nstruct Type(u32);\n\nenum Foo {\n    Bar(u32),\n}\nuse Foo::*;\n\nlet Type(x) = Type(12); // ok!\nmatch Type(12) {\n    Type(x) => {} // ok!\n    _ => {}\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find tuple struct or tuple variant `Ok` in this scope",
                "spans": [
                  {
                    "byte_end": 1567,
                    "byte_start": 1565,
                    "column_end": 15,
                    "column_start": 13,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 1502,
                        "byte_start": 1486,
                        "column_end": 17,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\src\\lib.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 45,
                        "line_start": 45,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 17,
                            "highlight_start": 1,
                            "text": "macro_rules! try {"
                          }
                        ]
                      },
                      "macro_decl_name": "try!",
                      "span": {
                        "byte_end": 4488,
                        "byte_start": 4455,
                        "column_end": 62,
                        "column_start": 29,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\src\\lib.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 150,
                        "line_start": 150,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 62,
                            "highlight_start": 29,
                            "text": "        let rustc_version = try!(Version::from_rustc(&rustc));"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 48,
                    "line_start": 48,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 15,
                        "highlight_start": 13,
                        "text": "            Ok(value) => value,"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#autocfg@0.1.7",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "autocfg",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0531]: cannot find tuple struct or tuple variant `Err` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\src\\lib.rs:49:13\n    |\n49  |             Err(error) => return Err(error),\n    |             ^^^ not found in this scope\n...\n150 |         let rustc_version = try!(Version::from_rustc(&rustc));\n    |                             --------------------------------- in this macro invocation\n    |\n    = note: this error originates in the macro `try` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0531",
                  "explanation": "An unknown tuple struct/variant has been used.\n\nErroneous code example:\n\n```compile_fail,E0531\nlet Type(x) = Type(12); // error!\nmatch Bar(12) {\n    Bar(x) => {} // error!\n    _ => {}\n}\n```\n\nIn most cases, it's either a forgotten import or a typo. However, let's look at\nhow you can have such a type:\n\n```edition2018\nstruct Type(u32); // this is a tuple struct\n\nenum Foo {\n    Bar(u32), // this is a tuple variant\n}\n\nuse Foo::*; // To use Foo's variant directly, we need to import them in\n            // the scope.\n```\n\nEither way, it should work fine with our previous code:\n\n```edition2018\nstruct Type(u32);\n\nenum Foo {\n    Bar(u32),\n}\nuse Foo::*;\n\nlet Type(x) = Type(12); // ok!\nmatch Type(12) {\n    Type(x) => {} // ok!\n    _ => {}\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find tuple struct or tuple variant `Err` in this scope",
                "spans": [
                  {
                    "byte_end": 1600,
                    "byte_start": 1597,
                    "column_end": 16,
                    "column_start": 13,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 1502,
                        "byte_start": 1486,
                        "column_end": 17,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\src\\lib.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 45,
                        "line_start": 45,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 17,
                            "highlight_start": 1,
                            "text": "macro_rules! try {"
                          }
                        ]
                      },
                      "macro_decl_name": "try!",
                      "span": {
                        "byte_end": 4488,
                        "byte_start": 4455,
                        "column_end": 62,
                        "column_start": 29,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\src\\lib.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 150,
                        "line_start": 150,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 62,
                            "highlight_start": 29,
                            "text": "        let rustc_version = try!(Version::from_rustc(&rustc));"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 49,
                    "line_start": 49,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 16,
                        "highlight_start": 13,
                        "text": "            Err(error) => return Err(error),"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#autocfg@0.1.7",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "autocfg",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0531]: cannot find tuple struct or tuple variant `Ok` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\src\\lib.rs:48:13\n    |\n48  |             Ok(value) => value,\n    |             ^^ not found in this scope\n...\n154 |         let meta = try!(fs::metadata(&dir).map_err(error::from_io));\n    |                    ------------------------------------------------ in this macro invocation\n    |\n    = note: this error originates in the macro `try` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0531",
                  "explanation": "An unknown tuple struct/variant has been used.\n\nErroneous code example:\n\n```compile_fail,E0531\nlet Type(x) = Type(12); // error!\nmatch Bar(12) {\n    Bar(x) => {} // error!\n    _ => {}\n}\n```\n\nIn most cases, it's either a forgotten import or a typo. However, let's look at\nhow you can have such a type:\n\n```edition2018\nstruct Type(u32); // this is a tuple struct\n\nenum Foo {\n    Bar(u32), // this is a tuple variant\n}\n\nuse Foo::*; // To use Foo's variant directly, we need to import them in\n            // the scope.\n```\n\nEither way, it should work fine with our previous code:\n\n```edition2018\nstruct Type(u32);\n\nenum Foo {\n    Bar(u32),\n}\nuse Foo::*;\n\nlet Type(x) = Type(12); // ok!\nmatch Type(12) {\n    Type(x) => {} // ok!\n    _ => {}\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find tuple struct or tuple variant `Ok` in this scope",
                "spans": [
                  {
                    "byte_end": 1567,
                    "byte_start": 1565,
                    "column_end": 15,
                    "column_start": 13,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 1502,
                        "byte_start": 1486,
                        "column_end": 17,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\src\\lib.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 45,
                        "line_start": 45,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 17,
                            "highlight_start": 1,
                            "text": "macro_rules! try {"
                          }
                        ]
                      },
                      "macro_decl_name": "try!",
                      "span": {
                        "byte_end": 4633,
                        "byte_start": 4585,
                        "column_end": 68,
                        "column_start": 20,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\src\\lib.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 154,
                        "line_start": 154,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 68,
                            "highlight_start": 20,
                            "text": "        let meta = try!(fs::metadata(&dir).map_err(error::from_io));"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 48,
                    "line_start": 48,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 15,
                        "highlight_start": 13,
                        "text": "            Ok(value) => value,"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#autocfg@0.1.7",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "autocfg",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0531]: cannot find tuple struct or tuple variant `Err` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\src\\lib.rs:49:13\n    |\n49  |             Err(error) => return Err(error),\n    |             ^^^ not found in this scope\n...\n154 |         let meta = try!(fs::metadata(&dir).map_err(error::from_io));\n    |                    ------------------------------------------------ in this macro invocation\n    |\n    = note: this error originates in the macro `try` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0531",
                  "explanation": "An unknown tuple struct/variant has been used.\n\nErroneous code example:\n\n```compile_fail,E0531\nlet Type(x) = Type(12); // error!\nmatch Bar(12) {\n    Bar(x) => {} // error!\n    _ => {}\n}\n```\n\nIn most cases, it's either a forgotten import or a typo. However, let's look at\nhow you can have such a type:\n\n```edition2018\nstruct Type(u32); // this is a tuple struct\n\nenum Foo {\n    Bar(u32), // this is a tuple variant\n}\n\nuse Foo::*; // To use Foo's variant directly, we need to import them in\n            // the scope.\n```\n\nEither way, it should work fine with our previous code:\n\n```edition2018\nstruct Type(u32);\n\nenum Foo {\n    Bar(u32),\n}\nuse Foo::*;\n\nlet Type(x) = Type(12); // ok!\nmatch Type(12) {\n    Type(x) => {} // ok!\n    _ => {}\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find tuple struct or tuple variant `Err` in this scope",
                "spans": [
                  {
                    "byte_end": 1600,
                    "byte_start": 1597,
                    "column_end": 16,
                    "column_start": 13,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 1502,
                        "byte_start": 1486,
                        "column_end": 17,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\src\\lib.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 45,
                        "line_start": 45,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 17,
                            "highlight_start": 1,
                            "text": "macro_rules! try {"
                          }
                        ]
                      },
                      "macro_decl_name": "try!",
                      "span": {
                        "byte_end": 4633,
                        "byte_start": 4585,
                        "column_end": 68,
                        "column_start": 20,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\src\\lib.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 154,
                        "line_start": 154,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 68,
                            "highlight_start": 20,
                            "text": "        let meta = try!(fs::metadata(&dir).map_err(error::from_io));"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 49,
                    "line_start": 49,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 16,
                        "highlight_start": 13,
                        "text": "            Err(error) => return Err(error),"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#autocfg@0.1.7",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "autocfg",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0412]: cannot find type `Vec` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\src\\lib.rs:175:32\n    |\n175 |                     .collect::<Vec<String>>()\n    |                                ^^^ not found in this scope\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0412",
                  "explanation": "A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"
                },
                "level": "error",
                "message": "cannot find type `Vec` in this scope",
                "spans": [
                  {
                    "byte_end": 5824,
                    "byte_start": 5821,
                    "column_end": 35,
                    "column_start": 32,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 175,
                    "line_start": 175,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 35,
                        "highlight_start": 32,
                        "text": "                    .collect::<Vec<String>>()"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#autocfg@0.1.7",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "autocfg",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0412]: cannot find type `String` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\src\\lib.rs:175:36\n    |\n175 |                     .collect::<Vec<String>>()\n    |                                    ^^^^^^ not found in this scope\n    |\nhelp: you might be missing a type parameter\n    |\n123 | impl<String> AutoCfg {\n    |     ++++++++\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "you might be missing a type parameter",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 3423,
                        "byte_start": 3423,
                        "column_end": 5,
                        "column_start": 5,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 123,
                        "line_start": 123,
                        "suggested_replacement": "<String>",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 5,
                            "highlight_start": 5,
                            "text": "impl AutoCfg {"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0412",
                  "explanation": "A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"
                },
                "level": "error",
                "message": "cannot find type `String` in this scope",
                "spans": [
                  {
                    "byte_end": 5831,
                    "byte_start": 5825,
                    "column_end": 42,
                    "column_start": 36,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 175,
                    "line_start": 175,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 42,
                        "highlight_start": 36,
                        "text": "                    .collect::<Vec<String>>()"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#autocfg@0.1.7",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "autocfg",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0425]: cannot find value `None` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\src\\lib.rs:178:13\n    |\n178 |             None\n    |             ^^^^ not found in this scope\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0425",
                  "explanation": "An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"
                },
                "level": "error",
                "message": "cannot find value `None` in this scope",
                "spans": [
                  {
                    "byte_end": 5884,
                    "byte_start": 5880,
                    "column_end": 17,
                    "column_start": 13,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 178,
                    "line_start": 178,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 17,
                        "highlight_start": 13,
                        "text": "            None"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#autocfg@0.1.7",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "autocfg",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0405]: cannot find trait `AsRef` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\src\\lib.rs:217:17\n    |\n217 |     fn probe<T: AsRef<[u8]>>(&self, code: T) -> Result<bool, Error> {\n    |                 ^^^^^ not found in this scope\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0405",
                  "explanation": "The code refers to a trait that is not in scope.\n\nErroneous code example:\n\n```compile_fail,E0405\nstruct Foo;\n\nimpl SomeTrait for Foo {} // error: trait `SomeTrait` is not in scope\n```\n\nPlease verify that the name of the trait wasn't misspelled and ensure that it\nwas imported. Example:\n\n```\n# #[cfg(for_demonstration_only)]\n// solution 1:\nuse some_file::SomeTrait;\n\n// solution 2:\ntrait SomeTrait {\n    // some functions\n}\n\nstruct Foo;\n\nimpl SomeTrait for Foo { // ok!\n    // implements functions\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find trait `AsRef` in this scope",
                "spans": [
                  {
                    "byte_end": 7178,
                    "byte_start": 7173,
                    "column_end": 22,
                    "column_start": 17,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 217,
                    "line_start": 217,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 22,
                        "highlight_start": 17,
                        "text": "    fn probe<T: AsRef<[u8]>>(&self, code: T) -> Result<bool, Error> {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#autocfg@0.1.7",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "autocfg",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0412]: cannot find type `Result` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\src\\lib.rs:217:49\n    |\n217 |     fn probe<T: AsRef<[u8]>>(&self, code: T) -> Result<bool, Error> {\n    |                                                 ^^^^^^ not found in this scope\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0412",
                  "explanation": "A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"
                },
                "level": "error",
                "message": "cannot find type `Result` in this scope",
                "spans": [
                  {
                    "byte_end": 7211,
                    "byte_start": 7205,
                    "column_end": 55,
                    "column_start": 49,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 217,
                    "line_start": 217,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 55,
                        "highlight_start": 49,
                        "text": "    fn probe<T: AsRef<[u8]>>(&self, code: T) -> Result<bool, Error> {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#autocfg@0.1.7",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "autocfg",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0531]: cannot find tuple struct or tuple variant `Some` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\src\\lib.rs:231:17\n    |\n231 |         if let &Some(ref rustflags) = &self.rustflags {\n    |                 ^^^^ not found in this scope\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0531",
                  "explanation": "An unknown tuple struct/variant has been used.\n\nErroneous code example:\n\n```compile_fail,E0531\nlet Type(x) = Type(12); // error!\nmatch Bar(12) {\n    Bar(x) => {} // error!\n    _ => {}\n}\n```\n\nIn most cases, it's either a forgotten import or a typo. However, let's look at\nhow you can have such a type:\n\n```edition2018\nstruct Type(u32); // this is a tuple struct\n\nenum Foo {\n    Bar(u32), // this is a tuple variant\n}\n\nuse Foo::*; // To use Foo's variant directly, we need to import them in\n            // the scope.\n```\n\nEither way, it should work fine with our previous code:\n\n```edition2018\nstruct Type(u32);\n\nenum Foo {\n    Bar(u32),\n}\nuse Foo::*;\n\nlet Type(x) = Type(12); // ok!\nmatch Type(12) {\n    Type(x) => {} // ok!\n    _ => {}\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find tuple struct or tuple variant `Some` in this scope",
                "spans": [
                  {
                    "byte_end": 7661,
                    "byte_start": 7657,
                    "column_end": 21,
                    "column_start": 17,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 231,
                    "line_start": 231,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 21,
                        "highlight_start": 17,
                        "text": "        if let &Some(ref rustflags) = &self.rustflags {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#autocfg@0.1.7",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "autocfg",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0531]: cannot find tuple struct or tuple variant `Some` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\src\\lib.rs:235:16\n    |\n235 |         if let Some(target) = self.target.as_ref() {\n    |                ^^^^ not found in this scope\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0531",
                  "explanation": "An unknown tuple struct/variant has been used.\n\nErroneous code example:\n\n```compile_fail,E0531\nlet Type(x) = Type(12); // error!\nmatch Bar(12) {\n    Bar(x) => {} // error!\n    _ => {}\n}\n```\n\nIn most cases, it's either a forgotten import or a typo. However, let's look at\nhow you can have such a type:\n\n```edition2018\nstruct Type(u32); // this is a tuple struct\n\nenum Foo {\n    Bar(u32), // this is a tuple variant\n}\n\nuse Foo::*; // To use Foo's variant directly, we need to import them in\n            // the scope.\n```\n\nEither way, it should work fine with our previous code:\n\n```edition2018\nstruct Type(u32);\n\nenum Foo {\n    Bar(u32),\n}\nuse Foo::*;\n\nlet Type(x) = Type(12); // ok!\nmatch Type(12) {\n    Type(x) => {} // ok!\n    _ => {}\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find tuple struct or tuple variant `Some` in this scope",
                "spans": [
                  {
                    "byte_end": 7764,
                    "byte_start": 7760,
                    "column_end": 20,
                    "column_start": 16,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 235,
                    "line_start": 235,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 20,
                        "highlight_start": 16,
                        "text": "        if let Some(target) = self.target.as_ref() {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#autocfg@0.1.7",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "autocfg",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0531]: cannot find tuple struct or tuple variant `Ok` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\src\\lib.rs:48:13\n    |\n48  |             Ok(value) => value,\n    |             ^^ not found in this scope\n...\n240 |         let mut child = try!(command.spawn().map_err(error::from_io));\n    |                         --------------------------------------------- in this macro invocation\n    |\n    = note: this error originates in the macro `try` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0531",
                  "explanation": "An unknown tuple struct/variant has been used.\n\nErroneous code example:\n\n```compile_fail,E0531\nlet Type(x) = Type(12); // error!\nmatch Bar(12) {\n    Bar(x) => {} // error!\n    _ => {}\n}\n```\n\nIn most cases, it's either a forgotten import or a typo. However, let's look at\nhow you can have such a type:\n\n```edition2018\nstruct Type(u32); // this is a tuple struct\n\nenum Foo {\n    Bar(u32), // this is a tuple variant\n}\n\nuse Foo::*; // To use Foo's variant directly, we need to import them in\n            // the scope.\n```\n\nEither way, it should work fine with our previous code:\n\n```edition2018\nstruct Type(u32);\n\nenum Foo {\n    Bar(u32),\n}\nuse Foo::*;\n\nlet Type(x) = Type(12); // ok!\nmatch Type(12) {\n    Type(x) => {} // ok!\n    _ => {}\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find tuple struct or tuple variant `Ok` in this scope",
                "spans": [
                  {
                    "byte_end": 1567,
                    "byte_start": 1565,
                    "column_end": 15,
                    "column_start": 13,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 1502,
                        "byte_start": 1486,
                        "column_end": 17,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\src\\lib.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 45,
                        "line_start": 45,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 17,
                            "highlight_start": 1,
                            "text": "macro_rules! try {"
                          }
                        ]
                      },
                      "macro_decl_name": "try!",
                      "span": {
                        "byte_end": 7975,
                        "byte_start": 7930,
                        "column_end": 70,
                        "column_start": 25,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\src\\lib.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 240,
                        "line_start": 240,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 70,
                            "highlight_start": 25,
                            "text": "        let mut child = try!(command.spawn().map_err(error::from_io));"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 48,
                    "line_start": 48,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 15,
                        "highlight_start": 13,
                        "text": "            Ok(value) => value,"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#autocfg@0.1.7",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "autocfg",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0531]: cannot find tuple struct or tuple variant `Err` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\src\\lib.rs:49:13\n    |\n49  |             Err(error) => return Err(error),\n    |             ^^^ not found in this scope\n...\n240 |         let mut child = try!(command.spawn().map_err(error::from_io));\n    |                         --------------------------------------------- in this macro invocation\n    |\n    = note: this error originates in the macro `try` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0531",
                  "explanation": "An unknown tuple struct/variant has been used.\n\nErroneous code example:\n\n```compile_fail,E0531\nlet Type(x) = Type(12); // error!\nmatch Bar(12) {\n    Bar(x) => {} // error!\n    _ => {}\n}\n```\n\nIn most cases, it's either a forgotten import or a typo. However, let's look at\nhow you can have such a type:\n\n```edition2018\nstruct Type(u32); // this is a tuple struct\n\nenum Foo {\n    Bar(u32), // this is a tuple variant\n}\n\nuse Foo::*; // To use Foo's variant directly, we need to import them in\n            // the scope.\n```\n\nEither way, it should work fine with our previous code:\n\n```edition2018\nstruct Type(u32);\n\nenum Foo {\n    Bar(u32),\n}\nuse Foo::*;\n\nlet Type(x) = Type(12); // ok!\nmatch Type(12) {\n    Type(x) => {} // ok!\n    _ => {}\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find tuple struct or tuple variant `Err` in this scope",
                "spans": [
                  {
                    "byte_end": 1600,
                    "byte_start": 1597,
                    "column_end": 16,
                    "column_start": 13,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 1502,
                        "byte_start": 1486,
                        "column_end": 17,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\src\\lib.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 45,
                        "line_start": 45,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 17,
                            "highlight_start": 1,
                            "text": "macro_rules! try {"
                          }
                        ]
                      },
                      "macro_decl_name": "try!",
                      "span": {
                        "byte_end": 7975,
                        "byte_start": 7930,
                        "column_end": 70,
                        "column_start": 25,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\src\\lib.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 240,
                        "line_start": 240,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 70,
                            "highlight_start": 25,
                            "text": "        let mut child = try!(command.spawn().map_err(error::from_io));"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 49,
                    "line_start": 49,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 16,
                        "highlight_start": 13,
                        "text": "            Err(error) => return Err(error),"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#autocfg@0.1.7",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "autocfg",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0531]: cannot find tuple struct or tuple variant `Ok` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\src\\lib.rs:48:13\n    |\n48  |             Ok(value) => value,\n    |             ^^ not found in this scope\n...\n244 |             try!(stdin.write_all(b\"#![no_std]\\n\").map_err(error::from_io));\n    |             -------------------------------------------------------------- in this macro invocation\n    |\n    = note: this error originates in the macro `try` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0531",
                  "explanation": "An unknown tuple struct/variant has been used.\n\nErroneous code example:\n\n```compile_fail,E0531\nlet Type(x) = Type(12); // error!\nmatch Bar(12) {\n    Bar(x) => {} // error!\n    _ => {}\n}\n```\n\nIn most cases, it's either a forgotten import or a typo. However, let's look at\nhow you can have such a type:\n\n```edition2018\nstruct Type(u32); // this is a tuple struct\n\nenum Foo {\n    Bar(u32), // this is a tuple variant\n}\n\nuse Foo::*; // To use Foo's variant directly, we need to import them in\n            // the scope.\n```\n\nEither way, it should work fine with our previous code:\n\n```edition2018\nstruct Type(u32);\n\nenum Foo {\n    Bar(u32),\n}\nuse Foo::*;\n\nlet Type(x) = Type(12); // ok!\nmatch Type(12) {\n    Type(x) => {} // ok!\n    _ => {}\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find tuple struct or tuple variant `Ok` in this scope",
                "spans": [
                  {
                    "byte_end": 1567,
                    "byte_start": 1565,
                    "column_end": 15,
                    "column_start": 13,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 1502,
                        "byte_start": 1486,
                        "column_end": 17,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\src\\lib.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 45,
                        "line_start": 45,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 17,
                            "highlight_start": 1,
                            "text": "macro_rules! try {"
                          }
                        ]
                      },
                      "macro_decl_name": "try!",
                      "span": {
                        "byte_end": 8143,
                        "byte_start": 8081,
                        "column_end": 75,
                        "column_start": 13,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\src\\lib.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 244,
                        "line_start": 244,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 75,
                            "highlight_start": 13,
                            "text": "            try!(stdin.write_all(b\"#![no_std]\\n\").map_err(error::from_io));"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 48,
                    "line_start": 48,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 15,
                        "highlight_start": 13,
                        "text": "            Ok(value) => value,"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#autocfg@0.1.7",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "autocfg",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0531]: cannot find tuple struct or tuple variant `Err` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\src\\lib.rs:49:13\n    |\n49  |             Err(error) => return Err(error),\n    |             ^^^ not found in this scope\n...\n244 |             try!(stdin.write_all(b\"#![no_std]\\n\").map_err(error::from_io));\n    |             -------------------------------------------------------------- in this macro invocation\n    |\n    = note: this error originates in the macro `try` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0531",
                  "explanation": "An unknown tuple struct/variant has been used.\n\nErroneous code example:\n\n```compile_fail,E0531\nlet Type(x) = Type(12); // error!\nmatch Bar(12) {\n    Bar(x) => {} // error!\n    _ => {}\n}\n```\n\nIn most cases, it's either a forgotten import or a typo. However, let's look at\nhow you can have such a type:\n\n```edition2018\nstruct Type(u32); // this is a tuple struct\n\nenum Foo {\n    Bar(u32), // this is a tuple variant\n}\n\nuse Foo::*; // To use Foo's variant directly, we need to import them in\n            // the scope.\n```\n\nEither way, it should work fine with our previous code:\n\n```edition2018\nstruct Type(u32);\n\nenum Foo {\n    Bar(u32),\n}\nuse Foo::*;\n\nlet Type(x) = Type(12); // ok!\nmatch Type(12) {\n    Type(x) => {} // ok!\n    _ => {}\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find tuple struct or tuple variant `Err` in this scope",
                "spans": [
                  {
                    "byte_end": 1600,
                    "byte_start": 1597,
                    "column_end": 16,
                    "column_start": 13,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 1502,
                        "byte_start": 1486,
                        "column_end": 17,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\src\\lib.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 45,
                        "line_start": 45,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 17,
                            "highlight_start": 1,
                            "text": "macro_rules! try {"
                          }
                        ]
                      },
                      "macro_decl_name": "try!",
                      "span": {
                        "byte_end": 8143,
                        "byte_start": 8081,
                        "column_end": 75,
                        "column_start": 13,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\src\\lib.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 244,
                        "line_start": 244,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 75,
                            "highlight_start": 13,
                            "text": "            try!(stdin.write_all(b\"#![no_std]\\n\").map_err(error::from_io));"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 49,
                    "line_start": 49,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 16,
                        "highlight_start": 13,
                        "text": "            Err(error) => return Err(error),"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#autocfg@0.1.7",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "autocfg",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0531]: cannot find tuple struct or tuple variant `Ok` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\src\\lib.rs:48:13\n    |\n48  |             Ok(value) => value,\n    |             ^^ not found in this scope\n...\n246 |         try!(stdin.write_all(code.as_ref()).map_err(error::from_io));\n    |         ------------------------------------------------------------ in this macro invocation\n    |\n    = note: this error originates in the macro `try` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0531",
                  "explanation": "An unknown tuple struct/variant has been used.\n\nErroneous code example:\n\n```compile_fail,E0531\nlet Type(x) = Type(12); // error!\nmatch Bar(12) {\n    Bar(x) => {} // error!\n    _ => {}\n}\n```\n\nIn most cases, it's either a forgotten import or a typo. However, let's look at\nhow you can have such a type:\n\n```edition2018\nstruct Type(u32); // this is a tuple struct\n\nenum Foo {\n    Bar(u32), // this is a tuple variant\n}\n\nuse Foo::*; // To use Foo's variant directly, we need to import them in\n            // the scope.\n```\n\nEither way, it should work fine with our previous code:\n\n```edition2018\nstruct Type(u32);\n\nenum Foo {\n    Bar(u32),\n}\nuse Foo::*;\n\nlet Type(x) = Type(12); // ok!\nmatch Type(12) {\n    Type(x) => {} // ok!\n    _ => {}\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find tuple struct or tuple variant `Ok` in this scope",
                "spans": [
                  {
                    "byte_end": 1567,
                    "byte_start": 1565,
                    "column_end": 15,
                    "column_start": 13,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 1502,
                        "byte_start": 1486,
                        "column_end": 17,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\src\\lib.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 45,
                        "line_start": 45,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 17,
                            "highlight_start": 1,
                            "text": "macro_rules! try {"
                          }
                        ]
                      },
                      "macro_decl_name": "try!",
                      "span": {
                        "byte_end": 8223,
                        "byte_start": 8163,
                        "column_end": 69,
                        "column_start": 9,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\src\\lib.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 246,
                        "line_start": 246,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 69,
                            "highlight_start": 9,
                            "text": "        try!(stdin.write_all(code.as_ref()).map_err(error::from_io));"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 48,
                    "line_start": 48,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 15,
                        "highlight_start": 13,
                        "text": "            Ok(value) => value,"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#autocfg@0.1.7",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "autocfg",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0531]: cannot find tuple struct or tuple variant `Err` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\src\\lib.rs:49:13\n    |\n49  |             Err(error) => return Err(error),\n    |             ^^^ not found in this scope\n...\n246 |         try!(stdin.write_all(code.as_ref()).map_err(error::from_io));\n    |         ------------------------------------------------------------ in this macro invocation\n    |\n    = note: this error originates in the macro `try` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0531",
                  "explanation": "An unknown tuple struct/variant has been used.\n\nErroneous code example:\n\n```compile_fail,E0531\nlet Type(x) = Type(12); // error!\nmatch Bar(12) {\n    Bar(x) => {} // error!\n    _ => {}\n}\n```\n\nIn most cases, it's either a forgotten import or a typo. However, let's look at\nhow you can have such a type:\n\n```edition2018\nstruct Type(u32); // this is a tuple struct\n\nenum Foo {\n    Bar(u32), // this is a tuple variant\n}\n\nuse Foo::*; // To use Foo's variant directly, we need to import them in\n            // the scope.\n```\n\nEither way, it should work fine with our previous code:\n\n```edition2018\nstruct Type(u32);\n\nenum Foo {\n    Bar(u32),\n}\nuse Foo::*;\n\nlet Type(x) = Type(12); // ok!\nmatch Type(12) {\n    Type(x) => {} // ok!\n    _ => {}\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find tuple struct or tuple variant `Err` in this scope",
                "spans": [
                  {
                    "byte_end": 1600,
                    "byte_start": 1597,
                    "column_end": 16,
                    "column_start": 13,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 1502,
                        "byte_start": 1486,
                        "column_end": 17,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\src\\lib.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 45,
                        "line_start": 45,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 17,
                            "highlight_start": 1,
                            "text": "macro_rules! try {"
                          }
                        ]
                      },
                      "macro_decl_name": "try!",
                      "span": {
                        "byte_end": 8223,
                        "byte_start": 8163,
                        "column_end": 69,
                        "column_start": 9,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\src\\lib.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 246,
                        "line_start": 246,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 69,
                            "highlight_start": 9,
                            "text": "        try!(stdin.write_all(code.as_ref()).map_err(error::from_io));"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 49,
                    "line_start": 49,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 16,
                        "highlight_start": 13,
                        "text": "            Err(error) => return Err(error),"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#autocfg@0.1.7",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "autocfg",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0531]: cannot find tuple struct or tuple variant `Ok` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\src\\lib.rs:48:13\n    |\n48  |             Ok(value) => value,\n    |             ^^ not found in this scope\n...\n249 |         let status = try!(child.wait().map_err(error::from_io));\n    |                      ------------------------------------------ in this macro invocation\n    |\n    = note: this error originates in the macro `try` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0531",
                  "explanation": "An unknown tuple struct/variant has been used.\n\nErroneous code example:\n\n```compile_fail,E0531\nlet Type(x) = Type(12); // error!\nmatch Bar(12) {\n    Bar(x) => {} // error!\n    _ => {}\n}\n```\n\nIn most cases, it's either a forgotten import or a typo. However, let's look at\nhow you can have such a type:\n\n```edition2018\nstruct Type(u32); // this is a tuple struct\n\nenum Foo {\n    Bar(u32), // this is a tuple variant\n}\n\nuse Foo::*; // To use Foo's variant directly, we need to import them in\n            // the scope.\n```\n\nEither way, it should work fine with our previous code:\n\n```edition2018\nstruct Type(u32);\n\nenum Foo {\n    Bar(u32),\n}\nuse Foo::*;\n\nlet Type(x) = Type(12); // ok!\nmatch Type(12) {\n    Type(x) => {} // ok!\n    _ => {}\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find tuple struct or tuple variant `Ok` in this scope",
                "spans": [
                  {
                    "byte_end": 1567,
                    "byte_start": 1565,
                    "column_end": 15,
                    "column_start": 13,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 1502,
                        "byte_start": 1486,
                        "column_end": 17,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\src\\lib.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 45,
                        "line_start": 45,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 17,
                            "highlight_start": 1,
                            "text": "macro_rules! try {"
                          }
                        ]
                      },
                      "macro_decl_name": "try!",
                      "span": {
                        "byte_end": 8310,
                        "byte_start": 8268,
                        "column_end": 64,
                        "column_start": 22,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\src\\lib.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 249,
                        "line_start": 249,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 64,
                            "highlight_start": 22,
                            "text": "        let status = try!(child.wait().map_err(error::from_io));"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 48,
                    "line_start": 48,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 15,
                        "highlight_start": 13,
                        "text": "            Ok(value) => value,"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#autocfg@0.1.7",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "autocfg",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0531]: cannot find tuple struct or tuple variant `Err` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\src\\lib.rs:49:13\n    |\n49  |             Err(error) => return Err(error),\n    |             ^^^ not found in this scope\n...\n249 |         let status = try!(child.wait().map_err(error::from_io));\n    |                      ------------------------------------------ in this macro invocation\n    |\n    = note: this error originates in the macro `try` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0531",
                  "explanation": "An unknown tuple struct/variant has been used.\n\nErroneous code example:\n\n```compile_fail,E0531\nlet Type(x) = Type(12); // error!\nmatch Bar(12) {\n    Bar(x) => {} // error!\n    _ => {}\n}\n```\n\nIn most cases, it's either a forgotten import or a typo. However, let's look at\nhow you can have such a type:\n\n```edition2018\nstruct Type(u32); // this is a tuple struct\n\nenum Foo {\n    Bar(u32), // this is a tuple variant\n}\n\nuse Foo::*; // To use Foo's variant directly, we need to import them in\n            // the scope.\n```\n\nEither way, it should work fine with our previous code:\n\n```edition2018\nstruct Type(u32);\n\nenum Foo {\n    Bar(u32),\n}\nuse Foo::*;\n\nlet Type(x) = Type(12); // ok!\nmatch Type(12) {\n    Type(x) => {} // ok!\n    _ => {}\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find tuple struct or tuple variant `Err` in this scope",
                "spans": [
                  {
                    "byte_end": 1600,
                    "byte_start": 1597,
                    "column_end": 16,
                    "column_start": 13,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 1502,
                        "byte_start": 1486,
                        "column_end": 17,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\src\\lib.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 45,
                        "line_start": 45,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 17,
                            "highlight_start": 1,
                            "text": "macro_rules! try {"
                          }
                        ]
                      },
                      "macro_decl_name": "try!",
                      "span": {
                        "byte_end": 8310,
                        "byte_start": 8268,
                        "column_end": 64,
                        "column_start": 22,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\src\\lib.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 249,
                        "line_start": 249,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 64,
                            "highlight_start": 22,
                            "text": "        let status = try!(child.wait().map_err(error::from_io));"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 49,
                    "line_start": 49,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 16,
                        "highlight_start": 13,
                        "text": "            Err(error) => return Err(error),"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#autocfg@0.1.7",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "autocfg",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0412]: cannot find type `String` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\src\\lib.rs:359:23\n    |\n359 | fn mangle(s: &str) -> String {\n    |                       ^^^^^^ not found in this scope\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0412",
                  "explanation": "A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"
                },
                "level": "error",
                "message": "cannot find type `String` in this scope",
                "spans": [
                  {
                    "byte_end": 11708,
                    "byte_start": 11702,
                    "column_end": 29,
                    "column_start": 23,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 359,
                    "line_start": 359,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 29,
                        "highlight_start": 23,
                        "text": "fn mangle(s: &str) -> String {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#semver-parser@0.7.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "semver_parser",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0412]: cannot find type `Vec` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\version.rs:13:14\n   |\n13 |     pub pre: Vec<Identifier>,\n   |              ^^^ not found in this scope\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0412",
                  "explanation": "A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"
                },
                "level": "error",
                "message": "cannot find type `Vec` in this scope",
                "spans": [
                  {
                    "byte_end": 236,
                    "byte_start": 233,
                    "column_end": 17,
                    "column_start": 14,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\version.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 13,
                    "line_start": 13,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 17,
                        "highlight_start": 14,
                        "text": "    pub pre: Vec<Identifier>,"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#semver-parser@0.7.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "semver_parser",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0412]: cannot find type `Vec` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\version.rs:14:16\n   |\n14 |     pub build: Vec<Identifier>,\n   |                ^^^ not found in this scope\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0412",
                  "explanation": "A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"
                },
                "level": "error",
                "message": "cannot find type `Vec` in this scope",
                "spans": [
                  {
                    "byte_end": 268,
                    "byte_start": 265,
                    "column_end": 19,
                    "column_start": 16,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\version.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 14,
                    "line_start": 14,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 19,
                        "highlight_start": 16,
                        "text": "    pub build: Vec<Identifier>,"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#semver-parser@0.7.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "semver_parser",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0412]: cannot find type `String` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\version.rs:22:18\n   |\n22 |     AlphaNumeric(String),\n   |                  ^^^^^^ not found in this scope\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0412",
                  "explanation": "A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"
                },
                "level": "error",
                "message": "cannot find type `String` in this scope",
                "spans": [
                  {
                    "byte_end": 480,
                    "byte_start": 474,
                    "column_end": 24,
                    "column_start": 18,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\version.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 22,
                    "line_start": 22,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 24,
                        "highlight_start": 18,
                        "text": "    AlphaNumeric(String),"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#semver-parser@0.7.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "semver_parser",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0412]: cannot find type `Result` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\version.rs:25:32\n   |\n25 | pub fn parse(version: &str) -> Result<Version, String> {\n   |                                ^^^^^^ not found in this scope\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0412",
                  "explanation": "A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"
                },
                "level": "error",
                "message": "cannot find type `Result` in this scope",
                "spans": [
                  {
                    "byte_end": 523,
                    "byte_start": 517,
                    "column_end": 38,
                    "column_start": 32,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\version.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 25,
                    "line_start": 25,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 38,
                        "highlight_start": 32,
                        "text": "pub fn parse(version: &str) -> Result<Version, String> {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#semver-parser@0.7.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "semver_parser",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0412]: cannot find type `String` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\version.rs:25:48\n   |\n25 | pub fn parse(version: &str) -> Result<Version, String> {\n   |                                                ^^^^^^ not found in this scope\n   |\nhelp: you might be missing a type parameter\n   |\n25 | pub fn parse<String>(version: &str) -> Result<Version, String> {\n   |             ++++++++\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "you might be missing a type parameter",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 498,
                        "byte_start": 498,
                        "column_end": 13,
                        "column_start": 13,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\version.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 25,
                        "line_start": 25,
                        "suggested_replacement": "<String>",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 13,
                            "highlight_start": 13,
                            "text": "pub fn parse(version: &str) -> Result<Version, String> {"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0412",
                  "explanation": "A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"
                },
                "level": "error",
                "message": "cannot find type `String` in this scope",
                "spans": [
                  {
                    "byte_end": 539,
                    "byte_start": 533,
                    "column_end": 54,
                    "column_start": 48,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\version.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 25,
                    "line_start": 25,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 54,
                        "highlight_start": 48,
                        "text": "pub fn parse(version: &str) -> Result<Version, String> {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#semver-parser@0.7.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "semver_parser",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0531]: cannot find tuple struct or tuple variant `Some` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\version.rs:28:24\n   |\n28 |     let major = if let Some((major, len)) = numeric_identifier(&s[i..]) {\n   |                        ^^^^ not found in this scope\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0531",
                  "explanation": "An unknown tuple struct/variant has been used.\n\nErroneous code example:\n\n```compile_fail,E0531\nlet Type(x) = Type(12); // error!\nmatch Bar(12) {\n    Bar(x) => {} // error!\n    _ => {}\n}\n```\n\nIn most cases, it's either a forgotten import or a typo. However, let's look at\nhow you can have such a type:\n\n```edition2018\nstruct Type(u32); // this is a tuple struct\n\nenum Foo {\n    Bar(u32), // this is a tuple variant\n}\n\nuse Foo::*; // To use Foo's variant directly, we need to import them in\n            // the scope.\n```\n\nEither way, it should work fine with our previous code:\n\n```edition2018\nstruct Type(u32);\n\nenum Foo {\n    Bar(u32),\n}\nuse Foo::*;\n\nlet Type(x) = Type(12); // ok!\nmatch Type(12) {\n    Type(x) => {} // ok!\n    _ => {}\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find tuple struct or tuple variant `Some` in this scope",
                "spans": [
                  {
                    "byte_end": 628,
                    "byte_start": 624,
                    "column_end": 28,
                    "column_start": 24,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\version.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 28,
                    "line_start": 28,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 28,
                        "highlight_start": 24,
                        "text": "    let major = if let Some((major, len)) = numeric_identifier(&s[i..]) {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#semver-parser@0.7.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "semver_parser",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0531]: cannot find tuple struct or tuple variant `Some` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\version.rs:34:12\n   |\n34 |     if let Some(len) = b'.'.p(&s[i..]) {\n   |            ^^^^ not found in this scope\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0531",
                  "explanation": "An unknown tuple struct/variant has been used.\n\nErroneous code example:\n\n```compile_fail,E0531\nlet Type(x) = Type(12); // error!\nmatch Bar(12) {\n    Bar(x) => {} // error!\n    _ => {}\n}\n```\n\nIn most cases, it's either a forgotten import or a typo. However, let's look at\nhow you can have such a type:\n\n```edition2018\nstruct Type(u32); // this is a tuple struct\n\nenum Foo {\n    Bar(u32), // this is a tuple variant\n}\n\nuse Foo::*; // To use Foo's variant directly, we need to import them in\n            // the scope.\n```\n\nEither way, it should work fine with our previous code:\n\n```edition2018\nstruct Type(u32);\n\nenum Foo {\n    Bar(u32),\n}\nuse Foo::*;\n\nlet Type(x) = Type(12); // ok!\nmatch Type(12) {\n    Type(x) => {} // ok!\n    _ => {}\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find tuple struct or tuple variant `Some` in this scope",
                "spans": [
                  {
                    "byte_end": 808,
                    "byte_start": 804,
                    "column_end": 16,
                    "column_start": 12,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\version.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 34,
                    "line_start": 34,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 16,
                        "highlight_start": 12,
                        "text": "    if let Some(len) = b'.'.p(&s[i..]) {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#semver-parser@0.7.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "semver_parser",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0531]: cannot find tuple struct or tuple variant `Some` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\version.rs:39:24\n   |\n39 |     let minor = if let Some((minor, len)) = numeric_identifier(&s[i..]) {\n   |                        ^^^^ not found in this scope\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0531",
                  "explanation": "An unknown tuple struct/variant has been used.\n\nErroneous code example:\n\n```compile_fail,E0531\nlet Type(x) = Type(12); // error!\nmatch Bar(12) {\n    Bar(x) => {} // error!\n    _ => {}\n}\n```\n\nIn most cases, it's either a forgotten import or a typo. However, let's look at\nhow you can have such a type:\n\n```edition2018\nstruct Type(u32); // this is a tuple struct\n\nenum Foo {\n    Bar(u32), // this is a tuple variant\n}\n\nuse Foo::*; // To use Foo's variant directly, we need to import them in\n            // the scope.\n```\n\nEither way, it should work fine with our previous code:\n\n```edition2018\nstruct Type(u32);\n\nenum Foo {\n    Bar(u32),\n}\nuse Foo::*;\n\nlet Type(x) = Type(12); // ok!\nmatch Type(12) {\n    Type(x) => {} // ok!\n    _ => {}\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find tuple struct or tuple variant `Some` in this scope",
                "spans": [
                  {
                    "byte_end": 946,
                    "byte_start": 942,
                    "column_end": 28,
                    "column_start": 24,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\version.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 39,
                    "line_start": 39,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 28,
                        "highlight_start": 24,
                        "text": "    let minor = if let Some((minor, len)) = numeric_identifier(&s[i..]) {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#semver-parser@0.7.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "semver_parser",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0531]: cannot find tuple struct or tuple variant `Some` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\version.rs:45:12\n   |\n45 |     if let Some(len) = b'.'.p(&s[i..]) {\n   |            ^^^^ not found in this scope\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0531",
                  "explanation": "An unknown tuple struct/variant has been used.\n\nErroneous code example:\n\n```compile_fail,E0531\nlet Type(x) = Type(12); // error!\nmatch Bar(12) {\n    Bar(x) => {} // error!\n    _ => {}\n}\n```\n\nIn most cases, it's either a forgotten import or a typo. However, let's look at\nhow you can have such a type:\n\n```edition2018\nstruct Type(u32); // this is a tuple struct\n\nenum Foo {\n    Bar(u32), // this is a tuple variant\n}\n\nuse Foo::*; // To use Foo's variant directly, we need to import them in\n            // the scope.\n```\n\nEither way, it should work fine with our previous code:\n\n```edition2018\nstruct Type(u32);\n\nenum Foo {\n    Bar(u32),\n}\nuse Foo::*;\n\nlet Type(x) = Type(12); // ok!\nmatch Type(12) {\n    Type(x) => {} // ok!\n    _ => {}\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find tuple struct or tuple variant `Some` in this scope",
                "spans": [
                  {
                    "byte_end": 1126,
                    "byte_start": 1122,
                    "column_end": 16,
                    "column_start": 12,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\version.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 45,
                    "line_start": 45,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 16,
                        "highlight_start": 12,
                        "text": "    if let Some(len) = b'.'.p(&s[i..]) {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#semver-parser@0.7.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "semver_parser",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0531]: cannot find tuple struct or tuple variant `Some` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\version.rs:50:24\n   |\n50 |     let patch = if let Some((patch, len)) = numeric_identifier(&s[i..]) {\n   |                        ^^^^ not found in this scope\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0531",
                  "explanation": "An unknown tuple struct/variant has been used.\n\nErroneous code example:\n\n```compile_fail,E0531\nlet Type(x) = Type(12); // error!\nmatch Bar(12) {\n    Bar(x) => {} // error!\n    _ => {}\n}\n```\n\nIn most cases, it's either a forgotten import or a typo. However, let's look at\nhow you can have such a type:\n\n```edition2018\nstruct Type(u32); // this is a tuple struct\n\nenum Foo {\n    Bar(u32), // this is a tuple variant\n}\n\nuse Foo::*; // To use Foo's variant directly, we need to import them in\n            // the scope.\n```\n\nEither way, it should work fine with our previous code:\n\n```edition2018\nstruct Type(u32);\n\nenum Foo {\n    Bar(u32),\n}\nuse Foo::*;\n\nlet Type(x) = Type(12); // ok!\nmatch Type(12) {\n    Type(x) => {} // ok!\n    _ => {}\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find tuple struct or tuple variant `Some` in this scope",
                "spans": [
                  {
                    "byte_end": 1264,
                    "byte_start": 1260,
                    "column_end": 28,
                    "column_start": 24,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\version.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 50,
                    "line_start": 50,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 28,
                        "highlight_start": 24,
                        "text": "    let patch = if let Some((patch, len)) = numeric_identifier(&s[i..]) {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#semver-parser@0.7.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "semver_parser",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0412]: cannot find type `Vec` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\version.rs:77:23\n   |\n77 |             let strs: Vec<_> =\n   |                       ^^^ not found in this scope\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0412",
                  "explanation": "A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"
                },
                "level": "error",
                "message": "cannot find type `Vec` in this scope",
                "spans": [
                  {
                    "byte_end": 2105,
                    "byte_start": 2102,
                    "column_end": 26,
                    "column_start": 23,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\version.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 77,
                    "line_start": 77,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 26,
                        "highlight_start": 23,
                        "text": "            let strs: Vec<_> ="
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#semver-parser@0.7.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "semver_parser",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0412]: cannot find type `Vec` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\version.rs:82:23\n   |\n82 |             let strs: Vec<_> =\n   |                       ^^^ not found in this scope\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0412",
                  "explanation": "A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"
                },
                "level": "error",
                "message": "cannot find type `Vec` in this scope",
                "spans": [
                  {
                    "byte_end": 2302,
                    "byte_start": 2299,
                    "column_end": 26,
                    "column_start": 23,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\version.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 82,
                    "line_start": 82,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 26,
                        "highlight_start": 23,
                        "text": "            let strs: Vec<_> ="
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#semver-parser@0.7.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "semver_parser",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0412]: cannot find type `Vec` in this scope\n --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\range.rs:8:21\n  |\n8 |     pub predicates: Vec<Predicate>,\n  |                     ^^^ not found in this scope\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0412",
                  "explanation": "A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"
                },
                "level": "error",
                "message": "cannot find type `Vec` in this scope",
                "spans": [
                  {
                    "byte_end": 210,
                    "byte_start": 207,
                    "column_end": 24,
                    "column_start": 21,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\range.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 8,
                    "line_start": 8,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 24,
                        "highlight_start": 21,
                        "text": "    pub predicates: Vec<Predicate>,"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#semver-parser@0.7.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "semver_parser",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0412]: cannot find type `String` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\range.rs:31:16\n   |\n31 |     type Err = String;\n   |                ^^^^^^ not found in this scope\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0412",
                  "explanation": "A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"
                },
                "level": "error",
                "message": "cannot find type `String` in this scope",
                "spans": [
                  {
                    "byte_end": 682,
                    "byte_start": 676,
                    "column_end": 22,
                    "column_start": 16,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\range.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 31,
                    "line_start": 31,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 22,
                        "highlight_start": 16,
                        "text": "    type Err = String;"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#semver-parser@0.7.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "semver_parser",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0412]: cannot find type `Result` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\range.rs:33:29\n   |\n33 |     fn from_str(s: &str) -> Result<Op, String> {\n   |                             ^^^^^^ not found in this scope\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0412",
                  "explanation": "A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"
                },
                "level": "error",
                "message": "cannot find type `Result` in this scope",
                "spans": [
                  {
                    "byte_end": 719,
                    "byte_start": 713,
                    "column_end": 35,
                    "column_start": 29,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\range.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 33,
                    "line_start": 33,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 35,
                        "highlight_start": 29,
                        "text": "    fn from_str(s: &str) -> Result<Op, String> {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#semver-parser@0.7.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "semver_parser",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0412]: cannot find type `String` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\range.rs:33:40\n   |\n33 |     fn from_str(s: &str) -> Result<Op, String> {\n   |                                        ^^^^^^ not found in this scope\n   |\nhelp: you might be missing a type parameter\n   |\n30 | impl<String> FromStr for Op {\n   |     ++++++++\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "you might be missing a type parameter",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 643,
                        "byte_start": 643,
                        "column_end": 5,
                        "column_start": 5,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\range.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 30,
                        "line_start": 30,
                        "suggested_replacement": "<String>",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 5,
                            "highlight_start": 5,
                            "text": "impl FromStr for Op {"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0412",
                  "explanation": "A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"
                },
                "level": "error",
                "message": "cannot find type `String` in this scope",
                "spans": [
                  {
                    "byte_end": 730,
                    "byte_start": 724,
                    "column_end": 46,
                    "column_start": 40,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\range.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 33,
                    "line_start": 33,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 46,
                        "highlight_start": 40,
                        "text": "    fn from_str(s: &str) -> Result<Op, String> {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#semver-parser@0.7.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "semver_parser",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0412]: cannot find type `Option` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\range.rs:51:16\n   |\n51 |     pub minor: Option<u64>,\n   |                ^^^^^^ not found in this scope\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0412",
                  "explanation": "A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"
                },
                "level": "error",
                "message": "cannot find type `Option` in this scope",
                "spans": [
                  {
                    "byte_end": 1170,
                    "byte_start": 1164,
                    "column_end": 22,
                    "column_start": 16,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\range.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 51,
                    "line_start": 51,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 22,
                        "highlight_start": 16,
                        "text": "    pub minor: Option<u64>,"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#semver-parser@0.7.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "semver_parser",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0412]: cannot find type `Option` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\range.rs:52:16\n   |\n52 |     pub patch: Option<u64>,\n   |                ^^^^^^ not found in this scope\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0412",
                  "explanation": "A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"
                },
                "level": "error",
                "message": "cannot find type `Option` in this scope",
                "spans": [
                  {
                    "byte_end": 1198,
                    "byte_start": 1192,
                    "column_end": 22,
                    "column_start": 16,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\range.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 52,
                    "line_start": 52,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 22,
                        "highlight_start": 16,
                        "text": "    pub patch: Option<u64>,"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#semver-parser@0.7.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "semver_parser",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0412]: cannot find type `Vec` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\range.rs:53:14\n   |\n53 |     pub pre: Vec<Identifier>,\n   |              ^^^ not found in this scope\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0412",
                  "explanation": "A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"
                },
                "level": "error",
                "message": "cannot find type `Vec` in this scope",
                "spans": [
                  {
                    "byte_end": 1221,
                    "byte_start": 1218,
                    "column_end": 17,
                    "column_start": 14,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\range.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 53,
                    "line_start": 53,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 17,
                        "highlight_start": 14,
                        "text": "    pub pre: Vec<Identifier>,"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#semver-parser@0.7.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "semver_parser",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0412]: cannot find type `Option` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\range.rs:56:33\n   |\n56 | fn numeric_or_wild(s: &[u8]) -> Option<(Option<u64>, usize)> {\n   |                                 ^^^^^^ not found in this scope\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0412",
                  "explanation": "A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"
                },
                "level": "error",
                "message": "cannot find type `Option` in this scope",
                "spans": [
                  {
                    "byte_end": 1276,
                    "byte_start": 1270,
                    "column_end": 39,
                    "column_start": 33,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\range.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 56,
                    "line_start": 56,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 39,
                        "highlight_start": 33,
                        "text": "fn numeric_or_wild(s: &[u8]) -> Option<(Option<u64>, usize)> {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#semver-parser@0.7.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "semver_parser",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0412]: cannot find type `Option` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\range.rs:56:41\n   |\n56 | fn numeric_or_wild(s: &[u8]) -> Option<(Option<u64>, usize)> {\n   |                                         ^^^^^^ not found in this scope\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0412",
                  "explanation": "A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"
                },
                "level": "error",
                "message": "cannot find type `Option` in this scope",
                "spans": [
                  {
                    "byte_end": 1284,
                    "byte_start": 1278,
                    "column_end": 47,
                    "column_start": 41,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\range.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 56,
                    "line_start": 56,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 47,
                        "highlight_start": 41,
                        "text": "fn numeric_or_wild(s: &[u8]) -> Option<(Option<u64>, usize)> {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#semver-parser@0.7.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "semver_parser",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0531]: cannot find tuple struct or tuple variant `Some` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\range.rs:57:12\n   |\n57 |     if let Some((val, len)) = numeric_identifier(s) {\n   |            ^^^^ not found in this scope\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0531",
                  "explanation": "An unknown tuple struct/variant has been used.\n\nErroneous code example:\n\n```compile_fail,E0531\nlet Type(x) = Type(12); // error!\nmatch Bar(12) {\n    Bar(x) => {} // error!\n    _ => {}\n}\n```\n\nIn most cases, it's either a forgotten import or a typo. However, let's look at\nhow you can have such a type:\n\n```edition2018\nstruct Type(u32); // this is a tuple struct\n\nenum Foo {\n    Bar(u32), // this is a tuple variant\n}\n\nuse Foo::*; // To use Foo's variant directly, we need to import them in\n            // the scope.\n```\n\nEither way, it should work fine with our previous code:\n\n```edition2018\nstruct Type(u32);\n\nenum Foo {\n    Bar(u32),\n}\nuse Foo::*;\n\nlet Type(x) = Type(12); // ok!\nmatch Type(12) {\n    Type(x) => {} // ok!\n    _ => {}\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find tuple struct or tuple variant `Some` in this scope",
                "spans": [
                  {
                    "byte_end": 1316,
                    "byte_start": 1312,
                    "column_end": 16,
                    "column_start": 12,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\range.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 57,
                    "line_start": 57,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 16,
                        "highlight_start": 12,
                        "text": "    if let Some((val, len)) = numeric_identifier(s) {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#semver-parser@0.7.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "semver_parser",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0531]: cannot find tuple struct or tuple variant `Some` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\range.rs:59:19\n   |\n59 |     } else if let Some(len) = OneOf(b\"*xX\").p(s) {\n   |                   ^^^^ not found in this scope\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0531",
                  "explanation": "An unknown tuple struct/variant has been used.\n\nErroneous code example:\n\n```compile_fail,E0531\nlet Type(x) = Type(12); // error!\nmatch Bar(12) {\n    Bar(x) => {} // error!\n    _ => {}\n}\n```\n\nIn most cases, it's either a forgotten import or a typo. However, let's look at\nhow you can have such a type:\n\n```edition2018\nstruct Type(u32); // this is a tuple struct\n\nenum Foo {\n    Bar(u32), // this is a tuple variant\n}\n\nuse Foo::*; // To use Foo's variant directly, we need to import them in\n            // the scope.\n```\n\nEither way, it should work fine with our previous code:\n\n```edition2018\nstruct Type(u32);\n\nenum Foo {\n    Bar(u32),\n}\nuse Foo::*;\n\nlet Type(x) = Type(12); // ok!\nmatch Type(12) {\n    Type(x) => {} // ok!\n    _ => {}\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find tuple struct or tuple variant `Some` in this scope",
                "spans": [
                  {
                    "byte_end": 1408,
                    "byte_start": 1404,
                    "column_end": 23,
                    "column_start": 19,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\range.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 59,
                    "line_start": 59,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 23,
                        "highlight_start": 19,
                        "text": "    } else if let Some(len) = OneOf(b\"*xX\").p(s) {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#semver-parser@0.7.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "semver_parser",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0425]: cannot find value `None` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\range.rs:60:15\n   |\n60 |         Some((None, len))\n   |               ^^^^ not found in this scope\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0425",
                  "explanation": "An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"
                },
                "level": "error",
                "message": "cannot find value `None` in this scope",
                "spans": [
                  {
                    "byte_end": 1455,
                    "byte_start": 1451,
                    "column_end": 19,
                    "column_start": 15,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\range.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 60,
                    "line_start": 60,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 19,
                        "highlight_start": 15,
                        "text": "        Some((None, len))"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#semver-parser@0.7.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "semver_parser",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0425]: cannot find value `None` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\range.rs:62:9\n   |\n62 |         None\n   |         ^^^^ not found in this scope\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0425",
                  "explanation": "An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"
                },
                "level": "error",
                "message": "cannot find value `None` in this scope",
                "spans": [
                  {
                    "byte_end": 1488,
                    "byte_start": 1484,
                    "column_end": 13,
                    "column_start": 9,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\range.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 62,
                    "line_start": 62,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 13,
                        "highlight_start": 9,
                        "text": "        None"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#semver-parser@0.7.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "semver_parser",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0412]: cannot find type `Option` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\range.rs:66:37\n   |\n66 | fn dot_numeric_or_wild(s: &[u8]) -> Option<(Option<u64>, usize)> {\n   |                                     ^^^^^^ not found in this scope\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0412",
                  "explanation": "A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"
                },
                "level": "error",
                "message": "cannot find type `Option` in this scope",
                "spans": [
                  {
                    "byte_end": 1540,
                    "byte_start": 1534,
                    "column_end": 43,
                    "column_start": 37,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\range.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 66,
                    "line_start": 66,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 43,
                        "highlight_start": 37,
                        "text": "fn dot_numeric_or_wild(s: &[u8]) -> Option<(Option<u64>, usize)> {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#semver-parser@0.7.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "semver_parser",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0412]: cannot find type `Option` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\range.rs:66:45\n   |\n66 | fn dot_numeric_or_wild(s: &[u8]) -> Option<(Option<u64>, usize)> {\n   |                                             ^^^^^^ not found in this scope\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0412",
                  "explanation": "A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"
                },
                "level": "error",
                "message": "cannot find type `Option` in this scope",
                "spans": [
                  {
                    "byte_end": 1548,
                    "byte_start": 1542,
                    "column_end": 51,
                    "column_start": 45,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\range.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 66,
                    "line_start": 66,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 51,
                        "highlight_start": 45,
                        "text": "fn dot_numeric_or_wild(s: &[u8]) -> Option<(Option<u64>, usize)> {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#semver-parser@0.7.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "semver_parser",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0412]: cannot find type `Option` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\range.rs:72:27\n   |\n72 | fn operation(s: &[u8]) -> Option<(Op, usize)> {\n   |                           ^^^^^^ not found in this scope\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0412",
                  "explanation": "A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"
                },
                "level": "error",
                "message": "cannot find type `Option` in this scope",
                "spans": [
                  {
                    "byte_end": 1707,
                    "byte_start": 1701,
                    "column_end": 33,
                    "column_start": 27,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\range.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 72,
                    "line_start": 72,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 33,
                        "highlight_start": 27,
                        "text": "fn operation(s: &[u8]) -> Option<(Op, usize)> {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#semver-parser@0.7.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "semver_parser",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0531]: cannot find tuple struct or tuple variant `Some` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\range.rs:73:12\n   |\n73 |     if let Some(len) = \"=\".p(s) {\n   |            ^^^^ not found in this scope\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0531",
                  "explanation": "An unknown tuple struct/variant has been used.\n\nErroneous code example:\n\n```compile_fail,E0531\nlet Type(x) = Type(12); // error!\nmatch Bar(12) {\n    Bar(x) => {} // error!\n    _ => {}\n}\n```\n\nIn most cases, it's either a forgotten import or a typo. However, let's look at\nhow you can have such a type:\n\n```edition2018\nstruct Type(u32); // this is a tuple struct\n\nenum Foo {\n    Bar(u32), // this is a tuple variant\n}\n\nuse Foo::*; // To use Foo's variant directly, we need to import them in\n            // the scope.\n```\n\nEither way, it should work fine with our previous code:\n\n```edition2018\nstruct Type(u32);\n\nenum Foo {\n    Bar(u32),\n}\nuse Foo::*;\n\nlet Type(x) = Type(12); // ok!\nmatch Type(12) {\n    Type(x) => {} // ok!\n    _ => {}\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find tuple struct or tuple variant `Some` in this scope",
                "spans": [
                  {
                    "byte_end": 1738,
                    "byte_start": 1734,
                    "column_end": 16,
                    "column_start": 12,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\range.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 73,
                    "line_start": 73,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 16,
                        "highlight_start": 12,
                        "text": "    if let Some(len) = \"=\".p(s) {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#semver-parser@0.7.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "semver_parser",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0531]: cannot find tuple struct or tuple variant `Some` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\range.rs:75:19\n   |\n75 |     } else if let Some(len) = \">=\".p(s) {\n   |                   ^^^^ not found in this scope\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0531",
                  "explanation": "An unknown tuple struct/variant has been used.\n\nErroneous code example:\n\n```compile_fail,E0531\nlet Type(x) = Type(12); // error!\nmatch Bar(12) {\n    Bar(x) => {} // error!\n    _ => {}\n}\n```\n\nIn most cases, it's either a forgotten import or a typo. However, let's look at\nhow you can have such a type:\n\n```edition2018\nstruct Type(u32); // this is a tuple struct\n\nenum Foo {\n    Bar(u32), // this is a tuple variant\n}\n\nuse Foo::*; // To use Foo's variant directly, we need to import them in\n            // the scope.\n```\n\nEither way, it should work fine with our previous code:\n\n```edition2018\nstruct Type(u32);\n\nenum Foo {\n    Bar(u32),\n}\nuse Foo::*;\n\nlet Type(x) = Type(12); // ok!\nmatch Type(12) {\n    Type(x) => {} // ok!\n    _ => {}\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find tuple struct or tuple variant `Some` in this scope",
                "spans": [
                  {
                    "byte_end": 1807,
                    "byte_start": 1803,
                    "column_end": 23,
                    "column_start": 19,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\range.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 75,
                    "line_start": 75,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 23,
                        "highlight_start": 19,
                        "text": "    } else if let Some(len) = \">=\".p(s) {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#semver-parser@0.7.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "semver_parser",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0531]: cannot find tuple struct or tuple variant `Some` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\range.rs:77:19\n   |\n77 |     } else if let Some(len) = \">\".p(s) {\n   |                   ^^^^ not found in this scope\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0531",
                  "explanation": "An unknown tuple struct/variant has been used.\n\nErroneous code example:\n\n```compile_fail,E0531\nlet Type(x) = Type(12); // error!\nmatch Bar(12) {\n    Bar(x) => {} // error!\n    _ => {}\n}\n```\n\nIn most cases, it's either a forgotten import or a typo. However, let's look at\nhow you can have such a type:\n\n```edition2018\nstruct Type(u32); // this is a tuple struct\n\nenum Foo {\n    Bar(u32), // this is a tuple variant\n}\n\nuse Foo::*; // To use Foo's variant directly, we need to import them in\n            // the scope.\n```\n\nEither way, it should work fine with our previous code:\n\n```edition2018\nstruct Type(u32);\n\nenum Foo {\n    Bar(u32),\n}\nuse Foo::*;\n\nlet Type(x) = Type(12); // ok!\nmatch Type(12) {\n    Type(x) => {} // ok!\n    _ => {}\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find tuple struct or tuple variant `Some` in this scope",
                "spans": [
                  {
                    "byte_end": 1879,
                    "byte_start": 1875,
                    "column_end": 23,
                    "column_start": 19,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\range.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 77,
                    "line_start": 77,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 23,
                        "highlight_start": 19,
                        "text": "    } else if let Some(len) = \">\".p(s) {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#semver-parser@0.7.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "semver_parser",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0531]: cannot find tuple struct or tuple variant `Some` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\range.rs:79:19\n   |\n79 |     } else if let Some(len) = \"<=\".p(s) {\n   |                   ^^^^ not found in this scope\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0531",
                  "explanation": "An unknown tuple struct/variant has been used.\n\nErroneous code example:\n\n```compile_fail,E0531\nlet Type(x) = Type(12); // error!\nmatch Bar(12) {\n    Bar(x) => {} // error!\n    _ => {}\n}\n```\n\nIn most cases, it's either a forgotten import or a typo. However, let's look at\nhow you can have such a type:\n\n```edition2018\nstruct Type(u32); // this is a tuple struct\n\nenum Foo {\n    Bar(u32), // this is a tuple variant\n}\n\nuse Foo::*; // To use Foo's variant directly, we need to import them in\n            // the scope.\n```\n\nEither way, it should work fine with our previous code:\n\n```edition2018\nstruct Type(u32);\n\nenum Foo {\n    Bar(u32),\n}\nuse Foo::*;\n\nlet Type(x) = Type(12); // ok!\nmatch Type(12) {\n    Type(x) => {} // ok!\n    _ => {}\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find tuple struct or tuple variant `Some` in this scope",
                "spans": [
                  {
                    "byte_end": 1948,
                    "byte_start": 1944,
                    "column_end": 23,
                    "column_start": 19,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\range.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 79,
                    "line_start": 79,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 23,
                        "highlight_start": 19,
                        "text": "    } else if let Some(len) = \"<=\".p(s) {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#semver-parser@0.7.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "semver_parser",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0531]: cannot find tuple struct or tuple variant `Some` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\range.rs:81:19\n   |\n81 |     } else if let Some(len) = \"<\".p(s) {\n   |                   ^^^^ not found in this scope\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0531",
                  "explanation": "An unknown tuple struct/variant has been used.\n\nErroneous code example:\n\n```compile_fail,E0531\nlet Type(x) = Type(12); // error!\nmatch Bar(12) {\n    Bar(x) => {} // error!\n    _ => {}\n}\n```\n\nIn most cases, it's either a forgotten import or a typo. However, let's look at\nhow you can have such a type:\n\n```edition2018\nstruct Type(u32); // this is a tuple struct\n\nenum Foo {\n    Bar(u32), // this is a tuple variant\n}\n\nuse Foo::*; // To use Foo's variant directly, we need to import them in\n            // the scope.\n```\n\nEither way, it should work fine with our previous code:\n\n```edition2018\nstruct Type(u32);\n\nenum Foo {\n    Bar(u32),\n}\nuse Foo::*;\n\nlet Type(x) = Type(12); // ok!\nmatch Type(12) {\n    Type(x) => {} // ok!\n    _ => {}\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find tuple struct or tuple variant `Some` in this scope",
                "spans": [
                  {
                    "byte_end": 2020,
                    "byte_start": 2016,
                    "column_end": 23,
                    "column_start": 19,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\range.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 81,
                    "line_start": 81,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 23,
                        "highlight_start": 19,
                        "text": "    } else if let Some(len) = \"<\".p(s) {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#semver-parser@0.7.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "semver_parser",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0531]: cannot find tuple struct or tuple variant `Some` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\range.rs:83:19\n   |\n83 |     } else if let Some(len) = \"~\".p(s) {\n   |                   ^^^^ not found in this scope\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0531",
                  "explanation": "An unknown tuple struct/variant has been used.\n\nErroneous code example:\n\n```compile_fail,E0531\nlet Type(x) = Type(12); // error!\nmatch Bar(12) {\n    Bar(x) => {} // error!\n    _ => {}\n}\n```\n\nIn most cases, it's either a forgotten import or a typo. However, let's look at\nhow you can have such a type:\n\n```edition2018\nstruct Type(u32); // this is a tuple struct\n\nenum Foo {\n    Bar(u32), // this is a tuple variant\n}\n\nuse Foo::*; // To use Foo's variant directly, we need to import them in\n            // the scope.\n```\n\nEither way, it should work fine with our previous code:\n\n```edition2018\nstruct Type(u32);\n\nenum Foo {\n    Bar(u32),\n}\nuse Foo::*;\n\nlet Type(x) = Type(12); // ok!\nmatch Type(12) {\n    Type(x) => {} // ok!\n    _ => {}\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find tuple struct or tuple variant `Some` in this scope",
                "spans": [
                  {
                    "byte_end": 2089,
                    "byte_start": 2085,
                    "column_end": 23,
                    "column_start": 19,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\range.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 83,
                    "line_start": 83,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 23,
                        "highlight_start": 19,
                        "text": "    } else if let Some(len) = \"~\".p(s) {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#semver-parser@0.7.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "semver_parser",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0531]: cannot find tuple struct or tuple variant `Some` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\range.rs:85:19\n   |\n85 |     } else if let Some(len) = \"^\".p(s) {\n   |                   ^^^^ not found in this scope\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0531",
                  "explanation": "An unknown tuple struct/variant has been used.\n\nErroneous code example:\n\n```compile_fail,E0531\nlet Type(x) = Type(12); // error!\nmatch Bar(12) {\n    Bar(x) => {} // error!\n    _ => {}\n}\n```\n\nIn most cases, it's either a forgotten import or a typo. However, let's look at\nhow you can have such a type:\n\n```edition2018\nstruct Type(u32); // this is a tuple struct\n\nenum Foo {\n    Bar(u32), // this is a tuple variant\n}\n\nuse Foo::*; // To use Foo's variant directly, we need to import them in\n            // the scope.\n```\n\nEither way, it should work fine with our previous code:\n\n```edition2018\nstruct Type(u32);\n\nenum Foo {\n    Bar(u32),\n}\nuse Foo::*;\n\nlet Type(x) = Type(12); // ok!\nmatch Type(12) {\n    Type(x) => {} // ok!\n    _ => {}\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find tuple struct or tuple variant `Some` in this scope",
                "spans": [
                  {
                    "byte_end": 2161,
                    "byte_start": 2157,
                    "column_end": 23,
                    "column_start": 19,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\range.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 85,
                    "line_start": 85,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 23,
                        "highlight_start": 19,
                        "text": "    } else if let Some(len) = \"^\".p(s) {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#semver-parser@0.7.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "semver_parser",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0425]: cannot find value `None` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\range.rs:88:9\n   |\n88 |         None\n   |         ^^^^ not found in this scope\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0425",
                  "explanation": "An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"
                },
                "level": "error",
                "message": "cannot find value `None` in this scope",
                "spans": [
                  {
                    "byte_end": 2241,
                    "byte_start": 2237,
                    "column_end": 13,
                    "column_start": 9,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\range.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 88,
                    "line_start": 88,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 13,
                        "highlight_start": 9,
                        "text": "        None"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#semver-parser@0.7.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "semver_parser",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0412]: cannot find type `Option` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\range.rs:92:28\n   |\n92 | fn whitespace(s: &[u8]) -> Option<usize> {\n   |                            ^^^^^^ not found in this scope\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0412",
                  "explanation": "A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"
                },
                "level": "error",
                "message": "cannot find type `Option` in this scope",
                "spans": [
                  {
                    "byte_end": 2284,
                    "byte_start": 2278,
                    "column_end": 34,
                    "column_start": 28,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\range.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 92,
                    "line_start": 92,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 34,
                        "highlight_start": 28,
                        "text": "fn whitespace(s: &[u8]) -> Option<usize> {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#semver-parser@0.7.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "semver_parser",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0412]: cannot find type `Result` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\range.rs:96:40\n   |\n96 | pub fn parse_predicate(range: &str) -> Result<Predicate, String> {\n   |                                        ^^^^^^ not found in this scope\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0412",
                  "explanation": "A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"
                },
                "level": "error",
                "message": "cannot find type `Result` in this scope",
                "spans": [
                  {
                    "byte_end": 2381,
                    "byte_start": 2375,
                    "column_end": 46,
                    "column_start": 40,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\range.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 96,
                    "line_start": 96,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 46,
                        "highlight_start": 40,
                        "text": "pub fn parse_predicate(range: &str) -> Result<Predicate, String> {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#semver-parser@0.7.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "semver_parser",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0412]: cannot find type `String` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\range.rs:96:58\n   |\n96 | pub fn parse_predicate(range: &str) -> Result<Predicate, String> {\n   |                                                          ^^^^^^ not found in this scope\n   |\nhelp: you might be missing a type parameter\n   |\n96 | pub fn parse_predicate<String>(range: &str) -> Result<Predicate, String> {\n   |                       ++++++++\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "you might be missing a type parameter",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 2358,
                        "byte_start": 2358,
                        "column_end": 23,
                        "column_start": 23,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\range.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 96,
                        "line_start": 96,
                        "suggested_replacement": "<String>",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 23,
                            "highlight_start": 23,
                            "text": "pub fn parse_predicate(range: &str) -> Result<Predicate, String> {"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0412",
                  "explanation": "A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"
                },
                "level": "error",
                "message": "cannot find type `String` in this scope",
                "spans": [
                  {
                    "byte_end": 2399,
                    "byte_start": 2393,
                    "column_end": 64,
                    "column_start": 58,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\range.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 96,
                    "line_start": 96,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 64,
                        "highlight_start": 58,
                        "text": "pub fn parse_predicate(range: &str) -> Result<Predicate, String> {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#semver-parser@0.7.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "semver_parser",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0531]: cannot find tuple struct or tuple variant `Some` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\range.rs:99:32\n   |\n99 |     let mut operation = if let Some((op, len)) = operation(&s[i..]) {\n   |                                ^^^^ not found in this scope\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0531",
                  "explanation": "An unknown tuple struct/variant has been used.\n\nErroneous code example:\n\n```compile_fail,E0531\nlet Type(x) = Type(12); // error!\nmatch Bar(12) {\n    Bar(x) => {} // error!\n    _ => {}\n}\n```\n\nIn most cases, it's either a forgotten import or a typo. However, let's look at\nhow you can have such a type:\n\n```edition2018\nstruct Type(u32); // this is a tuple struct\n\nenum Foo {\n    Bar(u32), // this is a tuple variant\n}\n\nuse Foo::*; // To use Foo's variant directly, we need to import them in\n            // the scope.\n```\n\nEither way, it should work fine with our previous code:\n\n```edition2018\nstruct Type(u32);\n\nenum Foo {\n    Bar(u32),\n}\nuse Foo::*;\n\nlet Type(x) = Type(12); // ok!\nmatch Type(12) {\n    Type(x) => {} // ok!\n    _ => {}\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find tuple struct or tuple variant `Some` in this scope",
                "spans": [
                  {
                    "byte_end": 2494,
                    "byte_start": 2490,
                    "column_end": 36,
                    "column_start": 32,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\range.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 99,
                    "line_start": 99,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 36,
                        "highlight_start": 32,
                        "text": "    let mut operation = if let Some((op, len)) = operation(&s[i..]) {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#semver-parser@0.7.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "semver_parser",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0531]: cannot find tuple struct or tuple variant `Some` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\range.rs:106:12\n    |\n106 |     if let Some(len) = whitespace.p(&s[i..]) {\n    |            ^^^^ not found in this scope\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0531",
                  "explanation": "An unknown tuple struct/variant has been used.\n\nErroneous code example:\n\n```compile_fail,E0531\nlet Type(x) = Type(12); // error!\nmatch Bar(12) {\n    Bar(x) => {} // error!\n    _ => {}\n}\n```\n\nIn most cases, it's either a forgotten import or a typo. However, let's look at\nhow you can have such a type:\n\n```edition2018\nstruct Type(u32); // this is a tuple struct\n\nenum Foo {\n    Bar(u32), // this is a tuple variant\n}\n\nuse Foo::*; // To use Foo's variant directly, we need to import them in\n            // the scope.\n```\n\nEither way, it should work fine with our previous code:\n\n```edition2018\nstruct Type(u32);\n\nenum Foo {\n    Bar(u32),\n}\nuse Foo::*;\n\nlet Type(x) = Type(12); // ok!\nmatch Type(12) {\n    Type(x) => {} // ok!\n    _ => {}\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find tuple struct or tuple variant `Some` in this scope",
                "spans": [
                  {
                    "byte_end": 2660,
                    "byte_start": 2656,
                    "column_end": 16,
                    "column_start": 12,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\range.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 106,
                    "line_start": 106,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 16,
                        "highlight_start": 12,
                        "text": "    if let Some(len) = whitespace.p(&s[i..]) {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#autocfg@0.1.7",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "autocfg",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error: requires `sized` lang_item\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\src\\lib.rs:76:14\n   |\n76 |     out_dir: PathBuf,\n   |              ^^^^^^^\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": null,
                "level": "error",
                "message": "requires `sized` lang_item",
                "spans": [
                  {
                    "byte_end": 2137,
                    "byte_start": 2130,
                    "column_end": 21,
                    "column_start": 14,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\src\\lib.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 76,
                    "line_start": 76,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 21,
                        "highlight_start": 14,
                        "text": "    out_dir: PathBuf,"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#semver-parser@0.7.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "semver_parser",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0531]: cannot find tuple struct or tuple variant `Some` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\range.rs:109:24\n    |\n109 |     let major = if let Some((major, len)) = numeric_identifier(&s[i..]) {\n    |                        ^^^^ not found in this scope\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0531",
                  "explanation": "An unknown tuple struct/variant has been used.\n\nErroneous code example:\n\n```compile_fail,E0531\nlet Type(x) = Type(12); // error!\nmatch Bar(12) {\n    Bar(x) => {} // error!\n    _ => {}\n}\n```\n\nIn most cases, it's either a forgotten import or a typo. However, let's look at\nhow you can have such a type:\n\n```edition2018\nstruct Type(u32); // this is a tuple struct\n\nenum Foo {\n    Bar(u32), // this is a tuple variant\n}\n\nuse Foo::*; // To use Foo's variant directly, we need to import them in\n            // the scope.\n```\n\nEither way, it should work fine with our previous code:\n\n```edition2018\nstruct Type(u32);\n\nenum Foo {\n    Bar(u32),\n}\nuse Foo::*;\n\nlet Type(x) = Type(12); // ok!\nmatch Type(12) {\n    Type(x) => {} // ok!\n    _ => {}\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find tuple struct or tuple variant `Some` in this scope",
                "spans": [
                  {
                    "byte_end": 2743,
                    "byte_start": 2739,
                    "column_end": 28,
                    "column_start": 24,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\range.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 109,
                    "line_start": 109,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 28,
                        "highlight_start": 24,
                        "text": "    let major = if let Some((major, len)) = numeric_identifier(&s[i..]) {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#semver-parser@0.7.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "semver_parser",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0531]: cannot find tuple struct or tuple variant `Some` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\range.rs:115:24\n    |\n115 |     let minor = if let Some((minor, len)) = dot_numeric_or_wild(&s[i..]) {\n    |                        ^^^^ not found in this scope\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0531",
                  "explanation": "An unknown tuple struct/variant has been used.\n\nErroneous code example:\n\n```compile_fail,E0531\nlet Type(x) = Type(12); // error!\nmatch Bar(12) {\n    Bar(x) => {} // error!\n    _ => {}\n}\n```\n\nIn most cases, it's either a forgotten import or a typo. However, let's look at\nhow you can have such a type:\n\n```edition2018\nstruct Type(u32); // this is a tuple struct\n\nenum Foo {\n    Bar(u32), // this is a tuple variant\n}\n\nuse Foo::*; // To use Foo's variant directly, we need to import them in\n            // the scope.\n```\n\nEither way, it should work fine with our previous code:\n\n```edition2018\nstruct Type(u32);\n\nenum Foo {\n    Bar(u32),\n}\nuse Foo::*;\n\nlet Type(x) = Type(12); // ok!\nmatch Type(12) {\n    Type(x) => {} // ok!\n    _ => {}\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find tuple struct or tuple variant `Some` in this scope",
                "spans": [
                  {
                    "byte_end": 2941,
                    "byte_start": 2937,
                    "column_end": 28,
                    "column_start": 24,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\range.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 115,
                    "line_start": 115,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 28,
                        "highlight_start": 24,
                        "text": "    let minor = if let Some((minor, len)) = dot_numeric_or_wild(&s[i..]) {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#semver-parser@0.7.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "semver_parser",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0425]: cannot find value `None` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\range.rs:122:9\n    |\n122 |         None\n    |         ^^^^ not found in this scope\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0425",
                  "explanation": "An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"
                },
                "level": "error",
                "message": "cannot find value `None` in this scope",
                "spans": [
                  {
                    "byte_end": 3147,
                    "byte_start": 3143,
                    "column_end": 13,
                    "column_start": 9,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\range.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 122,
                    "line_start": 122,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 13,
                        "highlight_start": 9,
                        "text": "        None"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#semver-parser@0.7.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "semver_parser",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0531]: cannot find tuple struct or tuple variant `Some` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\range.rs:124:24\n    |\n124 |     let patch = if let Some((patch, len)) = dot_numeric_or_wild(&s[i..]) {\n    |                        ^^^^ not found in this scope\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0531",
                  "explanation": "An unknown tuple struct/variant has been used.\n\nErroneous code example:\n\n```compile_fail,E0531\nlet Type(x) = Type(12); // error!\nmatch Bar(12) {\n    Bar(x) => {} // error!\n    _ => {}\n}\n```\n\nIn most cases, it's either a forgotten import or a typo. However, let's look at\nhow you can have such a type:\n\n```edition2018\nstruct Type(u32); // this is a tuple struct\n\nenum Foo {\n    Bar(u32), // this is a tuple variant\n}\n\nuse Foo::*; // To use Foo's variant directly, we need to import them in\n            // the scope.\n```\n\nEither way, it should work fine with our previous code:\n\n```edition2018\nstruct Type(u32);\n\nenum Foo {\n    Bar(u32),\n}\nuse Foo::*;\n\nlet Type(x) = Type(12); // ok!\nmatch Type(12) {\n    Type(x) => {} // ok!\n    _ => {}\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find tuple struct or tuple variant `Some` in this scope",
                "spans": [
                  {
                    "byte_end": 3182,
                    "byte_start": 3178,
                    "column_end": 28,
                    "column_start": 24,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\range.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 124,
                    "line_start": 124,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 28,
                        "highlight_start": 24,
                        "text": "    let patch = if let Some((patch, len)) = dot_numeric_or_wild(&s[i..]) {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#semver-parser@0.7.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "semver_parser",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0425]: cannot find value `None` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\range.rs:131:9\n    |\n131 |         None\n    |         ^^^^ not found in this scope\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0425",
                  "explanation": "An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"
                },
                "level": "error",
                "message": "cannot find value `None` in this scope",
                "spans": [
                  {
                    "byte_end": 3388,
                    "byte_start": 3384,
                    "column_end": 13,
                    "column_start": 9,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\range.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 131,
                    "line_start": 131,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 13,
                        "highlight_start": 9,
                        "text": "        None"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#semver-parser@0.7.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "semver_parser",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0531]: cannot find tuple struct or tuple variant `Some` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\range.rs:135:12\n    |\n135 |     if let Some(len) = (b'+', letters_numbers_dash_dot).p(&s[i..]) {\n    |            ^^^^ not found in this scope\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0531",
                  "explanation": "An unknown tuple struct/variant has been used.\n\nErroneous code example:\n\n```compile_fail,E0531\nlet Type(x) = Type(12); // error!\nmatch Bar(12) {\n    Bar(x) => {} // error!\n    _ => {}\n}\n```\n\nIn most cases, it's either a forgotten import or a typo. However, let's look at\nhow you can have such a type:\n\n```edition2018\nstruct Type(u32); // this is a tuple struct\n\nenum Foo {\n    Bar(u32), // this is a tuple variant\n}\n\nuse Foo::*; // To use Foo's variant directly, we need to import them in\n            // the scope.\n```\n\nEither way, it should work fine with our previous code:\n\n```edition2018\nstruct Type(u32);\n\nenum Foo {\n    Bar(u32),\n}\nuse Foo::*;\n\nlet Type(x) = Type(12); // ok!\nmatch Type(12) {\n    Type(x) => {} // ok!\n    _ => {}\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find tuple struct or tuple variant `Some` in this scope",
                "spans": [
                  {
                    "byte_end": 3499,
                    "byte_start": 3495,
                    "column_end": 16,
                    "column_start": 12,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\range.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 135,
                    "line_start": 135,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 16,
                        "highlight_start": 12,
                        "text": "    if let Some(len) = (b'+', letters_numbers_dash_dot).p(&s[i..]) {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#semver-parser@0.7.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "semver_parser",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0412]: cannot find type `Result` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\range.rs:151:31\n    |\n151 | pub fn parse(ranges: &str) -> Result<VersionReq, String> {\n    |                               ^^^^^^ not found in this scope\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0412",
                  "explanation": "A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"
                },
                "level": "error",
                "message": "cannot find type `Result` in this scope",
                "spans": [
                  {
                    "byte_end": 3889,
                    "byte_start": 3883,
                    "column_end": 37,
                    "column_start": 31,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\range.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 151,
                    "line_start": 151,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 37,
                        "highlight_start": 31,
                        "text": "pub fn parse(ranges: &str) -> Result<VersionReq, String> {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#semver-parser@0.7.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "semver_parser",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0412]: cannot find type `String` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\range.rs:151:50\n    |\n151 | pub fn parse(ranges: &str) -> Result<VersionReq, String> {\n    |                                                  ^^^^^^ not found in this scope\n    |\nhelp: you might be missing a type parameter\n    |\n151 | pub fn parse<String>(ranges: &str) -> Result<VersionReq, String> {\n    |             ++++++++\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "you might be missing a type parameter",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 3865,
                        "byte_start": 3865,
                        "column_end": 13,
                        "column_start": 13,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\range.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 151,
                        "line_start": 151,
                        "suggested_replacement": "<String>",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 13,
                            "highlight_start": 13,
                            "text": "pub fn parse(ranges: &str) -> Result<VersionReq, String> {"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0412",
                  "explanation": "A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"
                },
                "level": "error",
                "message": "cannot find type `String` in this scope",
                "spans": [
                  {
                    "byte_end": 3908,
                    "byte_start": 3902,
                    "column_end": 56,
                    "column_start": 50,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\range.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 151,
                    "line_start": 151,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 56,
                        "highlight_start": 50,
                        "text": "pub fn parse(ranges: &str) -> Result<VersionReq, String> {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#semver-parser@0.7.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "semver_parser",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0412]: cannot find type `Result` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\range.rs:177:21\n    |\n177 |     let predicates: Result<Vec<_>, String> = ranges\n    |                     ^^^^^^ not found in this scope\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0412",
                  "explanation": "A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"
                },
                "level": "error",
                "message": "cannot find type `Result` in this scope",
                "spans": [
                  {
                    "byte_end": 4572,
                    "byte_start": 4566,
                    "column_end": 27,
                    "column_start": 21,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\range.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 177,
                    "line_start": 177,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 27,
                        "highlight_start": 21,
                        "text": "    let predicates: Result<Vec<_>, String> = ranges"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#semver-parser@0.7.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "semver_parser",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0412]: cannot find type `Vec` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\range.rs:177:28\n    |\n177 |     let predicates: Result<Vec<_>, String> = ranges\n    |                            ^^^ not found in this scope\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0412",
                  "explanation": "A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"
                },
                "level": "error",
                "message": "cannot find type `Vec` in this scope",
                "spans": [
                  {
                    "byte_end": 4576,
                    "byte_start": 4573,
                    "column_end": 31,
                    "column_start": 28,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\range.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 177,
                    "line_start": 177,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 31,
                        "highlight_start": 28,
                        "text": "    let predicates: Result<Vec<_>, String> = ranges"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#semver-parser@0.7.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "semver_parser",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0412]: cannot find type `String` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\range.rs:177:36\n    |\n177 |     let predicates: Result<Vec<_>, String> = ranges\n    |                                    ^^^^^^ not found in this scope\n    |\nhelp: you might be missing a type parameter\n    |\n151 | pub fn parse<String>(ranges: &str) -> Result<VersionReq, String> {\n    |             ++++++++\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "you might be missing a type parameter",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 3865,
                        "byte_start": 3865,
                        "column_end": 13,
                        "column_start": 13,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\range.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 151,
                        "line_start": 151,
                        "suggested_replacement": "<String>",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 13,
                            "highlight_start": 13,
                            "text": "pub fn parse(ranges: &str) -> Result<VersionReq, String> {"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0412",
                  "explanation": "A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"
                },
                "level": "error",
                "message": "cannot find type `String` in this scope",
                "spans": [
                  {
                    "byte_end": 4587,
                    "byte_start": 4581,
                    "column_end": 42,
                    "column_start": 36,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\range.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 177,
                    "line_start": 177,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 42,
                        "highlight_start": 36,
                        "text": "    let predicates: Result<Vec<_>, String> = ranges"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#semver-parser@0.7.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "semver_parser",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0412]: cannot find type `Vec` in this scope\n --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\common.rs:7:27\n  |\n7 | fn parse_meta(s: &str) -> Vec<Identifier> {\n  |                           ^^^ not found in this scope\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0412",
                  "explanation": "A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"
                },
                "level": "error",
                "message": "cannot find type `Vec` in this scope",
                "spans": [
                  {
                    "byte_end": 267,
                    "byte_start": 264,
                    "column_end": 30,
                    "column_start": 27,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\common.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 7,
                    "line_start": 7,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 30,
                        "highlight_start": 27,
                        "text": "fn parse_meta(s: &str) -> Vec<Identifier> {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#semver-parser@0.7.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "semver_parser",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0412]: cannot find type `Result` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\common.rs:28:57\n   |\n28 | pub fn parse_optional_meta(s: &[u8], prefix_char: u8)-> Result<(Vec<Identifier>, usize), String> {\n   |                                                         ^^^^^^ not found in this scope\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0412",
                  "explanation": "A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"
                },
                "level": "error",
                "message": "cannot find type `Result` in this scope",
                "spans": [
                  {
                    "byte_end": 1373,
                    "byte_start": 1367,
                    "column_end": 63,
                    "column_start": 57,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\common.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 28,
                    "line_start": 28,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 63,
                        "highlight_start": 57,
                        "text": "pub fn parse_optional_meta(s: &[u8], prefix_char: u8)-> Result<(Vec<Identifier>, usize), String> {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#semver-parser@0.7.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "semver_parser",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0412]: cannot find type `Vec` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\common.rs:28:65\n   |\n28 | pub fn parse_optional_meta(s: &[u8], prefix_char: u8)-> Result<(Vec<Identifier>, usize), String> {\n   |                                                                 ^^^ not found in this scope\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0412",
                  "explanation": "A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"
                },
                "level": "error",
                "message": "cannot find type `Vec` in this scope",
                "spans": [
                  {
                    "byte_end": 1378,
                    "byte_start": 1375,
                    "column_end": 68,
                    "column_start": 65,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\common.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 28,
                    "line_start": 28,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 68,
                        "highlight_start": 65,
                        "text": "pub fn parse_optional_meta(s: &[u8], prefix_char: u8)-> Result<(Vec<Identifier>, usize), String> {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#semver-parser@0.7.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "semver_parser",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0412]: cannot find type `String` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\common.rs:28:90\n   |\n28 | pub fn parse_optional_meta(s: &[u8], prefix_char: u8)-> Result<(Vec<Identifier>, usize), String> {\n   |                                                                                          ^^^^^^ not found in this scope\n   |\nhelp: you might be missing a type parameter\n   |\n28 | pub fn parse_optional_meta<String>(s: &[u8], prefix_char: u8)-> Result<(Vec<Identifier>, usize), String> {\n   |                           ++++++++\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "you might be missing a type parameter",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 1337,
                        "byte_start": 1337,
                        "column_end": 27,
                        "column_start": 27,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\common.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 28,
                        "line_start": 28,
                        "suggested_replacement": "<String>",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 27,
                            "highlight_start": 27,
                            "text": "pub fn parse_optional_meta(s: &[u8], prefix_char: u8)-> Result<(Vec<Identifier>, usize), String> {"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0412",
                  "explanation": "A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"
                },
                "level": "error",
                "message": "cannot find type `String` in this scope",
                "spans": [
                  {
                    "byte_end": 1406,
                    "byte_start": 1400,
                    "column_end": 96,
                    "column_start": 90,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\common.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 28,
                    "line_start": 28,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 96,
                        "highlight_start": 90,
                        "text": "pub fn parse_optional_meta(s: &[u8], prefix_char: u8)-> Result<(Vec<Identifier>, usize), String> {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#semver-parser@0.7.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "semver_parser",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0531]: cannot find tuple struct or tuple variant `Some` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\common.rs:29:12\n   |\n29 |     if let Some(len) = prefix_char.p(s) {\n   |            ^^^^ not found in this scope\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0531",
                  "explanation": "An unknown tuple struct/variant has been used.\n\nErroneous code example:\n\n```compile_fail,E0531\nlet Type(x) = Type(12); // error!\nmatch Bar(12) {\n    Bar(x) => {} // error!\n    _ => {}\n}\n```\n\nIn most cases, it's either a forgotten import or a typo. However, let's look at\nhow you can have such a type:\n\n```edition2018\nstruct Type(u32); // this is a tuple struct\n\nenum Foo {\n    Bar(u32), // this is a tuple variant\n}\n\nuse Foo::*; // To use Foo's variant directly, we need to import them in\n            // the scope.\n```\n\nEither way, it should work fine with our previous code:\n\n```edition2018\nstruct Type(u32);\n\nenum Foo {\n    Bar(u32),\n}\nuse Foo::*;\n\nlet Type(x) = Type(12); // ok!\nmatch Type(12) {\n    Type(x) => {} // ok!\n    _ => {}\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find tuple struct or tuple variant `Some` in this scope",
                "spans": [
                  {
                    "byte_end": 1425,
                    "byte_start": 1421,
                    "column_end": 16,
                    "column_start": 12,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\common.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 29,
                    "line_start": 29,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 16,
                        "highlight_start": 12,
                        "text": "    if let Some(len) = prefix_char.p(s) {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#semver-parser@0.7.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "semver_parser",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0531]: cannot find tuple struct or tuple variant `Some` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\common.rs:31:16\n   |\n31 |         if let Some(len) = letters_numbers_dash_dot(&s[start..]) {\n   |                ^^^^ not found in this scope\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0531",
                  "explanation": "An unknown tuple struct/variant has been used.\n\nErroneous code example:\n\n```compile_fail,E0531\nlet Type(x) = Type(12); // error!\nmatch Bar(12) {\n    Bar(x) => {} // error!\n    _ => {}\n}\n```\n\nIn most cases, it's either a forgotten import or a typo. However, let's look at\nhow you can have such a type:\n\n```edition2018\nstruct Type(u32); // this is a tuple struct\n\nenum Foo {\n    Bar(u32), // this is a tuple variant\n}\n\nuse Foo::*; // To use Foo's variant directly, we need to import them in\n            // the scope.\n```\n\nEither way, it should work fine with our previous code:\n\n```edition2018\nstruct Type(u32);\n\nenum Foo {\n    Bar(u32),\n}\nuse Foo::*;\n\nlet Type(x) = Type(12); // ok!\nmatch Type(12) {\n    Type(x) => {} // ok!\n    _ => {}\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find tuple struct or tuple variant `Some` in this scope",
                "spans": [
                  {
                    "byte_end": 1496,
                    "byte_start": 1492,
                    "column_end": 20,
                    "column_start": 16,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\common.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 31,
                    "line_start": 31,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 20,
                        "highlight_start": 16,
                        "text": "        if let Some(len) = letters_numbers_dash_dot(&s[start..]) {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#semver-parser@0.7.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "semver_parser",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0531]: cannot find tuple struct or tuple variant `Some` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\common.rs:43:12\n   |\n43 |     if let Some((_val, len)) = numeric_identifier(s.as_bytes()) {\n   |            ^^^^ not found in this scope\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0531",
                  "explanation": "An unknown tuple struct/variant has been used.\n\nErroneous code example:\n\n```compile_fail,E0531\nlet Type(x) = Type(12); // error!\nmatch Bar(12) {\n    Bar(x) => {} // error!\n    _ => {}\n}\n```\n\nIn most cases, it's either a forgotten import or a typo. However, let's look at\nhow you can have such a type:\n\n```edition2018\nstruct Type(u32); // this is a tuple struct\n\nenum Foo {\n    Bar(u32), // this is a tuple variant\n}\n\nuse Foo::*; // To use Foo's variant directly, we need to import them in\n            // the scope.\n```\n\nEither way, it should work fine with our previous code:\n\n```edition2018\nstruct Type(u32);\n\nenum Foo {\n    Bar(u32),\n}\nuse Foo::*;\n\nlet Type(x) = Type(12); // ok!\nmatch Type(12) {\n    Type(x) => {} // ok!\n    _ => {}\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find tuple struct or tuple variant `Some` in this scope",
                "spans": [
                  {
                    "byte_end": 1840,
                    "byte_start": 1836,
                    "column_end": 16,
                    "column_start": 12,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\common.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 43,
                    "line_start": 43,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 16,
                        "highlight_start": 12,
                        "text": "    if let Some((_val, len)) = numeric_identifier(s.as_bytes()) {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#semver-parser@0.7.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "semver_parser",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0412]: cannot find type `Option` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\common.rs:53:40\n   |\n53 | pub fn numeric_identifier(s: &[u8]) -> Option<(u64, usize)> {\n   |                                        ^^^^^^ not found in this scope\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0412",
                  "explanation": "A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"
                },
                "level": "error",
                "message": "cannot find type `Option` in this scope",
                "spans": [
                  {
                    "byte_end": 2185,
                    "byte_start": 2179,
                    "column_end": 46,
                    "column_start": 40,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\common.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 53,
                    "line_start": 53,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 46,
                        "highlight_start": 40,
                        "text": "pub fn numeric_identifier(s: &[u8]) -> Option<(u64, usize)> {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#semver-parser@0.7.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "semver_parser",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0531]: cannot find tuple struct or tuple variant `Some` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\common.rs:54:12\n   |\n54 |     if let Some(len) = Alt(b'0', OneOrMore(Inclusive(b'0'..b'9'))).p(s) {\n   |            ^^^^ not found in this scope\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0531",
                  "explanation": "An unknown tuple struct/variant has been used.\n\nErroneous code example:\n\n```compile_fail,E0531\nlet Type(x) = Type(12); // error!\nmatch Bar(12) {\n    Bar(x) => {} // error!\n    _ => {}\n}\n```\n\nIn most cases, it's either a forgotten import or a typo. However, let's look at\nhow you can have such a type:\n\n```edition2018\nstruct Type(u32); // this is a tuple struct\n\nenum Foo {\n    Bar(u32), // this is a tuple variant\n}\n\nuse Foo::*; // To use Foo's variant directly, we need to import them in\n            // the scope.\n```\n\nEither way, it should work fine with our previous code:\n\n```edition2018\nstruct Type(u32);\n\nenum Foo {\n    Bar(u32),\n}\nuse Foo::*;\n\nlet Type(x) = Type(12); // ok!\nmatch Type(12) {\n    Type(x) => {} // ok!\n    _ => {}\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find tuple struct or tuple variant `Some` in this scope",
                "spans": [
                  {
                    "byte_end": 2217,
                    "byte_start": 2213,
                    "column_end": 16,
                    "column_start": 12,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\common.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 54,
                    "line_start": 54,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 16,
                        "highlight_start": 12,
                        "text": "    if let Some(len) = Alt(b'0', OneOrMore(Inclusive(b'0'..b'9'))).p(s) {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#semver-parser@0.7.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "semver_parser",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0425]: cannot find value `None` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\common.rs:57:9\n   |\n57 |         None\n   |         ^^^^ not found in this scope\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0425",
                  "explanation": "An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"
                },
                "level": "error",
                "message": "cannot find value `None` in this scope",
                "spans": [
                  {
                    "byte_end": 2375,
                    "byte_start": 2371,
                    "column_end": 13,
                    "column_start": 9,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\common.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 57,
                    "line_start": 57,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 13,
                        "highlight_start": 9,
                        "text": "        None"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#semver-parser@0.7.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "semver_parser",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0412]: cannot find type `Option` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\common.rs:61:46\n   |\n61 | pub fn letters_numbers_dash_dot(s: &[u8]) -> Option<usize> {\n   |                                              ^^^^^^ not found in this scope\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0412",
                  "explanation": "A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"
                },
                "level": "error",
                "message": "cannot find type `Option` in this scope",
                "spans": [
                  {
                    "byte_end": 2436,
                    "byte_start": 2430,
                    "column_end": 52,
                    "column_start": 46,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\common.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 61,
                    "line_start": 61,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 52,
                        "highlight_start": 46,
                        "text": "pub fn letters_numbers_dash_dot(s: &[u8]) -> Option<usize> {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#semver-parser@0.7.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "semver_parser",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0412]: cannot find type `Option` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\recognize.rs:30:30\n   |\n30 |     fn p(&self, s: &[u8]) -> Option<usize>;\n   |                              ^^^^^^ not found in this scope\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0412",
                  "explanation": "A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"
                },
                "level": "error",
                "message": "cannot find type `Option` in this scope",
                "spans": [
                  {
                    "byte_end": 1092,
                    "byte_start": 1086,
                    "column_end": 36,
                    "column_start": 30,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\recognize.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 30,
                    "line_start": 30,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 36,
                        "highlight_start": 30,
                        "text": "    fn p(&self, s: &[u8]) -> Option<usize>;"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#semver-parser@0.7.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "semver_parser",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0405]: cannot find trait `Fn` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\recognize.rs:33:9\n   |\n33 | impl<F: Fn(&[u8]) -> Option<usize>> Recognize for F {\n   |         ^^ not found in this scope\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0405",
                  "explanation": "The code refers to a trait that is not in scope.\n\nErroneous code example:\n\n```compile_fail,E0405\nstruct Foo;\n\nimpl SomeTrait for Foo {} // error: trait `SomeTrait` is not in scope\n```\n\nPlease verify that the name of the trait wasn't misspelled and ensure that it\nwas imported. Example:\n\n```\n# #[cfg(for_demonstration_only)]\n// solution 1:\nuse some_file::SomeTrait;\n\n// solution 2:\ntrait SomeTrait {\n    // some functions\n}\n\nstruct Foo;\n\nimpl SomeTrait for Foo { // ok!\n    // implements functions\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find trait `Fn` in this scope",
                "spans": [
                  {
                    "byte_end": 1114,
                    "byte_start": 1112,
                    "column_end": 11,
                    "column_start": 9,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\recognize.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 33,
                    "line_start": 33,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 11,
                        "highlight_start": 9,
                        "text": "impl<F: Fn(&[u8]) -> Option<usize>> Recognize for F {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#autocfg@0.1.7",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "autocfg",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error: requires `sized` lang_item\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\src\\lib.rs:89:24\n   |\n89 |   pub fn emit(cfg: &str) {\n   |  ________________________^\n90 | |     println!(\"cargo:rustc-cfg={}\", cfg);\n91 | | }\n   | |_^\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": null,
                "level": "error",
                "message": "requires `sized` lang_item",
                "spans": [
                  {
                    "byte_end": 2509,
                    "byte_start": 2465,
                    "column_end": 2,
                    "column_start": 24,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\src\\lib.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 91,
                    "line_start": 89,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 25,
                        "highlight_start": 24,
                        "text": "pub fn emit(cfg: &str) {"
                      },
                      {
                        "highlight_end": 41,
                        "highlight_start": 1,
                        "text": "    println!(\"cargo:rustc-cfg={}\", cfg);"
                      },
                      {
                        "highlight_end": 2,
                        "highlight_start": 1,
                        "text": "}"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#semver-parser@0.7.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "semver_parser",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0412]: cannot find type `Option` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\recognize.rs:33:22\n   |\n33 | impl<F: Fn(&[u8]) -> Option<usize>> Recognize for F {\n   |                      ^^^^^^ not found in this scope\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0412",
                  "explanation": "A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"
                },
                "level": "error",
                "message": "cannot find type `Option` in this scope",
                "spans": [
                  {
                    "byte_end": 1131,
                    "byte_start": 1125,
                    "column_end": 28,
                    "column_start": 22,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\recognize.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 33,
                    "line_start": 33,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 28,
                        "highlight_start": 22,
                        "text": "impl<F: Fn(&[u8]) -> Option<usize>> Recognize for F {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#semver-parser@0.7.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "semver_parser",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0412]: cannot find type `Option` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\recognize.rs:35:30\n   |\n35 |     fn p(&self, s: &[u8]) -> Option<usize> {\n   |                              ^^^^^^ not found in this scope\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0412",
                  "explanation": "A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"
                },
                "level": "error",
                "message": "cannot find type `Option` in this scope",
                "spans": [
                  {
                    "byte_end": 1215,
                    "byte_start": 1209,
                    "column_end": 36,
                    "column_start": 30,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\recognize.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 35,
                    "line_start": 35,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 36,
                        "highlight_start": 30,
                        "text": "    fn p(&self, s: &[u8]) -> Option<usize> {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#semver-parser@0.7.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "semver_parser",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0405]: cannot find trait `Fn` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\recognize.rs:42:9\n   |\n42 | impl<F: Fn(u8) -> bool> Recognize for OneByte<F> {\n   |         ^^ not found in this scope\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0405",
                  "explanation": "The code refers to a trait that is not in scope.\n\nErroneous code example:\n\n```compile_fail,E0405\nstruct Foo;\n\nimpl SomeTrait for Foo {} // error: trait `SomeTrait` is not in scope\n```\n\nPlease verify that the name of the trait wasn't misspelled and ensure that it\nwas imported. Example:\n\n```\n# #[cfg(for_demonstration_only)]\n// solution 1:\nuse some_file::SomeTrait;\n\n// solution 2:\ntrait SomeTrait {\n    // some functions\n}\n\nstruct Foo;\n\nimpl SomeTrait for Foo { // ok!\n    // implements functions\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find trait `Fn` in this scope",
                "spans": [
                  {
                    "byte_end": 1291,
                    "byte_start": 1289,
                    "column_end": 11,
                    "column_start": 9,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\recognize.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 42,
                    "line_start": 42,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 11,
                        "highlight_start": 9,
                        "text": "impl<F: Fn(u8) -> bool> Recognize for OneByte<F> {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#semver-parser@0.7.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "semver_parser",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0412]: cannot find type `Option` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\recognize.rs:44:30\n   |\n44 |     fn p(&self, s: &[u8]) -> Option<usize> {\n   |                              ^^^^^^ not found in this scope\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0412",
                  "explanation": "A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"
                },
                "level": "error",
                "message": "cannot find type `Option` in this scope",
                "spans": [
                  {
                    "byte_end": 1389,
                    "byte_start": 1383,
                    "column_end": 36,
                    "column_start": 30,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\recognize.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 44,
                    "line_start": 44,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 36,
                        "highlight_start": 30,
                        "text": "    fn p(&self, s: &[u8]) -> Option<usize> {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#semver-parser@0.7.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "semver_parser",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0425]: cannot find value `None` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\recognize.rs:46:13\n   |\n46 |             None\n   |             ^^^^ not found in this scope\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0425",
                  "explanation": "An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"
                },
                "level": "error",
                "message": "cannot find value `None` in this scope",
                "spans": [
                  {
                    "byte_end": 1458,
                    "byte_start": 1454,
                    "column_end": 17,
                    "column_start": 13,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\recognize.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 46,
                    "line_start": 46,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 17,
                        "highlight_start": 13,
                        "text": "            None"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#autocfg@0.1.7",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "autocfg",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error: requires `sized` lang_item\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\src\\lib.rs:99:31\n    |\n99  |   pub fn rerun_path(path: &str) {\n    |  _______________________________^\n100 | |     println!(\"cargo:rerun-if-changed={}\", path);\n101 | | }\n    | |_^\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": null,
                "level": "error",
                "message": "requires `sized` lang_item",
                "spans": [
                  {
                    "byte_end": 2864,
                    "byte_start": 2812,
                    "column_end": 2,
                    "column_start": 31,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\src\\lib.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 101,
                    "line_start": 99,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 32,
                        "highlight_start": 31,
                        "text": "pub fn rerun_path(path: &str) {"
                      },
                      {
                        "highlight_end": 49,
                        "highlight_start": 1,
                        "text": "    println!(\"cargo:rerun-if-changed={}\", path);"
                      },
                      {
                        "highlight_end": 2,
                        "highlight_start": 1,
                        "text": "}"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#semver-parser@0.7.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "semver_parser",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0412]: cannot find type `Option` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\recognize.rs:55:30\n   |\n55 |     fn p(&self, s: &[u8]) -> Option<usize> {\n   |                              ^^^^^^ not found in this scope\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0412",
                  "explanation": "A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"
                },
                "level": "error",
                "message": "cannot find type `Option` in this scope",
                "spans": [
                  {
                    "byte_end": 1596,
                    "byte_start": 1590,
                    "column_end": 36,
                    "column_start": 30,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\recognize.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 55,
                    "line_start": 55,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 36,
                        "highlight_start": 30,
                        "text": "    fn p(&self, s: &[u8]) -> Option<usize> {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#semver-parser@0.7.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "semver_parser",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0412]: cannot find type `Option` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\recognize.rs:66:30\n   |\n66 |     fn p(&self, s: &[u8]) -> Option<usize> {\n   |                              ^^^^^^ not found in this scope\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0412",
                  "explanation": "A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"
                },
                "level": "error",
                "message": "cannot find type `Option` in this scope",
                "spans": [
                  {
                    "byte_end": 1926,
                    "byte_start": 1920,
                    "column_end": 36,
                    "column_start": 30,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\recognize.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 66,
                    "line_start": 66,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 36,
                        "highlight_start": 30,
                        "text": "    fn p(&self, s: &[u8]) -> Option<usize> {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#autocfg@0.1.7",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "autocfg",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error: requires `sized` lang_item\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\src\\lib.rs:110:29\n    |\n110 |   pub fn rerun_env(var: &str) {\n    |  _____________________________^\n111 | |     println!(\"cargo:rerun-if-env-changed={}\", var);\n112 | | }\n    | |_^\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": null,
                "level": "error",
                "message": "requires `sized` lang_item",
                "spans": [
                  {
                    "byte_end": 3253,
                    "byte_start": 3198,
                    "column_end": 2,
                    "column_start": 29,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\src\\lib.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 112,
                    "line_start": 110,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 30,
                        "highlight_start": 29,
                        "text": "pub fn rerun_env(var: &str) {"
                      },
                      {
                        "highlight_end": 52,
                        "highlight_start": 1,
                        "text": "    println!(\"cargo:rerun-if-env-changed={}\", var);"
                      },
                      {
                        "highlight_end": 2,
                        "highlight_start": 1,
                        "text": "}"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#semver-parser@0.7.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "semver_parser",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0412]: cannot find type `Option` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\recognize.rs:73:30\n   |\n73 |     fn p(&self, s: &[u8]) -> Option<usize> {\n   |                              ^^^^^^ not found in this scope\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0412",
                  "explanation": "A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"
                },
                "level": "error",
                "message": "cannot find type `Option` in this scope",
                "spans": [
                  {
                    "byte_end": 2099,
                    "byte_start": 2093,
                    "column_end": 36,
                    "column_start": 30,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\recognize.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 73,
                    "line_start": 73,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 36,
                        "highlight_start": 30,
                        "text": "    fn p(&self, s: &[u8]) -> Option<usize> {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#autocfg@0.1.7",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "autocfg",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error: requires `sized` lang_item\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\src\\lib.rs:119:17\n    |\n119 | pub fn new() -> AutoCfg {\n    |                 ^^^^^^^\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": null,
                "level": "error",
                "message": "requires `sized` lang_item",
                "spans": [
                  {
                    "byte_end": 3385,
                    "byte_start": 3378,
                    "column_end": 24,
                    "column_start": 17,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\src\\lib.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 119,
                    "line_start": 119,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 24,
                        "highlight_start": 17,
                        "text": "pub fn new() -> AutoCfg {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#semver-parser@0.7.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "semver_parser",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0425]: cannot find value `None` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\recognize.rs:78:13\n   |\n78 |             None\n   |             ^^^^ not found in this scope\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0425",
                  "explanation": "An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"
                },
                "level": "error",
                "message": "cannot find value `None` in this scope",
                "spans": [
                  {
                    "byte_end": 2244,
                    "byte_start": 2240,
                    "column_end": 17,
                    "column_start": 13,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\recognize.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 78,
                    "line_start": 78,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 17,
                        "highlight_start": 13,
                        "text": "            None"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#semver-parser@0.7.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "semver_parser",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0412]: cannot find type `Option` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\recognize.rs:85:30\n   |\n85 |     fn p(&self, s: &[u8]) -> Option<usize> {\n   |                              ^^^^^^ not found in this scope\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0412",
                  "explanation": "A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"
                },
                "level": "error",
                "message": "cannot find type `Option` in this scope",
                "spans": [
                  {
                    "byte_end": 2354,
                    "byte_start": 2348,
                    "column_end": 36,
                    "column_start": 30,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\recognize.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 85,
                    "line_start": 85,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 36,
                        "highlight_start": 30,
                        "text": "    fn p(&self, s: &[u8]) -> Option<usize> {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#semver-parser@0.7.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "semver_parser",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0412]: cannot find type `Option` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\recognize.rs:92:30\n   |\n92 |     fn p(&self, s: &[u8]) -> Option<usize> {\n   |                              ^^^^^^ not found in this scope\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0412",
                  "explanation": "A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"
                },
                "level": "error",
                "message": "cannot find type `Option` in this scope",
                "spans": [
                  {
                    "byte_end": 2519,
                    "byte_start": 2513,
                    "column_end": 36,
                    "column_start": 30,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\recognize.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 92,
                    "line_start": 92,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 36,
                        "highlight_start": 30,
                        "text": "    fn p(&self, s: &[u8]) -> Option<usize> {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#semver-parser@0.7.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "semver_parser",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0412]: cannot find type `Option` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\recognize.rs:104:30\n    |\n104 |     fn p(&self, s: &[u8]) -> Option<usize> {\n    |                              ^^^^^^ not found in this scope\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0412",
                  "explanation": "A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"
                },
                "level": "error",
                "message": "cannot find type `Option` in this scope",
                "spans": [
                  {
                    "byte_end": 2857,
                    "byte_start": 2851,
                    "column_end": 36,
                    "column_start": 30,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\recognize.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 104,
                    "line_start": 104,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 36,
                        "highlight_start": 30,
                        "text": "    fn p(&self, s: &[u8]) -> Option<usize> {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#semver-parser@0.7.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "semver_parser",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0412]: cannot find type `Option` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\recognize.rs:114:30\n    |\n114 |     fn p(&self, s: &[u8]) -> Option<usize> {\n    |                              ^^^^^^ not found in this scope\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0412",
                  "explanation": "A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"
                },
                "level": "error",
                "message": "cannot find type `Option` in this scope",
                "spans": [
                  {
                    "byte_end": 3111,
                    "byte_start": 3105,
                    "column_end": 36,
                    "column_start": 30,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\recognize.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 114,
                    "line_start": 114,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 36,
                        "highlight_start": 30,
                        "text": "    fn p(&self, s: &[u8]) -> Option<usize> {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#semver-parser@0.7.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "semver_parser",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0531]: cannot find tuple struct or tuple variant `Some` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\recognize.rs:116:20\n    |\n116 |             if let Some(len) = p.p(s) {\n    |                    ^^^^ not found in this scope\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0531",
                  "explanation": "An unknown tuple struct/variant has been used.\n\nErroneous code example:\n\n```compile_fail,E0531\nlet Type(x) = Type(12); // error!\nmatch Bar(12) {\n    Bar(x) => {} // error!\n    _ => {}\n}\n```\n\nIn most cases, it's either a forgotten import or a typo. However, let's look at\nhow you can have such a type:\n\n```edition2018\nstruct Type(u32); // this is a tuple struct\n\nenum Foo {\n    Bar(u32), // this is a tuple variant\n}\n\nuse Foo::*; // To use Foo's variant directly, we need to import them in\n            // the scope.\n```\n\nEither way, it should work fine with our previous code:\n\n```edition2018\nstruct Type(u32);\n\nenum Foo {\n    Bar(u32),\n}\nuse Foo::*;\n\nlet Type(x) = Type(12); // ok!\nmatch Type(12) {\n    Type(x) => {} // ok!\n    _ => {}\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find tuple struct or tuple variant `Some` in this scope",
                "spans": [
                  {
                    "byte_end": 3174,
                    "byte_start": 3170,
                    "column_end": 24,
                    "column_start": 20,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\recognize.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 116,
                    "line_start": 116,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 24,
                        "highlight_start": 20,
                        "text": "            if let Some(len) = p.p(s) {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#autocfg@0.1.7",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "autocfg",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error: requires `sized` lang_item\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\src\\lib.rs:219:20\n    |\n219 |         static ID: AtomicUsize = ATOMIC_USIZE_INIT;\n    |                    ^^^^^^^^^^^\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": null,
                "level": "error",
                "message": "requires `sized` lang_item",
                "spans": [
                  {
                    "byte_end": 7286,
                    "byte_start": 7275,
                    "column_end": 31,
                    "column_start": 20,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\src\\lib.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 219,
                    "line_start": 219,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 31,
                        "highlight_start": 20,
                        "text": "        static ID: AtomicUsize = ATOMIC_USIZE_INIT;"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#semver-parser@0.7.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "semver_parser",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0425]: cannot find value `None` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\recognize.rs:120:9\n    |\n120 |         None\n    |         ^^^^ not found in this scope\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0425",
                  "explanation": "An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"
                },
                "level": "error",
                "message": "cannot find value `None` in this scope",
                "spans": [
                  {
                    "byte_end": 3261,
                    "byte_start": 3257,
                    "column_end": 13,
                    "column_start": 9,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\recognize.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 120,
                    "line_start": 120,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 13,
                        "highlight_start": 9,
                        "text": "        None"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#autocfg@0.1.7",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "autocfg",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error: requires `sized` lang_item\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\src\\lib.rs:359:23\n    |\n359 | fn mangle(s: &str) -> String {\n    |                       ^^^^^^\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": null,
                "level": "error",
                "message": "requires `sized` lang_item",
                "spans": [
                  {
                    "byte_end": 11708,
                    "byte_start": 11702,
                    "column_end": 29,
                    "column_start": 23,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\src\\lib.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 359,
                    "line_start": 359,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 29,
                        "highlight_start": 23,
                        "text": "fn mangle(s: &str) -> String {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#semver-parser@0.7.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "semver_parser",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0412]: cannot find type `Option` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\recognize.rs:128:30\n    |\n128 |     fn p(&self, s: &[u8]) -> Option<usize> {\n    |                              ^^^^^^ not found in this scope\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0412",
                  "explanation": "A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"
                },
                "level": "error",
                "message": "cannot find type `Option` in this scope",
                "spans": [
                  {
                    "byte_end": 3401,
                    "byte_start": 3395,
                    "column_end": 36,
                    "column_start": 30,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\recognize.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 128,
                    "line_start": 128,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 36,
                        "highlight_start": 30,
                        "text": "    fn p(&self, s: &[u8]) -> Option<usize> {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#semver-parser@0.7.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "semver_parser",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0531]: cannot find tuple struct or tuple variant `Some` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\recognize.rs:131:19\n    |\n131 |         while let Some(len) = self.0.p(&s[i..]) {\n    |                   ^^^^ not found in this scope\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0531",
                  "explanation": "An unknown tuple struct/variant has been used.\n\nErroneous code example:\n\n```compile_fail,E0531\nlet Type(x) = Type(12); // error!\nmatch Bar(12) {\n    Bar(x) => {} // error!\n    _ => {}\n}\n```\n\nIn most cases, it's either a forgotten import or a typo. However, let's look at\nhow you can have such a type:\n\n```edition2018\nstruct Type(u32); // this is a tuple struct\n\nenum Foo {\n    Bar(u32), // this is a tuple variant\n}\n\nuse Foo::*; // To use Foo's variant directly, we need to import them in\n            // the scope.\n```\n\nEither way, it should work fine with our previous code:\n\n```edition2018\nstruct Type(u32);\n\nenum Foo {\n    Bar(u32),\n}\nuse Foo::*;\n\nlet Type(x) = Type(12); // ok!\nmatch Type(12) {\n    Type(x) => {} // ok!\n    _ => {}\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find tuple struct or tuple variant `Some` in this scope",
                "spans": [
                  {
                    "byte_end": 3483,
                    "byte_start": 3479,
                    "column_end": 23,
                    "column_start": 19,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\recognize.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 131,
                    "line_start": 131,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 23,
                        "highlight_start": 19,
                        "text": "        while let Some(len) = self.0.p(&s[i..]) {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#semver-parser@0.7.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "semver_parser",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0425]: cannot find value `None` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\recognize.rs:138:13\n    |\n138 |             None\n    |             ^^^^ not found in this scope\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0425",
                  "explanation": "An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"
                },
                "level": "error",
                "message": "cannot find value `None` in this scope",
                "spans": [
                  {
                    "byte_end": 3644,
                    "byte_start": 3640,
                    "column_end": 17,
                    "column_start": 13,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\recognize.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 138,
                    "line_start": 138,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 17,
                        "highlight_start": 13,
                        "text": "            None"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#autocfg@0.1.7",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "autocfg",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error: requires `sized` lang_item\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\src\\error.rs:41:8\n   |\n41 |     Io(io::Error),\n   |        ^^^^^^^^^\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": null,
                "level": "error",
                "message": "requires `sized` lang_item",
                "spans": [
                  {
                    "byte_end": 930,
                    "byte_start": 921,
                    "column_end": 17,
                    "column_start": 8,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\src\\error.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 41,
                    "line_start": 41,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 17,
                        "highlight_start": 8,
                        "text": "    Io(io::Error),"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#semver-parser@0.7.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "semver_parser",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0412]: cannot find type `Option` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\recognize.rs:147:30\n    |\n147 |     fn p(&self, s: &[u8]) -> Option<usize> {\n    |                              ^^^^^^ not found in this scope\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0412",
                  "explanation": "A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"
                },
                "level": "error",
                "message": "cannot find type `Option` in this scope",
                "spans": [
                  {
                    "byte_end": 3796,
                    "byte_start": 3790,
                    "column_end": 36,
                    "column_start": 30,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\recognize.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 147,
                    "line_start": 147,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 36,
                        "highlight_start": 30,
                        "text": "    fn p(&self, s: &[u8]) -> Option<usize> {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#autocfg@0.1.7",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "autocfg",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error: requires `sized` lang_item\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\src\\error.rs:47:33\n   |\n47 | pub fn from_io(e: io::Error) -> Error {\n   |                                 ^^^^^\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": null,
                "level": "error",
                "message": "requires `sized` lang_item",
                "spans": [
                  {
                    "byte_end": 1053,
                    "byte_start": 1048,
                    "column_end": 38,
                    "column_start": 33,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\src\\error.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 47,
                    "line_start": 47,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 38,
                        "highlight_start": 33,
                        "text": "pub fn from_io(e: io::Error) -> Error {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#semver-parser@0.7.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "semver_parser",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0531]: cannot find tuple struct or tuple variant `Some` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\recognize.rs:149:19\n    |\n149 |         while let Some(len) = self.0.p(&s[i..]) {\n    |                   ^^^^ not found in this scope\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0531",
                  "explanation": "An unknown tuple struct/variant has been used.\n\nErroneous code example:\n\n```compile_fail,E0531\nlet Type(x) = Type(12); // error!\nmatch Bar(12) {\n    Bar(x) => {} // error!\n    _ => {}\n}\n```\n\nIn most cases, it's either a forgotten import or a typo. However, let's look at\nhow you can have such a type:\n\n```edition2018\nstruct Type(u32); // this is a tuple struct\n\nenum Foo {\n    Bar(u32), // this is a tuple variant\n}\n\nuse Foo::*; // To use Foo's variant directly, we need to import them in\n            // the scope.\n```\n\nEither way, it should work fine with our previous code:\n\n```edition2018\nstruct Type(u32);\n\nenum Foo {\n    Bar(u32),\n}\nuse Foo::*;\n\nlet Type(x) = Type(12); // ok!\nmatch Type(12) {\n    Type(x) => {} // ok!\n    _ => {}\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find tuple struct or tuple variant `Some` in this scope",
                "spans": [
                  {
                    "byte_end": 3851,
                    "byte_start": 3847,
                    "column_end": 23,
                    "column_start": 19,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\recognize.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 149,
                    "line_start": 149,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 23,
                        "highlight_start": 19,
                        "text": "        while let Some(len) = self.0.p(&s[i..]) {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#autocfg@0.1.7",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "autocfg",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error: requires `sized` lang_item\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\src\\error.rs:53:43\n   |\n53 | pub fn from_num(e: num::ParseIntError) -> Error {\n   |                                           ^^^^^\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": null,
                "level": "error",
                "message": "requires `sized` lang_item",
                "spans": [
                  {
                    "byte_end": 1156,
                    "byte_start": 1151,
                    "column_end": 48,
                    "column_start": 43,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\src\\error.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 53,
                    "line_start": 53,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 48,
                        "highlight_start": 43,
                        "text": "pub fn from_num(e: num::ParseIntError) -> Error {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#autocfg@0.1.7",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "autocfg",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error: requires `sized` lang_item\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\src\\error.rs:59:40\n   |\n59 | pub fn from_utf8(e: str::Utf8Error) -> Error {\n   |                                        ^^^^^\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": null,
                "level": "error",
                "message": "requires `sized` lang_item",
                "spans": [
                  {
                    "byte_end": 1257,
                    "byte_start": 1252,
                    "column_end": 45,
                    "column_start": 40,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\src\\error.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 59,
                    "line_start": 59,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 45,
                        "highlight_start": 40,
                        "text": "pub fn from_utf8(e: str::Utf8Error) -> Error {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#autocfg@0.1.7",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "autocfg",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error: requires `sized` lang_item\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\src\\error.rs:65:37\n   |\n65 | pub fn from_str(s: &'static str) -> Error {\n   |                                     ^^^^^\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": null,
                "level": "error",
                "message": "requires `sized` lang_item",
                "spans": [
                  {
                    "byte_end": 1356,
                    "byte_start": 1351,
                    "column_end": 42,
                    "column_start": 37,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\src\\error.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 65,
                    "line_start": 65,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 42,
                        "highlight_start": 37,
                        "text": "pub fn from_str(s: &'static str) -> Error {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#autocfg@0.1.7",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "autocfg",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error: requires `sized` lang_item\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\src\\version.rs:10:12\n   |\n10 |     major: usize,\n   |            ^^^^^\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": null,
                "level": "error",
                "message": "requires `sized` lang_item",
                "spans": [
                  {
                    "byte_end": 241,
                    "byte_start": 236,
                    "column_end": 17,
                    "column_start": 12,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\src\\version.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 10,
                    "line_start": 10,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 17,
                        "highlight_start": 12,
                        "text": "    major: usize,"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#autocfg@0.1.7",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "autocfg",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0425]: cannot find function, tuple struct or tuple variant `Some` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\src\\error.rs:20:37\n   |\n20 |             ErrorKind::Io(ref e) => Some(e),\n   |                                     ^^^^ not found in this scope\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0425",
                  "explanation": "An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"
                },
                "level": "error",
                "message": "cannot find function, tuple struct or tuple variant `Some` in this scope",
                "spans": [
                  {
                    "byte_end": 391,
                    "byte_start": 387,
                    "column_end": 41,
                    "column_start": 37,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\src\\error.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 20,
                    "line_start": 20,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 41,
                        "highlight_start": 37,
                        "text": "            ErrorKind::Io(ref e) => Some(e),"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#autocfg@0.1.7",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "autocfg",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0425]: cannot find function, tuple struct or tuple variant `Some` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\src\\error.rs:21:38\n   |\n21 |             ErrorKind::Num(ref e) => Some(e),\n   |                                      ^^^^ not found in this scope\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0425",
                  "explanation": "An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"
                },
                "level": "error",
                "message": "cannot find function, tuple struct or tuple variant `Some` in this scope",
                "spans": [
                  {
                    "byte_end": 437,
                    "byte_start": 433,
                    "column_end": 42,
                    "column_start": 38,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\src\\error.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 21,
                    "line_start": 21,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 42,
                        "highlight_start": 38,
                        "text": "            ErrorKind::Num(ref e) => Some(e),"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#autocfg@0.1.7",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "autocfg",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0425]: cannot find function, tuple struct or tuple variant `Some` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\src\\error.rs:22:39\n   |\n22 |             ErrorKind::Utf8(ref e) => Some(e),\n   |                                       ^^^^ not found in this scope\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0425",
                  "explanation": "An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"
                },
                "level": "error",
                "message": "cannot find function, tuple struct or tuple variant `Some` in this scope",
                "spans": [
                  {
                    "byte_end": 484,
                    "byte_start": 480,
                    "column_end": 43,
                    "column_start": 39,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\src\\error.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 22,
                    "line_start": 22,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 43,
                        "highlight_start": 39,
                        "text": "            ErrorKind::Utf8(ref e) => Some(e),"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#autocfg@0.1.7",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "autocfg",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0425]: cannot find function, tuple struct or tuple variant `Err` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\src\\lib.rs:49:34\n   |\n49 |               Err(error) => return Err(error),\n   |                                    ^^^ not found in this scope\n   |\n  ::: C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\src\\version.rs:27:22\n   |\n27 |           let output = try!(Command::new(rustc)\n   |  ______________________-\n28 | |             .args(&[\"--version\", \"--verbose\"])\n29 | |             .output()\n30 | |             .map_err(error::from_io));\n   | |_____________________________________- in this macro invocation\n   |\n   = note: this error originates in the macro `try` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0425",
                  "explanation": "An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"
                },
                "level": "error",
                "message": "cannot find function, tuple struct or tuple variant `Err` in this scope",
                "spans": [
                  {
                    "byte_end": 1621,
                    "byte_start": 1618,
                    "column_end": 37,
                    "column_start": 34,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 1502,
                        "byte_start": 1486,
                        "column_end": 17,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\src\\lib.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 45,
                        "line_start": 45,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 17,
                            "highlight_start": 1,
                            "text": "macro_rules! try {"
                          }
                        ]
                      },
                      "macro_decl_name": "try!",
                      "span": {
                        "byte_end": 810,
                        "byte_start": 679,
                        "column_end": 38,
                        "column_start": 22,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\src\\version.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 30,
                        "line_start": 27,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 46,
                            "highlight_start": 22,
                            "text": "        let output = try!(Command::new(rustc)"
                          },
                          {
                            "highlight_end": 47,
                            "highlight_start": 1,
                            "text": "            .args(&[\"--version\", \"--verbose\"])"
                          },
                          {
                            "highlight_end": 22,
                            "highlight_start": 1,
                            "text": "            .output()"
                          },
                          {
                            "highlight_end": 38,
                            "highlight_start": 1,
                            "text": "            .map_err(error::from_io));"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 49,
                    "line_start": 49,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 37,
                        "highlight_start": 34,
                        "text": "            Err(error) => return Err(error),"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#autocfg@0.1.7",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "autocfg",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0425]: cannot find function, tuple struct or tuple variant `Err` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\src\\version.rs:32:20\n   |\n32 |             return Err(error::from_str(\"could not execute rustc\"));\n   |                    ^^^ not found in this scope\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0425",
                  "explanation": "An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"
                },
                "level": "error",
                "message": "cannot find function, tuple struct or tuple variant `Err` in this scope",
                "spans": [
                  {
                    "byte_end": 872,
                    "byte_start": 869,
                    "column_end": 23,
                    "column_start": 20,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\src\\version.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 32,
                    "line_start": 32,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 23,
                        "highlight_start": 20,
                        "text": "            return Err(error::from_str(\"could not execute rustc\"));"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#autocfg@0.1.7",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "autocfg",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0425]: cannot find function, tuple struct or tuple variant `Err` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\src\\lib.rs:49:34\n   |\n49 |             Err(error) => return Err(error),\n   |                                  ^^^ not found in this scope\n   |\n  ::: C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\src\\version.rs:34:22\n   |\n34 |         let output = try!(str::from_utf8(&output.stdout).map_err(error::from_utf8));\n   |                      -------------------------------------------------------------- in this macro invocation\n   |\n   = note: this error originates in the macro `try` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0425",
                  "explanation": "An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"
                },
                "level": "error",
                "message": "cannot find function, tuple struct or tuple variant `Err` in this scope",
                "spans": [
                  {
                    "byte_end": 1621,
                    "byte_start": 1618,
                    "column_end": 37,
                    "column_start": 34,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 1502,
                        "byte_start": 1486,
                        "column_end": 17,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\src\\lib.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 45,
                        "line_start": 45,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 17,
                            "highlight_start": 1,
                            "text": "macro_rules! try {"
                          }
                        ]
                      },
                      "macro_decl_name": "try!",
                      "span": {
                        "byte_end": 1011,
                        "byte_start": 949,
                        "column_end": 84,
                        "column_start": 22,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\src\\version.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 34,
                        "line_start": 34,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 84,
                            "highlight_start": 22,
                            "text": "        let output = try!(str::from_utf8(&output.stdout).map_err(error::from_utf8));"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 49,
                    "line_start": 49,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 37,
                        "highlight_start": 34,
                        "text": "            Err(error) => return Err(error),"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#autocfg@0.1.7",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "autocfg",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0425]: cannot find function, tuple struct or tuple variant `Err` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\src\\version.rs:39:28\n   |\n39 |             None => return Err(error::from_str(\"could not find rustc release\")),\n   |                            ^^^ not found in this scope\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0425",
                  "explanation": "An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"
                },
                "level": "error",
                "message": "cannot find function, tuple struct or tuple variant `Err` in this scope",
                "spans": [
                  {
                    "byte_end": 1250,
                    "byte_start": 1247,
                    "column_end": 31,
                    "column_start": 28,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\src\\version.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 39,
                    "line_start": 39,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 31,
                        "highlight_start": 28,
                        "text": "            None => return Err(error::from_str(\"could not find rustc release\")),"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#semver-parser@0.7.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "semver_parser",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error: requires `sized` lang_item\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\version.rs:10:16\n   |\n10 |     pub major: u64,\n   |                ^^^\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": null,
                "level": "error",
                "message": "requires `sized` lang_item",
                "spans": [
                  {
                    "byte_end": 178,
                    "byte_start": 175,
                    "column_end": 19,
                    "column_start": 16,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\version.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 10,
                    "line_start": 10,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 19,
                        "highlight_start": 16,
                        "text": "    pub major: u64,"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#autocfg@0.1.7",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "autocfg",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0425]: cannot find function, tuple struct or tuple variant `Err` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\src\\lib.rs:49:34\n   |\n49 |             Err(error) => return Err(error),\n   |                                  ^^^ not found in this scope\n   |\n  ::: C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\src\\version.rs:50:21\n   |\n50 |         let major = try!(iter.next().ok_or(error::from_str(\"missing major version\")));\n   |                     ----------------------------------------------------------------- in this macro invocation\n   |\n   = note: this error originates in the macro `try` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0425",
                  "explanation": "An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"
                },
                "level": "error",
                "message": "cannot find function, tuple struct or tuple variant `Err` in this scope",
                "spans": [
                  {
                    "byte_end": 1621,
                    "byte_start": 1618,
                    "column_end": 37,
                    "column_start": 34,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 1502,
                        "byte_start": 1486,
                        "column_end": 17,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\src\\lib.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 45,
                        "line_start": 45,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 17,
                            "highlight_start": 1,
                            "text": "macro_rules! try {"
                          }
                        ]
                      },
                      "macro_decl_name": "try!",
                      "span": {
                        "byte_end": 1697,
                        "byte_start": 1632,
                        "column_end": 86,
                        "column_start": 21,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\src\\version.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 50,
                        "line_start": 50,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 86,
                            "highlight_start": 21,
                            "text": "        let major = try!(iter.next().ok_or(error::from_str(\"missing major version\")));"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 49,
                    "line_start": 49,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 37,
                        "highlight_start": 34,
                        "text": "            Err(error) => return Err(error),"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#autocfg@0.1.7",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "autocfg",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0425]: cannot find function, tuple struct or tuple variant `Err` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\src\\lib.rs:49:34\n   |\n49 |             Err(error) => return Err(error),\n   |                                  ^^^ not found in this scope\n   |\n  ::: C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\src\\version.rs:51:21\n   |\n51 |         let minor = try!(iter.next().ok_or(error::from_str(\"missing minor version\")));\n   |                     ----------------------------------------------------------------- in this macro invocation\n   |\n   = note: this error originates in the macro `try` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0425",
                  "explanation": "An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"
                },
                "level": "error",
                "message": "cannot find function, tuple struct or tuple variant `Err` in this scope",
                "spans": [
                  {
                    "byte_end": 1621,
                    "byte_start": 1618,
                    "column_end": 37,
                    "column_start": 34,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 1502,
                        "byte_start": 1486,
                        "column_end": 17,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\src\\lib.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 45,
                        "line_start": 45,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 17,
                            "highlight_start": 1,
                            "text": "macro_rules! try {"
                          }
                        ]
                      },
                      "macro_decl_name": "try!",
                      "span": {
                        "byte_end": 1784,
                        "byte_start": 1719,
                        "column_end": 86,
                        "column_start": 21,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\src\\version.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 51,
                        "line_start": 51,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 86,
                            "highlight_start": 21,
                            "text": "        let minor = try!(iter.next().ok_or(error::from_str(\"missing minor version\")));"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 49,
                    "line_start": 49,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 37,
                        "highlight_start": 34,
                        "text": "            Err(error) => return Err(error),"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#semver-parser@0.7.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "semver_parser",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error: requires `sized` lang_item\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\version.rs:20:13\n   |\n20 |     Numeric(u64),\n   |             ^^^\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": null,
                "level": "error",
                "message": "requires `sized` lang_item",
                "spans": [
                  {
                    "byte_end": 406,
                    "byte_start": 403,
                    "column_end": 16,
                    "column_start": 13,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\version.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 20,
                    "line_start": 20,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 16,
                        "highlight_start": 13,
                        "text": "    Numeric(u64),"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#autocfg@0.1.7",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "autocfg",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0425]: cannot find function, tuple struct or tuple variant `Err` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\src\\lib.rs:49:34\n   |\n49 |             Err(error) => return Err(error),\n   |                                  ^^^ not found in this scope\n   |\n  ::: C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\src\\version.rs:52:21\n   |\n52 |         let patch = try!(iter.next().ok_or(error::from_str(\"missing patch version\")));\n   |                     ----------------------------------------------------------------- in this macro invocation\n   |\n   = note: this error originates in the macro `try` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0425",
                  "explanation": "An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"
                },
                "level": "error",
                "message": "cannot find function, tuple struct or tuple variant `Err` in this scope",
                "spans": [
                  {
                    "byte_end": 1621,
                    "byte_start": 1618,
                    "column_end": 37,
                    "column_start": 34,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 1502,
                        "byte_start": 1486,
                        "column_end": 17,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\src\\lib.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 45,
                        "line_start": 45,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 17,
                            "highlight_start": 1,
                            "text": "macro_rules! try {"
                          }
                        ]
                      },
                      "macro_decl_name": "try!",
                      "span": {
                        "byte_end": 1871,
                        "byte_start": 1806,
                        "column_end": 86,
                        "column_start": 21,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\src\\version.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 52,
                        "line_start": 52,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 86,
                            "highlight_start": 21,
                            "text": "        let patch = try!(iter.next().ok_or(error::from_str(\"missing patch version\")));"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 49,
                    "line_start": 49,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 37,
                        "highlight_start": 34,
                        "text": "            Err(error) => return Err(error),"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#autocfg@0.1.7",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "autocfg",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0425]: cannot find function, tuple struct or tuple variant `Ok` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\src\\version.rs:54:9\n   |\n54 |         Ok(Version::new(\n   |         ^^ not found in this scope\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0425",
                  "explanation": "An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"
                },
                "level": "error",
                "message": "cannot find function, tuple struct or tuple variant `Ok` in this scope",
                "spans": [
                  {
                    "byte_end": 1884,
                    "byte_start": 1882,
                    "column_end": 11,
                    "column_start": 9,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\src\\version.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 54,
                    "line_start": 54,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 11,
                        "highlight_start": 9,
                        "text": "        Ok(Version::new("
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#autocfg@0.1.7",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "autocfg",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0425]: cannot find function, tuple struct or tuple variant `Err` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\src\\lib.rs:49:34\n   |\n49 |             Err(error) => return Err(error),\n   |                                  ^^^ not found in this scope\n   |\n  ::: C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\src\\version.rs:55:13\n   |\n55 |             try!(major.parse().map_err(error::from_num)),\n   |             -------------------------------------------- in this macro invocation\n   |\n   = note: this error originates in the macro `try` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0425",
                  "explanation": "An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"
                },
                "level": "error",
                "message": "cannot find function, tuple struct or tuple variant `Err` in this scope",
                "spans": [
                  {
                    "byte_end": 1621,
                    "byte_start": 1618,
                    "column_end": 37,
                    "column_start": 34,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 1502,
                        "byte_start": 1486,
                        "column_end": 17,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\src\\lib.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 45,
                        "line_start": 45,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 17,
                            "highlight_start": 1,
                            "text": "macro_rules! try {"
                          }
                        ]
                      },
                      "macro_decl_name": "try!",
                      "span": {
                        "byte_end": 1955,
                        "byte_start": 1911,
                        "column_end": 57,
                        "column_start": 13,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\src\\version.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 55,
                        "line_start": 55,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 57,
                            "highlight_start": 13,
                            "text": "            try!(major.parse().map_err(error::from_num)),"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 49,
                    "line_start": 49,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 37,
                        "highlight_start": 34,
                        "text": "            Err(error) => return Err(error),"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#autocfg@0.1.7",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "autocfg",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0425]: cannot find function, tuple struct or tuple variant `Err` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\src\\lib.rs:49:34\n   |\n49 |             Err(error) => return Err(error),\n   |                                  ^^^ not found in this scope\n   |\n  ::: C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\src\\version.rs:56:13\n   |\n56 |             try!(minor.parse().map_err(error::from_num)),\n   |             -------------------------------------------- in this macro invocation\n   |\n   = note: this error originates in the macro `try` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0425",
                  "explanation": "An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"
                },
                "level": "error",
                "message": "cannot find function, tuple struct or tuple variant `Err` in this scope",
                "spans": [
                  {
                    "byte_end": 1621,
                    "byte_start": 1618,
                    "column_end": 37,
                    "column_start": 34,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 1502,
                        "byte_start": 1486,
                        "column_end": 17,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\src\\lib.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 45,
                        "line_start": 45,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 17,
                            "highlight_start": 1,
                            "text": "macro_rules! try {"
                          }
                        ]
                      },
                      "macro_decl_name": "try!",
                      "span": {
                        "byte_end": 2013,
                        "byte_start": 1969,
                        "column_end": 57,
                        "column_start": 13,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\src\\version.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 56,
                        "line_start": 56,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 57,
                            "highlight_start": 13,
                            "text": "            try!(minor.parse().map_err(error::from_num)),"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 49,
                    "line_start": 49,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 37,
                        "highlight_start": 34,
                        "text": "            Err(error) => return Err(error),"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#semver-parser@0.7.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "semver_parser",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error: requires `sized` lang_item\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\version.rs:25:32\n   |\n25 | pub fn parse(version: &str) -> Result<Version, String> {\n   |                                ^^^^^^^^^^^^^^^^^^^^^^^\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": null,
                "level": "error",
                "message": "requires `sized` lang_item",
                "spans": [
                  {
                    "byte_end": 540,
                    "byte_start": 517,
                    "column_end": 55,
                    "column_start": 32,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\version.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 25,
                    "line_start": 25,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 55,
                        "highlight_start": 32,
                        "text": "pub fn parse(version: &str) -> Result<Version, String> {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#autocfg@0.1.7",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "autocfg",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0425]: cannot find function, tuple struct or tuple variant `Err` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\src\\lib.rs:49:34\n   |\n49 |             Err(error) => return Err(error),\n   |                                  ^^^ not found in this scope\n   |\n  ::: C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\src\\version.rs:57:13\n   |\n57 |             try!(patch.parse().map_err(error::from_num)),\n   |             -------------------------------------------- in this macro invocation\n   |\n   = note: this error originates in the macro `try` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0425",
                  "explanation": "An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"
                },
                "level": "error",
                "message": "cannot find function, tuple struct or tuple variant `Err` in this scope",
                "spans": [
                  {
                    "byte_end": 1621,
                    "byte_start": 1618,
                    "column_end": 37,
                    "column_start": 34,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 1502,
                        "byte_start": 1486,
                        "column_end": 17,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\src\\lib.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 45,
                        "line_start": 45,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 17,
                            "highlight_start": 1,
                            "text": "macro_rules! try {"
                          }
                        ]
                      },
                      "macro_decl_name": "try!",
                      "span": {
                        "byte_end": 2071,
                        "byte_start": 2027,
                        "column_end": 57,
                        "column_start": 13,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\src\\version.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 57,
                        "line_start": 57,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 57,
                            "highlight_start": 13,
                            "text": "            try!(patch.parse().map_err(error::from_num)),"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 49,
                    "line_start": 49,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 37,
                        "highlight_start": 34,
                        "text": "            Err(error) => return Err(error),"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#autocfg@0.1.7",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "autocfg",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0425]: cannot find function, tuple struct or tuple variant `Err` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\src\\lib.rs:135:21\n    |\n135 |             None => Err(error::from_str(\"no OUT_DIR specified!\")),\n    |                     ^^^ not found in this scope\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0425",
                  "explanation": "An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"
                },
                "level": "error",
                "message": "cannot find function, tuple struct or tuple variant `Err` in this scope",
                "spans": [
                  {
                    "byte_end": 3879,
                    "byte_start": 3876,
                    "column_end": 24,
                    "column_start": 21,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 135,
                    "line_start": 135,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 24,
                        "highlight_start": 21,
                        "text": "            None => Err(error::from_str(\"no OUT_DIR specified!\")),"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#autocfg@0.1.7",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "autocfg",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0425]: cannot find function, tuple struct or tuple variant `Err` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\src\\lib.rs:49:34\n    |\n49  |             Err(error) => return Err(error),\n    |                                  ^^^ not found in this scope\n...\n150 |         let rustc_version = try!(Version::from_rustc(&rustc));\n    |                             --------------------------------- in this macro invocation\n    |\n    = note: this error originates in the macro `try` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0425",
                  "explanation": "An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"
                },
                "level": "error",
                "message": "cannot find function, tuple struct or tuple variant `Err` in this scope",
                "spans": [
                  {
                    "byte_end": 1621,
                    "byte_start": 1618,
                    "column_end": 37,
                    "column_start": 34,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 1502,
                        "byte_start": 1486,
                        "column_end": 17,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\src\\lib.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 45,
                        "line_start": 45,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 17,
                            "highlight_start": 1,
                            "text": "macro_rules! try {"
                          }
                        ]
                      },
                      "macro_decl_name": "try!",
                      "span": {
                        "byte_end": 4488,
                        "byte_start": 4455,
                        "column_end": 62,
                        "column_start": 29,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\src\\lib.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 150,
                        "line_start": 150,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 62,
                            "highlight_start": 29,
                            "text": "        let rustc_version = try!(Version::from_rustc(&rustc));"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 49,
                    "line_start": 49,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 37,
                        "highlight_start": 34,
                        "text": "            Err(error) => return Err(error),"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#autocfg@0.1.7",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "autocfg",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0425]: cannot find function, tuple struct or tuple variant `Err` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\src\\lib.rs:49:34\n    |\n49  |             Err(error) => return Err(error),\n    |                                  ^^^ not found in this scope\n...\n154 |         let meta = try!(fs::metadata(&dir).map_err(error::from_io));\n    |                    ------------------------------------------------ in this macro invocation\n    |\n    = note: this error originates in the macro `try` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0425",
                  "explanation": "An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"
                },
                "level": "error",
                "message": "cannot find function, tuple struct or tuple variant `Err` in this scope",
                "spans": [
                  {
                    "byte_end": 1621,
                    "byte_start": 1618,
                    "column_end": 37,
                    "column_start": 34,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 1502,
                        "byte_start": 1486,
                        "column_end": 17,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\src\\lib.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 45,
                        "line_start": 45,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 17,
                            "highlight_start": 1,
                            "text": "macro_rules! try {"
                          }
                        ]
                      },
                      "macro_decl_name": "try!",
                      "span": {
                        "byte_end": 4633,
                        "byte_start": 4585,
                        "column_end": 68,
                        "column_start": 20,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\src\\lib.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 154,
                        "line_start": 154,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 68,
                            "highlight_start": 20,
                            "text": "        let meta = try!(fs::metadata(&dir).map_err(error::from_io));"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 49,
                    "line_start": 49,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 37,
                        "highlight_start": 34,
                        "text": "            Err(error) => return Err(error),"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#autocfg@0.1.7",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "autocfg",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0425]: cannot find function, tuple struct or tuple variant `Err` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\src\\lib.rs:156:20\n    |\n156 |             return Err(error::from_str(\"output path is not a writable directory\"));\n    |                    ^^^ not found in this scope\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0425",
                  "explanation": "An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"
                },
                "level": "error",
                "message": "cannot find function, tuple struct or tuple variant `Err` in this scope",
                "spans": [
                  {
                    "byte_end": 4718,
                    "byte_start": 4715,
                    "column_end": 23,
                    "column_start": 20,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 156,
                    "line_start": 156,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 23,
                        "highlight_start": 20,
                        "text": "            return Err(error::from_str(\"output path is not a writable directory\"));"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#autocfg@0.1.7",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "autocfg",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0425]: cannot find function, tuple struct or tuple variant `Ok` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\src\\lib.rs:200:9\n    |\n200 |         Ok(ac)\n    |         ^^ not found in this scope\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0425",
                  "explanation": "An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"
                },
                "level": "error",
                "message": "cannot find function, tuple struct or tuple variant `Ok` in this scope",
                "spans": [
                  {
                    "byte_end": 6562,
                    "byte_start": 6560,
                    "column_end": 11,
                    "column_start": 9,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 200,
                    "line_start": 200,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 11,
                        "highlight_start": 9,
                        "text": "        Ok(ac)"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#autocfg@0.1.7",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "autocfg",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0425]: cannot find function, tuple struct or tuple variant `Err` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\src\\lib.rs:49:34\n    |\n49  |             Err(error) => return Err(error),\n    |                                  ^^^ not found in this scope\n...\n240 |         let mut child = try!(command.spawn().map_err(error::from_io));\n    |                         --------------------------------------------- in this macro invocation\n    |\n    = note: this error originates in the macro `try` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0425",
                  "explanation": "An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"
                },
                "level": "error",
                "message": "cannot find function, tuple struct or tuple variant `Err` in this scope",
                "spans": [
                  {
                    "byte_end": 1621,
                    "byte_start": 1618,
                    "column_end": 37,
                    "column_start": 34,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 1502,
                        "byte_start": 1486,
                        "column_end": 17,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\src\\lib.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 45,
                        "line_start": 45,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 17,
                            "highlight_start": 1,
                            "text": "macro_rules! try {"
                          }
                        ]
                      },
                      "macro_decl_name": "try!",
                      "span": {
                        "byte_end": 7975,
                        "byte_start": 7930,
                        "column_end": 70,
                        "column_start": 25,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\src\\lib.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 240,
                        "line_start": 240,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 70,
                            "highlight_start": 25,
                            "text": "        let mut child = try!(command.spawn().map_err(error::from_io));"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 49,
                    "line_start": 49,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 37,
                        "highlight_start": 34,
                        "text": "            Err(error) => return Err(error),"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#semver-parser@0.7.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "semver_parser",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error: requires `sized` lang_item\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\range.rs:27:14\n   |\n27 |     Wildcard(WildcardVersion), // x.y.*, x.*, *\n   |              ^^^^^^^^^^^^^^^\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": null,
                "level": "error",
                "message": "requires `sized` lang_item",
                "spans": [
                  {
                    "byte_end": 616,
                    "byte_start": 601,
                    "column_end": 29,
                    "column_start": 14,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\range.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 27,
                    "line_start": 27,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 29,
                        "highlight_start": 14,
                        "text": "    Wildcard(WildcardVersion), // x.y.*, x.*, *"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#autocfg@0.1.7",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "autocfg",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0425]: cannot find function, tuple struct or tuple variant `Err` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\src\\lib.rs:49:34\n    |\n49  |             Err(error) => return Err(error),\n    |                                  ^^^ not found in this scope\n...\n244 |             try!(stdin.write_all(b\"#![no_std]\\n\").map_err(error::from_io));\n    |             -------------------------------------------------------------- in this macro invocation\n    |\n    = note: this error originates in the macro `try` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0425",
                  "explanation": "An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"
                },
                "level": "error",
                "message": "cannot find function, tuple struct or tuple variant `Err` in this scope",
                "spans": [
                  {
                    "byte_end": 1621,
                    "byte_start": 1618,
                    "column_end": 37,
                    "column_start": 34,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 1502,
                        "byte_start": 1486,
                        "column_end": 17,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\src\\lib.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 45,
                        "line_start": 45,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 17,
                            "highlight_start": 1,
                            "text": "macro_rules! try {"
                          }
                        ]
                      },
                      "macro_decl_name": "try!",
                      "span": {
                        "byte_end": 8143,
                        "byte_start": 8081,
                        "column_end": 75,
                        "column_start": 13,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\src\\lib.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 244,
                        "line_start": 244,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 75,
                            "highlight_start": 13,
                            "text": "            try!(stdin.write_all(b\"#![no_std]\\n\").map_err(error::from_io));"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 49,
                    "line_start": 49,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 37,
                        "highlight_start": 34,
                        "text": "            Err(error) => return Err(error),"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#semver-parser@0.7.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "semver_parser",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error: requires `sized` lang_item\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\range.rs:49:13\n   |\n49 |     pub op: Op,\n   |             ^^\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": null,
                "level": "error",
                "message": "requires `sized` lang_item",
                "spans": [
                  {
                    "byte_end": 1127,
                    "byte_start": 1125,
                    "column_end": 15,
                    "column_start": 13,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\range.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 49,
                    "line_start": 49,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 15,
                        "highlight_start": 13,
                        "text": "    pub op: Op,"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#autocfg@0.1.7",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "autocfg",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0425]: cannot find function, tuple struct or tuple variant `Err` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\src\\lib.rs:49:34\n    |\n49  |             Err(error) => return Err(error),\n    |                                  ^^^ not found in this scope\n...\n246 |         try!(stdin.write_all(code.as_ref()).map_err(error::from_io));\n    |         ------------------------------------------------------------ in this macro invocation\n    |\n    = note: this error originates in the macro `try` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0425",
                  "explanation": "An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"
                },
                "level": "error",
                "message": "cannot find function, tuple struct or tuple variant `Err` in this scope",
                "spans": [
                  {
                    "byte_end": 1621,
                    "byte_start": 1618,
                    "column_end": 37,
                    "column_start": 34,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 1502,
                        "byte_start": 1486,
                        "column_end": 17,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\src\\lib.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 45,
                        "line_start": 45,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 17,
                            "highlight_start": 1,
                            "text": "macro_rules! try {"
                          }
                        ]
                      },
                      "macro_decl_name": "try!",
                      "span": {
                        "byte_end": 8223,
                        "byte_start": 8163,
                        "column_end": 69,
                        "column_start": 9,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\src\\lib.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 246,
                        "line_start": 246,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 69,
                            "highlight_start": 9,
                            "text": "        try!(stdin.write_all(code.as_ref()).map_err(error::from_io));"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 49,
                    "line_start": 49,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 37,
                        "highlight_start": 34,
                        "text": "            Err(error) => return Err(error),"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#autocfg@0.1.7",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "autocfg",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0425]: cannot find function `drop` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\src\\lib.rs:247:9\n    |\n247 |         drop(stdin);\n    |         ^^^^ not found in this scope\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0425",
                  "explanation": "An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"
                },
                "level": "error",
                "message": "cannot find function `drop` in this scope",
                "spans": [
                  {
                    "byte_end": 8237,
                    "byte_start": 8233,
                    "column_end": 13,
                    "column_start": 9,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 247,
                    "line_start": 247,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 13,
                        "highlight_start": 9,
                        "text": "        drop(stdin);"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#semver-parser@0.7.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "semver_parser",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error: requires `sized` lang_item\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\range.rs:56:33\n   |\n56 | fn numeric_or_wild(s: &[u8]) -> Option<(Option<u64>, usize)> {\n   |                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": null,
                "level": "error",
                "message": "requires `sized` lang_item",
                "spans": [
                  {
                    "byte_end": 1298,
                    "byte_start": 1270,
                    "column_end": 61,
                    "column_start": 33,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\range.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 56,
                    "line_start": 56,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 61,
                        "highlight_start": 33,
                        "text": "fn numeric_or_wild(s: &[u8]) -> Option<(Option<u64>, usize)> {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#autocfg@0.1.7",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "autocfg",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0425]: cannot find function, tuple struct or tuple variant `Err` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\src\\lib.rs:49:34\n    |\n49  |             Err(error) => return Err(error),\n    |                                  ^^^ not found in this scope\n...\n249 |         let status = try!(child.wait().map_err(error::from_io));\n    |                      ------------------------------------------ in this macro invocation\n    |\n    = note: this error originates in the macro `try` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0425",
                  "explanation": "An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"
                },
                "level": "error",
                "message": "cannot find function, tuple struct or tuple variant `Err` in this scope",
                "spans": [
                  {
                    "byte_end": 1621,
                    "byte_start": 1618,
                    "column_end": 37,
                    "column_start": 34,
                    "expansion": {
                      "def_site_span": {
                        "byte_end": 1502,
                        "byte_start": 1486,
                        "column_end": 17,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\src\\lib.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 45,
                        "line_start": 45,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 17,
                            "highlight_start": 1,
                            "text": "macro_rules! try {"
                          }
                        ]
                      },
                      "macro_decl_name": "try!",
                      "span": {
                        "byte_end": 8310,
                        "byte_start": 8268,
                        "column_end": 64,
                        "column_start": 22,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\src\\lib.rs",
                        "is_primary": false,
                        "label": null,
                        "line_end": 249,
                        "line_start": 249,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 64,
                            "highlight_start": 22,
                            "text": "        let status = try!(child.wait().map_err(error::from_io));"
                          }
                        ]
                      }
                    },
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 49,
                    "line_start": 49,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 37,
                        "highlight_start": 34,
                        "text": "            Err(error) => return Err(error),"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#autocfg@0.1.7",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "autocfg",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0425]: cannot find function, tuple struct or tuple variant `Ok` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\src\\lib.rs:250:9\n    |\n250 |         Ok(status.success())\n    |         ^^ not found in this scope\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0425",
                  "explanation": "An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"
                },
                "level": "error",
                "message": "cannot find function, tuple struct or tuple variant `Ok` in this scope",
                "spans": [
                  {
                    "byte_end": 8322,
                    "byte_start": 8320,
                    "column_end": 11,
                    "column_start": 9,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 250,
                    "line_start": 250,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 11,
                        "highlight_start": 9,
                        "text": "        Ok(status.success())"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#semver-parser@0.7.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "semver_parser",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error: requires `sized` lang_item\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\range.rs:66:37\n   |\n66 | fn dot_numeric_or_wild(s: &[u8]) -> Option<(Option<u64>, usize)> {\n   |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": null,
                "level": "error",
                "message": "requires `sized` lang_item",
                "spans": [
                  {
                    "byte_end": 1562,
                    "byte_start": 1534,
                    "column_end": 65,
                    "column_start": 37,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\range.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 66,
                    "line_start": 66,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 65,
                        "highlight_start": 37,
                        "text": "fn dot_numeric_or_wild(s: &[u8]) -> Option<(Option<u64>, usize)> {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#autocfg@0.1.7",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "autocfg",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "Some errors have detailed explanations: E0405, E0412, E0425, E0462, E0531.\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": null,
                "level": "failure-note",
                "message": "Some errors have detailed explanations: E0405, E0412, E0425, E0462, E0531.",
                "spans": []
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#autocfg@0.1.7",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "autocfg",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "For more information about an error, try `rustc --explain E0405`.\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": null,
                "level": "failure-note",
                "message": "For more information about an error, try `rustc --explain E0405`.",
                "spans": []
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#semver-parser@0.7.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "semver_parser",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error: requires `sized` lang_item\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\range.rs:72:27\n   |\n72 | fn operation(s: &[u8]) -> Option<(Op, usize)> {\n   |                           ^^^^^^^^^^^^^^^^^^^\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": null,
                "level": "error",
                "message": "requires `sized` lang_item",
                "spans": [
                  {
                    "byte_end": 1720,
                    "byte_start": 1701,
                    "column_end": 46,
                    "column_start": 27,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\range.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 72,
                    "line_start": 72,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 46,
                        "highlight_start": 27,
                        "text": "fn operation(s: &[u8]) -> Option<(Op, usize)> {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#semver-parser@0.7.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "semver_parser",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error: requires `sized` lang_item\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\range.rs:92:28\n   |\n92 | fn whitespace(s: &[u8]) -> Option<usize> {\n   |                            ^^^^^^^^^^^^^\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": null,
                "level": "error",
                "message": "requires `sized` lang_item",
                "spans": [
                  {
                    "byte_end": 2291,
                    "byte_start": 2278,
                    "column_end": 41,
                    "column_start": 28,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\range.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 92,
                    "line_start": 92,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 41,
                        "highlight_start": 28,
                        "text": "fn whitespace(s: &[u8]) -> Option<usize> {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#semver-parser@0.7.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "semver_parser",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error: requires `sized` lang_item\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\range.rs:96:40\n   |\n96 | pub fn parse_predicate(range: &str) -> Result<Predicate, String> {\n   |                                        ^^^^^^^^^^^^^^^^^^^^^^^^^\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": null,
                "level": "error",
                "message": "requires `sized` lang_item",
                "spans": [
                  {
                    "byte_end": 2400,
                    "byte_start": 2375,
                    "column_end": 65,
                    "column_start": 40,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\range.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 96,
                    "line_start": 96,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 65,
                        "highlight_start": 40,
                        "text": "pub fn parse_predicate(range: &str) -> Result<Predicate, String> {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#semver-parser@0.7.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "semver_parser",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error: requires `sized` lang_item\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\range.rs:151:31\n    |\n151 | pub fn parse(ranges: &str) -> Result<VersionReq, String> {\n    |                               ^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": null,
                "level": "error",
                "message": "requires `sized` lang_item",
                "spans": [
                  {
                    "byte_end": 3909,
                    "byte_start": 3883,
                    "column_end": 57,
                    "column_start": 31,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\range.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 151,
                    "line_start": 151,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 57,
                        "highlight_start": 31,
                        "text": "pub fn parse(ranges: &str) -> Result<VersionReq, String> {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#semver-parser@0.7.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "semver_parser",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error: requires `sized` lang_item\n --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\common.rs:7:27\n  |\n7 | fn parse_meta(s: &str) -> Vec<Identifier> {\n  |                           ^^^^^^^^^^^^^^^\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": null,
                "level": "error",
                "message": "requires `sized` lang_item",
                "spans": [
                  {
                    "byte_end": 279,
                    "byte_start": 264,
                    "column_end": 42,
                    "column_start": 27,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\common.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 7,
                    "line_start": 7,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 42,
                        "highlight_start": 27,
                        "text": "fn parse_meta(s: &str) -> Vec<Identifier> {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#semver-parser@0.7.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "semver_parser",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error: requires `sized` lang_item\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\common.rs:28:57\n   |\n28 | pub fn parse_optional_meta(s: &[u8], prefix_char: u8)-> Result<(Vec<Identifier>, usize), String> {\n   |                                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": null,
                "level": "error",
                "message": "requires `sized` lang_item",
                "spans": [
                  {
                    "byte_end": 1407,
                    "byte_start": 1367,
                    "column_end": 97,
                    "column_start": 57,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\common.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 28,
                    "line_start": 28,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 97,
                        "highlight_start": 57,
                        "text": "pub fn parse_optional_meta(s: &[u8], prefix_char: u8)-> Result<(Vec<Identifier>, usize), String> {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#semver-parser@0.7.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "semver_parser",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error: requires `sized` lang_item\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\common.rs:42:37\n   |\n42 | pub fn is_alpha_numeric(s: &str) -> bool {\n   |                                     ^^^^\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": null,
                "level": "error",
                "message": "requires `sized` lang_item",
                "spans": [
                  {
                    "byte_end": 1822,
                    "byte_start": 1818,
                    "column_end": 41,
                    "column_start": 37,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\common.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 42,
                    "line_start": 42,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 41,
                        "highlight_start": 37,
                        "text": "pub fn is_alpha_numeric(s: &str) -> bool {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#semver-parser@0.7.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "semver_parser",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error: requires `sized` lang_item\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\common.rs:53:40\n   |\n53 | pub fn numeric_identifier(s: &[u8]) -> Option<(u64, usize)> {\n   |                                        ^^^^^^^^^^^^^^^^^^^^\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": null,
                "level": "error",
                "message": "requires `sized` lang_item",
                "spans": [
                  {
                    "byte_end": 2199,
                    "byte_start": 2179,
                    "column_end": 60,
                    "column_start": 40,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\common.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 53,
                    "line_start": 53,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 60,
                        "highlight_start": 40,
                        "text": "pub fn numeric_identifier(s: &[u8]) -> Option<(u64, usize)> {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#semver-parser@0.7.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "semver_parser",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error: requires `sized` lang_item\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\common.rs:61:46\n   |\n61 | pub fn letters_numbers_dash_dot(s: &[u8]) -> Option<usize> {\n   |                                              ^^^^^^^^^^^^^\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": null,
                "level": "error",
                "message": "requires `sized` lang_item",
                "spans": [
                  {
                    "byte_end": 2443,
                    "byte_start": 2430,
                    "column_end": 59,
                    "column_start": 46,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\common.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 61,
                    "line_start": 61,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 59,
                        "highlight_start": 46,
                        "text": "pub fn letters_numbers_dash_dot(s: &[u8]) -> Option<usize> {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#semver-parser@0.7.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "semver_parser",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error: requires `sized` lang_item\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\recognize.rs:100:28\n    |\n100 | pub struct Alt<P1, P2>(pub P1, pub P2);\n    |                            ^^\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": null,
                "level": "error",
                "message": "requires `sized` lang_item",
                "spans": [
                  {
                    "byte_end": 2725,
                    "byte_start": 2723,
                    "column_end": 30,
                    "column_start": 28,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\recognize.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 100,
                    "line_start": 100,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 30,
                        "highlight_start": 28,
                        "text": "pub struct Alt<P1, P2>(pub P1, pub P2);"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#semver-parser@0.7.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "semver_parser",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error: requires `sized` lang_item\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\recognize.rs:110:33\n    |\n110 | pub struct OneOf<'a, P: 'a>(pub &'a [P]);\n    |                                 ^^^^^^^\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": null,
                "level": "error",
                "message": "requires `sized` lang_item",
                "spans": [
                  {
                    "byte_end": 3006,
                    "byte_start": 2999,
                    "column_end": 40,
                    "column_start": 33,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\recognize.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 110,
                    "line_start": 110,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 40,
                        "highlight_start": 33,
                        "text": "pub struct OneOf<'a, P: 'a>(pub &'a [P]);"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#winapi-build@0.1.1",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\winapi-build-0.1.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\winapi-build-0.1.1\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmppk0ok6_5\\websocket-0.27.1\\target\\debug\\deps\\libbuild-1dcf362043ad40ec.rlib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmppk0ok6_5\\websocket-0.27.1\\target\\debug\\deps\\libbuild-1dcf362043ad40ec.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#semver-parser@0.7.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "semver_parser",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0433]: failed to resolve: use of undeclared type `ToString`\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\version.rs:78:37\n   |\n78 |                 self.pre.iter().map(ToString::to_string).collect();\n   |                                     ^^^^^^^^ use of undeclared type `ToString`\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0433",
                  "explanation": "An undeclared crate, module, or type was used.\n\nErroneous code example:\n\n```compile_fail,E0433\nlet map = HashMap::new();\n// error: failed to resolve: use of undeclared type `HashMap`\n```\n\nPlease verify you didn't misspell the type/module's name or that you didn't\nforget to import it:\n\n```\nuse std::collections::HashMap; // HashMap has been imported.\nlet map: HashMap<u32, u32> = HashMap::new(); // So it can be used!\n```\n\nIf you've expected to use a crate name:\n\n```compile_fail\nuse ferris_wheel::BigO;\n// error: failed to resolve: use of undeclared module or unlinked crate\n```\n\nMake sure the crate has been added as a dependency in `Cargo.toml`.\n\nTo use a module from your current crate, add the `crate::` prefix to the path.\n"
                },
                "level": "error",
                "message": "failed to resolve: use of undeclared type `ToString`",
                "spans": [
                  {
                    "byte_end": 2155,
                    "byte_start": 2147,
                    "column_end": 45,
                    "column_start": 37,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\version.rs",
                    "is_primary": true,
                    "label": "use of undeclared type `ToString`",
                    "line_end": 78,
                    "line_start": 78,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 45,
                        "highlight_start": 37,
                        "text": "                self.pre.iter().map(ToString::to_string).collect();"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#semver-parser@0.7.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "semver_parser",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0433]: failed to resolve: use of undeclared type `ToString`\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\version.rs:83:39\n   |\n83 |                 self.build.iter().map(ToString::to_string).collect();\n   |                                       ^^^^^^^^ use of undeclared type `ToString`\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0433",
                  "explanation": "An undeclared crate, module, or type was used.\n\nErroneous code example:\n\n```compile_fail,E0433\nlet map = HashMap::new();\n// error: failed to resolve: use of undeclared type `HashMap`\n```\n\nPlease verify you didn't misspell the type/module's name or that you didn't\nforget to import it:\n\n```\nuse std::collections::HashMap; // HashMap has been imported.\nlet map: HashMap<u32, u32> = HashMap::new(); // So it can be used!\n```\n\nIf you've expected to use a crate name:\n\n```compile_fail\nuse ferris_wheel::BigO;\n// error: failed to resolve: use of undeclared module or unlinked crate\n```\n\nMake sure the crate has been added as a dependency in `Cargo.toml`.\n\nTo use a module from your current crate, add the `crate::` prefix to the path.\n"
                },
                "level": "error",
                "message": "failed to resolve: use of undeclared type `ToString`",
                "spans": [
                  {
                    "byte_end": 2354,
                    "byte_start": 2346,
                    "column_end": 47,
                    "column_start": 39,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\version.rs",
                    "is_primary": true,
                    "label": "use of undeclared type `ToString`",
                    "line_end": 83,
                    "line_start": 83,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 47,
                        "highlight_start": 39,
                        "text": "                self.build.iter().map(ToString::to_string).collect();"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#semver-parser@0.7.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "semver_parser",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0433]: failed to resolve: use of undeclared type `String`\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\range.rs:42:22\n   |\n42 |             _ => Err(String::from(\"Could not parse Op\")),\n   |                      ^^^^^^ use of undeclared type `String`\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0433",
                  "explanation": "An undeclared crate, module, or type was used.\n\nErroneous code example:\n\n```compile_fail,E0433\nlet map = HashMap::new();\n// error: failed to resolve: use of undeclared type `HashMap`\n```\n\nPlease verify you didn't misspell the type/module's name or that you didn't\nforget to import it:\n\n```\nuse std::collections::HashMap; // HashMap has been imported.\nlet map: HashMap<u32, u32> = HashMap::new(); // So it can be used!\n```\n\nIf you've expected to use a crate name:\n\n```compile_fail\nuse ferris_wheel::BigO;\n// error: failed to resolve: use of undeclared module or unlinked crate\n```\n\nMake sure the crate has been added as a dependency in `Cargo.toml`.\n\nTo use a module from your current crate, add the `crate::` prefix to the path.\n"
                },
                "level": "error",
                "message": "failed to resolve: use of undeclared type `String`",
                "spans": [
                  {
                    "byte_end": 1013,
                    "byte_start": 1007,
                    "column_end": 28,
                    "column_start": 22,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\range.rs",
                    "is_primary": true,
                    "label": "use of undeclared type `String`",
                    "line_end": 42,
                    "line_start": 42,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 28,
                        "highlight_start": 22,
                        "text": "            _ => Err(String::from(\"Could not parse Op\")),"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#semver-parser@0.7.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "semver_parser",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0433]: failed to resolve: use of undeclared type `String`\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\range.rs:154:20\n    |\n154 |         return Err(String::from(\"Null is not a valid VersionReq\"));\n    |                    ^^^^^^ use of undeclared type `String`\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0433",
                  "explanation": "An undeclared crate, module, or type was used.\n\nErroneous code example:\n\n```compile_fail,E0433\nlet map = HashMap::new();\n// error: failed to resolve: use of undeclared type `HashMap`\n```\n\nPlease verify you didn't misspell the type/module's name or that you didn't\nforget to import it:\n\n```\nuse std::collections::HashMap; // HashMap has been imported.\nlet map: HashMap<u32, u32> = HashMap::new(); // So it can be used!\n```\n\nIf you've expected to use a crate name:\n\n```compile_fail\nuse ferris_wheel::BigO;\n// error: failed to resolve: use of undeclared module or unlinked crate\n```\n\nMake sure the crate has been added as a dependency in `Cargo.toml`.\n\nTo use a module from your current crate, add the `crate::` prefix to the path.\n"
                },
                "level": "error",
                "message": "failed to resolve: use of undeclared type `String`",
                "spans": [
                  {
                    "byte_end": 3985,
                    "byte_start": 3979,
                    "column_end": 26,
                    "column_start": 20,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\range.rs",
                    "is_primary": true,
                    "label": "use of undeclared type `String`",
                    "line_end": 154,
                    "line_start": 154,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 26,
                        "highlight_start": 20,
                        "text": "        return Err(String::from(\"Null is not a valid VersionReq\"));"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#semver-parser@0.7.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "semver_parser",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0433]: failed to resolve: use of undeclared type `String`\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\range.rs:187:20\n    |\n187 |         return Err(String::from(\"VersionReq did not parse properly\"));\n    |                    ^^^^^^ use of undeclared type `String`\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0433",
                  "explanation": "An undeclared crate, module, or type was used.\n\nErroneous code example:\n\n```compile_fail,E0433\nlet map = HashMap::new();\n// error: failed to resolve: use of undeclared type `HashMap`\n```\n\nPlease verify you didn't misspell the type/module's name or that you didn't\nforget to import it:\n\n```\nuse std::collections::HashMap; // HashMap has been imported.\nlet map: HashMap<u32, u32> = HashMap::new(); // So it can be used!\n```\n\nIf you've expected to use a crate name:\n\n```compile_fail\nuse ferris_wheel::BigO;\n// error: failed to resolve: use of undeclared module or unlinked crate\n```\n\nMake sure the crate has been added as a dependency in `Cargo.toml`.\n\nTo use a module from your current crate, add the `crate::` prefix to the path.\n"
                },
                "level": "error",
                "message": "failed to resolve: use of undeclared type `String`",
                "spans": [
                  {
                    "byte_end": 4804,
                    "byte_start": 4798,
                    "column_end": 26,
                    "column_start": 20,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\range.rs",
                    "is_primary": true,
                    "label": "use of undeclared type `String`",
                    "line_end": 187,
                    "line_start": 187,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 26,
                        "highlight_start": 20,
                        "text": "        return Err(String::from(\"VersionReq did not parse properly\"));"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#semver-parser@0.7.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "semver_parser",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0433]: failed to resolve: use of undeclared type `Vec`\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\common.rs:38:13\n   |\n38 |         Ok((Vec::new(), 0))\n   |             ^^^ use of undeclared type `Vec`\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0433",
                  "explanation": "An undeclared crate, module, or type was used.\n\nErroneous code example:\n\n```compile_fail,E0433\nlet map = HashMap::new();\n// error: failed to resolve: use of undeclared type `HashMap`\n```\n\nPlease verify you didn't misspell the type/module's name or that you didn't\nforget to import it:\n\n```\nuse std::collections::HashMap; // HashMap has been imported.\nlet map: HashMap<u32, u32> = HashMap::new(); // So it can be used!\n```\n\nIf you've expected to use a crate name:\n\n```compile_fail\nuse ferris_wheel::BigO;\n// error: failed to resolve: use of undeclared module or unlinked crate\n```\n\nMake sure the crate has been added as a dependency in `Cargo.toml`.\n\nTo use a module from your current crate, add the `crate::` prefix to the path.\n"
                },
                "level": "error",
                "message": "failed to resolve: use of undeclared type `Vec`",
                "spans": [
                  {
                    "byte_end": 1760,
                    "byte_start": 1757,
                    "column_end": 16,
                    "column_start": 13,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\common.rs",
                    "is_primary": true,
                    "label": "use of undeclared type `Vec`",
                    "line_end": 38,
                    "line_start": 38,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 16,
                        "highlight_start": 13,
                        "text": "        Ok((Vec::new(), 0))"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#semver-parser@0.7.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "semver_parser",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0425]: cannot find function, tuple struct or tuple variant `Err` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\version.rs:32:16\n   |\n32 |         return Err(\"Error parsing major identifier\".to_string());\n   |                ^^^ not found in this scope\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0425",
                  "explanation": "An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"
                },
                "level": "error",
                "message": "cannot find function, tuple struct or tuple variant `Err` in this scope",
                "spans": [
                  {
                    "byte_end": 738,
                    "byte_start": 735,
                    "column_end": 19,
                    "column_start": 16,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\version.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 32,
                    "line_start": 32,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 19,
                        "highlight_start": 16,
                        "text": "        return Err(\"Error parsing major identifier\".to_string());"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#semver-parser@0.7.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "semver_parser",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0425]: cannot find function, tuple struct or tuple variant `Err` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\version.rs:37:16\n   |\n37 |         return Err(\"Expected dot\".to_string());\n   |                ^^^ not found in this scope\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0425",
                  "explanation": "An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"
                },
                "level": "error",
                "message": "cannot find function, tuple struct or tuple variant `Err` in this scope",
                "spans": [
                  {
                    "byte_end": 883,
                    "byte_start": 880,
                    "column_end": 19,
                    "column_start": 16,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\version.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 37,
                    "line_start": 37,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 19,
                        "highlight_start": 16,
                        "text": "        return Err(\"Expected dot\".to_string());"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#semver-parser@0.7.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "semver_parser",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0425]: cannot find function, tuple struct or tuple variant `Err` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\version.rs:43:16\n   |\n43 |         return Err(\"Error parsing minor identifier\".to_string());\n   |                ^^^ not found in this scope\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0425",
                  "explanation": "An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"
                },
                "level": "error",
                "message": "cannot find function, tuple struct or tuple variant `Err` in this scope",
                "spans": [
                  {
                    "byte_end": 1056,
                    "byte_start": 1053,
                    "column_end": 19,
                    "column_start": 16,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\version.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 43,
                    "line_start": 43,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 19,
                        "highlight_start": 16,
                        "text": "        return Err(\"Error parsing minor identifier\".to_string());"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#semver-parser@0.7.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "semver_parser",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0425]: cannot find function, tuple struct or tuple variant `Err` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\version.rs:48:16\n   |\n48 |         return Err(\"Expected dot\".to_string());\n   |                ^^^ not found in this scope\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0425",
                  "explanation": "An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"
                },
                "level": "error",
                "message": "cannot find function, tuple struct or tuple variant `Err` in this scope",
                "spans": [
                  {
                    "byte_end": 1201,
                    "byte_start": 1198,
                    "column_end": 19,
                    "column_start": 16,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\version.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 48,
                    "line_start": 48,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 19,
                        "highlight_start": 16,
                        "text": "        return Err(\"Expected dot\".to_string());"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#semver-parser@0.7.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "semver_parser",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0425]: cannot find function, tuple struct or tuple variant `Err` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\version.rs:54:16\n   |\n54 |         return Err(\"Error parsing patch identifier\".to_string());\n   |                ^^^ not found in this scope\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0425",
                  "explanation": "An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"
                },
                "level": "error",
                "message": "cannot find function, tuple struct or tuple variant `Err` in this scope",
                "spans": [
                  {
                    "byte_end": 1374,
                    "byte_start": 1371,
                    "column_end": 19,
                    "column_start": 16,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\version.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 54,
                    "line_start": 54,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 19,
                        "highlight_start": 16,
                        "text": "        return Err(\"Error parsing patch identifier\".to_string());"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#semver-parser@0.7.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "semver_parser",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0425]: cannot find function, tuple struct or tuple variant `Err` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\version.rs:61:16\n   |\n61 |         return Err(\"Extra junk after valid version: \".to_string() +\n   |                ^^^ not found in this scope\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0425",
                  "explanation": "An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"
                },
                "level": "error",
                "message": "cannot find function, tuple struct or tuple variant `Err` in this scope",
                "spans": [
                  {
                    "byte_end": 1651,
                    "byte_start": 1648,
                    "column_end": 19,
                    "column_start": 16,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\version.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 61,
                    "line_start": 61,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 19,
                        "highlight_start": 16,
                        "text": "        return Err(\"Extra junk after valid version: \".to_string() +"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#semver-parser@0.7.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "semver_parser",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0425]: cannot find function, tuple struct or tuple variant `Ok` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\version.rs:64:5\n   |\n64 |     Ok(Version {\n   |     ^^ not found in this scope\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0425",
                  "explanation": "An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"
                },
                "level": "error",
                "message": "cannot find function, tuple struct or tuple variant `Ok` in this scope",
                "spans": [
                  {
                    "byte_end": 1755,
                    "byte_start": 1753,
                    "column_end": 7,
                    "column_start": 5,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\version.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 64,
                    "line_start": 64,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 7,
                        "highlight_start": 5,
                        "text": "    Ok(Version {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#semver-parser@0.7.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "semver_parser",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0425]: cannot find function, tuple struct or tuple variant `Ok` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\version.rs:86:9\n   |\n86 |         Ok(())\n   |         ^^ not found in this scope\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0425",
                  "explanation": "An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"
                },
                "level": "error",
                "message": "cannot find function, tuple struct or tuple variant `Ok` in this scope",
                "spans": [
                  {
                    "byte_end": 2450,
                    "byte_start": 2448,
                    "column_end": 11,
                    "column_start": 9,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\version.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 86,
                    "line_start": 86,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 11,
                        "highlight_start": 9,
                        "text": "        Ok(())"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#semver-parser@0.7.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "semver_parser",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0425]: cannot find function, tuple struct or tuple variant `Ok` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\range.rs:35:20\n   |\n35 |             \"=\" => Ok(Op::Ex),\n   |                    ^^ not found in this scope\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0425",
                  "explanation": "An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"
                },
                "level": "error",
                "message": "cannot find function, tuple struct or tuple variant `Ok` in this scope",
                "spans": [
                  {
                    "byte_end": 773,
                    "byte_start": 771,
                    "column_end": 22,
                    "column_start": 20,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\range.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 35,
                    "line_start": 35,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 22,
                        "highlight_start": 20,
                        "text": "            \"=\" => Ok(Op::Ex),"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#semver-parser@0.7.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "semver_parser",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0425]: cannot find function, tuple struct or tuple variant `Ok` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\range.rs:36:20\n   |\n36 |             \">\" => Ok(Op::Gt),\n   |                    ^^ not found in this scope\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0425",
                  "explanation": "An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"
                },
                "level": "error",
                "message": "cannot find function, tuple struct or tuple variant `Ok` in this scope",
                "spans": [
                  {
                    "byte_end": 804,
                    "byte_start": 802,
                    "column_end": 22,
                    "column_start": 20,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\range.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 36,
                    "line_start": 36,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 22,
                        "highlight_start": 20,
                        "text": "            \">\" => Ok(Op::Gt),"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#semver-parser@0.7.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "semver_parser",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0425]: cannot find function, tuple struct or tuple variant `Ok` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\range.rs:37:21\n   |\n37 |             \">=\" => Ok(Op::GtEq),\n   |                     ^^ not found in this scope\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0425",
                  "explanation": "An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"
                },
                "level": "error",
                "message": "cannot find function, tuple struct or tuple variant `Ok` in this scope",
                "spans": [
                  {
                    "byte_end": 836,
                    "byte_start": 834,
                    "column_end": 23,
                    "column_start": 21,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\range.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 37,
                    "line_start": 37,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 23,
                        "highlight_start": 21,
                        "text": "            \">=\" => Ok(Op::GtEq),"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#semver-parser@0.7.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "semver_parser",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0425]: cannot find function, tuple struct or tuple variant `Ok` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\range.rs:38:20\n   |\n38 |             \"<\" => Ok(Op::Lt),\n   |                    ^^ not found in this scope\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0425",
                  "explanation": "An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"
                },
                "level": "error",
                "message": "cannot find function, tuple struct or tuple variant `Ok` in this scope",
                "spans": [
                  {
                    "byte_end": 869,
                    "byte_start": 867,
                    "column_end": 22,
                    "column_start": 20,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\range.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 38,
                    "line_start": 38,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 22,
                        "highlight_start": 20,
                        "text": "            \"<\" => Ok(Op::Lt),"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#semver-parser@0.7.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "semver_parser",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0425]: cannot find function, tuple struct or tuple variant `Ok` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\range.rs:39:21\n   |\n39 |             \"<=\" => Ok(Op::LtEq),\n   |                     ^^ not found in this scope\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0425",
                  "explanation": "An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"
                },
                "level": "error",
                "message": "cannot find function, tuple struct or tuple variant `Ok` in this scope",
                "spans": [
                  {
                    "byte_end": 901,
                    "byte_start": 899,
                    "column_end": 23,
                    "column_start": 21,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\range.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 39,
                    "line_start": 39,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 23,
                        "highlight_start": 21,
                        "text": "            \"<=\" => Ok(Op::LtEq),"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#semver-parser@0.7.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "semver_parser",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0425]: cannot find function, tuple struct or tuple variant `Ok` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\range.rs:40:20\n   |\n40 |             \"~\" => Ok(Op::Tilde),\n   |                    ^^ not found in this scope\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0425",
                  "explanation": "An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"
                },
                "level": "error",
                "message": "cannot find function, tuple struct or tuple variant `Ok` in this scope",
                "spans": [
                  {
                    "byte_end": 934,
                    "byte_start": 932,
                    "column_end": 22,
                    "column_start": 20,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\range.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 40,
                    "line_start": 40,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 22,
                        "highlight_start": 20,
                        "text": "            \"~\" => Ok(Op::Tilde),"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#semver-parser@0.7.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "semver_parser",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0425]: cannot find function, tuple struct or tuple variant `Ok` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\range.rs:41:20\n   |\n41 |             \"^\" => Ok(Op::Compatible),\n   |                    ^^ not found in this scope\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0425",
                  "explanation": "An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"
                },
                "level": "error",
                "message": "cannot find function, tuple struct or tuple variant `Ok` in this scope",
                "spans": [
                  {
                    "byte_end": 968,
                    "byte_start": 966,
                    "column_end": 22,
                    "column_start": 20,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\range.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 41,
                    "line_start": 41,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 22,
                        "highlight_start": 20,
                        "text": "            \"^\" => Ok(Op::Compatible),"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#semver-parser@0.7.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "semver_parser",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0425]: cannot find function, tuple struct or tuple variant `Err` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\range.rs:42:18\n   |\n42 |             _ => Err(String::from(\"Could not parse Op\")),\n   |                  ^^^ not found in this scope\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0425",
                  "explanation": "An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"
                },
                "level": "error",
                "message": "cannot find function, tuple struct or tuple variant `Err` in this scope",
                "spans": [
                  {
                    "byte_end": 1006,
                    "byte_start": 1003,
                    "column_end": 21,
                    "column_start": 18,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\range.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 42,
                    "line_start": 42,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 21,
                        "highlight_start": 18,
                        "text": "            _ => Err(String::from(\"Could not parse Op\")),"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#semver-parser@0.7.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "semver_parser",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0425]: cannot find function, tuple struct or tuple variant `Some` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\range.rs:58:9\n   |\n58 |         Some((Some(val), len))\n   |         ^^^^ not found in this scope\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0425",
                  "explanation": "An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"
                },
                "level": "error",
                "message": "cannot find function, tuple struct or tuple variant `Some` in this scope",
                "spans": [
                  {
                    "byte_end": 1367,
                    "byte_start": 1363,
                    "column_end": 13,
                    "column_start": 9,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\range.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 58,
                    "line_start": 58,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 13,
                        "highlight_start": 9,
                        "text": "        Some((Some(val), len))"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#semver-parser@0.7.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "semver_parser",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0425]: cannot find function, tuple struct or tuple variant `Some` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\range.rs:58:15\n   |\n58 |         Some((Some(val), len))\n   |               ^^^^ not found in this scope\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0425",
                  "explanation": "An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"
                },
                "level": "error",
                "message": "cannot find function, tuple struct or tuple variant `Some` in this scope",
                "spans": [
                  {
                    "byte_end": 1373,
                    "byte_start": 1369,
                    "column_end": 19,
                    "column_start": 15,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\range.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 58,
                    "line_start": 58,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 19,
                        "highlight_start": 15,
                        "text": "        Some((Some(val), len))"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#semver-parser@0.7.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "semver_parser",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0425]: cannot find function, tuple struct or tuple variant `Some` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\range.rs:60:9\n   |\n60 |         Some((None, len))\n   |         ^^^^ not found in this scope\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0425",
                  "explanation": "An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"
                },
                "level": "error",
                "message": "cannot find function, tuple struct or tuple variant `Some` in this scope",
                "spans": [
                  {
                    "byte_end": 1449,
                    "byte_start": 1445,
                    "column_end": 13,
                    "column_start": 9,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\range.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 60,
                    "line_start": 60,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 13,
                        "highlight_start": 9,
                        "text": "        Some((None, len))"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#semver-parser@0.7.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "semver_parser",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0425]: cannot find function, tuple struct or tuple variant `Some` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\range.rs:74:9\n   |\n74 |         Some((Op::Ex, len))\n   |         ^^^^ not found in this scope\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0425",
                  "explanation": "An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"
                },
                "level": "error",
                "message": "cannot find function, tuple struct or tuple variant `Some` in this scope",
                "spans": [
                  {
                    "byte_end": 1769,
                    "byte_start": 1765,
                    "column_end": 13,
                    "column_start": 9,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\range.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 74,
                    "line_start": 74,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 13,
                        "highlight_start": 9,
                        "text": "        Some((Op::Ex, len))"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#semver-parser@0.7.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "semver_parser",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0425]: cannot find function, tuple struct or tuple variant `Some` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\range.rs:76:9\n   |\n76 |         Some((Op::GtEq, len))\n   |         ^^^^ not found in this scope\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0425",
                  "explanation": "An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"
                },
                "level": "error",
                "message": "cannot find function, tuple struct or tuple variant `Some` in this scope",
                "spans": [
                  {
                    "byte_end": 1839,
                    "byte_start": 1835,
                    "column_end": 13,
                    "column_start": 9,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\range.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 76,
                    "line_start": 76,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 13,
                        "highlight_start": 9,
                        "text": "        Some((Op::GtEq, len))"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#semver-parser@0.7.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "semver_parser",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0425]: cannot find function, tuple struct or tuple variant `Some` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\range.rs:78:9\n   |\n78 |         Some((Op::Gt, len))\n   |         ^^^^ not found in this scope\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0425",
                  "explanation": "An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"
                },
                "level": "error",
                "message": "cannot find function, tuple struct or tuple variant `Some` in this scope",
                "spans": [
                  {
                    "byte_end": 1910,
                    "byte_start": 1906,
                    "column_end": 13,
                    "column_start": 9,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\range.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 78,
                    "line_start": 78,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 13,
                        "highlight_start": 9,
                        "text": "        Some((Op::Gt, len))"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#semver-parser@0.7.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "semver_parser",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0425]: cannot find function, tuple struct or tuple variant `Some` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\range.rs:80:9\n   |\n80 |         Some((Op::LtEq, len))\n   |         ^^^^ not found in this scope\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0425",
                  "explanation": "An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"
                },
                "level": "error",
                "message": "cannot find function, tuple struct or tuple variant `Some` in this scope",
                "spans": [
                  {
                    "byte_end": 1980,
                    "byte_start": 1976,
                    "column_end": 13,
                    "column_start": 9,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\range.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 80,
                    "line_start": 80,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 13,
                        "highlight_start": 9,
                        "text": "        Some((Op::LtEq, len))"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#semver-parser@0.7.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "semver_parser",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0425]: cannot find function, tuple struct or tuple variant `Some` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\range.rs:82:9\n   |\n82 |         Some((Op::Lt, len))\n   |         ^^^^ not found in this scope\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0425",
                  "explanation": "An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"
                },
                "level": "error",
                "message": "cannot find function, tuple struct or tuple variant `Some` in this scope",
                "spans": [
                  {
                    "byte_end": 2051,
                    "byte_start": 2047,
                    "column_end": 13,
                    "column_start": 9,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\range.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 82,
                    "line_start": 82,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 13,
                        "highlight_start": 9,
                        "text": "        Some((Op::Lt, len))"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#semver-parser@0.7.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "semver_parser",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0425]: cannot find function, tuple struct or tuple variant `Some` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\range.rs:84:9\n   |\n84 |         Some((Op::Tilde, len))\n   |         ^^^^ not found in this scope\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0425",
                  "explanation": "An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"
                },
                "level": "error",
                "message": "cannot find function, tuple struct or tuple variant `Some` in this scope",
                "spans": [
                  {
                    "byte_end": 2120,
                    "byte_start": 2116,
                    "column_end": 13,
                    "column_start": 9,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\range.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 84,
                    "line_start": 84,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 13,
                        "highlight_start": 9,
                        "text": "        Some((Op::Tilde, len))"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#semver-parser@0.7.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "semver_parser",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0425]: cannot find function, tuple struct or tuple variant `Some` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\range.rs:86:9\n   |\n86 |         Some((Op::Compatible, len))\n   |         ^^^^ not found in this scope\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0425",
                  "explanation": "An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"
                },
                "level": "error",
                "message": "cannot find function, tuple struct or tuple variant `Some` in this scope",
                "spans": [
                  {
                    "byte_end": 2192,
                    "byte_start": 2188,
                    "column_end": 13,
                    "column_start": 9,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\range.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 86,
                    "line_start": 86,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 13,
                        "highlight_start": 9,
                        "text": "        Some((Op::Compatible, len))"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#semver-parser@0.7.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "semver_parser",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0425]: cannot find function, tuple struct or tuple variant `Err` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\range.rs:113:16\n    |\n113 |         return Err(\"Error parsing major version number: \".to_string());\n    |                ^^^ not found in this scope\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0425",
                  "explanation": "An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"
                },
                "level": "error",
                "message": "cannot find function, tuple struct or tuple variant `Err` in this scope",
                "spans": [
                  {
                    "byte_end": 2853,
                    "byte_start": 2850,
                    "column_end": 19,
                    "column_start": 16,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\range.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 113,
                    "line_start": 113,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 19,
                        "highlight_start": 16,
                        "text": "        return Err(\"Error parsing major version number: \".to_string());"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#semver-parser@0.7.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "semver_parser",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0425]: cannot find function, tuple struct or tuple variant `Err` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\range.rs:139:16\n    |\n139 |         return Err(\"Extra junk after valid predicate: \".to_string() +\n    |                ^^^ not found in this scope\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0425",
                  "explanation": "An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"
                },
                "level": "error",
                "message": "cannot find function, tuple struct or tuple variant `Err` in this scope",
                "spans": [
                  {
                    "byte_end": 3617,
                    "byte_start": 3614,
                    "column_end": 19,
                    "column_start": 16,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\range.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 139,
                    "line_start": 139,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 19,
                        "highlight_start": 16,
                        "text": "        return Err(\"Extra junk after valid predicate: \".to_string() +"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#semver-parser@0.7.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "semver_parser",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0425]: cannot find function, tuple struct or tuple variant `Ok` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\range.rs:142:5\n    |\n142 |     Ok(Predicate {\n    |     ^^ not found in this scope\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0425",
                  "explanation": "An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"
                },
                "level": "error",
                "message": "cannot find function, tuple struct or tuple variant `Ok` in this scope",
                "spans": [
                  {
                    "byte_end": 3723,
                    "byte_start": 3721,
                    "column_end": 7,
                    "column_start": 5,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\range.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 142,
                    "line_start": 142,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 7,
                        "highlight_start": 5,
                        "text": "    Ok(Predicate {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#semver-parser@0.7.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "semver_parser",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0425]: cannot find function, tuple struct or tuple variant `Err` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\range.rs:154:16\n    |\n154 |         return Err(String::from(\"Null is not a valid VersionReq\"));\n    |                ^^^ not found in this scope\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0425",
                  "explanation": "An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"
                },
                "level": "error",
                "message": "cannot find function, tuple struct or tuple variant `Err` in this scope",
                "spans": [
                  {
                    "byte_end": 3978,
                    "byte_start": 3975,
                    "column_end": 19,
                    "column_start": 16,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\range.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 154,
                    "line_start": 154,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 19,
                        "highlight_start": 16,
                        "text": "        return Err(String::from(\"Null is not a valid VersionReq\"));"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#semver-parser@0.7.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "semver_parser",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0425]: cannot find function, tuple struct or tuple variant `Ok` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\range.rs:163:16\n    |\n163 |         return Ok(VersionReq {\n    |                ^^ not found in this scope\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0425",
                  "explanation": "An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"
                },
                "level": "error",
                "message": "cannot find function, tuple struct or tuple variant `Ok` in this scope",
                "spans": [
                  {
                    "byte_end": 4247,
                    "byte_start": 4245,
                    "column_end": 18,
                    "column_start": 16,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\range.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 163,
                    "line_start": 163,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 18,
                        "highlight_start": 16,
                        "text": "        return Ok(VersionReq {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#semver-parser@0.7.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "semver_parser",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0425]: cannot find function, tuple struct or tuple variant `Err` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\range.rs:187:16\n    |\n187 |         return Err(String::from(\"VersionReq did not parse properly\"));\n    |                ^^^ not found in this scope\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0425",
                  "explanation": "An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"
                },
                "level": "error",
                "message": "cannot find function, tuple struct or tuple variant `Err` in this scope",
                "spans": [
                  {
                    "byte_end": 4797,
                    "byte_start": 4794,
                    "column_end": 19,
                    "column_start": 16,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\range.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 187,
                    "line_start": 187,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 19,
                        "highlight_start": 16,
                        "text": "        return Err(String::from(\"VersionReq did not parse properly\"));"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#semver-parser@0.7.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "semver_parser",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0425]: cannot find function, tuple struct or tuple variant `Ok` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\range.rs:190:5\n    |\n190 |     Ok(VersionReq {\n    |     ^^ not found in this scope\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0425",
                  "explanation": "An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"
                },
                "level": "error",
                "message": "cannot find function, tuple struct or tuple variant `Ok` in this scope",
                "spans": [
                  {
                    "byte_end": 4863,
                    "byte_start": 4861,
                    "column_end": 7,
                    "column_start": 5,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\range.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 190,
                    "line_start": 190,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 7,
                        "highlight_start": 5,
                        "text": "    Ok(VersionReq {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#semver-parser@0.7.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "semver_parser",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0425]: cannot find function, tuple struct or tuple variant `Ok` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\common.rs:33:13\n   |\n33 |             Ok((parse_meta(from_utf8(&s[start..end]).unwrap()), end))\n   |             ^^ not found in this scope\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0425",
                  "explanation": "An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"
                },
                "level": "error",
                "message": "cannot find function, tuple struct or tuple variant `Ok` in this scope",
                "spans": [
                  {
                    "byte_end": 1593,
                    "byte_start": 1591,
                    "column_end": 15,
                    "column_start": 13,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\common.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 33,
                    "line_start": 33,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 15,
                        "highlight_start": 13,
                        "text": "            Ok((parse_meta(from_utf8(&s[start..end]).unwrap()), end))"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#semver-parser@0.7.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "semver_parser",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0425]: cannot find function, tuple struct or tuple variant `Err` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\common.rs:35:13\n   |\n35 |             Err(\"Error parsing prerelease\".to_string())\n   |             ^^^ not found in this scope\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0425",
                  "explanation": "An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"
                },
                "level": "error",
                "message": "cannot find function, tuple struct or tuple variant `Err` in this scope",
                "spans": [
                  {
                    "byte_end": 1681,
                    "byte_start": 1678,
                    "column_end": 16,
                    "column_start": 13,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\common.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 35,
                    "line_start": 35,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 16,
                        "highlight_start": 13,
                        "text": "            Err(\"Error parsing prerelease\".to_string())"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#semver-parser@0.7.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "semver_parser",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0425]: cannot find function, tuple struct or tuple variant `Ok` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\common.rs:38:9\n   |\n38 |         Ok((Vec::new(), 0))\n   |         ^^ not found in this scope\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0425",
                  "explanation": "An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"
                },
                "level": "error",
                "message": "cannot find function, tuple struct or tuple variant `Ok` in this scope",
                "spans": [
                  {
                    "byte_end": 1755,
                    "byte_start": 1753,
                    "column_end": 11,
                    "column_start": 9,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\common.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 38,
                    "line_start": 38,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 11,
                        "highlight_start": 9,
                        "text": "        Ok((Vec::new(), 0))"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#semver-parser@0.7.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "semver_parser",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0425]: cannot find function, tuple struct or tuple variant `Some` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\recognize.rs:48:13\n   |\n48 |             Some(1)\n   |             ^^^^ not found in this scope\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0425",
                  "explanation": "An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"
                },
                "level": "error",
                "message": "cannot find function, tuple struct or tuple variant `Some` in this scope",
                "spans": [
                  {
                    "byte_end": 1492,
                    "byte_start": 1488,
                    "column_end": 17,
                    "column_start": 13,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\recognize.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 48,
                    "line_start": 48,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 17,
                        "highlight_start": 13,
                        "text": "            Some(1)"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#semver-parser@0.7.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "semver_parser",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0425]: cannot find function, tuple struct or tuple variant `Some` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\recognize.rs:76:13\n   |\n76 |             Some(len)\n   |             ^^^^ not found in this scope\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0425",
                  "explanation": "An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"
                },
                "level": "error",
                "message": "cannot find function, tuple struct or tuple variant `Some` in this scope",
                "spans": [
                  {
                    "byte_end": 2205,
                    "byte_start": 2201,
                    "column_end": 17,
                    "column_start": 13,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\recognize.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 76,
                    "line_start": 76,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 17,
                        "highlight_start": 13,
                        "text": "            Some(len)"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#semver-parser@0.7.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "semver_parser",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0425]: cannot find function, tuple struct or tuple variant `Some` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\recognize.rs:117:24\n    |\n117 |                 return Some(len);\n    |                        ^^^^ not found in this scope\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0425",
                  "explanation": "An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"
                },
                "level": "error",
                "message": "cannot find function, tuple struct or tuple variant `Some` in this scope",
                "spans": [
                  {
                    "byte_end": 3218,
                    "byte_start": 3214,
                    "column_end": 28,
                    "column_start": 24,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\recognize.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 117,
                    "line_start": 117,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 28,
                        "highlight_start": 24,
                        "text": "                return Some(len);"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#semver-parser@0.7.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "semver_parser",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0425]: cannot find function, tuple struct or tuple variant `Some` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\recognize.rs:136:13\n    |\n136 |             Some(i)\n    |             ^^^^ not found in this scope\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0425",
                  "explanation": "An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"
                },
                "level": "error",
                "message": "cannot find function, tuple struct or tuple variant `Some` in this scope",
                "spans": [
                  {
                    "byte_end": 3607,
                    "byte_start": 3603,
                    "column_end": 17,
                    "column_start": 13,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\recognize.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 136,
                    "line_start": 136,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 17,
                        "highlight_start": 13,
                        "text": "            Some(i)"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#semver-parser@0.7.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "semver_parser",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0425]: cannot find function, tuple struct or tuple variant `Some` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\recognize.rs:152:9\n    |\n152 |         Some(i)\n    |         ^^^^ not found in this scope\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0425",
                  "explanation": "An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"
                },
                "level": "error",
                "message": "cannot find function, tuple struct or tuple variant `Some` in this scope",
                "spans": [
                  {
                    "byte_end": 3923,
                    "byte_start": 3919,
                    "column_end": 13,
                    "column_start": 9,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\recognize.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 152,
                    "line_start": 152,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 13,
                        "highlight_start": 9,
                        "text": "        Some(i)"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#semver-parser@0.7.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "semver_parser",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "Some errors have detailed explanations: E0405, E0412, E0425, E0433, E0462, E0531.\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": null,
                "level": "failure-note",
                "message": "Some errors have detailed explanations: E0405, E0412, E0425, E0433, E0462, E0531.",
                "spans": []
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#semver-parser@0.7.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "semver_parser",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "For more information about an error, try `rustc --explain E0405`.\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": null,
                "level": "failure-note",
                "message": "For more information about an error, try `rustc --explain E0405`.",
                "spans": []
              }
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#rand_core@0.4.2",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\rand_core-0.4.2\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "rand_core",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\rand_core-0.4.2\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "alloc",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmppk0ok6_5\\websocket-0.27.1\\target\\debug\\deps\\librand_core-1c0117372d178e21.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#byteorder@1.4.3",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\byteorder-1.4.3\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "byteorder",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\byteorder-1.4.3\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmppk0ok6_5\\websocket-0.27.1\\target\\debug\\deps\\libbyteorder-74041c85a77c1170.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#iovec@0.1.4",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\iovec-0.1.4\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "iovec",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\iovec-0.1.4\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0405]: cannot find trait `From` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\iovec-0.1.4\\src\\sys\\windows.rs:42:10\n   |\n42 | impl<'a> From<&'a [u8]> for &'a IoVec {\n   |          ^^^^ not found in this scope\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0405",
                  "explanation": "The code refers to a trait that is not in scope.\n\nErroneous code example:\n\n```compile_fail,E0405\nstruct Foo;\n\nimpl SomeTrait for Foo {} // error: trait `SomeTrait` is not in scope\n```\n\nPlease verify that the name of the trait wasn't misspelled and ensure that it\nwas imported. Example:\n\n```\n# #[cfg(for_demonstration_only)]\n// solution 1:\nuse some_file::SomeTrait;\n\n// solution 2:\ntrait SomeTrait {\n    // some functions\n}\n\nstruct Foo;\n\nimpl SomeTrait for Foo { // ok!\n    // implements functions\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find trait `From` in this scope",
                "spans": [
                  {
                    "byte_end": 836,
                    "byte_start": 832,
                    "column_end": 14,
                    "column_start": 10,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\iovec-0.1.4\\src\\sys\\windows.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 42,
                    "line_start": 42,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 14,
                        "highlight_start": 10,
                        "text": "impl<'a> From<&'a [u8]> for &'a IoVec {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#iovec@0.1.4",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\iovec-0.1.4\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "iovec",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\iovec-0.1.4\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0405]: cannot find trait `From` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\iovec-0.1.4\\src\\sys\\windows.rs:56:10\n   |\n56 | impl<'a> From<&'a mut [u8]> for &'a mut IoVec {\n   |          ^^^^ not found in this scope\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0405",
                  "explanation": "The code refers to a trait that is not in scope.\n\nErroneous code example:\n\n```compile_fail,E0405\nstruct Foo;\n\nimpl SomeTrait for Foo {} // error: trait `SomeTrait` is not in scope\n```\n\nPlease verify that the name of the trait wasn't misspelled and ensure that it\nwas imported. Example:\n\n```\n# #[cfg(for_demonstration_only)]\n// solution 1:\nuse some_file::SomeTrait;\n\n// solution 2:\ntrait SomeTrait {\n    // some functions\n}\n\nstruct Foo;\n\nimpl SomeTrait for Foo { // ok!\n    // implements functions\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find trait `From` in this scope",
                "spans": [
                  {
                    "byte_end": 1161,
                    "byte_start": 1157,
                    "column_end": 14,
                    "column_start": 10,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\iovec-0.1.4\\src\\sys\\windows.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 56,
                    "line_start": 56,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 14,
                        "highlight_start": 10,
                        "text": "impl<'a> From<&'a mut [u8]> for &'a mut IoVec {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#iovec@0.1.4",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\iovec-0.1.4\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "iovec",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\iovec-0.1.4\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0412]: cannot find type `Option` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\iovec-0.1.4\\src\\lib.rs:58:40\n   |\n58 |     pub fn from_bytes(slice: &[u8]) -> Option<&IoVec> {\n   |                                        ^^^^^^ not found in this scope\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0412",
                  "explanation": "A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"
                },
                "level": "error",
                "message": "cannot find type `Option` in this scope",
                "spans": [
                  {
                    "byte_end": 1485,
                    "byte_start": 1479,
                    "column_end": 46,
                    "column_start": 40,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\iovec-0.1.4\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 58,
                    "line_start": 58,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 46,
                        "highlight_start": 40,
                        "text": "    pub fn from_bytes(slice: &[u8]) -> Option<&IoVec> {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#iovec@0.1.4",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\iovec-0.1.4\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "iovec",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\iovec-0.1.4\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0425]: cannot find value `None` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\iovec-0.1.4\\src\\lib.rs:60:20\n   |\n60 |             return None\n   |                    ^^^^ not found in this scope\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0425",
                  "explanation": "An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"
                },
                "level": "error",
                "message": "cannot find value `None` in this scope",
                "spans": [
                  {
                    "byte_end": 1549,
                    "byte_start": 1545,
                    "column_end": 24,
                    "column_start": 20,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\iovec-0.1.4\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 60,
                    "line_start": 60,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 24,
                        "highlight_start": 20,
                        "text": "            return None"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#iovec@0.1.4",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\iovec-0.1.4\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "iovec",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\iovec-0.1.4\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0412]: cannot find type `Option` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\iovec-0.1.4\\src\\lib.rs:68:48\n   |\n68 |     pub fn from_bytes_mut(slice: &mut [u8]) -> Option<&mut IoVec> {\n   |                                                ^^^^^^ not found in this scope\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0412",
                  "explanation": "A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"
                },
                "level": "error",
                "message": "cannot find type `Option` in this scope",
                "spans": [
                  {
                    "byte_end": 1738,
                    "byte_start": 1732,
                    "column_end": 54,
                    "column_start": 48,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\iovec-0.1.4\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 68,
                    "line_start": 68,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 54,
                        "highlight_start": 48,
                        "text": "    pub fn from_bytes_mut(slice: &mut [u8]) -> Option<&mut IoVec> {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#iovec@0.1.4",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\iovec-0.1.4\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "iovec",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\iovec-0.1.4\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0425]: cannot find value `None` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\iovec-0.1.4\\src\\lib.rs:70:20\n   |\n70 |             return None\n   |                    ^^^^ not found in this scope\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0425",
                  "explanation": "An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"
                },
                "level": "error",
                "message": "cannot find value `None` in this scope",
                "spans": [
                  {
                    "byte_end": 1806,
                    "byte_start": 1802,
                    "column_end": 24,
                    "column_start": 20,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\iovec-0.1.4\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 70,
                    "line_start": 70,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 24,
                        "highlight_start": 20,
                        "text": "            return None"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#iovec@0.1.4",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\iovec-0.1.4\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "iovec",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\iovec-0.1.4\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0405]: cannot find trait `From` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\iovec-0.1.4\\src\\lib.rs:106:10\n    |\n106 | impl<'a> From<&'a [u8]> for &'a IoVec {\n    |          ^^^^ not found in this scope\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0405",
                  "explanation": "The code refers to a trait that is not in scope.\n\nErroneous code example:\n\n```compile_fail,E0405\nstruct Foo;\n\nimpl SomeTrait for Foo {} // error: trait `SomeTrait` is not in scope\n```\n\nPlease verify that the name of the trait wasn't misspelled and ensure that it\nwas imported. Example:\n\n```\n# #[cfg(for_demonstration_only)]\n// solution 1:\nuse some_file::SomeTrait;\n\n// solution 2:\ntrait SomeTrait {\n    // some functions\n}\n\nstruct Foo;\n\nimpl SomeTrait for Foo { // ok!\n    // implements functions\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find trait `From` in this scope",
                "spans": [
                  {
                    "byte_end": 2499,
                    "byte_start": 2495,
                    "column_end": 14,
                    "column_start": 10,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\iovec-0.1.4\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 106,
                    "line_start": 106,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 14,
                        "highlight_start": 10,
                        "text": "impl<'a> From<&'a [u8]> for &'a IoVec {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#iovec@0.1.4",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\iovec-0.1.4\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "iovec",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\iovec-0.1.4\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0405]: cannot find trait `From` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\iovec-0.1.4\\src\\lib.rs:117:10\n    |\n117 | impl<'a> From<&'a mut [u8]> for &'a mut IoVec {\n    |          ^^^^ not found in this scope\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0405",
                  "explanation": "The code refers to a trait that is not in scope.\n\nErroneous code example:\n\n```compile_fail,E0405\nstruct Foo;\n\nimpl SomeTrait for Foo {} // error: trait `SomeTrait` is not in scope\n```\n\nPlease verify that the name of the trait wasn't misspelled and ensure that it\nwas imported. Example:\n\n```\n# #[cfg(for_demonstration_only)]\n// solution 1:\nuse some_file::SomeTrait;\n\n// solution 2:\ntrait SomeTrait {\n    // some functions\n}\n\nstruct Foo;\n\nimpl SomeTrait for Foo { // ok!\n    // implements functions\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find trait `From` in this scope",
                "spans": [
                  {
                    "byte_end": 2900,
                    "byte_start": 2896,
                    "column_end": 14,
                    "column_start": 10,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\iovec-0.1.4\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 117,
                    "line_start": 117,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 14,
                        "highlight_start": 10,
                        "text": "impl<'a> From<&'a mut [u8]> for &'a mut IoVec {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#iovec@0.1.4",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\iovec-0.1.4\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "iovec",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\iovec-0.1.4\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0405]: cannot find trait `Default` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\iovec-0.1.4\\src\\lib.rs:128:10\n    |\n128 | impl<'a> Default for &'a IoVec {\n    |          ^^^^^^^ not found in this scope\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0405",
                  "explanation": "The code refers to a trait that is not in scope.\n\nErroneous code example:\n\n```compile_fail,E0405\nstruct Foo;\n\nimpl SomeTrait for Foo {} // error: trait `SomeTrait` is not in scope\n```\n\nPlease verify that the name of the trait wasn't misspelled and ensure that it\nwas imported. Example:\n\n```\n# #[cfg(for_demonstration_only)]\n// solution 1:\nuse some_file::SomeTrait;\n\n// solution 2:\ntrait SomeTrait {\n    // some functions\n}\n\nstruct Foo;\n\nimpl SomeTrait for Foo { // ok!\n    // implements functions\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find trait `Default` in this scope",
                "spans": [
                  {
                    "byte_end": 3328,
                    "byte_start": 3321,
                    "column_end": 17,
                    "column_start": 10,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\iovec-0.1.4\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 128,
                    "line_start": 128,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 17,
                        "highlight_start": 10,
                        "text": "impl<'a> Default for &'a IoVec {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#iovec@0.1.4",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\iovec-0.1.4\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "iovec",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\iovec-0.1.4\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0405]: cannot find trait `Default` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\iovec-0.1.4\\src\\lib.rs:137:10\n    |\n137 | impl<'a> Default for &'a mut IoVec {\n    |          ^^^^^^^ not found in this scope\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0405",
                  "explanation": "The code refers to a trait that is not in scope.\n\nErroneous code example:\n\n```compile_fail,E0405\nstruct Foo;\n\nimpl SomeTrait for Foo {} // error: trait `SomeTrait` is not in scope\n```\n\nPlease verify that the name of the trait wasn't misspelled and ensure that it\nwas imported. Example:\n\n```\n# #[cfg(for_demonstration_only)]\n// solution 1:\nuse some_file::SomeTrait;\n\n// solution 2:\ntrait SomeTrait {\n    // some functions\n}\n\nstruct Foo;\n\nimpl SomeTrait for Foo { // ok!\n    // implements functions\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find trait `Default` in this scope",
                "spans": [
                  {
                    "byte_end": 3635,
                    "byte_start": 3628,
                    "column_end": 17,
                    "column_start": 10,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\iovec-0.1.4\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 137,
                    "line_start": 137,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 17,
                        "highlight_start": 10,
                        "text": "impl<'a> Default for &'a mut IoVec {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#iovec@0.1.4",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\iovec-0.1.4\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "iovec",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\iovec-0.1.4\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0425]: cannot find function, tuple struct or tuple variant `Some` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\iovec-0.1.4\\src\\lib.rs:64:13\n   |\n64 |             Some(mem::transmute(iovec))\n   |             ^^^^ not found in this scope\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0425",
                  "explanation": "An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"
                },
                "level": "error",
                "message": "cannot find function, tuple struct or tuple variant `Some` in this scope",
                "spans": [
                  {
                    "byte_end": 1644,
                    "byte_start": 1640,
                    "column_end": 17,
                    "column_start": 13,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\iovec-0.1.4\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 64,
                    "line_start": 64,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 17,
                        "highlight_start": 13,
                        "text": "            Some(mem::transmute(iovec))"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#iovec@0.1.4",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\iovec-0.1.4\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "iovec",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\iovec-0.1.4\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0425]: cannot find function, tuple struct or tuple variant `Some` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\iovec-0.1.4\\src\\lib.rs:74:13\n   |\n74 |             Some(mem::transmute(iovec))\n   |             ^^^^ not found in this scope\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0425",
                  "explanation": "An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"
                },
                "level": "error",
                "message": "cannot find function, tuple struct or tuple variant `Some` in this scope",
                "spans": [
                  {
                    "byte_end": 1905,
                    "byte_start": 1901,
                    "column_end": 17,
                    "column_start": 13,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\iovec-0.1.4\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 74,
                    "line_start": 74,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 17,
                        "highlight_start": 13,
                        "text": "            Some(mem::transmute(iovec))"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#iovec@0.1.4",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\iovec-0.1.4\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "iovec",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\iovec-0.1.4\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "Some errors have detailed explanations: E0405, E0412, E0425, E0786.\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": null,
                "level": "failure-note",
                "message": "Some errors have detailed explanations: E0405, E0412, E0425, E0786.",
                "spans": []
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#iovec@0.1.4",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\iovec-0.1.4\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "iovec",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\iovec-0.1.4\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "For more information about an error, try `rustc --explain E0405`.\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": null,
                "level": "failure-note",
                "message": "For more information about an error, try `rustc --explain E0405`.",
                "spans": []
              }
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#autocfg@1.0.1",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "autocfg",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmppk0ok6_5\\websocket-0.27.1\\target\\debug\\deps\\libautocfg-8a80f11453d57fa4.rlib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmppk0ok6_5\\websocket-0.27.1\\target\\debug\\deps\\libautocfg-8a80f11453d57fa4.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#maybe-uninit@2.0.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\maybe-uninit-2.0.0\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\maybe-uninit-2.0.0\\build.rs",
                "edition": "2015",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmppk0ok6_5\\websocket-0.27.1\\target\\debug\\build\\maybe-uninit-d08e83b62171ae8a\\build-script-build.exe",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmppk0ok6_5\\websocket-0.27.1\\target\\debug\\build\\maybe-uninit-d08e83b62171ae8a\\build_script_build.pdb"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#log@0.4.14",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\log-0.4.14\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\log-0.4.14\\build.rs",
                "edition": "2015",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmppk0ok6_5\\websocket-0.27.1\\target\\debug\\build\\log-6dbcd9a01d930bf8\\build-script-build.exe",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmppk0ok6_5\\websocket-0.27.1\\target\\debug\\build\\log-6dbcd9a01d930bf8\\build_script_build.pdb"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#typenum@1.15.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\typenum-1.15.0\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-main",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\typenum-1.15.0\\build\\main.rs",
                "edition": "2018",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmppk0ok6_5\\websocket-0.27.1\\target\\debug\\build\\typenum-031f4856322edbea\\build-script-main.exe",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmppk0ok6_5\\websocket-0.27.1\\target\\debug\\build\\typenum-031f4856322edbea\\build_script_main.pdb"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#winapi@0.3.9",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\winapi-0.3.9\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\winapi-0.3.9\\build.rs",
                "edition": "2015",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "errhandlingapi",
                "fileapi",
                "handleapi",
                "lmcons",
                "minschannel",
                "minwinbase",
                "minwindef",
                "ntdef",
                "ntsecapi",
                "ntstatus",
                "profileapi",
                "schannel",
                "securitybaseapi",
                "sspi",
                "std",
                "sysinfoapi",
                "timezoneapi",
                "winbase",
                "wincrypt",
                "winerror",
                "winnt",
                "winsock2",
                "ws2def",
                "ws2ipdef",
                "ws2tcpip"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmppk0ok6_5\\websocket-0.27.1\\target\\debug\\build\\winapi-3af36e6b3c37193b\\build-script-build.exe",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmppk0ok6_5\\websocket-0.27.1\\target\\debug\\build\\winapi-3af36e6b3c37193b\\build_script_build.pdb"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#futures@0.1.31",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\futures-0.1.31\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "futures",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\futures-0.1.31\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "use_std",
                "with-deprecated"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmppk0ok6_5\\websocket-0.27.1\\target\\debug\\deps\\libfutures-f8251d23ac98a6af.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#winapi@0.2.8",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\winapi-0.2.8\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "winapi",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\winapi-0.2.8\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmppk0ok6_5\\websocket-0.27.1\\target\\debug\\deps\\libwinapi-b85acda13bcb8fb7.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "build-finished",
              "success": false
            }
          ],
          "clippy": [
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#winapi@0.3.9",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\winapi-0.3.9\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\winapi-0.3.9\\build.rs",
                "edition": "2015",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "errhandlingapi",
                "fileapi",
                "handleapi",
                "lmcons",
                "minschannel",
                "minwinbase",
                "minwindef",
                "ntdef",
                "ntsecapi",
                "ntstatus",
                "profileapi",
                "schannel",
                "securitybaseapi",
                "sspi",
                "std",
                "sysinfoapi",
                "timezoneapi",
                "winbase",
                "wincrypt",
                "winerror",
                "winnt",
                "winsock2",
                "ws2def",
                "ws2ipdef",
                "ws2tcpip"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmppk0ok6_5\\websocket-0.27.1\\target\\debug\\build\\winapi-3af36e6b3c37193b\\build-script-build.exe",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmppk0ok6_5\\websocket-0.27.1\\target\\debug\\build\\winapi-3af36e6b3c37193b\\build_script_build.pdb"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#byteorder@1.4.3",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\byteorder-1.4.3\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "byteorder",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\byteorder-1.4.3\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmppk0ok6_5\\websocket-0.27.1\\target\\debug\\deps\\libbyteorder-74041c85a77c1170.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#log@0.4.14",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\log-0.4.14\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\log-0.4.14\\build.rs",
                "edition": "2015",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmppk0ok6_5\\websocket-0.27.1\\target\\debug\\build\\log-6dbcd9a01d930bf8\\build-script-build.exe",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmppk0ok6_5\\websocket-0.27.1\\target\\debug\\build\\log-6dbcd9a01d930bf8\\build_script_build.pdb"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#cfg-if@1.0.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\cfg-if-1.0.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "cfg_if",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\cfg-if-1.0.0\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmppk0ok6_5\\websocket-0.27.1\\target\\debug\\deps\\libcfg_if-f755e379589b9030.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#winapi-build@0.1.1",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\winapi-build-0.1.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\winapi-build-0.1.1\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmppk0ok6_5\\websocket-0.27.1\\target\\debug\\deps\\libbuild-1dcf362043ad40ec.rlib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmppk0ok6_5\\websocket-0.27.1\\target\\debug\\deps\\libbuild-1dcf362043ad40ec.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#cfg-if@0.1.10",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\cfg-if-0.1.10\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "cfg_if",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\cfg-if-0.1.10\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmppk0ok6_5\\websocket-0.27.1\\target\\debug\\deps\\libcfg_if-0bd16a779d0507b1.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#rand_core@0.4.2",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\rand_core-0.4.2\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "rand_core",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\rand_core-0.4.2\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "alloc",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmppk0ok6_5\\websocket-0.27.1\\target\\debug\\deps\\librand_core-1c0117372d178e21.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#maybe-uninit@2.0.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\maybe-uninit-2.0.0\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\maybe-uninit-2.0.0\\build.rs",
                "edition": "2015",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmppk0ok6_5\\websocket-0.27.1\\target\\debug\\build\\maybe-uninit-d08e83b62171ae8a\\build-script-build.exe",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmppk0ok6_5\\websocket-0.27.1\\target\\debug\\build\\maybe-uninit-d08e83b62171ae8a\\build_script_build.pdb"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#futures@0.1.31",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\futures-0.1.31\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "futures",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\futures-0.1.31\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "use_std",
                "with-deprecated"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmppk0ok6_5\\websocket-0.27.1\\target\\debug\\deps\\libfutures-f8251d23ac98a6af.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#lazy_static@1.4.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\lazy_static-1.4.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "lazy_static",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\lazy_static-1.4.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmppk0ok6_5\\websocket-0.27.1\\target\\debug\\deps\\liblazy_static-1b2aa05184283f8f.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#typenum@1.15.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\typenum-1.15.0\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-main",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\typenum-1.15.0\\build\\main.rs",
                "edition": "2018",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmppk0ok6_5\\websocket-0.27.1\\target\\debug\\build\\typenum-031f4856322edbea\\build-script-main.exe",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmppk0ok6_5\\websocket-0.27.1\\target\\debug\\build\\typenum-031f4856322edbea\\build_script_main.pdb"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#winapi@0.2.8",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\winapi-0.2.8\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "winapi",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\winapi-0.2.8\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmppk0ok6_5\\websocket-0.27.1\\target\\debug\\deps\\libwinapi-b85acda13bcb8fb7.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#autocfg@1.0.1",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "autocfg",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.0.1\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmppk0ok6_5\\websocket-0.27.1\\target\\debug\\deps\\libautocfg-8a80f11453d57fa4.rlib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmppk0ok6_5\\websocket-0.27.1\\target\\debug\\deps\\libautocfg-8a80f11453d57fa4.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "build-script-executed",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#winapi@0.3.9",
              "linked_libs": [
                "dylib=advapi32",
                "dylib=bcrypt",
                "dylib=cfgmgr32",
                "dylib=credui",
                "dylib=crypt32",
                "dylib=cryptnet",
                "dylib=fwpuclnt",
                "dylib=kernel32",
                "dylib=ncrypt",
                "dylib=ntdll",
                "dylib=secur32",
                "dylib=user32",
                "dylib=ws2_32"
              ],
              "linked_paths": [],
              "cfgs": [
                "feature=\"winreg\"",
                "feature=\"mstcpip\"",
                "feature=\"reason\"",
                "feature=\"subauth\"",
                "feature=\"inaddr\"",
                "feature=\"rpcndr\"",
                "feature=\"guiddef\"",
                "feature=\"libloaderapi\"",
                "feature=\"devpropdef\"",
                "feature=\"in6addr\"",
                "feature=\"wincred\"",
                "feature=\"ktmtypes\"",
                "feature=\"ncrypt\"",
                "feature=\"vadefs\"",
                "feature=\"excpt\"",
                "feature=\"wtypesbase\"",
                "feature=\"lsalookup\"",
                "feature=\"windef\"",
                "feature=\"basetsd\"",
                "feature=\"processthreadsapi\"",
                "feature=\"cfg\"",
                "feature=\"bcrypt\"",
                "feature=\"qos\"",
                "feature=\"vcruntime\"",
                "feature=\"cfgmgr32\""
              ],
              "env": [],
              "out_dir": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmppk0ok6_5\\websocket-0.27.1\\target\\debug\\build\\winapi-6acb759e3981bf8b\\out"
            },
            {
              "reason": "build-script-executed",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#log@0.4.14",
              "linked_libs": [],
              "linked_paths": [],
              "cfgs": [
                "atomic_cas",
                "has_atomics"
              ],
              "env": [],
              "out_dir": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmppk0ok6_5\\websocket-0.27.1\\target\\debug\\build\\log-0c76d85a10bb1a3f\\out"
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#rand_core@0.3.1",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\rand_core-0.3.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "rand_core",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\rand_core-0.3.1\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmppk0ok6_5\\websocket-0.27.1\\target\\debug\\deps\\librand_core-92e7666df27a7834.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#tinyvec_macros@0.1.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\tinyvec_macros-0.1.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "tinyvec_macros",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\tinyvec_macros-0.1.0\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmppk0ok6_5\\websocket-0.27.1\\target\\debug\\deps\\libtinyvec_macros-ba8c195c34d839cf.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#iovec@0.1.4",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\iovec-0.1.4\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "iovec",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\iovec-0.1.4\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmppk0ok6_5\\websocket-0.27.1\\target\\debug\\deps\\libiovec-7a069ae202098e0f.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#scopeguard@1.1.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\scopeguard-1.1.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "scopeguard",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\scopeguard-1.1.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmppk0ok6_5\\websocket-0.27.1\\target\\debug\\deps\\libscopeguard-b9c5b28c83a30656.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "build-script-executed",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#typenum@1.15.0",
              "linked_libs": [],
              "linked_paths": [],
              "cfgs": [],
              "env": [
                [
                  "TYPENUM_BUILD_CONSTS",
                  "C:\\Users\\davet\\AppData\\Local\\Temp\\tmppk0ok6_5\\websocket-0.27.1\\target\\debug\\build\\typenum-2fd538261e4e78a9\\out\\consts.rs"
                ],
                [
                  "TYPENUM_BUILD_OP",
                  "C:\\Users\\davet\\AppData\\Local\\Temp\\tmppk0ok6_5\\websocket-0.27.1\\target\\debug\\build\\typenum-2fd538261e4e78a9\\out\\op.rs"
                ]
              ],
              "out_dir": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmppk0ok6_5\\websocket-0.27.1\\target\\debug\\build\\typenum-2fd538261e4e78a9\\out"
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#slab@0.4.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "slab",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0786]: found invalid metadata files for crate `hashbrown` which `std` depends on\n  |\n  = note: failed to mmap file 'C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib\\rustlib\\x86_64-pc-windows-msvc\\lib\\libhashbrown-d20509d97af05356.rlib': The paging file is too small for this operation to complete. (os error 1455)\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "failed to mmap file 'C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib\\rustlib\\x86_64-pc-windows-msvc\\lib\\libhashbrown-d20509d97af05356.rlib': The paging file is too small for this operation to complete. (os error 1455)",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "E0786",
                  "explanation": "A metadata file was invalid.\n\nErroneous code example:\n\n```ignore (needs extern files)\nuse ::foo; // error: found invalid metadata files for crate `foo`\n```\n\nWhen loading crates, each crate must have a valid metadata file.\nInvalid files could be caused by filesystem corruption,\nan IO error while reading the file, or (rarely) a bug in the compiler itself.\n\nConsider deleting the file and recreating it,\nor reporting a bug against the compiler.\n"
                },
                "level": "error",
                "message": "found invalid metadata files for crate `hashbrown` which `std` depends on",
                "spans": [
                  {
                    "byte_end": 0,
                    "byte_start": 0,
                    "column_end": 1,
                    "column_start": 1,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\src\\lib.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 1,
                    "line_start": 1,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": []
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#slab@0.4.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "slab",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0463]: can't find crate for `std`\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\src\\lib.rs:116:1\n    |\n116 | extern crate std as alloc;\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^ can't find crate\n    |\n    = note: the `x86_64-pc-windows-msvc` target may not support the standard library\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "the `x86_64-pc-windows-msvc` target may not support the standard library",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "E0463",
                  "explanation": "A crate was declared but cannot be found.\n\nErroneous code example:\n\n```compile_fail,E0463\nextern crate foo; // error: can't find crate\n```\n\nYou need to link your code to the relevant crate in order to be able to use it\n(through Cargo or the `-L` option of rustc, for example).\n\n## Common causes\n\n- The crate is not present at all. If using Cargo, add it to `[dependencies]`\n  in Cargo.toml.\n- The crate is present, but under a different name. If using Cargo, look for\n  `package = ` under `[dependencies]` in Cargo.toml.\n\n## Common causes for missing `std` or `core`\n\n- You are cross-compiling for a target which doesn't have `std` prepackaged.\n  Consider one of the following:\n  + Adding a pre-compiled version of std with `rustup target add`\n  + Building std from source with `cargo build -Z build-std`\n  + Using `#![no_std]` at the crate root, so you won't need `std` in the first\n    place.\n- You are developing the compiler itself and haven't built libstd from source.\n  You can usually build it with `x.py build library/std`. More information\n  about x.py is available in the [rustc-dev-guide].\n\n[rustc-dev-guide]: https://rustc-dev-guide.rust-lang.org/building/how-to-build-and-run.html#building-the-compiler\n"
                },
                "level": "error",
                "message": "can't find crate for `std`",
                "spans": [
                  {
                    "byte_end": 3951,
                    "byte_start": 3925,
                    "column_end": 27,
                    "column_start": 1,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\src\\lib.rs",
                    "is_primary": true,
                    "label": "can't find crate",
                    "line_end": 116,
                    "line_start": 116,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 27,
                        "highlight_start": 1,
                        "text": "extern crate std as alloc;"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#slab@0.4.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "slab",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error: cannot find macro `debug_assert_eq` in this scope\n    --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\src\\lib.rs:1538:9\n     |\n1538 |         debug_assert_eq!(self.len, 0);\n     |         ^^^^^^^^^^^^^^^\n     |\nhelp: consider importing this macro\n     |\n121  + use core::debug_assert_eq;\n     |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this macro",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 3991,
                        "byte_start": 3991,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 121,
                        "line_start": 121,
                        "suggested_replacement": "use core::debug_assert_eq;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use alloc::vec::{self, Vec};"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": null,
                "level": "error",
                "message": "cannot find macro `debug_assert_eq` in this scope",
                "spans": [
                  {
                    "byte_end": 45323,
                    "byte_start": 45308,
                    "column_end": 24,
                    "column_start": 9,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\src\\lib.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 1538,
                    "line_start": 1538,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 24,
                        "highlight_start": 9,
                        "text": "        debug_assert_eq!(self.len, 0);"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#slab@0.4.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "slab",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error: cannot find macro `debug_assert_eq` in this scope\n    --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\src\\lib.rs:1520:9\n     |\n1520 |         debug_assert_eq!(self.len, 0);\n     |         ^^^^^^^^^^^^^^^\n     |\nhelp: consider importing this macro\n     |\n121  + use core::debug_assert_eq;\n     |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this macro",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 3991,
                        "byte_start": 3991,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 121,
                        "line_start": 121,
                        "suggested_replacement": "use core::debug_assert_eq;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use alloc::vec::{self, Vec};"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": null,
                "level": "error",
                "message": "cannot find macro `debug_assert_eq` in this scope",
                "spans": [
                  {
                    "byte_end": 44876,
                    "byte_start": 44861,
                    "column_end": 24,
                    "column_start": 9,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\src\\lib.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 1520,
                    "line_start": 1520,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 24,
                        "highlight_start": 9,
                        "text": "        debug_assert_eq!(self.len, 0);"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#slab@0.4.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "slab",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error: cannot find macro `debug_assert_eq` in this scope\n    --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\src\\lib.rs:1494:9\n     |\n1494 |         debug_assert_eq!(self.len, 0);\n     |         ^^^^^^^^^^^^^^^\n     |\nhelp: consider importing this macro\n     |\n121  + use core::debug_assert_eq;\n     |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this macro",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 3991,
                        "byte_start": 3991,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 121,
                        "line_start": 121,
                        "suggested_replacement": "use core::debug_assert_eq;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use alloc::vec::{self, Vec};"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": null,
                "level": "error",
                "message": "cannot find macro `debug_assert_eq` in this scope",
                "spans": [
                  {
                    "byte_end": 44368,
                    "byte_start": 44353,
                    "column_end": 24,
                    "column_start": 9,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\src\\lib.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 1494,
                    "line_start": 1494,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 24,
                        "highlight_start": 9,
                        "text": "        debug_assert_eq!(self.len, 0);"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#slab@0.4.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "slab",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error: cannot find macro `debug_assert_eq` in this scope\n    --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\src\\lib.rs:1476:9\n     |\n1476 |         debug_assert_eq!(self.len, 0);\n     |         ^^^^^^^^^^^^^^^\n     |\nhelp: consider importing this macro\n     |\n121  + use core::debug_assert_eq;\n     |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this macro",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 3991,
                        "byte_start": 3991,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 121,
                        "line_start": 121,
                        "suggested_replacement": "use core::debug_assert_eq;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use alloc::vec::{self, Vec};"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": null,
                "level": "error",
                "message": "cannot find macro `debug_assert_eq` in this scope",
                "spans": [
                  {
                    "byte_end": 43894,
                    "byte_start": 43879,
                    "column_end": 24,
                    "column_start": 9,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\src\\lib.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 1476,
                    "line_start": 1476,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 24,
                        "highlight_start": 9,
                        "text": "        debug_assert_eq!(self.len, 0);"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#slab@0.4.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "slab",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error: cannot find macro `debug_assert_eq` in this scope\n    --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\src\\lib.rs:1450:9\n     |\n1450 |         debug_assert_eq!(self.len, 0);\n     |         ^^^^^^^^^^^^^^^\n     |\nhelp: consider importing this macro\n     |\n121  + use core::debug_assert_eq;\n     |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this macro",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 3991,
                        "byte_start": 3991,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 121,
                        "line_start": 121,
                        "suggested_replacement": "use core::debug_assert_eq;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use alloc::vec::{self, Vec};"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": null,
                "level": "error",
                "message": "cannot find macro `debug_assert_eq` in this scope",
                "spans": [
                  {
                    "byte_end": 43342,
                    "byte_start": 43327,
                    "column_end": 24,
                    "column_start": 9,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\src\\lib.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 1450,
                    "line_start": 1450,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 24,
                        "highlight_start": 9,
                        "text": "        debug_assert_eq!(self.len, 0);"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#slab@0.4.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "slab",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error: cannot find macro `debug_assert_eq` in this scope\n    --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\src\\lib.rs:1432:9\n     |\n1432 |         debug_assert_eq!(self.len, 0);\n     |         ^^^^^^^^^^^^^^^\n     |\nhelp: consider importing this macro\n     |\n121  + use core::debug_assert_eq;\n     |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this macro",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 3991,
                        "byte_start": 3991,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 121,
                        "line_start": 121,
                        "suggested_replacement": "use core::debug_assert_eq;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use alloc::vec::{self, Vec};"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": null,
                "level": "error",
                "message": "cannot find macro `debug_assert_eq` in this scope",
                "spans": [
                  {
                    "byte_end": 42875,
                    "byte_start": 42860,
                    "column_end": 24,
                    "column_start": 9,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\src\\lib.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 1432,
                    "line_start": 1432,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 24,
                        "highlight_start": 9,
                        "text": "        debug_assert_eq!(self.len, 0);"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#version_check@0.1.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.1.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "version_check",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.1.5\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0786]: found invalid metadata files for crate `core` which `std` depends on\n  |\n  = note: failed to mmap file 'C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib\\rustlib\\x86_64-pc-windows-msvc\\lib\\libcore-50d17f87cee49b53.rlib': The paging file is too small for this operation to complete. (os error 1455)\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "failed to mmap file 'C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib\\rustlib\\x86_64-pc-windows-msvc\\lib\\libcore-50d17f87cee49b53.rlib': The paging file is too small for this operation to complete. (os error 1455)",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "E0786",
                  "explanation": "A metadata file was invalid.\n\nErroneous code example:\n\n```ignore (needs extern files)\nuse ::foo; // error: found invalid metadata files for crate `foo`\n```\n\nWhen loading crates, each crate must have a valid metadata file.\nInvalid files could be caused by filesystem corruption,\nan IO error while reading the file, or (rarely) a bug in the compiler itself.\n\nConsider deleting the file and recreating it,\nor reporting a bug against the compiler.\n"
                },
                "level": "error",
                "message": "found invalid metadata files for crate `core` which `std` depends on",
                "spans": [
                  {
                    "byte_end": 0,
                    "byte_start": 0,
                    "column_end": 1,
                    "column_start": 1,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.1.5\\src\\lib.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 1,
                    "line_start": 1,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": []
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#slab@0.4.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "slab",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error: cannot find macro `debug_assert_eq` in this scope\n    --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\src\\lib.rs:1406:9\n     |\n1406 |         debug_assert_eq!(self.len, 0);\n     |         ^^^^^^^^^^^^^^^\n     |\nhelp: consider importing this macro\n     |\n121  + use core::debug_assert_eq;\n     |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this macro",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 3991,
                        "byte_start": 3991,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 121,
                        "line_start": 121,
                        "suggested_replacement": "use core::debug_assert_eq;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use alloc::vec::{self, Vec};"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": null,
                "level": "error",
                "message": "cannot find macro `debug_assert_eq` in this scope",
                "spans": [
                  {
                    "byte_end": 42337,
                    "byte_start": 42322,
                    "column_end": 24,
                    "column_start": 9,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\src\\lib.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 1406,
                    "line_start": 1406,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 24,
                        "highlight_start": 9,
                        "text": "        debug_assert_eq!(self.len, 0);"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#slab@0.4.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "slab",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error: cannot find macro `debug_assert_eq` in this scope\n    --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\src\\lib.rs:1388:9\n     |\n1388 |         debug_assert_eq!(self.len, 0);\n     |         ^^^^^^^^^^^^^^^\n     |\nhelp: consider importing this macro\n     |\n121  + use core::debug_assert_eq;\n     |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this macro",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 3991,
                        "byte_start": 3991,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 121,
                        "line_start": 121,
                        "suggested_replacement": "use core::debug_assert_eq;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use alloc::vec::{self, Vec};"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": null,
                "level": "error",
                "message": "cannot find macro `debug_assert_eq` in this scope",
                "spans": [
                  {
                    "byte_end": 41875,
                    "byte_start": 41860,
                    "column_end": 24,
                    "column_start": 9,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\src\\lib.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 1388,
                    "line_start": 1388,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 24,
                        "highlight_start": 9,
                        "text": "        debug_assert_eq!(self.len, 0);"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#slab@0.4.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "slab",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error: cannot find macro `unreachable` in this scope\n    --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\src\\lib.rs:1345:18\n     |\n1345 |             _ => unreachable!(),\n     |                  ^^^^^^^^^^^\n     |\nhelp: consider importing this macro\n     |\n121  + use core::unreachable;\n     |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this macro",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 3991,
                        "byte_start": 3991,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 121,
                        "line_start": 121,
                        "suggested_replacement": "use core::unreachable;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use alloc::vec::{self, Vec};"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": null,
                "level": "error",
                "message": "cannot find macro `unreachable` in this scope",
                "spans": [
                  {
                    "byte_end": 40915,
                    "byte_start": 40904,
                    "column_end": 29,
                    "column_start": 18,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\src\\lib.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 1345,
                    "line_start": 1345,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 29,
                        "highlight_start": 18,
                        "text": "            _ => unreachable!(),"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#slab@0.4.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "slab",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error: cannot find macro `unreachable` in this scope\n    --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\src\\lib.rs:1253:13\n     |\n1253 |             unreachable!()\n     |             ^^^^^^^^^^^\n     |\nhelp: consider importing this macro\n     |\n121  + use core::unreachable;\n     |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this macro",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 3991,
                        "byte_start": 3991,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 121,
                        "line_start": 121,
                        "suggested_replacement": "use core::unreachable;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use alloc::vec::{self, Vec};"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": null,
                "level": "error",
                "message": "cannot find macro `unreachable` in this scope",
                "spans": [
                  {
                    "byte_end": 38741,
                    "byte_start": 38730,
                    "column_end": 24,
                    "column_start": 13,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\src\\lib.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 1253,
                    "line_start": 1253,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 24,
                        "highlight_start": 13,
                        "text": "            unreachable!()"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#slab@0.4.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "slab",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error: cannot find macro `unreachable` in this scope\n    --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\src\\lib.rs:1250:22\n     |\n1250 |                 _ => unreachable!(),\n     |                      ^^^^^^^^^^^\n     |\nhelp: consider importing this macro\n     |\n121  + use core::unreachable;\n     |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this macro",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 3991,
                        "byte_start": 3991,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 121,
                        "line_start": 121,
                        "suggested_replacement": "use core::unreachable;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use alloc::vec::{self, Vec};"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": null,
                "level": "error",
                "message": "cannot find macro `unreachable` in this scope",
                "spans": [
                  {
                    "byte_end": 38682,
                    "byte_start": 38671,
                    "column_end": 33,
                    "column_start": 22,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\src\\lib.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 1250,
                    "line_start": 1250,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 33,
                        "highlight_start": 22,
                        "text": "                _ => unreachable!(),"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#slab@0.4.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "slab",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error: cannot find macro `panic` in this scope\n    --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\src\\lib.rs:1141:18\n     |\n1141 |             _ => panic!(\"invalid key\"),\n     |                  ^^^^^\n     |\nhelp: consider importing this macro\n     |\n121  + use core::panic;\n     |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this macro",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 3991,
                        "byte_start": 3991,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 121,
                        "line_start": 121,
                        "suggested_replacement": "use core::panic;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use alloc::vec::{self, Vec};"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": null,
                "level": "error",
                "message": "cannot find macro `panic` in this scope",
                "spans": [
                  {
                    "byte_end": 35118,
                    "byte_start": 35113,
                    "column_end": 23,
                    "column_start": 18,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\src\\lib.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 1141,
                    "line_start": 1141,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 23,
                        "highlight_start": 18,
                        "text": "            _ => panic!(\"invalid key\"),"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#slab@0.4.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "slab",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error: cannot find macro `panic` in this scope\n    --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\src\\lib.rs:1132:18\n     |\n1132 |             _ => panic!(\"invalid key\"),\n     |                  ^^^^^\n     |\nhelp: consider importing this macro\n     |\n121  + use core::panic;\n     |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this macro",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 3991,
                        "byte_start": 3991,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 121,
                        "line_start": 121,
                        "suggested_replacement": "use core::panic;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use alloc::vec::{self, Vec};"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": null,
                "level": "error",
                "message": "cannot find macro `panic` in this scope",
                "spans": [
                  {
                    "byte_end": 34866,
                    "byte_start": 34861,
                    "column_end": 23,
                    "column_start": 18,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\src\\lib.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 1132,
                    "line_start": 1132,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 23,
                        "highlight_start": 18,
                        "text": "            _ => panic!(\"invalid key\"),"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#slab@0.4.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "slab",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error: cannot find macro `unreachable` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\src\\lib.rs:959:22\n    |\n959 |                 _ => unreachable!(),\n    |                      ^^^^^^^^^^^\n    |\nhelp: consider importing this macro\n    |\n121 + use core::unreachable;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this macro",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 3991,
                        "byte_start": 3991,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 121,
                        "line_start": 121,
                        "suggested_replacement": "use core::unreachable;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use alloc::vec::{self, Vec};"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": null,
                "level": "error",
                "message": "cannot find macro `unreachable` in this scope",
                "spans": [
                  {
                    "byte_end": 30211,
                    "byte_start": 30200,
                    "column_end": 33,
                    "column_start": 22,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\src\\lib.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 959,
                    "line_start": 959,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 33,
                        "highlight_start": 22,
                        "text": "                _ => unreachable!(),"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#slab@0.4.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "slab",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error: cannot find macro `panic` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\src\\lib.rs:888:13\n    |\n888 |             panic!(\"The reference points to a value outside this slab\");\n    |             ^^^^^\n    |\nhelp: consider importing this macro\n    |\n121 + use core::panic;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this macro",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 3991,
                        "byte_start": 3991,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 121,
                        "line_start": 121,
                        "suggested_replacement": "use core::panic;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use alloc::vec::{self, Vec};"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": null,
                "level": "error",
                "message": "cannot find macro `panic` in this scope",
                "spans": [
                  {
                    "byte_end": 28086,
                    "byte_start": 28081,
                    "column_end": 18,
                    "column_start": 13,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\src\\lib.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 888,
                    "line_start": 888,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 18,
                        "highlight_start": 13,
                        "text": "            panic!(\"The reference points to a value outside this slab\");"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#slab@0.4.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "slab",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error: cannot find macro `unreachable` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\src\\lib.rs:839:18\n    |\n839 |             _ => unreachable!(),\n    |                  ^^^^^^^^^^^\n    |\nhelp: consider importing this macro\n    |\n121 + use core::unreachable;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this macro",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 3991,
                        "byte_start": 3991,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 121,
                        "line_start": 121,
                        "suggested_replacement": "use core::unreachable;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use alloc::vec::{self, Vec};"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": null,
                "level": "error",
                "message": "cannot find macro `unreachable` in this scope",
                "spans": [
                  {
                    "byte_end": 26394,
                    "byte_start": 26383,
                    "column_end": 29,
                    "column_start": 18,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\src\\lib.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 839,
                    "line_start": 839,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 29,
                        "highlight_start": 18,
                        "text": "            _ => unreachable!(),"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#slab@0.4.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "slab",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error: cannot find macro `unreachable` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\src\\lib.rs:801:18\n    |\n801 |             _ => unreachable!(),\n    |                  ^^^^^^^^^^^\n    |\nhelp: consider importing this macro\n    |\n121 + use core::unreachable;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this macro",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 3991,
                        "byte_start": 3991,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 121,
                        "line_start": 121,
                        "suggested_replacement": "use core::unreachable;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use alloc::vec::{self, Vec};"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": null,
                "level": "error",
                "message": "cannot find macro `unreachable` in this scope",
                "spans": [
                  {
                    "byte_end": 25085,
                    "byte_start": 25074,
                    "column_end": 29,
                    "column_start": 18,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\src\\lib.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 801,
                    "line_start": 801,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 29,
                        "highlight_start": 18,
                        "text": "            _ => unreachable!(),"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#slab@0.4.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "slab",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error: cannot find macro `unreachable` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\src\\lib.rs:769:18\n    |\n769 |             _ => unreachable!(),\n    |                  ^^^^^^^^^^^\n    |\nhelp: consider importing this macro\n    |\n121 + use core::unreachable;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this macro",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 3991,
                        "byte_start": 3991,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 121,
                        "line_start": 121,
                        "suggested_replacement": "use core::unreachable;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use alloc::vec::{self, Vec};"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": null,
                "level": "error",
                "message": "cannot find macro `unreachable` in this scope",
                "spans": [
                  {
                    "byte_end": 24237,
                    "byte_start": 24226,
                    "column_end": 29,
                    "column_start": 18,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\src\\lib.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 769,
                    "line_start": 769,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 29,
                        "highlight_start": 18,
                        "text": "            _ => unreachable!(),"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#slab@0.4.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "slab",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error: cannot find macro `assert` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\src\\lib.rs:721:9\n    |\n721 |         assert!(key1 != key2);\n    |         ^^^^^^\n    |\nhelp: consider importing this macro\n    |\n121 + use core::assert;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this macro",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 3991,
                        "byte_start": 3991,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 121,
                        "line_start": 121,
                        "suggested_replacement": "use core::assert;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use alloc::vec::{self, Vec};"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": null,
                "level": "error",
                "message": "cannot find macro `assert` in this scope",
                "spans": [
                  {
                    "byte_end": 22867,
                    "byte_start": 22861,
                    "column_end": 15,
                    "column_start": 9,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\src\\lib.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 721,
                    "line_start": 721,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 15,
                        "highlight_start": 9,
                        "text": "        assert!(key1 != key2);"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#slab@0.4.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "slab",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error: cannot find attribute `derive` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\src\\lib.rs:210:3\n    |\n210 | #[derive(Clone)]\n    |   ^^^^^^\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": null,
                "level": "error",
                "message": "cannot find attribute `derive` in this scope",
                "spans": [
                  {
                    "byte_end": 5975,
                    "byte_start": 5969,
                    "column_end": 9,
                    "column_start": 3,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\src\\lib.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 210,
                    "line_start": 210,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 9,
                        "highlight_start": 3,
                        "text": "#[derive(Clone)]"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#slab@0.4.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "slab",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error: cannot find attribute `derive` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\src\\lib.rs:171:3\n    |\n171 | #[derive(Debug)]\n    |   ^^^^^^\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": null,
                "level": "error",
                "message": "cannot find attribute `derive` in this scope",
                "spans": [
                  {
                    "byte_end": 5113,
                    "byte_start": 5107,
                    "column_end": 9,
                    "column_start": 3,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\src\\lib.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 171,
                    "line_start": 171,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 9,
                        "highlight_start": 3,
                        "text": "#[derive(Debug)]"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#slab@0.4.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "slab",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error: cannot find attribute `derive` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\src\\lib.rs:130:3\n    |\n130 | #[derive(Clone)]\n    |   ^^^^^^\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": null,
                "level": "error",
                "message": "cannot find attribute `derive` in this scope",
                "spans": [
                  {
                    "byte_end": 4266,
                    "byte_start": 4260,
                    "column_end": 9,
                    "column_start": 3,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\src\\lib.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 130,
                    "line_start": 130,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 9,
                        "highlight_start": 3,
                        "text": "#[derive(Clone)]"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#autocfg@0.1.7",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "autocfg",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-0.1.7\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmppk0ok6_5\\websocket-0.27.1\\target\\debug\\deps\\libautocfg-0abc4324d251eebc.rlib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmppk0ok6_5\\websocket-0.27.1\\target\\debug\\deps\\libautocfg-0abc4324d251eebc.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#semver-parser@0.7.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "semver_parser",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-parser-0.7.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmppk0ok6_5\\websocket-0.27.1\\target\\debug\\deps\\libsemver_parser-89fea9ba182ee591.rlib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmppk0ok6_5\\websocket-0.27.1\\target\\debug\\deps\\libsemver_parser-89fea9ba182ee591.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#num_cpus@1.13.1",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num_cpus-1.13.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "num_cpus",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\num_cpus-1.13.1\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmppk0ok6_5\\websocket-0.27.1\\target\\debug\\deps\\libnum_cpus-2b7de60b592a11b3.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#version_check@0.1.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.1.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "version_check",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.1.5\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0412]: cannot find type `Option` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.1.5\\src\\lib.rs:55:29\n   |\n55 | fn str_to_ymd(ymd: &str) -> Option<u32> {\n   |                             ^^^^^^ not found in this scope\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0412",
                  "explanation": "A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"
                },
                "level": "error",
                "message": "cannot find type `Option` in this scope",
                "spans": [
                  {
                    "byte_end": 1854,
                    "byte_start": 1848,
                    "column_end": 35,
                    "column_start": 29,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.1.5\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 55,
                    "line_start": 55,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 35,
                        "highlight_start": 29,
                        "text": "fn str_to_ymd(ymd: &str) -> Option<u32> {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#version_check@0.1.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.1.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "version_check",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.1.5\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0412]: cannot find type `Vec` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.1.5\\src\\lib.rs:56:14\n   |\n56 |     let ymd: Vec<u32> = ymd.split(\"-\").filter_map(|s| s.parse::<u32>().ok()).collect();\n   |              ^^^ not found in this scope\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0412",
                  "explanation": "A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"
                },
                "level": "error",
                "message": "cannot find type `Vec` in this scope",
                "spans": [
                  {
                    "byte_end": 1878,
                    "byte_start": 1875,
                    "column_end": 17,
                    "column_start": 14,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.1.5\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 56,
                    "line_start": 56,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 17,
                        "highlight_start": 14,
                        "text": "    let ymd: Vec<u32> = ymd.split(\"-\").filter_map(|s| s.parse::<u32>().ok()).collect();"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#version_check@0.1.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.1.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "version_check",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.1.5\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0425]: cannot find value `None` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.1.5\\src\\lib.rs:58:16\n   |\n58 |         return None\n   |                ^^^^ not found in this scope\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0425",
                  "explanation": "An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"
                },
                "level": "error",
                "message": "cannot find value `None` in this scope",
                "spans": [
                  {
                    "byte_end": 1993,
                    "byte_start": 1989,
                    "column_end": 20,
                    "column_start": 16,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.1.5\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 58,
                    "line_start": 58,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 20,
                        "highlight_start": 16,
                        "text": "        return None"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#version_check@0.1.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.1.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "version_check",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.1.5\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0412]: cannot find type `Option` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.1.5\\src\\lib.rs:67:29\n   |\n67 | fn str_to_mmp(mmp: &str) -> Option<u64> {\n   |                             ^^^^^^ not found in this scope\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0412",
                  "explanation": "A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"
                },
                "level": "error",
                "message": "cannot find type `Option` in this scope",
                "spans": [
                  {
                    "byte_end": 2255,
                    "byte_start": 2249,
                    "column_end": 35,
                    "column_start": 29,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.1.5\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 67,
                    "line_start": 67,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 35,
                        "highlight_start": 29,
                        "text": "fn str_to_mmp(mmp: &str) -> Option<u64> {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#version_check@0.1.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.1.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "version_check",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.1.5\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0412]: cannot find type `Vec` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.1.5\\src\\lib.rs:68:18\n   |\n68 |     let mut mmp: Vec<u16> = mmp.split('-')\n   |                  ^^^ not found in this scope\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0412",
                  "explanation": "A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"
                },
                "level": "error",
                "message": "cannot find type `Vec` in this scope",
                "spans": [
                  {
                    "byte_end": 2283,
                    "byte_start": 2280,
                    "column_end": 21,
                    "column_start": 18,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.1.5\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 68,
                    "line_start": 68,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 21,
                        "highlight_start": 18,
                        "text": "    let mut mmp: Vec<u16> = mmp.split('-')"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#version_check@0.1.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.1.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "version_check",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.1.5\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0425]: cannot find value `None` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.1.5\\src\\lib.rs:76:16\n   |\n76 |         return None\n   |                ^^^^ not found in this scope\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0425",
                  "explanation": "An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"
                },
                "level": "error",
                "message": "cannot find value `None` in this scope",
                "spans": [
                  {
                    "byte_end": 2476,
                    "byte_start": 2472,
                    "column_end": 20,
                    "column_start": 16,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.1.5\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 76,
                    "line_start": 76,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 20,
                        "highlight_start": 16,
                        "text": "        return None"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#version_check@0.1.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.1.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "version_check",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.1.5\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0412]: cannot find type `Option` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.1.5\\src\\lib.rs:88:53\n   |\n88 | fn version_and_date_from_rustc_version(s: &str) -> (Option<String>, Option<String>) {\n   |                                                     ^^^^^^ not found in this scope\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0412",
                  "explanation": "A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"
                },
                "level": "error",
                "message": "cannot find type `Option` in this scope",
                "spans": [
                  {
                    "byte_end": 2760,
                    "byte_start": 2754,
                    "column_end": 59,
                    "column_start": 53,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.1.5\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 88,
                    "line_start": 88,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 59,
                        "highlight_start": 53,
                        "text": "fn version_and_date_from_rustc_version(s: &str) -> (Option<String>, Option<String>) {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#version_check@0.1.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.1.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "version_check",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.1.5\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0412]: cannot find type `String` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.1.5\\src\\lib.rs:88:60\n   |\n88 | fn version_and_date_from_rustc_version(s: &str) -> (Option<String>, Option<String>) {\n   |                                                            ^^^^^^ not found in this scope\n   |\nhelp: you might be missing a type parameter\n   |\n88 | fn version_and_date_from_rustc_version<String>(s: &str) -> (Option<String>, Option<String>) {\n   |                                       ++++++++\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "you might be missing a type parameter",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 2740,
                        "byte_start": 2740,
                        "column_end": 39,
                        "column_start": 39,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.1.5\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 88,
                        "line_start": 88,
                        "suggested_replacement": "<String>",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 39,
                            "highlight_start": 39,
                            "text": "fn version_and_date_from_rustc_version(s: &str) -> (Option<String>, Option<String>) {"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0412",
                  "explanation": "A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"
                },
                "level": "error",
                "message": "cannot find type `String` in this scope",
                "spans": [
                  {
                    "byte_end": 2767,
                    "byte_start": 2761,
                    "column_end": 66,
                    "column_start": 60,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.1.5\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 88,
                    "line_start": 88,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 66,
                        "highlight_start": 60,
                        "text": "fn version_and_date_from_rustc_version(s: &str) -> (Option<String>, Option<String>) {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#version_check@0.1.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.1.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "version_check",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.1.5\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0412]: cannot find type `Option` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.1.5\\src\\lib.rs:88:69\n   |\n88 | fn version_and_date_from_rustc_version(s: &str) -> (Option<String>, Option<String>) {\n   |                                                                     ^^^^^^ not found in this scope\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0412",
                  "explanation": "A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"
                },
                "level": "error",
                "message": "cannot find type `Option` in this scope",
                "spans": [
                  {
                    "byte_end": 2776,
                    "byte_start": 2770,
                    "column_end": 75,
                    "column_start": 69,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.1.5\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 88,
                    "line_start": 88,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 75,
                        "highlight_start": 69,
                        "text": "fn version_and_date_from_rustc_version(s: &str) -> (Option<String>, Option<String>) {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#version_check@0.1.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.1.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "version_check",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.1.5\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0412]: cannot find type `String` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.1.5\\src\\lib.rs:88:76\n   |\n88 | fn version_and_date_from_rustc_version(s: &str) -> (Option<String>, Option<String>) {\n   |                                                                            ^^^^^^ not found in this scope\n   |\nhelp: you might be missing a type parameter\n   |\n88 | fn version_and_date_from_rustc_version<String>(s: &str) -> (Option<String>, Option<String>) {\n   |                                       ++++++++\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "you might be missing a type parameter",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 2740,
                        "byte_start": 2740,
                        "column_end": 39,
                        "column_start": 39,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.1.5\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 88,
                        "line_start": 88,
                        "suggested_replacement": "<String>",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 39,
                            "highlight_start": 39,
                            "text": "fn version_and_date_from_rustc_version(s: &str) -> (Option<String>, Option<String>) {"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0412",
                  "explanation": "A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"
                },
                "level": "error",
                "message": "cannot find type `String` in this scope",
                "spans": [
                  {
                    "byte_end": 2783,
                    "byte_start": 2777,
                    "column_end": 82,
                    "column_start": 76,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.1.5\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 88,
                    "line_start": 88,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 82,
                        "highlight_start": 76,
                        "text": "fn version_and_date_from_rustc_version(s: &str) -> (Option<String>, Option<String>) {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#version_check@0.1.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.1.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "version_check",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.1.5\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0412]: cannot find type `Option` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.1.5\\src\\lib.rs:97:30\n   |\n97 | fn get_version_and_date() -> Option<(Option<String>, Option<String>)> {\n   |                              ^^^^^^ not found in this scope\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0412",
                  "explanation": "A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"
                },
                "level": "error",
                "message": "cannot find type `Option` in this scope",
                "spans": [
                  {
                    "byte_end": 3158,
                    "byte_start": 3152,
                    "column_end": 36,
                    "column_start": 30,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.1.5\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 97,
                    "line_start": 97,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 36,
                        "highlight_start": 30,
                        "text": "fn get_version_and_date() -> Option<(Option<String>, Option<String>)> {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#version_check@0.1.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.1.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "version_check",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.1.5\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0412]: cannot find type `Option` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.1.5\\src\\lib.rs:97:38\n   |\n97 | fn get_version_and_date() -> Option<(Option<String>, Option<String>)> {\n   |                                      ^^^^^^ not found in this scope\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0412",
                  "explanation": "A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"
                },
                "level": "error",
                "message": "cannot find type `Option` in this scope",
                "spans": [
                  {
                    "byte_end": 3166,
                    "byte_start": 3160,
                    "column_end": 44,
                    "column_start": 38,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.1.5\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 97,
                    "line_start": 97,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 44,
                        "highlight_start": 38,
                        "text": "fn get_version_and_date() -> Option<(Option<String>, Option<String>)> {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#version_check@0.1.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.1.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "version_check",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.1.5\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0412]: cannot find type `String` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.1.5\\src\\lib.rs:97:45\n   |\n97 | fn get_version_and_date() -> Option<(Option<String>, Option<String>)> {\n   |                                             ^^^^^^ not found in this scope\n   |\nhelp: you might be missing a type parameter\n   |\n97 | fn get_version_and_date<String>() -> Option<(Option<String>, Option<String>)> {\n   |                        ++++++++\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "you might be missing a type parameter",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 3146,
                        "byte_start": 3146,
                        "column_end": 24,
                        "column_start": 24,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.1.5\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 97,
                        "line_start": 97,
                        "suggested_replacement": "<String>",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 24,
                            "highlight_start": 24,
                            "text": "fn get_version_and_date() -> Option<(Option<String>, Option<String>)> {"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0412",
                  "explanation": "A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"
                },
                "level": "error",
                "message": "cannot find type `String` in this scope",
                "spans": [
                  {
                    "byte_end": 3173,
                    "byte_start": 3167,
                    "column_end": 51,
                    "column_start": 45,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.1.5\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 97,
                    "line_start": 97,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 51,
                        "highlight_start": 45,
                        "text": "fn get_version_and_date() -> Option<(Option<String>, Option<String>)> {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#version_check@0.1.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.1.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "version_check",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.1.5\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0412]: cannot find type `Option` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.1.5\\src\\lib.rs:97:54\n   |\n97 | fn get_version_and_date() -> Option<(Option<String>, Option<String>)> {\n   |                                                      ^^^^^^ not found in this scope\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0412",
                  "explanation": "A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"
                },
                "level": "error",
                "message": "cannot find type `Option` in this scope",
                "spans": [
                  {
                    "byte_end": 3182,
                    "byte_start": 3176,
                    "column_end": 60,
                    "column_start": 54,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.1.5\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 97,
                    "line_start": 97,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 60,
                        "highlight_start": 54,
                        "text": "fn get_version_and_date() -> Option<(Option<String>, Option<String>)> {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#version_check@0.1.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.1.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "version_check",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.1.5\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0412]: cannot find type `String` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.1.5\\src\\lib.rs:97:61\n   |\n97 | fn get_version_and_date() -> Option<(Option<String>, Option<String>)> {\n   |                                                             ^^^^^^ not found in this scope\n   |\nhelp: you might be missing a type parameter\n   |\n97 | fn get_version_and_date<String>() -> Option<(Option<String>, Option<String>)> {\n   |                        ++++++++\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "you might be missing a type parameter",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 3146,
                        "byte_start": 3146,
                        "column_end": 24,
                        "column_start": 24,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.1.5\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 97,
                        "line_start": 97,
                        "suggested_replacement": "<String>",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 24,
                            "highlight_start": 24,
                            "text": "fn get_version_and_date() -> Option<(Option<String>, Option<String>)> {"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0412",
                  "explanation": "A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"
                },
                "level": "error",
                "message": "cannot find type `String` in this scope",
                "spans": [
                  {
                    "byte_end": 3189,
                    "byte_start": 3183,
                    "column_end": 67,
                    "column_start": 61,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.1.5\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 97,
                    "line_start": 97,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 67,
                        "highlight_start": 61,
                        "text": "fn get_version_and_date() -> Option<(Option<String>, Option<String>)> {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#version_check@0.1.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.1.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "version_check",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.1.5\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0412]: cannot find type `Option` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.1.5\\src\\lib.rs:115:39\n    |\n115 | pub fn is_min_date(min_date: &str) -> Option<(bool, String)> {\n    |                                       ^^^^^^ not found in this scope\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0412",
                  "explanation": "A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"
                },
                "level": "error",
                "message": "cannot find type `Option` in this scope",
                "spans": [
                  {
                    "byte_end": 4042,
                    "byte_start": 4036,
                    "column_end": 45,
                    "column_start": 39,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.1.5\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 115,
                    "line_start": 115,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 45,
                        "highlight_start": 39,
                        "text": "pub fn is_min_date(min_date: &str) -> Option<(bool, String)> {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#version_check@0.1.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.1.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "version_check",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.1.5\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0412]: cannot find type `String` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.1.5\\src\\lib.rs:115:53\n    |\n115 | pub fn is_min_date(min_date: &str) -> Option<(bool, String)> {\n    |                                                     ^^^^^^ not found in this scope\n    |\nhelp: you might be missing a type parameter\n    |\n115 | pub fn is_min_date<String>(min_date: &str) -> Option<(bool, String)> {\n    |                   ++++++++\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "you might be missing a type parameter",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 4016,
                        "byte_start": 4016,
                        "column_end": 19,
                        "column_start": 19,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.1.5\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 115,
                        "line_start": 115,
                        "suggested_replacement": "<String>",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 19,
                            "highlight_start": 19,
                            "text": "pub fn is_min_date(min_date: &str) -> Option<(bool, String)> {"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0412",
                  "explanation": "A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"
                },
                "level": "error",
                "message": "cannot find type `String` in this scope",
                "spans": [
                  {
                    "byte_end": 4056,
                    "byte_start": 4050,
                    "column_end": 59,
                    "column_start": 53,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.1.5\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 115,
                    "line_start": 115,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 59,
                        "highlight_start": 53,
                        "text": "pub fn is_min_date(min_date: &str) -> Option<(bool, String)> {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#version_check@0.1.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.1.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "version_check",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.1.5\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0531]: cannot find tuple struct or tuple variant `Some` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.1.5\\src\\lib.rs:116:12\n    |\n116 |     if let Some((_, Some(actual_date_str))) = get_version_and_date() {\n    |            ^^^^ not found in this scope\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0531",
                  "explanation": "An unknown tuple struct/variant has been used.\n\nErroneous code example:\n\n```compile_fail,E0531\nlet Type(x) = Type(12); // error!\nmatch Bar(12) {\n    Bar(x) => {} // error!\n    _ => {}\n}\n```\n\nIn most cases, it's either a forgotten import or a typo. However, let's look at\nhow you can have such a type:\n\n```edition2018\nstruct Type(u32); // this is a tuple struct\n\nenum Foo {\n    Bar(u32), // this is a tuple variant\n}\n\nuse Foo::*; // To use Foo's variant directly, we need to import them in\n            // the scope.\n```\n\nEither way, it should work fine with our previous code:\n\n```edition2018\nstruct Type(u32);\n\nenum Foo {\n    Bar(u32),\n}\nuse Foo::*;\n\nlet Type(x) = Type(12); // ok!\nmatch Type(12) {\n    Type(x) => {} // ok!\n    _ => {}\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find tuple struct or tuple variant `Some` in this scope",
                "spans": [
                  {
                    "byte_end": 4076,
                    "byte_start": 4072,
                    "column_end": 16,
                    "column_start": 12,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.1.5\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 116,
                    "line_start": 116,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 16,
                        "highlight_start": 12,
                        "text": "    if let Some((_, Some(actual_date_str))) = get_version_and_date() {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#version_check@0.1.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.1.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "version_check",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.1.5\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0531]: cannot find tuple struct or tuple variant `Some` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.1.5\\src\\lib.rs:116:21\n    |\n116 |     if let Some((_, Some(actual_date_str))) = get_version_and_date() {\n    |                     ^^^^ not found in this scope\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0531",
                  "explanation": "An unknown tuple struct/variant has been used.\n\nErroneous code example:\n\n```compile_fail,E0531\nlet Type(x) = Type(12); // error!\nmatch Bar(12) {\n    Bar(x) => {} // error!\n    _ => {}\n}\n```\n\nIn most cases, it's either a forgotten import or a typo. However, let's look at\nhow you can have such a type:\n\n```edition2018\nstruct Type(u32); // this is a tuple struct\n\nenum Foo {\n    Bar(u32), // this is a tuple variant\n}\n\nuse Foo::*; // To use Foo's variant directly, we need to import them in\n            // the scope.\n```\n\nEither way, it should work fine with our previous code:\n\n```edition2018\nstruct Type(u32);\n\nenum Foo {\n    Bar(u32),\n}\nuse Foo::*;\n\nlet Type(x) = Type(12); // ok!\nmatch Type(12) {\n    Type(x) => {} // ok!\n    _ => {}\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find tuple struct or tuple variant `Some` in this scope",
                "spans": [
                  {
                    "byte_end": 4085,
                    "byte_start": 4081,
                    "column_end": 25,
                    "column_start": 21,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.1.5\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 116,
                    "line_start": 116,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 25,
                        "highlight_start": 21,
                        "text": "    if let Some((_, Some(actual_date_str))) = get_version_and_date() {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#version_check@0.1.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.1.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "version_check",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.1.5\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0425]: cannot find value `None` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.1.5\\src\\lib.rs:121:9\n    |\n121 |         None\n    |         ^^^^ not found in this scope\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0425",
                  "explanation": "An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"
                },
                "level": "error",
                "message": "cannot find value `None` in this scope",
                "spans": [
                  {
                    "byte_end": 4339,
                    "byte_start": 4335,
                    "column_end": 13,
                    "column_start": 9,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.1.5\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 121,
                    "line_start": 121,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 13,
                        "highlight_start": 9,
                        "text": "        None"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#version_check@0.1.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.1.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "version_check",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.1.5\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0412]: cannot find type `Option` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.1.5\\src\\lib.rs:135:45\n    |\n135 | pub fn is_min_version(min_version: &str) -> Option<(bool, String)> {\n    |                                             ^^^^^^ not found in this scope\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0412",
                  "explanation": "A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"
                },
                "level": "error",
                "message": "cannot find type `Option` in this scope",
                "spans": [
                  {
                    "byte_end": 4911,
                    "byte_start": 4905,
                    "column_end": 51,
                    "column_start": 45,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.1.5\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 135,
                    "line_start": 135,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 51,
                        "highlight_start": 45,
                        "text": "pub fn is_min_version(min_version: &str) -> Option<(bool, String)> {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#version_check@0.1.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.1.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "version_check",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.1.5\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0412]: cannot find type `String` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.1.5\\src\\lib.rs:135:59\n    |\n135 | pub fn is_min_version(min_version: &str) -> Option<(bool, String)> {\n    |                                                           ^^^^^^ not found in this scope\n    |\nhelp: you might be missing a type parameter\n    |\n135 | pub fn is_min_version<String>(min_version: &str) -> Option<(bool, String)> {\n    |                      ++++++++\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "you might be missing a type parameter",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 4882,
                        "byte_start": 4882,
                        "column_end": 22,
                        "column_start": 22,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.1.5\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 135,
                        "line_start": 135,
                        "suggested_replacement": "<String>",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 22,
                            "highlight_start": 22,
                            "text": "pub fn is_min_version(min_version: &str) -> Option<(bool, String)> {"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0412",
                  "explanation": "A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"
                },
                "level": "error",
                "message": "cannot find type `String` in this scope",
                "spans": [
                  {
                    "byte_end": 4925,
                    "byte_start": 4919,
                    "column_end": 65,
                    "column_start": 59,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.1.5\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 135,
                    "line_start": 135,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 65,
                        "highlight_start": 59,
                        "text": "pub fn is_min_version(min_version: &str) -> Option<(bool, String)> {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#version_check@0.1.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.1.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "version_check",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.1.5\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0531]: cannot find tuple struct or tuple variant `Some` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.1.5\\src\\lib.rs:136:12\n    |\n136 |     if let Some((Some(actual_version_str), _)) = get_version_and_date() {\n    |            ^^^^ not found in this scope\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0531",
                  "explanation": "An unknown tuple struct/variant has been used.\n\nErroneous code example:\n\n```compile_fail,E0531\nlet Type(x) = Type(12); // error!\nmatch Bar(12) {\n    Bar(x) => {} // error!\n    _ => {}\n}\n```\n\nIn most cases, it's either a forgotten import or a typo. However, let's look at\nhow you can have such a type:\n\n```edition2018\nstruct Type(u32); // this is a tuple struct\n\nenum Foo {\n    Bar(u32), // this is a tuple variant\n}\n\nuse Foo::*; // To use Foo's variant directly, we need to import them in\n            // the scope.\n```\n\nEither way, it should work fine with our previous code:\n\n```edition2018\nstruct Type(u32);\n\nenum Foo {\n    Bar(u32),\n}\nuse Foo::*;\n\nlet Type(x) = Type(12); // ok!\nmatch Type(12) {\n    Type(x) => {} // ok!\n    _ => {}\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find tuple struct or tuple variant `Some` in this scope",
                "spans": [
                  {
                    "byte_end": 4945,
                    "byte_start": 4941,
                    "column_end": 16,
                    "column_start": 12,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.1.5\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 136,
                    "line_start": 136,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 16,
                        "highlight_start": 12,
                        "text": "    if let Some((Some(actual_version_str), _)) = get_version_and_date() {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#version_check@0.1.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.1.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "version_check",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.1.5\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0531]: cannot find tuple struct or tuple variant `Some` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.1.5\\src\\lib.rs:136:18\n    |\n136 |     if let Some((Some(actual_version_str), _)) = get_version_and_date() {\n    |                  ^^^^ not found in this scope\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0531",
                  "explanation": "An unknown tuple struct/variant has been used.\n\nErroneous code example:\n\n```compile_fail,E0531\nlet Type(x) = Type(12); // error!\nmatch Bar(12) {\n    Bar(x) => {} // error!\n    _ => {}\n}\n```\n\nIn most cases, it's either a forgotten import or a typo. However, let's look at\nhow you can have such a type:\n\n```edition2018\nstruct Type(u32); // this is a tuple struct\n\nenum Foo {\n    Bar(u32), // this is a tuple variant\n}\n\nuse Foo::*; // To use Foo's variant directly, we need to import them in\n            // the scope.\n```\n\nEither way, it should work fine with our previous code:\n\n```edition2018\nstruct Type(u32);\n\nenum Foo {\n    Bar(u32),\n}\nuse Foo::*;\n\nlet Type(x) = Type(12); // ok!\nmatch Type(12) {\n    Type(x) => {} // ok!\n    _ => {}\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find tuple struct or tuple variant `Some` in this scope",
                "spans": [
                  {
                    "byte_end": 4951,
                    "byte_start": 4947,
                    "column_end": 22,
                    "column_start": 18,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.1.5\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 136,
                    "line_start": 136,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 22,
                        "highlight_start": 18,
                        "text": "    if let Some((Some(actual_version_str), _)) = get_version_and_date() {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#version_check@0.1.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.1.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "version_check",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.1.5\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0425]: cannot find value `None` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.1.5\\src\\lib.rs:141:9\n    |\n141 |         None\n    |         ^^^^ not found in this scope\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0425",
                  "explanation": "An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"
                },
                "level": "error",
                "message": "cannot find value `None` in this scope",
                "spans": [
                  {
                    "byte_end": 5220,
                    "byte_start": 5216,
                    "column_end": 13,
                    "column_start": 9,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.1.5\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 141,
                    "line_start": 141,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 13,
                        "highlight_start": 9,
                        "text": "        None"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#version_check@0.1.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.1.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "version_check",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.1.5\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0412]: cannot find type `Option` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.1.5\\src\\lib.rs:145:41\n    |\n145 | fn version_channel_is(channel: &str) -> Option<bool> {\n    |                                         ^^^^^^ not found in this scope\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0412",
                  "explanation": "A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"
                },
                "level": "error",
                "message": "cannot find type `Option` in this scope",
                "spans": [
                  {
                    "byte_end": 5276,
                    "byte_start": 5270,
                    "column_end": 47,
                    "column_start": 41,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.1.5\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 145,
                    "line_start": 145,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 47,
                        "highlight_start": 41,
                        "text": "fn version_channel_is(channel: &str) -> Option<bool> {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#version_check@0.1.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.1.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "version_check",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.1.5\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0412]: cannot find type `Option` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.1.5\\src\\lib.rs:157:24\n    |\n157 | pub fn is_nightly() -> Option<bool> {\n    |                        ^^^^^^ not found in this scope\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0412",
                  "explanation": "A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"
                },
                "level": "error",
                "message": "cannot find type `Option` in this scope",
                "spans": [
                  {
                    "byte_end": 5725,
                    "byte_start": 5719,
                    "column_end": 30,
                    "column_start": 24,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.1.5\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 157,
                    "line_start": 157,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 30,
                        "highlight_start": 24,
                        "text": "pub fn is_nightly() -> Option<bool> {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#version_check@0.1.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.1.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "version_check",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.1.5\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0412]: cannot find type `Option` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.1.5\\src\\lib.rs:166:21\n    |\n166 | pub fn is_beta() -> Option<bool> {\n    |                     ^^^^^^ not found in this scope\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0412",
                  "explanation": "A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"
                },
                "level": "error",
                "message": "cannot find type `Option` in this scope",
                "spans": [
                  {
                    "byte_end": 6051,
                    "byte_start": 6045,
                    "column_end": 27,
                    "column_start": 21,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.1.5\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 166,
                    "line_start": 166,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 27,
                        "highlight_start": 21,
                        "text": "pub fn is_beta() -> Option<bool> {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#version_check@0.1.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.1.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "version_check",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.1.5\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0412]: cannot find type `Option` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.1.5\\src\\lib.rs:175:20\n    |\n175 | pub fn is_dev() -> Option<bool> {\n    |                    ^^^^^^ not found in this scope\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0412",
                  "explanation": "A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"
                },
                "level": "error",
                "message": "cannot find type `Option` in this scope",
                "spans": [
                  {
                    "byte_end": 6371,
                    "byte_start": 6365,
                    "column_end": 26,
                    "column_start": 20,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.1.5\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 175,
                    "line_start": 175,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 26,
                        "highlight_start": 20,
                        "text": "pub fn is_dev() -> Option<bool> {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#version_check@0.1.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.1.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "version_check",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.1.5\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0412]: cannot find type `Option` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.1.5\\src\\lib.rs:185:31\n    |\n185 | pub fn supports_features() -> Option<bool> {\n    |                               ^^^^^^ not found in this scope\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0412",
                  "explanation": "A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"
                },
                "level": "error",
                "message": "cannot find type `Option` in this scope",
                "spans": [
                  {
                    "byte_end": 6768,
                    "byte_start": 6762,
                    "column_end": 37,
                    "column_start": 31,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.1.5\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 185,
                    "line_start": 185,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 37,
                        "highlight_start": 31,
                        "text": "pub fn supports_features() -> Option<bool> {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#version_check@0.1.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.1.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "version_check",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.1.5\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0531]: cannot find tuple struct or tuple variant `Some` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.1.5\\src\\lib.rs:187:11\n    |\n187 |         b@Some(true) => b,\n    |           ^^^^ not found in this scope\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0531",
                  "explanation": "An unknown tuple struct/variant has been used.\n\nErroneous code example:\n\n```compile_fail,E0531\nlet Type(x) = Type(12); // error!\nmatch Bar(12) {\n    Bar(x) => {} // error!\n    _ => {}\n}\n```\n\nIn most cases, it's either a forgotten import or a typo. However, let's look at\nhow you can have such a type:\n\n```edition2018\nstruct Type(u32); // this is a tuple struct\n\nenum Foo {\n    Bar(u32), // this is a tuple variant\n}\n\nuse Foo::*; // To use Foo's variant directly, we need to import them in\n            // the scope.\n```\n\nEither way, it should work fine with our previous code:\n\n```edition2018\nstruct Type(u32);\n\nenum Foo {\n    Bar(u32),\n}\nuse Foo::*;\n\nlet Type(x) = Type(12); // ok!\nmatch Type(12) {\n    Type(x) => {} // ok!\n    _ => {}\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find tuple struct or tuple variant `Some` in this scope",
                "spans": [
                  {
                    "byte_end": 6816,
                    "byte_start": 6812,
                    "column_end": 15,
                    "column_start": 11,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.1.5\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 187,
                    "line_start": 187,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 15,
                        "highlight_start": 11,
                        "text": "        b@Some(true) => b,"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#kernel32-sys@0.2.2",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\kernel32-sys-0.2.2\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\kernel32-sys-0.2.2\\build.rs",
                "edition": "2015",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmppk0ok6_5\\websocket-0.27.1\\target\\debug\\build\\kernel32-sys-03ef0eff97ced5d6\\build-script-build.exe",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmppk0ok6_5\\websocket-0.27.1\\target\\debug\\build\\kernel32-sys-03ef0eff97ced5d6\\build_script_build.pdb"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#crossbeam-utils@0.7.2",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\crossbeam-utils-0.7.2\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\crossbeam-utils-0.7.2\\build.rs",
                "edition": "2015",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "lazy_static",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmppk0ok6_5\\websocket-0.27.1\\target\\debug\\build\\crossbeam-utils-ed20393bf9062d25\\build-script-build.exe",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmppk0ok6_5\\websocket-0.27.1\\target\\debug\\build\\crossbeam-utils-ed20393bf9062d25\\build_script_build.pdb"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#ws2_32-sys@0.2.1",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\ws2_32-sys-0.2.1\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\ws2_32-sys-0.2.1\\build.rs",
                "edition": "2015",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmppk0ok6_5\\websocket-0.27.1\\target\\debug\\build\\ws2_32-sys-2ae5bf4b3b1c8199\\build-script-build.exe",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmppk0ok6_5\\websocket-0.27.1\\target\\debug\\build\\ws2_32-sys-2ae5bf4b3b1c8199\\build_script_build.pdb"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#version_check@0.1.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.1.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "version_check",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.1.5\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0599]: no method named `filter_map` found for struct `core::str::Split` in the current scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.1.5\\src\\lib.rs:56:40\n    |\n56  |     let ymd: Vec<u32> = ymd.split(\"-\").filter_map(|s| s.parse::<u32>().ok()).collect();\n    |                                        ^^^^^^^^^^\n    |\n   ::: C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\iter\\traits\\iterator.rs:911:8\n    |\n911 |     fn filter_map<B, F>(self, f: F) -> FilterMap<Self, F>\n    |        ---------- the method is available for `core::str::Split<'_, &str>` here\n    |\n    = help: items from traits can only be used if the trait is in scope\nhelp: trait `Iterator` which provides `filter_map` is implemented but not in scope; perhaps you want to import it\n    |\n51  + use core::iter::Iterator;\n    |\nhelp: there is a method `filter` with a similar name\n    |\n56  -     let ymd: Vec<u32> = ymd.split(\"-\").filter_map(|s| s.parse::<u32>().ok()).collect();\n56  +     let ymd: Vec<u32> = ymd.split(\"-\").filter(|s| s.parse::<u32>().ok()).collect();\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "items from traits can only be used if the trait is in scope",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "trait `Iterator` which provides `filter_map` is implemented but not in scope; perhaps you want to import it",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 1708,
                        "byte_start": 1708,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.1.5\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 51,
                        "line_start": 51,
                        "suggested_replacement": "use core::iter::Iterator;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use std::env;"
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "there is a method `filter` with a similar name",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 1911,
                        "byte_start": 1901,
                        "column_end": 50,
                        "column_start": 40,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.1.5\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 56,
                        "line_start": 56,
                        "suggested_replacement": "filter",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 50,
                            "highlight_start": 40,
                            "text": "    let ymd: Vec<u32> = ymd.split(\"-\").filter_map(|s| s.parse::<u32>().ok()).collect();"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0599",
                  "explanation": "This error occurs when a method is used on a type which doesn't implement it:\n\nErroneous code example:\n\n```compile_fail,E0599\nstruct Mouth;\n\nlet x = Mouth;\nx.chocolate(); // error: no method named `chocolate` found for type `Mouth`\n               //        in the current scope\n```\n\nIn this case, you need to implement the `chocolate` method to fix the error:\n\n```\nstruct Mouth;\n\nimpl Mouth {\n    fn chocolate(&self) { // We implement the `chocolate` method here.\n        println!(\"Hmmm! I love chocolate!\");\n    }\n}\n\nlet x = Mouth;\nx.chocolate(); // ok!\n```\n"
                },
                "level": "error",
                "message": "no method named `filter_map` found for struct `core::str::Split` in the current scope",
                "spans": [
                  {
                    "byte_end": 31070,
                    "byte_start": 31060,
                    "column_end": 18,
                    "column_start": 8,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\iter\\traits\\iterator.rs",
                    "is_primary": false,
                    "label": "the method is available for `core::str::Split<'_, &str>` here",
                    "line_end": 911,
                    "line_start": 911,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 18,
                        "highlight_start": 8,
                        "text": "    fn filter_map<B, F>(self, f: F) -> FilterMap<Self, F>"
                      }
                    ]
                  },
                  {
                    "byte_end": 1911,
                    "byte_start": 1901,
                    "column_end": 50,
                    "column_start": 40,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.1.5\\src\\lib.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 56,
                    "line_start": 56,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 50,
                        "highlight_start": 40,
                        "text": "    let ymd: Vec<u32> = ymd.split(\"-\").filter_map(|s| s.parse::<u32>().ok()).collect();"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#version_check@0.1.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.1.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "version_check",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.1.5\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0425]: cannot find function, tuple struct or tuple variant `Some` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.1.5\\src\\lib.rs:62:5\n   |\n62 |     Some((y << 9) | (m << 5) | d)\n   |     ^^^^ not found in this scope\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0425",
                  "explanation": "An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"
                },
                "level": "error",
                "message": "cannot find function, tuple struct or tuple variant `Some` in this scope",
                "spans": [
                  {
                    "byte_end": 2055,
                    "byte_start": 2051,
                    "column_end": 9,
                    "column_start": 5,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.1.5\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 62,
                    "line_start": 62,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 9,
                        "highlight_start": 5,
                        "text": "    Some((y << 9) | (m << 5) | d)"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#version_check@0.1.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.1.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "version_check",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.1.5\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0599]: no method named `nth` found for struct `core::str::Split` in the current scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.1.5\\src\\lib.rs:69:10\n    |\n68  |       let mut mmp: Vec<u16> = mmp.split('-')\n    |  _____________________________-\n69  | |         .nth(0)\n    | |         -^^^ method not found in `Split<'_, char>`\n    | |_________|\n    |\n    |\n   ::: C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\iter\\traits\\iterator.rs:347:8\n    |\n347 |       fn nth(&mut self, n: usize) -> Option<Self::Item> {\n    |          --- the method is available for `core::str::Split<'_, char>` here\n    |\n    = help: items from traits can only be used if the trait is in scope\nhelp: trait `Iterator` which provides `nth` is implemented but not in scope; perhaps you want to import it\n    |\n51  + use core::iter::Iterator;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "items from traits can only be used if the trait is in scope",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "trait `Iterator` which provides `nth` is implemented but not in scope; perhaps you want to import it",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 1708,
                        "byte_start": 1708,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.1.5\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 51,
                        "line_start": 51,
                        "suggested_replacement": "use core::iter::Iterator;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use std::env;"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0599",
                  "explanation": "This error occurs when a method is used on a type which doesn't implement it:\n\nErroneous code example:\n\n```compile_fail,E0599\nstruct Mouth;\n\nlet x = Mouth;\nx.chocolate(); // error: no method named `chocolate` found for type `Mouth`\n               //        in the current scope\n```\n\nIn this case, you need to implement the `chocolate` method to fix the error:\n\n```\nstruct Mouth;\n\nimpl Mouth {\n    fn chocolate(&self) { // We implement the `chocolate` method here.\n        println!(\"Hmmm! I love chocolate!\");\n    }\n}\n\nlet x = Mouth;\nx.chocolate(); // ok!\n```\n"
                },
                "level": "error",
                "message": "no method named `nth` found for struct `core::str::Split` in the current scope",
                "spans": [
                  {
                    "byte_end": 2315,
                    "byte_start": 2291,
                    "column_end": 10,
                    "column_start": 29,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.1.5\\src\\lib.rs",
                    "is_primary": false,
                    "label": "",
                    "line_end": 69,
                    "line_start": 68,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 43,
                        "highlight_start": 29,
                        "text": "    let mut mmp: Vec<u16> = mmp.split('-')"
                      },
                      {
                        "highlight_end": 10,
                        "highlight_start": 1,
                        "text": "        .nth(0)"
                      }
                    ]
                  },
                  {
                    "byte_end": 2318,
                    "byte_start": 2315,
                    "column_end": 13,
                    "column_start": 10,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.1.5\\src\\lib.rs",
                    "is_primary": true,
                    "label": "method not found in `Split<'_, char>`",
                    "line_end": 69,
                    "line_start": 69,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 13,
                        "highlight_start": 10,
                        "text": "        .nth(0)"
                      }
                    ]
                  },
                  {
                    "byte_end": 11956,
                    "byte_start": 11953,
                    "column_end": 11,
                    "column_start": 8,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\iter\\traits\\iterator.rs",
                    "is_primary": false,
                    "label": "the method is available for `core::str::Split<'_, char>` here",
                    "line_end": 347,
                    "line_start": 347,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 11,
                        "highlight_start": 8,
                        "text": "    fn nth(&mut self, n: usize) -> Option<Self::Item> {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#version_check@0.1.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.1.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "version_check",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.1.5\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0425]: cannot find function, tuple struct or tuple variant `Some` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.1.5\\src\\lib.rs:84:5\n   |\n84 |     Some((maj << 32) | (min << 16) | patch)\n   |     ^^^^ not found in this scope\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0425",
                  "explanation": "An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"
                },
                "level": "error",
                "message": "cannot find function, tuple struct or tuple variant `Some` in this scope",
                "spans": [
                  {
                    "byte_end": 2621,
                    "byte_start": 2617,
                    "column_end": 9,
                    "column_start": 5,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.1.5\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 84,
                    "line_start": 84,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 9,
                        "highlight_start": 5,
                        "text": "    Some((maj << 32) | (min << 16) | patch)"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#version_check@0.1.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.1.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "version_check",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.1.5\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0599]: no method named `last` found for struct `core::str::Lines` in the current scope\n    --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.1.5\\src\\lib.rs:89:31\n     |\n89   |     let last_line = s.lines().last().unwrap_or(s);\n     |                               ^^^^\n     |\n    ::: C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\iter\\traits\\iterator.rs:249:8\n     |\n249  |     fn last(self) -> Option<Self::Item>\n     |        ---- the method is available for `core::str::Lines<'_>` here\n     |\n     = help: items from traits can only be used if the trait is in scope\nhelp: there is a method `lt` with a similar name, but with different arguments\n    --> C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\iter\\traits\\iterator.rs:3830:5\n     |\n3830 | /     fn lt<I>(self, other: I) -> bool\n3831 | |     where\n3832 | |         I: IntoIterator,\n3833 | |         Self::Item: PartialOrd<I::Item>,\n3834 | |         Self: Sized,\n     | |____________________^\nhelp: trait `Iterator` which provides `last` is implemented but not in scope; perhaps you want to import it\n     |\n51   + use core::iter::Iterator;\n     |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "items from traits can only be used if the trait is in scope",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "there is a method `lt` with a similar name, but with different arguments",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 128232,
                        "byte_start": 128103,
                        "column_end": 21,
                        "column_start": 5,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\iter\\traits\\iterator.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 3834,
                        "line_start": 3830,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 37,
                            "highlight_start": 5,
                            "text": "    fn lt<I>(self, other: I) -> bool"
                          },
                          {
                            "highlight_end": 10,
                            "highlight_start": 1,
                            "text": "    where"
                          },
                          {
                            "highlight_end": 25,
                            "highlight_start": 1,
                            "text": "        I: IntoIterator,"
                          },
                          {
                            "highlight_end": 41,
                            "highlight_start": 1,
                            "text": "        Self::Item: PartialOrd<I::Item>,"
                          },
                          {
                            "highlight_end": 21,
                            "highlight_start": 1,
                            "text": "        Self: Sized,"
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "trait `Iterator` which provides `last` is implemented but not in scope; perhaps you want to import it",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 1708,
                        "byte_start": 1708,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.1.5\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 51,
                        "line_start": 51,
                        "suggested_replacement": "use core::iter::Iterator;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use std::env;"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0599",
                  "explanation": "This error occurs when a method is used on a type which doesn't implement it:\n\nErroneous code example:\n\n```compile_fail,E0599\nstruct Mouth;\n\nlet x = Mouth;\nx.chocolate(); // error: no method named `chocolate` found for type `Mouth`\n               //        in the current scope\n```\n\nIn this case, you need to implement the `chocolate` method to fix the error:\n\n```\nstruct Mouth;\n\nimpl Mouth {\n    fn chocolate(&self) { // We implement the `chocolate` method here.\n        println!(\"Hmmm! I love chocolate!\");\n    }\n}\n\nlet x = Mouth;\nx.chocolate(); // ok!\n```\n"
                },
                "level": "error",
                "message": "no method named `last` found for struct `core::str::Lines` in the current scope",
                "spans": [
                  {
                    "byte_end": 8616,
                    "byte_start": 8612,
                    "column_end": 12,
                    "column_start": 8,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\iter\\traits\\iterator.rs",
                    "is_primary": false,
                    "label": "the method is available for `core::str::Lines<'_>` here",
                    "line_end": 249,
                    "line_start": 249,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 12,
                        "highlight_start": 8,
                        "text": "    fn last(self) -> Option<Self::Item>"
                      }
                    ]
                  },
                  {
                    "byte_end": 2822,
                    "byte_start": 2818,
                    "column_end": 35,
                    "column_start": 31,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.1.5\\src\\lib.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 89,
                    "line_start": 89,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 35,
                        "highlight_start": 31,
                        "text": "    let last_line = s.lines().last().unwrap_or(s);"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#version_check@0.1.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.1.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "version_check",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.1.5\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0433]: failed to resolve: use of undeclared type `String`\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.1.5\\src\\lib.rs:101:28\n    |\n101 |         .and_then(|output| String::from_utf8(output.stdout).ok())\n    |                            ^^^^^^ use of undeclared type `String`\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0433",
                  "explanation": "An undeclared crate, module, or type was used.\n\nErroneous code example:\n\n```compile_fail,E0433\nlet map = HashMap::new();\n// error: failed to resolve: use of undeclared type `HashMap`\n```\n\nPlease verify you didn't misspell the type/module's name or that you didn't\nforget to import it:\n\n```\nuse std::collections::HashMap; // HashMap has been imported.\nlet map: HashMap<u32, u32> = HashMap::new(); // So it can be used!\n```\n\nIf you've expected to use a crate name:\n\n```compile_fail\nuse ferris_wheel::BigO;\n// error: failed to resolve: use of undeclared module or unlinked crate\n```\n\nMake sure the crate has been added as a dependency in `Cargo.toml`.\n\nTo use a module from your current crate, add the `crate::` prefix to the path.\n"
                },
                "level": "error",
                "message": "failed to resolve: use of undeclared type `String`",
                "spans": [
                  {
                    "byte_end": 3407,
                    "byte_start": 3401,
                    "column_end": 34,
                    "column_start": 28,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.1.5\\src\\lib.rs",
                    "is_primary": true,
                    "label": "use of undeclared type `String`",
                    "line_end": 101,
                    "line_start": 101,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 34,
                        "highlight_start": 28,
                        "text": "        .and_then(|output| String::from_utf8(output.stdout).ok())"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#version_check@0.1.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.1.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "version_check",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.1.5\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0277]: the size for values of type `str` cannot be known at compilation time\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.1.5\\src\\lib.rs:102:15\n    |\n102 |         .map(|s| version_and_date_from_rustc_version(&s))\n    |               ^ doesn't have a size known at compile-time\n    |\n    = help: the trait `core::marker::Sized` is not implemented for `str`\n    = note: all function arguments must have a statically known size\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "the trait `core::marker::Sized` is not implemented for `str`",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "all function arguments must have a statically known size",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "E0277",
                  "explanation": "You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"
                },
                "level": "error",
                "message": "the size for values of type `str` cannot be known at compilation time",
                "spans": [
                  {
                    "byte_end": 3455,
                    "byte_start": 3454,
                    "column_end": 16,
                    "column_start": 15,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.1.5\\src\\lib.rs",
                    "is_primary": true,
                    "label": "doesn't have a size known at compile-time",
                    "line_end": 102,
                    "line_start": 102,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 16,
                        "highlight_start": 15,
                        "text": "        .map(|s| version_and_date_from_rustc_version(&s))"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#version_check@0.1.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.1.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "version_check",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.1.5\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "Some errors have detailed explanations: E0277, E0412, E0425, E0433, E0531, E0599, E0786.\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": null,
                "level": "failure-note",
                "message": "Some errors have detailed explanations: E0277, E0412, E0425, E0433, E0531, E0599, E0786.",
                "spans": []
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#version_check@0.1.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.1.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "version_check",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.1.5\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "For more information about an error, try `rustc --explain E0277`.\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": null,
                "level": "failure-note",
                "message": "For more information about an error, try `rustc --explain E0277`.",
                "spans": []
              }
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#lock_api@0.3.4",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\lock_api-0.3.4\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "lock_api",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\lock_api-0.3.4\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmppk0ok6_5\\websocket-0.27.1\\target\\debug\\deps\\liblock_api-23211df505036a94.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#libc@0.2.117",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\libc-0.2.117\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\libc-0.2.117\\build.rs",
                "edition": "2015",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmppk0ok6_5\\websocket-0.27.1\\target\\debug\\build\\libc-0094a4db9ebe4959\\build-script-build.exe",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmppk0ok6_5\\websocket-0.27.1\\target\\debug\\build\\libc-0094a4db9ebe4959\\build_script_build.pdb"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#slab@0.4.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "slab",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0405]: cannot find trait `Default` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\src\\lib.rs:143:9\n    |\n143 | impl<T> Default for Slab<T> {\n    |         ^^^^^^^ not found in this scope\n    |\nhelp: consider importing this trait\n    |\n121 + use core::default::Default;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this trait",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 3991,
                        "byte_start": 3991,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 121,
                        "line_start": 121,
                        "suggested_replacement": "use core::default::Default;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use alloc::vec::{self, Vec};"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0405",
                  "explanation": "The code refers to a trait that is not in scope.\n\nErroneous code example:\n\n```compile_fail,E0405\nstruct Foo;\n\nimpl SomeTrait for Foo {} // error: trait `SomeTrait` is not in scope\n```\n\nPlease verify that the name of the trait wasn't misspelled and ensure that it\nwas imported. Example:\n\n```\n# #[cfg(for_demonstration_only)]\n// solution 1:\nuse some_file::SomeTrait;\n\n// solution 2:\ntrait SomeTrait {\n    // some functions\n}\n\nstruct Foo;\n\nimpl SomeTrait for Foo { // ok!\n    // implements functions\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find trait `Default` in this scope",
                "spans": [
                  {
                    "byte_end": 4566,
                    "byte_start": 4559,
                    "column_end": 16,
                    "column_start": 9,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 143,
                    "line_start": 143,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 16,
                        "highlight_start": 9,
                        "text": "impl<T> Default for Slab<T> {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#slab@0.4.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "slab",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0405]: cannot find trait `Clone` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\src\\lib.rs:189:13\n    |\n189 | impl<'a, T> Clone for Iter<'a, T> {\n    |             ^^^^^ not found in this scope\n    |\nhelp: consider importing this trait\n    |\n121 + use core::clone::Clone;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this trait",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 3991,
                        "byte_start": 3991,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 121,
                        "line_start": 121,
                        "suggested_replacement": "use core::clone::Clone;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use alloc::vec::{self, Vec};"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0405",
                  "explanation": "The code refers to a trait that is not in scope.\n\nErroneous code example:\n\n```compile_fail,E0405\nstruct Foo;\n\nimpl SomeTrait for Foo {} // error: trait `SomeTrait` is not in scope\n```\n\nPlease verify that the name of the trait wasn't misspelled and ensure that it\nwas imported. Example:\n\n```\n# #[cfg(for_demonstration_only)]\n// solution 1:\nuse some_file::SomeTrait;\n\n// solution 2:\ntrait SomeTrait {\n    // some functions\n}\n\nstruct Foo;\n\nimpl SomeTrait for Foo { // ok!\n    // implements functions\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find trait `Clone` in this scope",
                "spans": [
                  {
                    "byte_end": 5530,
                    "byte_start": 5525,
                    "column_end": 18,
                    "column_start": 13,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 189,
                    "line_start": 189,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 18,
                        "highlight_start": 13,
                        "text": "impl<'a, T> Clone for Iter<'a, T> {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#slab@0.4.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "slab",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0531]: cannot find tuple struct or tuple variant `Some` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\src\\lib.rs:395:19\n    |\n395 |         while let Some(&Entry::Vacant(_)) = self.entries.last() {\n    |                   ^^^^ not found in this scope\n    |\nhelp: consider importing this tuple variant\n    |\n121 + use core::option::Option::Some;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this tuple variant",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 3991,
                        "byte_start": 3991,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 121,
                        "line_start": 121,
                        "suggested_replacement": "use core::option::Option::Some;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use alloc::vec::{self, Vec};"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0531",
                  "explanation": "An unknown tuple struct/variant has been used.\n\nErroneous code example:\n\n```compile_fail,E0531\nlet Type(x) = Type(12); // error!\nmatch Bar(12) {\n    Bar(x) => {} // error!\n    _ => {}\n}\n```\n\nIn most cases, it's either a forgotten import or a typo. However, let's look at\nhow you can have such a type:\n\n```edition2018\nstruct Type(u32); // this is a tuple struct\n\nenum Foo {\n    Bar(u32), // this is a tuple variant\n}\n\nuse Foo::*; // To use Foo's variant directly, we need to import them in\n            // the scope.\n```\n\nEither way, it should work fine with our previous code:\n\n```edition2018\nstruct Type(u32);\n\nenum Foo {\n    Bar(u32),\n}\nuse Foo::*;\n\nlet Type(x) = Type(12); // ok!\nmatch Type(12) {\n    Type(x) => {} // ok!\n    _ => {}\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find tuple struct or tuple variant `Some` in this scope",
                "spans": [
                  {
                    "byte_end": 12104,
                    "byte_start": 12100,
                    "column_end": 23,
                    "column_start": 19,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 395,
                    "line_start": 395,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 23,
                        "highlight_start": 19,
                        "text": "        while let Some(&Entry::Vacant(_)) = self.entries.last() {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#slab@0.4.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "slab",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0405]: cannot find trait `FnMut` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\src\\lib.rs:480:12\n    |\n480 |         F: FnMut(&mut T, usize, usize) -> bool,\n    |            ^^^^^ not found in this scope\n    |\nhelp: consider importing one of these traits\n    |\n121 + use crate::ops::FnMut;\n    |\n121 + use core::ops::FnMut;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing one of these traits",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 3991,
                        "byte_start": 3991,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 121,
                        "line_start": 121,
                        "suggested_replacement": "use crate::ops::FnMut;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use alloc::vec::{self, Vec};"
                          }
                        ]
                      },
                      {
                        "byte_end": 3991,
                        "byte_start": 3991,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 121,
                        "line_start": 121,
                        "suggested_replacement": "use core::ops::FnMut;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use alloc::vec::{self, Vec};"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0405",
                  "explanation": "The code refers to a trait that is not in scope.\n\nErroneous code example:\n\n```compile_fail,E0405\nstruct Foo;\n\nimpl SomeTrait for Foo {} // error: trait `SomeTrait` is not in scope\n```\n\nPlease verify that the name of the trait wasn't misspelled and ensure that it\nwas imported. Example:\n\n```\n# #[cfg(for_demonstration_only)]\n// solution 1:\nuse some_file::SomeTrait;\n\n// solution 2:\ntrait SomeTrait {\n    // some functions\n}\n\nstruct Foo;\n\nimpl SomeTrait for Foo { // ok!\n    // implements functions\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find trait `FnMut` in this scope",
                "spans": [
                  {
                    "byte_end": 15523,
                    "byte_start": 15518,
                    "column_end": 17,
                    "column_start": 12,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 480,
                    "line_start": 480,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 17,
                        "highlight_start": 12,
                        "text": "        F: FnMut(&mut T, usize, usize) -> bool,"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#slab@0.4.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "slab",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0405]: cannot find trait `Drop` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\src\\lib.rs:487:17\n    |\n487 |         impl<T> Drop for CleanupGuard<'_, T> {\n    |                 ^^^^ not found in this scope\n    |\nhelp: consider importing one of these traits\n    |\n121 + use crate::ops::Drop;\n    |\n121 + use core::ops::Drop;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing one of these traits",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 3991,
                        "byte_start": 3991,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 121,
                        "line_start": 121,
                        "suggested_replacement": "use crate::ops::Drop;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use alloc::vec::{self, Vec};"
                          }
                        ]
                      },
                      {
                        "byte_end": 3991,
                        "byte_start": 3991,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 121,
                        "line_start": 121,
                        "suggested_replacement": "use core::ops::Drop;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use alloc::vec::{self, Vec};"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0405",
                  "explanation": "The code refers to a trait that is not in scope.\n\nErroneous code example:\n\n```compile_fail,E0405\nstruct Foo;\n\nimpl SomeTrait for Foo {} // error: trait `SomeTrait` is not in scope\n```\n\nPlease verify that the name of the trait wasn't misspelled and ensure that it\nwas imported. Example:\n\n```\n# #[cfg(for_demonstration_only)]\n// solution 1:\nuse some_file::SomeTrait;\n\n// solution 2:\ntrait SomeTrait {\n    // some functions\n}\n\nstruct Foo;\n\nimpl SomeTrait for Foo { // ok!\n    // implements functions\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find trait `Drop` in this scope",
                "spans": [
                  {
                    "byte_end": 15777,
                    "byte_start": 15773,
                    "column_end": 21,
                    "column_start": 17,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 487,
                    "line_start": 487,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 21,
                        "highlight_start": 17,
                        "text": "        impl<T> Drop for CleanupGuard<'_, T> {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#slab@0.4.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "slab",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0531]: cannot find tuple struct or tuple variant `Some` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\src\\lib.rs:507:20\n    |\n507 |             if let Some(Entry::Occupied(mut value)) = guard.slab.entries.pop() {\n    |                    ^^^^ not found in this scope\n    |\nhelp: consider importing this tuple variant\n    |\n121 + use core::option::Option::Some;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this tuple variant",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 3991,
                        "byte_start": 3991,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 121,
                        "line_start": 121,
                        "suggested_replacement": "use core::option::Option::Some;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use alloc::vec::{self, Vec};"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0531",
                  "explanation": "An unknown tuple struct/variant has been used.\n\nErroneous code example:\n\n```compile_fail,E0531\nlet Type(x) = Type(12); // error!\nmatch Bar(12) {\n    Bar(x) => {} // error!\n    _ => {}\n}\n```\n\nIn most cases, it's either a forgotten import or a typo. However, let's look at\nhow you can have such a type:\n\n```edition2018\nstruct Type(u32); // this is a tuple struct\n\nenum Foo {\n    Bar(u32), // this is a tuple variant\n}\n\nuse Foo::*; // To use Foo's variant directly, we need to import them in\n            // the scope.\n```\n\nEither way, it should work fine with our previous code:\n\n```edition2018\nstruct Type(u32);\n\nenum Foo {\n    Bar(u32),\n}\nuse Foo::*;\n\nlet Type(x) = Type(12); // ok!\nmatch Type(12) {\n    Type(x) => {} // ok!\n    _ => {}\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find tuple struct or tuple variant `Some` in this scope",
                "spans": [
                  {
                    "byte_end": 16528,
                    "byte_start": 16524,
                    "column_end": 24,
                    "column_start": 20,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 507,
                    "line_start": 507,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 24,
                        "highlight_start": 20,
                        "text": "            if let Some(Entry::Occupied(mut value)) = guard.slab.entries.pop() {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#slab@0.4.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "slab",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0531]: cannot find tuple struct or tuple variant `Some` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\src\\lib.rs:509:27\n    |\n509 |                 while let Some(&Entry::Occupied(_)) = guard.slab.entries.get(occupied_until) {\n    |                           ^^^^ not found in this scope\n    |\nhelp: consider importing this tuple variant\n    |\n121 + use core::option::Option::Some;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this tuple variant",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 3991,
                        "byte_start": 3991,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 121,
                        "line_start": 121,
                        "suggested_replacement": "use core::option::Option::Some;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use alloc::vec::{self, Vec};"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0531",
                  "explanation": "An unknown tuple struct/variant has been used.\n\nErroneous code example:\n\n```compile_fail,E0531\nlet Type(x) = Type(12); // error!\nmatch Bar(12) {\n    Bar(x) => {} // error!\n    _ => {}\n}\n```\n\nIn most cases, it's either a forgotten import or a typo. However, let's look at\nhow you can have such a type:\n\n```edition2018\nstruct Type(u32); // this is a tuple struct\n\nenum Foo {\n    Bar(u32), // this is a tuple variant\n}\n\nuse Foo::*; // To use Foo's variant directly, we need to import them in\n            // the scope.\n```\n\nEither way, it should work fine with our previous code:\n\n```edition2018\nstruct Type(u32);\n\nenum Foo {\n    Bar(u32),\n}\nuse Foo::*;\n\nlet Type(x) = Type(12); // ok!\nmatch Type(12) {\n    Type(x) => {} // ok!\n    _ => {}\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find tuple struct or tuple variant `Some` in this scope",
                "spans": [
                  {
                    "byte_end": 16684,
                    "byte_start": 16680,
                    "column_end": 31,
                    "column_start": 27,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 509,
                    "line_start": 509,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 31,
                        "highlight_start": 27,
                        "text": "                while let Some(&Entry::Occupied(_)) = guard.slab.entries.get(occupied_until) {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#slab@0.4.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "slab",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0412]: cannot find type `Option` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\src\\lib.rs:666:38\n    |\n666 |     pub fn get(&self, key: usize) -> Option<&T> {\n    |                                      ^^^^^^ not found in this scope\n    |\nhelp: consider importing this enum\n    |\n121 + use core::option::Option;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this enum",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 3991,
                        "byte_start": 3991,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 121,
                        "line_start": 121,
                        "suggested_replacement": "use core::option::Option;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use alloc::vec::{self, Vec};"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0412",
                  "explanation": "A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"
                },
                "level": "error",
                "message": "cannot find type `Option` in this scope",
                "spans": [
                  {
                    "byte_end": 21149,
                    "byte_start": 21143,
                    "column_end": 44,
                    "column_start": 38,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 666,
                    "line_start": 666,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 44,
                        "highlight_start": 38,
                        "text": "    pub fn get(&self, key: usize) -> Option<&T> {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#slab@0.4.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "slab",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0531]: cannot find tuple struct or tuple variant `Some` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\src\\lib.rs:668:13\n    |\n668 |             Some(&Entry::Occupied(ref val)) => Some(val),\n    |             ^^^^ not found in this scope\n    |\nhelp: consider importing this tuple variant\n    |\n121 + use core::option::Option::Some;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this tuple variant",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 3991,
                        "byte_start": 3991,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 121,
                        "line_start": 121,
                        "suggested_replacement": "use core::option::Option::Some;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use alloc::vec::{self, Vec};"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0531",
                  "explanation": "An unknown tuple struct/variant has been used.\n\nErroneous code example:\n\n```compile_fail,E0531\nlet Type(x) = Type(12); // error!\nmatch Bar(12) {\n    Bar(x) => {} // error!\n    _ => {}\n}\n```\n\nIn most cases, it's either a forgotten import or a typo. However, let's look at\nhow you can have such a type:\n\n```edition2018\nstruct Type(u32); // this is a tuple struct\n\nenum Foo {\n    Bar(u32), // this is a tuple variant\n}\n\nuse Foo::*; // To use Foo's variant directly, we need to import them in\n            // the scope.\n```\n\nEither way, it should work fine with our previous code:\n\n```edition2018\nstruct Type(u32);\n\nenum Foo {\n    Bar(u32),\n}\nuse Foo::*;\n\nlet Type(x) = Type(12); // ok!\nmatch Type(12) {\n    Type(x) => {} // ok!\n    _ => {}\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find tuple struct or tuple variant `Some` in this scope",
                "spans": [
                  {
                    "byte_end": 21210,
                    "byte_start": 21206,
                    "column_end": 17,
                    "column_start": 13,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 668,
                    "line_start": 668,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 17,
                        "highlight_start": 13,
                        "text": "            Some(&Entry::Occupied(ref val)) => Some(val),"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#slab@0.4.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "slab",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0425]: cannot find function, tuple struct or tuple variant `Some` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\src\\lib.rs:668:48\n    |\n668 |             Some(&Entry::Occupied(ref val)) => Some(val),\n    |                                                ^^^^ not found in this scope\n    |\nhelp: consider importing this tuple variant\n    |\n121 + use core::option::Option::Some;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this tuple variant",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 3991,
                        "byte_start": 3991,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 121,
                        "line_start": 121,
                        "suggested_replacement": "use core::option::Option::Some;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use alloc::vec::{self, Vec};"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0425",
                  "explanation": "An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"
                },
                "level": "error",
                "message": "cannot find function, tuple struct or tuple variant `Some` in this scope",
                "spans": [
                  {
                    "byte_end": 21245,
                    "byte_start": 21241,
                    "column_end": 52,
                    "column_start": 48,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 668,
                    "line_start": 668,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 52,
                        "highlight_start": 48,
                        "text": "            Some(&Entry::Occupied(ref val)) => Some(val),"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#slab@0.4.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "slab",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0425]: cannot find value `None` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\src\\lib.rs:669:18\n    |\n669 |             _ => None,\n    |                  ^^^^ not found in this scope\n    |\nhelp: consider importing this unit variant\n    |\n121 + use core::option::Option::None;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this unit variant",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 3991,
                        "byte_start": 3991,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 121,
                        "line_start": 121,
                        "suggested_replacement": "use core::option::Option::None;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use alloc::vec::{self, Vec};"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0425",
                  "explanation": "An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"
                },
                "level": "error",
                "message": "cannot find value `None` in this scope",
                "spans": [
                  {
                    "byte_end": 21273,
                    "byte_start": 21269,
                    "column_end": 22,
                    "column_start": 18,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 669,
                    "line_start": 669,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 22,
                        "highlight_start": 18,
                        "text": "            _ => None,"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#slab@0.4.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "slab",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0412]: cannot find type `Option` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\src\\lib.rs:690:46\n    |\n690 |     pub fn get_mut(&mut self, key: usize) -> Option<&mut T> {\n    |                                              ^^^^^^ not found in this scope\n    |\nhelp: consider importing this enum\n    |\n121 + use core::option::Option;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this enum",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 3991,
                        "byte_start": 3991,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 121,
                        "line_start": 121,
                        "suggested_replacement": "use core::option::Option;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use alloc::vec::{self, Vec};"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0412",
                  "explanation": "A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"
                },
                "level": "error",
                "message": "cannot find type `Option` in this scope",
                "spans": [
                  {
                    "byte_end": 21826,
                    "byte_start": 21820,
                    "column_end": 52,
                    "column_start": 46,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 690,
                    "line_start": 690,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 52,
                        "highlight_start": 46,
                        "text": "    pub fn get_mut(&mut self, key: usize) -> Option<&mut T> {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#slab@0.4.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "slab",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0531]: cannot find tuple struct or tuple variant `Some` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\src\\lib.rs:692:13\n    |\n692 |             Some(&mut Entry::Occupied(ref mut val)) => Some(val),\n    |             ^^^^ not found in this scope\n    |\nhelp: consider importing this tuple variant\n    |\n121 + use core::option::Option::Some;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this tuple variant",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 3991,
                        "byte_start": 3991,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 121,
                        "line_start": 121,
                        "suggested_replacement": "use core::option::Option::Some;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use alloc::vec::{self, Vec};"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0531",
                  "explanation": "An unknown tuple struct/variant has been used.\n\nErroneous code example:\n\n```compile_fail,E0531\nlet Type(x) = Type(12); // error!\nmatch Bar(12) {\n    Bar(x) => {} // error!\n    _ => {}\n}\n```\n\nIn most cases, it's either a forgotten import or a typo. However, let's look at\nhow you can have such a type:\n\n```edition2018\nstruct Type(u32); // this is a tuple struct\n\nenum Foo {\n    Bar(u32), // this is a tuple variant\n}\n\nuse Foo::*; // To use Foo's variant directly, we need to import them in\n            // the scope.\n```\n\nEither way, it should work fine with our previous code:\n\n```edition2018\nstruct Type(u32);\n\nenum Foo {\n    Bar(u32),\n}\nuse Foo::*;\n\nlet Type(x) = Type(12); // ok!\nmatch Type(12) {\n    Type(x) => {} // ok!\n    _ => {}\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find tuple struct or tuple variant `Some` in this scope",
                "spans": [
                  {
                    "byte_end": 21895,
                    "byte_start": 21891,
                    "column_end": 17,
                    "column_start": 13,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 692,
                    "line_start": 692,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 17,
                        "highlight_start": 13,
                        "text": "            Some(&mut Entry::Occupied(ref mut val)) => Some(val),"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#slab@0.4.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "slab",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0425]: cannot find function, tuple struct or tuple variant `Some` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\src\\lib.rs:692:56\n    |\n692 |             Some(&mut Entry::Occupied(ref mut val)) => Some(val),\n    |                                                        ^^^^ not found in this scope\n    |\nhelp: consider importing this tuple variant\n    |\n121 + use core::option::Option::Some;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this tuple variant",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 3991,
                        "byte_start": 3991,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 121,
                        "line_start": 121,
                        "suggested_replacement": "use core::option::Option::Some;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use alloc::vec::{self, Vec};"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0425",
                  "explanation": "An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"
                },
                "level": "error",
                "message": "cannot find function, tuple struct or tuple variant `Some` in this scope",
                "spans": [
                  {
                    "byte_end": 21938,
                    "byte_start": 21934,
                    "column_end": 60,
                    "column_start": 56,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 692,
                    "line_start": 692,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 60,
                        "highlight_start": 56,
                        "text": "            Some(&mut Entry::Occupied(ref mut val)) => Some(val),"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#slab@0.4.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "slab",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0425]: cannot find value `None` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\src\\lib.rs:693:18\n    |\n693 |             _ => None,\n    |                  ^^^^ not found in this scope\n    |\nhelp: consider importing this unit variant\n    |\n121 + use core::option::Option::None;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this unit variant",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 3991,
                        "byte_start": 3991,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 121,
                        "line_start": 121,
                        "suggested_replacement": "use core::option::Option::None;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use alloc::vec::{self, Vec};"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0425",
                  "explanation": "An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"
                },
                "level": "error",
                "message": "cannot find value `None` in this scope",
                "spans": [
                  {
                    "byte_end": 21966,
                    "byte_start": 21962,
                    "column_end": 22,
                    "column_start": 18,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 693,
                    "line_start": 693,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 22,
                        "highlight_start": 18,
                        "text": "            _ => None,"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#slab@0.4.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "slab",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0412]: cannot find type `Option` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\src\\lib.rs:720:61\n    |\n720 |     pub fn get2_mut(&mut self, key1: usize, key2: usize) -> Option<(&mut T, &mut T)> {\n    |                                                             ^^^^^^ not found in this scope\n    |\nhelp: consider importing this enum\n    |\n121 + use core::option::Option;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this enum",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 3991,
                        "byte_start": 3991,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 121,
                        "line_start": 121,
                        "suggested_replacement": "use core::option::Option;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use alloc::vec::{self, Vec};"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0412",
                  "explanation": "A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"
                },
                "level": "error",
                "message": "cannot find type `Option` in this scope",
                "spans": [
                  {
                    "byte_end": 22832,
                    "byte_start": 22826,
                    "column_end": 67,
                    "column_start": 61,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 720,
                    "line_start": 720,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 67,
                        "highlight_start": 61,
                        "text": "    pub fn get2_mut(&mut self, key1: usize, key2: usize) -> Option<(&mut T, &mut T)> {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#slab@0.4.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "slab",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0531]: cannot find tuple struct or tuple variant `Some` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\src\\lib.rs:737:17\n    |\n737 |                 Some(&mut Entry::Occupied(ref mut val1)),\n    |                 ^^^^ not found in this scope\n    |\nhelp: consider importing this tuple variant\n    |\n121 + use core::option::Option::Some;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this tuple variant",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 3991,
                        "byte_start": 3991,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 121,
                        "line_start": 121,
                        "suggested_replacement": "use core::option::Option::Some;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use alloc::vec::{self, Vec};"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0531",
                  "explanation": "An unknown tuple struct/variant has been used.\n\nErroneous code example:\n\n```compile_fail,E0531\nlet Type(x) = Type(12); // error!\nmatch Bar(12) {\n    Bar(x) => {} // error!\n    _ => {}\n}\n```\n\nIn most cases, it's either a forgotten import or a typo. However, let's look at\nhow you can have such a type:\n\n```edition2018\nstruct Type(u32); // this is a tuple struct\n\nenum Foo {\n    Bar(u32), // this is a tuple variant\n}\n\nuse Foo::*; // To use Foo's variant directly, we need to import them in\n            // the scope.\n```\n\nEither way, it should work fine with our previous code:\n\n```edition2018\nstruct Type(u32);\n\nenum Foo {\n    Bar(u32),\n}\nuse Foo::*;\n\nlet Type(x) = Type(12); // ok!\nmatch Type(12) {\n    Type(x) => {} // ok!\n    _ => {}\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find tuple struct or tuple variant `Some` in this scope",
                "spans": [
                  {
                    "byte_end": 23338,
                    "byte_start": 23334,
                    "column_end": 21,
                    "column_start": 17,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 737,
                    "line_start": 737,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 21,
                        "highlight_start": 17,
                        "text": "                Some(&mut Entry::Occupied(ref mut val1)),"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#slab@0.4.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "slab",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0531]: cannot find tuple struct or tuple variant `Some` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\src\\lib.rs:738:17\n    |\n738 |                 Some(&mut Entry::Occupied(ref mut val2)),\n    |                 ^^^^ not found in this scope\n    |\nhelp: consider importing this tuple variant\n    |\n121 + use core::option::Option::Some;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this tuple variant",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 3991,
                        "byte_start": 3991,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 121,
                        "line_start": 121,
                        "suggested_replacement": "use core::option::Option::Some;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use alloc::vec::{self, Vec};"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0531",
                  "explanation": "An unknown tuple struct/variant has been used.\n\nErroneous code example:\n\n```compile_fail,E0531\nlet Type(x) = Type(12); // error!\nmatch Bar(12) {\n    Bar(x) => {} // error!\n    _ => {}\n}\n```\n\nIn most cases, it's either a forgotten import or a typo. However, let's look at\nhow you can have such a type:\n\n```edition2018\nstruct Type(u32); // this is a tuple struct\n\nenum Foo {\n    Bar(u32), // this is a tuple variant\n}\n\nuse Foo::*; // To use Foo's variant directly, we need to import them in\n            // the scope.\n```\n\nEither way, it should work fine with our previous code:\n\n```edition2018\nstruct Type(u32);\n\nenum Foo {\n    Bar(u32),\n}\nuse Foo::*;\n\nlet Type(x) = Type(12); // ok!\nmatch Type(12) {\n    Type(x) => {} // ok!\n    _ => {}\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find tuple struct or tuple variant `Some` in this scope",
                "spans": [
                  {
                    "byte_end": 23396,
                    "byte_start": 23392,
                    "column_end": 21,
                    "column_start": 17,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 738,
                    "line_start": 738,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 21,
                        "highlight_start": 17,
                        "text": "                Some(&mut Entry::Occupied(ref mut val2)),"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#slab@0.4.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "slab",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0425]: cannot find function, tuple struct or tuple variant `Some` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\src\\lib.rs:739:18\n    |\n739 |             ) => Some((val1, val2)),\n    |                  ^^^^ not found in this scope\n    |\nhelp: consider importing this tuple variant\n    |\n121 + use core::option::Option::Some;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this tuple variant",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 3991,
                        "byte_start": 3991,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 121,
                        "line_start": 121,
                        "suggested_replacement": "use core::option::Option::Some;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use alloc::vec::{self, Vec};"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0425",
                  "explanation": "An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"
                },
                "level": "error",
                "message": "cannot find function, tuple struct or tuple variant `Some` in this scope",
                "spans": [
                  {
                    "byte_end": 23455,
                    "byte_start": 23451,
                    "column_end": 22,
                    "column_start": 18,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 739,
                    "line_start": 739,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 22,
                        "highlight_start": 18,
                        "text": "            ) => Some((val1, val2)),"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#slab@0.4.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "slab",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0425]: cannot find value `None` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\src\\lib.rs:740:18\n    |\n740 |             _ => None,\n    |                  ^^^^ not found in this scope\n    |\nhelp: consider importing this unit variant\n    |\n121 + use core::option::Option::None;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this unit variant",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 3991,
                        "byte_start": 3991,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 121,
                        "line_start": 121,
                        "suggested_replacement": "use core::option::Option::None;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use alloc::vec::{self, Vec};"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0425",
                  "explanation": "An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"
                },
                "level": "error",
                "message": "cannot find value `None` in this scope",
                "spans": [
                  {
                    "byte_end": 23492,
                    "byte_start": 23488,
                    "column_end": 22,
                    "column_start": 18,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 740,
                    "line_start": 740,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 22,
                        "highlight_start": 18,
                        "text": "            _ => None,"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#slab@0.4.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "slab",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0531]: cannot find tuple struct or tuple variant `Some` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\src\\lib.rs:958:17\n    |\n958 |                 Some(&Entry::Vacant(next)) => next,\n    |                 ^^^^ not found in this scope\n    |\nhelp: consider importing this tuple variant\n    |\n121 + use core::option::Option::Some;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this tuple variant",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 3991,
                        "byte_start": 3991,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 121,
                        "line_start": 121,
                        "suggested_replacement": "use core::option::Option::Some;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use alloc::vec::{self, Vec};"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0531",
                  "explanation": "An unknown tuple struct/variant has been used.\n\nErroneous code example:\n\n```compile_fail,E0531\nlet Type(x) = Type(12); // error!\nmatch Bar(12) {\n    Bar(x) => {} // error!\n    _ => {}\n}\n```\n\nIn most cases, it's either a forgotten import or a typo. However, let's look at\nhow you can have such a type:\n\n```edition2018\nstruct Type(u32); // this is a tuple struct\n\nenum Foo {\n    Bar(u32), // this is a tuple variant\n}\n\nuse Foo::*; // To use Foo's variant directly, we need to import them in\n            // the scope.\n```\n\nEither way, it should work fine with our previous code:\n\n```edition2018\nstruct Type(u32);\n\nenum Foo {\n    Bar(u32),\n}\nuse Foo::*;\n\nlet Type(x) = Type(12); // ok!\nmatch Type(12) {\n    Type(x) => {} // ok!\n    _ => {}\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find tuple struct or tuple variant `Some` in this scope",
                "spans": [
                  {
                    "byte_end": 30147,
                    "byte_start": 30143,
                    "column_end": 21,
                    "column_start": 17,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 958,
                    "line_start": 958,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 21,
                        "highlight_start": 17,
                        "text": "                Some(&Entry::Vacant(next)) => next,"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#slab@0.4.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "slab",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0412]: cannot find type `Option` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\src\\lib.rs:982:49\n    |\n982 |     pub fn try_remove(&mut self, key: usize) -> Option<T> {\n    |                                                 ^^^^^^ not found in this scope\n    |\nhelp: consider importing this enum\n    |\n121 + use core::option::Option;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this enum",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 3991,
                        "byte_start": 3991,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 121,
                        "line_start": 121,
                        "suggested_replacement": "use core::option::Option;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use alloc::vec::{self, Vec};"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0412",
                  "explanation": "A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"
                },
                "level": "error",
                "message": "cannot find type `Option` in this scope",
                "spans": [
                  {
                    "byte_end": 30842,
                    "byte_start": 30836,
                    "column_end": 55,
                    "column_start": 49,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 982,
                    "line_start": 982,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 55,
                        "highlight_start": 49,
                        "text": "    pub fn try_remove(&mut self, key: usize) -> Option<T> {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#slab@0.4.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "slab",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0531]: cannot find tuple struct or tuple variant `Some` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\src\\lib.rs:983:16\n    |\n983 |         if let Some(entry) = self.entries.get_mut(key) {\n    |                ^^^^ not found in this scope\n    |\nhelp: consider importing this tuple variant\n    |\n121 + use core::option::Option::Some;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this tuple variant",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 3991,
                        "byte_start": 3991,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 121,
                        "line_start": 121,
                        "suggested_replacement": "use core::option::Option::Some;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use alloc::vec::{self, Vec};"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0531",
                  "explanation": "An unknown tuple struct/variant has been used.\n\nErroneous code example:\n\n```compile_fail,E0531\nlet Type(x) = Type(12); // error!\nmatch Bar(12) {\n    Bar(x) => {} // error!\n    _ => {}\n}\n```\n\nIn most cases, it's either a forgotten import or a typo. However, let's look at\nhow you can have such a type:\n\n```edition2018\nstruct Type(u32); // this is a tuple struct\n\nenum Foo {\n    Bar(u32), // this is a tuple variant\n}\n\nuse Foo::*; // To use Foo's variant directly, we need to import them in\n            // the scope.\n```\n\nEither way, it should work fine with our previous code:\n\n```edition2018\nstruct Type(u32);\n\nenum Foo {\n    Bar(u32),\n}\nuse Foo::*;\n\nlet Type(x) = Type(12); // ok!\nmatch Type(12) {\n    Type(x) => {} // ok!\n    _ => {}\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find tuple struct or tuple variant `Some` in this scope",
                "spans": [
                  {
                    "byte_end": 30867,
                    "byte_start": 30863,
                    "column_end": 20,
                    "column_start": 16,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 983,
                    "line_start": 983,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 20,
                        "highlight_start": 16,
                        "text": "        if let Some(entry) = self.entries.get_mut(key) {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#slab@0.4.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "slab",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0425]: cannot find value `None` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\src\\lib.rs:999:9\n    |\n999 |         None\n    |         ^^^^ not found in this scope\n    |\nhelp: consider importing this unit variant\n    |\n121 + use core::option::Option::None;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this unit variant",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 3991,
                        "byte_start": 3991,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 121,
                        "line_start": 121,
                        "suggested_replacement": "use core::option::Option::None;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use alloc::vec::{self, Vec};"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0425",
                  "explanation": "An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"
                },
                "level": "error",
                "message": "cannot find value `None` in this scope",
                "spans": [
                  {
                    "byte_end": 31414,
                    "byte_start": 31410,
                    "column_end": 13,
                    "column_start": 9,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 999,
                    "line_start": 999,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 13,
                        "highlight_start": 9,
                        "text": "        None"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#slab@0.4.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "slab",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0531]: cannot find tuple struct or tuple variant `Some` in this scope\n    --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\src\\lib.rs:1043:13\n     |\n1043 |             Some(&Entry::Occupied(_)) => true,\n     |             ^^^^ not found in this scope\n     |\nhelp: consider importing this tuple variant\n     |\n121  + use core::option::Option::Some;\n     |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this tuple variant",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 3991,
                        "byte_start": 3991,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 121,
                        "line_start": 121,
                        "suggested_replacement": "use core::option::Option::Some;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use alloc::vec::{self, Vec};"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0531",
                  "explanation": "An unknown tuple struct/variant has been used.\n\nErroneous code example:\n\n```compile_fail,E0531\nlet Type(x) = Type(12); // error!\nmatch Bar(12) {\n    Bar(x) => {} // error!\n    _ => {}\n}\n```\n\nIn most cases, it's either a forgotten import or a typo. However, let's look at\nhow you can have such a type:\n\n```edition2018\nstruct Type(u32); // this is a tuple struct\n\nenum Foo {\n    Bar(u32), // this is a tuple variant\n}\n\nuse Foo::*; // To use Foo's variant directly, we need to import them in\n            // the scope.\n```\n\nEither way, it should work fine with our previous code:\n\n```edition2018\nstruct Type(u32);\n\nenum Foo {\n    Bar(u32),\n}\nuse Foo::*;\n\nlet Type(x) = Type(12); // ok!\nmatch Type(12) {\n    Type(x) => {} // ok!\n    _ => {}\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find tuple struct or tuple variant `Some` in this scope",
                "spans": [
                  {
                    "byte_end": 32508,
                    "byte_start": 32504,
                    "column_end": 17,
                    "column_start": 13,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 1043,
                    "line_start": 1043,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 17,
                        "highlight_start": 13,
                        "text": "            Some(&Entry::Occupied(_)) => true,"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#slab@0.4.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "slab",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0405]: cannot find trait `FnMut` in this scope\n    --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\src\\lib.rs:1074:12\n     |\n1074 |         F: FnMut(usize, &mut T) -> bool,\n     |            ^^^^^ not found in this scope\n     |\nhelp: consider importing one of these traits\n     |\n121  + use crate::ops::FnMut;\n     |\n121  + use core::ops::FnMut;\n     |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing one of these traits",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 3991,
                        "byte_start": 3991,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 121,
                        "line_start": 121,
                        "suggested_replacement": "use crate::ops::FnMut;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use alloc::vec::{self, Vec};"
                          }
                        ]
                      },
                      {
                        "byte_end": 3991,
                        "byte_start": 3991,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 121,
                        "line_start": 121,
                        "suggested_replacement": "use core::ops::FnMut;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use alloc::vec::{self, Vec};"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0405",
                  "explanation": "The code refers to a trait that is not in scope.\n\nErroneous code example:\n\n```compile_fail,E0405\nstruct Foo;\n\nimpl SomeTrait for Foo {} // error: trait `SomeTrait` is not in scope\n```\n\nPlease verify that the name of the trait wasn't misspelled and ensure that it\nwas imported. Example:\n\n```\n# #[cfg(for_demonstration_only)]\n// solution 1:\nuse some_file::SomeTrait;\n\n// solution 2:\ntrait SomeTrait {\n    // some functions\n}\n\nstruct Foo;\n\nimpl SomeTrait for Foo { // ok!\n    // implements functions\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find trait `FnMut` in this scope",
                "spans": [
                  {
                    "byte_end": 33363,
                    "byte_start": 33358,
                    "column_end": 17,
                    "column_start": 12,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 1074,
                    "line_start": 1074,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 17,
                        "highlight_start": 12,
                        "text": "        F: FnMut(usize, &mut T) -> bool,"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#slab@0.4.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "slab",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0531]: cannot find tuple struct or tuple variant `Some` in this scope\n    --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\src\\lib.rs:1131:13\n     |\n1131 |             Some(&Entry::Occupied(ref v)) => v,\n     |             ^^^^ not found in this scope\n     |\nhelp: consider importing this tuple variant\n     |\n121  + use core::option::Option::Some;\n     |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this tuple variant",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 3991,
                        "byte_start": 3991,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 121,
                        "line_start": 121,
                        "suggested_replacement": "use core::option::Option::Some;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use alloc::vec::{self, Vec};"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0531",
                  "explanation": "An unknown tuple struct/variant has been used.\n\nErroneous code example:\n\n```compile_fail,E0531\nlet Type(x) = Type(12); // error!\nmatch Bar(12) {\n    Bar(x) => {} // error!\n    _ => {}\n}\n```\n\nIn most cases, it's either a forgotten import or a typo. However, let's look at\nhow you can have such a type:\n\n```edition2018\nstruct Type(u32); // this is a tuple struct\n\nenum Foo {\n    Bar(u32), // this is a tuple variant\n}\n\nuse Foo::*; // To use Foo's variant directly, we need to import them in\n            // the scope.\n```\n\nEither way, it should work fine with our previous code:\n\n```edition2018\nstruct Type(u32);\n\nenum Foo {\n    Bar(u32),\n}\nuse Foo::*;\n\nlet Type(x) = Type(12); // ok!\nmatch Type(12) {\n    Type(x) => {} // ok!\n    _ => {}\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find tuple struct or tuple variant `Some` in this scope",
                "spans": [
                  {
                    "byte_end": 34812,
                    "byte_start": 34808,
                    "column_end": 17,
                    "column_start": 13,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 1131,
                    "line_start": 1131,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 17,
                        "highlight_start": 13,
                        "text": "            Some(&Entry::Occupied(ref v)) => v,"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#slab@0.4.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "slab",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0531]: cannot find tuple struct or tuple variant `Some` in this scope\n    --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\src\\lib.rs:1140:13\n     |\n1140 |             Some(&mut Entry::Occupied(ref mut v)) => v,\n     |             ^^^^ not found in this scope\n     |\nhelp: consider importing this tuple variant\n     |\n121  + use core::option::Option::Some;\n     |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this tuple variant",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 3991,
                        "byte_start": 3991,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 121,
                        "line_start": 121,
                        "suggested_replacement": "use core::option::Option::Some;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use alloc::vec::{self, Vec};"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0531",
                  "explanation": "An unknown tuple struct/variant has been used.\n\nErroneous code example:\n\n```compile_fail,E0531\nlet Type(x) = Type(12); // error!\nmatch Bar(12) {\n    Bar(x) => {} // error!\n    _ => {}\n}\n```\n\nIn most cases, it's either a forgotten import or a typo. However, let's look at\nhow you can have such a type:\n\n```edition2018\nstruct Type(u32); // this is a tuple struct\n\nenum Foo {\n    Bar(u32), // this is a tuple variant\n}\n\nuse Foo::*; // To use Foo's variant directly, we need to import them in\n            // the scope.\n```\n\nEither way, it should work fine with our previous code:\n\n```edition2018\nstruct Type(u32);\n\nenum Foo {\n    Bar(u32),\n}\nuse Foo::*;\n\nlet Type(x) = Type(12); // ok!\nmatch Type(12) {\n    Type(x) => {} // ok!\n    _ => {}\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find tuple struct or tuple variant `Some` in this scope",
                "spans": [
                  {
                    "byte_end": 35056,
                    "byte_start": 35052,
                    "column_end": 17,
                    "column_start": 13,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 1140,
                    "line_start": 1140,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 17,
                        "highlight_start": 13,
                        "text": "            Some(&mut Entry::Occupied(ref mut v)) => v,"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#slab@0.4.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "slab",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0405]: cannot find trait `IntoIterator` in this scope\n    --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\src\\lib.rs:1146:9\n     |\n1146 | impl<T> IntoIterator for Slab<T> {\n     |         ^^^^^^^^^^^^\n     |\n    ::: C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\iter\\traits\\collect.rs:134:1\n     |\n134  | pub trait FromIterator<A>: Sized {\n     | -------------------------------- similarly named trait `FromIterator` defined here\n     |\nhelp: a trait with a similar name exists\n     |\n1146 - impl<T> IntoIterator for Slab<T> {\n1146 + impl<T> FromIterator for Slab<T> {\n     |\nhelp: consider importing one of these traits\n     |\n121  + use crate::iter::IntoIterator;\n     |\n121  + use core::iter::IntoIterator;\n     |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "a trait with a similar name exists",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 35175,
                        "byte_start": 35163,
                        "column_end": 21,
                        "column_start": 9,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 1146,
                        "line_start": 1146,
                        "suggested_replacement": "FromIterator",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 21,
                            "highlight_start": 9,
                            "text": "impl<T> IntoIterator for Slab<T> {"
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing one of these traits",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 3991,
                        "byte_start": 3991,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 121,
                        "line_start": 121,
                        "suggested_replacement": "use crate::iter::IntoIterator;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use alloc::vec::{self, Vec};"
                          }
                        ]
                      },
                      {
                        "byte_end": 3991,
                        "byte_start": 3991,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 121,
                        "line_start": 121,
                        "suggested_replacement": "use core::iter::IntoIterator;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use alloc::vec::{self, Vec};"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0405",
                  "explanation": "The code refers to a trait that is not in scope.\n\nErroneous code example:\n\n```compile_fail,E0405\nstruct Foo;\n\nimpl SomeTrait for Foo {} // error: trait `SomeTrait` is not in scope\n```\n\nPlease verify that the name of the trait wasn't misspelled and ensure that it\nwas imported. Example:\n\n```\n# #[cfg(for_demonstration_only)]\n// solution 1:\nuse some_file::SomeTrait;\n\n// solution 2:\ntrait SomeTrait {\n    // some functions\n}\n\nstruct Foo;\n\nimpl SomeTrait for Foo { // ok!\n    // implements functions\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find trait `IntoIterator` in this scope",
                "spans": [
                  {
                    "byte_end": 4239,
                    "byte_start": 4207,
                    "column_end": 33,
                    "column_start": 1,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\iter\\traits\\collect.rs",
                    "is_primary": false,
                    "label": "similarly named trait `FromIterator` defined here",
                    "line_end": 134,
                    "line_start": 134,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 33,
                        "highlight_start": 1,
                        "text": "pub trait FromIterator<A>: Sized {"
                      }
                    ]
                  },
                  {
                    "byte_end": 35175,
                    "byte_start": 35163,
                    "column_end": 21,
                    "column_start": 9,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\src\\lib.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 1146,
                    "line_start": 1146,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 21,
                        "highlight_start": 9,
                        "text": "impl<T> IntoIterator for Slab<T> {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#slab@0.4.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "slab",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0405]: cannot find trait `IntoIterator` in this scope\n    --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\src\\lib.rs:1158:13\n     |\n1158 | impl<'a, T> IntoIterator for &'a Slab<T> {\n     |             ^^^^^^^^^^^^\n     |\n    ::: C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\iter\\traits\\collect.rs:134:1\n     |\n134  | pub trait FromIterator<A>: Sized {\n     | -------------------------------- similarly named trait `FromIterator` defined here\n     |\nhelp: a trait with a similar name exists\n     |\n1158 - impl<'a, T> IntoIterator for &'a Slab<T> {\n1158 + impl<'a, T> FromIterator for &'a Slab<T> {\n     |\nhelp: consider importing one of these traits\n     |\n121  + use crate::iter::IntoIterator;\n     |\n121  + use core::iter::IntoIterator;\n     |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "a trait with a similar name exists",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 35440,
                        "byte_start": 35428,
                        "column_end": 25,
                        "column_start": 13,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 1158,
                        "line_start": 1158,
                        "suggested_replacement": "FromIterator",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 25,
                            "highlight_start": 13,
                            "text": "impl<'a, T> IntoIterator for &'a Slab<T> {"
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing one of these traits",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 3991,
                        "byte_start": 3991,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 121,
                        "line_start": 121,
                        "suggested_replacement": "use crate::iter::IntoIterator;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use alloc::vec::{self, Vec};"
                          }
                        ]
                      },
                      {
                        "byte_end": 3991,
                        "byte_start": 3991,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 121,
                        "line_start": 121,
                        "suggested_replacement": "use core::iter::IntoIterator;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use alloc::vec::{self, Vec};"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0405",
                  "explanation": "The code refers to a trait that is not in scope.\n\nErroneous code example:\n\n```compile_fail,E0405\nstruct Foo;\n\nimpl SomeTrait for Foo {} // error: trait `SomeTrait` is not in scope\n```\n\nPlease verify that the name of the trait wasn't misspelled and ensure that it\nwas imported. Example:\n\n```\n# #[cfg(for_demonstration_only)]\n// solution 1:\nuse some_file::SomeTrait;\n\n// solution 2:\ntrait SomeTrait {\n    // some functions\n}\n\nstruct Foo;\n\nimpl SomeTrait for Foo { // ok!\n    // implements functions\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find trait `IntoIterator` in this scope",
                "spans": [
                  {
                    "byte_end": 4239,
                    "byte_start": 4207,
                    "column_end": 33,
                    "column_start": 1,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\iter\\traits\\collect.rs",
                    "is_primary": false,
                    "label": "similarly named trait `FromIterator` defined here",
                    "line_end": 134,
                    "line_start": 134,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 33,
                        "highlight_start": 1,
                        "text": "pub trait FromIterator<A>: Sized {"
                      }
                    ]
                  },
                  {
                    "byte_end": 35440,
                    "byte_start": 35428,
                    "column_end": 25,
                    "column_start": 13,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\src\\lib.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 1158,
                    "line_start": 1158,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 25,
                        "highlight_start": 13,
                        "text": "impl<'a, T> IntoIterator for &'a Slab<T> {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#slab@0.4.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "slab",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0405]: cannot find trait `IntoIterator` in this scope\n    --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\src\\lib.rs:1167:13\n     |\n1167 | impl<'a, T> IntoIterator for &'a mut Slab<T> {\n     |             ^^^^^^^^^^^^\n     |\n    ::: C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\iter\\traits\\collect.rs:134:1\n     |\n134  | pub trait FromIterator<A>: Sized {\n     | -------------------------------- similarly named trait `FromIterator` defined here\n     |\nhelp: a trait with a similar name exists\n     |\n1167 - impl<'a, T> IntoIterator for &'a mut Slab<T> {\n1167 + impl<'a, T> FromIterator for &'a mut Slab<T> {\n     |\nhelp: consider importing one of these traits\n     |\n121  + use crate::iter::IntoIterator;\n     |\n121  + use core::iter::IntoIterator;\n     |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "a trait with a similar name exists",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 35618,
                        "byte_start": 35606,
                        "column_end": 25,
                        "column_start": 13,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 1167,
                        "line_start": 1167,
                        "suggested_replacement": "FromIterator",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 25,
                            "highlight_start": 13,
                            "text": "impl<'a, T> IntoIterator for &'a mut Slab<T> {"
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing one of these traits",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 3991,
                        "byte_start": 3991,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 121,
                        "line_start": 121,
                        "suggested_replacement": "use crate::iter::IntoIterator;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use alloc::vec::{self, Vec};"
                          }
                        ]
                      },
                      {
                        "byte_end": 3991,
                        "byte_start": 3991,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 121,
                        "line_start": 121,
                        "suggested_replacement": "use core::iter::IntoIterator;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use alloc::vec::{self, Vec};"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0405",
                  "explanation": "The code refers to a trait that is not in scope.\n\nErroneous code example:\n\n```compile_fail,E0405\nstruct Foo;\n\nimpl SomeTrait for Foo {} // error: trait `SomeTrait` is not in scope\n```\n\nPlease verify that the name of the trait wasn't misspelled and ensure that it\nwas imported. Example:\n\n```\n# #[cfg(for_demonstration_only)]\n// solution 1:\nuse some_file::SomeTrait;\n\n// solution 2:\ntrait SomeTrait {\n    // some functions\n}\n\nstruct Foo;\n\nimpl SomeTrait for Foo { // ok!\n    // implements functions\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find trait `IntoIterator` in this scope",
                "spans": [
                  {
                    "byte_end": 4239,
                    "byte_start": 4207,
                    "column_end": 33,
                    "column_start": 1,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\iter\\traits\\collect.rs",
                    "is_primary": false,
                    "label": "similarly named trait `FromIterator` defined here",
                    "line_end": 134,
                    "line_start": 134,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 33,
                        "highlight_start": 1,
                        "text": "pub trait FromIterator<A>: Sized {"
                      }
                    ]
                  },
                  {
                    "byte_end": 35618,
                    "byte_start": 35606,
                    "column_end": 25,
                    "column_start": 13,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\src\\lib.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 1167,
                    "line_start": 1167,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 25,
                        "highlight_start": 13,
                        "text": "impl<'a, T> IntoIterator for &'a mut Slab<T> {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#slab@0.4.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "slab",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0405]: cannot find trait `IntoIterator` in this scope\n    --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\src\\lib.rs:1209:12\n     |\n1209 |         I: IntoIterator<Item = (usize, T)>,\n     |            ^^^^^^^^^^^^\n     |\n    ::: C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\iter\\traits\\collect.rs:134:1\n     |\n134  | pub trait FromIterator<A>: Sized {\n     | -------------------------------- similarly named trait `FromIterator` defined here\n     |\nhelp: a trait with a similar name exists\n     |\n1209 -         I: IntoIterator<Item = (usize, T)>,\n1209 +         I: FromIterator<Item = (usize, T)>,\n     |\nhelp: consider importing one of these traits\n     |\n121  + use crate::iter::IntoIterator;\n     |\n121  + use core::iter::IntoIterator;\n     |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "a trait with a similar name exists",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 36813,
                        "byte_start": 36801,
                        "column_end": 24,
                        "column_start": 12,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 1209,
                        "line_start": 1209,
                        "suggested_replacement": "FromIterator",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 24,
                            "highlight_start": 12,
                            "text": "        I: IntoIterator<Item = (usize, T)>,"
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing one of these traits",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 3991,
                        "byte_start": 3991,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 121,
                        "line_start": 121,
                        "suggested_replacement": "use crate::iter::IntoIterator;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use alloc::vec::{self, Vec};"
                          }
                        ]
                      },
                      {
                        "byte_end": 3991,
                        "byte_start": 3991,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 121,
                        "line_start": 121,
                        "suggested_replacement": "use core::iter::IntoIterator;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use alloc::vec::{self, Vec};"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0405",
                  "explanation": "The code refers to a trait that is not in scope.\n\nErroneous code example:\n\n```compile_fail,E0405\nstruct Foo;\n\nimpl SomeTrait for Foo {} // error: trait `SomeTrait` is not in scope\n```\n\nPlease verify that the name of the trait wasn't misspelled and ensure that it\nwas imported. Example:\n\n```\n# #[cfg(for_demonstration_only)]\n// solution 1:\nuse some_file::SomeTrait;\n\n// solution 2:\ntrait SomeTrait {\n    // some functions\n}\n\nstruct Foo;\n\nimpl SomeTrait for Foo { // ok!\n    // implements functions\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find trait `IntoIterator` in this scope",
                "spans": [
                  {
                    "byte_end": 4239,
                    "byte_start": 4207,
                    "column_end": 33,
                    "column_start": 1,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\iter\\traits\\collect.rs",
                    "is_primary": false,
                    "label": "similarly named trait `FromIterator` defined here",
                    "line_end": 134,
                    "line_start": 134,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 33,
                        "highlight_start": 1,
                        "text": "pub trait FromIterator<A>: Sized {"
                      }
                    ]
                  },
                  {
                    "byte_end": 36813,
                    "byte_start": 36801,
                    "column_end": 24,
                    "column_start": 12,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\src\\lib.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 1209,
                    "line_start": 1209,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 24,
                        "highlight_start": 12,
                        "text": "        I: IntoIterator<Item = (usize, T)>,"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#slab@0.4.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "slab",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0425]: cannot find value `None` in this scope\n    --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\src\\lib.rs:1215:38\n     |\n1215 |         let mut first_vacant_index = None;\n     |                                      ^^^^ not found in this scope\n     |\nhelp: consider importing this unit variant\n     |\n121  + use core::option::Option::None;\n     |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this unit variant",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 3991,
                        "byte_start": 3991,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 121,
                        "line_start": 121,
                        "suggested_replacement": "use core::option::Option::None;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use alloc::vec::{self, Vec};"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0425",
                  "explanation": "An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"
                },
                "level": "error",
                "message": "cannot find value `None` in this scope",
                "spans": [
                  {
                    "byte_end": 37039,
                    "byte_start": 37035,
                    "column_end": 42,
                    "column_start": 38,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 1215,
                    "line_start": 1215,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 42,
                        "highlight_start": 38,
                        "text": "        let mut first_vacant_index = None;"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#slab@0.4.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "slab",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0425]: cannot find function, tuple struct or tuple variant `Some` in this scope\n    --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\src\\lib.rs:1228:42\n     |\n1228 |                     first_vacant_index = Some(slab.entries.len());\n     |                                          ^^^^ not found in this scope\n     |\nhelp: consider importing this tuple variant\n     |\n121  + use core::option::Option::Some;\n     |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this tuple variant",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 3991,
                        "byte_start": 3991,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 121,
                        "line_start": 121,
                        "suggested_replacement": "use core::option::Option::Some;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use alloc::vec::{self, Vec};"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0425",
                  "explanation": "An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"
                },
                "level": "error",
                "message": "cannot find function, tuple struct or tuple variant `Some` in this scope",
                "spans": [
                  {
                    "byte_end": 37705,
                    "byte_start": 37701,
                    "column_end": 46,
                    "column_start": 42,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 1228,
                    "line_start": 1228,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 46,
                        "highlight_start": 42,
                        "text": "                    first_vacant_index = Some(slab.entries.len());"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#slab@0.4.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "slab",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0531]: cannot find tuple struct or tuple variant `Some` in this scope\n    --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\src\\lib.rs:1246:23\n     |\n1246 |         } else if let Some(first_vacant_index) = first_vacant_index {\n     |                       ^^^^ not found in this scope\n     |\nhelp: consider importing this tuple variant\n     |\n121  + use core::option::Option::Some;\n     |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this tuple variant",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 3991,
                        "byte_start": 3991,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 121,
                        "line_start": 121,
                        "suggested_replacement": "use core::option::Option::Some;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use alloc::vec::{self, Vec};"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0531",
                  "explanation": "An unknown tuple struct/variant has been used.\n\nErroneous code example:\n\n```compile_fail,E0531\nlet Type(x) = Type(12); // error!\nmatch Bar(12) {\n    Bar(x) => {} // error!\n    _ => {}\n}\n```\n\nIn most cases, it's either a forgotten import or a typo. However, let's look at\nhow you can have such a type:\n\n```edition2018\nstruct Type(u32); // this is a tuple struct\n\nenum Foo {\n    Bar(u32), // this is a tuple variant\n}\n\nuse Foo::*; // To use Foo's variant directly, we need to import them in\n            // the scope.\n```\n\nEither way, it should work fine with our previous code:\n\n```edition2018\nstruct Type(u32);\n\nenum Foo {\n    Bar(u32),\n}\nuse Foo::*;\n\nlet Type(x) = Type(12); // ok!\nmatch Type(12) {\n    Type(x) => {} // ok!\n    _ => {}\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find tuple struct or tuple variant `Some` in this scope",
                "spans": [
                  {
                    "byte_end": 38458,
                    "byte_start": 38454,
                    "column_end": 27,
                    "column_start": 23,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 1246,
                    "line_start": 1246,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 27,
                        "highlight_start": 23,
                        "text": "        } else if let Some(first_vacant_index) = first_vacant_index {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#slab@0.4.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "slab",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0531]: cannot find tuple struct or tuple variant `Some` in this scope\n    --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\src\\lib.rs:1344:13\n     |\n1344 |             Some(&mut Entry::Occupied(ref mut v)) => v,\n     |             ^^^^ not found in this scope\n     |\nhelp: consider importing this tuple variant\n     |\n121  + use core::option::Option::Some;\n     |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this tuple variant",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 3991,
                        "byte_start": 3991,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 121,
                        "line_start": 121,
                        "suggested_replacement": "use core::option::Option::Some;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use alloc::vec::{self, Vec};"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0531",
                  "explanation": "An unknown tuple struct/variant has been used.\n\nErroneous code example:\n\n```compile_fail,E0531\nlet Type(x) = Type(12); // error!\nmatch Bar(12) {\n    Bar(x) => {} // error!\n    _ => {}\n}\n```\n\nIn most cases, it's either a forgotten import or a typo. However, let's look at\nhow you can have such a type:\n\n```edition2018\nstruct Type(u32); // this is a tuple struct\n\nenum Foo {\n    Bar(u32), // this is a tuple variant\n}\n\nuse Foo::*; // To use Foo's variant directly, we need to import them in\n            // the scope.\n```\n\nEither way, it should work fine with our previous code:\n\n```edition2018\nstruct Type(u32);\n\nenum Foo {\n    Bar(u32),\n}\nuse Foo::*;\n\nlet Type(x) = Type(12); // ok!\nmatch Type(12) {\n    Type(x) => {} // ok!\n    _ => {}\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find tuple struct or tuple variant `Some` in this scope",
                "spans": [
                  {
                    "byte_end": 40847,
                    "byte_start": 40843,
                    "column_end": 17,
                    "column_start": 13,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 1344,
                    "line_start": 1344,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 17,
                        "highlight_start": 13,
                        "text": "            Some(&mut Entry::Occupied(ref mut v)) => v,"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#slab@0.4.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "slab",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0405]: cannot find trait `Iterator` in this scope\n    --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\src\\lib.rs:1377:9\n     |\n1377 | impl<T> Iterator for IntoIter<T> {\n     |         ^^^^^^^^ not found in this scope\n     |\nhelp: consider importing one of these traits\n     |\n121  + use crate::iter::Iterator;\n     |\n121  + use core::iter::Iterator;\n     |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing one of these traits",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 3991,
                        "byte_start": 3991,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 121,
                        "line_start": 121,
                        "suggested_replacement": "use crate::iter::Iterator;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use alloc::vec::{self, Vec};"
                          }
                        ]
                      },
                      {
                        "byte_end": 3991,
                        "byte_start": 3991,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 121,
                        "line_start": 121,
                        "suggested_replacement": "use core::iter::Iterator;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use alloc::vec::{self, Vec};"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0405",
                  "explanation": "The code refers to a trait that is not in scope.\n\nErroneous code example:\n\n```compile_fail,E0405\nstruct Foo;\n\nimpl SomeTrait for Foo {} // error: trait `SomeTrait` is not in scope\n```\n\nPlease verify that the name of the trait wasn't misspelled and ensure that it\nwas imported. Example:\n\n```\n# #[cfg(for_demonstration_only)]\n// solution 1:\nuse some_file::SomeTrait;\n\n// solution 2:\ntrait SomeTrait {\n    // some functions\n}\n\nstruct Foo;\n\nimpl SomeTrait for Foo { // ok!\n    // implements functions\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find trait `Iterator` in this scope",
                "spans": [
                  {
                    "byte_end": 41566,
                    "byte_start": 41558,
                    "column_end": 17,
                    "column_start": 9,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 1377,
                    "line_start": 1377,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 17,
                        "highlight_start": 9,
                        "text": "impl<T> Iterator for IntoIter<T> {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#slab@0.4.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "slab",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0412]: cannot find type `Option` in this scope\n    --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\src\\lib.rs:1380:27\n     |\n1380 |     fn next(&mut self) -> Option<Self::Item> {\n     |                           ^^^^^^ not found in this scope\n     |\nhelp: consider importing this enum\n     |\n121  + use core::option::Option;\n     |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this enum",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 3991,
                        "byte_start": 3991,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 121,
                        "line_start": 121,
                        "suggested_replacement": "use core::option::Option;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use alloc::vec::{self, Vec};"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0412",
                  "explanation": "A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"
                },
                "level": "error",
                "message": "cannot find type `Option` in this scope",
                "spans": [
                  {
                    "byte_end": 41646,
                    "byte_start": 41640,
                    "column_end": 33,
                    "column_start": 27,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 1380,
                    "line_start": 1380,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 33,
                        "highlight_start": 27,
                        "text": "    fn next(&mut self) -> Option<Self::Item> {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#slab@0.4.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "slab",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0425]: cannot find function, tuple struct or tuple variant `Some` in this scope\n    --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\src\\lib.rs:1384:24\n     |\n1384 |                 return Some((key, v));\n     |                        ^^^^ not found in this scope\n     |\nhelp: consider importing this tuple variant\n     |\n121  + use core::option::Option::Some;\n     |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this tuple variant",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 3991,
                        "byte_start": 3991,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 121,
                        "line_start": 121,
                        "suggested_replacement": "use core::option::Option::Some;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use alloc::vec::{self, Vec};"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0425",
                  "explanation": "An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"
                },
                "level": "error",
                "message": "cannot find function, tuple struct or tuple variant `Some` in this scope",
                "spans": [
                  {
                    "byte_end": 41815,
                    "byte_start": 41811,
                    "column_end": 28,
                    "column_start": 24,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 1384,
                    "line_start": 1384,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 28,
                        "highlight_start": 24,
                        "text": "                return Some((key, v));"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#slab@0.4.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "slab",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0425]: cannot find value `None` in this scope\n    --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\src\\lib.rs:1389:9\n     |\n1389 |         None\n     |         ^^^^ not found in this scope\n     |\nhelp: consider importing this unit variant\n     |\n121  + use core::option::Option::None;\n     |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this unit variant",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 3991,
                        "byte_start": 3991,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 121,
                        "line_start": 121,
                        "suggested_replacement": "use core::option::Option::None;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use alloc::vec::{self, Vec};"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0425",
                  "explanation": "An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"
                },
                "level": "error",
                "message": "cannot find value `None` in this scope",
                "spans": [
                  {
                    "byte_end": 41903,
                    "byte_start": 41899,
                    "column_end": 13,
                    "column_start": 9,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 1389,
                    "line_start": 1389,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 13,
                        "highlight_start": 9,
                        "text": "        None"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#slab@0.4.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "slab",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0412]: cannot find type `Option` in this scope\n    --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\src\\lib.rs:1392:36\n     |\n1392 |     fn size_hint(&self) -> (usize, Option<usize>) {\n     |                                    ^^^^^^ not found in this scope\n     |\nhelp: consider importing this enum\n     |\n121  + use core::option::Option;\n     |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this enum",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 3991,
                        "byte_start": 3991,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 121,
                        "line_start": 121,
                        "suggested_replacement": "use core::option::Option;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use alloc::vec::{self, Vec};"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0412",
                  "explanation": "A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"
                },
                "level": "error",
                "message": "cannot find type `Option` in this scope",
                "spans": [
                  {
                    "byte_end": 41952,
                    "byte_start": 41946,
                    "column_end": 42,
                    "column_start": 36,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 1392,
                    "line_start": 1392,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 42,
                        "highlight_start": 36,
                        "text": "    fn size_hint(&self) -> (usize, Option<usize>) {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#slab@0.4.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "slab",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0425]: cannot find function, tuple struct or tuple variant `Some` in this scope\n    --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\src\\lib.rs:1393:20\n     |\n1393 |         (self.len, Some(self.len))\n     |                    ^^^^ not found in this scope\n     |\nhelp: consider importing this tuple variant\n     |\n121  + use core::option::Option::Some;\n     |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this tuple variant",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 3991,
                        "byte_start": 3991,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 121,
                        "line_start": 121,
                        "suggested_replacement": "use core::option::Option::Some;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use alloc::vec::{self, Vec};"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0425",
                  "explanation": "An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"
                },
                "level": "error",
                "message": "cannot find function, tuple struct or tuple variant `Some` in this scope",
                "spans": [
                  {
                    "byte_end": 41986,
                    "byte_start": 41982,
                    "column_end": 24,
                    "column_start": 20,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 1393,
                    "line_start": 1393,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 24,
                        "highlight_start": 20,
                        "text": "        (self.len, Some(self.len))"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#slab@0.4.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "slab",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0405]: cannot find trait `DoubleEndedIterator` in this scope\n    --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\src\\lib.rs:1397:9\n     |\n1397 | impl<T> DoubleEndedIterator for IntoIter<T> {\n     |         ^^^^^^^^^^^^^^^^^^^ not found in this scope\n     |\nhelp: consider importing one of these traits\n     |\n121  + use crate::iter::DoubleEndedIterator;\n     |\n121  + use core::iter::DoubleEndedIterator;\n     |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing one of these traits",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 3991,
                        "byte_start": 3991,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 121,
                        "line_start": 121,
                        "suggested_replacement": "use crate::iter::DoubleEndedIterator;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use alloc::vec::{self, Vec};"
                          }
                        ]
                      },
                      {
                        "byte_end": 3991,
                        "byte_start": 3991,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 121,
                        "line_start": 121,
                        "suggested_replacement": "use core::iter::DoubleEndedIterator;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use alloc::vec::{self, Vec};"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0405",
                  "explanation": "The code refers to a trait that is not in scope.\n\nErroneous code example:\n\n```compile_fail,E0405\nstruct Foo;\n\nimpl SomeTrait for Foo {} // error: trait `SomeTrait` is not in scope\n```\n\nPlease verify that the name of the trait wasn't misspelled and ensure that it\nwas imported. Example:\n\n```\n# #[cfg(for_demonstration_only)]\n// solution 1:\nuse some_file::SomeTrait;\n\n// solution 2:\ntrait SomeTrait {\n    // some functions\n}\n\nstruct Foo;\n\nimpl SomeTrait for Foo { // ok!\n    // implements functions\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find trait `DoubleEndedIterator` in this scope",
                "spans": [
                  {
                    "byte_end": 42034,
                    "byte_start": 42015,
                    "column_end": 28,
                    "column_start": 9,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 1397,
                    "line_start": 1397,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 28,
                        "highlight_start": 9,
                        "text": "impl<T> DoubleEndedIterator for IntoIter<T> {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#slab@0.4.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "slab",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0412]: cannot find type `Option` in this scope\n    --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\src\\lib.rs:1398:32\n     |\n1398 |     fn next_back(&mut self) -> Option<Self::Item> {\n     |                                ^^^^^^ not found in this scope\n     |\nhelp: consider importing this enum\n     |\n121  + use core::option::Option;\n     |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this enum",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 3991,
                        "byte_start": 3991,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 121,
                        "line_start": 121,
                        "suggested_replacement": "use core::option::Option;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use alloc::vec::{self, Vec};"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0412",
                  "explanation": "A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"
                },
                "level": "error",
                "message": "cannot find type `Option` in this scope",
                "spans": [
                  {
                    "byte_end": 42090,
                    "byte_start": 42084,
                    "column_end": 38,
                    "column_start": 32,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 1398,
                    "line_start": 1398,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 38,
                        "highlight_start": 32,
                        "text": "    fn next_back(&mut self) -> Option<Self::Item> {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#slab@0.4.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "slab",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0531]: cannot find tuple struct or tuple variant `Some` in this scope\n    --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\src\\lib.rs:1399:19\n     |\n1399 |         while let Some((key, entry)) = self.entries.next_back() {\n     |                   ^^^^ not found in this scope\n     |\nhelp: consider importing this tuple variant\n     |\n121  + use core::option::Option::Some;\n     |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this tuple variant",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 3991,
                        "byte_start": 3991,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 121,
                        "line_start": 121,
                        "suggested_replacement": "use core::option::Option::Some;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use alloc::vec::{self, Vec};"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0531",
                  "explanation": "An unknown tuple struct/variant has been used.\n\nErroneous code example:\n\n```compile_fail,E0531\nlet Type(x) = Type(12); // error!\nmatch Bar(12) {\n    Bar(x) => {} // error!\n    _ => {}\n}\n```\n\nIn most cases, it's either a forgotten import or a typo. However, let's look at\nhow you can have such a type:\n\n```edition2018\nstruct Type(u32); // this is a tuple struct\n\nenum Foo {\n    Bar(u32), // this is a tuple variant\n}\n\nuse Foo::*; // To use Foo's variant directly, we need to import them in\n            // the scope.\n```\n\nEither way, it should work fine with our previous code:\n\n```edition2018\nstruct Type(u32);\n\nenum Foo {\n    Bar(u32),\n}\nuse Foo::*;\n\nlet Type(x) = Type(12); // ok!\nmatch Type(12) {\n    Type(x) => {} // ok!\n    _ => {}\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find tuple struct or tuple variant `Some` in this scope",
                "spans": [
                  {
                    "byte_end": 42127,
                    "byte_start": 42123,
                    "column_end": 23,
                    "column_start": 19,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 1399,
                    "line_start": 1399,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 23,
                        "highlight_start": 19,
                        "text": "        while let Some((key, entry)) = self.entries.next_back() {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#slab@0.4.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "slab",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0425]: cannot find function, tuple struct or tuple variant `Some` in this scope\n    --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\src\\lib.rs:1402:24\n     |\n1402 |                 return Some((key, v));\n     |                        ^^^^ not found in this scope\n     |\nhelp: consider importing this tuple variant\n     |\n121  + use core::option::Option::Some;\n     |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this tuple variant",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 3991,
                        "byte_start": 3991,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 121,
                        "line_start": 121,
                        "suggested_replacement": "use core::option::Option::Some;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use alloc::vec::{self, Vec};"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0425",
                  "explanation": "An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"
                },
                "level": "error",
                "message": "cannot find function, tuple struct or tuple variant `Some` in this scope",
                "spans": [
                  {
                    "byte_end": 42277,
                    "byte_start": 42273,
                    "column_end": 28,
                    "column_start": 24,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 1402,
                    "line_start": 1402,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 28,
                        "highlight_start": 24,
                        "text": "                return Some((key, v));"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#slab@0.4.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "slab",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0425]: cannot find value `None` in this scope\n    --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\src\\lib.rs:1407:9\n     |\n1407 |         None\n     |         ^^^^ not found in this scope\n     |\nhelp: consider importing this unit variant\n     |\n121  + use core::option::Option::None;\n     |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this unit variant",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 3991,
                        "byte_start": 3991,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 121,
                        "line_start": 121,
                        "suggested_replacement": "use core::option::Option::None;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use alloc::vec::{self, Vec};"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0425",
                  "explanation": "An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"
                },
                "level": "error",
                "message": "cannot find value `None` in this scope",
                "spans": [
                  {
                    "byte_end": 42365,
                    "byte_start": 42361,
                    "column_end": 13,
                    "column_start": 9,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 1407,
                    "line_start": 1407,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 13,
                        "highlight_start": 9,
                        "text": "        None"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#slab@0.4.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "slab",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0405]: cannot find trait `ExactSizeIterator` in this scope\n    --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\src\\lib.rs:1411:9\n     |\n1411 | impl<T> ExactSizeIterator for IntoIter<T> {\n     |         ^^^^^^^^^^^^^^^^^ not found in this scope\n     |\nhelp: consider importing one of these traits\n     |\n121  + use crate::iter::ExactSizeIterator;\n     |\n121  + use core::iter::ExactSizeIterator;\n     |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing one of these traits",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 3991,
                        "byte_start": 3991,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 121,
                        "line_start": 121,
                        "suggested_replacement": "use crate::iter::ExactSizeIterator;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use alloc::vec::{self, Vec};"
                          }
                        ]
                      },
                      {
                        "byte_end": 3991,
                        "byte_start": 3991,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 121,
                        "line_start": 121,
                        "suggested_replacement": "use core::iter::ExactSizeIterator;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use alloc::vec::{self, Vec};"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0405",
                  "explanation": "The code refers to a trait that is not in scope.\n\nErroneous code example:\n\n```compile_fail,E0405\nstruct Foo;\n\nimpl SomeTrait for Foo {} // error: trait `SomeTrait` is not in scope\n```\n\nPlease verify that the name of the trait wasn't misspelled and ensure that it\nwas imported. Example:\n\n```\n# #[cfg(for_demonstration_only)]\n// solution 1:\nuse some_file::SomeTrait;\n\n// solution 2:\ntrait SomeTrait {\n    // some functions\n}\n\nstruct Foo;\n\nimpl SomeTrait for Foo { // ok!\n    // implements functions\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find trait `ExactSizeIterator` in this scope",
                "spans": [
                  {
                    "byte_end": 42400,
                    "byte_start": 42383,
                    "column_end": 26,
                    "column_start": 9,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 1411,
                    "line_start": 1411,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 26,
                        "highlight_start": 9,
                        "text": "impl<T> ExactSizeIterator for IntoIter<T> {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#slab@0.4.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "slab",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0405]: cannot find trait `Iterator` in this scope\n    --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\src\\lib.rs:1421:13\n     |\n1421 | impl<'a, T> Iterator for Iter<'a, T> {\n     |             ^^^^^^^^ not found in this scope\n     |\nhelp: consider importing one of these traits\n     |\n121  + use crate::iter::Iterator;\n     |\n121  + use core::iter::Iterator;\n     |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing one of these traits",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 3991,
                        "byte_start": 3991,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 121,
                        "line_start": 121,
                        "suggested_replacement": "use crate::iter::Iterator;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use alloc::vec::{self, Vec};"
                          }
                        ]
                      },
                      {
                        "byte_end": 3991,
                        "byte_start": 3991,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 121,
                        "line_start": 121,
                        "suggested_replacement": "use core::iter::Iterator;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use alloc::vec::{self, Vec};"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0405",
                  "explanation": "The code refers to a trait that is not in scope.\n\nErroneous code example:\n\n```compile_fail,E0405\nstruct Foo;\n\nimpl SomeTrait for Foo {} // error: trait `SomeTrait` is not in scope\n```\n\nPlease verify that the name of the trait wasn't misspelled and ensure that it\nwas imported. Example:\n\n```\n# #[cfg(for_demonstration_only)]\n// solution 1:\nuse some_file::SomeTrait;\n\n// solution 2:\ntrait SomeTrait {\n    // some functions\n}\n\nstruct Foo;\n\nimpl SomeTrait for Foo { // ok!\n    // implements functions\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find trait `Iterator` in this scope",
                "spans": [
                  {
                    "byte_end": 42557,
                    "byte_start": 42549,
                    "column_end": 21,
                    "column_start": 13,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 1421,
                    "line_start": 1421,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 21,
                        "highlight_start": 13,
                        "text": "impl<'a, T> Iterator for Iter<'a, T> {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#slab@0.4.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "slab",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0412]: cannot find type `Option` in this scope\n    --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\src\\lib.rs:1424:27\n     |\n1424 |     fn next(&mut self) -> Option<Self::Item> {\n     |                           ^^^^^^ not found in this scope\n     |\nhelp: consider importing this enum\n     |\n121  + use core::option::Option;\n     |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this enum",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 3991,
                        "byte_start": 3991,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 121,
                        "line_start": 121,
                        "suggested_replacement": "use core::option::Option;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use alloc::vec::{self, Vec};"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0412",
                  "explanation": "A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"
                },
                "level": "error",
                "message": "cannot find type `Option` in this scope",
                "spans": [
                  {
                    "byte_end": 42641,
                    "byte_start": 42635,
                    "column_end": 33,
                    "column_start": 27,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 1424,
                    "line_start": 1424,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 33,
                        "highlight_start": 27,
                        "text": "    fn next(&mut self) -> Option<Self::Item> {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#slab@0.4.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "slab",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0425]: cannot find function, tuple struct or tuple variant `Some` in this scope\n    --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\src\\lib.rs:1428:24\n     |\n1428 |                 return Some((key, v));\n     |                        ^^^^ not found in this scope\n     |\nhelp: consider importing this tuple variant\n     |\n121  + use core::option::Option::Some;\n     |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this tuple variant",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 3991,
                        "byte_start": 3991,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 121,
                        "line_start": 121,
                        "suggested_replacement": "use core::option::Option::Some;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use alloc::vec::{self, Vec};"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0425",
                  "explanation": "An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"
                },
                "level": "error",
                "message": "cannot find function, tuple struct or tuple variant `Some` in this scope",
                "spans": [
                  {
                    "byte_end": 42815,
                    "byte_start": 42811,
                    "column_end": 28,
                    "column_start": 24,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 1428,
                    "line_start": 1428,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 28,
                        "highlight_start": 24,
                        "text": "                return Some((key, v));"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#slab@0.4.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "slab",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0425]: cannot find value `None` in this scope\n    --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\src\\lib.rs:1433:9\n     |\n1433 |         None\n     |         ^^^^ not found in this scope\n     |\nhelp: consider importing this unit variant\n     |\n121  + use core::option::Option::None;\n     |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this unit variant",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 3991,
                        "byte_start": 3991,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 121,
                        "line_start": 121,
                        "suggested_replacement": "use core::option::Option::None;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use alloc::vec::{self, Vec};"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0425",
                  "explanation": "An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"
                },
                "level": "error",
                "message": "cannot find value `None` in this scope",
                "spans": [
                  {
                    "byte_end": 42903,
                    "byte_start": 42899,
                    "column_end": 13,
                    "column_start": 9,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 1433,
                    "line_start": 1433,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 13,
                        "highlight_start": 9,
                        "text": "        None"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#slab@0.4.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "slab",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0412]: cannot find type `Option` in this scope\n    --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\src\\lib.rs:1436:36\n     |\n1436 |     fn size_hint(&self) -> (usize, Option<usize>) {\n     |                                    ^^^^^^ not found in this scope\n     |\nhelp: consider importing this enum\n     |\n121  + use core::option::Option;\n     |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this enum",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 3991,
                        "byte_start": 3991,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 121,
                        "line_start": 121,
                        "suggested_replacement": "use core::option::Option;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use alloc::vec::{self, Vec};"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0412",
                  "explanation": "A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"
                },
                "level": "error",
                "message": "cannot find type `Option` in this scope",
                "spans": [
                  {
                    "byte_end": 42952,
                    "byte_start": 42946,
                    "column_end": 42,
                    "column_start": 36,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 1436,
                    "line_start": 1436,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 42,
                        "highlight_start": 36,
                        "text": "    fn size_hint(&self) -> (usize, Option<usize>) {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#slab@0.4.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "slab",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0425]: cannot find function, tuple struct or tuple variant `Some` in this scope\n    --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\src\\lib.rs:1437:20\n     |\n1437 |         (self.len, Some(self.len))\n     |                    ^^^^ not found in this scope\n     |\nhelp: consider importing this tuple variant\n     |\n121  + use core::option::Option::Some;\n     |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this tuple variant",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 3991,
                        "byte_start": 3991,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 121,
                        "line_start": 121,
                        "suggested_replacement": "use core::option::Option::Some;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use alloc::vec::{self, Vec};"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0425",
                  "explanation": "An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"
                },
                "level": "error",
                "message": "cannot find function, tuple struct or tuple variant `Some` in this scope",
                "spans": [
                  {
                    "byte_end": 42986,
                    "byte_start": 42982,
                    "column_end": 24,
                    "column_start": 20,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 1437,
                    "line_start": 1437,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 24,
                        "highlight_start": 20,
                        "text": "        (self.len, Some(self.len))"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#slab@0.4.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "slab",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0405]: cannot find trait `DoubleEndedIterator` in this scope\n    --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\src\\lib.rs:1441:9\n     |\n1441 | impl<T> DoubleEndedIterator for Iter<'_, T> {\n     |         ^^^^^^^^^^^^^^^^^^^ not found in this scope\n     |\nhelp: consider importing one of these traits\n     |\n121  + use crate::iter::DoubleEndedIterator;\n     |\n121  + use core::iter::DoubleEndedIterator;\n     |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing one of these traits",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 3991,
                        "byte_start": 3991,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 121,
                        "line_start": 121,
                        "suggested_replacement": "use crate::iter::DoubleEndedIterator;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use alloc::vec::{self, Vec};"
                          }
                        ]
                      },
                      {
                        "byte_end": 3991,
                        "byte_start": 3991,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 121,
                        "line_start": 121,
                        "suggested_replacement": "use core::iter::DoubleEndedIterator;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use alloc::vec::{self, Vec};"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0405",
                  "explanation": "The code refers to a trait that is not in scope.\n\nErroneous code example:\n\n```compile_fail,E0405\nstruct Foo;\n\nimpl SomeTrait for Foo {} // error: trait `SomeTrait` is not in scope\n```\n\nPlease verify that the name of the trait wasn't misspelled and ensure that it\nwas imported. Example:\n\n```\n# #[cfg(for_demonstration_only)]\n// solution 1:\nuse some_file::SomeTrait;\n\n// solution 2:\ntrait SomeTrait {\n    // some functions\n}\n\nstruct Foo;\n\nimpl SomeTrait for Foo { // ok!\n    // implements functions\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find trait `DoubleEndedIterator` in this scope",
                "spans": [
                  {
                    "byte_end": 43034,
                    "byte_start": 43015,
                    "column_end": 28,
                    "column_start": 9,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 1441,
                    "line_start": 1441,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 28,
                        "highlight_start": 9,
                        "text": "impl<T> DoubleEndedIterator for Iter<'_, T> {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#slab@0.4.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "slab",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0412]: cannot find type `Option` in this scope\n    --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\src\\lib.rs:1442:32\n     |\n1442 |     fn next_back(&mut self) -> Option<Self::Item> {\n     |                                ^^^^^^ not found in this scope\n     |\nhelp: consider importing this enum\n     |\n121  + use core::option::Option;\n     |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this enum",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 3991,
                        "byte_start": 3991,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 121,
                        "line_start": 121,
                        "suggested_replacement": "use core::option::Option;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use alloc::vec::{self, Vec};"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0412",
                  "explanation": "A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"
                },
                "level": "error",
                "message": "cannot find type `Option` in this scope",
                "spans": [
                  {
                    "byte_end": 43090,
                    "byte_start": 43084,
                    "column_end": 38,
                    "column_start": 32,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 1442,
                    "line_start": 1442,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 38,
                        "highlight_start": 32,
                        "text": "    fn next_back(&mut self) -> Option<Self::Item> {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#slab@0.4.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "slab",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0531]: cannot find tuple struct or tuple variant `Some` in this scope\n    --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\src\\lib.rs:1443:19\n     |\n1443 |         while let Some((key, entry)) = self.entries.next_back() {\n     |                   ^^^^ not found in this scope\n     |\nhelp: consider importing this tuple variant\n     |\n121  + use core::option::Option::Some;\n     |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this tuple variant",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 3991,
                        "byte_start": 3991,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 121,
                        "line_start": 121,
                        "suggested_replacement": "use core::option::Option::Some;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use alloc::vec::{self, Vec};"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0531",
                  "explanation": "An unknown tuple struct/variant has been used.\n\nErroneous code example:\n\n```compile_fail,E0531\nlet Type(x) = Type(12); // error!\nmatch Bar(12) {\n    Bar(x) => {} // error!\n    _ => {}\n}\n```\n\nIn most cases, it's either a forgotten import or a typo. However, let's look at\nhow you can have such a type:\n\n```edition2018\nstruct Type(u32); // this is a tuple struct\n\nenum Foo {\n    Bar(u32), // this is a tuple variant\n}\n\nuse Foo::*; // To use Foo's variant directly, we need to import them in\n            // the scope.\n```\n\nEither way, it should work fine with our previous code:\n\n```edition2018\nstruct Type(u32);\n\nenum Foo {\n    Bar(u32),\n}\nuse Foo::*;\n\nlet Type(x) = Type(12); // ok!\nmatch Type(12) {\n    Type(x) => {} // ok!\n    _ => {}\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find tuple struct or tuple variant `Some` in this scope",
                "spans": [
                  {
                    "byte_end": 43127,
                    "byte_start": 43123,
                    "column_end": 23,
                    "column_start": 19,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 1443,
                    "line_start": 1443,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 23,
                        "highlight_start": 19,
                        "text": "        while let Some((key, entry)) = self.entries.next_back() {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#slab@0.4.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "slab",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0425]: cannot find function, tuple struct or tuple variant `Some` in this scope\n    --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\src\\lib.rs:1446:24\n     |\n1446 |                 return Some((key, v));\n     |                        ^^^^ not found in this scope\n     |\nhelp: consider importing this tuple variant\n     |\n121  + use core::option::Option::Some;\n     |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this tuple variant",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 3991,
                        "byte_start": 3991,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 121,
                        "line_start": 121,
                        "suggested_replacement": "use core::option::Option::Some;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use alloc::vec::{self, Vec};"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0425",
                  "explanation": "An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"
                },
                "level": "error",
                "message": "cannot find function, tuple struct or tuple variant `Some` in this scope",
                "spans": [
                  {
                    "byte_end": 43282,
                    "byte_start": 43278,
                    "column_end": 28,
                    "column_start": 24,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 1446,
                    "line_start": 1446,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 28,
                        "highlight_start": 24,
                        "text": "                return Some((key, v));"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#slab@0.4.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "slab",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0425]: cannot find value `None` in this scope\n    --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\src\\lib.rs:1451:9\n     |\n1451 |         None\n     |         ^^^^ not found in this scope\n     |\nhelp: consider importing this unit variant\n     |\n121  + use core::option::Option::None;\n     |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this unit variant",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 3991,
                        "byte_start": 3991,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 121,
                        "line_start": 121,
                        "suggested_replacement": "use core::option::Option::None;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use alloc::vec::{self, Vec};"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0425",
                  "explanation": "An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"
                },
                "level": "error",
                "message": "cannot find value `None` in this scope",
                "spans": [
                  {
                    "byte_end": 43370,
                    "byte_start": 43366,
                    "column_end": 13,
                    "column_start": 9,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 1451,
                    "line_start": 1451,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 13,
                        "highlight_start": 9,
                        "text": "        None"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#slab@0.4.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "slab",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0405]: cannot find trait `ExactSizeIterator` in this scope\n    --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\src\\lib.rs:1455:9\n     |\n1455 | impl<T> ExactSizeIterator for Iter<'_, T> {\n     |         ^^^^^^^^^^^^^^^^^ not found in this scope\n     |\nhelp: consider importing one of these traits\n     |\n121  + use crate::iter::ExactSizeIterator;\n     |\n121  + use core::iter::ExactSizeIterator;\n     |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing one of these traits",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 3991,
                        "byte_start": 3991,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 121,
                        "line_start": 121,
                        "suggested_replacement": "use crate::iter::ExactSizeIterator;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use alloc::vec::{self, Vec};"
                          }
                        ]
                      },
                      {
                        "byte_end": 3991,
                        "byte_start": 3991,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 121,
                        "line_start": 121,
                        "suggested_replacement": "use core::iter::ExactSizeIterator;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use alloc::vec::{self, Vec};"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0405",
                  "explanation": "The code refers to a trait that is not in scope.\n\nErroneous code example:\n\n```compile_fail,E0405\nstruct Foo;\n\nimpl SomeTrait for Foo {} // error: trait `SomeTrait` is not in scope\n```\n\nPlease verify that the name of the trait wasn't misspelled and ensure that it\nwas imported. Example:\n\n```\n# #[cfg(for_demonstration_only)]\n// solution 1:\nuse some_file::SomeTrait;\n\n// solution 2:\ntrait SomeTrait {\n    // some functions\n}\n\nstruct Foo;\n\nimpl SomeTrait for Foo { // ok!\n    // implements functions\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find trait `ExactSizeIterator` in this scope",
                "spans": [
                  {
                    "byte_end": 43405,
                    "byte_start": 43388,
                    "column_end": 26,
                    "column_start": 9,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 1455,
                    "line_start": 1455,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 26,
                        "highlight_start": 9,
                        "text": "impl<T> ExactSizeIterator for Iter<'_, T> {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#slab@0.4.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "slab",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0405]: cannot find trait `Iterator` in this scope\n    --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\src\\lib.rs:1465:13\n     |\n1465 | impl<'a, T> Iterator for IterMut<'a, T> {\n     |             ^^^^^^^^ not found in this scope\n     |\nhelp: consider importing one of these traits\n     |\n121  + use crate::iter::Iterator;\n     |\n121  + use core::iter::Iterator;\n     |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing one of these traits",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 3991,
                        "byte_start": 3991,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 121,
                        "line_start": 121,
                        "suggested_replacement": "use crate::iter::Iterator;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use alloc::vec::{self, Vec};"
                          }
                        ]
                      },
                      {
                        "byte_end": 3991,
                        "byte_start": 3991,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 121,
                        "line_start": 121,
                        "suggested_replacement": "use core::iter::Iterator;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use alloc::vec::{self, Vec};"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0405",
                  "explanation": "The code refers to a trait that is not in scope.\n\nErroneous code example:\n\n```compile_fail,E0405\nstruct Foo;\n\nimpl SomeTrait for Foo {} // error: trait `SomeTrait` is not in scope\n```\n\nPlease verify that the name of the trait wasn't misspelled and ensure that it\nwas imported. Example:\n\n```\n# #[cfg(for_demonstration_only)]\n// solution 1:\nuse some_file::SomeTrait;\n\n// solution 2:\ntrait SomeTrait {\n    // some functions\n}\n\nstruct Foo;\n\nimpl SomeTrait for Foo { // ok!\n    // implements functions\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find trait `Iterator` in this scope",
                "spans": [
                  {
                    "byte_end": 43565,
                    "byte_start": 43557,
                    "column_end": 21,
                    "column_start": 13,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 1465,
                    "line_start": 1465,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 21,
                        "highlight_start": 13,
                        "text": "impl<'a, T> Iterator for IterMut<'a, T> {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#slab@0.4.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "slab",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0412]: cannot find type `Option` in this scope\n    --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\src\\lib.rs:1468:27\n     |\n1468 |     fn next(&mut self) -> Option<Self::Item> {\n     |                           ^^^^^^ not found in this scope\n     |\nhelp: consider importing this enum\n     |\n121  + use core::option::Option;\n     |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this enum",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 3991,
                        "byte_start": 3991,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 121,
                        "line_start": 121,
                        "suggested_replacement": "use core::option::Option;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use alloc::vec::{self, Vec};"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0412",
                  "explanation": "A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"
                },
                "level": "error",
                "message": "cannot find type `Option` in this scope",
                "spans": [
                  {
                    "byte_end": 43656,
                    "byte_start": 43650,
                    "column_end": 33,
                    "column_start": 27,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 1468,
                    "line_start": 1468,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 33,
                        "highlight_start": 27,
                        "text": "    fn next(&mut self) -> Option<Self::Item> {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#slab@0.4.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "slab",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0425]: cannot find function, tuple struct or tuple variant `Some` in this scope\n    --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\src\\lib.rs:1472:24\n     |\n1472 |                 return Some((key, v));\n     |                        ^^^^ not found in this scope\n     |\nhelp: consider importing this tuple variant\n     |\n121  + use core::option::Option::Some;\n     |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this tuple variant",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 3991,
                        "byte_start": 3991,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 121,
                        "line_start": 121,
                        "suggested_replacement": "use core::option::Option::Some;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use alloc::vec::{self, Vec};"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0425",
                  "explanation": "An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"
                },
                "level": "error",
                "message": "cannot find function, tuple struct or tuple variant `Some` in this scope",
                "spans": [
                  {
                    "byte_end": 43834,
                    "byte_start": 43830,
                    "column_end": 28,
                    "column_start": 24,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 1472,
                    "line_start": 1472,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 28,
                        "highlight_start": 24,
                        "text": "                return Some((key, v));"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#slab@0.4.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "slab",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0425]: cannot find value `None` in this scope\n    --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\src\\lib.rs:1477:9\n     |\n1477 |         None\n     |         ^^^^ not found in this scope\n     |\nhelp: consider importing this unit variant\n     |\n121  + use core::option::Option::None;\n     |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this unit variant",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 3991,
                        "byte_start": 3991,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 121,
                        "line_start": 121,
                        "suggested_replacement": "use core::option::Option::None;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use alloc::vec::{self, Vec};"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0425",
                  "explanation": "An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"
                },
                "level": "error",
                "message": "cannot find value `None` in this scope",
                "spans": [
                  {
                    "byte_end": 43922,
                    "byte_start": 43918,
                    "column_end": 13,
                    "column_start": 9,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 1477,
                    "line_start": 1477,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 13,
                        "highlight_start": 9,
                        "text": "        None"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#slab@0.4.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "slab",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0412]: cannot find type `Option` in this scope\n    --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\src\\lib.rs:1480:36\n     |\n1480 |     fn size_hint(&self) -> (usize, Option<usize>) {\n     |                                    ^^^^^^ not found in this scope\n     |\nhelp: consider importing this enum\n     |\n121  + use core::option::Option;\n     |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this enum",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 3991,
                        "byte_start": 3991,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 121,
                        "line_start": 121,
                        "suggested_replacement": "use core::option::Option;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use alloc::vec::{self, Vec};"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0412",
                  "explanation": "A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"
                },
                "level": "error",
                "message": "cannot find type `Option` in this scope",
                "spans": [
                  {
                    "byte_end": 43971,
                    "byte_start": 43965,
                    "column_end": 42,
                    "column_start": 36,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 1480,
                    "line_start": 1480,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 42,
                        "highlight_start": 36,
                        "text": "    fn size_hint(&self) -> (usize, Option<usize>) {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#slab@0.4.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "slab",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0425]: cannot find function, tuple struct or tuple variant `Some` in this scope\n    --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\src\\lib.rs:1481:20\n     |\n1481 |         (self.len, Some(self.len))\n     |                    ^^^^ not found in this scope\n     |\nhelp: consider importing this tuple variant\n     |\n121  + use core::option::Option::Some;\n     |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this tuple variant",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 3991,
                        "byte_start": 3991,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 121,
                        "line_start": 121,
                        "suggested_replacement": "use core::option::Option::Some;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use alloc::vec::{self, Vec};"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0425",
                  "explanation": "An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"
                },
                "level": "error",
                "message": "cannot find function, tuple struct or tuple variant `Some` in this scope",
                "spans": [
                  {
                    "byte_end": 44005,
                    "byte_start": 44001,
                    "column_end": 24,
                    "column_start": 20,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 1481,
                    "line_start": 1481,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 24,
                        "highlight_start": 20,
                        "text": "        (self.len, Some(self.len))"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#slab@0.4.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "slab",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0405]: cannot find trait `DoubleEndedIterator` in this scope\n    --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\src\\lib.rs:1485:9\n     |\n1485 | impl<T> DoubleEndedIterator for IterMut<'_, T> {\n     |         ^^^^^^^^^^^^^^^^^^^ not found in this scope\n     |\nhelp: consider importing one of these traits\n     |\n121  + use crate::iter::DoubleEndedIterator;\n     |\n121  + use core::iter::DoubleEndedIterator;\n     |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing one of these traits",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 3991,
                        "byte_start": 3991,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 121,
                        "line_start": 121,
                        "suggested_replacement": "use crate::iter::DoubleEndedIterator;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use alloc::vec::{self, Vec};"
                          }
                        ]
                      },
                      {
                        "byte_end": 3991,
                        "byte_start": 3991,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 121,
                        "line_start": 121,
                        "suggested_replacement": "use core::iter::DoubleEndedIterator;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use alloc::vec::{self, Vec};"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0405",
                  "explanation": "The code refers to a trait that is not in scope.\n\nErroneous code example:\n\n```compile_fail,E0405\nstruct Foo;\n\nimpl SomeTrait for Foo {} // error: trait `SomeTrait` is not in scope\n```\n\nPlease verify that the name of the trait wasn't misspelled and ensure that it\nwas imported. Example:\n\n```\n# #[cfg(for_demonstration_only)]\n// solution 1:\nuse some_file::SomeTrait;\n\n// solution 2:\ntrait SomeTrait {\n    // some functions\n}\n\nstruct Foo;\n\nimpl SomeTrait for Foo { // ok!\n    // implements functions\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find trait `DoubleEndedIterator` in this scope",
                "spans": [
                  {
                    "byte_end": 44053,
                    "byte_start": 44034,
                    "column_end": 28,
                    "column_start": 9,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 1485,
                    "line_start": 1485,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 28,
                        "highlight_start": 9,
                        "text": "impl<T> DoubleEndedIterator for IterMut<'_, T> {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#slab@0.4.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "slab",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0412]: cannot find type `Option` in this scope\n    --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\src\\lib.rs:1486:32\n     |\n1486 |     fn next_back(&mut self) -> Option<Self::Item> {\n     |                                ^^^^^^ not found in this scope\n     |\nhelp: consider importing this enum\n     |\n121  + use core::option::Option;\n     |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this enum",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 3991,
                        "byte_start": 3991,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 121,
                        "line_start": 121,
                        "suggested_replacement": "use core::option::Option;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use alloc::vec::{self, Vec};"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0412",
                  "explanation": "A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"
                },
                "level": "error",
                "message": "cannot find type `Option` in this scope",
                "spans": [
                  {
                    "byte_end": 44112,
                    "byte_start": 44106,
                    "column_end": 38,
                    "column_start": 32,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 1486,
                    "line_start": 1486,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 38,
                        "highlight_start": 32,
                        "text": "    fn next_back(&mut self) -> Option<Self::Item> {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#slab@0.4.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "slab",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0531]: cannot find tuple struct or tuple variant `Some` in this scope\n    --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\src\\lib.rs:1487:19\n     |\n1487 |         while let Some((key, entry)) = self.entries.next_back() {\n     |                   ^^^^ not found in this scope\n     |\nhelp: consider importing this tuple variant\n     |\n121  + use core::option::Option::Some;\n     |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this tuple variant",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 3991,
                        "byte_start": 3991,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 121,
                        "line_start": 121,
                        "suggested_replacement": "use core::option::Option::Some;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use alloc::vec::{self, Vec};"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0531",
                  "explanation": "An unknown tuple struct/variant has been used.\n\nErroneous code example:\n\n```compile_fail,E0531\nlet Type(x) = Type(12); // error!\nmatch Bar(12) {\n    Bar(x) => {} // error!\n    _ => {}\n}\n```\n\nIn most cases, it's either a forgotten import or a typo. However, let's look at\nhow you can have such a type:\n\n```edition2018\nstruct Type(u32); // this is a tuple struct\n\nenum Foo {\n    Bar(u32), // this is a tuple variant\n}\n\nuse Foo::*; // To use Foo's variant directly, we need to import them in\n            // the scope.\n```\n\nEither way, it should work fine with our previous code:\n\n```edition2018\nstruct Type(u32);\n\nenum Foo {\n    Bar(u32),\n}\nuse Foo::*;\n\nlet Type(x) = Type(12); // ok!\nmatch Type(12) {\n    Type(x) => {} // ok!\n    _ => {}\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find tuple struct or tuple variant `Some` in this scope",
                "spans": [
                  {
                    "byte_end": 44149,
                    "byte_start": 44145,
                    "column_end": 23,
                    "column_start": 19,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 1487,
                    "line_start": 1487,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 23,
                        "highlight_start": 19,
                        "text": "        while let Some((key, entry)) = self.entries.next_back() {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#slab@0.4.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "slab",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0425]: cannot find function, tuple struct or tuple variant `Some` in this scope\n    --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\src\\lib.rs:1490:24\n     |\n1490 |                 return Some((key, v));\n     |                        ^^^^ not found in this scope\n     |\nhelp: consider importing this tuple variant\n     |\n121  + use core::option::Option::Some;\n     |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this tuple variant",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 3991,
                        "byte_start": 3991,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 121,
                        "line_start": 121,
                        "suggested_replacement": "use core::option::Option::Some;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use alloc::vec::{self, Vec};"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0425",
                  "explanation": "An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"
                },
                "level": "error",
                "message": "cannot find function, tuple struct or tuple variant `Some` in this scope",
                "spans": [
                  {
                    "byte_end": 44308,
                    "byte_start": 44304,
                    "column_end": 28,
                    "column_start": 24,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 1490,
                    "line_start": 1490,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 28,
                        "highlight_start": 24,
                        "text": "                return Some((key, v));"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#slab@0.4.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "slab",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0425]: cannot find value `None` in this scope\n    --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\src\\lib.rs:1495:9\n     |\n1495 |         None\n     |         ^^^^ not found in this scope\n     |\nhelp: consider importing this unit variant\n     |\n121  + use core::option::Option::None;\n     |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this unit variant",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 3991,
                        "byte_start": 3991,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 121,
                        "line_start": 121,
                        "suggested_replacement": "use core::option::Option::None;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use alloc::vec::{self, Vec};"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0425",
                  "explanation": "An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"
                },
                "level": "error",
                "message": "cannot find value `None` in this scope",
                "spans": [
                  {
                    "byte_end": 44396,
                    "byte_start": 44392,
                    "column_end": 13,
                    "column_start": 9,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 1495,
                    "line_start": 1495,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 13,
                        "highlight_start": 9,
                        "text": "        None"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#slab@0.4.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "slab",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0405]: cannot find trait `ExactSizeIterator` in this scope\n    --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\src\\lib.rs:1499:9\n     |\n1499 | impl<T> ExactSizeIterator for IterMut<'_, T> {\n     |         ^^^^^^^^^^^^^^^^^ not found in this scope\n     |\nhelp: consider importing one of these traits\n     |\n121  + use crate::iter::ExactSizeIterator;\n     |\n121  + use core::iter::ExactSizeIterator;\n     |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing one of these traits",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 3991,
                        "byte_start": 3991,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 121,
                        "line_start": 121,
                        "suggested_replacement": "use crate::iter::ExactSizeIterator;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use alloc::vec::{self, Vec};"
                          }
                        ]
                      },
                      {
                        "byte_end": 3991,
                        "byte_start": 3991,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 121,
                        "line_start": 121,
                        "suggested_replacement": "use core::iter::ExactSizeIterator;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use alloc::vec::{self, Vec};"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0405",
                  "explanation": "The code refers to a trait that is not in scope.\n\nErroneous code example:\n\n```compile_fail,E0405\nstruct Foo;\n\nimpl SomeTrait for Foo {} // error: trait `SomeTrait` is not in scope\n```\n\nPlease verify that the name of the trait wasn't misspelled and ensure that it\nwas imported. Example:\n\n```\n# #[cfg(for_demonstration_only)]\n// solution 1:\nuse some_file::SomeTrait;\n\n// solution 2:\ntrait SomeTrait {\n    // some functions\n}\n\nstruct Foo;\n\nimpl SomeTrait for Foo { // ok!\n    // implements functions\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find trait `ExactSizeIterator` in this scope",
                "spans": [
                  {
                    "byte_end": 44431,
                    "byte_start": 44414,
                    "column_end": 26,
                    "column_start": 9,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 1499,
                    "line_start": 1499,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 26,
                        "highlight_start": 9,
                        "text": "impl<T> ExactSizeIterator for IterMut<'_, T> {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#slab@0.4.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "slab",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0405]: cannot find trait `Iterator` in this scope\n    --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\src\\lib.rs:1509:9\n     |\n1509 | impl<T> Iterator for Drain<'_, T> {\n     |         ^^^^^^^^ not found in this scope\n     |\nhelp: consider importing one of these traits\n     |\n121  + use crate::iter::Iterator;\n     |\n121  + use core::iter::Iterator;\n     |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing one of these traits",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 3991,
                        "byte_start": 3991,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 121,
                        "line_start": 121,
                        "suggested_replacement": "use crate::iter::Iterator;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use alloc::vec::{self, Vec};"
                          }
                        ]
                      },
                      {
                        "byte_end": 3991,
                        "byte_start": 3991,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 121,
                        "line_start": 121,
                        "suggested_replacement": "use core::iter::Iterator;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use alloc::vec::{self, Vec};"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0405",
                  "explanation": "The code refers to a trait that is not in scope.\n\nErroneous code example:\n\n```compile_fail,E0405\nstruct Foo;\n\nimpl SomeTrait for Foo {} // error: trait `SomeTrait` is not in scope\n```\n\nPlease verify that the name of the trait wasn't misspelled and ensure that it\nwas imported. Example:\n\n```\n# #[cfg(for_demonstration_only)]\n// solution 1:\nuse some_file::SomeTrait;\n\n// solution 2:\ntrait SomeTrait {\n    // some functions\n}\n\nstruct Foo;\n\nimpl SomeTrait for Foo { // ok!\n    // implements functions\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find trait `Iterator` in this scope",
                "spans": [
                  {
                    "byte_end": 44591,
                    "byte_start": 44583,
                    "column_end": 17,
                    "column_start": 9,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 1509,
                    "line_start": 1509,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 17,
                        "highlight_start": 9,
                        "text": "impl<T> Iterator for Drain<'_, T> {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#slab@0.4.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "slab",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0412]: cannot find type `Option` in this scope\n    --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\src\\lib.rs:1512:27\n     |\n1512 |     fn next(&mut self) -> Option<Self::Item> {\n     |                           ^^^^^^ not found in this scope\n     |\nhelp: consider importing this enum\n     |\n121  + use core::option::Option;\n     |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this enum",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 3991,
                        "byte_start": 3991,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 121,
                        "line_start": 121,
                        "suggested_replacement": "use core::option::Option;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use alloc::vec::{self, Vec};"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0412",
                  "explanation": "A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"
                },
                "level": "error",
                "message": "cannot find type `Option` in this scope",
                "spans": [
                  {
                    "byte_end": 44663,
                    "byte_start": 44657,
                    "column_end": 33,
                    "column_start": 27,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 1512,
                    "line_start": 1512,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 33,
                        "highlight_start": 27,
                        "text": "    fn next(&mut self) -> Option<Self::Item> {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#slab@0.4.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "slab",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0425]: cannot find function, tuple struct or tuple variant `Some` in this scope\n    --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\src\\lib.rs:1516:24\n     |\n1516 |                 return Some(v);\n     |                        ^^^^ not found in this scope\n     |\nhelp: consider importing this tuple variant\n     |\n121  + use core::option::Option::Some;\n     |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this tuple variant",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 3991,
                        "byte_start": 3991,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 121,
                        "line_start": 121,
                        "suggested_replacement": "use core::option::Option::Some;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use alloc::vec::{self, Vec};"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0425",
                  "explanation": "An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"
                },
                "level": "error",
                "message": "cannot find function, tuple struct or tuple variant `Some` in this scope",
                "spans": [
                  {
                    "byte_end": 44823,
                    "byte_start": 44819,
                    "column_end": 28,
                    "column_start": 24,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 1516,
                    "line_start": 1516,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 28,
                        "highlight_start": 24,
                        "text": "                return Some(v);"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#slab@0.4.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "slab",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0425]: cannot find value `None` in this scope\n    --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\src\\lib.rs:1521:9\n     |\n1521 |         None\n     |         ^^^^ not found in this scope\n     |\nhelp: consider importing this unit variant\n     |\n121  + use core::option::Option::None;\n     |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this unit variant",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 3991,
                        "byte_start": 3991,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 121,
                        "line_start": 121,
                        "suggested_replacement": "use core::option::Option::None;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use alloc::vec::{self, Vec};"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0425",
                  "explanation": "An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"
                },
                "level": "error",
                "message": "cannot find value `None` in this scope",
                "spans": [
                  {
                    "byte_end": 44904,
                    "byte_start": 44900,
                    "column_end": 13,
                    "column_start": 9,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 1521,
                    "line_start": 1521,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 13,
                        "highlight_start": 9,
                        "text": "        None"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#slab@0.4.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "slab",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0412]: cannot find type `Option` in this scope\n    --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\src\\lib.rs:1524:36\n     |\n1524 |     fn size_hint(&self) -> (usize, Option<usize>) {\n     |                                    ^^^^^^ not found in this scope\n     |\nhelp: consider importing this enum\n     |\n121  + use core::option::Option;\n     |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this enum",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 3991,
                        "byte_start": 3991,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 121,
                        "line_start": 121,
                        "suggested_replacement": "use core::option::Option;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use alloc::vec::{self, Vec};"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0412",
                  "explanation": "A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"
                },
                "level": "error",
                "message": "cannot find type `Option` in this scope",
                "spans": [
                  {
                    "byte_end": 44953,
                    "byte_start": 44947,
                    "column_end": 42,
                    "column_start": 36,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 1524,
                    "line_start": 1524,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 42,
                        "highlight_start": 36,
                        "text": "    fn size_hint(&self) -> (usize, Option<usize>) {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#slab@0.4.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "slab",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0425]: cannot find function, tuple struct or tuple variant `Some` in this scope\n    --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\src\\lib.rs:1525:20\n     |\n1525 |         (self.len, Some(self.len))\n     |                    ^^^^ not found in this scope\n     |\nhelp: consider importing this tuple variant\n     |\n121  + use core::option::Option::Some;\n     |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this tuple variant",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 3991,
                        "byte_start": 3991,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 121,
                        "line_start": 121,
                        "suggested_replacement": "use core::option::Option::Some;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use alloc::vec::{self, Vec};"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0425",
                  "explanation": "An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"
                },
                "level": "error",
                "message": "cannot find function, tuple struct or tuple variant `Some` in this scope",
                "spans": [
                  {
                    "byte_end": 44987,
                    "byte_start": 44983,
                    "column_end": 24,
                    "column_start": 20,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 1525,
                    "line_start": 1525,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 24,
                        "highlight_start": 20,
                        "text": "        (self.len, Some(self.len))"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#slab@0.4.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "slab",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0405]: cannot find trait `DoubleEndedIterator` in this scope\n    --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\src\\lib.rs:1529:9\n     |\n1529 | impl<T> DoubleEndedIterator for Drain<'_, T> {\n     |         ^^^^^^^^^^^^^^^^^^^ not found in this scope\n     |\nhelp: consider importing one of these traits\n     |\n121  + use crate::iter::DoubleEndedIterator;\n     |\n121  + use core::iter::DoubleEndedIterator;\n     |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing one of these traits",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 3991,
                        "byte_start": 3991,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 121,
                        "line_start": 121,
                        "suggested_replacement": "use crate::iter::DoubleEndedIterator;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use alloc::vec::{self, Vec};"
                          }
                        ]
                      },
                      {
                        "byte_end": 3991,
                        "byte_start": 3991,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 121,
                        "line_start": 121,
                        "suggested_replacement": "use core::iter::DoubleEndedIterator;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use alloc::vec::{self, Vec};"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0405",
                  "explanation": "The code refers to a trait that is not in scope.\n\nErroneous code example:\n\n```compile_fail,E0405\nstruct Foo;\n\nimpl SomeTrait for Foo {} // error: trait `SomeTrait` is not in scope\n```\n\nPlease verify that the name of the trait wasn't misspelled and ensure that it\nwas imported. Example:\n\n```\n# #[cfg(for_demonstration_only)]\n// solution 1:\nuse some_file::SomeTrait;\n\n// solution 2:\ntrait SomeTrait {\n    // some functions\n}\n\nstruct Foo;\n\nimpl SomeTrait for Foo { // ok!\n    // implements functions\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find trait `DoubleEndedIterator` in this scope",
                "spans": [
                  {
                    "byte_end": 45035,
                    "byte_start": 45016,
                    "column_end": 28,
                    "column_start": 9,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 1529,
                    "line_start": 1529,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 28,
                        "highlight_start": 9,
                        "text": "impl<T> DoubleEndedIterator for Drain<'_, T> {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#slab@0.4.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "slab",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0412]: cannot find type `Option` in this scope\n    --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\src\\lib.rs:1530:32\n     |\n1530 |     fn next_back(&mut self) -> Option<Self::Item> {\n     |                                ^^^^^^ not found in this scope\n     |\nhelp: consider importing this enum\n     |\n121  + use core::option::Option;\n     |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this enum",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 3991,
                        "byte_start": 3991,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 121,
                        "line_start": 121,
                        "suggested_replacement": "use core::option::Option;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use alloc::vec::{self, Vec};"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0412",
                  "explanation": "A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"
                },
                "level": "error",
                "message": "cannot find type `Option` in this scope",
                "spans": [
                  {
                    "byte_end": 45092,
                    "byte_start": 45086,
                    "column_end": 38,
                    "column_start": 32,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 1530,
                    "line_start": 1530,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 38,
                        "highlight_start": 32,
                        "text": "    fn next_back(&mut self) -> Option<Self::Item> {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#slab@0.4.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "slab",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0531]: cannot find tuple struct or tuple variant `Some` in this scope\n    --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\src\\lib.rs:1531:19\n     |\n1531 |         while let Some(entry) = self.inner.next_back() {\n     |                   ^^^^ not found in this scope\n     |\nhelp: consider importing this tuple variant\n     |\n121  + use core::option::Option::Some;\n     |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this tuple variant",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 3991,
                        "byte_start": 3991,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 121,
                        "line_start": 121,
                        "suggested_replacement": "use core::option::Option::Some;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use alloc::vec::{self, Vec};"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0531",
                  "explanation": "An unknown tuple struct/variant has been used.\n\nErroneous code example:\n\n```compile_fail,E0531\nlet Type(x) = Type(12); // error!\nmatch Bar(12) {\n    Bar(x) => {} // error!\n    _ => {}\n}\n```\n\nIn most cases, it's either a forgotten import or a typo. However, let's look at\nhow you can have such a type:\n\n```edition2018\nstruct Type(u32); // this is a tuple struct\n\nenum Foo {\n    Bar(u32), // this is a tuple variant\n}\n\nuse Foo::*; // To use Foo's variant directly, we need to import them in\n            // the scope.\n```\n\nEither way, it should work fine with our previous code:\n\n```edition2018\nstruct Type(u32);\n\nenum Foo {\n    Bar(u32),\n}\nuse Foo::*;\n\nlet Type(x) = Type(12); // ok!\nmatch Type(12) {\n    Type(x) => {} // ok!\n    _ => {}\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find tuple struct or tuple variant `Some` in this scope",
                "spans": [
                  {
                    "byte_end": 45129,
                    "byte_start": 45125,
                    "column_end": 23,
                    "column_start": 19,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 1531,
                    "line_start": 1531,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 23,
                        "highlight_start": 19,
                        "text": "        while let Some(entry) = self.inner.next_back() {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#slab@0.4.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "slab",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0425]: cannot find function, tuple struct or tuple variant `Some` in this scope\n    --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\src\\lib.rs:1534:24\n     |\n1534 |                 return Some(v);\n     |                        ^^^^ not found in this scope\n     |\nhelp: consider importing this tuple variant\n     |\n121  + use core::option::Option::Some;\n     |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this tuple variant",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 3991,
                        "byte_start": 3991,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 121,
                        "line_start": 121,
                        "suggested_replacement": "use core::option::Option::Some;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use alloc::vec::{self, Vec};"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0425",
                  "explanation": "An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"
                },
                "level": "error",
                "message": "cannot find function, tuple struct or tuple variant `Some` in this scope",
                "spans": [
                  {
                    "byte_end": 45270,
                    "byte_start": 45266,
                    "column_end": 28,
                    "column_start": 24,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 1534,
                    "line_start": 1534,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 28,
                        "highlight_start": 24,
                        "text": "                return Some(v);"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#slab@0.4.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "slab",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0425]: cannot find value `None` in this scope\n    --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\src\\lib.rs:1539:9\n     |\n1539 |         None\n     |         ^^^^ not found in this scope\n     |\nhelp: consider importing this unit variant\n     |\n121  + use core::option::Option::None;\n     |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this unit variant",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 3991,
                        "byte_start": 3991,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 121,
                        "line_start": 121,
                        "suggested_replacement": "use core::option::Option::None;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use alloc::vec::{self, Vec};"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0425",
                  "explanation": "An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"
                },
                "level": "error",
                "message": "cannot find value `None` in this scope",
                "spans": [
                  {
                    "byte_end": 45351,
                    "byte_start": 45347,
                    "column_end": 13,
                    "column_start": 9,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 1539,
                    "line_start": 1539,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 13,
                        "highlight_start": 9,
                        "text": "        None"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#slab@0.4.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "slab",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0405]: cannot find trait `ExactSizeIterator` in this scope\n    --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\src\\lib.rs:1543:9\n     |\n1543 | impl<T> ExactSizeIterator for Drain<'_, T> {\n     |         ^^^^^^^^^^^^^^^^^ not found in this scope\n     |\nhelp: consider importing one of these traits\n     |\n121  + use crate::iter::ExactSizeIterator;\n     |\n121  + use core::iter::ExactSizeIterator;\n     |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing one of these traits",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 3991,
                        "byte_start": 3991,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 121,
                        "line_start": 121,
                        "suggested_replacement": "use crate::iter::ExactSizeIterator;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use alloc::vec::{self, Vec};"
                          }
                        ]
                      },
                      {
                        "byte_end": 3991,
                        "byte_start": 3991,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 121,
                        "line_start": 121,
                        "suggested_replacement": "use core::iter::ExactSizeIterator;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use alloc::vec::{self, Vec};"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0405",
                  "explanation": "The code refers to a trait that is not in scope.\n\nErroneous code example:\n\n```compile_fail,E0405\nstruct Foo;\n\nimpl SomeTrait for Foo {} // error: trait `SomeTrait` is not in scope\n```\n\nPlease verify that the name of the trait wasn't misspelled and ensure that it\nwas imported. Example:\n\n```\n# #[cfg(for_demonstration_only)]\n// solution 1:\nuse some_file::SomeTrait;\n\n// solution 2:\ntrait SomeTrait {\n    // some functions\n}\n\nstruct Foo;\n\nimpl SomeTrait for Foo { // ok!\n    // implements functions\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find trait `ExactSizeIterator` in this scope",
                "spans": [
                  {
                    "byte_end": 45386,
                    "byte_start": 45369,
                    "column_end": 26,
                    "column_start": 9,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 1543,
                    "line_start": 1543,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 26,
                        "highlight_start": 9,
                        "text": "impl<T> ExactSizeIterator for Drain<'_, T> {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#slab@0.4.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "slab",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0277]: `IntoIter<T>` is not an iterator\n    --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\src\\lib.rs:1417:27\n     |\n1417 | impl<T> FusedIterator for IntoIter<T> {}\n     |                           ^^^^^^^^^^^ `IntoIter<T>` is not an iterator\n     |\n     = help: the trait `Iterator` is not implemented for `IntoIter<T>`\nnote: required by a bound in `FusedIterator`\n    --> C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\iter\\traits\\marker.rs:32:26\n     |\n32   | pub trait FusedIterator: Iterator {}\n     |                          ^^^^^^^^ required by this bound in `FusedIterator`\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "the trait `Iterator` is not implemented for `IntoIter<T>`",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "required by a bound in `FusedIterator`",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 1253,
                        "byte_start": 1245,
                        "column_end": 34,
                        "column_start": 26,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\iter\\traits\\marker.rs",
                        "is_primary": true,
                        "label": "required by this bound in `FusedIterator`",
                        "line_end": 32,
                        "line_start": 32,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 34,
                            "highlight_start": 26,
                            "text": "pub trait FusedIterator: Iterator {}"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0277",
                  "explanation": "You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"
                },
                "level": "error",
                "message": "`IntoIter<T>` is not an iterator",
                "spans": [
                  {
                    "byte_end": 42511,
                    "byte_start": 42500,
                    "column_end": 38,
                    "column_start": 27,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\src\\lib.rs",
                    "is_primary": true,
                    "label": "`IntoIter<T>` is not an iterator",
                    "line_end": 1417,
                    "line_start": 1417,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 38,
                        "highlight_start": 27,
                        "text": "impl<T> FusedIterator for IntoIter<T> {}"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#slab@0.4.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "slab",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0277]: `Iter<'_, T>` is not an iterator\n    --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\src\\lib.rs:1461:27\n     |\n1461 | impl<T> FusedIterator for Iter<'_, T> {}\n     |                           ^^^^^^^^^^^ `Iter<'_, T>` is not an iterator\n     |\n     = help: the trait `Iterator` is not implemented for `Iter<'_, T>`\nnote: required by a bound in `FusedIterator`\n    --> C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\iter\\traits\\marker.rs:32:26\n     |\n32   | pub trait FusedIterator: Iterator {}\n     |                          ^^^^^^^^ required by this bound in `FusedIterator`\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "the trait `Iterator` is not implemented for `Iter<'_, T>`",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "required by a bound in `FusedIterator`",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 1253,
                        "byte_start": 1245,
                        "column_end": 34,
                        "column_start": 26,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\iter\\traits\\marker.rs",
                        "is_primary": true,
                        "label": "required by this bound in `FusedIterator`",
                        "line_end": 32,
                        "line_start": 32,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 34,
                            "highlight_start": 26,
                            "text": "pub trait FusedIterator: Iterator {}"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0277",
                  "explanation": "You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"
                },
                "level": "error",
                "message": "`Iter<'_, T>` is not an iterator",
                "spans": [
                  {
                    "byte_end": 43516,
                    "byte_start": 43505,
                    "column_end": 38,
                    "column_start": 27,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\src\\lib.rs",
                    "is_primary": true,
                    "label": "`Iter<'_, T>` is not an iterator",
                    "line_end": 1461,
                    "line_start": 1461,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 38,
                        "highlight_start": 27,
                        "text": "impl<T> FusedIterator for Iter<'_, T> {}"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#slab@0.4.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "slab",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0277]: `IterMut<'_, T>` is not an iterator\n    --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\src\\lib.rs:1505:27\n     |\n1505 | impl<T> FusedIterator for IterMut<'_, T> {}\n     |                           ^^^^^^^^^^^^^^ `IterMut<'_, T>` is not an iterator\n     |\n     = help: the trait `Iterator` is not implemented for `IterMut<'_, T>`\nnote: required by a bound in `FusedIterator`\n    --> C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\iter\\traits\\marker.rs:32:26\n     |\n32   | pub trait FusedIterator: Iterator {}\n     |                          ^^^^^^^^ required by this bound in `FusedIterator`\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "the trait `Iterator` is not implemented for `IterMut<'_, T>`",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "required by a bound in `FusedIterator`",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 1253,
                        "byte_start": 1245,
                        "column_end": 34,
                        "column_start": 26,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\iter\\traits\\marker.rs",
                        "is_primary": true,
                        "label": "required by this bound in `FusedIterator`",
                        "line_end": 32,
                        "line_start": 32,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 34,
                            "highlight_start": 26,
                            "text": "pub trait FusedIterator: Iterator {}"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0277",
                  "explanation": "You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"
                },
                "level": "error",
                "message": "`IterMut<'_, T>` is not an iterator",
                "spans": [
                  {
                    "byte_end": 44548,
                    "byte_start": 44534,
                    "column_end": 41,
                    "column_start": 27,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\src\\lib.rs",
                    "is_primary": true,
                    "label": "`IterMut<'_, T>` is not an iterator",
                    "line_end": 1505,
                    "line_start": 1505,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 41,
                        "highlight_start": 27,
                        "text": "impl<T> FusedIterator for IterMut<'_, T> {}"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#slab@0.4.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "slab",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0277]: `Drain<'_, T>` is not an iterator\n    --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\src\\lib.rs:1549:27\n     |\n1549 | impl<T> FusedIterator for Drain<'_, T> {}\n     |                           ^^^^^^^^^^^^ `Drain<'_, T>` is not an iterator\n     |\n     = help: the trait `Iterator` is not implemented for `Drain<'_, T>`\nnote: required by a bound in `FusedIterator`\n    --> C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\iter\\traits\\marker.rs:32:26\n     |\n32   | pub trait FusedIterator: Iterator {}\n     |                          ^^^^^^^^ required by this bound in `FusedIterator`\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "the trait `Iterator` is not implemented for `Drain<'_, T>`",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "required by a bound in `FusedIterator`",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 1253,
                        "byte_start": 1245,
                        "column_end": 34,
                        "column_start": 26,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\iter\\traits\\marker.rs",
                        "is_primary": true,
                        "label": "required by this bound in `FusedIterator`",
                        "line_end": 32,
                        "line_start": 32,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 34,
                            "highlight_start": 26,
                            "text": "pub trait FusedIterator: Iterator {}"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0277",
                  "explanation": "You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"
                },
                "level": "error",
                "message": "`Drain<'_, T>` is not an iterator",
                "spans": [
                  {
                    "byte_end": 45499,
                    "byte_start": 45487,
                    "column_end": 39,
                    "column_start": 27,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\src\\lib.rs",
                    "is_primary": true,
                    "label": "`Drain<'_, T>` is not an iterator",
                    "line_end": 1549,
                    "line_start": 1549,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 39,
                        "highlight_start": 27,
                        "text": "impl<T> FusedIterator for Drain<'_, T> {}"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#bytes@0.4.12",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\bytes-0.4.12\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "bytes",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\bytes-0.4.12\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmppk0ok6_5\\websocket-0.27.1\\target\\debug\\deps\\libbytes-d4df3340286c84bf.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#slab@0.4.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "slab",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "Some errors have detailed explanations: E0277, E0405, E0412, E0425, E0463, E0531, E0786.\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": null,
                "level": "failure-note",
                "message": "Some errors have detailed explanations: E0277, E0405, E0412, E0425, E0463, E0531, E0786.",
                "spans": []
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#slab@0.4.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "slab",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.5\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "For more information about an error, try `rustc --explain E0277`.\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": null,
                "level": "failure-note",
                "message": "For more information about an error, try `rustc --explain E0277`.",
                "spans": []
              }
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#typenum@1.15.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\typenum-1.15.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "typenum",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\typenum-1.15.0\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmppk0ok6_5\\websocket-0.27.1\\target\\debug\\deps\\libtypenum-ba39ba5f17aba493.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#tinyvec@1.5.1",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\tinyvec-1.5.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "tinyvec",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\tinyvec-1.5.1\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "alloc",
                "default",
                "tinyvec_macros"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmppk0ok6_5\\websocket-0.27.1\\target\\debug\\deps\\libtinyvec-e4cc56b09d339aba.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "build-finished",
              "success": false
            }
          ],
          "audit": {
            "database": {
              "advisory-count": 787,
              "last-commit": "7573f55ba337263f61167dbb0ea926cdc7c8eb5d",
              "last-updated": "2025-06-17T11:04:25+02:00"
            },
            "lockfile": {
              "dependency-count": 121
            },
            "settings": {
              "target_arch": [],
              "target_os": [],
              "severity": null,
              "ignore": [],
              "informational_warnings": [
                "unmaintained",
                "unsound",
                "notice"
              ]
            },
            "vulnerabilities": {
              "found": true,
              "count": 12,
              "list": [
                {
                  "advisory": {
                    "id": "RUSTSEC-2021-0078",
                    "package": "hyper",
                    "title": "Lenient `hyper` header parsing of `Content-Length` could allow request smuggling",
                    "description": "`hyper`'s HTTP header parser accepted, according to RFC 7230, illegal contents inside `Content-Length` headers.\nDue to this, upstream HTTP proxies that ignore the header may still forward them along if it chooses to ignore the error.\n\nTo be vulnerable, `hyper` must be used as an HTTP/1 server and using an HTTP proxy upstream that ignores the header's contents\nbut still forwards it. Due to all the factors that must line up, an attack exploiting this vulnerability is unlikely.",
                    "date": "2021-07-07",
                    "aliases": [
                      "CVE-2021-32715",
                      "GHSA-f3pg-qwvg-p99c"
                    ],
                    "related": [],
                    "collection": "crates",
                    "categories": [],
                    "keywords": [
                      "parsing",
                      "http"
                    ],
                    "cvss": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:L/A:N",
                    "informational": null,
                    "references": [],
                    "source": null,
                    "url": "https://github.com/hyperium/hyper/security/advisories/GHSA-f3pg-qwvg-p99c",
                    "withdrawn": null,
                    "license": "CC0-1.0"
                  },
                  "versions": {
                    "patched": [
                      ">=0.14.10"
                    ],
                    "unaffected": []
                  },
                  "affected": null,
                  "package": {
                    "name": "hyper",
                    "version": "0.10.16",
                    "source": "registry+https://github.com/rust-lang/crates.io-index",
                    "checksum": "0a0652d9a2609a968c14be1a9ea00bf4b1d64e2e1f53a1b51b6fff3a6e829273",
                    "dependencies": [
                      {
                        "name": "base64",
                        "version": "0.9.3",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "httparse",
                        "version": "1.5.1",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "language-tags",
                        "version": "0.2.2",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "log",
                        "version": "0.3.9",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "mime",
                        "version": "0.2.6",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "num_cpus",
                        "version": "1.13.1",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "time",
                        "version": "0.1.44",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "traitobject",
                        "version": "0.1.0",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "typeable",
                        "version": "0.1.2",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "unicase",
                        "version": "1.4.2",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "url",
                        "version": "1.7.2",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      }
                    ],
                    "replace": null
                  }
                },
                {
                  "advisory": {
                    "id": "RUSTSEC-2021-0079",
                    "package": "hyper",
                    "title": "Integer overflow in `hyper`'s parsing of the `Transfer-Encoding` header leads to data loss",
                    "description": "When decoding chunk sizes that are too large, `hyper`'s code would encounter an integer overflow. Depending on the situation,\nthis could lead to data loss from an incorrect total size, or in rarer cases, a request smuggling attack.\n\nTo be vulnerable, you must be using `hyper` for any HTTP/1 purpose, including as a client or server, and consumers must send\nrequests or responses that specify a chunk size greater than 18 exabytes. For a possible request smuggling attack to be possible,\nany upstream proxies must accept a chunk size greater than 64 bits.",
                    "date": "2021-07-07",
                    "aliases": [
                      "CVE-2021-32714",
                      "GHSA-5h46-h7hh-c6x9"
                    ],
                    "related": [],
                    "collection": "crates",
                    "categories": [],
                    "keywords": [
                      "http",
                      "parsing",
                      "data loss"
                    ],
                    "cvss": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:H/A:H",
                    "informational": null,
                    "references": [],
                    "source": null,
                    "url": "https://github.com/hyperium/hyper/security/advisories/GHSA-5h46-h7hh-c6x9",
                    "withdrawn": null,
                    "license": "CC0-1.0"
                  },
                  "versions": {
                    "patched": [
                      ">=0.14.10"
                    ],
                    "unaffected": []
                  },
                  "affected": null,
                  "package": {
                    "name": "hyper",
                    "version": "0.10.16",
                    "source": "registry+https://github.com/rust-lang/crates.io-index",
                    "checksum": "0a0652d9a2609a968c14be1a9ea00bf4b1d64e2e1f53a1b51b6fff3a6e829273",
                    "dependencies": [
                      {
                        "name": "base64",
                        "version": "0.9.3",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "httparse",
                        "version": "1.5.1",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "language-tags",
                        "version": "0.2.2",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "log",
                        "version": "0.3.9",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "mime",
                        "version": "0.2.6",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "num_cpus",
                        "version": "1.13.1",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "time",
                        "version": "0.1.44",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "traitobject",
                        "version": "0.1.0",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "typeable",
                        "version": "0.1.2",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "unicase",
                        "version": "1.4.2",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "url",
                        "version": "1.7.2",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      }
                    ],
                    "replace": null
                  }
                },
                {
                  "advisory": {
                    "id": "RUSTSEC-2024-0421",
                    "package": "idna",
                    "title": "`idna` accepts Punycode labels that do not produce any non-ASCII when decoded",
                    "description": "`idna` 0.5.0 and earlier accepts Punycode labels that do not produce any non-ASCII output, which means that either ASCII labels or the empty root label can be masked such that they appear unequal without IDNA processing or when processed with a different implementation and equal when processed with `idna` 0.5.0 or earlier.\n\nConcretely, `example.org` and `xn--example-.org` become equal after processing by `idna` 0.5.0 or earlier. Also, `example.org.xn--` and `example.org.` become equal after processing by `idna` 0.5.0 or earlier.\n\nIn applications using `idna` (but not in `idna` itself) this may be able to lead to privilege escalation when host name comparison is part of a privilege check and the behavior is combined with a client that resolves domains with such labels instead of treating them as errors that preclude DNS resolution / URL fetching and with the attacker managing to introduce a DNS entry (and TLS certificate) for an `xn--`-masked name that turns into the name of the target when processed by `idna` 0.5.0 or earlier.\n\n## Remedy\n\nUpgrade to `idna` 1.0.3 or later, if depending on `idna` directly, or to `url` 2.5.4 or later, if depending on `idna` via `url`. (This issue was fixed in `idna` 1.0.0, but versions earlier than 1.0.3 are not recommended for other reasons.)\n\nWhen upgrading, please take a moment to read about [alternative Unicode back ends for `idna`](https://docs.rs/crate/idna_adapter/latest).\n\nIf you are using Rust earlier than 1.81 in combination with SQLx 0.8.2 or earlier, please also read an [issue](https://github.com/servo/rust-url/issues/992) about combining them with `url` 2.5.4 and `idna` 1.0.3.\n\n## Additional information\n\nThis issue resulted from `idna` 0.5.0 and earlier implementing the UTS 46 specification literally on this point and the specification having this bug. The specification bug has been fixed in [revision 33 of UTS 46](https://www.unicode.org/reports/tr46/tr46-33.html#Modifications).\n\n## Acknowledgements\n\nThanks to kageshiron for recognizing the security implications of this behavior.",
                    "date": "2024-12-09",
                    "aliases": [
                      "CVE-2024-12224"
                    ],
                    "related": [],
                    "collection": "crates",
                    "categories": [
                      "privilege-escalation"
                    ],
                    "keywords": [
                      "idna",
                      "punycode",
                      "same-origin",
                      "domain-name"
                    ],
                    "cvss": null,
                    "informational": null,
                    "references": [],
                    "source": null,
                    "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=1887898",
                    "withdrawn": null,
                    "license": "CC0-1.0"
                  },
                  "versions": {
                    "patched": [
                      ">=1.0.0"
                    ],
                    "unaffected": []
                  },
                  "affected": null,
                  "package": {
                    "name": "idna",
                    "version": "0.1.5",
                    "source": "registry+https://github.com/rust-lang/crates.io-index",
                    "checksum": "38f09e0f0b1fb55fdee1f17470ad800da77af5186a1a76c026b679358b7e844e",
                    "dependencies": [
                      {
                        "name": "matches",
                        "version": "0.1.9",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "unicode-bidi",
                        "version": "0.3.7",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "unicode-normalization",
                        "version": "0.1.19",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      }
                    ],
                    "replace": null
                  }
                },
                {
                  "advisory": {
                    "id": "RUSTSEC-2023-0022",
                    "package": "openssl",
                    "title": "`openssl` `X509NameBuilder::build` returned object is not thread safe",
                    "description": "OpenSSL has a `modified` bit that it can set on on `X509_NAME` objects. If this\nbit is set then the object is not thread-safe even when it appears the code is\nnot modifying the value.\n\nThanks to David Benjamin (Google) for reporting this issue.",
                    "date": "2023-03-24",
                    "aliases": [
                      "GHSA-3gxf-9r58-2ghg"
                    ],
                    "related": [],
                    "collection": "crates",
                    "categories": [
                      "thread-safety"
                    ],
                    "keywords": [],
                    "cvss": null,
                    "informational": null,
                    "references": [],
                    "source": null,
                    "url": "https://github.com/sfackler/rust-openssl/pull/1854",
                    "withdrawn": null,
                    "license": "CC0-1.0"
                  },
                  "versions": {
                    "patched": [
                      ">=0.10.48"
                    ],
                    "unaffected": []
                  },
                  "affected": {
                    "arch": [],
                    "os": [],
                    "functions": {
                      "openssl::x509::X509NameBuilder::build": [
                        "<0.10.48, >=0.9.7"
                      ]
                    }
                  },
                  "package": {
                    "name": "openssl",
                    "version": "0.10.38",
                    "source": "registry+https://github.com/rust-lang/crates.io-index",
                    "checksum": "0c7ae222234c30df141154f159066c5093ff73b63204dcda7121eb082fc56a95",
                    "dependencies": [
                      {
                        "name": "bitflags",
                        "version": "1.3.2",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "cfg-if",
                        "version": "1.0.0",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "foreign-types",
                        "version": "0.3.2",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "libc",
                        "version": "0.2.117",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "once_cell",
                        "version": "1.9.0",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "openssl-sys",
                        "version": "0.9.72",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      }
                    ],
                    "replace": null
                  }
                },
                {
                  "advisory": {
                    "id": "RUSTSEC-2023-0023",
                    "package": "openssl",
                    "title": "`openssl` `SubjectAlternativeName` and `ExtendedKeyUsage::other` allow arbitrary file read",
                    "description": "`SubjectAlternativeName` and `ExtendedKeyUsage` arguments were parsed using the OpenSSL\nfunction `X509V3_EXT_nconf`. This function parses all input using an OpenSSL mini-language\nwhich can perform arbitrary file reads.\n\nThanks to David Benjamin (Google) for reporting this issue.",
                    "date": "2023-03-24",
                    "aliases": [
                      "GHSA-9qwg-crg9-m2vc"
                    ],
                    "related": [],
                    "collection": "crates",
                    "categories": [
                      "file-disclosure"
                    ],
                    "keywords": [],
                    "cvss": null,
                    "informational": null,
                    "references": [],
                    "source": null,
                    "url": "https://github.com/sfackler/rust-openssl/pull/1854",
                    "withdrawn": null,
                    "license": "CC0-1.0"
                  },
                  "versions": {
                    "patched": [
                      ">=0.10.48"
                    ],
                    "unaffected": []
                  },
                  "affected": {
                    "arch": [],
                    "os": [],
                    "functions": {
                      "openssl::x509::extension::ExtendedKeyUsage::other": [
                        "<0.10.48, >=0.9.7"
                      ],
                      "openssl::x509::extension::SubjectAlternativeName::new": [
                        "<0.10.48, >=0.9.7"
                      ]
                    }
                  },
                  "package": {
                    "name": "openssl",
                    "version": "0.10.38",
                    "source": "registry+https://github.com/rust-lang/crates.io-index",
                    "checksum": "0c7ae222234c30df141154f159066c5093ff73b63204dcda7121eb082fc56a95",
                    "dependencies": [
                      {
                        "name": "bitflags",
                        "version": "1.3.2",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "cfg-if",
                        "version": "1.0.0",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "foreign-types",
                        "version": "0.3.2",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "libc",
                        "version": "0.2.117",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "once_cell",
                        "version": "1.9.0",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "openssl-sys",
                        "version": "0.9.72",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      }
                    ],
                    "replace": null
                  }
                },
                {
                  "advisory": {
                    "id": "RUSTSEC-2023-0024",
                    "package": "openssl",
                    "title": "`openssl` `X509Extension::new` and `X509Extension::new_nid` null pointer dereference",
                    "description": "These functions would crash when the context argument was None with certain extension types.\n\nThanks to David Benjamin (Google) for reporting this issue.",
                    "date": "2023-03-24",
                    "aliases": [
                      "GHSA-6hcf-g6gr-hhcr"
                    ],
                    "related": [],
                    "collection": "crates",
                    "categories": [
                      "denial-of-service"
                    ],
                    "keywords": [],
                    "cvss": null,
                    "informational": null,
                    "references": [],
                    "source": null,
                    "url": "https://github.com/sfackler/rust-openssl/pull/1854",
                    "withdrawn": null,
                    "license": "CC0-1.0"
                  },
                  "versions": {
                    "patched": [
                      ">=0.10.48"
                    ],
                    "unaffected": []
                  },
                  "affected": {
                    "arch": [],
                    "os": [],
                    "functions": {
                      "openssl::x509::X509Extension::new": [
                        "<0.10.48, >=0.9.7"
                      ],
                      "openssl::x509::X509Extension::new_nid": [
                        "<0.10.48, >=0.9.7"
                      ]
                    }
                  },
                  "package": {
                    "name": "openssl",
                    "version": "0.10.38",
                    "source": "registry+https://github.com/rust-lang/crates.io-index",
                    "checksum": "0c7ae222234c30df141154f159066c5093ff73b63204dcda7121eb082fc56a95",
                    "dependencies": [
                      {
                        "name": "bitflags",
                        "version": "1.3.2",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "cfg-if",
                        "version": "1.0.0",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "foreign-types",
                        "version": "0.3.2",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "libc",
                        "version": "0.2.117",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "once_cell",
                        "version": "1.9.0",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "openssl-sys",
                        "version": "0.9.72",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      }
                    ],
                    "replace": null
                  }
                },
                {
                  "advisory": {
                    "id": "RUSTSEC-2023-0044",
                    "package": "openssl",
                    "title": "`openssl` `X509VerifyParamRef::set_host` buffer over-read",
                    "description": "When this function was passed an empty string, `openssl` would attempt to call `strlen` on it, reading arbitrary memory until it reached a NUL byte.",
                    "date": "2023-06-20",
                    "aliases": [
                      "GHSA-xcf7-rvmh-g6q4"
                    ],
                    "related": [],
                    "collection": "crates",
                    "categories": [
                      "memory-exposure"
                    ],
                    "keywords": [],
                    "cvss": null,
                    "informational": null,
                    "references": [],
                    "source": null,
                    "url": "https://github.com/sfackler/rust-openssl/issues/1965",
                    "withdrawn": null,
                    "license": "CC0-1.0"
                  },
                  "versions": {
                    "patched": [
                      ">=0.10.55"
                    ],
                    "unaffected": []
                  },
                  "affected": {
                    "arch": [],
                    "os": [],
                    "functions": {
                      "openssl::x509::verify::X509VerifyParamRef::set_host": [
                        "<0.10.55, >=0.10.0"
                      ]
                    }
                  },
                  "package": {
                    "name": "openssl",
                    "version": "0.10.38",
                    "source": "registry+https://github.com/rust-lang/crates.io-index",
                    "checksum": "0c7ae222234c30df141154f159066c5093ff73b63204dcda7121eb082fc56a95",
                    "dependencies": [
                      {
                        "name": "bitflags",
                        "version": "1.3.2",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "cfg-if",
                        "version": "1.0.0",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "foreign-types",
                        "version": "0.3.2",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "libc",
                        "version": "0.2.117",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "once_cell",
                        "version": "1.9.0",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "openssl-sys",
                        "version": "0.9.72",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      }
                    ],
                    "replace": null
                  }
                },
                {
                  "advisory": {
                    "id": "RUSTSEC-2024-0357",
                    "package": "openssl",
                    "title": "`MemBio::get_buf` has undefined behavior with empty buffers",
                    "description": "Previously, `MemBio::get_buf` called `slice::from_raw_parts` with a null-pointer, which violates the functions invariants, leading to undefined behavior. In debug builds this would produce an assertion failure. This is now fixed.",
                    "date": "2024-07-21",
                    "aliases": [],
                    "related": [],
                    "collection": "crates",
                    "categories": [],
                    "keywords": [],
                    "cvss": null,
                    "informational": null,
                    "references": [],
                    "source": null,
                    "url": "https://github.com/sfackler/rust-openssl/pull/2266",
                    "withdrawn": null,
                    "license": "CC0-1.0"
                  },
                  "versions": {
                    "patched": [
                      ">=0.10.66"
                    ],
                    "unaffected": []
                  },
                  "affected": {
                    "arch": [],
                    "os": [],
                    "functions": {
                      "openssl::bio::MemBio::get_buf": [
                        "<0.10.66, >=0.8.0"
                      ]
                    }
                  },
                  "package": {
                    "name": "openssl",
                    "version": "0.10.38",
                    "source": "registry+https://github.com/rust-lang/crates.io-index",
                    "checksum": "0c7ae222234c30df141154f159066c5093ff73b63204dcda7121eb082fc56a95",
                    "dependencies": [
                      {
                        "name": "bitflags",
                        "version": "1.3.2",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "cfg-if",
                        "version": "1.0.0",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "foreign-types",
                        "version": "0.3.2",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "libc",
                        "version": "0.2.117",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "once_cell",
                        "version": "1.9.0",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "openssl-sys",
                        "version": "0.9.72",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      }
                    ],
                    "replace": null
                  }
                },
                {
                  "advisory": {
                    "id": "RUSTSEC-2025-0004",
                    "package": "openssl",
                    "title": "ssl::select_next_proto use after free",
                    "description": "In `openssl` versions before `0.10.70`, `ssl::select_next_proto` can return a slice pointing into the `server` argument's buffer but with a lifetime bound to the `client` argument. In situations where the `server` buffer's lifetime is shorter than the `client` buffer's, this can cause a use after free. This could cause the server to crash or to return arbitrary memory contents to the client.\n\n`openssl` 0.10.70 fixes the signature of `ssl::select_next_proto` to properly constrain the output buffer's lifetime to that of both input buffers.\n\nIn standard usage of `ssl::select_next_proto` in the callback passed to `SslContextBuilder::set_alpn_select_callback`, code is only affected if the `server` buffer is constructed *within* the callback. For example:\n\nNot vulnerable - the server buffer has a `'static` lifetime:\n```rust\nbuilder.set_alpn_select_callback(|_, client_protos| {\n    ssl::select_next_proto(b\"\\x02h2\", client_protos).ok_or_else(AlpnError::NOACK)\n});\n```\n\nNot vulnerable - the server buffer outlives the handshake:\n```rust\nlet server_protos = b\"\\x02h2\".to_vec();\nbuilder.set_alpn_select_callback(|_, client_protos| {\n    ssl::select_next_proto(&server_protos, client_protos).ok_or_else(AlpnError::NOACK)\n});\n```\n\nVulnerable - the server buffer is freed when the callback returns:\n```rust\nbuilder.set_alpn_select_callback(|_, client_protos| {\n    let server_protos = b\"\\x02h2\".to_vec();\n    ssl::select_next_proto(&server_protos, client_protos).ok_or_else(AlpnError::NOACK)\n});\n```",
                    "date": "2025-02-02",
                    "aliases": [
                      "GHSA-rpmj-rpgj-qmpm"
                    ],
                    "related": [],
                    "collection": "crates",
                    "categories": [
                      "memory-exposure"
                    ],
                    "keywords": [
                      "ssl",
                      "tls",
                      "alpn"
                    ],
                    "cvss": null,
                    "informational": null,
                    "references": [
                      "https://github.com/sfackler/rust-openssl/pull/2360"
                    ],
                    "source": null,
                    "url": "https://github.com/sfackler/rust-openssl/security/advisories/GHSA-rpmj-rpgj-qmpm",
                    "withdrawn": null,
                    "license": "CC0-1.0"
                  },
                  "versions": {
                    "patched": [
                      ">=0.10.70"
                    ],
                    "unaffected": []
                  },
                  "affected": {
                    "arch": [],
                    "os": [],
                    "functions": {
                      "openssl::ssl::select_next_proto": [
                        ">=0.10.0, <0.10.70"
                      ]
                    }
                  },
                  "package": {
                    "name": "openssl",
                    "version": "0.10.38",
                    "source": "registry+https://github.com/rust-lang/crates.io-index",
                    "checksum": "0c7ae222234c30df141154f159066c5093ff73b63204dcda7121eb082fc56a95",
                    "dependencies": [
                      {
                        "name": "bitflags",
                        "version": "1.3.2",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "cfg-if",
                        "version": "1.0.0",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "foreign-types",
                        "version": "0.3.2",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "libc",
                        "version": "0.2.117",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "once_cell",
                        "version": "1.9.0",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "openssl-sys",
                        "version": "0.9.72",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      }
                    ],
                    "replace": null
                  }
                },
                {
                  "advisory": {
                    "id": "RUSTSEC-2023-0018",
                    "package": "remove_dir_all",
                    "title": "Race Condition Enabling Link Following and Time-of-check Time-of-use (TOCTOU)",
                    "description": "The remove_dir_all crate is a Rust library that offers additional features over the Rust\nstandard library fs::remove_dir_all function.\n\nIt was possible to trick a privileged process doing a recursive delete in an\nattacker controlled directory into deleting privileged files, on all operating systems.\n\nFor instance, consider deleting a tree called 'etc' in a parent directory\ncalled 'p'. Between calling `remove_dir_all(\"a\")` and remove_dir_all(\"a\")\nactually starting its work, the attacker can move 'p' to 'p-prime', and\nreplace 'p' with a symlink to '/'. Then the privileged process deletes 'p/etc'\nwhich is actually /etc, and now your system is broken. There are some\nmitigations for this exact scenario, such as CWD relative file lookup, but\nthey are not guaranteed - any code using absolute paths will not have that\nprotection in place.\n\nThe same attack could be performed at any point in the directory tree being\ndeleted: if 'a' contains a child directory called 'etc', attacking the\ndeletion by replacing 'a' with a link is possible.\n\nThe new code in this release mitigates the attack within the directory tree\nbeing deleted by using file-handle relative operations: to open 'a/etc', the\npath 'etc' relative to 'a' is opened, where 'a' is represented by a file\ndescriptor (Unix) or handle (Windows). With the exception of the entry points\ninto the directory deletion logic, this is robust against manipulation of the\ndirectory hierarchy, and remove_dir_all will only delete files and directories\ncontained in the tree it is deleting.\n\nThe entry path however is a challenge - as described above, there are some\npotential mitigations, but since using them must be done by the calling code,\nit is hard to be confident about the security properties of the path based\ninterface.\n\nThe new extension trait `RemoveDir` provides an interface where it is much\nharder to get it wrong.\n\n`somedir.remove_dir_contents(\"name-of-child\")`.\n\nCallers can then make their own security evaluation about how to securely get\na directory handle. That is still not particularly obvious, and we're going to\nfollow up with a helper of some sort (probably in the `fs_at` crate). Once\nthat is available, the path based entry points will get deprecated.\n\nIn the interim, processes that might run with elevated privileges should\nfigure out how to securely identify the directory they are going to delete, to\navoid the initial race. Pragmatically, other processes should be fine with the\npath based entry points : this is the same interface `std::fs::remove_dir_all`\noffers, and an unprivileged process running in an attacker controlled\ndirectory can't do anything that the attacker can't already do.",
                    "date": "2023-02-24",
                    "aliases": [
                      "GHSA-mc8h-8q98-g5hr"
                    ],
                    "related": [],
                    "collection": "crates",
                    "categories": [],
                    "keywords": [
                      "TOCTOU"
                    ],
                    "cvss": null,
                    "informational": null,
                    "references": [
                      "https://github.com/advisories/GHSA-mc8h-8q98-g5hr"
                    ],
                    "source": null,
                    "url": "https://github.com/XAMPPRocky/remove_dir_all/commit/7247a8b6ee59fc99bbb69ca6b3ca4bfd8c809ead",
                    "withdrawn": null,
                    "license": "CC0-1.0"
                  },
                  "versions": {
                    "patched": [
                      ">=0.8.0"
                    ],
                    "unaffected": []
                  },
                  "affected": {
                    "arch": [],
                    "os": [],
                    "functions": {
                      "remove_dir_all::ensure_empty_dir": [
                        "<0.8.0"
                      ],
                      "remove_dir_all::remove_dir_all": [
                        "<0.8.0"
                      ],
                      "remove_dir_all::remove_dir_contents": [
                        "<0.8.0"
                      ]
                    }
                  },
                  "package": {
                    "name": "remove_dir_all",
                    "version": "0.5.3",
                    "source": "registry+https://github.com/rust-lang/crates.io-index",
                    "checksum": "3acd125665422973a33ac9d3dd2df85edad0f4ae9b00dafb1a05e43a9f5ef8e7",
                    "dependencies": [
                      {
                        "name": "winapi",
                        "version": "0.3.9",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      }
                    ],
                    "replace": null
                  }
                },
                {
                  "advisory": {
                    "id": "RUSTSEC-2020-0071",
                    "package": "time",
                    "title": "Potential segfault in the time crate",
                    "description": "### Impact\n\nThe affected functions set environment variables without synchronization. On Unix-like operating systems, this can crash in multithreaded programs. Programs may segfault due to dereferencing a dangling pointer if an environment variable is read in a different thread than the affected functions. This may occur without the user's knowledge, notably in the Rust standard library or third-party libraries.\n\nThe affected functions from time 0.2.7 through 0.2.22 are:\n\n- `time::UtcOffset::local_offset_at`\n- `time::UtcOffset::try_local_offset_at`\n- `time::UtcOffset::current_local_offset`\n- `time::UtcOffset::try_current_local_offset`\n- `time::OffsetDateTime::now_local`\n- `time::OffsetDateTime::try_now_local`\n\nThe affected functions in time 0.1 (all versions) are:\n\n- `time::at_utc`\n- `time::at`\n- `time::now`\n- `time::tzset`\n\nNon-Unix targets (including Windows and wasm) are unaffected.\n\n### Patches\n\nPending a proper fix, the internal method that determines the local offset has been modified to always return `None` on the affected operating systems. This has the effect of returning an `Err` on the `try_*` methods and `UTC` on the non-`try_*` methods.\n\nUsers and library authors with time in their dependency tree should perform `cargo update`, which will pull in the updated, unaffected code.\n\nUsers of time 0.1 do not have a patch and should upgrade to an unaffected version: time 0.2.23 or greater or the 0.3 series.\n\n### Workarounds\n\nA possible workaround for crates affected through the transitive dependency in `chrono`, is to avoid using the default `oldtime` feature dependency of the `chrono` crate by disabling its `default-features` and manually specifying the required features instead.\n\n#### Examples:\n\n`Cargo.toml`:  \n\n```toml\nchrono = { version = \"0.4\", default-features = false, features = [\"serde\"] }\n```\n\n```toml\nchrono = { version = \"0.4.22\", default-features = false, features = [\"clock\"] }\n```\n\nCommandline:  \n\n```bash\ncargo add chrono --no-default-features -F clock\n```\n\nSources:  \n - [chronotope/chrono#602 (comment)](https://github.com/chronotope/chrono/issues/602#issuecomment-1242149249)  \n - [vityafx/serde-aux#21](https://github.com/vityafx/serde-aux/issues/21)",
                    "date": "2020-11-18",
                    "aliases": [
                      "CVE-2020-26235",
                      "GHSA-wcg3-cvx6-7396"
                    ],
                    "related": [],
                    "collection": "crates",
                    "categories": [
                      "code-execution",
                      "memory-corruption"
                    ],
                    "keywords": [
                      "segfault"
                    ],
                    "cvss": "CVSS:3.1/AV:L/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
                    "informational": null,
                    "references": [],
                    "source": null,
                    "url": "https://github.com/time-rs/time/issues/293",
                    "withdrawn": null,
                    "license": "CC0-1.0"
                  },
                  "versions": {
                    "patched": [
                      ">=0.2.23"
                    ],
                    "unaffected": [
                      "=0.2.0",
                      "=0.2.1",
                      "=0.2.2",
                      "=0.2.3",
                      "=0.2.4",
                      "=0.2.5",
                      "=0.2.6"
                    ]
                  },
                  "affected": {
                    "arch": [],
                    "os": [
                      "linux",
                      "redox",
                      "solaris",
                      "android",
                      "ios",
                      "macos",
                      "netbsd",
                      "openbsd",
                      "freebsd"
                    ],
                    "functions": {
                      "time::OffsetDateTime::now_local": [
                        "<0.2.23"
                      ],
                      "time::OffsetDateTime::try_now_local": [
                        "<0.2.23"
                      ],
                      "time::UtcOffset::current_local_offset": [
                        "<0.2.23"
                      ],
                      "time::UtcOffset::local_offset_at": [
                        "<0.2.23"
                      ],
                      "time::UtcOffset::try_current_local_offset": [
                        "<0.2.23"
                      ],
                      "time::UtcOffset::try_local_offset_at": [
                        "<0.2.23"
                      ],
                      "time::at": [
                        "^0.1"
                      ],
                      "time::at_utc": [
                        "^0.1"
                      ],
                      "time::now": [
                        "^0.1"
                      ]
                    }
                  },
                  "package": {
                    "name": "time",
                    "version": "0.1.44",
                    "source": "registry+https://github.com/rust-lang/crates.io-index",
                    "checksum": "6db9e6914ab8b1ae1c260a4ae7a49b6c5611b40328a735b21862567685e73255",
                    "dependencies": [
                      {
                        "name": "libc",
                        "version": "0.2.117",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "wasi",
                        "version": "0.10.0+wasi-snapshot-preview1",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "winapi",
                        "version": "0.3.9",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      }
                    ],
                    "replace": null
                  }
                },
                {
                  "advisory": {
                    "id": "RUSTSEC-2021-0124",
                    "package": "tokio",
                    "title": "Data race when sending and receiving after closing a `oneshot` channel",
                    "description": "If a `tokio::sync::oneshot` channel is closed (via the\n[`oneshot::Receiver::close`] method), a data race may occur if the\n`oneshot::Sender::send` method is called while the corresponding\n`oneshot::Receiver` is `await`ed or calling `try_recv`.\n\nWhen these methods are called concurrently on a closed channel, the two halves\nof the channel can concurrently access a shared memory location, resulting in a\ndata race. This has been observed to [cause memory corruption][corruption].\n\nNote that the race only occurs when **both** halves of the channel are used\nafter the `Receiver` half has called `close`. Code where `close` is not used, or where the\n`Receiver` is not `await`ed and `try_recv` is not called after calling `close`,\nis not affected.\n\nSee [tokio#4225][issue] for more details.\n\n[corruption]: https://github.com/tokio-rs/tokio/issues/4225#issuecomment-967434847\n[issue]: https://github.com/tokio-rs/tokio/issues/4225\n[`oneshot::Receiver::close`]: https://docs.rs/tokio/1.14.0/tokio/sync/oneshot/struct.Receiver.html#method.close",
                    "date": "2021-11-16",
                    "aliases": [
                      "CVE-2021-45710",
                      "GHSA-fg7r-2g4j-5cgr"
                    ],
                    "related": [],
                    "collection": "crates",
                    "categories": [
                      "memory-corruption",
                      "thread-safety"
                    ],
                    "keywords": [
                      "race condition"
                    ],
                    "cvss": null,
                    "informational": null,
                    "references": [],
                    "source": null,
                    "url": "https://github.com/tokio-rs/tokio/issues/4225",
                    "withdrawn": null,
                    "license": "CC0-1.0"
                  },
                  "versions": {
                    "patched": [
                      ">=1.8.4, <1.9.0",
                      ">=1.13.1"
                    ],
                    "unaffected": [
                      "<0.1.14"
                    ]
                  },
                  "affected": {
                    "arch": [],
                    "os": [],
                    "functions": {
                      "tokio::sync::oneshot::Receiver::close": [
                        "<=1.13.0, >=0.1.14"
                      ]
                    }
                  },
                  "package": {
                    "name": "tokio",
                    "version": "0.1.22",
                    "source": "registry+https://github.com/rust-lang/crates.io-index",
                    "checksum": "5a09c0b5bb588872ab2f09afa13ee6e9dac11e10a0ec9e8e3ba39a5a5d530af6",
                    "dependencies": [
                      {
                        "name": "bytes",
                        "version": "0.4.12",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "futures",
                        "version": "0.1.31",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "mio",
                        "version": "0.6.23",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "num_cpus",
                        "version": "1.13.1",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "tokio-codec",
                        "version": "0.1.2",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "tokio-current-thread",
                        "version": "0.1.7",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "tokio-executor",
                        "version": "0.1.10",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "tokio-io",
                        "version": "0.1.13",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "tokio-reactor",
                        "version": "0.1.12",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "tokio-tcp",
                        "version": "0.1.4",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "tokio-threadpool",
                        "version": "0.1.18",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "tokio-timer",
                        "version": "0.2.13",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      }
                    ],
                    "replace": null
                  }
                }
              ]
            },
            "warnings": {
              "unmaintained": [
                {
                  "kind": "unmaintained",
                  "package": {
                    "name": "instant",
                    "version": "0.1.12",
                    "source": "registry+https://github.com/rust-lang/crates.io-index",
                    "checksum": "7a5bbe824c507c5da5956355e86a746d82e0e1464f65d862cc5e71da70e94b2c",
                    "dependencies": [
                      {
                        "name": "cfg-if",
                        "version": "1.0.0",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      }
                    ],
                    "replace": null
                  },
                  "advisory": {
                    "id": "RUSTSEC-2024-0384",
                    "package": "instant",
                    "title": "`instant` is unmaintained",
                    "description": "This crate is no longer maintained, and the author recommends using the maintained [`web-time`] crate instead.\n\n[`web-time`]: https://crates.io/crates/web-time",
                    "date": "2024-09-01",
                    "aliases": [],
                    "related": [],
                    "collection": "crates",
                    "categories": [],
                    "keywords": [],
                    "cvss": null,
                    "informational": "unmaintained",
                    "references": [
                      "https://crates.io/crates/instant/0.1.13",
                      "https://github.com/sebcrozet/instant/issues/52"
                    ],
                    "source": null,
                    "url": null,
                    "withdrawn": null,
                    "license": "CC0-1.0"
                  },
                  "affected": null,
                  "versions": {
                    "patched": [],
                    "unaffected": []
                  }
                },
                {
                  "kind": "unmaintained",
                  "package": {
                    "name": "net2",
                    "version": "0.2.37",
                    "source": "registry+https://github.com/rust-lang/crates.io-index",
                    "checksum": "391630d12b68002ae1e25e8f974306474966550ad82dac6886fb8910c19568ae",
                    "dependencies": [
                      {
                        "name": "cfg-if",
                        "version": "0.1.10",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "libc",
                        "version": "0.2.117",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "winapi",
                        "version": "0.3.9",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      }
                    ],
                    "replace": null
                  },
                  "advisory": {
                    "id": "RUSTSEC-2020-0016",
                    "package": "net2",
                    "title": "`net2` crate has been deprecated; use `socket2` instead",
                    "description": "The [`net2`](https://crates.io/crates/net2) crate has been deprecated\nand users are encouraged to considered [`socket2`](https://crates.io/crates/socket2) instead.",
                    "date": "2020-05-01",
                    "aliases": [],
                    "related": [],
                    "collection": "crates",
                    "categories": [],
                    "keywords": [],
                    "cvss": null,
                    "informational": "unmaintained",
                    "references": [],
                    "source": null,
                    "url": "https://github.com/deprecrated/net2-rs/commit/3350e3819adf151709047e93f25583a5df681091",
                    "withdrawn": null,
                    "license": "CC0-1.0"
                  },
                  "affected": null,
                  "versions": {
                    "patched": [],
                    "unaffected": []
                  }
                },
                {
                  "kind": "unmaintained",
                  "package": {
                    "name": "safemem",
                    "version": "0.3.3",
                    "source": "registry+https://github.com/rust-lang/crates.io-index",
                    "checksum": "ef703b7cb59335eae2eb93ceb664c0eb7ea6bf567079d843e09420219668e072",
                    "replace": null
                  },
                  "advisory": {
                    "id": "RUSTSEC-2023-0081",
                    "package": "safemem",
                    "title": "safemem is unmaintained",
                    "description": "The latest crates.io release was in 2019. The repository has been archived by the author.\n\n## Migration\n\n- `safemem::copy_over(slice, src_idx, dest_idx, len);` can be replaced with `slice.copy_within(src_idx..src_idx+len, dest_idx);` as of `rust 1.37.0`.\n- `safemem::write_bytes(slice, byte);` can be replaced with `slice.fill(byte);` as of `rust 1.50.0`\n- `safemem::prepend(slice, vec);` can be replaced with\n\n  ```rust\n  let old_len = vec.len();\n  vec.extend_from_slice(slice);\n  vec.rotate_left(old_len);\n  ```\n  \n  as of `rust 1.26.0`",
                    "date": "2023-02-14",
                    "aliases": [],
                    "related": [],
                    "collection": "crates",
                    "categories": [],
                    "keywords": [],
                    "cvss": null,
                    "informational": "unmaintained",
                    "references": [],
                    "source": null,
                    "url": "https://github.com/abonander/safemem",
                    "withdrawn": null,
                    "license": "CC0-1.0"
                  },
                  "affected": null,
                  "versions": {
                    "patched": [],
                    "unaffected": []
                  }
                },
                {
                  "kind": "unmaintained",
                  "package": {
                    "name": "traitobject",
                    "version": "0.1.0",
                    "source": "registry+https://github.com/rust-lang/crates.io-index",
                    "checksum": "efd1f82c56340fdf16f2a953d7bda4f8fdffba13d93b00844c25572110b26079",
                    "replace": null
                  },
                  "advisory": {
                    "id": "RUSTSEC-2021-0144",
                    "package": "traitobject",
                    "title": "traitobject is Unmaintained",
                    "description": "Crate `traitobject` has not had a release for over five years.\n\nIn addition there is an existing security advisory that has not been addressed:\n\n - [RUSTSEC-2020-0027](https://rustsec.org/advisories/RUSTSEC-2020-0027)\n\n## Possible Alternative(s)\n\n The below list has not been vetted in any way and may or may not contain alternatives;\n\n - [destructure_traitobject]\n\n[destructure_traitobject]: https://crates.io/crates/destructure_traitobject",
                    "date": "2021-10-04",
                    "aliases": [
                      "GHSA-pp8r-vv2j-9j5v"
                    ],
                    "related": [],
                    "collection": "crates",
                    "categories": [],
                    "keywords": [],
                    "cvss": null,
                    "informational": "unmaintained",
                    "references": [
                      "https://rustsec.org/advisories/RUSTSEC-2020-0027"
                    ],
                    "source": null,
                    "url": "https://github.com/reem/rust-traitobject/issues/7",
                    "withdrawn": null,
                    "license": "CC0-1.0"
                  },
                  "affected": null,
                  "versions": {
                    "patched": [],
                    "unaffected": []
                  }
                }
              ],
              "unsound": [
                {
                  "kind": "unsound",
                  "package": {
                    "name": "crossbeam-utils",
                    "version": "0.7.2",
                    "source": "registry+https://github.com/rust-lang/crates.io-index",
                    "checksum": "c3c7c73a2d1e9fc0886a08b93e98eb643461230d5f1925e4036204d5f2e261a8",
                    "dependencies": [
                      {
                        "name": "autocfg",
                        "version": "1.0.1",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "cfg-if",
                        "version": "0.1.10",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "lazy_static",
                        "version": "1.4.0",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      }
                    ],
                    "replace": null
                  },
                  "advisory": {
                    "id": "RUSTSEC-2022-0041",
                    "package": "crossbeam-utils",
                    "title": "Unsoundness of AtomicCell<*64> arithmetics on 32-bit targets that support Atomic*64",
                    "description": "## Impact\n\nAffected versions of this crate incorrectly assumed that the alignment of {i,u}64 was always the same as Atomic{I,U}64.\n\nHowever, the alignment of {i,u}64 on a 32-bit target can be smaller than Atomic{I,U}64.\n\nThis can cause the following problems:\n\n- Unaligned memory accesses\n- Data race\n\nCrates using fetch_* methods with AtomicCell<{i,u}64> are affected by this issue.\n\n32-bit targets without Atomic{I,U}64 and 64-bit targets are not affected by this issue.\n\n32-bit targets with Atomic{I,U}64 and {i,u}64 have the same alignment are also not affected by this issue.\n\nThe following is a complete list of the builtin targets that may be affected. (last update: nightly-2022-02-11)\n\n- armv7-apple-ios (tier 3)\n- armv7s-apple-ios (tier 3)\n- i386-apple-ios (tier 3)\n- i586-unknown-linux-gnu\n- i586-unknown-linux-musl\n- i686-apple-darwin (tier 3)\n- i686-linux-android\n- i686-unknown-freebsd\n- i686-unknown-haiku (tier 3)\n- i686-unknown-linux-gnu\n- i686-unknown-linux-musl\n- i686-unknown-netbsd (tier 3)\n- i686-unknown-openbsd (tier 3)\n- i686-wrs-vxworks (tier 3)\n\n([script to get list](https://gist.github.com/taiki-e/3c7891e8c5f5e0cbcb44d7396aabfe10))\n\n## Patches\n\nThis has been fixed in crossbeam-utils 0.8.7.\n\nAffected 0.8.x releases have been yanked.\n\nThanks to @taiki-e",
                    "date": "2022-02-05",
                    "aliases": [
                      "GHSA-qc84-gqf4-9926",
                      "CVE-2022-23639"
                    ],
                    "related": [],
                    "collection": "crates",
                    "categories": [
                      "memory-corruption"
                    ],
                    "keywords": [],
                    "cvss": null,
                    "informational": "unsound",
                    "references": [],
                    "source": null,
                    "url": "https://github.com/crossbeam-rs/crossbeam/pull/781",
                    "withdrawn": null,
                    "license": "CC0-1.0"
                  },
                  "affected": null,
                  "versions": {
                    "patched": [
                      ">=0.8.7"
                    ],
                    "unaffected": []
                  }
                },
                {
                  "kind": "unsound",
                  "package": {
                    "name": "hyper",
                    "version": "0.10.16",
                    "source": "registry+https://github.com/rust-lang/crates.io-index",
                    "checksum": "0a0652d9a2609a968c14be1a9ea00bf4b1d64e2e1f53a1b51b6fff3a6e829273",
                    "dependencies": [
                      {
                        "name": "base64",
                        "version": "0.9.3",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "httparse",
                        "version": "1.5.1",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "language-tags",
                        "version": "0.2.2",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "log",
                        "version": "0.3.9",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "mime",
                        "version": "0.2.6",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "num_cpus",
                        "version": "1.13.1",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "time",
                        "version": "0.1.44",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "traitobject",
                        "version": "0.1.0",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "typeable",
                        "version": "0.1.2",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "unicase",
                        "version": "1.4.2",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "url",
                        "version": "1.7.2",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      }
                    ],
                    "replace": null
                  },
                  "advisory": {
                    "id": "RUSTSEC-2022-0022",
                    "package": "hyper",
                    "title": "Parser creates invalid uninitialized value",
                    "description": "Affected versions of this crate called `mem::uninitialized()` in the HTTP1 parser to create values of type `httparse::Header` (from the `httparse` crate).\nThis is unsound, since `Header` contains references and thus must be non-null.\n \nThe flaw was corrected by avoiding the use of `mem::uninitialized()`, using `MaybeUninit` instead.",
                    "date": "2022-05-10",
                    "aliases": [
                      "GHSA-f67m-9j94-qv9j"
                    ],
                    "related": [],
                    "collection": "crates",
                    "categories": [],
                    "keywords": [],
                    "cvss": null,
                    "informational": "unsound",
                    "references": [],
                    "source": null,
                    "url": "https://github.com/hyperium/hyper/pull/2545",
                    "withdrawn": null,
                    "license": "CC0-1.0"
                  },
                  "affected": null,
                  "versions": {
                    "patched": [
                      ">=0.14.12"
                    ],
                    "unaffected": []
                  }
                },
                {
                  "kind": "unsound",
                  "package": {
                    "name": "lock_api",
                    "version": "0.3.4",
                    "source": "registry+https://github.com/rust-lang/crates.io-index",
                    "checksum": "c4da24a77a3d8a6d4862d95f72e6fdb9c09a643ecdb402d754004a557f2bec75",
                    "dependencies": [
                      {
                        "name": "scopeguard",
                        "version": "1.1.0",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      }
                    ],
                    "replace": null
                  },
                  "advisory": {
                    "id": "RUSTSEC-2020-0070",
                    "package": "lock_api",
                    "title": "Some lock_api lock guard objects can cause data races",
                    "description": "Affected versions of lock_api had unsound implementations of the `Send` or\n`Sync` traits for some guard objects, namely:\n\n* MappedMutexGuard\n* MappedRwLockReadGuard\n* MappedRwLockWriteGuard\n* RwLockReadGuard\n* RwLockWriteGuard\n\nThese guards could allow data races through types that are not safe to `Send`\nacross thread boundaries in safe Rust code.\n\nThis issue was fixed by changing the trait bounds on the `Mapped` guard types\nand removing the `Sync` trait for the `RwLock` guards.",
                    "date": "2020-11-08",
                    "aliases": [
                      "CVE-2020-35910",
                      "CVE-2020-35911",
                      "CVE-2020-35912",
                      "CVE-2020-35913",
                      "CVE-2020-35914",
                      "GHSA-5wg8-7c9q-794v",
                      "GHSA-gmv4-vmx3-x9f3",
                      "GHSA-hj9h-wrgg-hgmx",
                      "GHSA-ppj3-7jw3-8vc4",
                      "GHSA-vh4p-6j7g-f4j9"
                    ],
                    "related": [],
                    "collection": "crates",
                    "categories": [
                      "memory-corruption",
                      "thread-safety"
                    ],
                    "keywords": [
                      "concurrency"
                    ],
                    "cvss": null,
                    "informational": "unsound",
                    "references": [],
                    "source": null,
                    "url": "https://github.com/Amanieu/parking_lot/pull/262",
                    "withdrawn": null,
                    "license": "CC0-1.0"
                  },
                  "affected": {
                    "arch": [],
                    "os": [],
                    "functions": {
                      "lock_api::MappedMutexGuard": [
                        ">=0.1.0"
                      ],
                      "lock_api::MappedRwLockReadGuard": [
                        ">=0.1.0"
                      ],
                      "lock_api::MappedRwLockWriteGuard": [
                        ">=0.1.0"
                      ],
                      "lock_api::RwLockReadGuard": [
                        ">=0.1.0"
                      ],
                      "lock_api::RwLockWriteGuard": [
                        ">=0.1.0"
                      ]
                    }
                  },
                  "versions": {
                    "patched": [
                      ">=0.4.2"
                    ],
                    "unaffected": []
                  }
                },
                {
                  "kind": "unsound",
                  "package": {
                    "name": "memoffset",
                    "version": "0.5.6",
                    "source": "registry+https://github.com/rust-lang/crates.io-index",
                    "checksum": "043175f069eda7b85febe4a74abbaeff828d9f8b448515d3151a14a3542811aa",
                    "dependencies": [
                      {
                        "name": "autocfg",
                        "version": "1.0.1",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      }
                    ],
                    "replace": null
                  },
                  "advisory": {
                    "id": "RUSTSEC-2023-0045",
                    "package": "memoffset",
                    "title": "memoffset allows reading uninitialized memory",
                    "description": "memoffset allows attempt of reading data from address `0` with arbitrary type. This behavior is an undefined behavior because address `0` to `std::mem::size_of<T>` may not have valid bit-pattern with `T`. Old implementation dereferences uninitialized memory obtained from `std::mem::align_of`. Older implementation prior to it allows using uninitialized data obtained from `std::mem::uninitialized` with arbitrary type then compute offset by taking the address of field-projection. This may also result in an undefined behavior for \"father\" that includes (directly or transitively) type that [does not allow to be uninitialized](https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html).\n\nThis flaw was corrected by using `std::ptr::addr_of` in <https://github.com/Gilnaa/memoffset/pull/50>.",
                    "date": "2023-06-21",
                    "aliases": [
                      "GHSA-wfg4-322g-9vqv"
                    ],
                    "related": [],
                    "collection": "crates",
                    "categories": [
                      "memory-corruption"
                    ],
                    "keywords": [
                      "memoffset",
                      "offset"
                    ],
                    "cvss": null,
                    "informational": "unsound",
                    "references": [],
                    "source": null,
                    "url": "https://github.com/Gilnaa/memoffset/issues/24",
                    "withdrawn": null,
                    "license": "CC0-1.0"
                  },
                  "affected": {
                    "arch": [],
                    "os": [],
                    "functions": {
                      "memoffset::offset_of": [
                        "<0.6.2"
                      ]
                    }
                  },
                  "versions": {
                    "patched": [
                      ">=0.6.2"
                    ],
                    "unaffected": []
                  }
                },
                {
                  "kind": "unsound",
                  "package": {
                    "name": "openssl",
                    "version": "0.10.38",
                    "source": "registry+https://github.com/rust-lang/crates.io-index",
                    "checksum": "0c7ae222234c30df141154f159066c5093ff73b63204dcda7121eb082fc56a95",
                    "dependencies": [
                      {
                        "name": "bitflags",
                        "version": "1.3.2",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "cfg-if",
                        "version": "1.0.0",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "foreign-types",
                        "version": "0.3.2",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "libc",
                        "version": "0.2.117",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "once_cell",
                        "version": "1.9.0",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "openssl-sys",
                        "version": "0.9.72",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      }
                    ],
                    "replace": null
                  },
                  "advisory": {
                    "id": "RUSTSEC-2023-0072",
                    "package": "openssl",
                    "title": "`openssl` `X509StoreRef::objects` is unsound",
                    "description": "This function returned a shared reference into an OpenSSL datastructure but did not account for interior mutability. OpenSSL may modify the data behind this reference, meaning accesses can race and the reference is unsound.\n\nUse of this function should be replaced with `X509StoreRef::all_certificates`.",
                    "date": "2023-11-23",
                    "aliases": [
                      "GHSA-xphf-cx8h-7q9g"
                    ],
                    "related": [],
                    "collection": "crates",
                    "categories": [
                      "memory-corruption"
                    ],
                    "keywords": [],
                    "cvss": null,
                    "informational": "unsound",
                    "references": [],
                    "source": null,
                    "url": "https://github.com/sfackler/rust-openssl/issues/2096",
                    "withdrawn": null,
                    "license": "CC0-1.0"
                  },
                  "affected": {
                    "arch": [],
                    "os": [],
                    "functions": {
                      "openssl::x509::store::X509StoreRef::objects": [
                        "<0.10.60, >=0.10.29"
                      ]
                    }
                  },
                  "versions": {
                    "patched": [
                      ">=0.10.60"
                    ],
                    "unaffected": []
                  }
                },
                {
                  "kind": "unsound",
                  "package": {
                    "name": "traitobject",
                    "version": "0.1.0",
                    "source": "registry+https://github.com/rust-lang/crates.io-index",
                    "checksum": "efd1f82c56340fdf16f2a953d7bda4f8fdffba13d93b00844c25572110b26079",
                    "replace": null
                  },
                  "advisory": {
                    "id": "RUSTSEC-2020-0027",
                    "package": "traitobject",
                    "title": "traitobject assumes the layout of fat pointers",
                    "description": "This crate gets the data pointer from fat pointers assuming that the first\nelement in a fat pointer is the data pointer. This is currently true, but\nit may change in a future Rust version, leading to memory corruption.\n\nThis has been fixed in the master branch of the crate, but is has not\nbeen released into crates.io.",
                    "date": "2020-06-01",
                    "aliases": [
                      "CVE-2020-35881",
                      "GHSA-j79j-cx3h-g27h"
                    ],
                    "related": [],
                    "collection": "crates",
                    "categories": [
                      "memory-corruption"
                    ],
                    "keywords": [],
                    "cvss": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H",
                    "informational": "unsound",
                    "references": [],
                    "source": null,
                    "url": "https://github.com/reem/rust-traitobject/issues/7",
                    "withdrawn": null,
                    "license": "CC0-1.0"
                  },
                  "affected": {
                    "arch": [],
                    "os": [],
                    "functions": {
                      "traitobject::data": [],
                      "traitobject::data_mut": []
                    }
                  },
                  "versions": {
                    "patched": [],
                    "unaffected": []
                  }
                }
              ]
            }
          },
          "note": "Crate analysis performed with stable toolchain."
        },
        "crate_metadata": {
          "name": "websocket",
          "version": "0.27.1",
          "description": "ALLOW: Positive community sentiment",
          "repository": "",
          "keywords": [],
          "categories": [],
          "readme": {
            "raw_markdown": "[](https://docs.rs/websocket/latest/websocket/all.html \"show sidebar\")\n# Crate websocketCopy item path\n[Settings](https://docs.rs/websocket/latest/settings.html)\n[Help](https://docs.rs/websocket/latest/help.html)\nSummary[Source](https://docs.rs/websocket/latest/src/websocket/lib.rs.html#1-164)\nExpand description\nRust-WebSocket is a WebSocket (RFC6455) library written in Rust.\n## [\u00a7](https://docs.rs/websocket/latest/websocket/#synchronous-and-asynchronous)Synchronous and Asynchronous\nThis crate has both async and sync implementations of websockets, you are free to choose which one you would like to use by switching on the `async` or `sync` features for this crate. By default both are switched on since they do not conflict with each other.\nYou\u2019ll find many modules with `::sync` and `::async` submodules that separate these behaviours. Since it gets tedious to add these on when appropriate, a top-level convenience module called `websocket::sync` and `websocket::async` has been added that groups all the sync and async stuff, respectively.\n## [\u00a7](https://docs.rs/websocket/latest/websocket/#clients)Clients\nTo make a client use the `ClientBuilder` struct, this builder has methods for creating both synchronous and asynchronous clients.\n## [\u00a7](https://docs.rs/websocket/latest/websocket/#servers)Servers\nWebSocket servers act similarly to the `TcpListener`, and listen for connections. See the `Server` struct documentation for more information. The `bind()` and `bind_secure()` functions will bind the server to the given `SocketAddr`.\n## [\u00a7](https://docs.rs/websocket/latest/websocket/#extending-rust-websocket)Extending Rust-WebSocket\nThe `ws` module contains the traits and functions used by Rust-WebSocket at a lower level. Their usage is explained in the module documentation.\n## Re-exports[\u00a7](https://docs.rs/websocket/latest/websocket/#reexports)\n\n`pub extern crate futures[](https://docs.rs/futures/0.1.31/x86_64-unknown-linux-gnu/futures/index.html \"mod futures\");`\n\n\n`pub extern crate native_tls[](https://docs.rs/native-tls/0.2.14/x86_64-unknown-linux-gnu/native_tls/index.html \"mod native_tls\");`\n\n\n`pub extern crate url[](https://docs.rs/url/1.7.2/x86_64-unknown-linux-gnu/url/index.html \"mod url\");`\n\n\n`pub extern crate websocket_base[](https://docs.rs/websocket-base/0.26.5/x86_64-unknown-linux-gnu/websocket_base/index.html \"mod websocket_base\");`\n\n\n`pub use self::client::builder::ClientBuilder[](https://docs.rs/websocket/latest/websocket/client/builder/struct.ClientBuilder.html \"struct websocket::client::builder::ClientBuilder\");`\n\n\n`pub use self::result::WebSocketResult[](https://docs.rs/websocket/latest/websocket/result/type.WebSocketResult.html \"type websocket::result::WebSocketResult\");`\n\n## Modules[\u00a7](https://docs.rs/websocket/latest/websocket/#modules)\n\n[async](https://docs.rs/websocket/latest/websocket/async/index.html \"mod websocket::async\")\n    A collection of handy asynchronous-only parts of the crate.\n\n[client](https://docs.rs/websocket/latest/websocket/client/index.html \"mod websocket::client\")\n    Build and use asynchronously or synchronous websocket clients.\n\n[codec](https://docs.rs/websocket/latest/websocket/codec/index.html \"mod websocket::codec\")\n    Useful `Codec` types for asynchronously encoding and decoding messages.\n\n[dataframe](https://docs.rs/websocket/latest/websocket/dataframe/index.html \"mod websocket::dataframe\")\n    Module containing the default implementation of data frames.\n\n[header](https://docs.rs/websocket/latest/websocket/header/index.html \"mod websocket::header\")\n    Structs representing headers relevant in a WebSocket context.\n\n[message](https://docs.rs/websocket/latest/websocket/message/index.html \"mod websocket::message\")\n    Module containing the default implementation for messages.\n\n[receiver](https://docs.rs/websocket/latest/websocket/receiver/index.html \"mod websocket::receiver\")\n    The default implementation of a WebSocket Receiver.\n\n[result](https://docs.rs/websocket/latest/websocket/result/index.html \"mod websocket::result\")\n    The result type used within Rust-WebSocket\n\n[sender](https://docs.rs/websocket/latest/websocket/sender/index.html \"mod websocket::sender\")\n    The default implementation of a WebSocket Sender.\n\n[server](https://docs.rs/websocket/latest/websocket/server/index.html \"mod websocket::server\")\n    Provides an implementation of a WebSocket server\n\n[stream](https://docs.rs/websocket/latest/websocket/stream/index.html \"mod websocket::stream\")\n    Provides the default stream type for WebSocket connections.\n\n[sync](https://docs.rs/websocket/latest/websocket/sync/index.html \"mod websocket::sync\")\n    A collection of handy synchronous-only parts of the crate.\n\n[ws](https://docs.rs/websocket/latest/websocket/ws/index.html \"mod websocket::ws\")\n    A module containing the traits and structs that lower layer of Rust-WebSocket is based on.\n## Structs[\u00a7](https://docs.rs/websocket/latest/websocket/#structs)\n\n[CloseData](https://docs.rs/websocket/latest/websocket/struct.CloseData.html \"struct websocket::CloseData\")\n    Represents data contained in a Close message\n\n[Message](https://docs.rs/websocket/latest/websocket/struct.Message.html \"struct websocket::Message\")\n    Represents a WebSocket message.\n## Enums[\u00a7](https://docs.rs/websocket/latest/websocket/#enums)\n\n[OwnedMessage](https://docs.rs/websocket/latest/websocket/enum.OwnedMessage.html \"enum websocket::OwnedMessage\")\n    Represents an owned WebSocket message.\n\n[WebSocketError](https://docs.rs/websocket/latest/websocket/enum.WebSocketError.html \"enum websocket::WebSocketError\")\n    Represents a WebSocket error\n",
            "markdown_with_citations": "[](https://docs.rs/websocket/latest/websocket/all.html \"show sidebar\")\n# Crate websocketCopy item path\nSettings\u27e81\u27e9\nHelp\u27e82\u27e9\nSummarySource\u27e83\u27e9\nExpand description\nRust-WebSocket is a WebSocket (RFC6455) library written in Rust.\n## \u00a7\u27e84\u27e9Synchronous and Asynchronous\nThis crate has both async and sync implementations of websockets, you are free to choose which one you would like to use by switching on the `async` or `sync` features for this crate. By default both are switched on since they do not conflict with each other.\nYou\u2019ll find many modules with `::sync` and `::async` submodules that separate these behaviours. Since it gets tedious to add these on when appropriate, a top-level convenience module called `websocket::sync` and `websocket::async` has been added that groups all the sync and async stuff, respectively.\n## \u00a7\u27e85\u27e9Clients\nTo make a client use the `ClientBuilder` struct, this builder has methods for creating both synchronous and asynchronous clients.\n## \u00a7\u27e86\u27e9Servers\nWebSocket servers act similarly to the `TcpListener`, and listen for connections. See the `Server` struct documentation for more information. The `bind()` and `bind_secure()` functions will bind the server to the given `SocketAddr`.\n## \u00a7\u27e87\u27e9Extending Rust-WebSocket\nThe `ws` module contains the traits and functions used by Rust-WebSocket at a lower level. Their usage is explained in the module documentation.\n## Re-exports\u00a7\u27e88\u27e9\n\n`pub extern crate futures[](https://docs.rs/futures/0.1.31/x86_64-unknown-linux-gnu/futures/index.html \"mod futures\");`\n\n\n`pub extern crate native_tls[](https://docs.rs/native-tls/0.2.14/x86_64-unknown-linux-gnu/native_tls/index.html \"mod native_tls\");`\n\n\n`pub extern crate url[](https://docs.rs/url/1.7.2/x86_64-unknown-linux-gnu/url/index.html \"mod url\");`\n\n\n`pub extern crate websocket_base[](https://docs.rs/websocket-base/0.26.5/x86_64-unknown-linux-gnu/websocket_base/index.html \"mod websocket_base\");`\n\n\n`pub use self::client::builder::ClientBuilder[](https://docs.rs/websocket/latest/websocket/client/builder/struct.ClientBuilder.html \"struct websocket::client::builder::ClientBuilder\");`\n\n\n`pub use self::result::WebSocketResult[](https://docs.rs/websocket/latest/websocket/result/type.WebSocketResult.html \"type websocket::result::WebSocketResult\");`\n\n## Modules\u00a7\u27e89\u27e9\n\nasync\u27e810\u27e9\n    A collection of handy asynchronous-only parts of the crate.\n\nclient\u27e811\u27e9\n    Build and use asynchronously or synchronous websocket clients.\n\ncodec\u27e812\u27e9\n    Useful `Codec` types for asynchronously encoding and decoding messages.\n\ndataframe\u27e813\u27e9\n    Module containing the default implementation of data frames.\n\nheader\u27e814\u27e9\n    Structs representing headers relevant in a WebSocket context.\n\nmessage\u27e815\u27e9\n    Module containing the default implementation for messages.\n\nreceiver\u27e816\u27e9\n    The default implementation of a WebSocket Receiver.\n\nresult\u27e817\u27e9\n    The result type used within Rust-WebSocket\n\nsender\u27e818\u27e9\n    The default implementation of a WebSocket Sender.\n\nserver\u27e819\u27e9\n    Provides an implementation of a WebSocket server\n\nstream\u27e820\u27e9\n    Provides the default stream type for WebSocket connections.\n\nsync\u27e821\u27e9\n    A collection of handy synchronous-only parts of the crate.\n\nws\u27e822\u27e9\n    A module containing the traits and structs that lower layer of Rust-WebSocket is based on.\n## Structs\u00a7\u27e823\u27e9\n\nCloseData\u27e824\u27e9\n    Represents data contained in a Close message\n\nMessage\u27e825\u27e9\n    Represents a WebSocket message.\n## Enums\u00a7\u27e826\u27e9\n\nOwnedMessage\u27e827\u27e9\n    Represents an owned WebSocket message.\n\nWebSocketError\u27e828\u27e9\n    Represents a WebSocket error\n",
            "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://docs.rs/websocket/latest/settings.html: Settings\n\u27e82\u27e9 https://docs.rs/websocket/latest/help.html: Help\n\u27e83\u27e9 https://docs.rs/websocket/latest/src/websocket/lib.rs.html#1-164: Source\n\u27e84\u27e9 https://docs.rs/websocket/latest/websocket/#synchronous-and-asynchronous: \u00a7\n\u27e85\u27e9 https://docs.rs/websocket/latest/websocket/#clients: \u00a7\n\u27e86\u27e9 https://docs.rs/websocket/latest/websocket/#servers: \u00a7\n\u27e87\u27e9 https://docs.rs/websocket/latest/websocket/#extending-rust-websocket: \u00a7\n\u27e88\u27e9 https://docs.rs/websocket/latest/websocket/#reexports: \u00a7\n\u27e89\u27e9 https://docs.rs/websocket/latest/websocket/#modules: \u00a7\n\u27e810\u27e9 https://docs.rs/websocket/latest/websocket/async/index.html: mod websocket::async - async\n\u27e811\u27e9 https://docs.rs/websocket/latest/websocket/client/index.html: mod websocket::client - client\n\u27e812\u27e9 https://docs.rs/websocket/latest/websocket/codec/index.html: mod websocket::codec - codec\n\u27e813\u27e9 https://docs.rs/websocket/latest/websocket/dataframe/index.html: mod websocket::dataframe - dataframe\n\u27e814\u27e9 https://docs.rs/websocket/latest/websocket/header/index.html: mod websocket::header - header\n\u27e815\u27e9 https://docs.rs/websocket/latest/websocket/message/index.html: mod websocket::message - message\n\u27e816\u27e9 https://docs.rs/websocket/latest/websocket/receiver/index.html: mod websocket::receiver - receiver\n\u27e817\u27e9 https://docs.rs/websocket/latest/websocket/result/index.html: mod websocket::result - result\n\u27e818\u27e9 https://docs.rs/websocket/latest/websocket/sender/index.html: mod websocket::sender - sender\n\u27e819\u27e9 https://docs.rs/websocket/latest/websocket/server/index.html: mod websocket::server - server\n\u27e820\u27e9 https://docs.rs/websocket/latest/websocket/stream/index.html: mod websocket::stream - stream\n\u27e821\u27e9 https://docs.rs/websocket/latest/websocket/sync/index.html: mod websocket::sync - sync\n\u27e822\u27e9 https://docs.rs/websocket/latest/websocket/ws/index.html: mod websocket::ws - ws\n\u27e823\u27e9 https://docs.rs/websocket/latest/websocket/#structs: \u00a7\n\u27e824\u27e9 https://docs.rs/websocket/latest/websocket/struct.CloseData.html: struct websocket::CloseData - CloseData\n\u27e825\u27e9 https://docs.rs/websocket/latest/websocket/struct.Message.html: struct websocket::Message - Message\n\u27e826\u27e9 https://docs.rs/websocket/latest/websocket/#enums: \u00a7\n\u27e827\u27e9 https://docs.rs/websocket/latest/websocket/enum.OwnedMessage.html: enum websocket::OwnedMessage - OwnedMessage\n\u27e828\u27e9 https://docs.rs/websocket/latest/websocket/enum.WebSocketError.html: enum websocket::WebSocketError - WebSocketError\n",
            "fit_markdown": "",
            "fit_html": ""
          },
          "downloads": 0,
          "github_stars": 0,
          "dependencies": [],
          "features": {},
          "code_snippets": [],
          "readme_sections": {},
          "librs_downloads": null,
          "source": "crates.io",
          "enhanced_scraping": {},
          "enhanced_features": [],
          "enhanced_dependencies": []
        },
        "enriched_crate": {
          "name": "websocket",
          "version": "0.27.1",
          "description": "ALLOW: Positive community sentiment",
          "repository": "",
          "keywords": [],
          "categories": [],
          "readme": {
            "raw_markdown": "[](https://docs.rs/websocket/latest/websocket/all.html \"show sidebar\")\n# Crate websocketCopy item path\n[Settings](https://docs.rs/websocket/latest/settings.html)\n[Help](https://docs.rs/websocket/latest/help.html)\nSummary[Source](https://docs.rs/websocket/latest/src/websocket/lib.rs.html#1-164)\nExpand description\nRust-WebSocket is a WebSocket (RFC6455) library written in Rust.\n## [\u00a7](https://docs.rs/websocket/latest/websocket/#synchronous-and-asynchronous)Synchronous and Asynchronous\nThis crate has both async and sync implementations of websockets, you are free to choose which one you would like to use by switching on the `async` or `sync` features for this crate. By default both are switched on since they do not conflict with each other.\nYou\u2019ll find many modules with `::sync` and `::async` submodules that separate these behaviours. Since it gets tedious to add these on when appropriate, a top-level convenience module called `websocket::sync` and `websocket::async` has been added that groups all the sync and async stuff, respectively.\n## [\u00a7](https://docs.rs/websocket/latest/websocket/#clients)Clients\nTo make a client use the `ClientBuilder` struct, this builder has methods for creating both synchronous and asynchronous clients.\n## [\u00a7](https://docs.rs/websocket/latest/websocket/#servers)Servers\nWebSocket servers act similarly to the `TcpListener`, and listen for connections. See the `Server` struct documentation for more information. The `bind()` and `bind_secure()` functions will bind the server to the given `SocketAddr`.\n## [\u00a7](https://docs.rs/websocket/latest/websocket/#extending-rust-websocket)Extending Rust-WebSocket\nThe `ws` module contains the traits and functions used by Rust-WebSocket at a lower level. Their usage is explained in the module documentation.\n## Re-exports[\u00a7](https://docs.rs/websocket/latest/websocket/#reexports)\n\n`pub extern crate futures[](https://docs.rs/futures/0.1.31/x86_64-unknown-linux-gnu/futures/index.html \"mod futures\");`\n\n\n`pub extern crate native_tls[](https://docs.rs/native-tls/0.2.14/x86_64-unknown-linux-gnu/native_tls/index.html \"mod native_tls\");`\n\n\n`pub extern crate url[](https://docs.rs/url/1.7.2/x86_64-unknown-linux-gnu/url/index.html \"mod url\");`\n\n\n`pub extern crate websocket_base[](https://docs.rs/websocket-base/0.26.5/x86_64-unknown-linux-gnu/websocket_base/index.html \"mod websocket_base\");`\n\n\n`pub use self::client::builder::ClientBuilder[](https://docs.rs/websocket/latest/websocket/client/builder/struct.ClientBuilder.html \"struct websocket::client::builder::ClientBuilder\");`\n\n\n`pub use self::result::WebSocketResult[](https://docs.rs/websocket/latest/websocket/result/type.WebSocketResult.html \"type websocket::result::WebSocketResult\");`\n\n## Modules[\u00a7](https://docs.rs/websocket/latest/websocket/#modules)\n\n[async](https://docs.rs/websocket/latest/websocket/async/index.html \"mod websocket::async\")\n    A collection of handy asynchronous-only parts of the crate.\n\n[client](https://docs.rs/websocket/latest/websocket/client/index.html \"mod websocket::client\")\n    Build and use asynchronously or synchronous websocket clients.\n\n[codec](https://docs.rs/websocket/latest/websocket/codec/index.html \"mod websocket::codec\")\n    Useful `Codec` types for asynchronously encoding and decoding messages.\n\n[dataframe](https://docs.rs/websocket/latest/websocket/dataframe/index.html \"mod websocket::dataframe\")\n    Module containing the default implementation of data frames.\n\n[header](https://docs.rs/websocket/latest/websocket/header/index.html \"mod websocket::header\")\n    Structs representing headers relevant in a WebSocket context.\n\n[message](https://docs.rs/websocket/latest/websocket/message/index.html \"mod websocket::message\")\n    Module containing the default implementation for messages.\n\n[receiver](https://docs.rs/websocket/latest/websocket/receiver/index.html \"mod websocket::receiver\")\n    The default implementation of a WebSocket Receiver.\n\n[result](https://docs.rs/websocket/latest/websocket/result/index.html \"mod websocket::result\")\n    The result type used within Rust-WebSocket\n\n[sender](https://docs.rs/websocket/latest/websocket/sender/index.html \"mod websocket::sender\")\n    The default implementation of a WebSocket Sender.\n\n[server](https://docs.rs/websocket/latest/websocket/server/index.html \"mod websocket::server\")\n    Provides an implementation of a WebSocket server\n\n[stream](https://docs.rs/websocket/latest/websocket/stream/index.html \"mod websocket::stream\")\n    Provides the default stream type for WebSocket connections.\n\n[sync](https://docs.rs/websocket/latest/websocket/sync/index.html \"mod websocket::sync\")\n    A collection of handy synchronous-only parts of the crate.\n\n[ws](https://docs.rs/websocket/latest/websocket/ws/index.html \"mod websocket::ws\")\n    A module containing the traits and structs that lower layer of Rust-WebSocket is based on.\n## Structs[\u00a7](https://docs.rs/websocket/latest/websocket/#structs)\n\n[CloseData](https://docs.rs/websocket/latest/websocket/struct.CloseData.html \"struct websocket::CloseData\")\n    Represents data contained in a Close message\n\n[Message](https://docs.rs/websocket/latest/websocket/struct.Message.html \"struct websocket::Message\")\n    Represents a WebSocket message.\n## Enums[\u00a7](https://docs.rs/websocket/latest/websocket/#enums)\n\n[OwnedMessage](https://docs.rs/websocket/latest/websocket/enum.OwnedMessage.html \"enum websocket::OwnedMessage\")\n    Represents an owned WebSocket message.\n\n[WebSocketError](https://docs.rs/websocket/latest/websocket/enum.WebSocketError.html \"enum websocket::WebSocketError\")\n    Represents a WebSocket error\n",
            "markdown_with_citations": "[](https://docs.rs/websocket/latest/websocket/all.html \"show sidebar\")\n# Crate websocketCopy item path\nSettings\u27e81\u27e9\nHelp\u27e82\u27e9\nSummarySource\u27e83\u27e9\nExpand description\nRust-WebSocket is a WebSocket (RFC6455) library written in Rust.\n## \u00a7\u27e84\u27e9Synchronous and Asynchronous\nThis crate has both async and sync implementations of websockets, you are free to choose which one you would like to use by switching on the `async` or `sync` features for this crate. By default both are switched on since they do not conflict with each other.\nYou\u2019ll find many modules with `::sync` and `::async` submodules that separate these behaviours. Since it gets tedious to add these on when appropriate, a top-level convenience module called `websocket::sync` and `websocket::async` has been added that groups all the sync and async stuff, respectively.\n## \u00a7\u27e85\u27e9Clients\nTo make a client use the `ClientBuilder` struct, this builder has methods for creating both synchronous and asynchronous clients.\n## \u00a7\u27e86\u27e9Servers\nWebSocket servers act similarly to the `TcpListener`, and listen for connections. See the `Server` struct documentation for more information. The `bind()` and `bind_secure()` functions will bind the server to the given `SocketAddr`.\n## \u00a7\u27e87\u27e9Extending Rust-WebSocket\nThe `ws` module contains the traits and functions used by Rust-WebSocket at a lower level. Their usage is explained in the module documentation.\n## Re-exports\u00a7\u27e88\u27e9\n\n`pub extern crate futures[](https://docs.rs/futures/0.1.31/x86_64-unknown-linux-gnu/futures/index.html \"mod futures\");`\n\n\n`pub extern crate native_tls[](https://docs.rs/native-tls/0.2.14/x86_64-unknown-linux-gnu/native_tls/index.html \"mod native_tls\");`\n\n\n`pub extern crate url[](https://docs.rs/url/1.7.2/x86_64-unknown-linux-gnu/url/index.html \"mod url\");`\n\n\n`pub extern crate websocket_base[](https://docs.rs/websocket-base/0.26.5/x86_64-unknown-linux-gnu/websocket_base/index.html \"mod websocket_base\");`\n\n\n`pub use self::client::builder::ClientBuilder[](https://docs.rs/websocket/latest/websocket/client/builder/struct.ClientBuilder.html \"struct websocket::client::builder::ClientBuilder\");`\n\n\n`pub use self::result::WebSocketResult[](https://docs.rs/websocket/latest/websocket/result/type.WebSocketResult.html \"type websocket::result::WebSocketResult\");`\n\n## Modules\u00a7\u27e89\u27e9\n\nasync\u27e810\u27e9\n    A collection of handy asynchronous-only parts of the crate.\n\nclient\u27e811\u27e9\n    Build and use asynchronously or synchronous websocket clients.\n\ncodec\u27e812\u27e9\n    Useful `Codec` types for asynchronously encoding and decoding messages.\n\ndataframe\u27e813\u27e9\n    Module containing the default implementation of data frames.\n\nheader\u27e814\u27e9\n    Structs representing headers relevant in a WebSocket context.\n\nmessage\u27e815\u27e9\n    Module containing the default implementation for messages.\n\nreceiver\u27e816\u27e9\n    The default implementation of a WebSocket Receiver.\n\nresult\u27e817\u27e9\n    The result type used within Rust-WebSocket\n\nsender\u27e818\u27e9\n    The default implementation of a WebSocket Sender.\n\nserver\u27e819\u27e9\n    Provides an implementation of a WebSocket server\n\nstream\u27e820\u27e9\n    Provides the default stream type for WebSocket connections.\n\nsync\u27e821\u27e9\n    A collection of handy synchronous-only parts of the crate.\n\nws\u27e822\u27e9\n    A module containing the traits and structs that lower layer of Rust-WebSocket is based on.\n## Structs\u00a7\u27e823\u27e9\n\nCloseData\u27e824\u27e9\n    Represents data contained in a Close message\n\nMessage\u27e825\u27e9\n    Represents a WebSocket message.\n## Enums\u00a7\u27e826\u27e9\n\nOwnedMessage\u27e827\u27e9\n    Represents an owned WebSocket message.\n\nWebSocketError\u27e828\u27e9\n    Represents a WebSocket error\n",
            "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://docs.rs/websocket/latest/settings.html: Settings\n\u27e82\u27e9 https://docs.rs/websocket/latest/help.html: Help\n\u27e83\u27e9 https://docs.rs/websocket/latest/src/websocket/lib.rs.html#1-164: Source\n\u27e84\u27e9 https://docs.rs/websocket/latest/websocket/#synchronous-and-asynchronous: \u00a7\n\u27e85\u27e9 https://docs.rs/websocket/latest/websocket/#clients: \u00a7\n\u27e86\u27e9 https://docs.rs/websocket/latest/websocket/#servers: \u00a7\n\u27e87\u27e9 https://docs.rs/websocket/latest/websocket/#extending-rust-websocket: \u00a7\n\u27e88\u27e9 https://docs.rs/websocket/latest/websocket/#reexports: \u00a7\n\u27e89\u27e9 https://docs.rs/websocket/latest/websocket/#modules: \u00a7\n\u27e810\u27e9 https://docs.rs/websocket/latest/websocket/async/index.html: mod websocket::async - async\n\u27e811\u27e9 https://docs.rs/websocket/latest/websocket/client/index.html: mod websocket::client - client\n\u27e812\u27e9 https://docs.rs/websocket/latest/websocket/codec/index.html: mod websocket::codec - codec\n\u27e813\u27e9 https://docs.rs/websocket/latest/websocket/dataframe/index.html: mod websocket::dataframe - dataframe\n\u27e814\u27e9 https://docs.rs/websocket/latest/websocket/header/index.html: mod websocket::header - header\n\u27e815\u27e9 https://docs.rs/websocket/latest/websocket/message/index.html: mod websocket::message - message\n\u27e816\u27e9 https://docs.rs/websocket/latest/websocket/receiver/index.html: mod websocket::receiver - receiver\n\u27e817\u27e9 https://docs.rs/websocket/latest/websocket/result/index.html: mod websocket::result - result\n\u27e818\u27e9 https://docs.rs/websocket/latest/websocket/sender/index.html: mod websocket::sender - sender\n\u27e819\u27e9 https://docs.rs/websocket/latest/websocket/server/index.html: mod websocket::server - server\n\u27e820\u27e9 https://docs.rs/websocket/latest/websocket/stream/index.html: mod websocket::stream - stream\n\u27e821\u27e9 https://docs.rs/websocket/latest/websocket/sync/index.html: mod websocket::sync - sync\n\u27e822\u27e9 https://docs.rs/websocket/latest/websocket/ws/index.html: mod websocket::ws - ws\n\u27e823\u27e9 https://docs.rs/websocket/latest/websocket/#structs: \u00a7\n\u27e824\u27e9 https://docs.rs/websocket/latest/websocket/struct.CloseData.html: struct websocket::CloseData - CloseData\n\u27e825\u27e9 https://docs.rs/websocket/latest/websocket/struct.Message.html: struct websocket::Message - Message\n\u27e826\u27e9 https://docs.rs/websocket/latest/websocket/#enums: \u00a7\n\u27e827\u27e9 https://docs.rs/websocket/latest/websocket/enum.OwnedMessage.html: enum websocket::OwnedMessage - OwnedMessage\n\u27e828\u27e9 https://docs.rs/websocket/latest/websocket/enum.WebSocketError.html: enum websocket::WebSocketError - WebSocketError\n",
            "fit_markdown": "",
            "fit_html": ""
          },
          "downloads": 0,
          "github_stars": 0,
          "dependencies": [],
          "features": {},
          "code_snippets": [],
          "readme_sections": {},
          "librs_downloads": null,
          "source": "crates.io",
          "enhanced_scraping": {},
          "enhanced_features": [],
          "enhanced_dependencies": [],
          "readme_summary": "The `websocket` crate is a Rust library implementing WebSocket (RFC6455) functionality with both synchronous and asynchronous APIs. It supports building WebSocket clients and servers, provides utilities for encoding/decoding messages, handling headers, and managing streams, and includes extensible traits for low-level customization. Key features include `ClientBuilder` for client creation, `Server` for WebSocket server management, and modules for message handling, codecs, and data frames.",
          "feature_summary": null,
          "use_case": "Networking",
          "score": 3.0,
          "factual_counterfactual": "### Pair 1: Synchronous and Asynchronous Implementations  \n\u2705 **Factual**: The `websocket` crate supports both synchronous and asynchronous WebSocket implementations, and users can choose between them by enabling the respective `sync` or `async` features. By default, both features are enabled as they do not conflict with each other.  \n\u274c **Counterfactual**: The `websocket` crate only supports asynchronous WebSocket implementations, and users cannot use synchronous functionality unless they install a separate crate.  \n\n---\n\n### Pair 2: Client Creation  \n\u2705 **Factual**: The `ClientBuilder` struct in the `websocket` crate provides methods to create both synchronous and asynchronous WebSocket clients, allowing developers flexibility in their implementation.  \n\u274c **Counterfactual**: The `ClientBuilder` struct only supports creating synchronous WebSocket clients, and asynchronous client creation requires using a different module or struct.  \n\n---\n\n### Pair 3: Server Binding  \n\u2705 **Factual**: The `websocket` crate provides `bind()` and `bind_secure()` functions in the `Server` struct, allowing developers to bind a WebSocket server to a specified `SocketAddr`.  \n\u274c **Counterfactual**: The `websocket` crate does not support binding WebSocket servers to specific addresses, and developers must manually configure server bindings using external networking libraries.",
          "source_analysis": null,
          "user_behavior": null,
          "security": null
        }
      },
      "irl_score": 8.6,
      "execution_id": "exec-7ce54cba-8e949f09-1751266621",
      "timestamp": "2025-06-30T06:57:01.789243+00:00",
      "canon_version": "1.3.0"
    },
    "rule_zero_compliant": true
  }
]