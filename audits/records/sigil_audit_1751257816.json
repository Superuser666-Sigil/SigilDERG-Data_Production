[
  {
    "execution_id": "exec-ad201526-ae395cb3-1751257809",
    "timestamp": "2025-06-30T04:30:09.104824+00:00",
    "sacred_chain": {
      "input_data": "tower",
      "context_sources": [
        "crates.io",
        "github.com",
        "lib.rs",
        "docs.rs"
      ],
      "reasoning_steps": [
        "Input canonicalized: 'tower' -> 'tower'",
        "Context gathered from 4 validated sources",
        "Metadata extracted: 4 fields",
        "Documentation analyzed: quality 7.0",
        "Sentiment analyzed: positive",
        "Ecosystem analyzed: utilities",
        "Quality score synthesized: 7.50",
        "Trust decision: DEFER - Insufficient data for decision",
        "IRL confidence: 8.600"
      ],
      "suggestion": "ALLOW: Positive community sentiment",
      "verdict": "DEFER",
      "audit_info": {
        "metadata": {
          "name": "tower",
          "type": "rust_crate",
          "source": "manual_input",
          "extraction_method": "irl_engine"
        },
        "sentiment": {
          "quality_score": 7.0,
          "completeness": 0.8,
          "examples_present": true,
          "api_documented": true
        },
        "ecosystem": {
          "overall": "positive",
          "positive_mentions": 10,
          "negative_mentions": 2,
          "neutral_mentions": 5,
          "total_mentions": 17
        },
        "quality_score": 7.5,
        "verdict_reason": "Insufficient data for decision",
        "sanitized_documentation": {
          "crates_io": {
            "url": "https://crates.io/crates/tower",
            "title": "tower v0.5.2",
            "content": {
              "raw_markdown": "#  tower v0.5.2\nTower is a library of modular and reusable components for building robust clients and servers. \n  * [ #async ](https://crates.io/keywords/async)\n  * [ #futures ](https://crates.io/keywords/futures)\n  * [ #io ](https://crates.io/keywords/io)\n  * [ #non-blocking ](https://crates.io/keywords/non-blocking)\n  * [ #service ](https://crates.io/keywords/service)\n\n\n  * [ Readme ](https://crates.io/crates/tower)\n  * [ 25 Versions ](https://crates.io/crates/tower/versions)\n  * [ Dependencies ](https://crates.io/crates/tower/dependencies)\n  * [ Dependents ](https://crates.io/crates/tower/reverse_dependencies)\n\n\n## Metadata\n7 months ago \nv1.64.0 \n[ MIT ](https://choosealicense.com/licenses/mit)\n107 KiB \n## Install\nRun the following Cargo command in your project directory:\ncargo add tower\nOr add the following line to your Cargo.toml:\ntower = \"0.5.2\"\n## Repository\n[ github.com/tower-rs/tower ](https://github.com/tower-rs/tower)\n## Owners\n## Categories\n  * [Asynchronous](https://crates.io/categories/asynchronous)\n  * [Network programming](https://crates.io/categories/network-programming)\n\n\n[ Report crate ](https://crates.io/support?crate=tower&inquire=crate-violation)\n### Stats Overview\n184,484,495 Downloads all time\n25 Versions published\n#### Downloads over the last 90 days\nDisplay as \nStacked \n  * Stacked \n  * Unstacked \n\n\nLoading\u2026\n",
              "markdown_with_citations": "#  tower v0.5.2\nTower is a library of modular and reusable components for building robust clients and servers. \n  *  #async \u27e81\u27e9\n  *  #futures \u27e82\u27e9\n  *  #io \u27e83\u27e9\n  *  #non-blocking \u27e84\u27e9\n  *  #service \u27e85\u27e9\n\n\n  *  Readme \u27e86\u27e9\n  *  25 Versions \u27e87\u27e9\n  *  Dependencies \u27e88\u27e9\n  *  Dependents \u27e89\u27e9\n\n\n## Metadata\n7 months ago \nv1.64.0 \n MIT \u27e810\u27e9\n107 KiB \n## Install\nRun the following Cargo command in your project directory:\ncargo add tower\nOr add the following line to your Cargo.toml:\ntower = \"0.5.2\"\n## Repository\n github.com/tower-rs/tower \u27e811\u27e9\n## Owners\n## Categories\n  * Asynchronous\u27e812\u27e9\n  * Network programming\u27e813\u27e9\n\n\n Report crate \u27e814\u27e9\n### Stats Overview\n184,484,495 Downloads all time\n25 Versions published\n#### Downloads over the last 90 days\nDisplay as \nStacked \n  * Stacked \n  * Unstacked \n\n\nLoading\u2026\n",
              "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://crates.io/keywords/async:  #async \n\u27e82\u27e9 https://crates.io/keywords/futures:  #futures \n\u27e83\u27e9 https://crates.io/keywords/io:  #io \n\u27e84\u27e9 https://crates.io/keywords/non-blocking:  #non-blocking \n\u27e85\u27e9 https://crates.io/keywords/service:  #service \n\u27e86\u27e9 https://crates.io/crates/tower:  Readme \n\u27e87\u27e9 https://crates.io/crates/tower/versions:  25 Versions \n\u27e88\u27e9 https://crates.io/crates/tower/dependencies:  Dependencies \n\u27e89\u27e9 https://crates.io/crates/tower/reverse_dependencies:  Dependents \n\u27e810\u27e9 https://choosealicense.com/licenses/mit:  MIT \n\u27e811\u27e9 https://github.com/tower-rs/tower:  github.com/tower-rs/tower \n\u27e812\u27e9 https://crates.io/categories/asynchronous: Asynchronous\n\u27e813\u27e9 https://crates.io/categories/network-programming: Network programming\n\u27e814\u27e9 https://crates.io/support?crate=tower&inquire=crate-violation:  Report crate \n",
              "fit_markdown": "",
              "fit_html": ""
            },
            "structured_data": {},
            "quality_score": 3.0,
            "extraction_method": "crawl4ai",
            "error": null,
            "metadata": {
              "doc_type": "docs",
              "content_length": 1356,
              "has_structured_data": false,
              "crawl_success": true
            },
            "timestamp": "111599.1444468"
          },
          "docs_rs": {
            "url": "https://docs.rs/tower",
            "title": "Crate towerCopy item path",
            "content": {
              "raw_markdown": "[](https://docs.rs/tower/latest/tower/all.html \"show sidebar\")\n# Crate towerCopy item path\n[Settings](https://docs.rs/tower/latest/settings.html)\n[Help](https://docs.rs/tower/latest/help.html)\nSummary[Source](https://docs.rs/tower/latest/src/tower/lib.rs.html#1-228)\nExpand description\n`async fn(Request) -> Result<Response, Error>`\n## [\u00a7](https://docs.rs/tower/latest/tower/#overview)Overview\nTower is a library of modular and reusable components for building robust networking clients and servers.\nTower provides a simple core abstraction, the [`Service`](https://docs.rs/tower/latest/tower/trait.Service.html \"trait tower::Service\") trait, which represents an asynchronous function taking a request and returning either a response or an error. This abstraction can be used to model both clients and servers.\nGeneric components, like [`timeout`](https://docs.rs/tower/latest/tower/timeout/index.html \"mod tower::timeout\"), [rate limiting](https://docs.rs/tower/latest/tower/limit/rate/index.html \"mod tower::limit::rate\"), and [load balancing](https://docs.rs/tower/latest/tower/balance/index.html \"mod tower::balance\"), can be modeled as [`Service`](https://docs.rs/tower/latest/tower/trait.Service.html \"trait tower::Service\")s that wrap some inner service and apply additional behavior before or after the inner service is called. This allows implementing these components in a protocol-agnostic, composable way. Typically, such services are referred to as _middleware_.\nAn additional abstraction, the [`Layer`](https://docs.rs/tower/latest/tower/trait.Layer.html \"trait tower::Layer\") trait, is used to compose middleware with [`Service`](https://docs.rs/tower/latest/tower/trait.Service.html \"trait tower::Service\")s. If a [`Service`](https://docs.rs/tower/latest/tower/trait.Service.html \"trait tower::Service\") can be thought of as an asynchronous function from a request type to a response type, a [`Layer`](https://docs.rs/tower/latest/tower/trait.Layer.html \"trait tower::Layer\") is a function taking a [`Service`](https://docs.rs/tower/latest/tower/trait.Service.html \"trait tower::Service\") of one type and returning a [`Service`](https://docs.rs/tower/latest/tower/trait.Service.html \"trait tower::Service\") of a different type. The [`ServiceBuilder`](https://docs.rs/tower/latest/tower/struct.ServiceBuilder.html \"struct tower::ServiceBuilder\") type is used to add middleware to a service by composing it with multiple [`Layer`](https://docs.rs/tower/latest/tower/trait.Layer.html \"trait tower::Layer\")s.\n### [\u00a7](https://docs.rs/tower/latest/tower/#the-tower-ecosystem)The Tower Ecosystem\nTower is made up of the following crates:\n  * [`tower`](https://crates.io/crates/tower) (this crate)\n  * [`tower-service`](https://crates.io/crates/tower-service)\n  * [`tower-layer`](https://crates.io/crates/tower-layer)\n  * [`tower-test`](https://crates.io/crates/tower-test)\n\n\nSince the [`Service`](https://docs.rs/tower/latest/tower/trait.Service.html \"trait tower::Service\") and [`Layer`](https://docs.rs/tower/latest/tower/trait.Layer.html \"trait tower::Layer\") traits are important integration points for all libraries using Tower, they are kept as stable as possible, and breaking changes are made rarely. Therefore, they are defined in separate crates, [`tower-service`](https://crates.io/crates/tower-service) and [`tower-layer`](https://crates.io/crates/tower-layer). This crate contains re-exports of those core traits, implementations of commonly-used middleware, and [utilities](https://docs.rs/tower/latest/tower/trait.ServiceExt.html \"trait tower::ServiceExt\") for working with [`Service`](https://docs.rs/tower/latest/tower/trait.Service.html \"trait tower::Service\")s and [`Layer`](https://docs.rs/tower/latest/tower/trait.Layer.html \"trait tower::Layer\")s. Finally, the [`tower-test`](https://crates.io/crates/tower-test) crate provides tools for testing programs using Tower.\n## [\u00a7](https://docs.rs/tower/latest/tower/#usage)Usage\nTower provides an abstraction layer, and generic implementations of various middleware. This means that the `tower` crate on its own does _not_ provide a working implementation of a network client or server. Instead, Tower\u2019s [`Service` trait](https://docs.rs/tower/latest/tower/trait.Service.html \"trait tower::Service\") provides an integration point between application code, libraries providing middleware implementations, and libraries that implement servers and/or clients for various network protocols.\nDepending on your particular use case, you might use Tower in several ways:\n  * **Implementing application logic** for a networked program. You might use the [`Service`](https://docs.rs/tower/latest/tower/trait.Service.html \"trait tower::Service\") trait to model your application\u2019s behavior, and use the middleware [provided by this crate](https://docs.rs/tower/latest/tower/#modules) and by other libraries to add functionality to clients and servers provided by one or more protocol implementations.\n  * **Implementing middleware** to add custom behavior to network clients and servers in a reusable manner. This might be general-purpose middleware (and if it is, please consider releasing your middleware as a library for other Tower users!) or application-specific behavior that needs to be shared between multiple clients or servers.\n  * **Implementing a network protocol**. Libraries that implement network protocols (such as HTTP) can depend on `tower-service` to use the [`Service`](https://docs.rs/tower/latest/tower/trait.Service.html \"trait tower::Service\") trait as an integration point between the protocol and user code. For example, a client for some protocol might implement [`Service`](https://docs.rs/tower/latest/tower/trait.Service.html \"trait tower::Service\"), allowing users to add arbitrary Tower middleware to those clients. Similarly, a server might be created from a user-provided [`Service`](https://docs.rs/tower/latest/tower/trait.Service.html \"trait tower::Service\").\nAdditionally, when a network protocol requires functionality already provided by existing Tower middleware, a protocol implementation might use Tower middleware internally, as well as as an integration point.\n\n\n### [\u00a7](https://docs.rs/tower/latest/tower/#library-support)Library Support\nA number of third-party libraries support Tower and the [`Service`](https://docs.rs/tower/latest/tower/trait.Service.html \"trait tower::Service\") trait. The following is an incomplete list of such libraries:\n  * [`hyper`](https://crates.io/crates/hyper): A fast and correct low-level HTTP implementation.\n  * [`tonic`](https://crates.io/crates/tonic): A [gRPC-over-HTTP/2](https://grpc.io) implementation built on top of [`hyper`](https://crates.io/crates/hyper). See [here](https://github.com/hyperium/tonic/tree/master/examples/src/tower) for examples of using [`tonic`](https://crates.io/crates/tonic) with Tower.\n  * [`warp`](https://crates.io/crates/warp): A lightweight, composable web framework. See [here](https://docs.rs/warp/0.2.5/warp/fn.service.html) for details on using [`warp`](https://crates.io/crates/warp) with Tower.\n  * [`tower-lsp`](https://crates.io/crates/tower-lsp): implementations of the [Language Server Protocol](https://microsoft.github.io/language-server-protocol/) based on Tower.\n\n\nIf you\u2019re the maintainer of a crate that supports Tower, we\u2019d love to add your crate to this list! Please [open a PR](https://github.com/tower-rs/tower/compare) adding a brief description of your library!\n### [\u00a7](https://docs.rs/tower/latest/tower/#getting-started)Getting Started\nIf you\u2019re brand new to Tower and want to start with the basics, we recommend you check out some of our [guides](https://github.com/tower-rs/tower/tree/master/guides).\nThe various middleware implementations provided by this crate are feature flagged, so that users can only compile the parts of Tower they need. By default, all the optional middleware are disabled.\nTo get started using all of Tower\u2019s optional middleware, add this to your `Cargo.toml`:\n```\ntower = { version = \"0.4\", features = [\"full\"] }\n```\n\nAlternatively, you can only enable some features. For example, to enable only the [`retry`](https://docs.rs/tower/latest/tower/retry/index.html \"mod tower::retry\") and [`timeout`](https://docs.rs/tower/latest/tower/timeout/index.html \"mod tower::timeout\") middleware, write:\n```\ntower = { version = \"0.4\", features = [\"retry\", \"timeout\"] }\n```\n\nSee [here](https://docs.rs/tower/latest/tower/#modules) for a complete list of all middleware provided by Tower.\n### [\u00a7](https://docs.rs/tower/latest/tower/#supported-rust-versions)Supported Rust Versions\nTower will keep a rolling MSRV (minimum supported Rust version) policy of **at least** 6 months. When increasing the MSRV, the new Rust version must have been released at least six months ago. The current MSRV is 1.64.0.\n## Modules[\u00a7](https://docs.rs/tower/latest/tower/#modules)\n\n[balance](https://docs.rs/tower/latest/tower/balance/index.html \"mod tower::balance\")`balance`\n    Middleware that allows balancing load among multiple services.\n\n[buffer](https://docs.rs/tower/latest/tower/buffer/index.html \"mod tower::buffer\")`buffer`\n    Middleware that provides a buffered mpsc channel to a service.\n\n[builder](https://docs.rs/tower/latest/tower/builder/index.html \"mod tower::builder\")\n    Builder types to compose layers and services\n\n[discover](https://docs.rs/tower/latest/tower/discover/index.html \"mod tower::discover\")`discover`\n    Service discovery\n\n[filter](https://docs.rs/tower/latest/tower/filter/index.html \"mod tower::filter\")`filter`\n    Conditionally dispatch requests to the inner service based on the result of a predicate.\n\n[hedge](https://docs.rs/tower/latest/tower/hedge/index.html \"mod tower::hedge\")`hedge`\n    Pre-emptively retry requests which have been outstanding for longer than a given latency percentile.\n\n[layer](https://docs.rs/tower/latest/tower/layer/index.html \"mod tower::layer\")\n    A collection of [`Layer`](https://docs.rs/tower/latest/tower/trait.Layer.html \"trait tower::Layer\") based tower services\n\n[limit](https://docs.rs/tower/latest/tower/limit/index.html \"mod tower::limit\")`limit`\n    Tower middleware for limiting requests.\n\n[load](https://docs.rs/tower/latest/tower/load/index.html \"mod tower::load\")`load`\n    Service load measurement\n\n[load_shed](https://docs.rs/tower/latest/tower/load_shed/index.html \"mod tower::load_shed\")`load-shed`\n    Middleware for shedding load when inner services aren\u2019t ready.\n\n[make](https://docs.rs/tower/latest/tower/make/index.html \"mod tower::make\")`make`\n    Trait aliases for Services that produce specific types of Responses.\n\n[ready_cache](https://docs.rs/tower/latest/tower/ready_cache/index.html \"mod tower::ready_cache\")`ready-cache`\n    A cache of services\n\n[reconnect](https://docs.rs/tower/latest/tower/reconnect/index.html \"mod tower::reconnect\")`reconnect`\n    Reconnect services when they fail.\n\n[retry](https://docs.rs/tower/latest/tower/retry/index.html \"mod tower::retry\")`retry`\n    Middleware for retrying \u201cfailed\u201d requests.\n\n[spawn_ready](https://docs.rs/tower/latest/tower/spawn_ready/index.html \"mod tower::spawn_ready\")`spawn-ready`\n    When an underlying service is not ready, drive it to readiness on a background task.\n\n[steer](https://docs.rs/tower/latest/tower/steer/index.html \"mod tower::steer\")`steer`\n    This module provides functionality to aid managing routing requests between [`Service`](https://docs.rs/tower/latest/tower/trait.Service.html \"trait tower::Service\")s.\n\n[timeout](https://docs.rs/tower/latest/tower/timeout/index.html \"mod tower::timeout\")`timeout`\n    Middleware that applies a timeout to requests.\n\n[util](https://docs.rs/tower/latest/tower/util/index.html \"mod tower::util\")`util`\n    Various utility types and functions that are generally used with Tower.\n## Structs[\u00a7](https://docs.rs/tower/latest/tower/#structs)\n\n[ServiceBuilder](https://docs.rs/tower/latest/tower/struct.ServiceBuilder.html \"struct tower::ServiceBuilder\")\n    Declaratively construct [`Service`](https://docs.rs/tower/latest/tower/trait.Service.html \"trait tower::Service\") values.\n## Traits[\u00a7](https://docs.rs/tower/latest/tower/#traits)\n\n[Layer](https://docs.rs/tower/latest/tower/trait.Layer.html \"trait tower::Layer\")\n    Decorates a [`Service`](https://docs.rs/tower/*/tower/trait.Service.html), transforming either the request or the response.\n\n[MakeService](https://docs.rs/tower/latest/tower/trait.MakeService.html \"trait tower::MakeService\")`make`\n    Creates new [`Service`](https://docs.rs/tower/latest/tower/trait.Service.html \"trait tower::Service\") values.\n\n[Service](https://docs.rs/tower/latest/tower/trait.Service.html \"trait tower::Service\")\n    An asynchronous function from a `Request` to a `Response`.\n\n[ServiceExt](https://docs.rs/tower/latest/tower/trait.ServiceExt.html \"trait tower::ServiceExt\")`util`\n    An extension trait for `Service`s that provides a variety of convenient adapters\n## Functions[\u00a7](https://docs.rs/tower/latest/tower/#functions)\n\n[service_fn](https://docs.rs/tower/latest/tower/fn.service_fn.html \"fn tower::service_fn\")`util`\n    Returns a new [`ServiceFn`](https://docs.rs/tower/latest/tower/util/struct.ServiceFn.html \"struct tower::util::ServiceFn\") with the given closure.\n## Type Aliases[\u00a7](https://docs.rs/tower/latest/tower/#types)\n\n[BoxError](https://docs.rs/tower/latest/tower/type.BoxError.html \"type tower::BoxError\")\n    Alias for a type-erased error type.\n",
              "markdown_with_citations": "[](https://docs.rs/tower/latest/tower/all.html \"show sidebar\")\n# Crate towerCopy item path\nSettings\u27e81\u27e9\nHelp\u27e82\u27e9\nSummarySource\u27e83\u27e9\nExpand description\n`async fn(Request) -> Result<Response, Error>`\n## \u00a7\u27e84\u27e9Overview\nTower is a library of modular and reusable components for building robust networking clients and servers.\nTower provides a simple core abstraction, the `Service`\u27e85\u27e9 trait, which represents an asynchronous function taking a request and returning either a response or an error. This abstraction can be used to model both clients and servers.\nGeneric components, like `timeout`\u27e86\u27e9, rate limiting\u27e87\u27e9, and load balancing\u27e88\u27e9, can be modeled as `Service`\u27e85\u27e9s that wrap some inner service and apply additional behavior before or after the inner service is called. This allows implementing these components in a protocol-agnostic, composable way. Typically, such services are referred to as _middleware_.\nAn additional abstraction, the `Layer`\u27e89\u27e9 trait, is used to compose middleware with `Service`\u27e85\u27e9s. If a `Service`\u27e85\u27e9 can be thought of as an asynchronous function from a request type to a response type, a `Layer`\u27e89\u27e9 is a function taking a `Service`\u27e85\u27e9 of one type and returning a `Service`\u27e85\u27e9 of a different type. The `ServiceBuilder`\u27e810\u27e9 type is used to add middleware to a service by composing it with multiple `Layer`\u27e89\u27e9s.\n### \u00a7\u27e811\u27e9The Tower Ecosystem\nTower is made up of the following crates:\n  * `tower`\u27e812\u27e9 (this crate)\n  * `tower-service`\u27e813\u27e9\n  * `tower-layer`\u27e814\u27e9\n  * `tower-test`\u27e815\u27e9\n\n\nSince the `Service`\u27e85\u27e9 and `Layer`\u27e89\u27e9 traits are important integration points for all libraries using Tower, they are kept as stable as possible, and breaking changes are made rarely. Therefore, they are defined in separate crates, `tower-service`\u27e813\u27e9 and `tower-layer`\u27e814\u27e9. This crate contains re-exports of those core traits, implementations of commonly-used middleware, and utilities\u27e816\u27e9 for working with `Service`\u27e85\u27e9s and `Layer`\u27e89\u27e9s. Finally, the `tower-test`\u27e815\u27e9 crate provides tools for testing programs using Tower.\n## \u00a7\u27e817\u27e9Usage\nTower provides an abstraction layer, and generic implementations of various middleware. This means that the `tower` crate on its own does _not_ provide a working implementation of a network client or server. Instead, Tower\u2019s `Service` trait\u27e85\u27e9 provides an integration point between application code, libraries providing middleware implementations, and libraries that implement servers and/or clients for various network protocols.\nDepending on your particular use case, you might use Tower in several ways:\n  * **Implementing application logic** for a networked program. You might use the `Service`\u27e85\u27e9 trait to model your application\u2019s behavior, and use the middleware provided by this crate\u27e818\u27e9 and by other libraries to add functionality to clients and servers provided by one or more protocol implementations.\n  * **Implementing middleware** to add custom behavior to network clients and servers in a reusable manner. This might be general-purpose middleware (and if it is, please consider releasing your middleware as a library for other Tower users!) or application-specific behavior that needs to be shared between multiple clients or servers.\n  * **Implementing a network protocol**. Libraries that implement network protocols (such as HTTP) can depend on `tower-service` to use the `Service`\u27e85\u27e9 trait as an integration point between the protocol and user code. For example, a client for some protocol might implement `Service`\u27e85\u27e9, allowing users to add arbitrary Tower middleware to those clients. Similarly, a server might be created from a user-provided `Service`\u27e85\u27e9.\nAdditionally, when a network protocol requires functionality already provided by existing Tower middleware, a protocol implementation might use Tower middleware internally, as well as as an integration point.\n\n\n### \u00a7\u27e819\u27e9Library Support\nA number of third-party libraries support Tower and the `Service`\u27e85\u27e9 trait. The following is an incomplete list of such libraries:\n  * `hyper`\u27e820\u27e9: A fast and correct low-level HTTP implementation.\n  * `tonic`\u27e821\u27e9: A gRPC-over-HTTP/2\u27e822\u27e9 implementation built on top of `hyper`\u27e820\u27e9. See here\u27e823\u27e9 for examples of using `tonic`\u27e821\u27e9 with Tower.\n  * `warp`\u27e824\u27e9: A lightweight, composable web framework. See here\u27e825\u27e9 for details on using `warp`\u27e824\u27e9 with Tower.\n  * `tower-lsp`\u27e826\u27e9: implementations of the Language Server Protocol\u27e827\u27e9 based on Tower.\n\n\nIf you\u2019re the maintainer of a crate that supports Tower, we\u2019d love to add your crate to this list! Please open a PR\u27e828\u27e9 adding a brief description of your library!\n### \u00a7\u27e829\u27e9Getting Started\nIf you\u2019re brand new to Tower and want to start with the basics, we recommend you check out some of our guides\u27e830\u27e9.\nThe various middleware implementations provided by this crate are feature flagged, so that users can only compile the parts of Tower they need. By default, all the optional middleware are disabled.\nTo get started using all of Tower\u2019s optional middleware, add this to your `Cargo.toml`:\n```\ntower = { version = \"0.4\", features = [\"full\"] }\n```\n\nAlternatively, you can only enable some features. For example, to enable only the `retry`\u27e831\u27e9 and `timeout`\u27e86\u27e9 middleware, write:\n```\ntower = { version = \"0.4\", features = [\"retry\", \"timeout\"] }\n```\n\nSee here\u27e818\u27e9 for a complete list of all middleware provided by Tower.\n### \u00a7\u27e832\u27e9Supported Rust Versions\nTower will keep a rolling MSRV (minimum supported Rust version) policy of **at least** 6 months. When increasing the MSRV, the new Rust version must have been released at least six months ago. The current MSRV is 1.64.0.\n## Modules\u00a7\u27e818\u27e9\n\nbalance\u27e88\u27e9`balance`\n    Middleware that allows balancing load among multiple services.\n\nbuffer\u27e833\u27e9`buffer`\n    Middleware that provides a buffered mpsc channel to a service.\n\nbuilder\u27e834\u27e9\n    Builder types to compose layers and services\n\ndiscover\u27e835\u27e9`discover`\n    Service discovery\n\nfilter\u27e836\u27e9`filter`\n    Conditionally dispatch requests to the inner service based on the result of a predicate.\n\nhedge\u27e837\u27e9`hedge`\n    Pre-emptively retry requests which have been outstanding for longer than a given latency percentile.\n\nlayer\u27e838\u27e9\n    A collection of `Layer`\u27e89\u27e9 based tower services\n\nlimit\u27e839\u27e9`limit`\n    Tower middleware for limiting requests.\n\nload\u27e840\u27e9`load`\n    Service load measurement\n\nload_shed\u27e841\u27e9`load-shed`\n    Middleware for shedding load when inner services aren\u2019t ready.\n\nmake\u27e842\u27e9`make`\n    Trait aliases for Services that produce specific types of Responses.\n\nready_cache\u27e843\u27e9`ready-cache`\n    A cache of services\n\nreconnect\u27e844\u27e9`reconnect`\n    Reconnect services when they fail.\n\nretry\u27e831\u27e9`retry`\n    Middleware for retrying \u201cfailed\u201d requests.\n\nspawn_ready\u27e845\u27e9`spawn-ready`\n    When an underlying service is not ready, drive it to readiness on a background task.\n\nsteer\u27e846\u27e9`steer`\n    This module provides functionality to aid managing routing requests between `Service`\u27e85\u27e9s.\n\ntimeout\u27e86\u27e9`timeout`\n    Middleware that applies a timeout to requests.\n\nutil\u27e847\u27e9`util`\n    Various utility types and functions that are generally used with Tower.\n## Structs\u00a7\u27e848\u27e9\n\nServiceBuilder\u27e810\u27e9\n    Declaratively construct `Service`\u27e85\u27e9 values.\n## Traits\u00a7\u27e849\u27e9\n\nLayer\u27e89\u27e9\n    Decorates a `Service`\u27e850\u27e9, transforming either the request or the response.\n\nMakeService\u27e851\u27e9`make`\n    Creates new `Service`\u27e85\u27e9 values.\n\nService\u27e85\u27e9\n    An asynchronous function from a `Request` to a `Response`.\n\nServiceExt\u27e816\u27e9`util`\n    An extension trait for `Service`s that provides a variety of convenient adapters\n## Functions\u00a7\u27e852\u27e9\n\nservice_fn\u27e853\u27e9`util`\n    Returns a new `ServiceFn`\u27e854\u27e9 with the given closure.\n## Type Aliases\u00a7\u27e855\u27e9\n\nBoxError\u27e856\u27e9\n    Alias for a type-erased error type.\n",
              "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://docs.rs/tower/latest/settings.html: Settings\n\u27e82\u27e9 https://docs.rs/tower/latest/help.html: Help\n\u27e83\u27e9 https://docs.rs/tower/latest/src/tower/lib.rs.html#1-228: Source\n\u27e84\u27e9 https://docs.rs/tower/latest/tower/#overview: \u00a7\n\u27e85\u27e9 https://docs.rs/tower/latest/tower/trait.Service.html: trait tower::Service - `Service`\n\u27e86\u27e9 https://docs.rs/tower/latest/tower/timeout/index.html: mod tower::timeout - `timeout`\n\u27e87\u27e9 https://docs.rs/tower/latest/tower/limit/rate/index.html: mod tower::limit::rate - rate limiting\n\u27e88\u27e9 https://docs.rs/tower/latest/tower/balance/index.html: mod tower::balance - load balancing\n\u27e89\u27e9 https://docs.rs/tower/latest/tower/trait.Layer.html: trait tower::Layer - `Layer`\n\u27e810\u27e9 https://docs.rs/tower/latest/tower/struct.ServiceBuilder.html: struct tower::ServiceBuilder - `ServiceBuilder`\n\u27e811\u27e9 https://docs.rs/tower/latest/tower/#the-tower-ecosystem: \u00a7\n\u27e812\u27e9 https://crates.io/crates/tower: `tower`\n\u27e813\u27e9 https://crates.io/crates/tower-service: `tower-service`\n\u27e814\u27e9 https://crates.io/crates/tower-layer: `tower-layer`\n\u27e815\u27e9 https://crates.io/crates/tower-test: `tower-test`\n\u27e816\u27e9 https://docs.rs/tower/latest/tower/trait.ServiceExt.html: trait tower::ServiceExt - utilities\n\u27e817\u27e9 https://docs.rs/tower/latest/tower/#usage: \u00a7\n\u27e818\u27e9 https://docs.rs/tower/latest/tower/#modules: provided by this crate\n\u27e819\u27e9 https://docs.rs/tower/latest/tower/#library-support: \u00a7\n\u27e820\u27e9 https://crates.io/crates/hyper: `hyper`\n\u27e821\u27e9 https://crates.io/crates/tonic: `tonic`\n\u27e822\u27e9 https://grpc.io: gRPC-over-HTTP/2\n\u27e823\u27e9 https://github.com/hyperium/tonic/tree/master/examples/src/tower: here\n\u27e824\u27e9 https://crates.io/crates/warp: `warp`\n\u27e825\u27e9 https://docs.rs/warp/0.2.5/warp/fn.service.html: here\n\u27e826\u27e9 https://crates.io/crates/tower-lsp: `tower-lsp`\n\u27e827\u27e9 https://microsoft.github.io/language-server-protocol/: Language Server Protocol\n\u27e828\u27e9 https://github.com/tower-rs/tower/compare: open a PR\n\u27e829\u27e9 https://docs.rs/tower/latest/tower/#getting-started: \u00a7\n\u27e830\u27e9 https://github.com/tower-rs/tower/tree/master/guides: guides\n\u27e831\u27e9 https://docs.rs/tower/latest/tower/retry/index.html: mod tower::retry - `retry`\n\u27e832\u27e9 https://docs.rs/tower/latest/tower/#supported-rust-versions: \u00a7\n\u27e833\u27e9 https://docs.rs/tower/latest/tower/buffer/index.html: mod tower::buffer - buffer\n\u27e834\u27e9 https://docs.rs/tower/latest/tower/builder/index.html: mod tower::builder - builder\n\u27e835\u27e9 https://docs.rs/tower/latest/tower/discover/index.html: mod tower::discover - discover\n\u27e836\u27e9 https://docs.rs/tower/latest/tower/filter/index.html: mod tower::filter - filter\n\u27e837\u27e9 https://docs.rs/tower/latest/tower/hedge/index.html: mod tower::hedge - hedge\n\u27e838\u27e9 https://docs.rs/tower/latest/tower/layer/index.html: mod tower::layer - layer\n\u27e839\u27e9 https://docs.rs/tower/latest/tower/limit/index.html: mod tower::limit - limit\n\u27e840\u27e9 https://docs.rs/tower/latest/tower/load/index.html: mod tower::load - load\n\u27e841\u27e9 https://docs.rs/tower/latest/tower/load_shed/index.html: mod tower::load_shed - load_shed\n\u27e842\u27e9 https://docs.rs/tower/latest/tower/make/index.html: mod tower::make - make\n\u27e843\u27e9 https://docs.rs/tower/latest/tower/ready_cache/index.html: mod tower::ready_cache - ready_cache\n\u27e844\u27e9 https://docs.rs/tower/latest/tower/reconnect/index.html: mod tower::reconnect - reconnect\n\u27e845\u27e9 https://docs.rs/tower/latest/tower/spawn_ready/index.html: mod tower::spawn_ready - spawn_ready\n\u27e846\u27e9 https://docs.rs/tower/latest/tower/steer/index.html: mod tower::steer - steer\n\u27e847\u27e9 https://docs.rs/tower/latest/tower/util/index.html: mod tower::util - util\n\u27e848\u27e9 https://docs.rs/tower/latest/tower/#structs: \u00a7\n\u27e849\u27e9 https://docs.rs/tower/latest/tower/#traits: \u00a7\n\u27e850\u27e9 https://docs.rs/tower/*/tower/trait.Service.html: `Service`\n\u27e851\u27e9 https://docs.rs/tower/latest/tower/trait.MakeService.html: trait tower::MakeService - MakeService\n\u27e852\u27e9 https://docs.rs/tower/latest/tower/#functions: \u00a7\n\u27e853\u27e9 https://docs.rs/tower/latest/tower/fn.service_fn.html: fn tower::service_fn - service_fn\n\u27e854\u27e9 https://docs.rs/tower/latest/tower/util/struct.ServiceFn.html: struct tower::util::ServiceFn - `ServiceFn`\n\u27e855\u27e9 https://docs.rs/tower/latest/tower/#types: \u00a7\n\u27e856\u27e9 https://docs.rs/tower/latest/tower/type.BoxError.html: type tower::BoxError - BoxError\n",
              "fit_markdown": "",
              "fit_html": ""
            },
            "structured_data": {},
            "quality_score": 4.0,
            "extraction_method": "crawl4ai",
            "error": null,
            "metadata": {
              "doc_type": "docs",
              "content_length": 13433,
              "has_structured_data": false,
              "crawl_success": true
            },
            "timestamp": "111599.7141738"
          },
          "lib_rs": {
            "url": "https://lib.rs/crates/tower",
            "title": "Untitled",
            "content": {
              "raw_markdown": "###  [24 releases](https://lib.rs/crates/tower/versions)\n0.5.2 |  Dec 11, 2024   \n---|---  \n0.5.1 |  Sep 9, 2024   \n0.5.0 |  Aug 13, 2024   \n0.4.13 |  Jun 17, 2022   \n0.0.1 |  Dec 23, 2016   \n#**1** in [Network programming](https://lib.rs/network-programming \"Crates dealing with higher-level network protocols such as FTP, HTTP, or SSH, or lower-level network protocols such as TCP or UDP.\")\nDownload history 3925831/week @ 2025-03-05 3688120/week @ 2025-03-12 4997909/week @ 2025-03-19 3543234/week @ 2025-03-26 3517149/week @ 2025-04-02 3460062/week @ 2025-04-09 2876743/week @ 2025-04-16 3071725/week @ 2025-04-23 2965248/week @ 2025-04-30 3158847/week @ 2025-05-07 3168615/week @ 2025-05-14 3001129/week @ 2025-05-21 3108027/week @ 2025-05-28 3088479/week @ 2025-06-04 3284500/week @ 2025-06-11 3102486/week @ 2025-06-18\n**13,179,271** downloads per month Used in [**11,338** crates (1,167 directly)](https://lib.rs/crates/tower/rev)\n**MIT** license \n415KB  7K  SLoC\n# Tower\nTower is a library of modular and reusable components for building robust networking clients and servers.\n[![Crates.io](https://img.shields.io/crates/v/tower.svg)](https://crates.io/crates/tower) [![Documentation](https://img.gs/czjpqfbdkz/full/https://docs.rs/tower/badge.svg)](https://docs.rs/tower) [![Documentation \\(master\\)](https://img.shields.io/badge/docs-master-blue)](https://tower-rs.github.io/tower/tower) [![MIT licensed](https://img.shields.io/badge/license-MIT-blue.svg)](https://github.com/tower-rs/tower/blob/7dc533ef86b02f89f3dc5fe64644dd1a5dc3b37d/tower/LICENSE) [![Build Status](https://img.gs/czjpqfbdkz/full/https://github.com/tower-rs/tower/workflows/CI/badge.svg)](https://github.com/tower-rs/tower/actions?query=workflow%3ACI) [![Discord chat](https://img.shields.io/discord/500028886025895936?logo=discord&label=discord&logoColor=white)](https://discord.gg/EeF3cQw)\n## Overview\nTower aims to make it as easy as possible to build robust networking clients and servers. It is protocol agnostic, but is designed around a request / response pattern. If your protocol is entirely stream based, Tower may not be a good fit.\nTower provides a simple core abstraction, the [``Service``](https://docs.rs/tower/latest/tower/trait.Service.html) trait, which represents an asynchronous function taking a request and returning either a response or an error. This abstraction can be used to model both clients and servers.\nGeneric components, like [timeouts](https://docs.rs/tower/latest/tower/timeout/), [rate limiting](https://docs.rs/tower/latest/tower/limit/rate), and [load balancing](https://docs.rs/tower/latest/tower/balance/), can be modeled as [``Service``](https://docs.rs/tower/latest/tower/trait.Service.html)s that wrap some inner service and apply additional behavior before or after the inner service is called. This allows implementing these components in a protocol-agnostic, composable way. Typically, such services are referred to as _middleware_.\nAn additional abstraction, the [``Layer``](https://docs.rs/tower/latest/tower/trait.Layer.html) trait, is used to compose middleware with [``Service``](https://docs.rs/tower/latest/tower/trait.Service.html)s. If a [``Service``](https://docs.rs/tower/latest/tower/trait.Service.html) can be thought of as an asynchronous function from a request type to a response type, a [``Layer``](https://docs.rs/tower/latest/tower/trait.Layer.html) is a function taking a [``Service``](https://docs.rs/tower/latest/tower/trait.Service.html) of one type and returning a [``Service``](https://docs.rs/tower/latest/tower/trait.Service.html) of a different type. The [``ServiceBuilder``](https://docs.rs/tower/latest/tower/struct.ServiceBuilder.html) type is used to add middleware to a service by composing it with multiple [``Layer``](https://docs.rs/tower/latest/tower/trait.Layer.html)s.\n### The Tower Ecosystem\nTower is made up of the following crates:\n  * [``tower``](https://crates.io/crates/tower) (this crate)\n  * [``tower-service``](https://lib.rs/crates/tower-service)\n  * [``tower-layer``](https://lib.rs/crates/tower-layer)\n  * [``tower-test``](https://lib.rs/crates/tower-test)\n\n\nSince the [``Service``](https://docs.rs/tower/latest/tower/trait.Service.html) and [``Layer``](https://docs.rs/tower/latest/tower/trait.Layer.html) traits are important integration points for all libraries using Tower, they are kept as stable as possible, and breaking changes are made rarely. Therefore, they are defined in separate crates, [``tower-service``](https://lib.rs/crates/tower-service) and [``tower-layer``](https://lib.rs/crates/tower-layer). This crate contains re-exports of those core traits, implementations of commonly-used middleware, and [utilities](https://docs.rs/tower/latest/tower/trait.ServiceExt.html) for working with [``Service``](https://docs.rs/tower/latest/tower/trait.Service.html)s and [``Layer``](https://docs.rs/tower/latest/tower/trait.Layer.html)s. Finally, the [``tower-test``](https://lib.rs/crates/tower-test) crate provides tools for testing programs using Tower.\n## Usage\nTower provides an abstraction layer, and generic implementations of various middleware. This means that the ``tower`` crate on its own does _not_ provide a working implementation of a network client or server. Instead, Tower's [``Service`` trait](https://docs.rs/tower/latest/tower/trait.Service.html) provides an integration point between application code, libraries providing middleware implementations, and libraries that implement servers and/or clients for various network protocols.\nDepending on your particular use case, you might use Tower in several ways:\n  * **Implementing application logic** for a networked program. You might use the [``Service``](https://docs.rs/tower/latest/tower/trait.Service.html) trait to model your application's behavior, and use the middleware [provided by this crate](https://docs.rs/tower/latest/tower/#modules) and by other libraries to add functionality to clients and servers provided by one or more protocol implementations.\n  * **Implementing middleware** to add custom behavior to network clients and servers in a reusable manner. This might be general-purpose middleware (and if it is, please consider releasing your middleware as a library for other Tower users!) or application-specific behavior that needs to be shared between multiple clients or servers.\n  * **Implementing a network protocol**. Libraries that implement network protocols (such as HTTP) can depend on ``tower-service`` to use the [``Service``](https://docs.rs/tower/latest/tower/trait.Service.html) trait as an integration point between the protocol and user code. For example, a client for some protocol might implement [``Service``](https://docs.rs/tower/latest/tower/trait.Service.html), allowing users to add arbitrary Tower middleware to those clients. Similarly, a server might be created from a user-provided [``Service``](https://docs.rs/tower/latest/tower/trait.Service.html).\nAdditionally, when a network protocol requires functionality already provided by existing Tower middleware, a protocol implementation might use Tower middleware internally, as well as an integration point.\n\n\n### Library Support\nA number of third-party libraries support Tower and the [``Service``](https://docs.rs/tower/latest/tower/trait.Service.html) trait. The following is an incomplete list of such libraries:\n  * [``hyper``](https://lib.rs/crates/hyper): A fast and correct low-level HTTP implementation.\n  * [``tonic``](https://lib.rs/crates/tonic): A [gRPC-over-HTTP/2](https://grpc.io) implementation built on top of [``hyper``](https://lib.rs/crates/hyper). See [here](https://github.com/hyperium/tonic/tree/master/examples/src/tower) for examples of using [``tonic``](https://lib.rs/crates/tonic) with Tower.\n  * [``axum``](https://lib.rs/crates/axum): Ergonomic and modular web framework built with Tokio, Tower, and Hyper.\n  * [``tower-lsp``](https://lib.rs/crates/tower-lsp): implementations of the [Language Server Protocol](https://microsoft.github.io/language-server-protocol/) based on Tower.\n  * [``kube``](https://lib.rs/crates/kube): Kubernetes client and futures controller runtime. [```kube`::``Client``](https://docs.rs/kube/latest/kube/struct.Client.html) makes use of the Tower ecosystem: [``tower``](https://crates.io/crates/tower), [``tower-http``](https://lib.rs/crates/tower-http), and [``tower-test``](https://lib.rs/crates/tower-test). See [here](https://github.com/clux/kube-rs/blob/master/examples/custom_client.rs) and [here](https://github.com/clux/kube-rs/blob/master/examples/custom_client_trace.rs) for examples of using [``kube``](https://lib.rs/crates/kube) with Tower.\n\n\nIf you're the maintainer of a crate that supports Tower, we'd love to add your crate to this list! Please [open a PR](https://github.com/tower-rs/tower/compare) adding a brief description of your library!\n### Getting Started\nThe various middleware implementations provided by this crate are feature flagged, so that users can only compile the parts of Tower they need. By default, all the optional middleware are disabled.\nTo get started using all of Tower's optional middleware, add this to your ``Cargo.toml``:\n```\n`tower = { version = \"0.5.1\", features = [\"full\"] }\n`\n```\n\nAlternatively, you can only enable some features. For example, to enable only the [``retry``](https://docs.rs/tower/latest/tower/retry) and [``timeout``](https://docs.rs/tower/latest/tower/timeout/) middleware, write:\n```\n`tower = { version = \"0.5.1\", features = [\"retry\", \"timeout\"] }\n`\n```\n\nSee [here](https://docs.rs/tower/latest/tower/#modules) for a complete list of all middleware provided by Tower.\n## Supported Rust Versions\nTower will keep a rolling MSRV (minimum supported Rust version) policy of **at least** 6 months. When increasing the MSRV, the new Rust version must have been released at least six months ago. The current MSRV is 1.64.0.\n## License\nThis project is licensed under the [MIT license](https://github.com/tower-rs/tower/blob/7dc533ef86b02f89f3dc5fe64644dd1a5dc3b37d/tower/LICENSE).\n### Contribution\nUnless you explicitly state otherwise, any contribution intentionally submitted for inclusion in Tower by you, shall be licensed as MIT, without any additional terms or conditions.\n#### Dependencies\n~0\u20139.5MB  ~30K SLoC\n  * [buffer?](https://lib.rs/crates/tower/features#feature-buffer \"optional feature\") [futures-core](https://lib.rs/crates/futures-core \"0.3.22\")\n  * [buffer?](https://lib.rs/crates/tower/features#feature-buffer \"optional feature\") [pin-project-lite](https://lib.rs/crates/pin-project-lite \"0.2.7\")\n  * [buffer?](https://lib.rs/crates/tower/features#feature-buffer \"optional feature\") [hedge?](https://lib.rs/crates/tower/features#feature-hedge \"optional feature\") [limit?](https://lib.rs/crates/tower/features#feature-limit \"optional feature\") [load?](https://lib.rs/crates/tower/features#feature-load \"optional feature\") [make?](https://lib.rs/crates/tower/features#feature-make \"optional feature\") [ready-cache?](https://lib.rs/crates/tower/features#feature-ready-cache \"optional feature\") [reconnect?](https://lib.rs/crates/tower/features#feature-reconnect \"optional feature\") [retry?](https://lib.rs/crates/tower/features#feature-retry \"optional feature\") [spawn-ready?](https://lib.rs/crates/tower/features#feature-spawn-ready \"optional feature\") [timeout?](https://lib.rs/crates/tower/features#feature-timeout \"optional feature\") [tokio](https://lib.rs/crates/tokio \"1.6.2\")[+sync](https://lib.rs/crates/tokio/features#feature-sync)\n  * [buffer?](https://lib.rs/crates/tower/features#feature-buffer \"optional feature\") [tokio-util](https://lib.rs/crates/tokio-util \"0.7.0\")\n  * [buffer?](https://lib.rs/crates/tower/features#feature-buffer \"optional feature\") [log?](https://lib.rs/crates/tower/features#feature-log \"optional feature\") [tracing](https://lib.rs/crates/tracing \"0.1.2\")[+std](https://lib.rs/crates/tracing/features#feature-std)\n  * [filter?](https://lib.rs/crates/tower/features#feature-filter \"optional feature\") [futures-util](https://lib.rs/crates/futures-util \"0.3.22\")[+alloc](https://lib.rs/crates/futures-util/features#feature-alloc)\n  * [hedge?](https://lib.rs/crates/tower/features#feature-hedge \"optional feature\") [hdrhistogram](https://lib.rs/crates/hdrhistogram \"7.0\")\n  * [ready-cache?](https://lib.rs/crates/tower/features#feature-ready-cache \"optional feature\") [indexmap](https://lib.rs/crates/indexmap \"new\") 2.0\n  * [balance?](https://lib.rs/crates/tower/features#feature-balance \"optional feature\") [slab](https://lib.rs/crates/slab \"0.4\")\n  * [util?](https://lib.rs/crates/tower/features#feature-util \"optional feature\") [sync_wrapper](https://lib.rs/crates/sync_wrapper \"new\") 1.0\n  * [ optional ](https://lib.rs/crates/tower/features#feature-tokio-stream \"tokio-stream is optional feature\") [tokio-stream](https://lib.rs/crates/tokio-stream \"0.1.0\")\n  * [tower-layer](https://lib.rs/crates/tower-layer \"0.3.3\")\n  * [tower-service](https://lib.rs/crates/tower-service \"0.3.3\")\n\n\n  * dev  [futures](https://lib.rs/crates/futures \"0.3.22\")\n  * dev  [http](https://lib.rs/crates/http \"new\") 1.0\n  * dev  [lazy_static](https://lib.rs/crates/lazy_static \"1.4.0\")\n  * dev  [quickcheck](https://lib.rs/crates/quickcheck \"new\") 1.0\n  * dev  [rand](https://lib.rs/crates/rand \"outdated\") 0.8[+small_rng](https://lib.rs/crates/rand/features#feature-small_rng)\n  * dev  [tokio-test](https://lib.rs/crates/tokio-test \"0.4\")\n  * dev  [tower-test](https://lib.rs/crates/tower-test \"new\") 0.4\n  * dev  [tracing-subscriber](https://lib.rs/crates/tracing-subscriber \"0.3\")[+fmt](https://lib.rs/crates/tracing-subscriber/features#feature-fmt)[+ansi](https://lib.rs/crates/tracing-subscriber/features#feature-ansi)\n\n\n#### [Other features](https://lib.rs/crates/tower/features)\n  * [discover](https://lib.rs/crates/tower/features#feature-discover)\n  * [full](https://lib.rs/crates/tower/features#feature-full)\n  * [load-shed](https://lib.rs/crates/tower/features#feature-load-shed)\n  * [steer](https://lib.rs/crates/tower/features#feature-steer)\n\n\n  *[SLoC]: approx. additional lines of code\n",
              "markdown_with_citations": "###  24 releases\u27e81\u27e9\n0.5.2 |  Dec 11, 2024   \n---|---  \n0.5.1 |  Sep 9, 2024   \n0.5.0 |  Aug 13, 2024   \n0.4.13 |  Jun 17, 2022   \n0.0.1 |  Dec 23, 2016   \n#**1** in Network programming\u27e82\u27e9\nDownload history 3925831/week @ 2025-03-05 3688120/week @ 2025-03-12 4997909/week @ 2025-03-19 3543234/week @ 2025-03-26 3517149/week @ 2025-04-02 3460062/week @ 2025-04-09 2876743/week @ 2025-04-16 3071725/week @ 2025-04-23 2965248/week @ 2025-04-30 3158847/week @ 2025-05-07 3168615/week @ 2025-05-14 3001129/week @ 2025-05-21 3108027/week @ 2025-05-28 3088479/week @ 2025-06-04 3284500/week @ 2025-06-11 3102486/week @ 2025-06-18\n**13,179,271** downloads per month Used in **11,338** crates (1,167 directly)\u27e83\u27e9\n**MIT** license \n415KB  7K  SLoC\n# Tower\nTower is a library of modular and reusable components for building robust networking clients and servers.\n![Crates.io\u27e84\u27e9](https://crates.io/crates/tower) ![Documentation\u27e85\u27e9](https://docs.rs/tower) ![Documentation \\(master\\)\u27e86\u27e9](https://tower-rs.github.io/tower/tower) ![MIT licensed\u27e87\u27e9](https://github.com/tower-rs/tower/blob/7dc533ef86b02f89f3dc5fe64644dd1a5dc3b37d/tower/LICENSE) ![Build Status\u27e88\u27e9](https://github.com/tower-rs/tower/actions?query=workflow%3ACI) ![Discord chat\u27e89\u27e9](https://discord.gg/EeF3cQw)\n## Overview\nTower aims to make it as easy as possible to build robust networking clients and servers. It is protocol agnostic, but is designed around a request / response pattern. If your protocol is entirely stream based, Tower may not be a good fit.\nTower provides a simple core abstraction, the ``Service``\u27e810\u27e9 trait, which represents an asynchronous function taking a request and returning either a response or an error. This abstraction can be used to model both clients and servers.\nGeneric components, like timeouts\u27e811\u27e9, rate limiting\u27e812\u27e9, and load balancing\u27e813\u27e9, can be modeled as ``Service``\u27e810\u27e9s that wrap some inner service and apply additional behavior before or after the inner service is called. This allows implementing these components in a protocol-agnostic, composable way. Typically, such services are referred to as _middleware_.\nAn additional abstraction, the ``Layer``\u27e814\u27e9 trait, is used to compose middleware with ``Service``\u27e810\u27e9s. If a ``Service``\u27e810\u27e9 can be thought of as an asynchronous function from a request type to a response type, a ``Layer``\u27e814\u27e9 is a function taking a ``Service``\u27e810\u27e9 of one type and returning a ``Service``\u27e810\u27e9 of a different type. The ``ServiceBuilder``\u27e815\u27e9 type is used to add middleware to a service by composing it with multiple ``Layer``\u27e814\u27e9s.\n### The Tower Ecosystem\nTower is made up of the following crates:\n  * ``tower``\u27e816\u27e9 (this crate)\n  * ``tower-service``\u27e817\u27e9\n  * ``tower-layer``\u27e818\u27e9\n  * ``tower-test``\u27e819\u27e9\n\n\nSince the ``Service``\u27e810\u27e9 and ``Layer``\u27e814\u27e9 traits are important integration points for all libraries using Tower, they are kept as stable as possible, and breaking changes are made rarely. Therefore, they are defined in separate crates, ``tower-service``\u27e817\u27e9 and ``tower-layer``\u27e818\u27e9. This crate contains re-exports of those core traits, implementations of commonly-used middleware, and utilities\u27e820\u27e9 for working with ``Service``\u27e810\u27e9s and ``Layer``\u27e814\u27e9s. Finally, the ``tower-test``\u27e819\u27e9 crate provides tools for testing programs using Tower.\n## Usage\nTower provides an abstraction layer, and generic implementations of various middleware. This means that the ``tower`` crate on its own does _not_ provide a working implementation of a network client or server. Instead, Tower's ``Service`` trait\u27e810\u27e9 provides an integration point between application code, libraries providing middleware implementations, and libraries that implement servers and/or clients for various network protocols.\nDepending on your particular use case, you might use Tower in several ways:\n  * **Implementing application logic** for a networked program. You might use the ``Service``\u27e810\u27e9 trait to model your application's behavior, and use the middleware provided by this crate\u27e821\u27e9 and by other libraries to add functionality to clients and servers provided by one or more protocol implementations.\n  * **Implementing middleware** to add custom behavior to network clients and servers in a reusable manner. This might be general-purpose middleware (and if it is, please consider releasing your middleware as a library for other Tower users!) or application-specific behavior that needs to be shared between multiple clients or servers.\n  * **Implementing a network protocol**. Libraries that implement network protocols (such as HTTP) can depend on ``tower-service`` to use the ``Service``\u27e810\u27e9 trait as an integration point between the protocol and user code. For example, a client for some protocol might implement ``Service``\u27e810\u27e9, allowing users to add arbitrary Tower middleware to those clients. Similarly, a server might be created from a user-provided ``Service``\u27e810\u27e9.\nAdditionally, when a network protocol requires functionality already provided by existing Tower middleware, a protocol implementation might use Tower middleware internally, as well as an integration point.\n\n\n### Library Support\nA number of third-party libraries support Tower and the ``Service``\u27e810\u27e9 trait. The following is an incomplete list of such libraries:\n  * ``hyper``\u27e822\u27e9: A fast and correct low-level HTTP implementation.\n  * ``tonic``\u27e823\u27e9: A gRPC-over-HTTP/2\u27e824\u27e9 implementation built on top of ``hyper``\u27e822\u27e9. See here\u27e825\u27e9 for examples of using ``tonic``\u27e823\u27e9 with Tower.\n  * ``axum``\u27e826\u27e9: Ergonomic and modular web framework built with Tokio, Tower, and Hyper.\n  * ``tower-lsp``\u27e827\u27e9: implementations of the Language Server Protocol\u27e828\u27e9 based on Tower.\n  * ``kube``\u27e829\u27e9: Kubernetes client and futures controller runtime. ```kube`::``Client``\u27e830\u27e9 makes use of the Tower ecosystem: ``tower``\u27e816\u27e9, ``tower-http``\u27e831\u27e9, and ``tower-test``\u27e819\u27e9. See here\u27e832\u27e9 and here\u27e833\u27e9 for examples of using ``kube``\u27e829\u27e9 with Tower.\n\n\nIf you're the maintainer of a crate that supports Tower, we'd love to add your crate to this list! Please open a PR\u27e834\u27e9 adding a brief description of your library!\n### Getting Started\nThe various middleware implementations provided by this crate are feature flagged, so that users can only compile the parts of Tower they need. By default, all the optional middleware are disabled.\nTo get started using all of Tower's optional middleware, add this to your ``Cargo.toml``:\n```\n`tower = { version = \"0.5.1\", features = [\"full\"] }\n`\n```\n\nAlternatively, you can only enable some features. For example, to enable only the ``retry``\u27e835\u27e9 and ``timeout``\u27e811\u27e9 middleware, write:\n```\n`tower = { version = \"0.5.1\", features = [\"retry\", \"timeout\"] }\n`\n```\n\nSee here\u27e821\u27e9 for a complete list of all middleware provided by Tower.\n## Supported Rust Versions\nTower will keep a rolling MSRV (minimum supported Rust version) policy of **at least** 6 months. When increasing the MSRV, the new Rust version must have been released at least six months ago. The current MSRV is 1.64.0.\n## License\nThis project is licensed under the MIT license\u27e836\u27e9.\n### Contribution\nUnless you explicitly state otherwise, any contribution intentionally submitted for inclusion in Tower by you, shall be licensed as MIT, without any additional terms or conditions.\n#### Dependencies\n~0\u20139.5MB  ~30K SLoC\n  * buffer?\u27e837\u27e9 futures-core\u27e838\u27e9\n  * buffer?\u27e837\u27e9 pin-project-lite\u27e839\u27e9\n  * buffer?\u27e837\u27e9 hedge?\u27e840\u27e9 limit?\u27e841\u27e9 load?\u27e842\u27e9 make?\u27e843\u27e9 ready-cache?\u27e844\u27e9 reconnect?\u27e845\u27e9 retry?\u27e846\u27e9 spawn-ready?\u27e847\u27e9 timeout?\u27e848\u27e9 tokio\u27e849\u27e9+sync\u27e850\u27e9\n  * buffer?\u27e837\u27e9 tokio-util\u27e851\u27e9\n  * buffer?\u27e837\u27e9 log?\u27e852\u27e9 tracing\u27e853\u27e9+std\u27e854\u27e9\n  * filter?\u27e855\u27e9 futures-util\u27e856\u27e9+alloc\u27e857\u27e9\n  * hedge?\u27e840\u27e9 hdrhistogram\u27e858\u27e9\n  * ready-cache?\u27e844\u27e9 indexmap\u27e859\u27e9 2.0\n  * balance?\u27e860\u27e9 slab\u27e861\u27e9\n  * util?\u27e862\u27e9 sync_wrapper\u27e863\u27e9 1.0\n  *  optional \u27e864\u27e9 tokio-stream\u27e865\u27e9\n  * tower-layer\u27e818\u27e9\n  * tower-service\u27e817\u27e9\n\n\n  * dev  futures\u27e866\u27e9\n  * dev  http\u27e867\u27e9 1.0\n  * dev  lazy_static\u27e868\u27e9\n  * dev  quickcheck\u27e869\u27e9 1.0\n  * dev  rand\u27e870\u27e9 0.8+small_rng\u27e871\u27e9\n  * dev  tokio-test\u27e872\u27e9\n  * dev  tower-test\u27e819\u27e9 0.4\n  * dev  tracing-subscriber\u27e873\u27e9+fmt\u27e874\u27e9+ansi\u27e875\u27e9\n\n\n#### Other features\u27e876\u27e9\n  * discover\u27e877\u27e9\n  * full\u27e878\u27e9\n  * load-shed\u27e879\u27e9\n  * steer\u27e880\u27e9\n\n\n  *[SLoC]: approx. additional lines of code\n",
              "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://lib.rs/crates/tower/versions: 24 releases\n\u27e82\u27e9 https://lib.rs/network-programming: Crates dealing with higher-level network protocols such as FTP, HTTP, or SSH, or lower-level network protocols such as TCP or UDP. - Network programming\n\u27e83\u27e9 https://lib.rs/crates/tower/rev: **11,338** crates (1,167 directly)\n\u27e84\u27e9 https://img.shields.io/crates/v/tower.svg: ![Crates.io\n\u27e85\u27e9 https://img.gs/czjpqfbdkz/full/https://docs.rs/tower/badge.svg: ![Documentation\n\u27e86\u27e9 https://img.shields.io/badge/docs-master-blue: ![Documentation \\(master\\)\n\u27e87\u27e9 https://img.shields.io/badge/license-MIT-blue.svg: ![MIT licensed\n\u27e88\u27e9 https://img.gs/czjpqfbdkz/full/https://github.com/tower-rs/tower/workflows/CI/badge.svg: ![Build Status\n\u27e89\u27e9 https://img.shields.io/discord/500028886025895936?logo=discord&label=discord&logoColor=white: ![Discord chat\n\u27e810\u27e9 https://docs.rs/tower/latest/tower/trait.Service.html: ``Service``\n\u27e811\u27e9 https://docs.rs/tower/latest/tower/timeout/: timeouts\n\u27e812\u27e9 https://docs.rs/tower/latest/tower/limit/rate: rate limiting\n\u27e813\u27e9 https://docs.rs/tower/latest/tower/balance/: load balancing\n\u27e814\u27e9 https://docs.rs/tower/latest/tower/trait.Layer.html: ``Layer``\n\u27e815\u27e9 https://docs.rs/tower/latest/tower/struct.ServiceBuilder.html: ``ServiceBuilder``\n\u27e816\u27e9 https://crates.io/crates/tower: ``tower``\n\u27e817\u27e9 https://lib.rs/crates/tower-service: ``tower-service``\n\u27e818\u27e9 https://lib.rs/crates/tower-layer: ``tower-layer``\n\u27e819\u27e9 https://lib.rs/crates/tower-test: ``tower-test``\n\u27e820\u27e9 https://docs.rs/tower/latest/tower/trait.ServiceExt.html: utilities\n\u27e821\u27e9 https://docs.rs/tower/latest/tower/#modules: provided by this crate\n\u27e822\u27e9 https://lib.rs/crates/hyper: ``hyper``\n\u27e823\u27e9 https://lib.rs/crates/tonic: ``tonic``\n\u27e824\u27e9 https://grpc.io: gRPC-over-HTTP/2\n\u27e825\u27e9 https://github.com/hyperium/tonic/tree/master/examples/src/tower: here\n\u27e826\u27e9 https://lib.rs/crates/axum: ``axum``\n\u27e827\u27e9 https://lib.rs/crates/tower-lsp: ``tower-lsp``\n\u27e828\u27e9 https://microsoft.github.io/language-server-protocol/: Language Server Protocol\n\u27e829\u27e9 https://lib.rs/crates/kube: ``kube``\n\u27e830\u27e9 https://docs.rs/kube/latest/kube/struct.Client.html: ```kube`::``Client``\n\u27e831\u27e9 https://lib.rs/crates/tower-http: ``tower-http``\n\u27e832\u27e9 https://github.com/clux/kube-rs/blob/master/examples/custom_client.rs: here\n\u27e833\u27e9 https://github.com/clux/kube-rs/blob/master/examples/custom_client_trace.rs: here\n\u27e834\u27e9 https://github.com/tower-rs/tower/compare: open a PR\n\u27e835\u27e9 https://docs.rs/tower/latest/tower/retry: ``retry``\n\u27e836\u27e9 https://github.com/tower-rs/tower/blob/7dc533ef86b02f89f3dc5fe64644dd1a5dc3b37d/tower/LICENSE: MIT license\n\u27e837\u27e9 https://lib.rs/crates/tower/features#feature-buffer: optional feature - buffer?\n\u27e838\u27e9 https://lib.rs/crates/futures-core: 0.3.22 - futures-core\n\u27e839\u27e9 https://lib.rs/crates/pin-project-lite: 0.2.7 - pin-project-lite\n\u27e840\u27e9 https://lib.rs/crates/tower/features#feature-hedge: optional feature - hedge?\n\u27e841\u27e9 https://lib.rs/crates/tower/features#feature-limit: optional feature - limit?\n\u27e842\u27e9 https://lib.rs/crates/tower/features#feature-load: optional feature - load?\n\u27e843\u27e9 https://lib.rs/crates/tower/features#feature-make: optional feature - make?\n\u27e844\u27e9 https://lib.rs/crates/tower/features#feature-ready-cache: optional feature - ready-cache?\n\u27e845\u27e9 https://lib.rs/crates/tower/features#feature-reconnect: optional feature - reconnect?\n\u27e846\u27e9 https://lib.rs/crates/tower/features#feature-retry: optional feature - retry?\n\u27e847\u27e9 https://lib.rs/crates/tower/features#feature-spawn-ready: optional feature - spawn-ready?\n\u27e848\u27e9 https://lib.rs/crates/tower/features#feature-timeout: optional feature - timeout?\n\u27e849\u27e9 https://lib.rs/crates/tokio: 1.6.2 - tokio\n\u27e850\u27e9 https://lib.rs/crates/tokio/features#feature-sync: +sync\n\u27e851\u27e9 https://lib.rs/crates/tokio-util: 0.7.0 - tokio-util\n\u27e852\u27e9 https://lib.rs/crates/tower/features#feature-log: optional feature - log?\n\u27e853\u27e9 https://lib.rs/crates/tracing: 0.1.2 - tracing\n\u27e854\u27e9 https://lib.rs/crates/tracing/features#feature-std: +std\n\u27e855\u27e9 https://lib.rs/crates/tower/features#feature-filter: optional feature - filter?\n\u27e856\u27e9 https://lib.rs/crates/futures-util: 0.3.22 - futures-util\n\u27e857\u27e9 https://lib.rs/crates/futures-util/features#feature-alloc: +alloc\n\u27e858\u27e9 https://lib.rs/crates/hdrhistogram: 7.0 - hdrhistogram\n\u27e859\u27e9 https://lib.rs/crates/indexmap: new - indexmap\n\u27e860\u27e9 https://lib.rs/crates/tower/features#feature-balance: optional feature - balance?\n\u27e861\u27e9 https://lib.rs/crates/slab: 0.4 - slab\n\u27e862\u27e9 https://lib.rs/crates/tower/features#feature-util: optional feature - util?\n\u27e863\u27e9 https://lib.rs/crates/sync_wrapper: new - sync_wrapper\n\u27e864\u27e9 https://lib.rs/crates/tower/features#feature-tokio-stream: tokio-stream is optional feature -  optional \n\u27e865\u27e9 https://lib.rs/crates/tokio-stream: 0.1.0 - tokio-stream\n\u27e866\u27e9 https://lib.rs/crates/futures: 0.3.22 - futures\n\u27e867\u27e9 https://lib.rs/crates/http: new - http\n\u27e868\u27e9 https://lib.rs/crates/lazy_static: 1.4.0 - lazy_static\n\u27e869\u27e9 https://lib.rs/crates/quickcheck: new - quickcheck\n\u27e870\u27e9 https://lib.rs/crates/rand: outdated - rand\n\u27e871\u27e9 https://lib.rs/crates/rand/features#feature-small_rng: +small_rng\n\u27e872\u27e9 https://lib.rs/crates/tokio-test: 0.4 - tokio-test\n\u27e873\u27e9 https://lib.rs/crates/tracing-subscriber: 0.3 - tracing-subscriber\n\u27e874\u27e9 https://lib.rs/crates/tracing-subscriber/features#feature-fmt: +fmt\n\u27e875\u27e9 https://lib.rs/crates/tracing-subscriber/features#feature-ansi: +ansi\n\u27e876\u27e9 https://lib.rs/crates/tower/features: Other features\n\u27e877\u27e9 https://lib.rs/crates/tower/features#feature-discover: discover\n\u27e878\u27e9 https://lib.rs/crates/tower/features#feature-full: full\n\u27e879\u27e9 https://lib.rs/crates/tower/features#feature-load-shed: load-shed\n\u27e880\u27e9 https://lib.rs/crates/tower/features#feature-steer: steer\n",
              "fit_markdown": "",
              "fit_html": ""
            },
            "structured_data": {},
            "quality_score": 4.0,
            "extraction_method": "crawl4ai",
            "error": null,
            "metadata": {
              "doc_type": "docs",
              "content_length": 14108,
              "has_structured_data": false,
              "crawl_success": true
            },
            "timestamp": "111600.1489321"
          }
        },
        "crate_analysis": {
          "status": "completed",
          "check": [
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#tower-service@0.3.3",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\tower-service-0.3.3\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "tower_service",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\tower-service-0.3.3\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpa6quhevx\\tower-0.5.2\\target\\debug\\deps\\libtower_service-6f9ee9668c63aaeb.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#tower-layer@0.3.3",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\tower-layer-0.3.3\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "tower_layer",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\tower-layer-0.3.3\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpa6quhevx\\tower-0.5.2\\target\\debug\\deps\\libtower_layer-e58cade3501e20e0.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpa6quhevx/tower-0.5.2#tower@0.5.2",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpa6quhevx\\tower-0.5.2\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "tower",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpa6quhevx\\tower-0.5.2\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpa6quhevx\\tower-0.5.2\\target\\debug\\deps\\libtower-b0e075428b1c30e4.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "build-finished",
              "success": true
            }
          ],
          "clippy": [
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#tower-layer@0.3.3",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\tower-layer-0.3.3\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "tower_layer",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\tower-layer-0.3.3\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpa6quhevx\\tower-0.5.2\\target\\debug\\deps\\libtower_layer-e58cade3501e20e0.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#tower-service@0.3.3",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\tower-service-0.3.3\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "tower_service",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\tower-service-0.3.3\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpa6quhevx\\tower-0.5.2\\target\\debug\\deps\\libtower_service-6f9ee9668c63aaeb.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpa6quhevx/tower-0.5.2#tower@0.5.2",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpa6quhevx\\tower-0.5.2\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "tower",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpa6quhevx\\tower-0.5.2\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpa6quhevx\\tower-0.5.2\\target\\debug\\deps\\libtower-32a716d323f9522c.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "build-finished",
              "success": true
            }
          ],
          "audit": {
            "database": {
              "advisory-count": 787,
              "last-commit": "7573f55ba337263f61167dbb0ea926cdc7c8eb5d",
              "last-updated": "2025-06-17T11:04:25+02:00"
            },
            "lockfile": {
              "dependency-count": 85
            },
            "settings": {
              "target_arch": [],
              "target_os": [],
              "severity": null,
              "ignore": [],
              "informational_warnings": [
                "unmaintained",
                "unsound",
                "notice"
              ]
            },
            "vulnerabilities": {
              "found": true,
              "count": 2,
              "list": [
                {
                  "advisory": {
                    "id": "RUSTSEC-2022-0013",
                    "package": "regex",
                    "title": "Regexes with large repetitions on empty sub-expressions take a very long time to parse",
                    "description": "The Rust Security Response WG was notified that the `regex` crate did not\nproperly limit the complexity of the regular expressions (regex) it parses. An\nattacker could use this security issue to perform a denial of service, by\nsending a specially crafted regex to a service accepting untrusted regexes. No\nknown vulnerability is present when parsing untrusted input with trusted\nregexes.\n\nThis issue has been assigned CVE-2022-24713. The severity of this vulnerability\nis \"high\" when the `regex` crate is used to parse untrusted regexes. Other uses\nof the `regex` crate are not affected by this vulnerability.\n\n## Overview\n\nThe `regex` crate features built-in mitigations to prevent denial of service\nattacks caused by untrusted regexes, or untrusted input matched by trusted\nregexes. Those (tunable) mitigations already provide sane defaults to prevent\nattacks. This guarantee is documented and it's considered part of the crate's\nAPI.\n\nUnfortunately a bug was discovered in the mitigations designed to prevent\nuntrusted regexes to take an arbitrary amount of time during parsing, and it's\npossible to craft regexes that bypass such mitigations. This makes it possible\nto perform denial of service attacks by sending specially crafted regexes to\nservices accepting user-controlled, untrusted regexes.\n\n## Affected versions\n\nAll versions of the `regex` crate before or equal to 1.5.4 are affected by this\nissue. The fix is include starting from  `regex` 1.5.5.\n\n## Mitigations\n\nWe recommend everyone accepting user-controlled regexes to upgrade immediately\nto the latest version of the `regex` crate.\n\nUnfortunately there is no fixed set of problematic regexes, as there are\npractically infinite regexes that could be crafted to exploit this\nvulnerability. Because of this, we do not recommend denying known problematic\nregexes.\n\n## Acknowledgements\n\nWe want to thank Addison Crump for responsibly disclosing this to us according\nto the [Rust security policy][1], and for helping review the fix.\n\nWe also want to thank Andrew Gallant for developing the fix, and Pietro Albini\nfor coordinating the disclosure and writing this advisory.\n\n[1]: https://www.rust-lang.org/policies/security",
                    "date": "2022-03-08",
                    "aliases": [
                      "CVE-2022-24713",
                      "GHSA-m5pq-gvj9-9vr8"
                    ],
                    "related": [],
                    "collection": "crates",
                    "categories": [
                      "denial-of-service"
                    ],
                    "keywords": [],
                    "cvss": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
                    "informational": null,
                    "references": [],
                    "source": null,
                    "url": "https://groups.google.com/g/rustlang-security-announcements/c/NcNNL1Jq7Yw",
                    "withdrawn": null,
                    "license": "CC0-1.0"
                  },
                  "versions": {
                    "patched": [
                      ">=1.5.5"
                    ],
                    "unaffected": []
                  },
                  "affected": null,
                  "package": {
                    "name": "regex",
                    "version": "1.3.1",
                    "source": "registry+https://github.com/rust-lang/crates.io-index",
                    "checksum": "dc220bd33bdce8f093101afe22a037b8eb0e5af33592e6a9caafff0d4cb81cbd",
                    "dependencies": [
                      {
                        "name": "aho-corasick",
                        "version": "0.7.6",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "memchr",
                        "version": "2.2.1",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "regex-syntax",
                        "version": "0.6.12",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "thread_local",
                        "version": "0.3.6",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      }
                    ],
                    "replace": null
                  }
                },
                {
                  "advisory": {
                    "id": "RUSTSEC-2022-0006",
                    "package": "thread_local",
                    "title": "Data race in `Iter` and `IterMut`",
                    "description": "In the affected version of this crate, `{Iter, IterMut}::next` used a weaker memory ordering when loading values than what was required, exposing a potential data race\nwhen iterating over a `ThreadLocal`'s values.\n\nCrates using `Iter::next`, or `IterMut::next` are affected by this issue.",
                    "date": "2022-01-23",
                    "aliases": [
                      "GHSA-9hpw-r23r-xgm5"
                    ],
                    "related": [],
                    "collection": "crates",
                    "categories": [
                      "memory-corruption"
                    ],
                    "keywords": [],
                    "cvss": null,
                    "informational": null,
                    "references": [],
                    "source": null,
                    "url": "https://github.com/Amanieu/thread_local-rs/issues/33",
                    "withdrawn": null,
                    "license": "CC0-1.0"
                  },
                  "versions": {
                    "patched": [
                      ">=1.1.4"
                    ],
                    "unaffected": []
                  },
                  "affected": null,
                  "package": {
                    "name": "thread_local",
                    "version": "0.3.6",
                    "source": "registry+https://github.com/rust-lang/crates.io-index",
                    "checksum": "c6b53e329000edc2b34dbe8545fd20e55a333362d0a321909685a19bd28c3f1b",
                    "dependencies": [
                      {
                        "name": "lazy_static",
                        "version": "1.4.0",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      }
                    ],
                    "replace": null
                  }
                }
              ]
            },
            "warnings": {
              "unsound": [
                {
                  "kind": "unsound",
                  "package": {
                    "name": "tokio",
                    "version": "1.42.0",
                    "source": "registry+https://github.com/rust-lang/crates.io-index",
                    "checksum": "5cec9b21b0450273377fc97bd4c33a8acffc8c996c987a7c5b319a0083707551",
                    "dependencies": [
                      {
                        "name": "backtrace",
                        "version": "0.3.59",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "pin-project-lite",
                        "version": "0.2.15",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "tokio-macros",
                        "version": "2.4.0",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      }
                    ],
                    "replace": null
                  },
                  "advisory": {
                    "id": "RUSTSEC-2025-0023",
                    "package": "tokio",
                    "title": "Broadcast channel calls clone in parallel, but does not require `Sync`",
                    "description": "The broadcast channel internally calls `clone` on the stored value when\nreceiving it, and only requires `T:Send`. This means that using the broadcast\nchannel with values that are `Send` but not `Sync` can trigger unsoundness if\nthe `clone` implementation makes use of the value being `!Sync`.\n\nThank you to Austin Bonander for finding and reporting this issue.",
                    "date": "2025-04-07",
                    "aliases": [],
                    "related": [],
                    "collection": "crates",
                    "categories": [
                      "memory-corruption"
                    ],
                    "keywords": [],
                    "cvss": null,
                    "informational": "unsound",
                    "references": [],
                    "source": null,
                    "url": "https://github.com/tokio-rs/tokio/pull/7232",
                    "withdrawn": null,
                    "license": "CC0-1.0"
                  },
                  "affected": null,
                  "versions": {
                    "patched": [
                      ">=1.38.2, <1.39.0",
                      ">=1.42.1, <1.43.0",
                      ">=1.43.1, <1.44.0",
                      ">=1.44.2"
                    ],
                    "unaffected": [
                      "<0.2.5"
                    ]
                  }
                }
              ]
            }
          },
          "note": "Crate analysis performed with stable toolchain."
        },
        "crate_metadata": {
          "name": "tower",
          "version": "0.5.2",
          "description": "ALLOW: Positive community sentiment",
          "repository": "",
          "keywords": [],
          "categories": [],
          "readme": {
            "raw_markdown": "[](https://docs.rs/tower/latest/tower/all.html \"show sidebar\")\n# Crate towerCopy item path\n[Settings](https://docs.rs/tower/latest/settings.html)\n[Help](https://docs.rs/tower/latest/help.html)\nSummary[Source](https://docs.rs/tower/latest/src/tower/lib.rs.html#1-228)\nExpand description\n`async fn(Request) -> Result<Response, Error>`\n## [\u00a7](https://docs.rs/tower/latest/tower/#overview)Overview\nTower is a library of modular and reusable components for building robust networking clients and servers.\nTower provides a simple core abstraction, the [`Service`](https://docs.rs/tower/latest/tower/trait.Service.html \"trait tower::Service\") trait, which represents an asynchronous function taking a request and returning either a response or an error. This abstraction can be used to model both clients and servers.\nGeneric components, like [`timeout`](https://docs.rs/tower/latest/tower/timeout/index.html \"mod tower::timeout\"), [rate limiting](https://docs.rs/tower/latest/tower/limit/rate/index.html \"mod tower::limit::rate\"), and [load balancing](https://docs.rs/tower/latest/tower/balance/index.html \"mod tower::balance\"), can be modeled as [`Service`](https://docs.rs/tower/latest/tower/trait.Service.html \"trait tower::Service\")s that wrap some inner service and apply additional behavior before or after the inner service is called. This allows implementing these components in a protocol-agnostic, composable way. Typically, such services are referred to as _middleware_.\nAn additional abstraction, the [`Layer`](https://docs.rs/tower/latest/tower/trait.Layer.html \"trait tower::Layer\") trait, is used to compose middleware with [`Service`](https://docs.rs/tower/latest/tower/trait.Service.html \"trait tower::Service\")s. If a [`Service`](https://docs.rs/tower/latest/tower/trait.Service.html \"trait tower::Service\") can be thought of as an asynchronous function from a request type to a response type, a [`Layer`](https://docs.rs/tower/latest/tower/trait.Layer.html \"trait tower::Layer\") is a function taking a [`Service`](https://docs.rs/tower/latest/tower/trait.Service.html \"trait tower::Service\") of one type and returning a [`Service`](https://docs.rs/tower/latest/tower/trait.Service.html \"trait tower::Service\") of a different type. The [`ServiceBuilder`](https://docs.rs/tower/latest/tower/struct.ServiceBuilder.html \"struct tower::ServiceBuilder\") type is used to add middleware to a service by composing it with multiple [`Layer`](https://docs.rs/tower/latest/tower/trait.Layer.html \"trait tower::Layer\")s.\n### [\u00a7](https://docs.rs/tower/latest/tower/#the-tower-ecosystem)The Tower Ecosystem\nTower is made up of the following crates:\n  * [`tower`](https://crates.io/crates/tower) (this crate)\n  * [`tower-service`](https://crates.io/crates/tower-service)\n  * [`tower-layer`](https://crates.io/crates/tower-layer)\n  * [`tower-test`](https://crates.io/crates/tower-test)\n\n\nSince the [`Service`](https://docs.rs/tower/latest/tower/trait.Service.html \"trait tower::Service\") and [`Layer`](https://docs.rs/tower/latest/tower/trait.Layer.html \"trait tower::Layer\") traits are important integration points for all libraries using Tower, they are kept as stable as possible, and breaking changes are made rarely. Therefore, they are defined in separate crates, [`tower-service`](https://crates.io/crates/tower-service) and [`tower-layer`](https://crates.io/crates/tower-layer). This crate contains re-exports of those core traits, implementations of commonly-used middleware, and [utilities](https://docs.rs/tower/latest/tower/trait.ServiceExt.html \"trait tower::ServiceExt\") for working with [`Service`](https://docs.rs/tower/latest/tower/trait.Service.html \"trait tower::Service\")s and [`Layer`](https://docs.rs/tower/latest/tower/trait.Layer.html \"trait tower::Layer\")s. Finally, the [`tower-test`](https://crates.io/crates/tower-test) crate provides tools for testing programs using Tower.\n## [\u00a7](https://docs.rs/tower/latest/tower/#usage)Usage\nTower provides an abstraction layer, and generic implementations of various middleware. This means that the `tower` crate on its own does _not_ provide a working implementation of a network client or server. Instead, Tower\u2019s [`Service` trait](https://docs.rs/tower/latest/tower/trait.Service.html \"trait tower::Service\") provides an integration point between application code, libraries providing middleware implementations, and libraries that implement servers and/or clients for various network protocols.\nDepending on your particular use case, you might use Tower in several ways:\n  * **Implementing application logic** for a networked program. You might use the [`Service`](https://docs.rs/tower/latest/tower/trait.Service.html \"trait tower::Service\") trait to model your application\u2019s behavior, and use the middleware [provided by this crate](https://docs.rs/tower/latest/tower/#modules) and by other libraries to add functionality to clients and servers provided by one or more protocol implementations.\n  * **Implementing middleware** to add custom behavior to network clients and servers in a reusable manner. This might be general-purpose middleware (and if it is, please consider releasing your middleware as a library for other Tower users!) or application-specific behavior that needs to be shared between multiple clients or servers.\n  * **Implementing a network protocol**. Libraries that implement network protocols (such as HTTP) can depend on `tower-service` to use the [`Service`](https://docs.rs/tower/latest/tower/trait.Service.html \"trait tower::Service\") trait as an integration point between the protocol and user code. For example, a client for some protocol might implement [`Service`](https://docs.rs/tower/latest/tower/trait.Service.html \"trait tower::Service\"), allowing users to add arbitrary Tower middleware to those clients. Similarly, a server might be created from a user-provided [`Service`](https://docs.rs/tower/latest/tower/trait.Service.html \"trait tower::Service\").\nAdditionally, when a network protocol requires functionality already provided by existing Tower middleware, a protocol implementation might use Tower middleware internally, as well as as an integration point.\n\n\n### [\u00a7](https://docs.rs/tower/latest/tower/#library-support)Library Support\nA number of third-party libraries support Tower and the [`Service`](https://docs.rs/tower/latest/tower/trait.Service.html \"trait tower::Service\") trait. The following is an incomplete list of such libraries:\n  * [`hyper`](https://crates.io/crates/hyper): A fast and correct low-level HTTP implementation.\n  * [`tonic`](https://crates.io/crates/tonic): A [gRPC-over-HTTP/2](https://grpc.io) implementation built on top of [`hyper`](https://crates.io/crates/hyper). See [here](https://github.com/hyperium/tonic/tree/master/examples/src/tower) for examples of using [`tonic`](https://crates.io/crates/tonic) with Tower.\n  * [`warp`](https://crates.io/crates/warp): A lightweight, composable web framework. See [here](https://docs.rs/warp/0.2.5/warp/fn.service.html) for details on using [`warp`](https://crates.io/crates/warp) with Tower.\n  * [`tower-lsp`](https://crates.io/crates/tower-lsp): implementations of the [Language Server Protocol](https://microsoft.github.io/language-server-protocol/) based on Tower.\n\n\nIf you\u2019re the maintainer of a crate that supports Tower, we\u2019d love to add your crate to this list! Please [open a PR](https://github.com/tower-rs/tower/compare) adding a brief description of your library!\n### [\u00a7](https://docs.rs/tower/latest/tower/#getting-started)Getting Started\nIf you\u2019re brand new to Tower and want to start with the basics, we recommend you check out some of our [guides](https://github.com/tower-rs/tower/tree/master/guides).\nThe various middleware implementations provided by this crate are feature flagged, so that users can only compile the parts of Tower they need. By default, all the optional middleware are disabled.\nTo get started using all of Tower\u2019s optional middleware, add this to your `Cargo.toml`:\n```\ntower = { version = \"0.4\", features = [\"full\"] }\n```\n\nAlternatively, you can only enable some features. For example, to enable only the [`retry`](https://docs.rs/tower/latest/tower/retry/index.html \"mod tower::retry\") and [`timeout`](https://docs.rs/tower/latest/tower/timeout/index.html \"mod tower::timeout\") middleware, write:\n```\ntower = { version = \"0.4\", features = [\"retry\", \"timeout\"] }\n```\n\nSee [here](https://docs.rs/tower/latest/tower/#modules) for a complete list of all middleware provided by Tower.\n### [\u00a7](https://docs.rs/tower/latest/tower/#supported-rust-versions)Supported Rust Versions\nTower will keep a rolling MSRV (minimum supported Rust version) policy of **at least** 6 months. When increasing the MSRV, the new Rust version must have been released at least six months ago. The current MSRV is 1.64.0.\n## Modules[\u00a7](https://docs.rs/tower/latest/tower/#modules)\n\n[balance](https://docs.rs/tower/latest/tower/balance/index.html \"mod tower::balance\")`balance`\n    Middleware that allows balancing load among multiple services.\n\n[buffer](https://docs.rs/tower/latest/tower/buffer/index.html \"mod tower::buffer\")`buffer`\n    Middleware that provides a buffered mpsc channel to a service.\n\n[builder](https://docs.rs/tower/latest/tower/builder/index.html \"mod tower::builder\")\n    Builder types to compose layers and services\n\n[discover](https://docs.rs/tower/latest/tower/discover/index.html \"mod tower::discover\")`discover`\n    Service discovery\n\n[filter](https://docs.rs/tower/latest/tower/filter/index.html \"mod tower::filter\")`filter`\n    Conditionally dispatch requests to the inner service based on the result of a predicate.\n\n[hedge](https://docs.rs/tower/latest/tower/hedge/index.html \"mod tower::hedge\")`hedge`\n    Pre-emptively retry requests which have been outstanding for longer than a given latency percentile.\n\n[layer](https://docs.rs/tower/latest/tower/layer/index.html \"mod tower::layer\")\n    A collection of [`Layer`](https://docs.rs/tower/latest/tower/trait.Layer.html \"trait tower::Layer\") based tower services\n\n[limit](https://docs.rs/tower/latest/tower/limit/index.html \"mod tower::limit\")`limit`\n    Tower middleware for limiting requests.\n\n[load](https://docs.rs/tower/latest/tower/load/index.html \"mod tower::load\")`load`\n    Service load measurement\n\n[load_shed](https://docs.rs/tower/latest/tower/load_shed/index.html \"mod tower::load_shed\")`load-shed`\n    Middleware for shedding load when inner services aren\u2019t ready.\n\n[make](https://docs.rs/tower/latest/tower/make/index.html \"mod tower::make\")`make`\n    Trait aliases for Services that produce specific types of Responses.\n\n[ready_cache](https://docs.rs/tower/latest/tower/ready_cache/index.html \"mod tower::ready_cache\")`ready-cache`\n    A cache of services\n\n[reconnect](https://docs.rs/tower/latest/tower/reconnect/index.html \"mod tower::reconnect\")`reconnect`\n    Reconnect services when they fail.\n\n[retry](https://docs.rs/tower/latest/tower/retry/index.html \"mod tower::retry\")`retry`\n    Middleware for retrying \u201cfailed\u201d requests.\n\n[spawn_ready](https://docs.rs/tower/latest/tower/spawn_ready/index.html \"mod tower::spawn_ready\")`spawn-ready`\n    When an underlying service is not ready, drive it to readiness on a background task.\n\n[steer](https://docs.rs/tower/latest/tower/steer/index.html \"mod tower::steer\")`steer`\n    This module provides functionality to aid managing routing requests between [`Service`](https://docs.rs/tower/latest/tower/trait.Service.html \"trait tower::Service\")s.\n\n[timeout](https://docs.rs/tower/latest/tower/timeout/index.html \"mod tower::timeout\")`timeout`\n    Middleware that applies a timeout to requests.\n\n[util](https://docs.rs/tower/latest/tower/util/index.html \"mod tower::util\")`util`\n    Various utility types and functions that are generally used with Tower.\n## Structs[\u00a7](https://docs.rs/tower/latest/tower/#structs)\n\n[ServiceBuilder](https://docs.rs/tower/latest/tower/struct.ServiceBuilder.html \"struct tower::ServiceBuilder\")\n    Declaratively construct [`Service`](https://docs.rs/tower/latest/tower/trait.Service.html \"trait tower::Service\") values.\n## Traits[\u00a7](https://docs.rs/tower/latest/tower/#traits)\n\n[Layer](https://docs.rs/tower/latest/tower/trait.Layer.html \"trait tower::Layer\")\n    Decorates a [`Service`](https://docs.rs/tower/*/tower/trait.Service.html), transforming either the request or the response.\n\n[MakeService](https://docs.rs/tower/latest/tower/trait.MakeService.html \"trait tower::MakeService\")`make`\n    Creates new [`Service`](https://docs.rs/tower/latest/tower/trait.Service.html \"trait tower::Service\") values.\n\n[Service](https://docs.rs/tower/latest/tower/trait.Service.html \"trait tower::Service\")\n    An asynchronous function from a `Request` to a `Response`.\n\n[ServiceExt](https://docs.rs/tower/latest/tower/trait.ServiceExt.html \"trait tower::ServiceExt\")`util`\n    An extension trait for `Service`s that provides a variety of convenient adapters\n## Functions[\u00a7](https://docs.rs/tower/latest/tower/#functions)\n\n[service_fn](https://docs.rs/tower/latest/tower/fn.service_fn.html \"fn tower::service_fn\")`util`\n    Returns a new [`ServiceFn`](https://docs.rs/tower/latest/tower/util/struct.ServiceFn.html \"struct tower::util::ServiceFn\") with the given closure.\n## Type Aliases[\u00a7](https://docs.rs/tower/latest/tower/#types)\n\n[BoxError](https://docs.rs/tower/latest/tower/type.BoxError.html \"type tower::BoxError\")\n    Alias for a type-erased error type.\n",
            "markdown_with_citations": "[](https://docs.rs/tower/latest/tower/all.html \"show sidebar\")\n# Crate towerCopy item path\nSettings\u27e81\u27e9\nHelp\u27e82\u27e9\nSummarySource\u27e83\u27e9\nExpand description\n`async fn(Request) -> Result<Response, Error>`\n## \u00a7\u27e84\u27e9Overview\nTower is a library of modular and reusable components for building robust networking clients and servers.\nTower provides a simple core abstraction, the `Service`\u27e85\u27e9 trait, which represents an asynchronous function taking a request and returning either a response or an error. This abstraction can be used to model both clients and servers.\nGeneric components, like `timeout`\u27e86\u27e9, rate limiting\u27e87\u27e9, and load balancing\u27e88\u27e9, can be modeled as `Service`\u27e85\u27e9s that wrap some inner service and apply additional behavior before or after the inner service is called. This allows implementing these components in a protocol-agnostic, composable way. Typically, such services are referred to as _middleware_.\nAn additional abstraction, the `Layer`\u27e89\u27e9 trait, is used to compose middleware with `Service`\u27e85\u27e9s. If a `Service`\u27e85\u27e9 can be thought of as an asynchronous function from a request type to a response type, a `Layer`\u27e89\u27e9 is a function taking a `Service`\u27e85\u27e9 of one type and returning a `Service`\u27e85\u27e9 of a different type. The `ServiceBuilder`\u27e810\u27e9 type is used to add middleware to a service by composing it with multiple `Layer`\u27e89\u27e9s.\n### \u00a7\u27e811\u27e9The Tower Ecosystem\nTower is made up of the following crates:\n  * `tower`\u27e812\u27e9 (this crate)\n  * `tower-service`\u27e813\u27e9\n  * `tower-layer`\u27e814\u27e9\n  * `tower-test`\u27e815\u27e9\n\n\nSince the `Service`\u27e85\u27e9 and `Layer`\u27e89\u27e9 traits are important integration points for all libraries using Tower, they are kept as stable as possible, and breaking changes are made rarely. Therefore, they are defined in separate crates, `tower-service`\u27e813\u27e9 and `tower-layer`\u27e814\u27e9. This crate contains re-exports of those core traits, implementations of commonly-used middleware, and utilities\u27e816\u27e9 for working with `Service`\u27e85\u27e9s and `Layer`\u27e89\u27e9s. Finally, the `tower-test`\u27e815\u27e9 crate provides tools for testing programs using Tower.\n## \u00a7\u27e817\u27e9Usage\nTower provides an abstraction layer, and generic implementations of various middleware. This means that the `tower` crate on its own does _not_ provide a working implementation of a network client or server. Instead, Tower\u2019s `Service` trait\u27e85\u27e9 provides an integration point between application code, libraries providing middleware implementations, and libraries that implement servers and/or clients for various network protocols.\nDepending on your particular use case, you might use Tower in several ways:\n  * **Implementing application logic** for a networked program. You might use the `Service`\u27e85\u27e9 trait to model your application\u2019s behavior, and use the middleware provided by this crate\u27e818\u27e9 and by other libraries to add functionality to clients and servers provided by one or more protocol implementations.\n  * **Implementing middleware** to add custom behavior to network clients and servers in a reusable manner. This might be general-purpose middleware (and if it is, please consider releasing your middleware as a library for other Tower users!) or application-specific behavior that needs to be shared between multiple clients or servers.\n  * **Implementing a network protocol**. Libraries that implement network protocols (such as HTTP) can depend on `tower-service` to use the `Service`\u27e85\u27e9 trait as an integration point between the protocol and user code. For example, a client for some protocol might implement `Service`\u27e85\u27e9, allowing users to add arbitrary Tower middleware to those clients. Similarly, a server might be created from a user-provided `Service`\u27e85\u27e9.\nAdditionally, when a network protocol requires functionality already provided by existing Tower middleware, a protocol implementation might use Tower middleware internally, as well as as an integration point.\n\n\n### \u00a7\u27e819\u27e9Library Support\nA number of third-party libraries support Tower and the `Service`\u27e85\u27e9 trait. The following is an incomplete list of such libraries:\n  * `hyper`\u27e820\u27e9: A fast and correct low-level HTTP implementation.\n  * `tonic`\u27e821\u27e9: A gRPC-over-HTTP/2\u27e822\u27e9 implementation built on top of `hyper`\u27e820\u27e9. See here\u27e823\u27e9 for examples of using `tonic`\u27e821\u27e9 with Tower.\n  * `warp`\u27e824\u27e9: A lightweight, composable web framework. See here\u27e825\u27e9 for details on using `warp`\u27e824\u27e9 with Tower.\n  * `tower-lsp`\u27e826\u27e9: implementations of the Language Server Protocol\u27e827\u27e9 based on Tower.\n\n\nIf you\u2019re the maintainer of a crate that supports Tower, we\u2019d love to add your crate to this list! Please open a PR\u27e828\u27e9 adding a brief description of your library!\n### \u00a7\u27e829\u27e9Getting Started\nIf you\u2019re brand new to Tower and want to start with the basics, we recommend you check out some of our guides\u27e830\u27e9.\nThe various middleware implementations provided by this crate are feature flagged, so that users can only compile the parts of Tower they need. By default, all the optional middleware are disabled.\nTo get started using all of Tower\u2019s optional middleware, add this to your `Cargo.toml`:\n```\ntower = { version = \"0.4\", features = [\"full\"] }\n```\n\nAlternatively, you can only enable some features. For example, to enable only the `retry`\u27e831\u27e9 and `timeout`\u27e86\u27e9 middleware, write:\n```\ntower = { version = \"0.4\", features = [\"retry\", \"timeout\"] }\n```\n\nSee here\u27e818\u27e9 for a complete list of all middleware provided by Tower.\n### \u00a7\u27e832\u27e9Supported Rust Versions\nTower will keep a rolling MSRV (minimum supported Rust version) policy of **at least** 6 months. When increasing the MSRV, the new Rust version must have been released at least six months ago. The current MSRV is 1.64.0.\n## Modules\u00a7\u27e818\u27e9\n\nbalance\u27e88\u27e9`balance`\n    Middleware that allows balancing load among multiple services.\n\nbuffer\u27e833\u27e9`buffer`\n    Middleware that provides a buffered mpsc channel to a service.\n\nbuilder\u27e834\u27e9\n    Builder types to compose layers and services\n\ndiscover\u27e835\u27e9`discover`\n    Service discovery\n\nfilter\u27e836\u27e9`filter`\n    Conditionally dispatch requests to the inner service based on the result of a predicate.\n\nhedge\u27e837\u27e9`hedge`\n    Pre-emptively retry requests which have been outstanding for longer than a given latency percentile.\n\nlayer\u27e838\u27e9\n    A collection of `Layer`\u27e89\u27e9 based tower services\n\nlimit\u27e839\u27e9`limit`\n    Tower middleware for limiting requests.\n\nload\u27e840\u27e9`load`\n    Service load measurement\n\nload_shed\u27e841\u27e9`load-shed`\n    Middleware for shedding load when inner services aren\u2019t ready.\n\nmake\u27e842\u27e9`make`\n    Trait aliases for Services that produce specific types of Responses.\n\nready_cache\u27e843\u27e9`ready-cache`\n    A cache of services\n\nreconnect\u27e844\u27e9`reconnect`\n    Reconnect services when they fail.\n\nretry\u27e831\u27e9`retry`\n    Middleware for retrying \u201cfailed\u201d requests.\n\nspawn_ready\u27e845\u27e9`spawn-ready`\n    When an underlying service is not ready, drive it to readiness on a background task.\n\nsteer\u27e846\u27e9`steer`\n    This module provides functionality to aid managing routing requests between `Service`\u27e85\u27e9s.\n\ntimeout\u27e86\u27e9`timeout`\n    Middleware that applies a timeout to requests.\n\nutil\u27e847\u27e9`util`\n    Various utility types and functions that are generally used with Tower.\n## Structs\u00a7\u27e848\u27e9\n\nServiceBuilder\u27e810\u27e9\n    Declaratively construct `Service`\u27e85\u27e9 values.\n## Traits\u00a7\u27e849\u27e9\n\nLayer\u27e89\u27e9\n    Decorates a `Service`\u27e850\u27e9, transforming either the request or the response.\n\nMakeService\u27e851\u27e9`make`\n    Creates new `Service`\u27e85\u27e9 values.\n\nService\u27e85\u27e9\n    An asynchronous function from a `Request` to a `Response`.\n\nServiceExt\u27e816\u27e9`util`\n    An extension trait for `Service`s that provides a variety of convenient adapters\n## Functions\u00a7\u27e852\u27e9\n\nservice_fn\u27e853\u27e9`util`\n    Returns a new `ServiceFn`\u27e854\u27e9 with the given closure.\n## Type Aliases\u00a7\u27e855\u27e9\n\nBoxError\u27e856\u27e9\n    Alias for a type-erased error type.\n",
            "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://docs.rs/tower/latest/settings.html: Settings\n\u27e82\u27e9 https://docs.rs/tower/latest/help.html: Help\n\u27e83\u27e9 https://docs.rs/tower/latest/src/tower/lib.rs.html#1-228: Source\n\u27e84\u27e9 https://docs.rs/tower/latest/tower/#overview: \u00a7\n\u27e85\u27e9 https://docs.rs/tower/latest/tower/trait.Service.html: trait tower::Service - `Service`\n\u27e86\u27e9 https://docs.rs/tower/latest/tower/timeout/index.html: mod tower::timeout - `timeout`\n\u27e87\u27e9 https://docs.rs/tower/latest/tower/limit/rate/index.html: mod tower::limit::rate - rate limiting\n\u27e88\u27e9 https://docs.rs/tower/latest/tower/balance/index.html: mod tower::balance - load balancing\n\u27e89\u27e9 https://docs.rs/tower/latest/tower/trait.Layer.html: trait tower::Layer - `Layer`\n\u27e810\u27e9 https://docs.rs/tower/latest/tower/struct.ServiceBuilder.html: struct tower::ServiceBuilder - `ServiceBuilder`\n\u27e811\u27e9 https://docs.rs/tower/latest/tower/#the-tower-ecosystem: \u00a7\n\u27e812\u27e9 https://crates.io/crates/tower: `tower`\n\u27e813\u27e9 https://crates.io/crates/tower-service: `tower-service`\n\u27e814\u27e9 https://crates.io/crates/tower-layer: `tower-layer`\n\u27e815\u27e9 https://crates.io/crates/tower-test: `tower-test`\n\u27e816\u27e9 https://docs.rs/tower/latest/tower/trait.ServiceExt.html: trait tower::ServiceExt - utilities\n\u27e817\u27e9 https://docs.rs/tower/latest/tower/#usage: \u00a7\n\u27e818\u27e9 https://docs.rs/tower/latest/tower/#modules: provided by this crate\n\u27e819\u27e9 https://docs.rs/tower/latest/tower/#library-support: \u00a7\n\u27e820\u27e9 https://crates.io/crates/hyper: `hyper`\n\u27e821\u27e9 https://crates.io/crates/tonic: `tonic`\n\u27e822\u27e9 https://grpc.io: gRPC-over-HTTP/2\n\u27e823\u27e9 https://github.com/hyperium/tonic/tree/master/examples/src/tower: here\n\u27e824\u27e9 https://crates.io/crates/warp: `warp`\n\u27e825\u27e9 https://docs.rs/warp/0.2.5/warp/fn.service.html: here\n\u27e826\u27e9 https://crates.io/crates/tower-lsp: `tower-lsp`\n\u27e827\u27e9 https://microsoft.github.io/language-server-protocol/: Language Server Protocol\n\u27e828\u27e9 https://github.com/tower-rs/tower/compare: open a PR\n\u27e829\u27e9 https://docs.rs/tower/latest/tower/#getting-started: \u00a7\n\u27e830\u27e9 https://github.com/tower-rs/tower/tree/master/guides: guides\n\u27e831\u27e9 https://docs.rs/tower/latest/tower/retry/index.html: mod tower::retry - `retry`\n\u27e832\u27e9 https://docs.rs/tower/latest/tower/#supported-rust-versions: \u00a7\n\u27e833\u27e9 https://docs.rs/tower/latest/tower/buffer/index.html: mod tower::buffer - buffer\n\u27e834\u27e9 https://docs.rs/tower/latest/tower/builder/index.html: mod tower::builder - builder\n\u27e835\u27e9 https://docs.rs/tower/latest/tower/discover/index.html: mod tower::discover - discover\n\u27e836\u27e9 https://docs.rs/tower/latest/tower/filter/index.html: mod tower::filter - filter\n\u27e837\u27e9 https://docs.rs/tower/latest/tower/hedge/index.html: mod tower::hedge - hedge\n\u27e838\u27e9 https://docs.rs/tower/latest/tower/layer/index.html: mod tower::layer - layer\n\u27e839\u27e9 https://docs.rs/tower/latest/tower/limit/index.html: mod tower::limit - limit\n\u27e840\u27e9 https://docs.rs/tower/latest/tower/load/index.html: mod tower::load - load\n\u27e841\u27e9 https://docs.rs/tower/latest/tower/load_shed/index.html: mod tower::load_shed - load_shed\n\u27e842\u27e9 https://docs.rs/tower/latest/tower/make/index.html: mod tower::make - make\n\u27e843\u27e9 https://docs.rs/tower/latest/tower/ready_cache/index.html: mod tower::ready_cache - ready_cache\n\u27e844\u27e9 https://docs.rs/tower/latest/tower/reconnect/index.html: mod tower::reconnect - reconnect\n\u27e845\u27e9 https://docs.rs/tower/latest/tower/spawn_ready/index.html: mod tower::spawn_ready - spawn_ready\n\u27e846\u27e9 https://docs.rs/tower/latest/tower/steer/index.html: mod tower::steer - steer\n\u27e847\u27e9 https://docs.rs/tower/latest/tower/util/index.html: mod tower::util - util\n\u27e848\u27e9 https://docs.rs/tower/latest/tower/#structs: \u00a7\n\u27e849\u27e9 https://docs.rs/tower/latest/tower/#traits: \u00a7\n\u27e850\u27e9 https://docs.rs/tower/*/tower/trait.Service.html: `Service`\n\u27e851\u27e9 https://docs.rs/tower/latest/tower/trait.MakeService.html: trait tower::MakeService - MakeService\n\u27e852\u27e9 https://docs.rs/tower/latest/tower/#functions: \u00a7\n\u27e853\u27e9 https://docs.rs/tower/latest/tower/fn.service_fn.html: fn tower::service_fn - service_fn\n\u27e854\u27e9 https://docs.rs/tower/latest/tower/util/struct.ServiceFn.html: struct tower::util::ServiceFn - `ServiceFn`\n\u27e855\u27e9 https://docs.rs/tower/latest/tower/#types: \u00a7\n\u27e856\u27e9 https://docs.rs/tower/latest/tower/type.BoxError.html: type tower::BoxError - BoxError\n",
            "fit_markdown": "",
            "fit_html": ""
          },
          "downloads": 0,
          "github_stars": 0,
          "dependencies": [],
          "features": {},
          "code_snippets": [],
          "readme_sections": {},
          "librs_downloads": null,
          "source": "crates.io",
          "enhanced_scraping": {},
          "enhanced_features": [],
          "enhanced_dependencies": []
        },
        "enriched_crate": {
          "name": "tower",
          "version": "0.5.2",
          "description": "ALLOW: Positive community sentiment",
          "repository": "",
          "keywords": [],
          "categories": [],
          "readme": {
            "raw_markdown": "[](https://docs.rs/tower/latest/tower/all.html \"show sidebar\")\n# Crate towerCopy item path\n[Settings](https://docs.rs/tower/latest/settings.html)\n[Help](https://docs.rs/tower/latest/help.html)\nSummary[Source](https://docs.rs/tower/latest/src/tower/lib.rs.html#1-228)\nExpand description\n`async fn(Request) -> Result<Response, Error>`\n## [\u00a7](https://docs.rs/tower/latest/tower/#overview)Overview\nTower is a library of modular and reusable components for building robust networking clients and servers.\nTower provides a simple core abstraction, the [`Service`](https://docs.rs/tower/latest/tower/trait.Service.html \"trait tower::Service\") trait, which represents an asynchronous function taking a request and returning either a response or an error. This abstraction can be used to model both clients and servers.\nGeneric components, like [`timeout`](https://docs.rs/tower/latest/tower/timeout/index.html \"mod tower::timeout\"), [rate limiting](https://docs.rs/tower/latest/tower/limit/rate/index.html \"mod tower::limit::rate\"), and [load balancing](https://docs.rs/tower/latest/tower/balance/index.html \"mod tower::balance\"), can be modeled as [`Service`](https://docs.rs/tower/latest/tower/trait.Service.html \"trait tower::Service\")s that wrap some inner service and apply additional behavior before or after the inner service is called. This allows implementing these components in a protocol-agnostic, composable way. Typically, such services are referred to as _middleware_.\nAn additional abstraction, the [`Layer`](https://docs.rs/tower/latest/tower/trait.Layer.html \"trait tower::Layer\") trait, is used to compose middleware with [`Service`](https://docs.rs/tower/latest/tower/trait.Service.html \"trait tower::Service\")s. If a [`Service`](https://docs.rs/tower/latest/tower/trait.Service.html \"trait tower::Service\") can be thought of as an asynchronous function from a request type to a response type, a [`Layer`](https://docs.rs/tower/latest/tower/trait.Layer.html \"trait tower::Layer\") is a function taking a [`Service`](https://docs.rs/tower/latest/tower/trait.Service.html \"trait tower::Service\") of one type and returning a [`Service`](https://docs.rs/tower/latest/tower/trait.Service.html \"trait tower::Service\") of a different type. The [`ServiceBuilder`](https://docs.rs/tower/latest/tower/struct.ServiceBuilder.html \"struct tower::ServiceBuilder\") type is used to add middleware to a service by composing it with multiple [`Layer`](https://docs.rs/tower/latest/tower/trait.Layer.html \"trait tower::Layer\")s.\n### [\u00a7](https://docs.rs/tower/latest/tower/#the-tower-ecosystem)The Tower Ecosystem\nTower is made up of the following crates:\n  * [`tower`](https://crates.io/crates/tower) (this crate)\n  * [`tower-service`](https://crates.io/crates/tower-service)\n  * [`tower-layer`](https://crates.io/crates/tower-layer)\n  * [`tower-test`](https://crates.io/crates/tower-test)\n\n\nSince the [`Service`](https://docs.rs/tower/latest/tower/trait.Service.html \"trait tower::Service\") and [`Layer`](https://docs.rs/tower/latest/tower/trait.Layer.html \"trait tower::Layer\") traits are important integration points for all libraries using Tower, they are kept as stable as possible, and breaking changes are made rarely. Therefore, they are defined in separate crates, [`tower-service`](https://crates.io/crates/tower-service) and [`tower-layer`](https://crates.io/crates/tower-layer). This crate contains re-exports of those core traits, implementations of commonly-used middleware, and [utilities](https://docs.rs/tower/latest/tower/trait.ServiceExt.html \"trait tower::ServiceExt\") for working with [`Service`](https://docs.rs/tower/latest/tower/trait.Service.html \"trait tower::Service\")s and [`Layer`](https://docs.rs/tower/latest/tower/trait.Layer.html \"trait tower::Layer\")s. Finally, the [`tower-test`](https://crates.io/crates/tower-test) crate provides tools for testing programs using Tower.\n## [\u00a7](https://docs.rs/tower/latest/tower/#usage)Usage\nTower provides an abstraction layer, and generic implementations of various middleware. This means that the `tower` crate on its own does _not_ provide a working implementation of a network client or server. Instead, Tower\u2019s [`Service` trait](https://docs.rs/tower/latest/tower/trait.Service.html \"trait tower::Service\") provides an integration point between application code, libraries providing middleware implementations, and libraries that implement servers and/or clients for various network protocols.\nDepending on your particular use case, you might use Tower in several ways:\n  * **Implementing application logic** for a networked program. You might use the [`Service`](https://docs.rs/tower/latest/tower/trait.Service.html \"trait tower::Service\") trait to model your application\u2019s behavior, and use the middleware [provided by this crate](https://docs.rs/tower/latest/tower/#modules) and by other libraries to add functionality to clients and servers provided by one or more protocol implementations.\n  * **Implementing middleware** to add custom behavior to network clients and servers in a reusable manner. This might be general-purpose middleware (and if it is, please consider releasing your middleware as a library for other Tower users!) or application-specific behavior that needs to be shared between multiple clients or servers.\n  * **Implementing a network protocol**. Libraries that implement network protocols (such as HTTP) can depend on `tower-service` to use the [`Service`](https://docs.rs/tower/latest/tower/trait.Service.html \"trait tower::Service\") trait as an integration point between the protocol and user code. For example, a client for some protocol might implement [`Service`](https://docs.rs/tower/latest/tower/trait.Service.html \"trait tower::Service\"), allowing users to add arbitrary Tower middleware to those clients. Similarly, a server might be created from a user-provided [`Service`](https://docs.rs/tower/latest/tower/trait.Service.html \"trait tower::Service\").\nAdditionally, when a network protocol requires functionality already provided by existing Tower middleware, a protocol implementation might use Tower middleware internally, as well as as an integration point.\n\n\n### [\u00a7](https://docs.rs/tower/latest/tower/#library-support)Library Support\nA number of third-party libraries support Tower and the [`Service`](https://docs.rs/tower/latest/tower/trait.Service.html \"trait tower::Service\") trait. The following is an incomplete list of such libraries:\n  * [`hyper`](https://crates.io/crates/hyper): A fast and correct low-level HTTP implementation.\n  * [`tonic`](https://crates.io/crates/tonic): A [gRPC-over-HTTP/2](https://grpc.io) implementation built on top of [`hyper`](https://crates.io/crates/hyper). See [here](https://github.com/hyperium/tonic/tree/master/examples/src/tower) for examples of using [`tonic`](https://crates.io/crates/tonic) with Tower.\n  * [`warp`](https://crates.io/crates/warp): A lightweight, composable web framework. See [here](https://docs.rs/warp/0.2.5/warp/fn.service.html) for details on using [`warp`](https://crates.io/crates/warp) with Tower.\n  * [`tower-lsp`](https://crates.io/crates/tower-lsp): implementations of the [Language Server Protocol](https://microsoft.github.io/language-server-protocol/) based on Tower.\n\n\nIf you\u2019re the maintainer of a crate that supports Tower, we\u2019d love to add your crate to this list! Please [open a PR](https://github.com/tower-rs/tower/compare) adding a brief description of your library!\n### [\u00a7](https://docs.rs/tower/latest/tower/#getting-started)Getting Started\nIf you\u2019re brand new to Tower and want to start with the basics, we recommend you check out some of our [guides](https://github.com/tower-rs/tower/tree/master/guides).\nThe various middleware implementations provided by this crate are feature flagged, so that users can only compile the parts of Tower they need. By default, all the optional middleware are disabled.\nTo get started using all of Tower\u2019s optional middleware, add this to your `Cargo.toml`:\n```\ntower = { version = \"0.4\", features = [\"full\"] }\n```\n\nAlternatively, you can only enable some features. For example, to enable only the [`retry`](https://docs.rs/tower/latest/tower/retry/index.html \"mod tower::retry\") and [`timeout`](https://docs.rs/tower/latest/tower/timeout/index.html \"mod tower::timeout\") middleware, write:\n```\ntower = { version = \"0.4\", features = [\"retry\", \"timeout\"] }\n```\n\nSee [here](https://docs.rs/tower/latest/tower/#modules) for a complete list of all middleware provided by Tower.\n### [\u00a7](https://docs.rs/tower/latest/tower/#supported-rust-versions)Supported Rust Versions\nTower will keep a rolling MSRV (minimum supported Rust version) policy of **at least** 6 months. When increasing the MSRV, the new Rust version must have been released at least six months ago. The current MSRV is 1.64.0.\n## Modules[\u00a7](https://docs.rs/tower/latest/tower/#modules)\n\n[balance](https://docs.rs/tower/latest/tower/balance/index.html \"mod tower::balance\")`balance`\n    Middleware that allows balancing load among multiple services.\n\n[buffer](https://docs.rs/tower/latest/tower/buffer/index.html \"mod tower::buffer\")`buffer`\n    Middleware that provides a buffered mpsc channel to a service.\n\n[builder](https://docs.rs/tower/latest/tower/builder/index.html \"mod tower::builder\")\n    Builder types to compose layers and services\n\n[discover](https://docs.rs/tower/latest/tower/discover/index.html \"mod tower::discover\")`discover`\n    Service discovery\n\n[filter](https://docs.rs/tower/latest/tower/filter/index.html \"mod tower::filter\")`filter`\n    Conditionally dispatch requests to the inner service based on the result of a predicate.\n\n[hedge](https://docs.rs/tower/latest/tower/hedge/index.html \"mod tower::hedge\")`hedge`\n    Pre-emptively retry requests which have been outstanding for longer than a given latency percentile.\n\n[layer](https://docs.rs/tower/latest/tower/layer/index.html \"mod tower::layer\")\n    A collection of [`Layer`](https://docs.rs/tower/latest/tower/trait.Layer.html \"trait tower::Layer\") based tower services\n\n[limit](https://docs.rs/tower/latest/tower/limit/index.html \"mod tower::limit\")`limit`\n    Tower middleware for limiting requests.\n\n[load](https://docs.rs/tower/latest/tower/load/index.html \"mod tower::load\")`load`\n    Service load measurement\n\n[load_shed](https://docs.rs/tower/latest/tower/load_shed/index.html \"mod tower::load_shed\")`load-shed`\n    Middleware for shedding load when inner services aren\u2019t ready.\n\n[make](https://docs.rs/tower/latest/tower/make/index.html \"mod tower::make\")`make`\n    Trait aliases for Services that produce specific types of Responses.\n\n[ready_cache](https://docs.rs/tower/latest/tower/ready_cache/index.html \"mod tower::ready_cache\")`ready-cache`\n    A cache of services\n\n[reconnect](https://docs.rs/tower/latest/tower/reconnect/index.html \"mod tower::reconnect\")`reconnect`\n    Reconnect services when they fail.\n\n[retry](https://docs.rs/tower/latest/tower/retry/index.html \"mod tower::retry\")`retry`\n    Middleware for retrying \u201cfailed\u201d requests.\n\n[spawn_ready](https://docs.rs/tower/latest/tower/spawn_ready/index.html \"mod tower::spawn_ready\")`spawn-ready`\n    When an underlying service is not ready, drive it to readiness on a background task.\n\n[steer](https://docs.rs/tower/latest/tower/steer/index.html \"mod tower::steer\")`steer`\n    This module provides functionality to aid managing routing requests between [`Service`](https://docs.rs/tower/latest/tower/trait.Service.html \"trait tower::Service\")s.\n\n[timeout](https://docs.rs/tower/latest/tower/timeout/index.html \"mod tower::timeout\")`timeout`\n    Middleware that applies a timeout to requests.\n\n[util](https://docs.rs/tower/latest/tower/util/index.html \"mod tower::util\")`util`\n    Various utility types and functions that are generally used with Tower.\n## Structs[\u00a7](https://docs.rs/tower/latest/tower/#structs)\n\n[ServiceBuilder](https://docs.rs/tower/latest/tower/struct.ServiceBuilder.html \"struct tower::ServiceBuilder\")\n    Declaratively construct [`Service`](https://docs.rs/tower/latest/tower/trait.Service.html \"trait tower::Service\") values.\n## Traits[\u00a7](https://docs.rs/tower/latest/tower/#traits)\n\n[Layer](https://docs.rs/tower/latest/tower/trait.Layer.html \"trait tower::Layer\")\n    Decorates a [`Service`](https://docs.rs/tower/*/tower/trait.Service.html), transforming either the request or the response.\n\n[MakeService](https://docs.rs/tower/latest/tower/trait.MakeService.html \"trait tower::MakeService\")`make`\n    Creates new [`Service`](https://docs.rs/tower/latest/tower/trait.Service.html \"trait tower::Service\") values.\n\n[Service](https://docs.rs/tower/latest/tower/trait.Service.html \"trait tower::Service\")\n    An asynchronous function from a `Request` to a `Response`.\n\n[ServiceExt](https://docs.rs/tower/latest/tower/trait.ServiceExt.html \"trait tower::ServiceExt\")`util`\n    An extension trait for `Service`s that provides a variety of convenient adapters\n## Functions[\u00a7](https://docs.rs/tower/latest/tower/#functions)\n\n[service_fn](https://docs.rs/tower/latest/tower/fn.service_fn.html \"fn tower::service_fn\")`util`\n    Returns a new [`ServiceFn`](https://docs.rs/tower/latest/tower/util/struct.ServiceFn.html \"struct tower::util::ServiceFn\") with the given closure.\n## Type Aliases[\u00a7](https://docs.rs/tower/latest/tower/#types)\n\n[BoxError](https://docs.rs/tower/latest/tower/type.BoxError.html \"type tower::BoxError\")\n    Alias for a type-erased error type.\n",
            "markdown_with_citations": "[](https://docs.rs/tower/latest/tower/all.html \"show sidebar\")\n# Crate towerCopy item path\nSettings\u27e81\u27e9\nHelp\u27e82\u27e9\nSummarySource\u27e83\u27e9\nExpand description\n`async fn(Request) -> Result<Response, Error>`\n## \u00a7\u27e84\u27e9Overview\nTower is a library of modular and reusable components for building robust networking clients and servers.\nTower provides a simple core abstraction, the `Service`\u27e85\u27e9 trait, which represents an asynchronous function taking a request and returning either a response or an error. This abstraction can be used to model both clients and servers.\nGeneric components, like `timeout`\u27e86\u27e9, rate limiting\u27e87\u27e9, and load balancing\u27e88\u27e9, can be modeled as `Service`\u27e85\u27e9s that wrap some inner service and apply additional behavior before or after the inner service is called. This allows implementing these components in a protocol-agnostic, composable way. Typically, such services are referred to as _middleware_.\nAn additional abstraction, the `Layer`\u27e89\u27e9 trait, is used to compose middleware with `Service`\u27e85\u27e9s. If a `Service`\u27e85\u27e9 can be thought of as an asynchronous function from a request type to a response type, a `Layer`\u27e89\u27e9 is a function taking a `Service`\u27e85\u27e9 of one type and returning a `Service`\u27e85\u27e9 of a different type. The `ServiceBuilder`\u27e810\u27e9 type is used to add middleware to a service by composing it with multiple `Layer`\u27e89\u27e9s.\n### \u00a7\u27e811\u27e9The Tower Ecosystem\nTower is made up of the following crates:\n  * `tower`\u27e812\u27e9 (this crate)\n  * `tower-service`\u27e813\u27e9\n  * `tower-layer`\u27e814\u27e9\n  * `tower-test`\u27e815\u27e9\n\n\nSince the `Service`\u27e85\u27e9 and `Layer`\u27e89\u27e9 traits are important integration points for all libraries using Tower, they are kept as stable as possible, and breaking changes are made rarely. Therefore, they are defined in separate crates, `tower-service`\u27e813\u27e9 and `tower-layer`\u27e814\u27e9. This crate contains re-exports of those core traits, implementations of commonly-used middleware, and utilities\u27e816\u27e9 for working with `Service`\u27e85\u27e9s and `Layer`\u27e89\u27e9s. Finally, the `tower-test`\u27e815\u27e9 crate provides tools for testing programs using Tower.\n## \u00a7\u27e817\u27e9Usage\nTower provides an abstraction layer, and generic implementations of various middleware. This means that the `tower` crate on its own does _not_ provide a working implementation of a network client or server. Instead, Tower\u2019s `Service` trait\u27e85\u27e9 provides an integration point between application code, libraries providing middleware implementations, and libraries that implement servers and/or clients for various network protocols.\nDepending on your particular use case, you might use Tower in several ways:\n  * **Implementing application logic** for a networked program. You might use the `Service`\u27e85\u27e9 trait to model your application\u2019s behavior, and use the middleware provided by this crate\u27e818\u27e9 and by other libraries to add functionality to clients and servers provided by one or more protocol implementations.\n  * **Implementing middleware** to add custom behavior to network clients and servers in a reusable manner. This might be general-purpose middleware (and if it is, please consider releasing your middleware as a library for other Tower users!) or application-specific behavior that needs to be shared between multiple clients or servers.\n  * **Implementing a network protocol**. Libraries that implement network protocols (such as HTTP) can depend on `tower-service` to use the `Service`\u27e85\u27e9 trait as an integration point between the protocol and user code. For example, a client for some protocol might implement `Service`\u27e85\u27e9, allowing users to add arbitrary Tower middleware to those clients. Similarly, a server might be created from a user-provided `Service`\u27e85\u27e9.\nAdditionally, when a network protocol requires functionality already provided by existing Tower middleware, a protocol implementation might use Tower middleware internally, as well as as an integration point.\n\n\n### \u00a7\u27e819\u27e9Library Support\nA number of third-party libraries support Tower and the `Service`\u27e85\u27e9 trait. The following is an incomplete list of such libraries:\n  * `hyper`\u27e820\u27e9: A fast and correct low-level HTTP implementation.\n  * `tonic`\u27e821\u27e9: A gRPC-over-HTTP/2\u27e822\u27e9 implementation built on top of `hyper`\u27e820\u27e9. See here\u27e823\u27e9 for examples of using `tonic`\u27e821\u27e9 with Tower.\n  * `warp`\u27e824\u27e9: A lightweight, composable web framework. See here\u27e825\u27e9 for details on using `warp`\u27e824\u27e9 with Tower.\n  * `tower-lsp`\u27e826\u27e9: implementations of the Language Server Protocol\u27e827\u27e9 based on Tower.\n\n\nIf you\u2019re the maintainer of a crate that supports Tower, we\u2019d love to add your crate to this list! Please open a PR\u27e828\u27e9 adding a brief description of your library!\n### \u00a7\u27e829\u27e9Getting Started\nIf you\u2019re brand new to Tower and want to start with the basics, we recommend you check out some of our guides\u27e830\u27e9.\nThe various middleware implementations provided by this crate are feature flagged, so that users can only compile the parts of Tower they need. By default, all the optional middleware are disabled.\nTo get started using all of Tower\u2019s optional middleware, add this to your `Cargo.toml`:\n```\ntower = { version = \"0.4\", features = [\"full\"] }\n```\n\nAlternatively, you can only enable some features. For example, to enable only the `retry`\u27e831\u27e9 and `timeout`\u27e86\u27e9 middleware, write:\n```\ntower = { version = \"0.4\", features = [\"retry\", \"timeout\"] }\n```\n\nSee here\u27e818\u27e9 for a complete list of all middleware provided by Tower.\n### \u00a7\u27e832\u27e9Supported Rust Versions\nTower will keep a rolling MSRV (minimum supported Rust version) policy of **at least** 6 months. When increasing the MSRV, the new Rust version must have been released at least six months ago. The current MSRV is 1.64.0.\n## Modules\u00a7\u27e818\u27e9\n\nbalance\u27e88\u27e9`balance`\n    Middleware that allows balancing load among multiple services.\n\nbuffer\u27e833\u27e9`buffer`\n    Middleware that provides a buffered mpsc channel to a service.\n\nbuilder\u27e834\u27e9\n    Builder types to compose layers and services\n\ndiscover\u27e835\u27e9`discover`\n    Service discovery\n\nfilter\u27e836\u27e9`filter`\n    Conditionally dispatch requests to the inner service based on the result of a predicate.\n\nhedge\u27e837\u27e9`hedge`\n    Pre-emptively retry requests which have been outstanding for longer than a given latency percentile.\n\nlayer\u27e838\u27e9\n    A collection of `Layer`\u27e89\u27e9 based tower services\n\nlimit\u27e839\u27e9`limit`\n    Tower middleware for limiting requests.\n\nload\u27e840\u27e9`load`\n    Service load measurement\n\nload_shed\u27e841\u27e9`load-shed`\n    Middleware for shedding load when inner services aren\u2019t ready.\n\nmake\u27e842\u27e9`make`\n    Trait aliases for Services that produce specific types of Responses.\n\nready_cache\u27e843\u27e9`ready-cache`\n    A cache of services\n\nreconnect\u27e844\u27e9`reconnect`\n    Reconnect services when they fail.\n\nretry\u27e831\u27e9`retry`\n    Middleware for retrying \u201cfailed\u201d requests.\n\nspawn_ready\u27e845\u27e9`spawn-ready`\n    When an underlying service is not ready, drive it to readiness on a background task.\n\nsteer\u27e846\u27e9`steer`\n    This module provides functionality to aid managing routing requests between `Service`\u27e85\u27e9s.\n\ntimeout\u27e86\u27e9`timeout`\n    Middleware that applies a timeout to requests.\n\nutil\u27e847\u27e9`util`\n    Various utility types and functions that are generally used with Tower.\n## Structs\u00a7\u27e848\u27e9\n\nServiceBuilder\u27e810\u27e9\n    Declaratively construct `Service`\u27e85\u27e9 values.\n## Traits\u00a7\u27e849\u27e9\n\nLayer\u27e89\u27e9\n    Decorates a `Service`\u27e850\u27e9, transforming either the request or the response.\n\nMakeService\u27e851\u27e9`make`\n    Creates new `Service`\u27e85\u27e9 values.\n\nService\u27e85\u27e9\n    An asynchronous function from a `Request` to a `Response`.\n\nServiceExt\u27e816\u27e9`util`\n    An extension trait for `Service`s that provides a variety of convenient adapters\n## Functions\u00a7\u27e852\u27e9\n\nservice_fn\u27e853\u27e9`util`\n    Returns a new `ServiceFn`\u27e854\u27e9 with the given closure.\n## Type Aliases\u00a7\u27e855\u27e9\n\nBoxError\u27e856\u27e9\n    Alias for a type-erased error type.\n",
            "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://docs.rs/tower/latest/settings.html: Settings\n\u27e82\u27e9 https://docs.rs/tower/latest/help.html: Help\n\u27e83\u27e9 https://docs.rs/tower/latest/src/tower/lib.rs.html#1-228: Source\n\u27e84\u27e9 https://docs.rs/tower/latest/tower/#overview: \u00a7\n\u27e85\u27e9 https://docs.rs/tower/latest/tower/trait.Service.html: trait tower::Service - `Service`\n\u27e86\u27e9 https://docs.rs/tower/latest/tower/timeout/index.html: mod tower::timeout - `timeout`\n\u27e87\u27e9 https://docs.rs/tower/latest/tower/limit/rate/index.html: mod tower::limit::rate - rate limiting\n\u27e88\u27e9 https://docs.rs/tower/latest/tower/balance/index.html: mod tower::balance - load balancing\n\u27e89\u27e9 https://docs.rs/tower/latest/tower/trait.Layer.html: trait tower::Layer - `Layer`\n\u27e810\u27e9 https://docs.rs/tower/latest/tower/struct.ServiceBuilder.html: struct tower::ServiceBuilder - `ServiceBuilder`\n\u27e811\u27e9 https://docs.rs/tower/latest/tower/#the-tower-ecosystem: \u00a7\n\u27e812\u27e9 https://crates.io/crates/tower: `tower`\n\u27e813\u27e9 https://crates.io/crates/tower-service: `tower-service`\n\u27e814\u27e9 https://crates.io/crates/tower-layer: `tower-layer`\n\u27e815\u27e9 https://crates.io/crates/tower-test: `tower-test`\n\u27e816\u27e9 https://docs.rs/tower/latest/tower/trait.ServiceExt.html: trait tower::ServiceExt - utilities\n\u27e817\u27e9 https://docs.rs/tower/latest/tower/#usage: \u00a7\n\u27e818\u27e9 https://docs.rs/tower/latest/tower/#modules: provided by this crate\n\u27e819\u27e9 https://docs.rs/tower/latest/tower/#library-support: \u00a7\n\u27e820\u27e9 https://crates.io/crates/hyper: `hyper`\n\u27e821\u27e9 https://crates.io/crates/tonic: `tonic`\n\u27e822\u27e9 https://grpc.io: gRPC-over-HTTP/2\n\u27e823\u27e9 https://github.com/hyperium/tonic/tree/master/examples/src/tower: here\n\u27e824\u27e9 https://crates.io/crates/warp: `warp`\n\u27e825\u27e9 https://docs.rs/warp/0.2.5/warp/fn.service.html: here\n\u27e826\u27e9 https://crates.io/crates/tower-lsp: `tower-lsp`\n\u27e827\u27e9 https://microsoft.github.io/language-server-protocol/: Language Server Protocol\n\u27e828\u27e9 https://github.com/tower-rs/tower/compare: open a PR\n\u27e829\u27e9 https://docs.rs/tower/latest/tower/#getting-started: \u00a7\n\u27e830\u27e9 https://github.com/tower-rs/tower/tree/master/guides: guides\n\u27e831\u27e9 https://docs.rs/tower/latest/tower/retry/index.html: mod tower::retry - `retry`\n\u27e832\u27e9 https://docs.rs/tower/latest/tower/#supported-rust-versions: \u00a7\n\u27e833\u27e9 https://docs.rs/tower/latest/tower/buffer/index.html: mod tower::buffer - buffer\n\u27e834\u27e9 https://docs.rs/tower/latest/tower/builder/index.html: mod tower::builder - builder\n\u27e835\u27e9 https://docs.rs/tower/latest/tower/discover/index.html: mod tower::discover - discover\n\u27e836\u27e9 https://docs.rs/tower/latest/tower/filter/index.html: mod tower::filter - filter\n\u27e837\u27e9 https://docs.rs/tower/latest/tower/hedge/index.html: mod tower::hedge - hedge\n\u27e838\u27e9 https://docs.rs/tower/latest/tower/layer/index.html: mod tower::layer - layer\n\u27e839\u27e9 https://docs.rs/tower/latest/tower/limit/index.html: mod tower::limit - limit\n\u27e840\u27e9 https://docs.rs/tower/latest/tower/load/index.html: mod tower::load - load\n\u27e841\u27e9 https://docs.rs/tower/latest/tower/load_shed/index.html: mod tower::load_shed - load_shed\n\u27e842\u27e9 https://docs.rs/tower/latest/tower/make/index.html: mod tower::make - make\n\u27e843\u27e9 https://docs.rs/tower/latest/tower/ready_cache/index.html: mod tower::ready_cache - ready_cache\n\u27e844\u27e9 https://docs.rs/tower/latest/tower/reconnect/index.html: mod tower::reconnect - reconnect\n\u27e845\u27e9 https://docs.rs/tower/latest/tower/spawn_ready/index.html: mod tower::spawn_ready - spawn_ready\n\u27e846\u27e9 https://docs.rs/tower/latest/tower/steer/index.html: mod tower::steer - steer\n\u27e847\u27e9 https://docs.rs/tower/latest/tower/util/index.html: mod tower::util - util\n\u27e848\u27e9 https://docs.rs/tower/latest/tower/#structs: \u00a7\n\u27e849\u27e9 https://docs.rs/tower/latest/tower/#traits: \u00a7\n\u27e850\u27e9 https://docs.rs/tower/*/tower/trait.Service.html: `Service`\n\u27e851\u27e9 https://docs.rs/tower/latest/tower/trait.MakeService.html: trait tower::MakeService - MakeService\n\u27e852\u27e9 https://docs.rs/tower/latest/tower/#functions: \u00a7\n\u27e853\u27e9 https://docs.rs/tower/latest/tower/fn.service_fn.html: fn tower::service_fn - service_fn\n\u27e854\u27e9 https://docs.rs/tower/latest/tower/util/struct.ServiceFn.html: struct tower::util::ServiceFn - `ServiceFn`\n\u27e855\u27e9 https://docs.rs/tower/latest/tower/#types: \u00a7\n\u27e856\u27e9 https://docs.rs/tower/latest/tower/type.BoxError.html: type tower::BoxError - BoxError\n",
            "fit_markdown": "",
            "fit_html": ""
          },
          "downloads": 0,
          "github_stars": 0,
          "dependencies": [],
          "features": {},
          "code_snippets": [],
          "readme_sections": {},
          "librs_downloads": null,
          "source": "crates.io",
          "enhanced_scraping": {},
          "enhanced_features": [],
          "enhanced_dependencies": [],
          "readme_summary": "The `tower` crate provides modular and reusable components for building robust networking clients and servers, centered around the `Service` trait, which models asynchronous request-response interactions. It includes middleware implementations like `timeout`, `retry`, rate limiting, and load balancing, and supports composability via the `Layer` trait and `ServiceBuilder`. The crate is part of the Tower ecosystem, integrating seamlessly with libraries like `hyper` and enabling protocol-agnostic, extensible designs.",
          "feature_summary": null,
          "use_case": "Networking",
          "score": 8.5,
          "factual_counterfactual": "### Pair 1: Abstraction and Middleware  \n\u2705 **Factual**: The `tower` crate provides the `Service` trait, which serves as an abstraction for asynchronous functions that take a request and return either a response or an error. Middleware can be implemented as `Service`s that wrap other services to add functionality.  \n\u274c **Counterfactual**: The `tower` crate provides a fully functional HTTP server implementation out of the box, eliminating the need for additional libraries to handle network protocols.  \n\n---\n\n### Pair 2: Feature Flags for Middleware  \n\u2705 **Factual**: The `tower` crate uses feature flags to allow users to selectively enable middleware, such as `retry` and `timeout`, to optimize compilation and reduce binary size.  \n\u274c **Counterfactual**: All middleware provided by the `tower` crate is enabled by default, and users cannot disable individual components through feature flags.  \n\n---\n\n### Pair 3: Protocol-Agnostic Design  \n\u2705 **Factual**: Tower's middleware, such as `load balancing` and `rate limiting`, is designed to be protocol-agnostic, allowing it to be used with any network protocol supported by the application.  \n\u274c **Counterfactual**: Tower's middleware is tightly coupled to specific protocols like HTTP and cannot be used with other network protocols without significant modification.",
          "source_analysis": null,
          "user_behavior": null,
          "security": null
        }
      },
      "irl_score": 8.6,
      "execution_id": "exec-ad201526-ae395cb3-1751257809",
      "timestamp": "2025-06-30T04:30:09.104824+00:00",
      "canon_version": "1.3.0"
    },
    "rule_zero_compliant": true
  }
]