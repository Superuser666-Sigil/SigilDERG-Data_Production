[
  {
    "execution_id": "exec-e04b8f35-c0f49bc4-1751261175",
    "timestamp": "2025-06-30T05:26:15.348810+00:00",
    "sacred_chain": {
      "input_data": "unicode-segmentation",
      "context_sources": [
        "crates.io",
        "github.com",
        "lib.rs",
        "docs.rs"
      ],
      "reasoning_steps": [
        "Input canonicalized: 'unicode-segmentation' -> 'unicode-segmentation'",
        "Context gathered from 4 validated sources",
        "Metadata extracted: 4 fields",
        "Documentation analyzed: quality 7.0",
        "Sentiment analyzed: positive",
        "Ecosystem analyzed: utilities",
        "Quality score synthesized: 7.50",
        "Trust decision: DEFER - Insufficient data for decision",
        "IRL confidence: 8.600"
      ],
      "suggestion": "ALLOW: Positive community sentiment",
      "verdict": "DEFER",
      "audit_info": {
        "metadata": {
          "name": "unicode-segmentation",
          "type": "rust_crate",
          "source": "manual_input",
          "extraction_method": "irl_engine"
        },
        "sentiment": {
          "quality_score": 7.0,
          "completeness": 0.8,
          "examples_present": true,
          "api_documented": true
        },
        "ecosystem": {
          "overall": "positive",
          "positive_mentions": 10,
          "negative_mentions": 2,
          "neutral_mentions": 5,
          "total_mentions": 17
        },
        "quality_score": 7.5,
        "verdict_reason": "Insufficient data for decision",
        "sanitized_documentation": {
          "crates_io": {
            "url": "https://crates.io/crates/unicode-segmentation",
            "title": "unicode-segmentation v1.12.0",
            "content": {
              "raw_markdown": "#  unicode-segmentation v1.12.0\nThis crate provides Grapheme Cluster, Word and Sentence boundaries according to Unicode Standard Annex #29 rules. \n  * [ #boundary ](https://crates.io/keywords/boundary)\n  * [ #grapheme ](https://crates.io/keywords/grapheme)\n  * [ #text ](https://crates.io/keywords/text)\n  * [ #unicode ](https://crates.io/keywords/unicode)\n  * [ #word ](https://crates.io/keywords/word)\n\n\n  * [ Readme ](https://crates.io/crates/unicode-segmentation)\n  * [ 23 Versions ](https://crates.io/crates/unicode-segmentation/versions)\n  * [ Dependencies ](https://crates.io/crates/unicode-segmentation/dependencies)\n  * [ Dependents ](https://crates.io/crates/unicode-segmentation/reverse_dependencies)\n\n\n## Metadata\n10 months ago \n2018 edition \n[ MIT ](https://choosealicense.com/licenses/mit) OR [ Apache-2.0 ](https://choosealicense.com/licenses/apache-2.0)\n104 KiB \n## Install\nRun the following Cargo command in your project directory:\ncargo add unicode-segmentation\nOr add the following line to your Cargo.toml:\nunicode-segmentation = \"1.12.0\"\n## Repository\n[ github.com/unicode-rs/unicode-segmentation ](https://github.com/unicode-rs/unicode-segmentation)\n## Owners\n[ Report crate ](https://crates.io/support?crate=unicode-segmentation&inquire=crate-violation)\n### Stats Overview\n210,943,716 Downloads all time\n23 Versions published\n#### Downloads over the last 90 days\nDisplay as \nStacked \n  * Stacked \n  * Unstacked \n\n\nLoading\u2026\n",
              "markdown_with_citations": "#  unicode-segmentation v1.12.0\nThis crate provides Grapheme Cluster, Word and Sentence boundaries according to Unicode Standard Annex #29 rules. \n  *  #boundary \u27e81\u27e9\n  *  #grapheme \u27e82\u27e9\n  *  #text \u27e83\u27e9\n  *  #unicode \u27e84\u27e9\n  *  #word \u27e85\u27e9\n\n\n  *  Readme \u27e86\u27e9\n  *  23 Versions \u27e87\u27e9\n  *  Dependencies \u27e88\u27e9\n  *  Dependents \u27e89\u27e9\n\n\n## Metadata\n10 months ago \n2018 edition \n MIT \u27e810\u27e9 OR  Apache-2.0 \u27e811\u27e9\n104 KiB \n## Install\nRun the following Cargo command in your project directory:\ncargo add unicode-segmentation\nOr add the following line to your Cargo.toml:\nunicode-segmentation = \"1.12.0\"\n## Repository\n github.com/unicode-rs/unicode-segmentation \u27e812\u27e9\n## Owners\n Report crate \u27e813\u27e9\n### Stats Overview\n210,943,716 Downloads all time\n23 Versions published\n#### Downloads over the last 90 days\nDisplay as \nStacked \n  * Stacked \n  * Unstacked \n\n\nLoading\u2026\n",
              "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://crates.io/keywords/boundary:  #boundary \n\u27e82\u27e9 https://crates.io/keywords/grapheme:  #grapheme \n\u27e83\u27e9 https://crates.io/keywords/text:  #text \n\u27e84\u27e9 https://crates.io/keywords/unicode:  #unicode \n\u27e85\u27e9 https://crates.io/keywords/word:  #word \n\u27e86\u27e9 https://crates.io/crates/unicode-segmentation:  Readme \n\u27e87\u27e9 https://crates.io/crates/unicode-segmentation/versions:  23 Versions \n\u27e88\u27e9 https://crates.io/crates/unicode-segmentation/dependencies:  Dependencies \n\u27e89\u27e9 https://crates.io/crates/unicode-segmentation/reverse_dependencies:  Dependents \n\u27e810\u27e9 https://choosealicense.com/licenses/mit:  MIT \n\u27e811\u27e9 https://choosealicense.com/licenses/apache-2.0:  Apache-2.0 \n\u27e812\u27e9 https://github.com/unicode-rs/unicode-segmentation:  github.com/unicode-rs/unicode-segmentation \n\u27e813\u27e9 https://crates.io/support?crate=unicode-segmentation&inquire=crate-violation:  Report crate \n",
              "fit_markdown": "",
              "fit_html": ""
            },
            "structured_data": {},
            "quality_score": 3.0,
            "extraction_method": "crawl4ai",
            "error": null,
            "metadata": {
              "doc_type": "docs",
              "content_length": 1445,
              "has_structured_data": false,
              "crawl_success": true
            },
            "timestamp": "114965.0734953"
          },
          "docs_rs": {
            "url": "https://docs.rs/unicode-segmentation",
            "title": "Crate unicode_segmentationCopy item path",
            "content": {
              "raw_markdown": "[](https://docs.rs/unicode-segmentation/latest/unicode_segmentation/all.html \"show sidebar\")\n# Crate unicode_segmentationCopy item path\n[Settings](https://docs.rs/unicode-segmentation/latest/settings.html)\n[Help](https://docs.rs/unicode-segmentation/latest/help.html)\nSummary[Source](https://docs.rs/unicode-segmentation/latest/src/unicode_segmentation/lib.rs.html#11-294)\nExpand description\nIterators which split strings on Grapheme Cluster, Word or Sentence boundaries, according to the [Unicode Standard Annex #29](http://www.unicode.org/reports/tr29/) rules.\n```\nextern crate unicode_segmentation;\nuse unicode_segmentation::UnicodeSegmentation;\nfn main() {\n  let s = \"a\u0310e\u0301o\u0308\u0332\\r\\n\";\n  let g = UnicodeSegmentation::graphemes(s, true).collect::<Vec<&str>>();\n  let b: &[_] = &[\"a\u0310\", \"e\u0301\", \"o\u0308\u0332\", \"\\r\\n\"];\n  assert_eq!(g, b);\n  let s = \"The quick (\\\"brown\\\") fox can't jump 32.3 feet, right?\";\n  let w = s.unicode_words().collect::<Vec<&str>>();\n  let b: &[_] = &[\"The\", \"quick\", \"brown\", \"fox\", \"can't\", \"jump\", \"32.3\", \"feet\", \"right\"];\n  assert_eq!(w, b);\n  let s = \"The quick (\\\"brown\\\") fox\";\n  let w = s.split_word_bounds().collect::<Vec<&str>>();\n  let b: &[_] = &[\"The\", \" \", \"quick\", \" \", \"(\", \"\\\"\", \"brown\", \"\\\"\", \")\", \" \", \"fox\"];\n  assert_eq!(w, b);\n}\n```\n\n## [\u00a7](https://docs.rs/unicode-segmentation/latest/unicode_segmentation/#no_std)no_std\nunicode-segmentation does not depend on libstd, so it can be used in crates with the `#![no_std]` attribute.\n## [\u00a7](https://docs.rs/unicode-segmentation/latest/unicode_segmentation/#cratesio)crates.io\nYou can use this package in your project by adding the following to your `Cargo.toml`:\n```\n[dependencies]\nunicode-segmentation = \"1.9.0\"\n```\n\n## Structs[\u00a7](https://docs.rs/unicode-segmentation/latest/unicode_segmentation/#structs)\n\n[GraphemeCursor](https://docs.rs/unicode-segmentation/latest/unicode_segmentation/struct.GraphemeCursor.html \"struct unicode_segmentation::GraphemeCursor\")\n    Cursor-based segmenter for grapheme clusters.\n\n[GraphemeIndices](https://docs.rs/unicode-segmentation/latest/unicode_segmentation/struct.GraphemeIndices.html \"struct unicode_segmentation::GraphemeIndices\")\n    External iterator for grapheme clusters and byte offsets.\n\n[Graphemes](https://docs.rs/unicode-segmentation/latest/unicode_segmentation/struct.Graphemes.html \"struct unicode_segmentation::Graphemes\")\n    External iterator for a string\u2019s [grapheme clusters](http://www.unicode.org/reports/tr29/#Grapheme_Cluster_Boundaries).\n\n[USentenceBoundIndices](https://docs.rs/unicode-segmentation/latest/unicode_segmentation/struct.USentenceBoundIndices.html \"struct unicode_segmentation::USentenceBoundIndices\")\n    External iterator for sentence boundaries and byte offsets.\n\n[USentenceBounds](https://docs.rs/unicode-segmentation/latest/unicode_segmentation/struct.USentenceBounds.html \"struct unicode_segmentation::USentenceBounds\")\n    External iterator for a string\u2019s [sentence boundaries](http://www.unicode.org/reports/tr29/#Sentence_Boundaries).\n\n[UWordBoundIndices](https://docs.rs/unicode-segmentation/latest/unicode_segmentation/struct.UWordBoundIndices.html \"struct unicode_segmentation::UWordBoundIndices\")\n    External iterator for word boundaries and byte offsets.\n\n[UWordBounds](https://docs.rs/unicode-segmentation/latest/unicode_segmentation/struct.UWordBounds.html \"struct unicode_segmentation::UWordBounds\")\n    External iterator for a string\u2019s [word boundaries](http://www.unicode.org/reports/tr29/#Word_Boundaries).\n\n[UnicodeSentences](https://docs.rs/unicode-segmentation/latest/unicode_segmentation/struct.UnicodeSentences.html \"struct unicode_segmentation::UnicodeSentences\")\n    An iterator over the substrings of a string which, after splitting the string on [sentence boundaries](http://www.unicode.org/reports/tr29/#Sentence_Boundaries), contain any characters with the [Alphabetic](http://unicode.org/reports/tr44/#Alphabetic) property, or with [General_Category=Number](http://unicode.org/reports/tr44/#General_Category_Values).\n\n[UnicodeWordIndices](https://docs.rs/unicode-segmentation/latest/unicode_segmentation/struct.UnicodeWordIndices.html \"struct unicode_segmentation::UnicodeWordIndices\")\n    An iterator over the substrings of a string which, after splitting the string on [word boundaries](http://www.unicode.org/reports/tr29/#Word_Boundaries), contain any characters with the [Alphabetic](http://unicode.org/reports/tr44/#Alphabetic) property, or with [General_Category=Number](http://unicode.org/reports/tr44/#General_Category_Values). This iterator also provides the byte offsets for each substring.\n\n[UnicodeWords](https://docs.rs/unicode-segmentation/latest/unicode_segmentation/struct.UnicodeWords.html \"struct unicode_segmentation::UnicodeWords\")\n    An iterator over the substrings of a string which, after splitting the string on [word boundaries](http://www.unicode.org/reports/tr29/#Word_Boundaries), contain any characters with the [Alphabetic](http://unicode.org/reports/tr44/#Alphabetic) property, or with [General_Category=Number](http://unicode.org/reports/tr44/#General_Category_Values).\n## Enums[\u00a7](https://docs.rs/unicode-segmentation/latest/unicode_segmentation/#enums)\n\n[GraphemeIncomplete](https://docs.rs/unicode-segmentation/latest/unicode_segmentation/enum.GraphemeIncomplete.html \"enum unicode_segmentation::GraphemeIncomplete\")\n    An error return indicating that not enough content was available in the provided chunk to satisfy the query, and that more content must be provided.\n## Constants[\u00a7](https://docs.rs/unicode-segmentation/latest/unicode_segmentation/#constants)\n\n[UNICODE_VERSION](https://docs.rs/unicode-segmentation/latest/unicode_segmentation/constant.UNICODE_VERSION.html \"constant unicode_segmentation::UNICODE_VERSION\")\n    The version of [Unicode](http://www.unicode.org/) that this version of unicode-segmentation is based on.\n## Traits[\u00a7](https://docs.rs/unicode-segmentation/latest/unicode_segmentation/#traits)\n\n[UnicodeSegmentation](https://docs.rs/unicode-segmentation/latest/unicode_segmentation/trait.UnicodeSegmentation.html \"trait unicode_segmentation::UnicodeSegmentation\")\n    Methods for segmenting strings according to [Unicode Standard Annex #29](http://www.unicode.org/reports/tr29/).\n",
              "markdown_with_citations": "[](https://docs.rs/unicode-segmentation/latest/unicode_segmentation/all.html \"show sidebar\")\n# Crate unicode_segmentationCopy item path\nSettings\u27e81\u27e9\nHelp\u27e82\u27e9\nSummarySource\u27e83\u27e9\nExpand description\nIterators which split strings on Grapheme Cluster, Word or Sentence boundaries, according to the Unicode Standard Annex #29\u27e84\u27e9 rules.\n```\nextern crate unicode_segmentation;\nuse unicode_segmentation::UnicodeSegmentation;\nfn main() {\n  let s = \"a\u0310e\u0301o\u0308\u0332\\r\\n\";\n  let g = UnicodeSegmentation::graphemes(s, true).collect::<Vec<&str>>();\n  let b: &[_] = &[\"a\u0310\", \"e\u0301\", \"o\u0308\u0332\", \"\\r\\n\"];\n  assert_eq!(g, b);\n  let s = \"The quick (\\\"brown\\\") fox can't jump 32.3 feet, right?\";\n  let w = s.unicode_words().collect::<Vec<&str>>();\n  let b: &[_] = &[\"The\", \"quick\", \"brown\", \"fox\", \"can't\", \"jump\", \"32.3\", \"feet\", \"right\"];\n  assert_eq!(w, b);\n  let s = \"The quick (\\\"brown\\\") fox\";\n  let w = s.split_word_bounds().collect::<Vec<&str>>();\n  let b: &[_] = &[\"The\", \" \", \"quick\", \" \", \"(\", \"\\\"\", \"brown\", \"\\\"\", \")\", \" \", \"fox\"];\n  assert_eq!(w, b);\n}\n```\n\n## \u00a7\u27e85\u27e9no_std\nunicode-segmentation does not depend on libstd, so it can be used in crates with the `#![no_std]` attribute.\n## \u00a7\u27e86\u27e9crates.io\nYou can use this package in your project by adding the following to your `Cargo.toml`:\n```\n[dependencies]\nunicode-segmentation = \"1.9.0\"\n```\n\n## Structs\u00a7\u27e87\u27e9\n\nGraphemeCursor\u27e88\u27e9\n    Cursor-based segmenter for grapheme clusters.\n\nGraphemeIndices\u27e89\u27e9\n    External iterator for grapheme clusters and byte offsets.\n\nGraphemes\u27e810\u27e9\n    External iterator for a string\u2019s grapheme clusters\u27e811\u27e9.\n\nUSentenceBoundIndices\u27e812\u27e9\n    External iterator for sentence boundaries and byte offsets.\n\nUSentenceBounds\u27e813\u27e9\n    External iterator for a string\u2019s sentence boundaries\u27e814\u27e9.\n\nUWordBoundIndices\u27e815\u27e9\n    External iterator for word boundaries and byte offsets.\n\nUWordBounds\u27e816\u27e9\n    External iterator for a string\u2019s word boundaries\u27e817\u27e9.\n\nUnicodeSentences\u27e818\u27e9\n    An iterator over the substrings of a string which, after splitting the string on sentence boundaries\u27e814\u27e9, contain any characters with the Alphabetic\u27e819\u27e9 property, or with General_Category=Number\u27e820\u27e9.\n\nUnicodeWordIndices\u27e821\u27e9\n    An iterator over the substrings of a string which, after splitting the string on word boundaries\u27e817\u27e9, contain any characters with the Alphabetic\u27e819\u27e9 property, or with General_Category=Number\u27e820\u27e9. This iterator also provides the byte offsets for each substring.\n\nUnicodeWords\u27e822\u27e9\n    An iterator over the substrings of a string which, after splitting the string on word boundaries\u27e817\u27e9, contain any characters with the Alphabetic\u27e819\u27e9 property, or with General_Category=Number\u27e820\u27e9.\n## Enums\u00a7\u27e823\u27e9\n\nGraphemeIncomplete\u27e824\u27e9\n    An error return indicating that not enough content was available in the provided chunk to satisfy the query, and that more content must be provided.\n## Constants\u00a7\u27e825\u27e9\n\nUNICODE_VERSION\u27e826\u27e9\n    The version of Unicode\u27e827\u27e9 that this version of unicode-segmentation is based on.\n## Traits\u00a7\u27e828\u27e9\n\nUnicodeSegmentation\u27e829\u27e9\n    Methods for segmenting strings according to Unicode Standard Annex #29\u27e84\u27e9.\n",
              "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://docs.rs/unicode-segmentation/latest/settings.html: Settings\n\u27e82\u27e9 https://docs.rs/unicode-segmentation/latest/help.html: Help\n\u27e83\u27e9 https://docs.rs/unicode-segmentation/latest/src/unicode_segmentation/lib.rs.html#11-294: Source\n\u27e84\u27e9 http://www.unicode.org/reports/tr29/: Unicode Standard Annex #29\n\u27e85\u27e9 https://docs.rs/unicode-segmentation/latest/unicode_segmentation/#no_std: \u00a7\n\u27e86\u27e9 https://docs.rs/unicode-segmentation/latest/unicode_segmentation/#cratesio: \u00a7\n\u27e87\u27e9 https://docs.rs/unicode-segmentation/latest/unicode_segmentation/#structs: \u00a7\n\u27e88\u27e9 https://docs.rs/unicode-segmentation/latest/unicode_segmentation/struct.GraphemeCursor.html: struct unicode_segmentation::GraphemeCursor - GraphemeCursor\n\u27e89\u27e9 https://docs.rs/unicode-segmentation/latest/unicode_segmentation/struct.GraphemeIndices.html: struct unicode_segmentation::GraphemeIndices - GraphemeIndices\n\u27e810\u27e9 https://docs.rs/unicode-segmentation/latest/unicode_segmentation/struct.Graphemes.html: struct unicode_segmentation::Graphemes - Graphemes\n\u27e811\u27e9 http://www.unicode.org/reports/tr29/#Grapheme_Cluster_Boundaries: grapheme clusters\n\u27e812\u27e9 https://docs.rs/unicode-segmentation/latest/unicode_segmentation/struct.USentenceBoundIndices.html: struct unicode_segmentation::USentenceBoundIndices - USentenceBoundIndices\n\u27e813\u27e9 https://docs.rs/unicode-segmentation/latest/unicode_segmentation/struct.USentenceBounds.html: struct unicode_segmentation::USentenceBounds - USentenceBounds\n\u27e814\u27e9 http://www.unicode.org/reports/tr29/#Sentence_Boundaries: sentence boundaries\n\u27e815\u27e9 https://docs.rs/unicode-segmentation/latest/unicode_segmentation/struct.UWordBoundIndices.html: struct unicode_segmentation::UWordBoundIndices - UWordBoundIndices\n\u27e816\u27e9 https://docs.rs/unicode-segmentation/latest/unicode_segmentation/struct.UWordBounds.html: struct unicode_segmentation::UWordBounds - UWordBounds\n\u27e817\u27e9 http://www.unicode.org/reports/tr29/#Word_Boundaries: word boundaries\n\u27e818\u27e9 https://docs.rs/unicode-segmentation/latest/unicode_segmentation/struct.UnicodeSentences.html: struct unicode_segmentation::UnicodeSentences - UnicodeSentences\n\u27e819\u27e9 http://unicode.org/reports/tr44/#Alphabetic: Alphabetic\n\u27e820\u27e9 http://unicode.org/reports/tr44/#General_Category_Values: General_Category=Number\n\u27e821\u27e9 https://docs.rs/unicode-segmentation/latest/unicode_segmentation/struct.UnicodeWordIndices.html: struct unicode_segmentation::UnicodeWordIndices - UnicodeWordIndices\n\u27e822\u27e9 https://docs.rs/unicode-segmentation/latest/unicode_segmentation/struct.UnicodeWords.html: struct unicode_segmentation::UnicodeWords - UnicodeWords\n\u27e823\u27e9 https://docs.rs/unicode-segmentation/latest/unicode_segmentation/#enums: \u00a7\n\u27e824\u27e9 https://docs.rs/unicode-segmentation/latest/unicode_segmentation/enum.GraphemeIncomplete.html: enum unicode_segmentation::GraphemeIncomplete - GraphemeIncomplete\n\u27e825\u27e9 https://docs.rs/unicode-segmentation/latest/unicode_segmentation/#constants: \u00a7\n\u27e826\u27e9 https://docs.rs/unicode-segmentation/latest/unicode_segmentation/constant.UNICODE_VERSION.html: constant unicode_segmentation::UNICODE_VERSION - UNICODE_VERSION\n\u27e827\u27e9 http://www.unicode.org/: Unicode\n\u27e828\u27e9 https://docs.rs/unicode-segmentation/latest/unicode_segmentation/#traits: \u00a7\n\u27e829\u27e9 https://docs.rs/unicode-segmentation/latest/unicode_segmentation/trait.UnicodeSegmentation.html: trait unicode_segmentation::UnicodeSegmentation - UnicodeSegmentation\n",
              "fit_markdown": "",
              "fit_html": ""
            },
            "structured_data": {},
            "quality_score": 4.0,
            "extraction_method": "crawl4ai",
            "error": null,
            "metadata": {
              "doc_type": "docs",
              "content_length": 6238,
              "has_structured_data": false,
              "crawl_success": true
            },
            "timestamp": "114966.0371756"
          },
          "lib_rs": {
            "url": "https://lib.rs/crates/unicode-segmentation",
            "title": "Untitled",
            "content": {
              "raw_markdown": "###  [23 releases](https://lib.rs/crates/unicode-segmentation/versions) (stable)\n1.12.0 |  Sep 13, 2024   \n---|---  \n1.11.0 |  Feb 7, 2024   \n1.10.1 |  Jan 31, 2023   \n1.10.0 |  Sep 13, 2022   \n0.1.1 |  Jul 9, 2015   \n#**17** in [Text processing](https://lib.rs/text-processing \"Crates to deal with the complexities of human language when expressed in textual form.\")\nDownload history 1539127/week @ 2025-01-28 1833035/week @ 2025-02-04 1655607/week @ 2025-02-11 1953033/week @ 2025-02-18 1867865/week @ 2025-02-25 1920397/week @ 2025-03-04 1998591/week @ 2025-03-11 2262706/week @ 2025-03-18 2400004/week @ 2025-03-25 2019723/week @ 2025-04-01 2134490/week @ 2025-04-08 2058721/week @ 2025-04-15 2090850/week @ 2025-04-22 1973654/week @ 2025-04-29 2093280/week @ 2025-05-06 1831308/week @ 2025-05-13\n**8,287,924** downloads per month Used in [**16,948** crates (708 directly)](https://lib.rs/crates/unicode-segmentation/rev)\n**MIT/Apache**\n400KB  5K  SLoC\nIterators which split strings on Grapheme Cluster or Word boundaries, according to the [Unicode Standard Annex #29](http://www.unicode.org/reports/tr29/) rules.\n[![Build Status](https://img.gs/czjpqfbdkz/full/https://github.com/unicode-rs/unicode-segmentation/actions/workflows/rust.yml/badge.svg)](https://github.com/unicode-rs/unicode-segmentation/actions/workflows/rust.yml)\n[Documentation](https://unicode-rs.github.io/unicode-segmentation/unicode_segmentation/index.html)\n```\n``use` `unicode_segmentation`::``UnicodeSegmentation`;`\n``fn` `main`````(````)``````{`\n  `let` s `=` ``\"`a\u0310e\u0301o\u0308\u0332`\\r``\\n``\"```;`\n  `let` g `=` s`.``graphemes``(``true``)``.``collect`::````<``Vec``<``&``str``>``>```(``)``;`\n  `let` b`:` `&``[``_``]` `=` `&``[```\"`a\u0310`\"```,` ``\"`e\u0301`\"```,` ``\"`o\u0308\u0332`\"```,` ``\"``\\r``\\n``\"```]``;`\n  `assert_eq!``(`g`,` b`)``;`\n  `let` s `=` ``\"`The quick (`\\\"`brown`\\\"`) fox can't jump 32.3 feet, right?`\"```;`\n  `let` w `=` s`.``unicode_words``(``)``.``collect`::````<``Vec``<``&``str``>``>```(``)``;`\n  `let` b`:` `&``[``_``]` `=` `&``[```\"`The`\"```,` ``\"`quick`\"```,` ``\"`brown`\"```,` ``\"`fox`\"```,` ``\"`can't`\"```,` ``\"`jump`\"```,` ``\"`32.3`\"```,` ``\"`feet`\"```,` ``\"`right`\"```]``;`\n  `assert_eq!``(`w`,` b`)``;`\n  `let` s `=` ``\"`The quick (`\\\"`brown`\\\"`) fox`\"```;`\n  `let` w `=` s`.``split_word_bounds``(``)``.``collect`::````<``Vec``<``&``str``>``>```(``)``;`\n  `let` b`:` `&``[``_``]` `=` `&``[```\"`The`\"```,` ``\"` `\"```,` ``\"`quick`\"```,` ``\"` `\"```,` ``\"`(`\"```,` ``\"``\\\"``\"```,` ``\"`brown`\"```,` ``\"``\\\"``\"```,` ``\"`)`\"```,` ``\"` `\"```,` ``\"`fox`\"```]``;`\n  `assert_eq!``(`w`,` b`)``;`\n```}```\n`\n```\n\n# no_std\nunicode-segmentation does not depend on libstd, so it can be used in crates with the ````#!``[``no_std``]```` attribute.\n# crates.io\nYou can use this package in your project by adding the following to your ``Cargo.toml``:\n```\n```[``dependencies``]`\n`unicode-segmentation ``=` ``\"`1.10.1`\"``\n``\n```\n\n# Change Log\n## 1.11.0\n  * [#124](https://github.com/unicode-rs/unicode-segmentation/pull/124) Update data to Unicode 15.1\n  * [#128](https://github.com/unicode-rs/unicode-segmentation/pull/128) Add ``size_hint`` to iterators\n\n\n## 1.10.1\n  * [#113](https://github.com/unicode-rs/unicode-segmentation/pull/113) Use criterion.rs for word benchmarks\n  * [#112](https://github.com/unicode-rs/unicode-segmentation/pull/112) Improve table search speed through lookups\n\n\n## 1.10.0\n  * [#107](https://github.com/unicode-rs/unicode-segmentation/pull/107) Upgrade to Unicode 15.0.0\n  * [#104](https://github.com/unicode-rs/unicode-segmentation/pull/104) Supersedes and fixes [#75](https://github.com/unicode-rs/unicode-segmentation/pull/75)\n\n\n## 1.9.0\n  * [#101](https://github.com/unicode-rs/unicode-segmentation/pull/101) Upgrade to Unicode 14.0.0\n\n\n## 1.8.0\n  * [#100](https://github.com/unicode-rs/unicode-segmentation/pull/100) * [#100](https://github.com/unicode-rs/unicode-segmentation/pull/100) - Increase ````#``[``inline``]```` opportunities, resulting in 15-40% performance improvement.\n  * [#95](https://github.com/unicode-rs/unicode-segmentation/pull/98) Implement debug for Graphemes\n  * [#94](https://github.com/unicode-rs/unicode-segmentation/pull/94) Add Initial fuzzer for oss-fuzz integration\n  * [#93](https://github.com/unicode-rs/unicode-segmentation/pull/93) Fix unused imports and deprecated pattern warnings\n  * [#91](https://github.com/unicode-rs/unicode-segmentation/pull/92) Made local variable immutable by moving it into loop\n  * [#91](https://github.com/unicode-rs/unicode-segmentation/pull/91) Add new iterator [UnicodeWordIndices](https://unicode-rs.github.io/unicode-segmentation/unicode_segmentation/struct.UnicodeWordIndices.html) and [unicode_word_indices](https://unicode-rs.github.io/unicode-segmentation/unicode_segmentation/trait.UnicodeSegmentation.html#tymethod.unicode_word_indices)\n\n\n## 1.7.1\n  * Update docs on version number\n\n\n## 1.7.0\n  * [#87](https://github.com/unicode-rs/unicode-segmentation/pull/87) Upgrade to Unicode 13\n  * [#79](https://github.com/unicode-rs/unicode-segmentation/pull/79) Implement a special-case lookup for ascii grapheme categories\n  * [#77](https://github.com/unicode-rs/unicode-segmentation/pull/77) Optimization for grapheme iteration\n\n\n## 1.6.0\n  * [#72](https://github.com/unicode-rs/unicode-segmentation/pull/72) Upgrade to Unicode 12\n\n\n## 1.5.0\n  * [#68](https://github.com/unicode-rs/unicode-segmentation/pull/68) Upgrade to Unicode 11\n\n\n## 1.4.0\n  * [#56](https://github.com/unicode-rs/unicode-segmentation/pull/56) Upgrade to Unicode 10\n\n\n## 1.3.0\n  * [#24](https://github.com/unicode-rs/unicode-segmentation/pull/24) Add support for sentence boundaries\n  * [#44](https://github.com/unicode-rs/unicode-segmentation/pull/44) Treat ``gc`=`No`` as a subset of ``gc`=`N``\n\n\n## 1.2.1\n  * [#37](https://github.com/unicode-rs/unicode-segmentation/pull/37): Fix panic in ``provide_context``.\n  * [#40](https://github.com/unicode-rs/unicode-segmentation/pull/40): Fix crash in ``prev_boundary``.\n\n\n## 1.2.0\n  * New ``GraphemeCursor`` API allows random access and bidirectional iteration.\n  * Fixed incorrect splitting of certain emoji modifier sequences.\n\n\n## 1.1.0\n  * Add ``as_str`` methods to the iterator types.\n\n\n## 1.0.3\n  * Code cleanup and additional tests.\n\n\n## 1.0.1\n  * Fix a bug affecting some grapheme clusters containing Prepend characters.\n\n\n## 1.0.0\n  * Upgrade to Unicode 9.0.0.\n\n\n#### No runtime deps\n  * dev  [criterion](https://lib.rs/crates/criterion \"outdated\") 0.5\n  * dev  [quickcheck](https://lib.rs/crates/quickcheck \"obsolete\") 0.7\n\n\n#### [Other feature](https://lib.rs/crates/unicode-segmentation/features)\n  * [no_std](https://lib.rs/crates/unicode-segmentation/features#feature-no_std)\n\n\n  *[SLoC]: Lines of code, excluding comments\n",
              "markdown_with_citations": "###  23 releases\u27e81\u27e9 (stable)\n1.12.0 |  Sep 13, 2024   \n---|---  \n1.11.0 |  Feb 7, 2024   \n1.10.1 |  Jan 31, 2023   \n1.10.0 |  Sep 13, 2022   \n0.1.1 |  Jul 9, 2015   \n#**17** in Text processing\u27e82\u27e9\nDownload history 1539127/week @ 2025-01-28 1833035/week @ 2025-02-04 1655607/week @ 2025-02-11 1953033/week @ 2025-02-18 1867865/week @ 2025-02-25 1920397/week @ 2025-03-04 1998591/week @ 2025-03-11 2262706/week @ 2025-03-18 2400004/week @ 2025-03-25 2019723/week @ 2025-04-01 2134490/week @ 2025-04-08 2058721/week @ 2025-04-15 2090850/week @ 2025-04-22 1973654/week @ 2025-04-29 2093280/week @ 2025-05-06 1831308/week @ 2025-05-13\n**8,287,924** downloads per month Used in **16,948** crates (708 directly)\u27e83\u27e9\n**MIT/Apache**\n400KB  5K  SLoC\nIterators which split strings on Grapheme Cluster or Word boundaries, according to the Unicode Standard Annex #29\u27e84\u27e9 rules.\n![Build Status\u27e85\u27e9](https://github.com/unicode-rs/unicode-segmentation/actions/workflows/rust.yml)\nDocumentation\u27e86\u27e9\n```\n``use` `unicode_segmentation`::``UnicodeSegmentation`;`\n``fn` `main`````(````)``````{`\n  `let` s `=` ``\"`a\u0310e\u0301o\u0308\u0332`\\r``\\n``\"```;`\n  `let` g `=` s`.``graphemes``(``true``)``.``collect`::````<``Vec``<``&``str``>``>```(``)``;`\n  `let` b`:` `&``[``_``]` `=` `&``[```\"`a\u0310`\"```,` ``\"`e\u0301`\"```,` ``\"`o\u0308\u0332`\"```,` ``\"``\\r``\\n``\"```]``;`\n  `assert_eq!``(`g`,` b`)``;`\n  `let` s `=` ``\"`The quick (`\\\"`brown`\\\"`) fox can't jump 32.3 feet, right?`\"```;`\n  `let` w `=` s`.``unicode_words``(``)``.``collect`::````<``Vec``<``&``str``>``>```(``)``;`\n  `let` b`:` `&``[``_``]` `=` `&``[```\"`The`\"```,` ``\"`quick`\"```,` ``\"`brown`\"```,` ``\"`fox`\"```,` ``\"`can't`\"```,` ``\"`jump`\"```,` ``\"`32.3`\"```,` ``\"`feet`\"```,` ``\"`right`\"```]``;`\n  `assert_eq!``(`w`,` b`)``;`\n  `let` s `=` ``\"`The quick (`\\\"`brown`\\\"`) fox`\"```;`\n  `let` w `=` s`.``split_word_bounds``(``)``.``collect`::````<``Vec``<``&``str``>``>```(``)``;`\n  `let` b`:` `&``[``_``]` `=` `&``[```\"`The`\"```,` ``\"` `\"```,` ``\"`quick`\"```,` ``\"` `\"```,` ``\"`(`\"```,` ``\"``\\\"``\"```,` ``\"`brown`\"```,` ``\"``\\\"``\"```,` ``\"`)`\"```,` ``\"` `\"```,` ``\"`fox`\"```]``;`\n  `assert_eq!``(`w`,` b`)``;`\n```}```\n`\n```\n\n# no_std\nunicode-segmentation does not depend on libstd, so it can be used in crates with the ````#!``[``no_std``]```` attribute.\n# crates.io\nYou can use this package in your project by adding the following to your ``Cargo.toml``:\n```\n```[``dependencies``]`\n`unicode-segmentation ``=` ``\"`1.10.1`\"``\n``\n```\n\n# Change Log\n## 1.11.0\n  * #124\u27e87\u27e9 Update data to Unicode 15.1\n  * #128\u27e88\u27e9 Add ``size_hint`` to iterators\n\n\n## 1.10.1\n  * #113\u27e89\u27e9 Use criterion.rs for word benchmarks\n  * #112\u27e810\u27e9 Improve table search speed through lookups\n\n\n## 1.10.0\n  * #107\u27e811\u27e9 Upgrade to Unicode 15.0.0\n  * #104\u27e812\u27e9 Supersedes and fixes #75\u27e813\u27e9\n\n\n## 1.9.0\n  * #101\u27e814\u27e9 Upgrade to Unicode 14.0.0\n\n\n## 1.8.0\n  * #100\u27e815\u27e9 * #100\u27e815\u27e9 - Increase ````#``[``inline``]```` opportunities, resulting in 15-40% performance improvement.\n  * #95\u27e816\u27e9 Implement debug for Graphemes\n  * #94\u27e817\u27e9 Add Initial fuzzer for oss-fuzz integration\n  * #93\u27e818\u27e9 Fix unused imports and deprecated pattern warnings\n  * #91\u27e819\u27e9 Made local variable immutable by moving it into loop\n  * #91\u27e820\u27e9 Add new iterator UnicodeWordIndices\u27e821\u27e9 and unicode_word_indices\u27e822\u27e9\n\n\n## 1.7.1\n  * Update docs on version number\n\n\n## 1.7.0\n  * #87\u27e823\u27e9 Upgrade to Unicode 13\n  * #79\u27e824\u27e9 Implement a special-case lookup for ascii grapheme categories\n  * #77\u27e825\u27e9 Optimization for grapheme iteration\n\n\n## 1.6.0\n  * #72\u27e826\u27e9 Upgrade to Unicode 12\n\n\n## 1.5.0\n  * #68\u27e827\u27e9 Upgrade to Unicode 11\n\n\n## 1.4.0\n  * #56\u27e828\u27e9 Upgrade to Unicode 10\n\n\n## 1.3.0\n  * #24\u27e829\u27e9 Add support for sentence boundaries\n  * #44\u27e830\u27e9 Treat ``gc`=`No`` as a subset of ``gc`=`N``\n\n\n## 1.2.1\n  * #37\u27e831\u27e9: Fix panic in ``provide_context``.\n  * #40\u27e832\u27e9: Fix crash in ``prev_boundary``.\n\n\n## 1.2.0\n  * New ``GraphemeCursor`` API allows random access and bidirectional iteration.\n  * Fixed incorrect splitting of certain emoji modifier sequences.\n\n\n## 1.1.0\n  * Add ``as_str`` methods to the iterator types.\n\n\n## 1.0.3\n  * Code cleanup and additional tests.\n\n\n## 1.0.1\n  * Fix a bug affecting some grapheme clusters containing Prepend characters.\n\n\n## 1.0.0\n  * Upgrade to Unicode 9.0.0.\n\n\n#### No runtime deps\n  * dev  criterion\u27e833\u27e9 0.5\n  * dev  quickcheck\u27e834\u27e9 0.7\n\n\n#### Other feature\u27e835\u27e9\n  * no_std\u27e836\u27e9\n\n\n  *[SLoC]: Lines of code, excluding comments\n",
              "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://lib.rs/crates/unicode-segmentation/versions: 23 releases\n\u27e82\u27e9 https://lib.rs/text-processing: Crates to deal with the complexities of human language when expressed in textual form. - Text processing\n\u27e83\u27e9 https://lib.rs/crates/unicode-segmentation/rev: **16,948** crates (708 directly)\n\u27e84\u27e9 http://www.unicode.org/reports/tr29/: Unicode Standard Annex #29\n\u27e85\u27e9 https://img.gs/czjpqfbdkz/full/https://github.com/unicode-rs/unicode-segmentation/actions/workflows/rust.yml/badge.svg: ![Build Status\n\u27e86\u27e9 https://unicode-rs.github.io/unicode-segmentation/unicode_segmentation/index.html: Documentation\n\u27e87\u27e9 https://github.com/unicode-rs/unicode-segmentation/pull/124: #124\n\u27e88\u27e9 https://github.com/unicode-rs/unicode-segmentation/pull/128: #128\n\u27e89\u27e9 https://github.com/unicode-rs/unicode-segmentation/pull/113: #113\n\u27e810\u27e9 https://github.com/unicode-rs/unicode-segmentation/pull/112: #112\n\u27e811\u27e9 https://github.com/unicode-rs/unicode-segmentation/pull/107: #107\n\u27e812\u27e9 https://github.com/unicode-rs/unicode-segmentation/pull/104: #104\n\u27e813\u27e9 https://github.com/unicode-rs/unicode-segmentation/pull/75: #75\n\u27e814\u27e9 https://github.com/unicode-rs/unicode-segmentation/pull/101: #101\n\u27e815\u27e9 https://github.com/unicode-rs/unicode-segmentation/pull/100: #100\n\u27e816\u27e9 https://github.com/unicode-rs/unicode-segmentation/pull/98: #95\n\u27e817\u27e9 https://github.com/unicode-rs/unicode-segmentation/pull/94: #94\n\u27e818\u27e9 https://github.com/unicode-rs/unicode-segmentation/pull/93: #93\n\u27e819\u27e9 https://github.com/unicode-rs/unicode-segmentation/pull/92: #91\n\u27e820\u27e9 https://github.com/unicode-rs/unicode-segmentation/pull/91: #91\n\u27e821\u27e9 https://unicode-rs.github.io/unicode-segmentation/unicode_segmentation/struct.UnicodeWordIndices.html: UnicodeWordIndices\n\u27e822\u27e9 https://unicode-rs.github.io/unicode-segmentation/unicode_segmentation/trait.UnicodeSegmentation.html#tymethod.unicode_word_indices: unicode_word_indices\n\u27e823\u27e9 https://github.com/unicode-rs/unicode-segmentation/pull/87: #87\n\u27e824\u27e9 https://github.com/unicode-rs/unicode-segmentation/pull/79: #79\n\u27e825\u27e9 https://github.com/unicode-rs/unicode-segmentation/pull/77: #77\n\u27e826\u27e9 https://github.com/unicode-rs/unicode-segmentation/pull/72: #72\n\u27e827\u27e9 https://github.com/unicode-rs/unicode-segmentation/pull/68: #68\n\u27e828\u27e9 https://github.com/unicode-rs/unicode-segmentation/pull/56: #56\n\u27e829\u27e9 https://github.com/unicode-rs/unicode-segmentation/pull/24: #24\n\u27e830\u27e9 https://github.com/unicode-rs/unicode-segmentation/pull/44: #44\n\u27e831\u27e9 https://github.com/unicode-rs/unicode-segmentation/pull/37: #37\n\u27e832\u27e9 https://github.com/unicode-rs/unicode-segmentation/pull/40: #40\n\u27e833\u27e9 https://lib.rs/crates/criterion: outdated - criterion\n\u27e834\u27e9 https://lib.rs/crates/quickcheck: obsolete - quickcheck\n\u27e835\u27e9 https://lib.rs/crates/unicode-segmentation/features: Other feature\n\u27e836\u27e9 https://lib.rs/crates/unicode-segmentation/features#feature-no_std: no_std\n",
              "fit_markdown": "",
              "fit_html": ""
            },
            "structured_data": {},
            "quality_score": 3.0,
            "extraction_method": "crawl4ai",
            "error": null,
            "metadata": {
              "doc_type": "docs",
              "content_length": 6716,
              "has_structured_data": false,
              "crawl_success": true
            },
            "timestamp": "114966.4299664"
          }
        },
        "crate_analysis": {
          "status": "completed",
          "check": [
            {
              "reason": "compiler-artifact",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmp4d2siuoi/unicode-segmentation-1.12.0#unicode-segmentation@1.12.0",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp4d2siuoi\\unicode-segmentation-1.12.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "unicode_segmentation",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp4d2siuoi\\unicode-segmentation-1.12.0\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp4d2siuoi\\unicode-segmentation-1.12.0\\target\\debug\\deps\\libunicode_segmentation-4db80fe2a2b0b632.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "build-finished",
              "success": true
            }
          ],
          "clippy": [
            {
              "reason": "compiler-artifact",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmp4d2siuoi/unicode-segmentation-1.12.0#unicode-segmentation@1.12.0",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp4d2siuoi\\unicode-segmentation-1.12.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "unicode_segmentation",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp4d2siuoi\\unicode-segmentation-1.12.0\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp4d2siuoi\\unicode-segmentation-1.12.0\\target\\debug\\deps\\libunicode_segmentation-324de49bf07d88b0.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "build-finished",
              "success": true
            }
          ],
          "audit": {
            "database": {
              "advisory-count": 787,
              "last-commit": "7573f55ba337263f61167dbb0ea926cdc7c8eb5d",
              "last-updated": "2025-06-17T11:04:25+02:00"
            },
            "lockfile": {
              "dependency-count": 87
            },
            "settings": {
              "target_arch": [],
              "target_os": [],
              "severity": null,
              "ignore": [],
              "informational_warnings": [
                "unmaintained",
                "unsound",
                "notice"
              ]
            },
            "vulnerabilities": {
              "found": false,
              "count": 0,
              "list": []
            },
            "warnings": {
              "unmaintained": [
                {
                  "kind": "unmaintained",
                  "package": {
                    "name": "atty",
                    "version": "0.2.14",
                    "source": "registry+https://github.com/rust-lang/crates.io-index",
                    "checksum": "d9b39be18770d11421cdb1b9947a45dd3f37e93092cbf377614828a319d5fee8",
                    "dependencies": [
                      {
                        "name": "hermit-abi",
                        "version": "0.1.19",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "libc",
                        "version": "0.2.174",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "winapi",
                        "version": "0.3.9",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      }
                    ],
                    "replace": null
                  },
                  "advisory": {
                    "id": "RUSTSEC-2024-0375",
                    "package": "atty",
                    "title": "`atty` is unmaintained",
                    "description": "The maintainer of `atty` has [published](https://github.com/softprops/atty/commit/5bfdbe9e48c6ca6a4909e8d5b04f5e843a257e93) an official notice that the crate is no longer\nunder development, and that users should instead rely on the functionality in the standard library's [`IsTerminal`](https://doc.rust-lang.org/std/io/trait.IsTerminal.html) trait.\n\n## Alternative(s)\n\n- [std::io::IsTerminal](https://doc.rust-lang.org/stable/std/io/trait.IsTerminal.html) - Stable since Rust 1.70.0 and the recommended replacement per the `atty` maintainer.\n- [is-terminal](https://crates.io/crates/is-terminal) - Standalone crate supporting Rust older than 1.70.0",
                    "date": "2024-09-25",
                    "aliases": [],
                    "related": [],
                    "collection": "crates",
                    "categories": [],
                    "keywords": [],
                    "cvss": null,
                    "informational": "unmaintained",
                    "references": [],
                    "source": null,
                    "url": "https://github.com/softprops/atty/issues/57",
                    "withdrawn": null,
                    "license": "CC0-1.0"
                  },
                  "affected": null,
                  "versions": {
                    "patched": [],
                    "unaffected": []
                  }
                }
              ],
              "unsound": [
                {
                  "kind": "unsound",
                  "package": {
                    "name": "atty",
                    "version": "0.2.14",
                    "source": "registry+https://github.com/rust-lang/crates.io-index",
                    "checksum": "d9b39be18770d11421cdb1b9947a45dd3f37e93092cbf377614828a319d5fee8",
                    "dependencies": [
                      {
                        "name": "hermit-abi",
                        "version": "0.1.19",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "libc",
                        "version": "0.2.174",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "winapi",
                        "version": "0.3.9",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      }
                    ],
                    "replace": null
                  },
                  "advisory": {
                    "id": "RUSTSEC-2021-0145",
                    "package": "atty",
                    "title": "Potential unaligned read",
                    "description": "On windows, `atty` dereferences a potentially unaligned pointer.\n\nIn practice however, the pointer won't be unaligned unless a custom global allocator is used.\n\nIn particular, the `System` allocator on windows uses `HeapAlloc`, which guarantees a large enough alignment.\n\n# atty is Unmaintained\n\nA Pull Request with a fix has been provided over a year ago but the maintainer seems to be unreachable.\n\nLast release of `atty` was almost 3 years ago.\n\n## Possible Alternative(s)\n\nThe below list has not been vetted in any way and may or may not contain alternatives;\n\n - [std::io::IsTerminal](https://doc.rust-lang.org/stable/std/io/trait.IsTerminal.html) - Stable since Rust 1.70.0\n - [is-terminal](https://crates.io/crates/is-terminal) - Standalone crate supporting Rust older than 1.70.0",
                    "date": "2021-07-04",
                    "aliases": [
                      "GHSA-g98v-hv3f-hcfr"
                    ],
                    "related": [],
                    "collection": "crates",
                    "categories": [],
                    "keywords": [
                      "unaligned-read"
                    ],
                    "cvss": null,
                    "informational": "unsound",
                    "references": [
                      "https://github.com/softprops/atty/pull/51",
                      "https://github.com/softprops/atty/issues/57"
                    ],
                    "source": null,
                    "url": "https://github.com/softprops/atty/issues/50",
                    "withdrawn": null,
                    "license": "CC0-1.0"
                  },
                  "affected": {
                    "arch": [],
                    "os": [
                      "windows"
                    ],
                    "functions": {}
                  },
                  "versions": {
                    "patched": [],
                    "unaffected": []
                  }
                },
                {
                  "kind": "unsound",
                  "package": {
                    "name": "rand_core",
                    "version": "0.2.2",
                    "source": "registry+https://github.com/rust-lang/crates.io-index",
                    "checksum": "1961a422c4d189dfb50ffa9320bf1f2a9bd54ecb92792fb9477f99a1045f3372",
                    "dependencies": [
                      {
                        "name": "rand_core",
                        "version": "0.3.1",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      }
                    ],
                    "replace": null
                  },
                  "advisory": {
                    "id": "RUSTSEC-2019-0035",
                    "package": "rand_core",
                    "title": "Unaligned memory access",
                    "description": "Affected versions of this crate violated alignment when casting byte slices to\ninteger slices, resulting in undefined behavior.\n\nThe flaw was corrected by Ralf Jung and Diggory Hardy.",
                    "date": "2019-04-19",
                    "aliases": [
                      "GHSA-mmc9-pwm7-qj5w",
                      "CVE-2020-25576"
                    ],
                    "related": [],
                    "collection": "crates",
                    "categories": [],
                    "keywords": [],
                    "cvss": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H",
                    "informational": "unsound",
                    "references": [],
                    "source": null,
                    "url": "https://github.com/rust-random/rand/blob/master/rand_core/CHANGELOG.md#050---2019-06-06",
                    "withdrawn": null,
                    "license": "CC0-1.0"
                  },
                  "affected": {
                    "arch": [],
                    "os": [],
                    "functions": {
                      "rand_core::BlockRng::fill_bytes": [
                        "<0.4.2"
                      ],
                      "rand_core::BlockRng::next_u64": [
                        "<0.4.2"
                      ]
                    }
                  },
                  "versions": {
                    "patched": [
                      "^0.3.1",
                      ">=0.4.2"
                    ],
                    "unaffected": []
                  }
                }
              ]
            }
          },
          "note": "Crate analysis performed with stable toolchain."
        },
        "crate_metadata": {
          "name": "unicode-segmentation",
          "version": "1.12.0",
          "description": "ALLOW: Positive community sentiment",
          "repository": "",
          "keywords": [],
          "categories": [],
          "readme": {
            "raw_markdown": "[](https://docs.rs/unicode-segmentation/latest/unicode_segmentation/all.html \"show sidebar\")\n# Crate unicode_segmentationCopy item path\n[Settings](https://docs.rs/unicode-segmentation/latest/settings.html)\n[Help](https://docs.rs/unicode-segmentation/latest/help.html)\nSummary[Source](https://docs.rs/unicode-segmentation/latest/src/unicode_segmentation/lib.rs.html#11-294)\nExpand description\nIterators which split strings on Grapheme Cluster, Word or Sentence boundaries, according to the [Unicode Standard Annex #29](http://www.unicode.org/reports/tr29/) rules.\n```\nextern crate unicode_segmentation;\nuse unicode_segmentation::UnicodeSegmentation;\nfn main() {\n  let s = \"a\u0310e\u0301o\u0308\u0332\\r\\n\";\n  let g = UnicodeSegmentation::graphemes(s, true).collect::<Vec<&str>>();\n  let b: &[_] = &[\"a\u0310\", \"e\u0301\", \"o\u0308\u0332\", \"\\r\\n\"];\n  assert_eq!(g, b);\n  let s = \"The quick (\\\"brown\\\") fox can't jump 32.3 feet, right?\";\n  let w = s.unicode_words().collect::<Vec<&str>>();\n  let b: &[_] = &[\"The\", \"quick\", \"brown\", \"fox\", \"can't\", \"jump\", \"32.3\", \"feet\", \"right\"];\n  assert_eq!(w, b);\n  let s = \"The quick (\\\"brown\\\") fox\";\n  let w = s.split_word_bounds().collect::<Vec<&str>>();\n  let b: &[_] = &[\"The\", \" \", \"quick\", \" \", \"(\", \"\\\"\", \"brown\", \"\\\"\", \")\", \" \", \"fox\"];\n  assert_eq!(w, b);\n}\n```\n\n## [\u00a7](https://docs.rs/unicode-segmentation/latest/unicode_segmentation/#no_std)no_std\nunicode-segmentation does not depend on libstd, so it can be used in crates with the `#![no_std]` attribute.\n## [\u00a7](https://docs.rs/unicode-segmentation/latest/unicode_segmentation/#cratesio)crates.io\nYou can use this package in your project by adding the following to your `Cargo.toml`:\n```\n[dependencies]\nunicode-segmentation = \"1.9.0\"\n```\n\n## Structs[\u00a7](https://docs.rs/unicode-segmentation/latest/unicode_segmentation/#structs)\n\n[GraphemeCursor](https://docs.rs/unicode-segmentation/latest/unicode_segmentation/struct.GraphemeCursor.html \"struct unicode_segmentation::GraphemeCursor\")\n    Cursor-based segmenter for grapheme clusters.\n\n[GraphemeIndices](https://docs.rs/unicode-segmentation/latest/unicode_segmentation/struct.GraphemeIndices.html \"struct unicode_segmentation::GraphemeIndices\")\n    External iterator for grapheme clusters and byte offsets.\n\n[Graphemes](https://docs.rs/unicode-segmentation/latest/unicode_segmentation/struct.Graphemes.html \"struct unicode_segmentation::Graphemes\")\n    External iterator for a string\u2019s [grapheme clusters](http://www.unicode.org/reports/tr29/#Grapheme_Cluster_Boundaries).\n\n[USentenceBoundIndices](https://docs.rs/unicode-segmentation/latest/unicode_segmentation/struct.USentenceBoundIndices.html \"struct unicode_segmentation::USentenceBoundIndices\")\n    External iterator for sentence boundaries and byte offsets.\n\n[USentenceBounds](https://docs.rs/unicode-segmentation/latest/unicode_segmentation/struct.USentenceBounds.html \"struct unicode_segmentation::USentenceBounds\")\n    External iterator for a string\u2019s [sentence boundaries](http://www.unicode.org/reports/tr29/#Sentence_Boundaries).\n\n[UWordBoundIndices](https://docs.rs/unicode-segmentation/latest/unicode_segmentation/struct.UWordBoundIndices.html \"struct unicode_segmentation::UWordBoundIndices\")\n    External iterator for word boundaries and byte offsets.\n\n[UWordBounds](https://docs.rs/unicode-segmentation/latest/unicode_segmentation/struct.UWordBounds.html \"struct unicode_segmentation::UWordBounds\")\n    External iterator for a string\u2019s [word boundaries](http://www.unicode.org/reports/tr29/#Word_Boundaries).\n\n[UnicodeSentences](https://docs.rs/unicode-segmentation/latest/unicode_segmentation/struct.UnicodeSentences.html \"struct unicode_segmentation::UnicodeSentences\")\n    An iterator over the substrings of a string which, after splitting the string on [sentence boundaries](http://www.unicode.org/reports/tr29/#Sentence_Boundaries), contain any characters with the [Alphabetic](http://unicode.org/reports/tr44/#Alphabetic) property, or with [General_Category=Number](http://unicode.org/reports/tr44/#General_Category_Values).\n\n[UnicodeWordIndices](https://docs.rs/unicode-segmentation/latest/unicode_segmentation/struct.UnicodeWordIndices.html \"struct unicode_segmentation::UnicodeWordIndices\")\n    An iterator over the substrings of a string which, after splitting the string on [word boundaries](http://www.unicode.org/reports/tr29/#Word_Boundaries), contain any characters with the [Alphabetic](http://unicode.org/reports/tr44/#Alphabetic) property, or with [General_Category=Number](http://unicode.org/reports/tr44/#General_Category_Values). This iterator also provides the byte offsets for each substring.\n\n[UnicodeWords](https://docs.rs/unicode-segmentation/latest/unicode_segmentation/struct.UnicodeWords.html \"struct unicode_segmentation::UnicodeWords\")\n    An iterator over the substrings of a string which, after splitting the string on [word boundaries](http://www.unicode.org/reports/tr29/#Word_Boundaries), contain any characters with the [Alphabetic](http://unicode.org/reports/tr44/#Alphabetic) property, or with [General_Category=Number](http://unicode.org/reports/tr44/#General_Category_Values).\n## Enums[\u00a7](https://docs.rs/unicode-segmentation/latest/unicode_segmentation/#enums)\n\n[GraphemeIncomplete](https://docs.rs/unicode-segmentation/latest/unicode_segmentation/enum.GraphemeIncomplete.html \"enum unicode_segmentation::GraphemeIncomplete\")\n    An error return indicating that not enough content was available in the provided chunk to satisfy the query, and that more content must be provided.\n## Constants[\u00a7](https://docs.rs/unicode-segmentation/latest/unicode_segmentation/#constants)\n\n[UNICODE_VERSION](https://docs.rs/unicode-segmentation/latest/unicode_segmentation/constant.UNICODE_VERSION.html \"constant unicode_segmentation::UNICODE_VERSION\")\n    The version of [Unicode](http://www.unicode.org/) that this version of unicode-segmentation is based on.\n## Traits[\u00a7](https://docs.rs/unicode-segmentation/latest/unicode_segmentation/#traits)\n\n[UnicodeSegmentation](https://docs.rs/unicode-segmentation/latest/unicode_segmentation/trait.UnicodeSegmentation.html \"trait unicode_segmentation::UnicodeSegmentation\")\n    Methods for segmenting strings according to [Unicode Standard Annex #29](http://www.unicode.org/reports/tr29/).\n",
            "markdown_with_citations": "[](https://docs.rs/unicode-segmentation/latest/unicode_segmentation/all.html \"show sidebar\")\n# Crate unicode_segmentationCopy item path\nSettings\u27e81\u27e9\nHelp\u27e82\u27e9\nSummarySource\u27e83\u27e9\nExpand description\nIterators which split strings on Grapheme Cluster, Word or Sentence boundaries, according to the Unicode Standard Annex #29\u27e84\u27e9 rules.\n```\nextern crate unicode_segmentation;\nuse unicode_segmentation::UnicodeSegmentation;\nfn main() {\n  let s = \"a\u0310e\u0301o\u0308\u0332\\r\\n\";\n  let g = UnicodeSegmentation::graphemes(s, true).collect::<Vec<&str>>();\n  let b: &[_] = &[\"a\u0310\", \"e\u0301\", \"o\u0308\u0332\", \"\\r\\n\"];\n  assert_eq!(g, b);\n  let s = \"The quick (\\\"brown\\\") fox can't jump 32.3 feet, right?\";\n  let w = s.unicode_words().collect::<Vec<&str>>();\n  let b: &[_] = &[\"The\", \"quick\", \"brown\", \"fox\", \"can't\", \"jump\", \"32.3\", \"feet\", \"right\"];\n  assert_eq!(w, b);\n  let s = \"The quick (\\\"brown\\\") fox\";\n  let w = s.split_word_bounds().collect::<Vec<&str>>();\n  let b: &[_] = &[\"The\", \" \", \"quick\", \" \", \"(\", \"\\\"\", \"brown\", \"\\\"\", \")\", \" \", \"fox\"];\n  assert_eq!(w, b);\n}\n```\n\n## \u00a7\u27e85\u27e9no_std\nunicode-segmentation does not depend on libstd, so it can be used in crates with the `#![no_std]` attribute.\n## \u00a7\u27e86\u27e9crates.io\nYou can use this package in your project by adding the following to your `Cargo.toml`:\n```\n[dependencies]\nunicode-segmentation = \"1.9.0\"\n```\n\n## Structs\u00a7\u27e87\u27e9\n\nGraphemeCursor\u27e88\u27e9\n    Cursor-based segmenter for grapheme clusters.\n\nGraphemeIndices\u27e89\u27e9\n    External iterator for grapheme clusters and byte offsets.\n\nGraphemes\u27e810\u27e9\n    External iterator for a string\u2019s grapheme clusters\u27e811\u27e9.\n\nUSentenceBoundIndices\u27e812\u27e9\n    External iterator for sentence boundaries and byte offsets.\n\nUSentenceBounds\u27e813\u27e9\n    External iterator for a string\u2019s sentence boundaries\u27e814\u27e9.\n\nUWordBoundIndices\u27e815\u27e9\n    External iterator for word boundaries and byte offsets.\n\nUWordBounds\u27e816\u27e9\n    External iterator for a string\u2019s word boundaries\u27e817\u27e9.\n\nUnicodeSentences\u27e818\u27e9\n    An iterator over the substrings of a string which, after splitting the string on sentence boundaries\u27e814\u27e9, contain any characters with the Alphabetic\u27e819\u27e9 property, or with General_Category=Number\u27e820\u27e9.\n\nUnicodeWordIndices\u27e821\u27e9\n    An iterator over the substrings of a string which, after splitting the string on word boundaries\u27e817\u27e9, contain any characters with the Alphabetic\u27e819\u27e9 property, or with General_Category=Number\u27e820\u27e9. This iterator also provides the byte offsets for each substring.\n\nUnicodeWords\u27e822\u27e9\n    An iterator over the substrings of a string which, after splitting the string on word boundaries\u27e817\u27e9, contain any characters with the Alphabetic\u27e819\u27e9 property, or with General_Category=Number\u27e820\u27e9.\n## Enums\u00a7\u27e823\u27e9\n\nGraphemeIncomplete\u27e824\u27e9\n    An error return indicating that not enough content was available in the provided chunk to satisfy the query, and that more content must be provided.\n## Constants\u00a7\u27e825\u27e9\n\nUNICODE_VERSION\u27e826\u27e9\n    The version of Unicode\u27e827\u27e9 that this version of unicode-segmentation is based on.\n## Traits\u00a7\u27e828\u27e9\n\nUnicodeSegmentation\u27e829\u27e9\n    Methods for segmenting strings according to Unicode Standard Annex #29\u27e84\u27e9.\n",
            "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://docs.rs/unicode-segmentation/latest/settings.html: Settings\n\u27e82\u27e9 https://docs.rs/unicode-segmentation/latest/help.html: Help\n\u27e83\u27e9 https://docs.rs/unicode-segmentation/latest/src/unicode_segmentation/lib.rs.html#11-294: Source\n\u27e84\u27e9 http://www.unicode.org/reports/tr29/: Unicode Standard Annex #29\n\u27e85\u27e9 https://docs.rs/unicode-segmentation/latest/unicode_segmentation/#no_std: \u00a7\n\u27e86\u27e9 https://docs.rs/unicode-segmentation/latest/unicode_segmentation/#cratesio: \u00a7\n\u27e87\u27e9 https://docs.rs/unicode-segmentation/latest/unicode_segmentation/#structs: \u00a7\n\u27e88\u27e9 https://docs.rs/unicode-segmentation/latest/unicode_segmentation/struct.GraphemeCursor.html: struct unicode_segmentation::GraphemeCursor - GraphemeCursor\n\u27e89\u27e9 https://docs.rs/unicode-segmentation/latest/unicode_segmentation/struct.GraphemeIndices.html: struct unicode_segmentation::GraphemeIndices - GraphemeIndices\n\u27e810\u27e9 https://docs.rs/unicode-segmentation/latest/unicode_segmentation/struct.Graphemes.html: struct unicode_segmentation::Graphemes - Graphemes\n\u27e811\u27e9 http://www.unicode.org/reports/tr29/#Grapheme_Cluster_Boundaries: grapheme clusters\n\u27e812\u27e9 https://docs.rs/unicode-segmentation/latest/unicode_segmentation/struct.USentenceBoundIndices.html: struct unicode_segmentation::USentenceBoundIndices - USentenceBoundIndices\n\u27e813\u27e9 https://docs.rs/unicode-segmentation/latest/unicode_segmentation/struct.USentenceBounds.html: struct unicode_segmentation::USentenceBounds - USentenceBounds\n\u27e814\u27e9 http://www.unicode.org/reports/tr29/#Sentence_Boundaries: sentence boundaries\n\u27e815\u27e9 https://docs.rs/unicode-segmentation/latest/unicode_segmentation/struct.UWordBoundIndices.html: struct unicode_segmentation::UWordBoundIndices - UWordBoundIndices\n\u27e816\u27e9 https://docs.rs/unicode-segmentation/latest/unicode_segmentation/struct.UWordBounds.html: struct unicode_segmentation::UWordBounds - UWordBounds\n\u27e817\u27e9 http://www.unicode.org/reports/tr29/#Word_Boundaries: word boundaries\n\u27e818\u27e9 https://docs.rs/unicode-segmentation/latest/unicode_segmentation/struct.UnicodeSentences.html: struct unicode_segmentation::UnicodeSentences - UnicodeSentences\n\u27e819\u27e9 http://unicode.org/reports/tr44/#Alphabetic: Alphabetic\n\u27e820\u27e9 http://unicode.org/reports/tr44/#General_Category_Values: General_Category=Number\n\u27e821\u27e9 https://docs.rs/unicode-segmentation/latest/unicode_segmentation/struct.UnicodeWordIndices.html: struct unicode_segmentation::UnicodeWordIndices - UnicodeWordIndices\n\u27e822\u27e9 https://docs.rs/unicode-segmentation/latest/unicode_segmentation/struct.UnicodeWords.html: struct unicode_segmentation::UnicodeWords - UnicodeWords\n\u27e823\u27e9 https://docs.rs/unicode-segmentation/latest/unicode_segmentation/#enums: \u00a7\n\u27e824\u27e9 https://docs.rs/unicode-segmentation/latest/unicode_segmentation/enum.GraphemeIncomplete.html: enum unicode_segmentation::GraphemeIncomplete - GraphemeIncomplete\n\u27e825\u27e9 https://docs.rs/unicode-segmentation/latest/unicode_segmentation/#constants: \u00a7\n\u27e826\u27e9 https://docs.rs/unicode-segmentation/latest/unicode_segmentation/constant.UNICODE_VERSION.html: constant unicode_segmentation::UNICODE_VERSION - UNICODE_VERSION\n\u27e827\u27e9 http://www.unicode.org/: Unicode\n\u27e828\u27e9 https://docs.rs/unicode-segmentation/latest/unicode_segmentation/#traits: \u00a7\n\u27e829\u27e9 https://docs.rs/unicode-segmentation/latest/unicode_segmentation/trait.UnicodeSegmentation.html: trait unicode_segmentation::UnicodeSegmentation - UnicodeSegmentation\n",
            "fit_markdown": "",
            "fit_html": ""
          },
          "downloads": 0,
          "github_stars": 0,
          "dependencies": [],
          "features": {},
          "code_snippets": [],
          "readme_sections": {},
          "librs_downloads": null,
          "source": "crates.io",
          "enhanced_scraping": {},
          "enhanced_features": [],
          "enhanced_dependencies": []
        },
        "enriched_crate": {
          "name": "unicode-segmentation",
          "version": "1.12.0",
          "description": "ALLOW: Positive community sentiment",
          "repository": "",
          "keywords": [],
          "categories": [],
          "readme": {
            "raw_markdown": "[](https://docs.rs/unicode-segmentation/latest/unicode_segmentation/all.html \"show sidebar\")\n# Crate unicode_segmentationCopy item path\n[Settings](https://docs.rs/unicode-segmentation/latest/settings.html)\n[Help](https://docs.rs/unicode-segmentation/latest/help.html)\nSummary[Source](https://docs.rs/unicode-segmentation/latest/src/unicode_segmentation/lib.rs.html#11-294)\nExpand description\nIterators which split strings on Grapheme Cluster, Word or Sentence boundaries, according to the [Unicode Standard Annex #29](http://www.unicode.org/reports/tr29/) rules.\n```\nextern crate unicode_segmentation;\nuse unicode_segmentation::UnicodeSegmentation;\nfn main() {\n  let s = \"a\u0310e\u0301o\u0308\u0332\\r\\n\";\n  let g = UnicodeSegmentation::graphemes(s, true).collect::<Vec<&str>>();\n  let b: &[_] = &[\"a\u0310\", \"e\u0301\", \"o\u0308\u0332\", \"\\r\\n\"];\n  assert_eq!(g, b);\n  let s = \"The quick (\\\"brown\\\") fox can't jump 32.3 feet, right?\";\n  let w = s.unicode_words().collect::<Vec<&str>>();\n  let b: &[_] = &[\"The\", \"quick\", \"brown\", \"fox\", \"can't\", \"jump\", \"32.3\", \"feet\", \"right\"];\n  assert_eq!(w, b);\n  let s = \"The quick (\\\"brown\\\") fox\";\n  let w = s.split_word_bounds().collect::<Vec<&str>>();\n  let b: &[_] = &[\"The\", \" \", \"quick\", \" \", \"(\", \"\\\"\", \"brown\", \"\\\"\", \")\", \" \", \"fox\"];\n  assert_eq!(w, b);\n}\n```\n\n## [\u00a7](https://docs.rs/unicode-segmentation/latest/unicode_segmentation/#no_std)no_std\nunicode-segmentation does not depend on libstd, so it can be used in crates with the `#![no_std]` attribute.\n## [\u00a7](https://docs.rs/unicode-segmentation/latest/unicode_segmentation/#cratesio)crates.io\nYou can use this package in your project by adding the following to your `Cargo.toml`:\n```\n[dependencies]\nunicode-segmentation = \"1.9.0\"\n```\n\n## Structs[\u00a7](https://docs.rs/unicode-segmentation/latest/unicode_segmentation/#structs)\n\n[GraphemeCursor](https://docs.rs/unicode-segmentation/latest/unicode_segmentation/struct.GraphemeCursor.html \"struct unicode_segmentation::GraphemeCursor\")\n    Cursor-based segmenter for grapheme clusters.\n\n[GraphemeIndices](https://docs.rs/unicode-segmentation/latest/unicode_segmentation/struct.GraphemeIndices.html \"struct unicode_segmentation::GraphemeIndices\")\n    External iterator for grapheme clusters and byte offsets.\n\n[Graphemes](https://docs.rs/unicode-segmentation/latest/unicode_segmentation/struct.Graphemes.html \"struct unicode_segmentation::Graphemes\")\n    External iterator for a string\u2019s [grapheme clusters](http://www.unicode.org/reports/tr29/#Grapheme_Cluster_Boundaries).\n\n[USentenceBoundIndices](https://docs.rs/unicode-segmentation/latest/unicode_segmentation/struct.USentenceBoundIndices.html \"struct unicode_segmentation::USentenceBoundIndices\")\n    External iterator for sentence boundaries and byte offsets.\n\n[USentenceBounds](https://docs.rs/unicode-segmentation/latest/unicode_segmentation/struct.USentenceBounds.html \"struct unicode_segmentation::USentenceBounds\")\n    External iterator for a string\u2019s [sentence boundaries](http://www.unicode.org/reports/tr29/#Sentence_Boundaries).\n\n[UWordBoundIndices](https://docs.rs/unicode-segmentation/latest/unicode_segmentation/struct.UWordBoundIndices.html \"struct unicode_segmentation::UWordBoundIndices\")\n    External iterator for word boundaries and byte offsets.\n\n[UWordBounds](https://docs.rs/unicode-segmentation/latest/unicode_segmentation/struct.UWordBounds.html \"struct unicode_segmentation::UWordBounds\")\n    External iterator for a string\u2019s [word boundaries](http://www.unicode.org/reports/tr29/#Word_Boundaries).\n\n[UnicodeSentences](https://docs.rs/unicode-segmentation/latest/unicode_segmentation/struct.UnicodeSentences.html \"struct unicode_segmentation::UnicodeSentences\")\n    An iterator over the substrings of a string which, after splitting the string on [sentence boundaries](http://www.unicode.org/reports/tr29/#Sentence_Boundaries), contain any characters with the [Alphabetic](http://unicode.org/reports/tr44/#Alphabetic) property, or with [General_Category=Number](http://unicode.org/reports/tr44/#General_Category_Values).\n\n[UnicodeWordIndices](https://docs.rs/unicode-segmentation/latest/unicode_segmentation/struct.UnicodeWordIndices.html \"struct unicode_segmentation::UnicodeWordIndices\")\n    An iterator over the substrings of a string which, after splitting the string on [word boundaries](http://www.unicode.org/reports/tr29/#Word_Boundaries), contain any characters with the [Alphabetic](http://unicode.org/reports/tr44/#Alphabetic) property, or with [General_Category=Number](http://unicode.org/reports/tr44/#General_Category_Values). This iterator also provides the byte offsets for each substring.\n\n[UnicodeWords](https://docs.rs/unicode-segmentation/latest/unicode_segmentation/struct.UnicodeWords.html \"struct unicode_segmentation::UnicodeWords\")\n    An iterator over the substrings of a string which, after splitting the string on [word boundaries](http://www.unicode.org/reports/tr29/#Word_Boundaries), contain any characters with the [Alphabetic](http://unicode.org/reports/tr44/#Alphabetic) property, or with [General_Category=Number](http://unicode.org/reports/tr44/#General_Category_Values).\n## Enums[\u00a7](https://docs.rs/unicode-segmentation/latest/unicode_segmentation/#enums)\n\n[GraphemeIncomplete](https://docs.rs/unicode-segmentation/latest/unicode_segmentation/enum.GraphemeIncomplete.html \"enum unicode_segmentation::GraphemeIncomplete\")\n    An error return indicating that not enough content was available in the provided chunk to satisfy the query, and that more content must be provided.\n## Constants[\u00a7](https://docs.rs/unicode-segmentation/latest/unicode_segmentation/#constants)\n\n[UNICODE_VERSION](https://docs.rs/unicode-segmentation/latest/unicode_segmentation/constant.UNICODE_VERSION.html \"constant unicode_segmentation::UNICODE_VERSION\")\n    The version of [Unicode](http://www.unicode.org/) that this version of unicode-segmentation is based on.\n## Traits[\u00a7](https://docs.rs/unicode-segmentation/latest/unicode_segmentation/#traits)\n\n[UnicodeSegmentation](https://docs.rs/unicode-segmentation/latest/unicode_segmentation/trait.UnicodeSegmentation.html \"trait unicode_segmentation::UnicodeSegmentation\")\n    Methods for segmenting strings according to [Unicode Standard Annex #29](http://www.unicode.org/reports/tr29/).\n",
            "markdown_with_citations": "[](https://docs.rs/unicode-segmentation/latest/unicode_segmentation/all.html \"show sidebar\")\n# Crate unicode_segmentationCopy item path\nSettings\u27e81\u27e9\nHelp\u27e82\u27e9\nSummarySource\u27e83\u27e9\nExpand description\nIterators which split strings on Grapheme Cluster, Word or Sentence boundaries, according to the Unicode Standard Annex #29\u27e84\u27e9 rules.\n```\nextern crate unicode_segmentation;\nuse unicode_segmentation::UnicodeSegmentation;\nfn main() {\n  let s = \"a\u0310e\u0301o\u0308\u0332\\r\\n\";\n  let g = UnicodeSegmentation::graphemes(s, true).collect::<Vec<&str>>();\n  let b: &[_] = &[\"a\u0310\", \"e\u0301\", \"o\u0308\u0332\", \"\\r\\n\"];\n  assert_eq!(g, b);\n  let s = \"The quick (\\\"brown\\\") fox can't jump 32.3 feet, right?\";\n  let w = s.unicode_words().collect::<Vec<&str>>();\n  let b: &[_] = &[\"The\", \"quick\", \"brown\", \"fox\", \"can't\", \"jump\", \"32.3\", \"feet\", \"right\"];\n  assert_eq!(w, b);\n  let s = \"The quick (\\\"brown\\\") fox\";\n  let w = s.split_word_bounds().collect::<Vec<&str>>();\n  let b: &[_] = &[\"The\", \" \", \"quick\", \" \", \"(\", \"\\\"\", \"brown\", \"\\\"\", \")\", \" \", \"fox\"];\n  assert_eq!(w, b);\n}\n```\n\n## \u00a7\u27e85\u27e9no_std\nunicode-segmentation does not depend on libstd, so it can be used in crates with the `#![no_std]` attribute.\n## \u00a7\u27e86\u27e9crates.io\nYou can use this package in your project by adding the following to your `Cargo.toml`:\n```\n[dependencies]\nunicode-segmentation = \"1.9.0\"\n```\n\n## Structs\u00a7\u27e87\u27e9\n\nGraphemeCursor\u27e88\u27e9\n    Cursor-based segmenter for grapheme clusters.\n\nGraphemeIndices\u27e89\u27e9\n    External iterator for grapheme clusters and byte offsets.\n\nGraphemes\u27e810\u27e9\n    External iterator for a string\u2019s grapheme clusters\u27e811\u27e9.\n\nUSentenceBoundIndices\u27e812\u27e9\n    External iterator for sentence boundaries and byte offsets.\n\nUSentenceBounds\u27e813\u27e9\n    External iterator for a string\u2019s sentence boundaries\u27e814\u27e9.\n\nUWordBoundIndices\u27e815\u27e9\n    External iterator for word boundaries and byte offsets.\n\nUWordBounds\u27e816\u27e9\n    External iterator for a string\u2019s word boundaries\u27e817\u27e9.\n\nUnicodeSentences\u27e818\u27e9\n    An iterator over the substrings of a string which, after splitting the string on sentence boundaries\u27e814\u27e9, contain any characters with the Alphabetic\u27e819\u27e9 property, or with General_Category=Number\u27e820\u27e9.\n\nUnicodeWordIndices\u27e821\u27e9\n    An iterator over the substrings of a string which, after splitting the string on word boundaries\u27e817\u27e9, contain any characters with the Alphabetic\u27e819\u27e9 property, or with General_Category=Number\u27e820\u27e9. This iterator also provides the byte offsets for each substring.\n\nUnicodeWords\u27e822\u27e9\n    An iterator over the substrings of a string which, after splitting the string on word boundaries\u27e817\u27e9, contain any characters with the Alphabetic\u27e819\u27e9 property, or with General_Category=Number\u27e820\u27e9.\n## Enums\u00a7\u27e823\u27e9\n\nGraphemeIncomplete\u27e824\u27e9\n    An error return indicating that not enough content was available in the provided chunk to satisfy the query, and that more content must be provided.\n## Constants\u00a7\u27e825\u27e9\n\nUNICODE_VERSION\u27e826\u27e9\n    The version of Unicode\u27e827\u27e9 that this version of unicode-segmentation is based on.\n## Traits\u00a7\u27e828\u27e9\n\nUnicodeSegmentation\u27e829\u27e9\n    Methods for segmenting strings according to Unicode Standard Annex #29\u27e84\u27e9.\n",
            "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://docs.rs/unicode-segmentation/latest/settings.html: Settings\n\u27e82\u27e9 https://docs.rs/unicode-segmentation/latest/help.html: Help\n\u27e83\u27e9 https://docs.rs/unicode-segmentation/latest/src/unicode_segmentation/lib.rs.html#11-294: Source\n\u27e84\u27e9 http://www.unicode.org/reports/tr29/: Unicode Standard Annex #29\n\u27e85\u27e9 https://docs.rs/unicode-segmentation/latest/unicode_segmentation/#no_std: \u00a7\n\u27e86\u27e9 https://docs.rs/unicode-segmentation/latest/unicode_segmentation/#cratesio: \u00a7\n\u27e87\u27e9 https://docs.rs/unicode-segmentation/latest/unicode_segmentation/#structs: \u00a7\n\u27e88\u27e9 https://docs.rs/unicode-segmentation/latest/unicode_segmentation/struct.GraphemeCursor.html: struct unicode_segmentation::GraphemeCursor - GraphemeCursor\n\u27e89\u27e9 https://docs.rs/unicode-segmentation/latest/unicode_segmentation/struct.GraphemeIndices.html: struct unicode_segmentation::GraphemeIndices - GraphemeIndices\n\u27e810\u27e9 https://docs.rs/unicode-segmentation/latest/unicode_segmentation/struct.Graphemes.html: struct unicode_segmentation::Graphemes - Graphemes\n\u27e811\u27e9 http://www.unicode.org/reports/tr29/#Grapheme_Cluster_Boundaries: grapheme clusters\n\u27e812\u27e9 https://docs.rs/unicode-segmentation/latest/unicode_segmentation/struct.USentenceBoundIndices.html: struct unicode_segmentation::USentenceBoundIndices - USentenceBoundIndices\n\u27e813\u27e9 https://docs.rs/unicode-segmentation/latest/unicode_segmentation/struct.USentenceBounds.html: struct unicode_segmentation::USentenceBounds - USentenceBounds\n\u27e814\u27e9 http://www.unicode.org/reports/tr29/#Sentence_Boundaries: sentence boundaries\n\u27e815\u27e9 https://docs.rs/unicode-segmentation/latest/unicode_segmentation/struct.UWordBoundIndices.html: struct unicode_segmentation::UWordBoundIndices - UWordBoundIndices\n\u27e816\u27e9 https://docs.rs/unicode-segmentation/latest/unicode_segmentation/struct.UWordBounds.html: struct unicode_segmentation::UWordBounds - UWordBounds\n\u27e817\u27e9 http://www.unicode.org/reports/tr29/#Word_Boundaries: word boundaries\n\u27e818\u27e9 https://docs.rs/unicode-segmentation/latest/unicode_segmentation/struct.UnicodeSentences.html: struct unicode_segmentation::UnicodeSentences - UnicodeSentences\n\u27e819\u27e9 http://unicode.org/reports/tr44/#Alphabetic: Alphabetic\n\u27e820\u27e9 http://unicode.org/reports/tr44/#General_Category_Values: General_Category=Number\n\u27e821\u27e9 https://docs.rs/unicode-segmentation/latest/unicode_segmentation/struct.UnicodeWordIndices.html: struct unicode_segmentation::UnicodeWordIndices - UnicodeWordIndices\n\u27e822\u27e9 https://docs.rs/unicode-segmentation/latest/unicode_segmentation/struct.UnicodeWords.html: struct unicode_segmentation::UnicodeWords - UnicodeWords\n\u27e823\u27e9 https://docs.rs/unicode-segmentation/latest/unicode_segmentation/#enums: \u00a7\n\u27e824\u27e9 https://docs.rs/unicode-segmentation/latest/unicode_segmentation/enum.GraphemeIncomplete.html: enum unicode_segmentation::GraphemeIncomplete - GraphemeIncomplete\n\u27e825\u27e9 https://docs.rs/unicode-segmentation/latest/unicode_segmentation/#constants: \u00a7\n\u27e826\u27e9 https://docs.rs/unicode-segmentation/latest/unicode_segmentation/constant.UNICODE_VERSION.html: constant unicode_segmentation::UNICODE_VERSION - UNICODE_VERSION\n\u27e827\u27e9 http://www.unicode.org/: Unicode\n\u27e828\u27e9 https://docs.rs/unicode-segmentation/latest/unicode_segmentation/#traits: \u00a7\n\u27e829\u27e9 https://docs.rs/unicode-segmentation/latest/unicode_segmentation/trait.UnicodeSegmentation.html: trait unicode_segmentation::UnicodeSegmentation - UnicodeSegmentation\n",
            "fit_markdown": "",
            "fit_html": ""
          },
          "downloads": 0,
          "github_stars": 0,
          "dependencies": [],
          "features": {},
          "code_snippets": [],
          "readme_sections": {},
          "librs_downloads": null,
          "source": "crates.io",
          "enhanced_scraping": {},
          "enhanced_features": [],
          "enhanced_dependencies": [],
          "readme_summary": "The `unicode-segmentation` crate provides iterators for splitting strings into grapheme clusters, words, and sentences based on Unicode Standard Annex #29 rules. It supports `#![no_std]` environments and includes utilities like `UnicodeSegmentation` traits and structs for precise segmentation with byte offsets. This crate is ideal for handling complex Unicode text processing in a standards-compliant manner.",
          "feature_summary": null,
          "use_case": "Utilities",
          "score": 8.0,
          "factual_counterfactual": "### Pair 1: Grapheme Cluster Iteration  \n\u2705 Factual: The `unicode-segmentation` crate provides an iterator, `Graphemes`, to split a string into Unicode grapheme clusters, ensuring compliance with [Unicode Standard Annex #29](http://www.unicode.org/reports/tr29/) rules.  \n\u274c Counterfactual: The `unicode-segmentation` crate splits strings into grapheme clusters using ASCII-based rules, which do not account for complex Unicode characters like combining marks.  \n\n---\n\n### Pair 2: `no_std` Compatibility  \n\u2705 Factual: The `unicode-segmentation` crate is `no_std` compatible, allowing it to be used in embedded systems or other environments where the Rust standard library is unavailable.  \n\u274c Counterfactual: The `unicode-segmentation` crate requires the Rust standard library (`libstd`) and cannot be used in `no_std` environments.  \n\n---\n\n### Pair 3: Word Boundary Splitting  \n\u2705 Factual: The crate's `UnicodeWords` iterator splits strings into substrings containing alphabetic characters or numbers, adhering to Unicode word boundary rules.  \n\u274c Counterfactual: The `UnicodeWords` iterator splits strings into substrings based on whitespace characters only, ignoring Unicode word boundary rules.",
          "source_analysis": null,
          "user_behavior": null,
          "security": null
        }
      },
      "irl_score": 8.6,
      "execution_id": "exec-e04b8f35-c0f49bc4-1751261175",
      "timestamp": "2025-06-30T05:26:15.348810+00:00",
      "canon_version": "1.3.0"
    },
    "rule_zero_compliant": true
  }
]