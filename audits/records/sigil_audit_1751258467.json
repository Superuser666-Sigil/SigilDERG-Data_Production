[
  {
    "execution_id": "exec-591d77b5-0a5e0f81-1751258452",
    "timestamp": "2025-06-30T04:40:52.106415+00:00",
    "sacred_chain": {
      "input_data": "futures",
      "context_sources": [
        "crates.io",
        "github.com",
        "lib.rs",
        "docs.rs"
      ],
      "reasoning_steps": [
        "Input canonicalized: 'futures' -> 'futures'",
        "Context gathered from 4 validated sources",
        "Metadata extracted: 4 fields",
        "Documentation analyzed: quality 7.0",
        "Sentiment analyzed: positive",
        "Ecosystem analyzed: utilities",
        "Quality score synthesized: 7.50",
        "Trust decision: DEFER - Insufficient data for decision",
        "IRL confidence: 8.600"
      ],
      "suggestion": "ALLOW: Positive community sentiment",
      "verdict": "DEFER",
      "audit_info": {
        "metadata": {
          "name": "futures",
          "type": "rust_crate",
          "source": "manual_input",
          "extraction_method": "irl_engine"
        },
        "sentiment": {
          "quality_score": 7.0,
          "completeness": 0.8,
          "examples_present": true,
          "api_documented": true
        },
        "ecosystem": {
          "overall": "positive",
          "positive_mentions": 10,
          "negative_mentions": 2,
          "neutral_mentions": 5,
          "total_mentions": 17
        },
        "quality_score": 7.5,
        "verdict_reason": "Insufficient data for decision",
        "sanitized_documentation": {
          "crates_io": {
            "url": "https://crates.io/crates/futures",
            "title": "futures v0.3.31",
            "content": {
              "raw_markdown": "#  futures v0.3.31\nAn implementation of futures and streams featuring zero allocations, composability, and iterator-like interfaces. \n  * [ #async ](https://crates.io/keywords/async)\n  * [ #future ](https://crates.io/keywords/future)\n  * [ #futures ](https://crates.io/keywords/futures)\n\n\n  * [ Readme ](https://crates.io/crates/futures)\n  * [ 72 Versions ](https://crates.io/crates/futures/versions)\n  * [ Dependencies ](https://crates.io/crates/futures/dependencies)\n  * [ Dependents ](https://crates.io/crates/futures/reverse_dependencies)\n\n\n## Metadata\n9 months ago \nv1.56.0 \n[ MIT ](https://choosealicense.com/licenses/mit) OR [ Apache-2.0 ](https://choosealicense.com/licenses/apache-2.0)\n53.7 KiB \n## Install\nRun the following Cargo command in your project directory:\ncargo add futures\nOr add the following line to your Cargo.toml:\nfutures = \"0.3.31\"\n## Homepage\n[ rust-lang.github.io/futures-rs ](https://rust-lang.github.io/futures-rs)\n## Repository\n[ github.com/rust-lang/futures-rs ](https://github.com/rust-lang/futures-rs)\n## Owners\n## Categories\n  * [Asynchronous](https://crates.io/categories/asynchronous)\n\n\n[ Report crate ](https://crates.io/support?crate=futures&inquire=crate-violation)\n### Stats Overview\n297,965,769 Downloads all time\n72 Versions published\n#### Downloads over the last 90 days\nDisplay as \nStacked \n  * Stacked \n  * Unstacked \n\n\nLoading\u2026\n",
              "markdown_with_citations": "#  futures v0.3.31\nAn implementation of futures and streams featuring zero allocations, composability, and iterator-like interfaces. \n  *  #async \u27e81\u27e9\n  *  #future \u27e82\u27e9\n  *  #futures \u27e83\u27e9\n\n\n  *  Readme \u27e84\u27e9\n  *  72 Versions \u27e85\u27e9\n  *  Dependencies \u27e86\u27e9\n  *  Dependents \u27e87\u27e9\n\n\n## Metadata\n9 months ago \nv1.56.0 \n MIT \u27e88\u27e9 OR  Apache-2.0 \u27e89\u27e9\n53.7 KiB \n## Install\nRun the following Cargo command in your project directory:\ncargo add futures\nOr add the following line to your Cargo.toml:\nfutures = \"0.3.31\"\n## Homepage\n rust-lang.github.io/futures-rs \u27e810\u27e9\n## Repository\n github.com/rust-lang/futures-rs \u27e811\u27e9\n## Owners\n## Categories\n  * Asynchronous\u27e812\u27e9\n\n\n Report crate \u27e813\u27e9\n### Stats Overview\n297,965,769 Downloads all time\n72 Versions published\n#### Downloads over the last 90 days\nDisplay as \nStacked \n  * Stacked \n  * Unstacked \n\n\nLoading\u2026\n",
              "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://crates.io/keywords/async:  #async \n\u27e82\u27e9 https://crates.io/keywords/future:  #future \n\u27e83\u27e9 https://crates.io/keywords/futures:  #futures \n\u27e84\u27e9 https://crates.io/crates/futures:  Readme \n\u27e85\u27e9 https://crates.io/crates/futures/versions:  72 Versions \n\u27e86\u27e9 https://crates.io/crates/futures/dependencies:  Dependencies \n\u27e87\u27e9 https://crates.io/crates/futures/reverse_dependencies:  Dependents \n\u27e88\u27e9 https://choosealicense.com/licenses/mit:  MIT \n\u27e89\u27e9 https://choosealicense.com/licenses/apache-2.0:  Apache-2.0 \n\u27e810\u27e9 https://rust-lang.github.io/futures-rs:  rust-lang.github.io/futures-rs \n\u27e811\u27e9 https://github.com/rust-lang/futures-rs:  github.com/rust-lang/futures-rs \n\u27e812\u27e9 https://crates.io/categories/asynchronous: Asynchronous\n\u27e813\u27e9 https://crates.io/support?crate=futures&inquire=crate-violation:  Report crate \n",
              "fit_markdown": "",
              "fit_html": ""
            },
            "structured_data": {},
            "quality_score": 3.0,
            "extraction_method": "crawl4ai",
            "error": null,
            "metadata": {
              "doc_type": "docs",
              "content_length": 1375,
              "has_structured_data": false,
              "crawl_success": true
            },
            "timestamp": "112242.216206"
          },
          "docs_rs": {
            "url": "https://docs.rs/futures",
            "title": "Crate futuresCopy item path",
            "content": {
              "raw_markdown": "[](https://docs.rs/futures/latest/futures/all.html \"show sidebar\")\n# Crate futuresCopy item path\n[Settings](https://docs.rs/futures/latest/settings.html)\n[Help](https://docs.rs/futures/latest/help.html)\nSummary[Source](https://docs.rs/futures/latest/src/futures/lib.rs.html#1-254)\nExpand description\nAbstractions for asynchronous programming.\nThis crate provides a number of core abstractions for writing asynchronous code:\n  * [Futures](https://docs.rs/futures/latest/futures/future/index.html \"mod futures::future\") are single eventual values produced by asynchronous computations. Some programming languages (e.g. JavaScript) call this concept \u201cpromise\u201d.\n  * [Streams](https://docs.rs/futures/latest/futures/stream/index.html \"mod futures::stream\") represent a series of values produced asynchronously.\n  * [Sinks](https://docs.rs/futures/latest/futures/sink/index.html \"mod futures::sink\") provide support for asynchronous writing of data.\n  * [Executors](https://docs.rs/futures/latest/futures/executor/index.html \"mod futures::executor\") are responsible for running asynchronous tasks.\n\n\nThe crate also contains abstractions for [asynchronous I/O](https://docs.rs/futures/latest/futures/io/index.html \"mod futures::io\") and [cross-task communication](https://docs.rs/futures/latest/futures/channel/index.html \"mod futures::channel\").\nUnderlying all of this is the _task system_ , which is a form of lightweight threading. Large asynchronous computations are built up using futures, streams and sinks, and then spawned as independent tasks that are run to completion, but _do not block_ the thread running them.\nThe following example describes how the task system context is built and used within macros and keywords such as async and await!.\n```\nfn main() {\n  let pool = ThreadPool::new().expect(\"Failed to build pool\");\n  let (tx, rx) = mpsc::unbounded::<i32>();\n  // Create a future by an async block, where async is responsible for an\n  // implementation of Future. At this point no executor has been provided\n  // to this future, so it will not be running.\n  let fut_values = async {\n    // Create another async block, again where the Future implementation\n    // is generated by async. Since this is inside of a parent async block,\n    // it will be provided with the executor of the parent block when the parent\n    // block is executed.\n    //\n    // This executor chaining is done by Future::poll whose second argument\n    // is a std::task::Context. This represents our executor, and the Future\n    // implemented by this async block can be polled using the parent async\n    // block's executor.\n    let fut_tx_result = async move {\n      (0..100).for_each(|v| {\n        tx.unbounded_send(v).expect(\"Failed to send\");\n      })\n    };\n    // Use the provided thread pool to spawn the generated future\n    // responsible for transmission\n    pool.spawn_ok(fut_tx_result);\n    let fut_values = rx\n      .map(|v| v * 2)\n      .collect();\n    // Use the executor provided to this async block to wait for the\n    // future to complete.\n    fut_values.await\n  };\n  // Actually execute the above future, which will invoke Future::poll and\n  // subsequently chain appropriate Future::poll and methods needing executors\n  // to drive all futures. Eventually fut_values will be driven to completion.\n  let values: Vec<i32> = executor::block_on(fut_values);\n  println!(\"Values={:?}\", values);\n}\n```\n\nThe majority of examples and code snippets in this crate assume that they are inside an async block as written above.\n## Re-exports[\u00a7](https://docs.rs/futures/latest/futures/#reexports)\n\n`pub use futures_core::future::Future[](https://docs.rs/futures/latest/futures/prelude/trait.Future.html \"trait futures::prelude::Future\");`\n\n\n`pub use futures_core::future::TryFuture[](https://docs.rs/futures/latest/futures/prelude/trait.TryFuture.html \"trait futures::prelude::TryFuture\");`\n\n\n`pub use futures_util::future::FutureExt[](https://docs.rs/futures/latest/futures/future/trait.FutureExt.html \"trait futures::future::FutureExt\");`\n\n\n`pub use futures_util::future::TryFutureExt[](https://docs.rs/futures/latest/futures/future/trait.TryFutureExt.html \"trait futures::future::TryFutureExt\");`\n\n\n`pub use futures_core::stream::Stream[](https://docs.rs/futures/latest/futures/prelude/trait.Stream.html \"trait futures::prelude::Stream\");`\n\n\n`pub use futures_core::stream::TryStream[](https://docs.rs/futures/latest/futures/prelude/trait.TryStream.html \"trait futures::prelude::TryStream\");`\n\n\n`pub use futures_util::stream::StreamExt[](https://docs.rs/futures/latest/futures/stream/trait.StreamExt.html \"trait futures::stream::StreamExt\");`\n\n\n`pub use futures_util::stream::TryStreamExt[](https://docs.rs/futures/latest/futures/stream/trait.TryStreamExt.html \"trait futures::stream::TryStreamExt\");`\n\n\n`pub use futures_sink::Sink[](https://docs.rs/futures/latest/futures/prelude/trait.Sink.html \"trait futures::prelude::Sink\");`\n\n\n`pub use futures_util::sink::SinkExt[](https://docs.rs/futures/latest/futures/sink/trait.SinkExt.html \"trait futures::sink::SinkExt\");`\n\n\n`pub use futures_io::AsyncBufRead[](https://docs.rs/futures/latest/futures/prelude/trait.AsyncBufRead.html \"trait futures::prelude::AsyncBufRead\");`\n\n\n`pub use futures_io::AsyncRead[](https://docs.rs/futures/latest/futures/prelude/trait.AsyncRead.html \"trait futures::prelude::AsyncRead\");`\n\n\n`pub use futures_io::AsyncSeek[](https://docs.rs/futures/latest/futures/prelude/trait.AsyncSeek.html \"trait futures::prelude::AsyncSeek\");`\n\n\n`pub use futures_io::AsyncWrite[](https://docs.rs/futures/latest/futures/prelude/trait.AsyncWrite.html \"trait futures::prelude::AsyncWrite\");`\n\n\n`pub use futures_util::AsyncBufReadExt[](https://docs.rs/futures/latest/futures/io/trait.AsyncBufReadExt.html \"trait futures::io::AsyncBufReadExt\");`\n\n\n`pub use futures_util::AsyncReadExt[](https://docs.rs/futures/latest/futures/io/trait.AsyncReadExt.html \"trait futures::io::AsyncReadExt\");`\n\n\n`pub use futures_util::AsyncSeekExt[](https://docs.rs/futures/latest/futures/io/trait.AsyncSeekExt.html \"trait futures::io::AsyncSeekExt\");`\n\n\n`pub use futures_util::AsyncWriteExt[](https://docs.rs/futures/latest/futures/io/trait.AsyncWriteExt.html \"trait futures::io::AsyncWriteExt\");`\n\n## Modules[\u00a7](https://docs.rs/futures/latest/futures/#modules)\n\n[channel](https://docs.rs/futures/latest/futures/channel/index.html \"mod futures::channel\")\n    Asynchronous channels.\n\n[compat](https://docs.rs/futures/latest/futures/compat/index.html \"mod futures::compat\")`compat`\n    Interop between `futures` 0.1 and 0.3.\n\n[executor](https://docs.rs/futures/latest/futures/executor/index.html \"mod futures::executor\")`executor`\n    Built-in executors and related tools.\n\n[future](https://docs.rs/futures/latest/futures/future/index.html \"mod futures::future\")\n    Asynchronous values.\n\n[io](https://docs.rs/futures/latest/futures/io/index.html \"mod futures::io\")\n    Asynchronous I/O.\n\n[lock](https://docs.rs/futures/latest/futures/lock/index.html \"mod futures::lock\")\n    Futures-powered synchronization primitives.\n\n[never](https://docs.rs/futures/latest/futures/never/index.html \"mod futures::never\")\n    This module contains the `Never` type.\n\n[prelude](https://docs.rs/futures/latest/futures/prelude/index.html \"mod futures::prelude\")\n    A \u201cprelude\u201d for crates using the `futures` crate.\n\n[sink](https://docs.rs/futures/latest/futures/sink/index.html \"mod futures::sink\")\n    Asynchronous sinks.\n\n[stream](https://docs.rs/futures/latest/futures/stream/index.html \"mod futures::stream\")\n    Asynchronous streams.\n\n[task](https://docs.rs/futures/latest/futures/task/index.html \"mod futures::task\")\n    Tools for working with tasks.\n## Macros[\u00a7](https://docs.rs/futures/latest/futures/#macros)\n\n[join](https://docs.rs/futures/latest/futures/macro.join.html \"macro futures::join\")\n    Polls multiple futures simultaneously, returning a tuple of all results once complete.\n\n[pending](https://docs.rs/futures/latest/futures/macro.pending.html \"macro futures::pending\")\n    A macro which yields to the event loop once.\n\n[pin_mut](https://docs.rs/futures/latest/futures/macro.pin_mut.html \"macro futures::pin_mut\")\n    Pins a value on the stack.\n\n[poll](https://docs.rs/futures/latest/futures/macro.poll.html \"macro futures::poll\")\n    A macro which returns the result of polling a future once within the current `async` context.\n\n[ready](https://docs.rs/futures/latest/futures/macro.ready.html \"macro futures::ready\")\n    Extracts the successful type of a `Poll<T>`.\n\n[select](https://docs.rs/futures/latest/futures/macro.select.html \"macro futures::select\")\n    Polls multiple futures and streams simultaneously, executing the branch for the future that finishes first. If multiple futures are ready, one will be pseudo-randomly selected at runtime. Futures directly passed to `select!` must be `Unpin` and implement `FusedFuture`.\n\n[select_biased](https://docs.rs/futures/latest/futures/macro.select_biased.html \"macro futures::select_biased\")\n    Polls multiple futures and streams simultaneously, executing the branch for the future that finishes first. Unlike [`select!`](https://docs.rs/futures/latest/futures/macro.select.html), if multiple futures are ready, one will be selected in order of declaration. Futures directly passed to `select_biased!` must be `Unpin` and implement `FusedFuture`.\n\n[stream_select](https://docs.rs/futures/latest/futures/macro.stream_select.html \"macro futures::stream_select\")\n    Combines several streams, all producing the same `Item` type, into one stream. This is similar to `select_all` but does not require the streams to all be the same type. It also keeps the streams inline, and does not require `Box<dyn Stream>`s to be allocated. Streams passed to this macro must be `Unpin`.\n\n[try_join](https://docs.rs/futures/latest/futures/macro.try_join.html \"macro futures::try_join\")\n    Polls multiple futures simultaneously, resolving to a [`Result`](https://doc.rust-lang.org/nightly/core/result/enum.Result.html \"enum core::result::Result\") containing either a tuple of the successful outputs or an error.\n",
              "markdown_with_citations": "[](https://docs.rs/futures/latest/futures/all.html \"show sidebar\")\n# Crate futuresCopy item path\nSettings\u27e81\u27e9\nHelp\u27e82\u27e9\nSummarySource\u27e83\u27e9\nExpand description\nAbstractions for asynchronous programming.\nThis crate provides a number of core abstractions for writing asynchronous code:\n  * Futures\u27e84\u27e9 are single eventual values produced by asynchronous computations. Some programming languages (e.g. JavaScript) call this concept \u201cpromise\u201d.\n  * Streams\u27e85\u27e9 represent a series of values produced asynchronously.\n  * Sinks\u27e86\u27e9 provide support for asynchronous writing of data.\n  * Executors\u27e87\u27e9 are responsible for running asynchronous tasks.\n\n\nThe crate also contains abstractions for asynchronous I/O\u27e88\u27e9 and cross-task communication\u27e89\u27e9.\nUnderlying all of this is the _task system_ , which is a form of lightweight threading. Large asynchronous computations are built up using futures, streams and sinks, and then spawned as independent tasks that are run to completion, but _do not block_ the thread running them.\nThe following example describes how the task system context is built and used within macros and keywords such as async and await!.\n```\nfn main() {\n  let pool = ThreadPool::new().expect(\"Failed to build pool\");\n  let (tx, rx) = mpsc::unbounded::<i32>();\n  // Create a future by an async block, where async is responsible for an\n  // implementation of Future. At this point no executor has been provided\n  // to this future, so it will not be running.\n  let fut_values = async {\n    // Create another async block, again where the Future implementation\n    // is generated by async. Since this is inside of a parent async block,\n    // it will be provided with the executor of the parent block when the parent\n    // block is executed.\n    //\n    // This executor chaining is done by Future::poll whose second argument\n    // is a std::task::Context. This represents our executor, and the Future\n    // implemented by this async block can be polled using the parent async\n    // block's executor.\n    let fut_tx_result = async move {\n      (0..100).for_each(|v| {\n        tx.unbounded_send(v).expect(\"Failed to send\");\n      })\n    };\n    // Use the provided thread pool to spawn the generated future\n    // responsible for transmission\n    pool.spawn_ok(fut_tx_result);\n    let fut_values = rx\n      .map(|v| v * 2)\n      .collect();\n    // Use the executor provided to this async block to wait for the\n    // future to complete.\n    fut_values.await\n  };\n  // Actually execute the above future, which will invoke Future::poll and\n  // subsequently chain appropriate Future::poll and methods needing executors\n  // to drive all futures. Eventually fut_values will be driven to completion.\n  let values: Vec<i32> = executor::block_on(fut_values);\n  println!(\"Values={:?}\", values);\n}\n```\n\nThe majority of examples and code snippets in this crate assume that they are inside an async block as written above.\n## Re-exports\u00a7\u27e810\u27e9\n\n`pub use futures_core::future::Future[](https://docs.rs/futures/latest/futures/prelude/trait.Future.html \"trait futures::prelude::Future\");`\n\n\n`pub use futures_core::future::TryFuture[](https://docs.rs/futures/latest/futures/prelude/trait.TryFuture.html \"trait futures::prelude::TryFuture\");`\n\n\n`pub use futures_util::future::FutureExt[](https://docs.rs/futures/latest/futures/future/trait.FutureExt.html \"trait futures::future::FutureExt\");`\n\n\n`pub use futures_util::future::TryFutureExt[](https://docs.rs/futures/latest/futures/future/trait.TryFutureExt.html \"trait futures::future::TryFutureExt\");`\n\n\n`pub use futures_core::stream::Stream[](https://docs.rs/futures/latest/futures/prelude/trait.Stream.html \"trait futures::prelude::Stream\");`\n\n\n`pub use futures_core::stream::TryStream[](https://docs.rs/futures/latest/futures/prelude/trait.TryStream.html \"trait futures::prelude::TryStream\");`\n\n\n`pub use futures_util::stream::StreamExt[](https://docs.rs/futures/latest/futures/stream/trait.StreamExt.html \"trait futures::stream::StreamExt\");`\n\n\n`pub use futures_util::stream::TryStreamExt[](https://docs.rs/futures/latest/futures/stream/trait.TryStreamExt.html \"trait futures::stream::TryStreamExt\");`\n\n\n`pub use futures_sink::Sink[](https://docs.rs/futures/latest/futures/prelude/trait.Sink.html \"trait futures::prelude::Sink\");`\n\n\n`pub use futures_util::sink::SinkExt[](https://docs.rs/futures/latest/futures/sink/trait.SinkExt.html \"trait futures::sink::SinkExt\");`\n\n\n`pub use futures_io::AsyncBufRead[](https://docs.rs/futures/latest/futures/prelude/trait.AsyncBufRead.html \"trait futures::prelude::AsyncBufRead\");`\n\n\n`pub use futures_io::AsyncRead[](https://docs.rs/futures/latest/futures/prelude/trait.AsyncRead.html \"trait futures::prelude::AsyncRead\");`\n\n\n`pub use futures_io::AsyncSeek[](https://docs.rs/futures/latest/futures/prelude/trait.AsyncSeek.html \"trait futures::prelude::AsyncSeek\");`\n\n\n`pub use futures_io::AsyncWrite[](https://docs.rs/futures/latest/futures/prelude/trait.AsyncWrite.html \"trait futures::prelude::AsyncWrite\");`\n\n\n`pub use futures_util::AsyncBufReadExt[](https://docs.rs/futures/latest/futures/io/trait.AsyncBufReadExt.html \"trait futures::io::AsyncBufReadExt\");`\n\n\n`pub use futures_util::AsyncReadExt[](https://docs.rs/futures/latest/futures/io/trait.AsyncReadExt.html \"trait futures::io::AsyncReadExt\");`\n\n\n`pub use futures_util::AsyncSeekExt[](https://docs.rs/futures/latest/futures/io/trait.AsyncSeekExt.html \"trait futures::io::AsyncSeekExt\");`\n\n\n`pub use futures_util::AsyncWriteExt[](https://docs.rs/futures/latest/futures/io/trait.AsyncWriteExt.html \"trait futures::io::AsyncWriteExt\");`\n\n## Modules\u00a7\u27e811\u27e9\n\nchannel\u27e89\u27e9\n    Asynchronous channels.\n\ncompat\u27e812\u27e9`compat`\n    Interop between `futures` 0.1 and 0.3.\n\nexecutor\u27e87\u27e9`executor`\n    Built-in executors and related tools.\n\nfuture\u27e84\u27e9\n    Asynchronous values.\n\nio\u27e88\u27e9\n    Asynchronous I/O.\n\nlock\u27e813\u27e9\n    Futures-powered synchronization primitives.\n\nnever\u27e814\u27e9\n    This module contains the `Never` type.\n\nprelude\u27e815\u27e9\n    A \u201cprelude\u201d for crates using the `futures` crate.\n\nsink\u27e86\u27e9\n    Asynchronous sinks.\n\nstream\u27e85\u27e9\n    Asynchronous streams.\n\ntask\u27e816\u27e9\n    Tools for working with tasks.\n## Macros\u00a7\u27e817\u27e9\n\njoin\u27e818\u27e9\n    Polls multiple futures simultaneously, returning a tuple of all results once complete.\n\npending\u27e819\u27e9\n    A macro which yields to the event loop once.\n\npin_mut\u27e820\u27e9\n    Pins a value on the stack.\n\npoll\u27e821\u27e9\n    A macro which returns the result of polling a future once within the current `async` context.\n\nready\u27e822\u27e9\n    Extracts the successful type of a `Poll<T>`.\n\nselect\u27e823\u27e9\n    Polls multiple futures and streams simultaneously, executing the branch for the future that finishes first. If multiple futures are ready, one will be pseudo-randomly selected at runtime. Futures directly passed to `select!` must be `Unpin` and implement `FusedFuture`.\n\nselect_biased\u27e824\u27e9\n    Polls multiple futures and streams simultaneously, executing the branch for the future that finishes first. Unlike `select!`\u27e823\u27e9, if multiple futures are ready, one will be selected in order of declaration. Futures directly passed to `select_biased!` must be `Unpin` and implement `FusedFuture`.\n\nstream_select\u27e825\u27e9\n    Combines several streams, all producing the same `Item` type, into one stream. This is similar to `select_all` but does not require the streams to all be the same type. It also keeps the streams inline, and does not require `Box<dyn Stream>`s to be allocated. Streams passed to this macro must be `Unpin`.\n\ntry_join\u27e826\u27e9\n    Polls multiple futures simultaneously, resolving to a `Result`\u27e827\u27e9 containing either a tuple of the successful outputs or an error.\n",
              "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://docs.rs/futures/latest/settings.html: Settings\n\u27e82\u27e9 https://docs.rs/futures/latest/help.html: Help\n\u27e83\u27e9 https://docs.rs/futures/latest/src/futures/lib.rs.html#1-254: Source\n\u27e84\u27e9 https://docs.rs/futures/latest/futures/future/index.html: mod futures::future - Futures\n\u27e85\u27e9 https://docs.rs/futures/latest/futures/stream/index.html: mod futures::stream - Streams\n\u27e86\u27e9 https://docs.rs/futures/latest/futures/sink/index.html: mod futures::sink - Sinks\n\u27e87\u27e9 https://docs.rs/futures/latest/futures/executor/index.html: mod futures::executor - Executors\n\u27e88\u27e9 https://docs.rs/futures/latest/futures/io/index.html: mod futures::io - asynchronous I/O\n\u27e89\u27e9 https://docs.rs/futures/latest/futures/channel/index.html: mod futures::channel - cross-task communication\n\u27e810\u27e9 https://docs.rs/futures/latest/futures/#reexports: \u00a7\n\u27e811\u27e9 https://docs.rs/futures/latest/futures/#modules: \u00a7\n\u27e812\u27e9 https://docs.rs/futures/latest/futures/compat/index.html: mod futures::compat - compat\n\u27e813\u27e9 https://docs.rs/futures/latest/futures/lock/index.html: mod futures::lock - lock\n\u27e814\u27e9 https://docs.rs/futures/latest/futures/never/index.html: mod futures::never - never\n\u27e815\u27e9 https://docs.rs/futures/latest/futures/prelude/index.html: mod futures::prelude - prelude\n\u27e816\u27e9 https://docs.rs/futures/latest/futures/task/index.html: mod futures::task - task\n\u27e817\u27e9 https://docs.rs/futures/latest/futures/#macros: \u00a7\n\u27e818\u27e9 https://docs.rs/futures/latest/futures/macro.join.html: macro futures::join - join\n\u27e819\u27e9 https://docs.rs/futures/latest/futures/macro.pending.html: macro futures::pending - pending\n\u27e820\u27e9 https://docs.rs/futures/latest/futures/macro.pin_mut.html: macro futures::pin_mut - pin_mut\n\u27e821\u27e9 https://docs.rs/futures/latest/futures/macro.poll.html: macro futures::poll - poll\n\u27e822\u27e9 https://docs.rs/futures/latest/futures/macro.ready.html: macro futures::ready - ready\n\u27e823\u27e9 https://docs.rs/futures/latest/futures/macro.select.html: macro futures::select - select\n\u27e824\u27e9 https://docs.rs/futures/latest/futures/macro.select_biased.html: macro futures::select_biased - select_biased\n\u27e825\u27e9 https://docs.rs/futures/latest/futures/macro.stream_select.html: macro futures::stream_select - stream_select\n\u27e826\u27e9 https://docs.rs/futures/latest/futures/macro.try_join.html: macro futures::try_join - try_join\n\u27e827\u27e9 https://doc.rust-lang.org/nightly/core/result/enum.Result.html: enum core::result::Result - `Result`\n",
              "fit_markdown": "",
              "fit_html": ""
            },
            "structured_data": {},
            "quality_score": 4.0,
            "extraction_method": "crawl4ai",
            "error": null,
            "metadata": {
              "doc_type": "docs",
              "content_length": 10078,
              "has_structured_data": false,
              "crawl_success": true
            },
            "timestamp": "112242.7805311"
          },
          "lib_rs": {
            "url": "https://lib.rs/crates/futures",
            "title": "Untitled",
            "content": {
              "raw_markdown": "###  [49 releases](https://lib.rs/crates/futures/versions)\n0.3.31 |  Oct 5, 2024   \n---|---  \n0.3.30 |  Dec 24, 2023   \n0.3.29 |  Oct 26, 2023   \n0.3.28 |  Mar 30, 2023   \n0.1.0 |  ~~Jul 31, 2016~~  \n#**3** in [Asynchronous](https://lib.rs/asynchronous \"Crates to help you deal with events independently of the main program flow, using techniques like futures, promises, waiting, or eventing.\")\nDownload history 3095426/week @ 2025-03-08 3310790/week @ 2025-03-15 3540402/week @ 2025-03-22 2963891/week @ 2025-03-29 3195628/week @ 2025-04-05 2872588/week @ 2025-04-12 2873690/week @ 2025-04-19 2774861/week @ 2025-04-26 2825760/week @ 2025-05-03 2893857/week @ 2025-05-10 2949105/week @ 2025-05-17 2657861/week @ 2025-05-24 2938537/week @ 2025-05-31 3041241/week @ 2025-06-07 3271185/week @ 2025-06-14 2896520/week @ 2025-06-21\n**12,635,519** downloads per month Used in [**26,578** crates (13,831 directly)](https://lib.rs/crates/futures/rev)\n**MIT/Apache**\n1MB  15K  SLoC\n![futures-rs](https://img.gs/czjpqfbdkz/400/https://raw.githubusercontent.com/rust-lang/futures-rs/gh-pages/assets/images/futures-rs-logo.svg?sanitize=true)\nZero-cost asynchronous programming in Rust \n[ ![Build Status](https://img.shields.io/github/actions/workflow/status/rust-lang/futures-rs/ci.yml?branch=master) ](https://github.com/rust-lang/futures-rs/actions?query=branch%3Amaster) [ ![crates.io](https://img.shields.io/crates/v/futures.svg) ](https://crates.io/crates/futures)\n[ Documentation ](https://docs.rs/futures) | [ Website ](https://rust-lang.github.io/futures-rs/)\n``futures-rs`` is a library providing the foundations for asynchronous programming in Rust. It includes key trait definitions like ``Stream``, as well as utilities like ``join!``, ``select!``, and various futures combinator methods which enable expressive asynchronous control flow.\n## Usage\nAdd this to your ``Cargo.toml``:\n```\n```[``dependencies``]`\n`futures ``=` ``\"`0.3`\"``\n``\n```\n\nThe current ``futures`` requires Rust 1.56 or later.\n### Feature ``std``\nFutures-rs works without the standard library, such as in bare metal environments. However, it has a significantly reduced API surface. To use futures-rs in a ````#``[``no_std``]```` environment, use:\n```\n```[``dependencies``]`\n`futures = { version = \"0.3\", default-features ``=` `false` }\n``\n```\n\n## License\nLicensed under either of [Apache License, Version 2.0](https://github.com/rust-lang/futures-rs/blob/1e052816b09890925cfdfcbe8d390cdaae5e4c38/futures/LICENSE-APACHE) or [MIT license](https://github.com/rust-lang/futures-rs/blob/1e052816b09890925cfdfcbe8d390cdaae5e4c38/futures/LICENSE-MIT) at your option.\nUnless you explicitly state otherwise, any contribution intentionally submitted for inclusion in the work by you, as defined in the Apache-2.0 license, shall be dual licensed as above, without any additional terms or conditions.\n#### Dependencies\n  * [futures-channel](https://lib.rs/crates/futures-channel \"0.3.31\")[+sink](https://lib.rs/crates/futures-channel/features#feature-sink)\n  * [futures-core](https://lib.rs/crates/futures-core \"0.3.31\")\n  * [executor](https://lib.rs/crates/futures/features#feature-executor \"default feature\") [thread-pool?](https://lib.rs/crates/futures/features#feature-thread-pool \"optional feature\") [futures-executor](https://lib.rs/crates/futures-executor \"0.3.31\")\n  * [futures-io](https://lib.rs/crates/futures-io \"0.3.31\")\n  * [futures-sink](https://lib.rs/crates/futures-sink \"0.3.31\")\n  * [futures-task](https://lib.rs/crates/futures-task \"0.3.31\")\n  * [futures-util](https://lib.rs/crates/futures-util \"0.3.31\")[+sink](https://lib.rs/crates/futures-util/features#feature-sink)\n\n\n  * dev  [assert_matches](https://lib.rs/crates/assert_matches \"1.3.0\")\n  * dev  [pin-project](https://lib.rs/crates/pin-project \"1.0.11\")\n  * dev  [static_assertions](https://lib.rs/crates/static_assertions \"1\")\n  * dev  [tokio](https://lib.rs/crates/tokio \"deprecated\") 0.1.11\n\n\n#### [Other features](https://lib.rs/crates/futures/features)\n  * [alloc](https://lib.rs/crates/futures/features#feature-alloc)\n  * [async-await](https://lib.rs/crates/futures/features#feature-async-await)\n  * [bilock](https://lib.rs/crates/futures/features#feature-bilock)\n  * [cfg-target-has-atomic](https://lib.rs/crates/futures/features#feature-cfg-target-has-atomic)\n  * [compat](https://lib.rs/crates/futures/features#feature-compat)\n  * [io-compat](https://lib.rs/crates/futures/features#feature-io-compat)\n  * [std](https://lib.rs/crates/futures/features#feature-std)\n  * [unstable](https://lib.rs/crates/futures/features#feature-unstable)\n  * [write-all-vectored](https://lib.rs/crates/futures/features#feature-write-all-vectored)\n\n\n  *[SLoC]: Lines of code, excluding comments\n",
              "markdown_with_citations": "###  49 releases\u27e81\u27e9\n0.3.31 |  Oct 5, 2024   \n---|---  \n0.3.30 |  Dec 24, 2023   \n0.3.29 |  Oct 26, 2023   \n0.3.28 |  Mar 30, 2023   \n0.1.0 |  ~~Jul 31, 2016~~  \n#**3** in Asynchronous\u27e82\u27e9\nDownload history 3095426/week @ 2025-03-08 3310790/week @ 2025-03-15 3540402/week @ 2025-03-22 2963891/week @ 2025-03-29 3195628/week @ 2025-04-05 2872588/week @ 2025-04-12 2873690/week @ 2025-04-19 2774861/week @ 2025-04-26 2825760/week @ 2025-05-03 2893857/week @ 2025-05-10 2949105/week @ 2025-05-17 2657861/week @ 2025-05-24 2938537/week @ 2025-05-31 3041241/week @ 2025-06-07 3271185/week @ 2025-06-14 2896520/week @ 2025-06-21\n**12,635,519** downloads per month Used in **26,578** crates (13,831 directly)\u27e83\u27e9\n**MIT/Apache**\n1MB  15K  SLoC\n![futures-rs\u27e84\u27e9]\nZero-cost asynchronous programming in Rust \n ![Build Status\u27e85\u27e9 ](https://github.com/rust-lang/futures-rs/actions?query=branch%3Amaster)  ![crates.io\u27e86\u27e9 ](https://crates.io/crates/futures)\n Documentation \u27e87\u27e9 |  Website \u27e88\u27e9\n``futures-rs`` is a library providing the foundations for asynchronous programming in Rust. It includes key trait definitions like ``Stream``, as well as utilities like ``join!``, ``select!``, and various futures combinator methods which enable expressive asynchronous control flow.\n## Usage\nAdd this to your ``Cargo.toml``:\n```\n```[``dependencies``]`\n`futures ``=` ``\"`0.3`\"``\n``\n```\n\nThe current ``futures`` requires Rust 1.56 or later.\n### Feature ``std``\nFutures-rs works without the standard library, such as in bare metal environments. However, it has a significantly reduced API surface. To use futures-rs in a ````#``[``no_std``]```` environment, use:\n```\n```[``dependencies``]`\n`futures = { version = \"0.3\", default-features ``=` `false` }\n``\n```\n\n## License\nLicensed under either of Apache License, Version 2.0\u27e89\u27e9 or MIT license\u27e810\u27e9 at your option.\nUnless you explicitly state otherwise, any contribution intentionally submitted for inclusion in the work by you, as defined in the Apache-2.0 license, shall be dual licensed as above, without any additional terms or conditions.\n#### Dependencies\n  * futures-channel\u27e811\u27e9+sink\u27e812\u27e9\n  * futures-core\u27e813\u27e9\n  * executor\u27e814\u27e9 thread-pool?\u27e815\u27e9 futures-executor\u27e816\u27e9\n  * futures-io\u27e817\u27e9\n  * futures-sink\u27e818\u27e9\n  * futures-task\u27e819\u27e9\n  * futures-util\u27e820\u27e9+sink\u27e821\u27e9\n\n\n  * dev  assert_matches\u27e822\u27e9\n  * dev  pin-project\u27e823\u27e9\n  * dev  static_assertions\u27e824\u27e9\n  * dev  tokio\u27e825\u27e9 0.1.11\n\n\n#### Other features\u27e826\u27e9\n  * alloc\u27e827\u27e9\n  * async-await\u27e828\u27e9\n  * bilock\u27e829\u27e9\n  * cfg-target-has-atomic\u27e830\u27e9\n  * compat\u27e831\u27e9\n  * io-compat\u27e832\u27e9\n  * std\u27e833\u27e9\n  * unstable\u27e834\u27e9\n  * write-all-vectored\u27e835\u27e9\n\n\n  *[SLoC]: Lines of code, excluding comments\n",
              "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://lib.rs/crates/futures/versions: 49 releases\n\u27e82\u27e9 https://lib.rs/asynchronous: Crates to help you deal with events independently of the main program flow, using techniques like futures, promises, waiting, or eventing. - Asynchronous\n\u27e83\u27e9 https://lib.rs/crates/futures/rev: **26,578** crates (13,831 directly)\n\u27e84\u27e9 https://img.gs/czjpqfbdkz/400/https://raw.githubusercontent.com/rust-lang/futures-rs/gh-pages/assets/images/futures-rs-logo.svg?sanitize=true: futures-rs\n\u27e85\u27e9 https://img.shields.io/github/actions/workflow/status/rust-lang/futures-rs/ci.yml?branch=master:  ![Build Status\n\u27e86\u27e9 https://img.shields.io/crates/v/futures.svg:  ![crates.io\n\u27e87\u27e9 https://docs.rs/futures:  Documentation \n\u27e88\u27e9 https://rust-lang.github.io/futures-rs/:  Website \n\u27e89\u27e9 https://github.com/rust-lang/futures-rs/blob/1e052816b09890925cfdfcbe8d390cdaae5e4c38/futures/LICENSE-APACHE: Apache License, Version 2.0\n\u27e810\u27e9 https://github.com/rust-lang/futures-rs/blob/1e052816b09890925cfdfcbe8d390cdaae5e4c38/futures/LICENSE-MIT: MIT license\n\u27e811\u27e9 https://lib.rs/crates/futures-channel: 0.3.31 - futures-channel\n\u27e812\u27e9 https://lib.rs/crates/futures-channel/features#feature-sink: +sink\n\u27e813\u27e9 https://lib.rs/crates/futures-core: 0.3.31 - futures-core\n\u27e814\u27e9 https://lib.rs/crates/futures/features#feature-executor: default feature - executor\n\u27e815\u27e9 https://lib.rs/crates/futures/features#feature-thread-pool: optional feature - thread-pool?\n\u27e816\u27e9 https://lib.rs/crates/futures-executor: 0.3.31 - futures-executor\n\u27e817\u27e9 https://lib.rs/crates/futures-io: 0.3.31 - futures-io\n\u27e818\u27e9 https://lib.rs/crates/futures-sink: 0.3.31 - futures-sink\n\u27e819\u27e9 https://lib.rs/crates/futures-task: 0.3.31 - futures-task\n\u27e820\u27e9 https://lib.rs/crates/futures-util: 0.3.31 - futures-util\n\u27e821\u27e9 https://lib.rs/crates/futures-util/features#feature-sink: +sink\n\u27e822\u27e9 https://lib.rs/crates/assert_matches: 1.3.0 - assert_matches\n\u27e823\u27e9 https://lib.rs/crates/pin-project: 1.0.11 - pin-project\n\u27e824\u27e9 https://lib.rs/crates/static_assertions: 1 - static_assertions\n\u27e825\u27e9 https://lib.rs/crates/tokio: deprecated - tokio\n\u27e826\u27e9 https://lib.rs/crates/futures/features: Other features\n\u27e827\u27e9 https://lib.rs/crates/futures/features#feature-alloc: alloc\n\u27e828\u27e9 https://lib.rs/crates/futures/features#feature-async-await: async-await\n\u27e829\u27e9 https://lib.rs/crates/futures/features#feature-bilock: bilock\n\u27e830\u27e9 https://lib.rs/crates/futures/features#feature-cfg-target-has-atomic: cfg-target-has-atomic\n\u27e831\u27e9 https://lib.rs/crates/futures/features#feature-compat: compat\n\u27e832\u27e9 https://lib.rs/crates/futures/features#feature-io-compat: io-compat\n\u27e833\u27e9 https://lib.rs/crates/futures/features#feature-std: std\n\u27e834\u27e9 https://lib.rs/crates/futures/features#feature-unstable: unstable\n\u27e835\u27e9 https://lib.rs/crates/futures/features#feature-write-all-vectored: write-all-vectored\n",
              "fit_markdown": "",
              "fit_html": ""
            },
            "structured_data": {},
            "quality_score": 3.0,
            "extraction_method": "crawl4ai",
            "error": null,
            "metadata": {
              "doc_type": "docs",
              "content_length": 4718,
              "has_structured_data": false,
              "crawl_success": true
            },
            "timestamp": "112243.1578324"
          }
        },
        "crate_analysis": {
          "status": "completed",
          "check": [
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#pin-utils@0.1.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\pin-utils-0.1.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "pin_utils",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\pin-utils-0.1.0\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmph9h88zwj\\futures-0.3.31\\target\\debug\\deps\\libpin_utils-9d9a9e5e1b2c045c.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#futures-sink@0.3.31",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\futures-sink-0.3.31\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "futures_sink",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\futures-sink-0.3.31\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "alloc",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmph9h88zwj\\futures-0.3.31\\target\\debug\\deps\\libfutures_sink-ac8515cae424082d.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#pin-project-lite@0.2.16",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\pin-project-lite-0.2.16\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "pin_project_lite",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\pin-project-lite-0.2.16\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmph9h88zwj\\futures-0.3.31\\target\\debug\\deps\\libpin_project_lite-c1a285380b388093.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#futures-core@0.3.31",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\futures-core-0.3.31\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "futures_core",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\futures-core-0.3.31\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "alloc",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmph9h88zwj\\futures-0.3.31\\target\\debug\\deps\\libfutures_core-c0247814193dd354.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#futures-io@0.3.31",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\futures-io-0.3.31\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "futures_io",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\futures-io-0.3.31\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmph9h88zwj\\futures-0.3.31\\target\\debug\\deps\\libfutures_io-76ff1e12022b56d6.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#futures-task@0.3.31",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\futures-task-0.3.31\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "futures_task",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\futures-task-0.3.31\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "alloc",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmph9h88zwj\\futures-0.3.31\\target\\debug\\deps\\libfutures_task-ecc531f5e570f7c2.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#unicode-ident@1.0.18",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\unicode-ident-1.0.18\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "unicode_ident",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\unicode-ident-1.0.18\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmph9h88zwj\\futures-0.3.31\\target\\debug\\deps\\libunicode_ident-f7db65657b8daa2b.rlib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmph9h88zwj\\futures-0.3.31\\target\\debug\\deps\\libunicode_ident-f7db65657b8daa2b.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#slab@0.4.10",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.10\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "slab",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.10\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmph9h88zwj\\futures-0.3.31\\target\\debug\\deps\\libslab-998bee1b978fdba0.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#futures-channel@0.3.31",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\futures-channel-0.3.31\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "futures_channel",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\futures-channel-0.3.31\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "alloc",
                "futures-sink",
                "sink",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmph9h88zwj\\futures-0.3.31\\target\\debug\\deps\\libfutures_channel-8169a0724a16239d.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#proc-macro2@1.0.95",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\proc-macro2-1.0.95\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\proc-macro2-1.0.95\\build.rs",
                "edition": "2021",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "proc-macro"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmph9h88zwj\\futures-0.3.31\\target\\debug\\build\\proc-macro2-ff1a34852a360a33\\build-script-build.exe",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmph9h88zwj\\futures-0.3.31\\target\\debug\\build\\proc-macro2-ff1a34852a360a33\\build_script_build.pdb"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "build-script-executed",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#proc-macro2@1.0.95",
              "linked_libs": [],
              "linked_paths": [],
              "cfgs": [
                "wrap_proc_macro"
              ],
              "env": [],
              "out_dir": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmph9h88zwj\\futures-0.3.31\\target\\debug\\build\\proc-macro2-bd004ad9dcfa0b46\\out"
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#memchr@2.7.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\memchr-2.7.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "memchr",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\memchr-2.7.5\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "alloc",
                "default",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmph9h88zwj\\futures-0.3.31\\target\\debug\\deps\\libmemchr-cb1427129dde067c.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#proc-macro2@1.0.95",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\proc-macro2-1.0.95\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "proc_macro2",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\proc-macro2-1.0.95\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "proc-macro"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmph9h88zwj\\futures-0.3.31\\target\\debug\\deps\\libproc_macro2-a3b3807fecd402e3.rlib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmph9h88zwj\\futures-0.3.31\\target\\debug\\deps\\libproc_macro2-a3b3807fecd402e3.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#quote@1.0.40",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\quote-1.0.40\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "quote",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\quote-1.0.40\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "proc-macro"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmph9h88zwj\\futures-0.3.31\\target\\debug\\deps\\libquote-e850c7166d56c5b9.rlib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmph9h88zwj\\futures-0.3.31\\target\\debug\\deps\\libquote-e850c7166d56c5b9.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#syn@2.0.104",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\syn-2.0.104\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "syn",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\syn-2.0.104\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "clone-impls",
                "default",
                "derive",
                "full",
                "parsing",
                "printing",
                "proc-macro",
                "visit-mut"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmph9h88zwj\\futures-0.3.31\\target\\debug\\deps\\libsyn-6d8a737c69e2c9d6.rlib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmph9h88zwj\\futures-0.3.31\\target\\debug\\deps\\libsyn-6d8a737c69e2c9d6.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#futures-macro@0.3.31",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\futures-macro-0.3.31\\Cargo.toml",
              "target": {
                "kind": [
                  "proc-macro"
                ],
                "crate_types": [
                  "proc-macro"
                ],
                "name": "futures_macro",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\futures-macro-0.3.31\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmph9h88zwj\\futures-0.3.31\\target\\debug\\deps\\futures_macro-68b994b5bf27c618.dll",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmph9h88zwj\\futures-0.3.31\\target\\debug\\deps\\futures_macro-68b994b5bf27c618.dll.lib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmph9h88zwj\\futures-0.3.31\\target\\debug\\deps\\futures_macro-68b994b5bf27c618.dll.exp",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmph9h88zwj\\futures-0.3.31\\target\\debug\\deps\\futures_macro-68b994b5bf27c618.pdb"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#futures-util@0.3.31",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\futures-util-0.3.31\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "futures_util",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\futures-util-0.3.31\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "alloc",
                "async-await",
                "async-await-macro",
                "channel",
                "futures-channel",
                "futures-io",
                "futures-macro",
                "futures-sink",
                "io",
                "memchr",
                "sink",
                "slab",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmph9h88zwj\\futures-0.3.31\\target\\debug\\deps\\libfutures_util-9423961786c1a3a5.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#futures-executor@0.3.31",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\futures-executor-0.3.31\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "futures_executor",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\futures-executor-0.3.31\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmph9h88zwj\\futures-0.3.31\\target\\debug\\deps\\libfutures_executor-9503085c98658c7e.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmph9h88zwj/futures-0.3.31#futures@0.3.31",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmph9h88zwj\\futures-0.3.31\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "futures",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmph9h88zwj\\futures-0.3.31\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "alloc",
                "async-await",
                "default",
                "executor",
                "futures-executor",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmph9h88zwj\\futures-0.3.31\\target\\debug\\deps\\libfutures-847eb7c846c1704b.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "build-finished",
              "success": true
            }
          ],
          "clippy": [
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#proc-macro2@1.0.95",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\proc-macro2-1.0.95\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\proc-macro2-1.0.95\\build.rs",
                "edition": "2021",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "proc-macro"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmph9h88zwj\\futures-0.3.31\\target\\debug\\build\\proc-macro2-ff1a34852a360a33\\build-script-build.exe",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmph9h88zwj\\futures-0.3.31\\target\\debug\\build\\proc-macro2-ff1a34852a360a33\\build_script_build.pdb"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "build-script-executed",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#proc-macro2@1.0.95",
              "linked_libs": [],
              "linked_paths": [],
              "cfgs": [
                "wrap_proc_macro"
              ],
              "env": [],
              "out_dir": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmph9h88zwj\\futures-0.3.31\\target\\debug\\build\\proc-macro2-bd004ad9dcfa0b46\\out"
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#unicode-ident@1.0.18",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\unicode-ident-1.0.18\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "unicode_ident",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\unicode-ident-1.0.18\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmph9h88zwj\\futures-0.3.31\\target\\debug\\deps\\libunicode_ident-f7db65657b8daa2b.rlib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmph9h88zwj\\futures-0.3.31\\target\\debug\\deps\\libunicode_ident-f7db65657b8daa2b.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#futures-sink@0.3.31",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\futures-sink-0.3.31\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "futures_sink",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\futures-sink-0.3.31\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "alloc",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmph9h88zwj\\futures-0.3.31\\target\\debug\\deps\\libfutures_sink-ac8515cae424082d.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#futures-core@0.3.31",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\futures-core-0.3.31\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "futures_core",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\futures-core-0.3.31\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "alloc",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmph9h88zwj\\futures-0.3.31\\target\\debug\\deps\\libfutures_core-c0247814193dd354.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#futures-task@0.3.31",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\futures-task-0.3.31\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "futures_task",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\futures-task-0.3.31\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "alloc",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmph9h88zwj\\futures-0.3.31\\target\\debug\\deps\\libfutures_task-ecc531f5e570f7c2.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#futures-io@0.3.31",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\futures-io-0.3.31\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "futures_io",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\futures-io-0.3.31\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmph9h88zwj\\futures-0.3.31\\target\\debug\\deps\\libfutures_io-76ff1e12022b56d6.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#pin-project-lite@0.2.16",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\pin-project-lite-0.2.16\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "pin_project_lite",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\pin-project-lite-0.2.16\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmph9h88zwj\\futures-0.3.31\\target\\debug\\deps\\libpin_project_lite-c1a285380b388093.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#memchr@2.7.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\memchr-2.7.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "memchr",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\memchr-2.7.5\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "alloc",
                "default",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmph9h88zwj\\futures-0.3.31\\target\\debug\\deps\\libmemchr-cb1427129dde067c.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#pin-utils@0.1.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\pin-utils-0.1.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "pin_utils",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\pin-utils-0.1.0\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmph9h88zwj\\futures-0.3.31\\target\\debug\\deps\\libpin_utils-9d9a9e5e1b2c045c.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#slab@0.4.10",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.10\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "slab",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\slab-0.4.10\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmph9h88zwj\\futures-0.3.31\\target\\debug\\deps\\libslab-998bee1b978fdba0.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#proc-macro2@1.0.95",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\proc-macro2-1.0.95\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "proc_macro2",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\proc-macro2-1.0.95\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "proc-macro"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmph9h88zwj\\futures-0.3.31\\target\\debug\\deps\\libproc_macro2-a3b3807fecd402e3.rlib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmph9h88zwj\\futures-0.3.31\\target\\debug\\deps\\libproc_macro2-a3b3807fecd402e3.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#futures-channel@0.3.31",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\futures-channel-0.3.31\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "futures_channel",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\futures-channel-0.3.31\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "alloc",
                "futures-sink",
                "sink",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmph9h88zwj\\futures-0.3.31\\target\\debug\\deps\\libfutures_channel-8169a0724a16239d.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#quote@1.0.40",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\quote-1.0.40\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "quote",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\quote-1.0.40\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "proc-macro"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmph9h88zwj\\futures-0.3.31\\target\\debug\\deps\\libquote-e850c7166d56c5b9.rlib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmph9h88zwj\\futures-0.3.31\\target\\debug\\deps\\libquote-e850c7166d56c5b9.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#syn@2.0.104",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\syn-2.0.104\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "syn",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\syn-2.0.104\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "clone-impls",
                "default",
                "derive",
                "full",
                "parsing",
                "printing",
                "proc-macro",
                "visit-mut"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmph9h88zwj\\futures-0.3.31\\target\\debug\\deps\\libsyn-6d8a737c69e2c9d6.rlib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmph9h88zwj\\futures-0.3.31\\target\\debug\\deps\\libsyn-6d8a737c69e2c9d6.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#futures-macro@0.3.31",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\futures-macro-0.3.31\\Cargo.toml",
              "target": {
                "kind": [
                  "proc-macro"
                ],
                "crate_types": [
                  "proc-macro"
                ],
                "name": "futures_macro",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\futures-macro-0.3.31\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmph9h88zwj\\futures-0.3.31\\target\\debug\\deps\\futures_macro-68b994b5bf27c618.dll",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmph9h88zwj\\futures-0.3.31\\target\\debug\\deps\\futures_macro-68b994b5bf27c618.dll.lib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmph9h88zwj\\futures-0.3.31\\target\\debug\\deps\\futures_macro-68b994b5bf27c618.dll.exp",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmph9h88zwj\\futures-0.3.31\\target\\debug\\deps\\futures_macro-68b994b5bf27c618.pdb"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#futures-util@0.3.31",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\futures-util-0.3.31\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "futures_util",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\futures-util-0.3.31\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "alloc",
                "async-await",
                "async-await-macro",
                "channel",
                "futures-channel",
                "futures-io",
                "futures-macro",
                "futures-sink",
                "io",
                "memchr",
                "sink",
                "slab",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmph9h88zwj\\futures-0.3.31\\target\\debug\\deps\\libfutures_util-9423961786c1a3a5.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#futures-executor@0.3.31",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\futures-executor-0.3.31\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "futures_executor",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\futures-executor-0.3.31\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmph9h88zwj\\futures-0.3.31\\target\\debug\\deps\\libfutures_executor-9503085c98658c7e.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmph9h88zwj/futures-0.3.31#futures@0.3.31",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmph9h88zwj\\futures-0.3.31\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "futures",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmph9h88zwj\\futures-0.3.31\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "alloc",
                "async-await",
                "default",
                "executor",
                "futures-executor",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmph9h88zwj\\futures-0.3.31\\target\\debug\\deps\\libfutures-5c61f69ec1f904c9.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "build-finished",
              "success": true
            }
          ],
          "audit": {
            "database": {
              "advisory-count": 787,
              "last-commit": "7573f55ba337263f61167dbb0ea926cdc7c8eb5d",
              "last-updated": "2025-06-17T11:04:25+02:00"
            },
            "lockfile": {
              "dependency-count": 76
            },
            "settings": {
              "target_arch": [],
              "target_os": [],
              "severity": null,
              "ignore": [],
              "informational_warnings": [
                "unmaintained",
                "unsound",
                "notice"
              ]
            },
            "vulnerabilities": {
              "found": true,
              "count": 1,
              "list": [
                {
                  "advisory": {
                    "id": "RUSTSEC-2021-0124",
                    "package": "tokio",
                    "title": "Data race when sending and receiving after closing a `oneshot` channel",
                    "description": "If a `tokio::sync::oneshot` channel is closed (via the\n[`oneshot::Receiver::close`] method), a data race may occur if the\n`oneshot::Sender::send` method is called while the corresponding\n`oneshot::Receiver` is `await`ed or calling `try_recv`.\n\nWhen these methods are called concurrently on a closed channel, the two halves\nof the channel can concurrently access a shared memory location, resulting in a\ndata race. This has been observed to [cause memory corruption][corruption].\n\nNote that the race only occurs when **both** halves of the channel are used\nafter the `Receiver` half has called `close`. Code where `close` is not used, or where the\n`Receiver` is not `await`ed and `try_recv` is not called after calling `close`,\nis not affected.\n\nSee [tokio#4225][issue] for more details.\n\n[corruption]: https://github.com/tokio-rs/tokio/issues/4225#issuecomment-967434847\n[issue]: https://github.com/tokio-rs/tokio/issues/4225\n[`oneshot::Receiver::close`]: https://docs.rs/tokio/1.14.0/tokio/sync/oneshot/struct.Receiver.html#method.close",
                    "date": "2021-11-16",
                    "aliases": [
                      "CVE-2021-45710",
                      "GHSA-fg7r-2g4j-5cgr"
                    ],
                    "related": [],
                    "collection": "crates",
                    "categories": [
                      "memory-corruption",
                      "thread-safety"
                    ],
                    "keywords": [
                      "race condition"
                    ],
                    "cvss": null,
                    "informational": null,
                    "references": [],
                    "source": null,
                    "url": "https://github.com/tokio-rs/tokio/issues/4225",
                    "withdrawn": null,
                    "license": "CC0-1.0"
                  },
                  "versions": {
                    "patched": [
                      ">=1.8.4, <1.9.0",
                      ">=1.13.1"
                    ],
                    "unaffected": [
                      "<0.1.14"
                    ]
                  },
                  "affected": {
                    "arch": [],
                    "os": [],
                    "functions": {
                      "tokio::sync::oneshot::Receiver::close": [
                        "<=1.13.0, >=0.1.14"
                      ]
                    }
                  },
                  "package": {
                    "name": "tokio",
                    "version": "0.1.22",
                    "source": "registry+https://github.com/rust-lang/crates.io-index",
                    "checksum": "5a09c0b5bb588872ab2f09afa13ee6e9dac11e10a0ec9e8e3ba39a5a5d530af6",
                    "dependencies": [
                      {
                        "name": "bytes",
                        "version": "0.4.12",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "futures",
                        "version": "0.1.31",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "mio",
                        "version": "0.6.23",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "num_cpus",
                        "version": "1.17.0",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "tokio-codec",
                        "version": "0.1.2",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "tokio-current-thread",
                        "version": "0.1.7",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "tokio-executor",
                        "version": "0.1.10",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "tokio-fs",
                        "version": "0.1.7",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "tokio-io",
                        "version": "0.1.13",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "tokio-reactor",
                        "version": "0.1.12",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "tokio-sync",
                        "version": "0.1.8",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "tokio-tcp",
                        "version": "0.1.4",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "tokio-threadpool",
                        "version": "0.1.18",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "tokio-timer",
                        "version": "0.2.13",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "tokio-udp",
                        "version": "0.1.6",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "tokio-uds",
                        "version": "0.2.7",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      }
                    ],
                    "replace": null
                  }
                }
              ]
            },
            "warnings": {
              "unmaintained": [
                {
                  "kind": "unmaintained",
                  "package": {
                    "name": "net2",
                    "version": "0.2.39",
                    "source": "registry+https://github.com/rust-lang/crates.io-index",
                    "checksum": "b13b648036a2339d06de780866fbdfda0dde886de7b3af2ddeba8b14f4ee34ac",
                    "dependencies": [
                      {
                        "name": "cfg-if",
                        "version": "0.1.10",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "libc",
                        "version": "0.2.174",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "winapi",
                        "version": "0.3.9",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      }
                    ],
                    "replace": null
                  },
                  "advisory": {
                    "id": "RUSTSEC-2020-0016",
                    "package": "net2",
                    "title": "`net2` crate has been deprecated; use `socket2` instead",
                    "description": "The [`net2`](https://crates.io/crates/net2) crate has been deprecated\nand users are encouraged to considered [`socket2`](https://crates.io/crates/socket2) instead.",
                    "date": "2020-05-01",
                    "aliases": [],
                    "related": [],
                    "collection": "crates",
                    "categories": [],
                    "keywords": [],
                    "cvss": null,
                    "informational": "unmaintained",
                    "references": [],
                    "source": null,
                    "url": "https://github.com/deprecrated/net2-rs/commit/3350e3819adf151709047e93f25583a5df681091",
                    "withdrawn": null,
                    "license": "CC0-1.0"
                  },
                  "affected": null,
                  "versions": {
                    "patched": [],
                    "unaffected": []
                  }
                }
              ],
              "unsound": [
                {
                  "kind": "unsound",
                  "package": {
                    "name": "crossbeam-utils",
                    "version": "0.7.2",
                    "source": "registry+https://github.com/rust-lang/crates.io-index",
                    "checksum": "c3c7c73a2d1e9fc0886a08b93e98eb643461230d5f1925e4036204d5f2e261a8",
                    "dependencies": [
                      {
                        "name": "autocfg",
                        "version": "1.5.0",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "cfg-if",
                        "version": "0.1.10",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "lazy_static",
                        "version": "1.5.0",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      }
                    ],
                    "replace": null
                  },
                  "advisory": {
                    "id": "RUSTSEC-2022-0041",
                    "package": "crossbeam-utils",
                    "title": "Unsoundness of AtomicCell<*64> arithmetics on 32-bit targets that support Atomic*64",
                    "description": "## Impact\n\nAffected versions of this crate incorrectly assumed that the alignment of {i,u}64 was always the same as Atomic{I,U}64.\n\nHowever, the alignment of {i,u}64 on a 32-bit target can be smaller than Atomic{I,U}64.\n\nThis can cause the following problems:\n\n- Unaligned memory accesses\n- Data race\n\nCrates using fetch_* methods with AtomicCell<{i,u}64> are affected by this issue.\n\n32-bit targets without Atomic{I,U}64 and 64-bit targets are not affected by this issue.\n\n32-bit targets with Atomic{I,U}64 and {i,u}64 have the same alignment are also not affected by this issue.\n\nThe following is a complete list of the builtin targets that may be affected. (last update: nightly-2022-02-11)\n\n- armv7-apple-ios (tier 3)\n- armv7s-apple-ios (tier 3)\n- i386-apple-ios (tier 3)\n- i586-unknown-linux-gnu\n- i586-unknown-linux-musl\n- i686-apple-darwin (tier 3)\n- i686-linux-android\n- i686-unknown-freebsd\n- i686-unknown-haiku (tier 3)\n- i686-unknown-linux-gnu\n- i686-unknown-linux-musl\n- i686-unknown-netbsd (tier 3)\n- i686-unknown-openbsd (tier 3)\n- i686-wrs-vxworks (tier 3)\n\n([script to get list](https://gist.github.com/taiki-e/3c7891e8c5f5e0cbcb44d7396aabfe10))\n\n## Patches\n\nThis has been fixed in crossbeam-utils 0.8.7.\n\nAffected 0.8.x releases have been yanked.\n\nThanks to @taiki-e",
                    "date": "2022-02-05",
                    "aliases": [
                      "GHSA-qc84-gqf4-9926",
                      "CVE-2022-23639"
                    ],
                    "related": [],
                    "collection": "crates",
                    "categories": [
                      "memory-corruption"
                    ],
                    "keywords": [],
                    "cvss": null,
                    "informational": "unsound",
                    "references": [],
                    "source": null,
                    "url": "https://github.com/crossbeam-rs/crossbeam/pull/781",
                    "withdrawn": null,
                    "license": "CC0-1.0"
                  },
                  "affected": null,
                  "versions": {
                    "patched": [
                      ">=0.8.7"
                    ],
                    "unaffected": []
                  }
                },
                {
                  "kind": "unsound",
                  "package": {
                    "name": "lock_api",
                    "version": "0.3.4",
                    "source": "registry+https://github.com/rust-lang/crates.io-index",
                    "checksum": "c4da24a77a3d8a6d4862d95f72e6fdb9c09a643ecdb402d754004a557f2bec75",
                    "dependencies": [
                      {
                        "name": "scopeguard",
                        "version": "1.2.0",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      }
                    ],
                    "replace": null
                  },
                  "advisory": {
                    "id": "RUSTSEC-2020-0070",
                    "package": "lock_api",
                    "title": "Some lock_api lock guard objects can cause data races",
                    "description": "Affected versions of lock_api had unsound implementations of the `Send` or\n`Sync` traits for some guard objects, namely:\n\n* MappedMutexGuard\n* MappedRwLockReadGuard\n* MappedRwLockWriteGuard\n* RwLockReadGuard\n* RwLockWriteGuard\n\nThese guards could allow data races through types that are not safe to `Send`\nacross thread boundaries in safe Rust code.\n\nThis issue was fixed by changing the trait bounds on the `Mapped` guard types\nand removing the `Sync` trait for the `RwLock` guards.",
                    "date": "2020-11-08",
                    "aliases": [
                      "CVE-2020-35910",
                      "CVE-2020-35911",
                      "CVE-2020-35912",
                      "CVE-2020-35913",
                      "CVE-2020-35914",
                      "GHSA-5wg8-7c9q-794v",
                      "GHSA-gmv4-vmx3-x9f3",
                      "GHSA-hj9h-wrgg-hgmx",
                      "GHSA-ppj3-7jw3-8vc4",
                      "GHSA-vh4p-6j7g-f4j9"
                    ],
                    "related": [],
                    "collection": "crates",
                    "categories": [
                      "memory-corruption",
                      "thread-safety"
                    ],
                    "keywords": [
                      "concurrency"
                    ],
                    "cvss": null,
                    "informational": "unsound",
                    "references": [],
                    "source": null,
                    "url": "https://github.com/Amanieu/parking_lot/pull/262",
                    "withdrawn": null,
                    "license": "CC0-1.0"
                  },
                  "affected": {
                    "arch": [],
                    "os": [],
                    "functions": {
                      "lock_api::MappedMutexGuard": [
                        ">=0.1.0"
                      ],
                      "lock_api::MappedRwLockReadGuard": [
                        ">=0.1.0"
                      ],
                      "lock_api::MappedRwLockWriteGuard": [
                        ">=0.1.0"
                      ],
                      "lock_api::RwLockReadGuard": [
                        ">=0.1.0"
                      ],
                      "lock_api::RwLockWriteGuard": [
                        ">=0.1.0"
                      ]
                    }
                  },
                  "versions": {
                    "patched": [
                      ">=0.4.2"
                    ],
                    "unaffected": []
                  }
                },
                {
                  "kind": "unsound",
                  "package": {
                    "name": "memoffset",
                    "version": "0.5.6",
                    "source": "registry+https://github.com/rust-lang/crates.io-index",
                    "checksum": "043175f069eda7b85febe4a74abbaeff828d9f8b448515d3151a14a3542811aa",
                    "dependencies": [
                      {
                        "name": "autocfg",
                        "version": "1.5.0",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      }
                    ],
                    "replace": null
                  },
                  "advisory": {
                    "id": "RUSTSEC-2023-0045",
                    "package": "memoffset",
                    "title": "memoffset allows reading uninitialized memory",
                    "description": "memoffset allows attempt of reading data from address `0` with arbitrary type. This behavior is an undefined behavior because address `0` to `std::mem::size_of<T>` may not have valid bit-pattern with `T`. Old implementation dereferences uninitialized memory obtained from `std::mem::align_of`. Older implementation prior to it allows using uninitialized data obtained from `std::mem::uninitialized` with arbitrary type then compute offset by taking the address of field-projection. This may also result in an undefined behavior for \"father\" that includes (directly or transitively) type that [does not allow to be uninitialized](https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html).\n\nThis flaw was corrected by using `std::ptr::addr_of` in <https://github.com/Gilnaa/memoffset/pull/50>.",
                    "date": "2023-06-21",
                    "aliases": [
                      "GHSA-wfg4-322g-9vqv"
                    ],
                    "related": [],
                    "collection": "crates",
                    "categories": [
                      "memory-corruption"
                    ],
                    "keywords": [
                      "memoffset",
                      "offset"
                    ],
                    "cvss": null,
                    "informational": "unsound",
                    "references": [],
                    "source": null,
                    "url": "https://github.com/Gilnaa/memoffset/issues/24",
                    "withdrawn": null,
                    "license": "CC0-1.0"
                  },
                  "affected": {
                    "arch": [],
                    "os": [],
                    "functions": {
                      "memoffset::offset_of": [
                        "<0.6.2"
                      ]
                    }
                  },
                  "versions": {
                    "patched": [
                      ">=0.6.2"
                    ],
                    "unaffected": []
                  }
                }
              ]
            }
          },
          "note": "Crate analysis performed with stable toolchain."
        },
        "crate_metadata": {
          "name": "futures",
          "version": "0.3.31",
          "description": "ALLOW: Positive community sentiment",
          "repository": "",
          "keywords": [],
          "categories": [],
          "readme": {
            "raw_markdown": "[](https://docs.rs/futures/latest/futures/all.html \"show sidebar\")\n# Crate futuresCopy item path\n[Settings](https://docs.rs/futures/latest/settings.html)\n[Help](https://docs.rs/futures/latest/help.html)\nSummary[Source](https://docs.rs/futures/latest/src/futures/lib.rs.html#1-254)\nExpand description\nAbstractions for asynchronous programming.\nThis crate provides a number of core abstractions for writing asynchronous code:\n  * [Futures](https://docs.rs/futures/latest/futures/future/index.html \"mod futures::future\") are single eventual values produced by asynchronous computations. Some programming languages (e.g. JavaScript) call this concept \u201cpromise\u201d.\n  * [Streams](https://docs.rs/futures/latest/futures/stream/index.html \"mod futures::stream\") represent a series of values produced asynchronously.\n  * [Sinks](https://docs.rs/futures/latest/futures/sink/index.html \"mod futures::sink\") provide support for asynchronous writing of data.\n  * [Executors](https://docs.rs/futures/latest/futures/executor/index.html \"mod futures::executor\") are responsible for running asynchronous tasks.\n\n\nThe crate also contains abstractions for [asynchronous I/O](https://docs.rs/futures/latest/futures/io/index.html \"mod futures::io\") and [cross-task communication](https://docs.rs/futures/latest/futures/channel/index.html \"mod futures::channel\").\nUnderlying all of this is the _task system_ , which is a form of lightweight threading. Large asynchronous computations are built up using futures, streams and sinks, and then spawned as independent tasks that are run to completion, but _do not block_ the thread running them.\nThe following example describes how the task system context is built and used within macros and keywords such as async and await!.\n```\nfn main() {\n  let pool = ThreadPool::new().expect(\"Failed to build pool\");\n  let (tx, rx) = mpsc::unbounded::<i32>();\n  // Create a future by an async block, where async is responsible for an\n  // implementation of Future. At this point no executor has been provided\n  // to this future, so it will not be running.\n  let fut_values = async {\n    // Create another async block, again where the Future implementation\n    // is generated by async. Since this is inside of a parent async block,\n    // it will be provided with the executor of the parent block when the parent\n    // block is executed.\n    //\n    // This executor chaining is done by Future::poll whose second argument\n    // is a std::task::Context. This represents our executor, and the Future\n    // implemented by this async block can be polled using the parent async\n    // block's executor.\n    let fut_tx_result = async move {\n      (0..100).for_each(|v| {\n        tx.unbounded_send(v).expect(\"Failed to send\");\n      })\n    };\n    // Use the provided thread pool to spawn the generated future\n    // responsible for transmission\n    pool.spawn_ok(fut_tx_result);\n    let fut_values = rx\n      .map(|v| v * 2)\n      .collect();\n    // Use the executor provided to this async block to wait for the\n    // future to complete.\n    fut_values.await\n  };\n  // Actually execute the above future, which will invoke Future::poll and\n  // subsequently chain appropriate Future::poll and methods needing executors\n  // to drive all futures. Eventually fut_values will be driven to completion.\n  let values: Vec<i32> = executor::block_on(fut_values);\n  println!(\"Values={:?}\", values);\n}\n```\n\nThe majority of examples and code snippets in this crate assume that they are inside an async block as written above.\n## Re-exports[\u00a7](https://docs.rs/futures/latest/futures/#reexports)\n\n`pub use futures_core::future::Future[](https://docs.rs/futures/latest/futures/prelude/trait.Future.html \"trait futures::prelude::Future\");`\n\n\n`pub use futures_core::future::TryFuture[](https://docs.rs/futures/latest/futures/prelude/trait.TryFuture.html \"trait futures::prelude::TryFuture\");`\n\n\n`pub use futures_util::future::FutureExt[](https://docs.rs/futures/latest/futures/future/trait.FutureExt.html \"trait futures::future::FutureExt\");`\n\n\n`pub use futures_util::future::TryFutureExt[](https://docs.rs/futures/latest/futures/future/trait.TryFutureExt.html \"trait futures::future::TryFutureExt\");`\n\n\n`pub use futures_core::stream::Stream[](https://docs.rs/futures/latest/futures/prelude/trait.Stream.html \"trait futures::prelude::Stream\");`\n\n\n`pub use futures_core::stream::TryStream[](https://docs.rs/futures/latest/futures/prelude/trait.TryStream.html \"trait futures::prelude::TryStream\");`\n\n\n`pub use futures_util::stream::StreamExt[](https://docs.rs/futures/latest/futures/stream/trait.StreamExt.html \"trait futures::stream::StreamExt\");`\n\n\n`pub use futures_util::stream::TryStreamExt[](https://docs.rs/futures/latest/futures/stream/trait.TryStreamExt.html \"trait futures::stream::TryStreamExt\");`\n\n\n`pub use futures_sink::Sink[](https://docs.rs/futures/latest/futures/prelude/trait.Sink.html \"trait futures::prelude::Sink\");`\n\n\n`pub use futures_util::sink::SinkExt[](https://docs.rs/futures/latest/futures/sink/trait.SinkExt.html \"trait futures::sink::SinkExt\");`\n\n\n`pub use futures_io::AsyncBufRead[](https://docs.rs/futures/latest/futures/prelude/trait.AsyncBufRead.html \"trait futures::prelude::AsyncBufRead\");`\n\n\n`pub use futures_io::AsyncRead[](https://docs.rs/futures/latest/futures/prelude/trait.AsyncRead.html \"trait futures::prelude::AsyncRead\");`\n\n\n`pub use futures_io::AsyncSeek[](https://docs.rs/futures/latest/futures/prelude/trait.AsyncSeek.html \"trait futures::prelude::AsyncSeek\");`\n\n\n`pub use futures_io::AsyncWrite[](https://docs.rs/futures/latest/futures/prelude/trait.AsyncWrite.html \"trait futures::prelude::AsyncWrite\");`\n\n\n`pub use futures_util::AsyncBufReadExt[](https://docs.rs/futures/latest/futures/io/trait.AsyncBufReadExt.html \"trait futures::io::AsyncBufReadExt\");`\n\n\n`pub use futures_util::AsyncReadExt[](https://docs.rs/futures/latest/futures/io/trait.AsyncReadExt.html \"trait futures::io::AsyncReadExt\");`\n\n\n`pub use futures_util::AsyncSeekExt[](https://docs.rs/futures/latest/futures/io/trait.AsyncSeekExt.html \"trait futures::io::AsyncSeekExt\");`\n\n\n`pub use futures_util::AsyncWriteExt[](https://docs.rs/futures/latest/futures/io/trait.AsyncWriteExt.html \"trait futures::io::AsyncWriteExt\");`\n\n## Modules[\u00a7](https://docs.rs/futures/latest/futures/#modules)\n\n[channel](https://docs.rs/futures/latest/futures/channel/index.html \"mod futures::channel\")\n    Asynchronous channels.\n\n[compat](https://docs.rs/futures/latest/futures/compat/index.html \"mod futures::compat\")`compat`\n    Interop between `futures` 0.1 and 0.3.\n\n[executor](https://docs.rs/futures/latest/futures/executor/index.html \"mod futures::executor\")`executor`\n    Built-in executors and related tools.\n\n[future](https://docs.rs/futures/latest/futures/future/index.html \"mod futures::future\")\n    Asynchronous values.\n\n[io](https://docs.rs/futures/latest/futures/io/index.html \"mod futures::io\")\n    Asynchronous I/O.\n\n[lock](https://docs.rs/futures/latest/futures/lock/index.html \"mod futures::lock\")\n    Futures-powered synchronization primitives.\n\n[never](https://docs.rs/futures/latest/futures/never/index.html \"mod futures::never\")\n    This module contains the `Never` type.\n\n[prelude](https://docs.rs/futures/latest/futures/prelude/index.html \"mod futures::prelude\")\n    A \u201cprelude\u201d for crates using the `futures` crate.\n\n[sink](https://docs.rs/futures/latest/futures/sink/index.html \"mod futures::sink\")\n    Asynchronous sinks.\n\n[stream](https://docs.rs/futures/latest/futures/stream/index.html \"mod futures::stream\")\n    Asynchronous streams.\n\n[task](https://docs.rs/futures/latest/futures/task/index.html \"mod futures::task\")\n    Tools for working with tasks.\n## Macros[\u00a7](https://docs.rs/futures/latest/futures/#macros)\n\n[join](https://docs.rs/futures/latest/futures/macro.join.html \"macro futures::join\")\n    Polls multiple futures simultaneously, returning a tuple of all results once complete.\n\n[pending](https://docs.rs/futures/latest/futures/macro.pending.html \"macro futures::pending\")\n    A macro which yields to the event loop once.\n\n[pin_mut](https://docs.rs/futures/latest/futures/macro.pin_mut.html \"macro futures::pin_mut\")\n    Pins a value on the stack.\n\n[poll](https://docs.rs/futures/latest/futures/macro.poll.html \"macro futures::poll\")\n    A macro which returns the result of polling a future once within the current `async` context.\n\n[ready](https://docs.rs/futures/latest/futures/macro.ready.html \"macro futures::ready\")\n    Extracts the successful type of a `Poll<T>`.\n\n[select](https://docs.rs/futures/latest/futures/macro.select.html \"macro futures::select\")\n    Polls multiple futures and streams simultaneously, executing the branch for the future that finishes first. If multiple futures are ready, one will be pseudo-randomly selected at runtime. Futures directly passed to `select!` must be `Unpin` and implement `FusedFuture`.\n\n[select_biased](https://docs.rs/futures/latest/futures/macro.select_biased.html \"macro futures::select_biased\")\n    Polls multiple futures and streams simultaneously, executing the branch for the future that finishes first. Unlike [`select!`](https://docs.rs/futures/latest/futures/macro.select.html), if multiple futures are ready, one will be selected in order of declaration. Futures directly passed to `select_biased!` must be `Unpin` and implement `FusedFuture`.\n\n[stream_select](https://docs.rs/futures/latest/futures/macro.stream_select.html \"macro futures::stream_select\")\n    Combines several streams, all producing the same `Item` type, into one stream. This is similar to `select_all` but does not require the streams to all be the same type. It also keeps the streams inline, and does not require `Box<dyn Stream>`s to be allocated. Streams passed to this macro must be `Unpin`.\n\n[try_join](https://docs.rs/futures/latest/futures/macro.try_join.html \"macro futures::try_join\")\n    Polls multiple futures simultaneously, resolving to a [`Result`](https://doc.rust-lang.org/nightly/core/result/enum.Result.html \"enum core::result::Result\") containing either a tuple of the successful outputs or an error.\n",
            "markdown_with_citations": "[](https://docs.rs/futures/latest/futures/all.html \"show sidebar\")\n# Crate futuresCopy item path\nSettings\u27e81\u27e9\nHelp\u27e82\u27e9\nSummarySource\u27e83\u27e9\nExpand description\nAbstractions for asynchronous programming.\nThis crate provides a number of core abstractions for writing asynchronous code:\n  * Futures\u27e84\u27e9 are single eventual values produced by asynchronous computations. Some programming languages (e.g. JavaScript) call this concept \u201cpromise\u201d.\n  * Streams\u27e85\u27e9 represent a series of values produced asynchronously.\n  * Sinks\u27e86\u27e9 provide support for asynchronous writing of data.\n  * Executors\u27e87\u27e9 are responsible for running asynchronous tasks.\n\n\nThe crate also contains abstractions for asynchronous I/O\u27e88\u27e9 and cross-task communication\u27e89\u27e9.\nUnderlying all of this is the _task system_ , which is a form of lightweight threading. Large asynchronous computations are built up using futures, streams and sinks, and then spawned as independent tasks that are run to completion, but _do not block_ the thread running them.\nThe following example describes how the task system context is built and used within macros and keywords such as async and await!.\n```\nfn main() {\n  let pool = ThreadPool::new().expect(\"Failed to build pool\");\n  let (tx, rx) = mpsc::unbounded::<i32>();\n  // Create a future by an async block, where async is responsible for an\n  // implementation of Future. At this point no executor has been provided\n  // to this future, so it will not be running.\n  let fut_values = async {\n    // Create another async block, again where the Future implementation\n    // is generated by async. Since this is inside of a parent async block,\n    // it will be provided with the executor of the parent block when the parent\n    // block is executed.\n    //\n    // This executor chaining is done by Future::poll whose second argument\n    // is a std::task::Context. This represents our executor, and the Future\n    // implemented by this async block can be polled using the parent async\n    // block's executor.\n    let fut_tx_result = async move {\n      (0..100).for_each(|v| {\n        tx.unbounded_send(v).expect(\"Failed to send\");\n      })\n    };\n    // Use the provided thread pool to spawn the generated future\n    // responsible for transmission\n    pool.spawn_ok(fut_tx_result);\n    let fut_values = rx\n      .map(|v| v * 2)\n      .collect();\n    // Use the executor provided to this async block to wait for the\n    // future to complete.\n    fut_values.await\n  };\n  // Actually execute the above future, which will invoke Future::poll and\n  // subsequently chain appropriate Future::poll and methods needing executors\n  // to drive all futures. Eventually fut_values will be driven to completion.\n  let values: Vec<i32> = executor::block_on(fut_values);\n  println!(\"Values={:?}\", values);\n}\n```\n\nThe majority of examples and code snippets in this crate assume that they are inside an async block as written above.\n## Re-exports\u00a7\u27e810\u27e9\n\n`pub use futures_core::future::Future[](https://docs.rs/futures/latest/futures/prelude/trait.Future.html \"trait futures::prelude::Future\");`\n\n\n`pub use futures_core::future::TryFuture[](https://docs.rs/futures/latest/futures/prelude/trait.TryFuture.html \"trait futures::prelude::TryFuture\");`\n\n\n`pub use futures_util::future::FutureExt[](https://docs.rs/futures/latest/futures/future/trait.FutureExt.html \"trait futures::future::FutureExt\");`\n\n\n`pub use futures_util::future::TryFutureExt[](https://docs.rs/futures/latest/futures/future/trait.TryFutureExt.html \"trait futures::future::TryFutureExt\");`\n\n\n`pub use futures_core::stream::Stream[](https://docs.rs/futures/latest/futures/prelude/trait.Stream.html \"trait futures::prelude::Stream\");`\n\n\n`pub use futures_core::stream::TryStream[](https://docs.rs/futures/latest/futures/prelude/trait.TryStream.html \"trait futures::prelude::TryStream\");`\n\n\n`pub use futures_util::stream::StreamExt[](https://docs.rs/futures/latest/futures/stream/trait.StreamExt.html \"trait futures::stream::StreamExt\");`\n\n\n`pub use futures_util::stream::TryStreamExt[](https://docs.rs/futures/latest/futures/stream/trait.TryStreamExt.html \"trait futures::stream::TryStreamExt\");`\n\n\n`pub use futures_sink::Sink[](https://docs.rs/futures/latest/futures/prelude/trait.Sink.html \"trait futures::prelude::Sink\");`\n\n\n`pub use futures_util::sink::SinkExt[](https://docs.rs/futures/latest/futures/sink/trait.SinkExt.html \"trait futures::sink::SinkExt\");`\n\n\n`pub use futures_io::AsyncBufRead[](https://docs.rs/futures/latest/futures/prelude/trait.AsyncBufRead.html \"trait futures::prelude::AsyncBufRead\");`\n\n\n`pub use futures_io::AsyncRead[](https://docs.rs/futures/latest/futures/prelude/trait.AsyncRead.html \"trait futures::prelude::AsyncRead\");`\n\n\n`pub use futures_io::AsyncSeek[](https://docs.rs/futures/latest/futures/prelude/trait.AsyncSeek.html \"trait futures::prelude::AsyncSeek\");`\n\n\n`pub use futures_io::AsyncWrite[](https://docs.rs/futures/latest/futures/prelude/trait.AsyncWrite.html \"trait futures::prelude::AsyncWrite\");`\n\n\n`pub use futures_util::AsyncBufReadExt[](https://docs.rs/futures/latest/futures/io/trait.AsyncBufReadExt.html \"trait futures::io::AsyncBufReadExt\");`\n\n\n`pub use futures_util::AsyncReadExt[](https://docs.rs/futures/latest/futures/io/trait.AsyncReadExt.html \"trait futures::io::AsyncReadExt\");`\n\n\n`pub use futures_util::AsyncSeekExt[](https://docs.rs/futures/latest/futures/io/trait.AsyncSeekExt.html \"trait futures::io::AsyncSeekExt\");`\n\n\n`pub use futures_util::AsyncWriteExt[](https://docs.rs/futures/latest/futures/io/trait.AsyncWriteExt.html \"trait futures::io::AsyncWriteExt\");`\n\n## Modules\u00a7\u27e811\u27e9\n\nchannel\u27e89\u27e9\n    Asynchronous channels.\n\ncompat\u27e812\u27e9`compat`\n    Interop between `futures` 0.1 and 0.3.\n\nexecutor\u27e87\u27e9`executor`\n    Built-in executors and related tools.\n\nfuture\u27e84\u27e9\n    Asynchronous values.\n\nio\u27e88\u27e9\n    Asynchronous I/O.\n\nlock\u27e813\u27e9\n    Futures-powered synchronization primitives.\n\nnever\u27e814\u27e9\n    This module contains the `Never` type.\n\nprelude\u27e815\u27e9\n    A \u201cprelude\u201d for crates using the `futures` crate.\n\nsink\u27e86\u27e9\n    Asynchronous sinks.\n\nstream\u27e85\u27e9\n    Asynchronous streams.\n\ntask\u27e816\u27e9\n    Tools for working with tasks.\n## Macros\u00a7\u27e817\u27e9\n\njoin\u27e818\u27e9\n    Polls multiple futures simultaneously, returning a tuple of all results once complete.\n\npending\u27e819\u27e9\n    A macro which yields to the event loop once.\n\npin_mut\u27e820\u27e9\n    Pins a value on the stack.\n\npoll\u27e821\u27e9\n    A macro which returns the result of polling a future once within the current `async` context.\n\nready\u27e822\u27e9\n    Extracts the successful type of a `Poll<T>`.\n\nselect\u27e823\u27e9\n    Polls multiple futures and streams simultaneously, executing the branch for the future that finishes first. If multiple futures are ready, one will be pseudo-randomly selected at runtime. Futures directly passed to `select!` must be `Unpin` and implement `FusedFuture`.\n\nselect_biased\u27e824\u27e9\n    Polls multiple futures and streams simultaneously, executing the branch for the future that finishes first. Unlike `select!`\u27e823\u27e9, if multiple futures are ready, one will be selected in order of declaration. Futures directly passed to `select_biased!` must be `Unpin` and implement `FusedFuture`.\n\nstream_select\u27e825\u27e9\n    Combines several streams, all producing the same `Item` type, into one stream. This is similar to `select_all` but does not require the streams to all be the same type. It also keeps the streams inline, and does not require `Box<dyn Stream>`s to be allocated. Streams passed to this macro must be `Unpin`.\n\ntry_join\u27e826\u27e9\n    Polls multiple futures simultaneously, resolving to a `Result`\u27e827\u27e9 containing either a tuple of the successful outputs or an error.\n",
            "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://docs.rs/futures/latest/settings.html: Settings\n\u27e82\u27e9 https://docs.rs/futures/latest/help.html: Help\n\u27e83\u27e9 https://docs.rs/futures/latest/src/futures/lib.rs.html#1-254: Source\n\u27e84\u27e9 https://docs.rs/futures/latest/futures/future/index.html: mod futures::future - Futures\n\u27e85\u27e9 https://docs.rs/futures/latest/futures/stream/index.html: mod futures::stream - Streams\n\u27e86\u27e9 https://docs.rs/futures/latest/futures/sink/index.html: mod futures::sink - Sinks\n\u27e87\u27e9 https://docs.rs/futures/latest/futures/executor/index.html: mod futures::executor - Executors\n\u27e88\u27e9 https://docs.rs/futures/latest/futures/io/index.html: mod futures::io - asynchronous I/O\n\u27e89\u27e9 https://docs.rs/futures/latest/futures/channel/index.html: mod futures::channel - cross-task communication\n\u27e810\u27e9 https://docs.rs/futures/latest/futures/#reexports: \u00a7\n\u27e811\u27e9 https://docs.rs/futures/latest/futures/#modules: \u00a7\n\u27e812\u27e9 https://docs.rs/futures/latest/futures/compat/index.html: mod futures::compat - compat\n\u27e813\u27e9 https://docs.rs/futures/latest/futures/lock/index.html: mod futures::lock - lock\n\u27e814\u27e9 https://docs.rs/futures/latest/futures/never/index.html: mod futures::never - never\n\u27e815\u27e9 https://docs.rs/futures/latest/futures/prelude/index.html: mod futures::prelude - prelude\n\u27e816\u27e9 https://docs.rs/futures/latest/futures/task/index.html: mod futures::task - task\n\u27e817\u27e9 https://docs.rs/futures/latest/futures/#macros: \u00a7\n\u27e818\u27e9 https://docs.rs/futures/latest/futures/macro.join.html: macro futures::join - join\n\u27e819\u27e9 https://docs.rs/futures/latest/futures/macro.pending.html: macro futures::pending - pending\n\u27e820\u27e9 https://docs.rs/futures/latest/futures/macro.pin_mut.html: macro futures::pin_mut - pin_mut\n\u27e821\u27e9 https://docs.rs/futures/latest/futures/macro.poll.html: macro futures::poll - poll\n\u27e822\u27e9 https://docs.rs/futures/latest/futures/macro.ready.html: macro futures::ready - ready\n\u27e823\u27e9 https://docs.rs/futures/latest/futures/macro.select.html: macro futures::select - select\n\u27e824\u27e9 https://docs.rs/futures/latest/futures/macro.select_biased.html: macro futures::select_biased - select_biased\n\u27e825\u27e9 https://docs.rs/futures/latest/futures/macro.stream_select.html: macro futures::stream_select - stream_select\n\u27e826\u27e9 https://docs.rs/futures/latest/futures/macro.try_join.html: macro futures::try_join - try_join\n\u27e827\u27e9 https://doc.rust-lang.org/nightly/core/result/enum.Result.html: enum core::result::Result - `Result`\n",
            "fit_markdown": "",
            "fit_html": ""
          },
          "downloads": 0,
          "github_stars": 0,
          "dependencies": [],
          "features": {},
          "code_snippets": [],
          "readme_sections": {},
          "librs_downloads": null,
          "source": "crates.io",
          "enhanced_scraping": {},
          "enhanced_features": [],
          "enhanced_dependencies": []
        },
        "enriched_crate": {
          "name": "futures",
          "version": "0.3.31",
          "description": "ALLOW: Positive community sentiment",
          "repository": "",
          "keywords": [],
          "categories": [],
          "readme": {
            "raw_markdown": "[](https://docs.rs/futures/latest/futures/all.html \"show sidebar\")\n# Crate futuresCopy item path\n[Settings](https://docs.rs/futures/latest/settings.html)\n[Help](https://docs.rs/futures/latest/help.html)\nSummary[Source](https://docs.rs/futures/latest/src/futures/lib.rs.html#1-254)\nExpand description\nAbstractions for asynchronous programming.\nThis crate provides a number of core abstractions for writing asynchronous code:\n  * [Futures](https://docs.rs/futures/latest/futures/future/index.html \"mod futures::future\") are single eventual values produced by asynchronous computations. Some programming languages (e.g. JavaScript) call this concept \u201cpromise\u201d.\n  * [Streams](https://docs.rs/futures/latest/futures/stream/index.html \"mod futures::stream\") represent a series of values produced asynchronously.\n  * [Sinks](https://docs.rs/futures/latest/futures/sink/index.html \"mod futures::sink\") provide support for asynchronous writing of data.\n  * [Executors](https://docs.rs/futures/latest/futures/executor/index.html \"mod futures::executor\") are responsible for running asynchronous tasks.\n\n\nThe crate also contains abstractions for [asynchronous I/O](https://docs.rs/futures/latest/futures/io/index.html \"mod futures::io\") and [cross-task communication](https://docs.rs/futures/latest/futures/channel/index.html \"mod futures::channel\").\nUnderlying all of this is the _task system_ , which is a form of lightweight threading. Large asynchronous computations are built up using futures, streams and sinks, and then spawned as independent tasks that are run to completion, but _do not block_ the thread running them.\nThe following example describes how the task system context is built and used within macros and keywords such as async and await!.\n```\nfn main() {\n  let pool = ThreadPool::new().expect(\"Failed to build pool\");\n  let (tx, rx) = mpsc::unbounded::<i32>();\n  // Create a future by an async block, where async is responsible for an\n  // implementation of Future. At this point no executor has been provided\n  // to this future, so it will not be running.\n  let fut_values = async {\n    // Create another async block, again where the Future implementation\n    // is generated by async. Since this is inside of a parent async block,\n    // it will be provided with the executor of the parent block when the parent\n    // block is executed.\n    //\n    // This executor chaining is done by Future::poll whose second argument\n    // is a std::task::Context. This represents our executor, and the Future\n    // implemented by this async block can be polled using the parent async\n    // block's executor.\n    let fut_tx_result = async move {\n      (0..100).for_each(|v| {\n        tx.unbounded_send(v).expect(\"Failed to send\");\n      })\n    };\n    // Use the provided thread pool to spawn the generated future\n    // responsible for transmission\n    pool.spawn_ok(fut_tx_result);\n    let fut_values = rx\n      .map(|v| v * 2)\n      .collect();\n    // Use the executor provided to this async block to wait for the\n    // future to complete.\n    fut_values.await\n  };\n  // Actually execute the above future, which will invoke Future::poll and\n  // subsequently chain appropriate Future::poll and methods needing executors\n  // to drive all futures. Eventually fut_values will be driven to completion.\n  let values: Vec<i32> = executor::block_on(fut_values);\n  println!(\"Values={:?}\", values);\n}\n```\n\nThe majority of examples and code snippets in this crate assume that they are inside an async block as written above.\n## Re-exports[\u00a7](https://docs.rs/futures/latest/futures/#reexports)\n\n`pub use futures_core::future::Future[](https://docs.rs/futures/latest/futures/prelude/trait.Future.html \"trait futures::prelude::Future\");`\n\n\n`pub use futures_core::future::TryFuture[](https://docs.rs/futures/latest/futures/prelude/trait.TryFuture.html \"trait futures::prelude::TryFuture\");`\n\n\n`pub use futures_util::future::FutureExt[](https://docs.rs/futures/latest/futures/future/trait.FutureExt.html \"trait futures::future::FutureExt\");`\n\n\n`pub use futures_util::future::TryFutureExt[](https://docs.rs/futures/latest/futures/future/trait.TryFutureExt.html \"trait futures::future::TryFutureExt\");`\n\n\n`pub use futures_core::stream::Stream[](https://docs.rs/futures/latest/futures/prelude/trait.Stream.html \"trait futures::prelude::Stream\");`\n\n\n`pub use futures_core::stream::TryStream[](https://docs.rs/futures/latest/futures/prelude/trait.TryStream.html \"trait futures::prelude::TryStream\");`\n\n\n`pub use futures_util::stream::StreamExt[](https://docs.rs/futures/latest/futures/stream/trait.StreamExt.html \"trait futures::stream::StreamExt\");`\n\n\n`pub use futures_util::stream::TryStreamExt[](https://docs.rs/futures/latest/futures/stream/trait.TryStreamExt.html \"trait futures::stream::TryStreamExt\");`\n\n\n`pub use futures_sink::Sink[](https://docs.rs/futures/latest/futures/prelude/trait.Sink.html \"trait futures::prelude::Sink\");`\n\n\n`pub use futures_util::sink::SinkExt[](https://docs.rs/futures/latest/futures/sink/trait.SinkExt.html \"trait futures::sink::SinkExt\");`\n\n\n`pub use futures_io::AsyncBufRead[](https://docs.rs/futures/latest/futures/prelude/trait.AsyncBufRead.html \"trait futures::prelude::AsyncBufRead\");`\n\n\n`pub use futures_io::AsyncRead[](https://docs.rs/futures/latest/futures/prelude/trait.AsyncRead.html \"trait futures::prelude::AsyncRead\");`\n\n\n`pub use futures_io::AsyncSeek[](https://docs.rs/futures/latest/futures/prelude/trait.AsyncSeek.html \"trait futures::prelude::AsyncSeek\");`\n\n\n`pub use futures_io::AsyncWrite[](https://docs.rs/futures/latest/futures/prelude/trait.AsyncWrite.html \"trait futures::prelude::AsyncWrite\");`\n\n\n`pub use futures_util::AsyncBufReadExt[](https://docs.rs/futures/latest/futures/io/trait.AsyncBufReadExt.html \"trait futures::io::AsyncBufReadExt\");`\n\n\n`pub use futures_util::AsyncReadExt[](https://docs.rs/futures/latest/futures/io/trait.AsyncReadExt.html \"trait futures::io::AsyncReadExt\");`\n\n\n`pub use futures_util::AsyncSeekExt[](https://docs.rs/futures/latest/futures/io/trait.AsyncSeekExt.html \"trait futures::io::AsyncSeekExt\");`\n\n\n`pub use futures_util::AsyncWriteExt[](https://docs.rs/futures/latest/futures/io/trait.AsyncWriteExt.html \"trait futures::io::AsyncWriteExt\");`\n\n## Modules[\u00a7](https://docs.rs/futures/latest/futures/#modules)\n\n[channel](https://docs.rs/futures/latest/futures/channel/index.html \"mod futures::channel\")\n    Asynchronous channels.\n\n[compat](https://docs.rs/futures/latest/futures/compat/index.html \"mod futures::compat\")`compat`\n    Interop between `futures` 0.1 and 0.3.\n\n[executor](https://docs.rs/futures/latest/futures/executor/index.html \"mod futures::executor\")`executor`\n    Built-in executors and related tools.\n\n[future](https://docs.rs/futures/latest/futures/future/index.html \"mod futures::future\")\n    Asynchronous values.\n\n[io](https://docs.rs/futures/latest/futures/io/index.html \"mod futures::io\")\n    Asynchronous I/O.\n\n[lock](https://docs.rs/futures/latest/futures/lock/index.html \"mod futures::lock\")\n    Futures-powered synchronization primitives.\n\n[never](https://docs.rs/futures/latest/futures/never/index.html \"mod futures::never\")\n    This module contains the `Never` type.\n\n[prelude](https://docs.rs/futures/latest/futures/prelude/index.html \"mod futures::prelude\")\n    A \u201cprelude\u201d for crates using the `futures` crate.\n\n[sink](https://docs.rs/futures/latest/futures/sink/index.html \"mod futures::sink\")\n    Asynchronous sinks.\n\n[stream](https://docs.rs/futures/latest/futures/stream/index.html \"mod futures::stream\")\n    Asynchronous streams.\n\n[task](https://docs.rs/futures/latest/futures/task/index.html \"mod futures::task\")\n    Tools for working with tasks.\n## Macros[\u00a7](https://docs.rs/futures/latest/futures/#macros)\n\n[join](https://docs.rs/futures/latest/futures/macro.join.html \"macro futures::join\")\n    Polls multiple futures simultaneously, returning a tuple of all results once complete.\n\n[pending](https://docs.rs/futures/latest/futures/macro.pending.html \"macro futures::pending\")\n    A macro which yields to the event loop once.\n\n[pin_mut](https://docs.rs/futures/latest/futures/macro.pin_mut.html \"macro futures::pin_mut\")\n    Pins a value on the stack.\n\n[poll](https://docs.rs/futures/latest/futures/macro.poll.html \"macro futures::poll\")\n    A macro which returns the result of polling a future once within the current `async` context.\n\n[ready](https://docs.rs/futures/latest/futures/macro.ready.html \"macro futures::ready\")\n    Extracts the successful type of a `Poll<T>`.\n\n[select](https://docs.rs/futures/latest/futures/macro.select.html \"macro futures::select\")\n    Polls multiple futures and streams simultaneously, executing the branch for the future that finishes first. If multiple futures are ready, one will be pseudo-randomly selected at runtime. Futures directly passed to `select!` must be `Unpin` and implement `FusedFuture`.\n\n[select_biased](https://docs.rs/futures/latest/futures/macro.select_biased.html \"macro futures::select_biased\")\n    Polls multiple futures and streams simultaneously, executing the branch for the future that finishes first. Unlike [`select!`](https://docs.rs/futures/latest/futures/macro.select.html), if multiple futures are ready, one will be selected in order of declaration. Futures directly passed to `select_biased!` must be `Unpin` and implement `FusedFuture`.\n\n[stream_select](https://docs.rs/futures/latest/futures/macro.stream_select.html \"macro futures::stream_select\")\n    Combines several streams, all producing the same `Item` type, into one stream. This is similar to `select_all` but does not require the streams to all be the same type. It also keeps the streams inline, and does not require `Box<dyn Stream>`s to be allocated. Streams passed to this macro must be `Unpin`.\n\n[try_join](https://docs.rs/futures/latest/futures/macro.try_join.html \"macro futures::try_join\")\n    Polls multiple futures simultaneously, resolving to a [`Result`](https://doc.rust-lang.org/nightly/core/result/enum.Result.html \"enum core::result::Result\") containing either a tuple of the successful outputs or an error.\n",
            "markdown_with_citations": "[](https://docs.rs/futures/latest/futures/all.html \"show sidebar\")\n# Crate futuresCopy item path\nSettings\u27e81\u27e9\nHelp\u27e82\u27e9\nSummarySource\u27e83\u27e9\nExpand description\nAbstractions for asynchronous programming.\nThis crate provides a number of core abstractions for writing asynchronous code:\n  * Futures\u27e84\u27e9 are single eventual values produced by asynchronous computations. Some programming languages (e.g. JavaScript) call this concept \u201cpromise\u201d.\n  * Streams\u27e85\u27e9 represent a series of values produced asynchronously.\n  * Sinks\u27e86\u27e9 provide support for asynchronous writing of data.\n  * Executors\u27e87\u27e9 are responsible for running asynchronous tasks.\n\n\nThe crate also contains abstractions for asynchronous I/O\u27e88\u27e9 and cross-task communication\u27e89\u27e9.\nUnderlying all of this is the _task system_ , which is a form of lightweight threading. Large asynchronous computations are built up using futures, streams and sinks, and then spawned as independent tasks that are run to completion, but _do not block_ the thread running them.\nThe following example describes how the task system context is built and used within macros and keywords such as async and await!.\n```\nfn main() {\n  let pool = ThreadPool::new().expect(\"Failed to build pool\");\n  let (tx, rx) = mpsc::unbounded::<i32>();\n  // Create a future by an async block, where async is responsible for an\n  // implementation of Future. At this point no executor has been provided\n  // to this future, so it will not be running.\n  let fut_values = async {\n    // Create another async block, again where the Future implementation\n    // is generated by async. Since this is inside of a parent async block,\n    // it will be provided with the executor of the parent block when the parent\n    // block is executed.\n    //\n    // This executor chaining is done by Future::poll whose second argument\n    // is a std::task::Context. This represents our executor, and the Future\n    // implemented by this async block can be polled using the parent async\n    // block's executor.\n    let fut_tx_result = async move {\n      (0..100).for_each(|v| {\n        tx.unbounded_send(v).expect(\"Failed to send\");\n      })\n    };\n    // Use the provided thread pool to spawn the generated future\n    // responsible for transmission\n    pool.spawn_ok(fut_tx_result);\n    let fut_values = rx\n      .map(|v| v * 2)\n      .collect();\n    // Use the executor provided to this async block to wait for the\n    // future to complete.\n    fut_values.await\n  };\n  // Actually execute the above future, which will invoke Future::poll and\n  // subsequently chain appropriate Future::poll and methods needing executors\n  // to drive all futures. Eventually fut_values will be driven to completion.\n  let values: Vec<i32> = executor::block_on(fut_values);\n  println!(\"Values={:?}\", values);\n}\n```\n\nThe majority of examples and code snippets in this crate assume that they are inside an async block as written above.\n## Re-exports\u00a7\u27e810\u27e9\n\n`pub use futures_core::future::Future[](https://docs.rs/futures/latest/futures/prelude/trait.Future.html \"trait futures::prelude::Future\");`\n\n\n`pub use futures_core::future::TryFuture[](https://docs.rs/futures/latest/futures/prelude/trait.TryFuture.html \"trait futures::prelude::TryFuture\");`\n\n\n`pub use futures_util::future::FutureExt[](https://docs.rs/futures/latest/futures/future/trait.FutureExt.html \"trait futures::future::FutureExt\");`\n\n\n`pub use futures_util::future::TryFutureExt[](https://docs.rs/futures/latest/futures/future/trait.TryFutureExt.html \"trait futures::future::TryFutureExt\");`\n\n\n`pub use futures_core::stream::Stream[](https://docs.rs/futures/latest/futures/prelude/trait.Stream.html \"trait futures::prelude::Stream\");`\n\n\n`pub use futures_core::stream::TryStream[](https://docs.rs/futures/latest/futures/prelude/trait.TryStream.html \"trait futures::prelude::TryStream\");`\n\n\n`pub use futures_util::stream::StreamExt[](https://docs.rs/futures/latest/futures/stream/trait.StreamExt.html \"trait futures::stream::StreamExt\");`\n\n\n`pub use futures_util::stream::TryStreamExt[](https://docs.rs/futures/latest/futures/stream/trait.TryStreamExt.html \"trait futures::stream::TryStreamExt\");`\n\n\n`pub use futures_sink::Sink[](https://docs.rs/futures/latest/futures/prelude/trait.Sink.html \"trait futures::prelude::Sink\");`\n\n\n`pub use futures_util::sink::SinkExt[](https://docs.rs/futures/latest/futures/sink/trait.SinkExt.html \"trait futures::sink::SinkExt\");`\n\n\n`pub use futures_io::AsyncBufRead[](https://docs.rs/futures/latest/futures/prelude/trait.AsyncBufRead.html \"trait futures::prelude::AsyncBufRead\");`\n\n\n`pub use futures_io::AsyncRead[](https://docs.rs/futures/latest/futures/prelude/trait.AsyncRead.html \"trait futures::prelude::AsyncRead\");`\n\n\n`pub use futures_io::AsyncSeek[](https://docs.rs/futures/latest/futures/prelude/trait.AsyncSeek.html \"trait futures::prelude::AsyncSeek\");`\n\n\n`pub use futures_io::AsyncWrite[](https://docs.rs/futures/latest/futures/prelude/trait.AsyncWrite.html \"trait futures::prelude::AsyncWrite\");`\n\n\n`pub use futures_util::AsyncBufReadExt[](https://docs.rs/futures/latest/futures/io/trait.AsyncBufReadExt.html \"trait futures::io::AsyncBufReadExt\");`\n\n\n`pub use futures_util::AsyncReadExt[](https://docs.rs/futures/latest/futures/io/trait.AsyncReadExt.html \"trait futures::io::AsyncReadExt\");`\n\n\n`pub use futures_util::AsyncSeekExt[](https://docs.rs/futures/latest/futures/io/trait.AsyncSeekExt.html \"trait futures::io::AsyncSeekExt\");`\n\n\n`pub use futures_util::AsyncWriteExt[](https://docs.rs/futures/latest/futures/io/trait.AsyncWriteExt.html \"trait futures::io::AsyncWriteExt\");`\n\n## Modules\u00a7\u27e811\u27e9\n\nchannel\u27e89\u27e9\n    Asynchronous channels.\n\ncompat\u27e812\u27e9`compat`\n    Interop between `futures` 0.1 and 0.3.\n\nexecutor\u27e87\u27e9`executor`\n    Built-in executors and related tools.\n\nfuture\u27e84\u27e9\n    Asynchronous values.\n\nio\u27e88\u27e9\n    Asynchronous I/O.\n\nlock\u27e813\u27e9\n    Futures-powered synchronization primitives.\n\nnever\u27e814\u27e9\n    This module contains the `Never` type.\n\nprelude\u27e815\u27e9\n    A \u201cprelude\u201d for crates using the `futures` crate.\n\nsink\u27e86\u27e9\n    Asynchronous sinks.\n\nstream\u27e85\u27e9\n    Asynchronous streams.\n\ntask\u27e816\u27e9\n    Tools for working with tasks.\n## Macros\u00a7\u27e817\u27e9\n\njoin\u27e818\u27e9\n    Polls multiple futures simultaneously, returning a tuple of all results once complete.\n\npending\u27e819\u27e9\n    A macro which yields to the event loop once.\n\npin_mut\u27e820\u27e9\n    Pins a value on the stack.\n\npoll\u27e821\u27e9\n    A macro which returns the result of polling a future once within the current `async` context.\n\nready\u27e822\u27e9\n    Extracts the successful type of a `Poll<T>`.\n\nselect\u27e823\u27e9\n    Polls multiple futures and streams simultaneously, executing the branch for the future that finishes first. If multiple futures are ready, one will be pseudo-randomly selected at runtime. Futures directly passed to `select!` must be `Unpin` and implement `FusedFuture`.\n\nselect_biased\u27e824\u27e9\n    Polls multiple futures and streams simultaneously, executing the branch for the future that finishes first. Unlike `select!`\u27e823\u27e9, if multiple futures are ready, one will be selected in order of declaration. Futures directly passed to `select_biased!` must be `Unpin` and implement `FusedFuture`.\n\nstream_select\u27e825\u27e9\n    Combines several streams, all producing the same `Item` type, into one stream. This is similar to `select_all` but does not require the streams to all be the same type. It also keeps the streams inline, and does not require `Box<dyn Stream>`s to be allocated. Streams passed to this macro must be `Unpin`.\n\ntry_join\u27e826\u27e9\n    Polls multiple futures simultaneously, resolving to a `Result`\u27e827\u27e9 containing either a tuple of the successful outputs or an error.\n",
            "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://docs.rs/futures/latest/settings.html: Settings\n\u27e82\u27e9 https://docs.rs/futures/latest/help.html: Help\n\u27e83\u27e9 https://docs.rs/futures/latest/src/futures/lib.rs.html#1-254: Source\n\u27e84\u27e9 https://docs.rs/futures/latest/futures/future/index.html: mod futures::future - Futures\n\u27e85\u27e9 https://docs.rs/futures/latest/futures/stream/index.html: mod futures::stream - Streams\n\u27e86\u27e9 https://docs.rs/futures/latest/futures/sink/index.html: mod futures::sink - Sinks\n\u27e87\u27e9 https://docs.rs/futures/latest/futures/executor/index.html: mod futures::executor - Executors\n\u27e88\u27e9 https://docs.rs/futures/latest/futures/io/index.html: mod futures::io - asynchronous I/O\n\u27e89\u27e9 https://docs.rs/futures/latest/futures/channel/index.html: mod futures::channel - cross-task communication\n\u27e810\u27e9 https://docs.rs/futures/latest/futures/#reexports: \u00a7\n\u27e811\u27e9 https://docs.rs/futures/latest/futures/#modules: \u00a7\n\u27e812\u27e9 https://docs.rs/futures/latest/futures/compat/index.html: mod futures::compat - compat\n\u27e813\u27e9 https://docs.rs/futures/latest/futures/lock/index.html: mod futures::lock - lock\n\u27e814\u27e9 https://docs.rs/futures/latest/futures/never/index.html: mod futures::never - never\n\u27e815\u27e9 https://docs.rs/futures/latest/futures/prelude/index.html: mod futures::prelude - prelude\n\u27e816\u27e9 https://docs.rs/futures/latest/futures/task/index.html: mod futures::task - task\n\u27e817\u27e9 https://docs.rs/futures/latest/futures/#macros: \u00a7\n\u27e818\u27e9 https://docs.rs/futures/latest/futures/macro.join.html: macro futures::join - join\n\u27e819\u27e9 https://docs.rs/futures/latest/futures/macro.pending.html: macro futures::pending - pending\n\u27e820\u27e9 https://docs.rs/futures/latest/futures/macro.pin_mut.html: macro futures::pin_mut - pin_mut\n\u27e821\u27e9 https://docs.rs/futures/latest/futures/macro.poll.html: macro futures::poll - poll\n\u27e822\u27e9 https://docs.rs/futures/latest/futures/macro.ready.html: macro futures::ready - ready\n\u27e823\u27e9 https://docs.rs/futures/latest/futures/macro.select.html: macro futures::select - select\n\u27e824\u27e9 https://docs.rs/futures/latest/futures/macro.select_biased.html: macro futures::select_biased - select_biased\n\u27e825\u27e9 https://docs.rs/futures/latest/futures/macro.stream_select.html: macro futures::stream_select - stream_select\n\u27e826\u27e9 https://docs.rs/futures/latest/futures/macro.try_join.html: macro futures::try_join - try_join\n\u27e827\u27e9 https://doc.rust-lang.org/nightly/core/result/enum.Result.html: enum core::result::Result - `Result`\n",
            "fit_markdown": "",
            "fit_html": ""
          },
          "downloads": 0,
          "github_stars": 0,
          "dependencies": [],
          "features": {},
          "code_snippets": [],
          "readme_sections": {},
          "librs_downloads": null,
          "source": "crates.io",
          "enhanced_scraping": {},
          "enhanced_features": [],
          "enhanced_dependencies": [],
          "readme_summary": "The `futures` crate provides essential abstractions for asynchronous programming in Rust, including `Future` for single asynchronous values, `Stream` for sequences of values, and `Sink` for asynchronous data writing. It also offers tools like executors for running tasks, async I/O utilities, synchronization primitives, and cross-task communication channels. With comprehensive support for async/await syntax, it enables efficient, non-blocking task management and interoperability between different async paradigms.",
          "feature_summary": null,
          "use_case": "Utilities",
          "score": 9.0,
          "factual_counterfactual": "### Pair 1: Futures and Asynchronous Computations  \n\u2705 **Factual:** The `futures` crate provides the `Future` trait, which represents a single asynchronous computation that eventually produces a value or an error. It is commonly used with Rust's `async` and `await` syntax.  \n\u274c **Counterfactual:** The `futures` crate requires all asynchronous computations to be manually implemented using the `Future` trait, as it does not support Rust's built-in `async` and `await` syntax.  \n\n---\n\n### Pair 2: Streams and Asynchronous Value Production  \n\u2705 **Factual:** The `Stream` trait in the `futures` crate allows for handling a series of asynchronous values, making it suitable for scenarios like processing incoming network data or events.  \n\u274c **Counterfactual:** The `Stream` trait in the `futures` crate is limited to handling finite sequences of values and cannot be used for infinite or unbounded streams.  \n\n---\n\n### Pair 3: Executors and Task Management  \n\u2705 **Factual:** The `futures` crate provides the `ThreadPool` executor, which allows asynchronous tasks to be executed on a pool of background threads, enabling efficient concurrency.  \n\u274c **Counterfactual:** The `futures` crate does not include any executors for running asynchronous tasks and requires developers to use external crates for task execution.",
          "source_analysis": null,
          "user_behavior": null,
          "security": null
        }
      },
      "irl_score": 8.6,
      "execution_id": "exec-591d77b5-0a5e0f81-1751258452",
      "timestamp": "2025-06-30T04:40:52.106415+00:00",
      "canon_version": "1.3.0"
    },
    "rule_zero_compliant": true
  }
]