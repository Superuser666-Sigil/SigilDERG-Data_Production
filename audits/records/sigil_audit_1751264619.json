[
  {
    "execution_id": "exec-701ec11f-55e1ceda-1751264602",
    "timestamp": "2025-06-30T06:23:22.667749+00:00",
    "sacred_chain": {
      "input_data": "ed25519-dalek",
      "context_sources": [
        "crates.io",
        "github.com",
        "lib.rs",
        "docs.rs"
      ],
      "reasoning_steps": [
        "Input canonicalized: 'ed25519-dalek' -> 'ed25519-dalek'",
        "Context gathered from 4 validated sources",
        "Metadata extracted: 4 fields",
        "Documentation analyzed: quality 7.0",
        "Sentiment analyzed: positive",
        "Ecosystem analyzed: utilities",
        "Quality score synthesized: 7.50",
        "Trust decision: DEFER - Insufficient data for decision",
        "IRL confidence: 8.600"
      ],
      "suggestion": "ALLOW: Positive community sentiment",
      "verdict": "DEFER",
      "audit_info": {
        "metadata": {
          "name": "ed25519-dalek",
          "type": "rust_crate",
          "source": "manual_input",
          "extraction_method": "irl_engine"
        },
        "sentiment": {
          "quality_score": 7.0,
          "completeness": 0.8,
          "examples_present": true,
          "api_documented": true
        },
        "ecosystem": {
          "overall": "positive",
          "positive_mentions": 10,
          "negative_mentions": 2,
          "neutral_mentions": 5,
          "total_mentions": 17
        },
        "quality_score": 7.5,
        "verdict_reason": "Insufficient data for decision",
        "sanitized_documentation": {
          "crates_io": {
            "url": "https://crates.io/crates/ed25519-dalek",
            "title": "ed25519-dalek v2.1.1",
            "content": {
              "raw_markdown": "#  ed25519-dalek v2.1.1\nFast and efficient ed25519 EdDSA key generations, signing, and verification in pure Rust. \n  * [ #cryptography ](https://crates.io/keywords/cryptography)\n  * [ #ed25519 ](https://crates.io/keywords/ed25519)\n  * [ #ecc ](https://crates.io/keywords/ecc)\n  * [ #curve25519 ](https://crates.io/keywords/curve25519)\n  * [ #signature ](https://crates.io/keywords/signature)\n\n\n  * [ Readme ](https://crates.io/crates/ed25519-dalek)\n  * [ 34 Versions ](https://crates.io/crates/ed25519-dalek/versions)\n  * [ Dependencies ](https://crates.io/crates/ed25519-dalek/dependencies)\n  * [ Dependents ](https://crates.io/crates/ed25519-dalek/reverse_dependencies)\n\n\n## Metadata\nover 1 year ago \nv1.60.0 \n[ BSD-3-Clause ](https://choosealicense.com/licenses/bsd-3-clause)\n83.7 KiB \n## Install\nRun the following Cargo command in your project directory:\ncargo add ed25519-dalek\nOr add the following line to your Cargo.toml:\ned25519-dalek = \"2.1.1\"\n## Homepage\n[ github.com/dalek-cryptography/curve25519-dalek ](https://github.com/dalek-cryptography/curve25519-dalek)\n## Documentation\n[ docs.rs/ed25519-dalek ](https://docs.rs/ed25519-dalek)\n## Repository\n[ github.com/dalek-cryptography/curve25519-dalek/tree/main/ed25519-dalek ](https://github.com/dalek-cryptography/curve25519-dalek/tree/main/ed25519-dalek)\n## Owners\n## Categories\n  * [Cryptography](https://crates.io/categories/cryptography)\n  * [No standard library](https://crates.io/categories/no-std)\n\n\n[ Report crate ](https://crates.io/support?crate=ed25519-dalek&inquire=crate-violation)\n### Stats Overview\n54,264,638 Downloads all time\n34 Versions published\n#### Downloads over the last 90 days\nDisplay as \nStacked \n  * Stacked \n  * Unstacked \n\n\nLoading\u2026\n",
              "markdown_with_citations": "#  ed25519-dalek v2.1.1\nFast and efficient ed25519 EdDSA key generations, signing, and verification in pure Rust. \n  *  #cryptography \u27e81\u27e9\n  *  #ed25519 \u27e82\u27e9\n  *  #ecc \u27e83\u27e9\n  *  #curve25519 \u27e84\u27e9\n  *  #signature \u27e85\u27e9\n\n\n  *  Readme \u27e86\u27e9\n  *  34 Versions \u27e87\u27e9\n  *  Dependencies \u27e88\u27e9\n  *  Dependents \u27e89\u27e9\n\n\n## Metadata\nover 1 year ago \nv1.60.0 \n BSD-3-Clause \u27e810\u27e9\n83.7 KiB \n## Install\nRun the following Cargo command in your project directory:\ncargo add ed25519-dalek\nOr add the following line to your Cargo.toml:\ned25519-dalek = \"2.1.1\"\n## Homepage\n github.com/dalek-cryptography/curve25519-dalek \u27e811\u27e9\n## Documentation\n docs.rs/ed25519-dalek \u27e812\u27e9\n## Repository\n github.com/dalek-cryptography/curve25519-dalek/tree/main/ed25519-dalek \u27e813\u27e9\n## Owners\n## Categories\n  * Cryptography\u27e814\u27e9\n  * No standard library\u27e815\u27e9\n\n\n Report crate \u27e816\u27e9\n### Stats Overview\n54,264,638 Downloads all time\n34 Versions published\n#### Downloads over the last 90 days\nDisplay as \nStacked \n  * Stacked \n  * Unstacked \n\n\nLoading\u2026\n",
              "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://crates.io/keywords/cryptography:  #cryptography \n\u27e82\u27e9 https://crates.io/keywords/ed25519:  #ed25519 \n\u27e83\u27e9 https://crates.io/keywords/ecc:  #ecc \n\u27e84\u27e9 https://crates.io/keywords/curve25519:  #curve25519 \n\u27e85\u27e9 https://crates.io/keywords/signature:  #signature \n\u27e86\u27e9 https://crates.io/crates/ed25519-dalek:  Readme \n\u27e87\u27e9 https://crates.io/crates/ed25519-dalek/versions:  34 Versions \n\u27e88\u27e9 https://crates.io/crates/ed25519-dalek/dependencies:  Dependencies \n\u27e89\u27e9 https://crates.io/crates/ed25519-dalek/reverse_dependencies:  Dependents \n\u27e810\u27e9 https://choosealicense.com/licenses/bsd-3-clause:  BSD-3-Clause \n\u27e811\u27e9 https://github.com/dalek-cryptography/curve25519-dalek:  github.com/dalek-cryptography/curve25519-dalek \n\u27e812\u27e9 https://docs.rs/ed25519-dalek:  docs.rs/ed25519-dalek \n\u27e813\u27e9 https://github.com/dalek-cryptography/curve25519-dalek/tree/main/ed25519-dalek:  github.com/dalek-cryptography/curve25519-dalek/tree/main/ed25519-dalek \n\u27e814\u27e9 https://crates.io/categories/cryptography: Cryptography\n\u27e815\u27e9 https://crates.io/categories/no-std: No standard library\n\u27e816\u27e9 https://crates.io/support?crate=ed25519-dalek&inquire=crate-violation:  Report crate \n",
              "fit_markdown": "",
              "fit_html": ""
            },
            "structured_data": {},
            "quality_score": 3.0,
            "extraction_method": "crawl4ai",
            "error": null,
            "metadata": {
              "doc_type": "docs",
              "content_length": 1722,
              "has_structured_data": false,
              "crawl_success": true
            },
            "timestamp": "118392.378879"
          },
          "docs_rs": {
            "url": "https://docs.rs/ed25519-dalek",
            "title": "Crate ed25519_dalekCopy item path",
            "content": {
              "raw_markdown": "[](https://docs.rs/ed25519-dalek/latest/ed25519_dalek/all.html \"show sidebar\")\n# Crate ed25519_dalekCopy item path\n[Settings](https://docs.rs/ed25519-dalek/latest/settings.html)\n[Help](https://docs.rs/ed25519-dalek/latest/help.html)\nSummary[Source](https://docs.rs/ed25519-dalek/latest/src/ed25519_dalek/lib.rs.html#10-293)\nExpand description\nA Rust implementation of ed25519 key generation, signing, and verification.\n## [\u00a7](https://docs.rs/ed25519-dalek/latest/ed25519_dalek/#example)Example\nCreating an ed25519 signature on a message is simple.\nFirst, we need to generate a `SigningKey`, which includes both public and secret halves of an asymmetric key. To do so, we need a cryptographically secure pseudorandom number generator (CSPRNG). For this example, we\u2019ll use the operating system\u2019s builtin PRNG:\n```\nuse rand::rngs::OsRng;\nuse ed25519_dalek::SigningKey;\nuse ed25519_dalek::Signature;\nlet mut csprng = OsRng;\nlet signing_key: SigningKey = SigningKey::generate(&mut csprng);\n```\n\nWe can now use this `signing_key` to sign a message:\n```\nuse ed25519_dalek::{Signature, Signer};\nlet message: &[u8] = b\"This is a test of the tsunami alert system.\";\nlet signature: Signature = signing_key.sign(message);\n```\n\nAs well as to verify that this is, indeed, a valid signature on that `message`:\n```\nuse ed25519_dalek::Verifier;\nassert!(signing_key.verify(message, &signature).is_ok());\n```\n\nAnyone else, given the `public` half of the `signing_key` can also easily verify this signature:\n```\nuse ed25519_dalek::{VerifyingKey, Verifier};\nlet verifying_key: VerifyingKey = signing_key.verifying_key();\nassert!(verifying_key.verify(message, &signature).is_ok());\n```\n\n### [\u00a7](https://docs.rs/ed25519-dalek/latest/ed25519_dalek/#serialisation)Serialisation\n`VerifyingKey`s, `SecretKey`s, `SigningKey`s, and `Signature`s can be serialised into byte-arrays by calling `.to_bytes()`. It\u2019s perfectly acceptable and safe to transfer and/or store those bytes. (Of course, never transfer your secret key to anyone else, since they will only need the public key to verify your signatures!)\n```\nuse ed25519_dalek::{PUBLIC_KEY_LENGTH, SECRET_KEY_LENGTH, KEYPAIR_LENGTH, SIGNATURE_LENGTH};\nlet verifying_key_bytes: [u8; PUBLIC_KEY_LENGTH] = signing_key.verifying_key().to_bytes();\nlet secret_key_bytes: [u8; SECRET_KEY_LENGTH] = signing_key.to_bytes();\nlet signing_key_bytes:  [u8; KEYPAIR_LENGTH]  = signing_key.to_keypair_bytes();\nlet signature_bytes: [u8; SIGNATURE_LENGTH] = signature.to_bytes();\n```\n\nAnd similarly, decoded from bytes with `::from_bytes()`:\n```\nlet verifying_key: VerifyingKey = VerifyingKey::from_bytes(&verifying_key_bytes)?;\nlet signing_key: SigningKey = SigningKey::from_bytes(&signing_key_bytes);\nlet signature: Signature = Signature::try_from(&signature_bytes[..])?;\n```\n\n#### [\u00a7](https://docs.rs/ed25519-dalek/latest/ed25519_dalek/#pkcs8-key-encoding)PKCS#8 Key Encoding\nPKCS#8 is a private key format with support for multiple algorithms. It can be encoded as binary (DER) or text (PEM).\nYou can recognize PEM-encoded PKCS#8 keys by the following:\n```\n-----BEGIN PRIVATE KEY-----\n```\n\nTo use PKCS#8, you need to enable the `pkcs8` crate feature.\nThe following traits can be used to decode/encode [`SigningKey`](https://docs.rs/ed25519-dalek/latest/ed25519_dalek/struct.SigningKey.html \"struct ed25519_dalek::SigningKey\") and [`VerifyingKey`](https://docs.rs/ed25519-dalek/latest/ed25519_dalek/struct.VerifyingKey.html \"struct ed25519_dalek::VerifyingKey\") as PKCS#8. Note that [`pkcs8`](https://docs.rs/ed25519-dalek/latest/ed25519_dalek/pkcs8/index.html \"mod ed25519_dalek::pkcs8\") is re-exported from the toplevel of the crate:\n  * [`pkcs8::DecodePrivateKey`](https://docs.rs/ed25519-dalek/latest/ed25519_dalek/pkcs8/trait.DecodePrivateKey.html \"trait ed25519_dalek::pkcs8::DecodePrivateKey\"): decode private keys from PKCS#8\n  * [`pkcs8::EncodePrivateKey`](https://docs.rs/ed25519-dalek/latest/ed25519_dalek/pkcs8/trait.EncodePrivateKey.html \"trait ed25519_dalek::pkcs8::EncodePrivateKey\"): encode private keys to PKCS#8\n  * [`pkcs8::DecodePublicKey`](https://docs.rs/ed25519-dalek/latest/ed25519_dalek/pkcs8/trait.DecodePublicKey.html \"trait ed25519_dalek::pkcs8::DecodePublicKey\"): decode public keys from PKCS#8\n  * [`pkcs8::EncodePublicKey`](https://docs.rs/ed25519-dalek/latest/ed25519_dalek/pkcs8/trait.EncodePublicKey.html \"trait ed25519_dalek::pkcs8::EncodePublicKey\"): encode public keys to PKCS#8\n\n\n##### [\u00a7](https://docs.rs/ed25519-dalek/latest/ed25519_dalek/#example-1)Example\nNOTE: this requires the `pem` crate feature.\n```\nuse ed25519_dalek::{VerifyingKey, pkcs8::DecodePublicKey};\nlet pem = \"-----BEGIN PUBLIC KEY-----\nMCowBQYDK2VwAyEAGb9ECWmEzf6FQbrBZ9w7lshQhqowtrbLDFw4rXAxZuE=\n-----END PUBLIC KEY-----\";\nlet verifying_key = VerifyingKey::from_public_key_pem(pem)\n  .expect(\"invalid public key PEM\");\n```\n\n#### [\u00a7](https://docs.rs/ed25519-dalek/latest/ed25519_dalek/#using-serde)Using Serde\nIf you prefer the bytes to be wrapped in another serialisation format, all types additionally come with built-in [serde](https://serde.rs) support by building `ed25519-dalek` via:\n```\n$ cargo build --features=\"serde\"\n```\n\nThey can be then serialised into any of the wire formats which serde supports. For example, using [bincode](https://github.com/TyOverby/bincode):\n```\nuse bincode::serialize;\nlet encoded_verifying_key: Vec<u8> = serialize(&verifying_key).unwrap();\nlet encoded_signature: Vec<u8> = serialize(&signature).unwrap();\n```\n\nAfter sending the `encoded_verifying_key` and `encoded_signature`, the recipient may deserialise them and verify:\n```\nuse bincode::deserialize;\nlet message: &[u8] = b\"This is a test of the tsunami alert system.\";\nlet decoded_verifying_key: VerifyingKey = deserialize(&encoded_verifying_key).unwrap();\nlet decoded_signature: Signature = deserialize(&encoded_signature).unwrap();\nlet verified: bool = decoded_verifying_key.verify(&message, &decoded_signature).is_ok();\nassert!(verified);\n```\n\n## Re-exports[\u00a7](https://docs.rs/ed25519-dalek/latest/ed25519_dalek/#reexports)\n\n`pub use ed25519[](https://docs.rs/ed25519/2.2.3/x86_64-unknown-linux-gnu/ed25519/index.html \"mod ed25519\");`\n\n## Modules[\u00a7](https://docs.rs/ed25519-dalek/latest/ed25519_dalek/#modules)\n\n[hazmat](https://docs.rs/ed25519-dalek/latest/ed25519_dalek/hazmat/index.html \"mod ed25519_dalek::hazmat\")`hazmat`\n    Low-level interfaces to ed25519 functions\n\n[pkcs8](https://docs.rs/ed25519-dalek/latest/ed25519_dalek/pkcs8/index.html \"mod ed25519_dalek::pkcs8\")`pkcs8`\n    PKCS#8 private key support.\n## Structs[\u00a7](https://docs.rs/ed25519-dalek/latest/ed25519_dalek/#structs)\n\n[Context](https://docs.rs/ed25519-dalek/latest/ed25519_dalek/struct.Context.html \"struct ed25519_dalek::Context\")`digest`\n    Ed25519 contexts as used by Ed25519ph.\n\n[Signature](https://docs.rs/ed25519-dalek/latest/ed25519_dalek/struct.Signature.html \"struct ed25519_dalek::Signature\")\n    Ed25519 signature.\n\n[SigningKey](https://docs.rs/ed25519-dalek/latest/ed25519_dalek/struct.SigningKey.html \"struct ed25519_dalek::SigningKey\")\n    ed25519 signing key which can be used to produce signatures.\n\n[VerifyingKey](https://docs.rs/ed25519-dalek/latest/ed25519_dalek/struct.VerifyingKey.html \"struct ed25519_dalek::VerifyingKey\")\n    An ed25519 public key.\n## Constants[\u00a7](https://docs.rs/ed25519-dalek/latest/ed25519_dalek/#constants)\n\n[EXPANDED_SECRET_KEY_LENGTH](https://docs.rs/ed25519-dalek/latest/ed25519_dalek/constant.EXPANDED_SECRET_KEY_LENGTH.html \"constant ed25519_dalek::EXPANDED_SECRET_KEY_LENGTH\")\n    The length of an \u201cexpanded\u201d ed25519 key, `ExpandedSecretKey`, in bytes.\n\n[KEYPAIR_LENGTH](https://docs.rs/ed25519-dalek/latest/ed25519_dalek/constant.KEYPAIR_LENGTH.html \"constant ed25519_dalek::KEYPAIR_LENGTH\")\n    The length of an ed25519 `Keypair`, in bytes.\n\n[PUBLIC_KEY_LENGTH](https://docs.rs/ed25519-dalek/latest/ed25519_dalek/constant.PUBLIC_KEY_LENGTH.html \"constant ed25519_dalek::PUBLIC_KEY_LENGTH\")\n    The length of an ed25519 `PublicKey`, in bytes.\n\n[SECRET_KEY_LENGTH](https://docs.rs/ed25519-dalek/latest/ed25519_dalek/constant.SECRET_KEY_LENGTH.html \"constant ed25519_dalek::SECRET_KEY_LENGTH\")\n    The length of a ed25519 `SecretKey`, in bytes.\n\n[SIGNATURE_LENGTH](https://docs.rs/ed25519-dalek/latest/ed25519_dalek/constant.SIGNATURE_LENGTH.html \"constant ed25519_dalek::SIGNATURE_LENGTH\")\n    The length of a ed25519 `Signature`, in bytes.\n## Traits[\u00a7](https://docs.rs/ed25519-dalek/latest/ed25519_dalek/#traits)\n\n[Digest](https://docs.rs/ed25519-dalek/latest/ed25519_dalek/trait.Digest.html \"trait ed25519_dalek::Digest\")\n    Convenience wrapper trait covering functionality of cryptographic hash functions with fixed output size.\n\n[DigestSigner](https://docs.rs/ed25519-dalek/latest/ed25519_dalek/trait.DigestSigner.html \"trait ed25519_dalek::DigestSigner\")`digest`\n    Sign the given prehashed message [`Digest`](https://docs.rs/ed25519-dalek/latest/ed25519_dalek/trait.Digest.html \"trait ed25519_dalek::Digest\") using `Self`.\n\n[DigestVerifier](https://docs.rs/ed25519-dalek/latest/ed25519_dalek/trait.DigestVerifier.html \"trait ed25519_dalek::DigestVerifier\")`digest`\n    Verify the provided signature for the given prehashed message [`Digest`](https://docs.rs/ed25519-dalek/latest/ed25519_dalek/trait.Digest.html \"trait ed25519_dalek::Digest\") is authentic.\n\n[Signer](https://docs.rs/ed25519-dalek/latest/ed25519_dalek/trait.Signer.html \"trait ed25519_dalek::Signer\")\n    Sign the provided message bytestring using `Self` (e.g. a cryptographic key or connection to an HSM), returning a digital signature.\n\n[Verifier](https://docs.rs/ed25519-dalek/latest/ed25519_dalek/trait.Verifier.html \"trait ed25519_dalek::Verifier\")\n    Verify the provided message bytestring using `Self` (e.g. a public key)\n## Functions[\u00a7](https://docs.rs/ed25519-dalek/latest/ed25519_dalek/#functions)\n\n[verify_batch](https://docs.rs/ed25519-dalek/latest/ed25519_dalek/fn.verify_batch.html \"fn ed25519_dalek::verify_batch\")`batch`\n    Verify a batch of `signatures` on `messages` with their respective `verifying_keys`.\n## Type Aliases[\u00a7](https://docs.rs/ed25519-dalek/latest/ed25519_dalek/#types)\n\n[SecretKey](https://docs.rs/ed25519-dalek/latest/ed25519_dalek/type.SecretKey.html \"type ed25519_dalek::SecretKey\")\n    ed25519 secret key as defined in [RFC8032 \u00a7 5.1.5](https://www.rfc-editor.org/rfc/rfc8032#section-5.1.5):\n\n[Sha512](https://docs.rs/ed25519-dalek/latest/ed25519_dalek/type.Sha512.html \"type ed25519_dalek::Sha512\")`digest`\n    SHA-512 hasher.\n\n[SignatureError](https://docs.rs/ed25519-dalek/latest/ed25519_dalek/type.SignatureError.html \"type ed25519_dalek::SignatureError\")\n    Errors which may occur while processing signatures and keypairs.\n",
              "markdown_with_citations": "[](https://docs.rs/ed25519-dalek/latest/ed25519_dalek/all.html \"show sidebar\")\n# Crate ed25519_dalekCopy item path\nSettings\u27e81\u27e9\nHelp\u27e82\u27e9\nSummarySource\u27e83\u27e9\nExpand description\nA Rust implementation of ed25519 key generation, signing, and verification.\n## \u00a7\u27e84\u27e9Example\nCreating an ed25519 signature on a message is simple.\nFirst, we need to generate a `SigningKey`, which includes both public and secret halves of an asymmetric key. To do so, we need a cryptographically secure pseudorandom number generator (CSPRNG). For this example, we\u2019ll use the operating system\u2019s builtin PRNG:\n```\nuse rand::rngs::OsRng;\nuse ed25519_dalek::SigningKey;\nuse ed25519_dalek::Signature;\nlet mut csprng = OsRng;\nlet signing_key: SigningKey = SigningKey::generate(&mut csprng);\n```\n\nWe can now use this `signing_key` to sign a message:\n```\nuse ed25519_dalek::{Signature, Signer};\nlet message: &[u8] = b\"This is a test of the tsunami alert system.\";\nlet signature: Signature = signing_key.sign(message);\n```\n\nAs well as to verify that this is, indeed, a valid signature on that `message`:\n```\nuse ed25519_dalek::Verifier;\nassert!(signing_key.verify(message, &signature).is_ok());\n```\n\nAnyone else, given the `public` half of the `signing_key` can also easily verify this signature:\n```\nuse ed25519_dalek::{VerifyingKey, Verifier};\nlet verifying_key: VerifyingKey = signing_key.verifying_key();\nassert!(verifying_key.verify(message, &signature).is_ok());\n```\n\n### \u00a7\u27e85\u27e9Serialisation\n`VerifyingKey`s, `SecretKey`s, `SigningKey`s, and `Signature`s can be serialised into byte-arrays by calling `.to_bytes()`. It\u2019s perfectly acceptable and safe to transfer and/or store those bytes. (Of course, never transfer your secret key to anyone else, since they will only need the public key to verify your signatures!)\n```\nuse ed25519_dalek::{PUBLIC_KEY_LENGTH, SECRET_KEY_LENGTH, KEYPAIR_LENGTH, SIGNATURE_LENGTH};\nlet verifying_key_bytes: [u8; PUBLIC_KEY_LENGTH] = signing_key.verifying_key().to_bytes();\nlet secret_key_bytes: [u8; SECRET_KEY_LENGTH] = signing_key.to_bytes();\nlet signing_key_bytes:  [u8; KEYPAIR_LENGTH]  = signing_key.to_keypair_bytes();\nlet signature_bytes: [u8; SIGNATURE_LENGTH] = signature.to_bytes();\n```\n\nAnd similarly, decoded from bytes with `::from_bytes()`:\n```\nlet verifying_key: VerifyingKey = VerifyingKey::from_bytes(&verifying_key_bytes)?;\nlet signing_key: SigningKey = SigningKey::from_bytes(&signing_key_bytes);\nlet signature: Signature = Signature::try_from(&signature_bytes[..])?;\n```\n\n#### \u00a7\u27e86\u27e9PKCS#8 Key Encoding\nPKCS#8 is a private key format with support for multiple algorithms. It can be encoded as binary (DER) or text (PEM).\nYou can recognize PEM-encoded PKCS#8 keys by the following:\n```\n-----BEGIN PRIVATE KEY-----\n```\n\nTo use PKCS#8, you need to enable the `pkcs8` crate feature.\nThe following traits can be used to decode/encode `SigningKey`\u27e87\u27e9 and `VerifyingKey`\u27e88\u27e9 as PKCS#8. Note that `pkcs8`\u27e89\u27e9 is re-exported from the toplevel of the crate:\n  * `pkcs8::DecodePrivateKey`\u27e810\u27e9: decode private keys from PKCS#8\n  * `pkcs8::EncodePrivateKey`\u27e811\u27e9: encode private keys to PKCS#8\n  * `pkcs8::DecodePublicKey`\u27e812\u27e9: decode public keys from PKCS#8\n  * `pkcs8::EncodePublicKey`\u27e813\u27e9: encode public keys to PKCS#8\n\n\n##### \u00a7\u27e814\u27e9Example\nNOTE: this requires the `pem` crate feature.\n```\nuse ed25519_dalek::{VerifyingKey, pkcs8::DecodePublicKey};\nlet pem = \"-----BEGIN PUBLIC KEY-----\nMCowBQYDK2VwAyEAGb9ECWmEzf6FQbrBZ9w7lshQhqowtrbLDFw4rXAxZuE=\n-----END PUBLIC KEY-----\";\nlet verifying_key = VerifyingKey::from_public_key_pem(pem)\n  .expect(\"invalid public key PEM\");\n```\n\n#### \u00a7\u27e815\u27e9Using Serde\nIf you prefer the bytes to be wrapped in another serialisation format, all types additionally come with built-in serde\u27e816\u27e9 support by building `ed25519-dalek` via:\n```\n$ cargo build --features=\"serde\"\n```\n\nThey can be then serialised into any of the wire formats which serde supports. For example, using bincode\u27e817\u27e9:\n```\nuse bincode::serialize;\nlet encoded_verifying_key: Vec<u8> = serialize(&verifying_key).unwrap();\nlet encoded_signature: Vec<u8> = serialize(&signature).unwrap();\n```\n\nAfter sending the `encoded_verifying_key` and `encoded_signature`, the recipient may deserialise them and verify:\n```\nuse bincode::deserialize;\nlet message: &[u8] = b\"This is a test of the tsunami alert system.\";\nlet decoded_verifying_key: VerifyingKey = deserialize(&encoded_verifying_key).unwrap();\nlet decoded_signature: Signature = deserialize(&encoded_signature).unwrap();\nlet verified: bool = decoded_verifying_key.verify(&message, &decoded_signature).is_ok();\nassert!(verified);\n```\n\n## Re-exports\u00a7\u27e818\u27e9\n\n`pub use ed25519[](https://docs.rs/ed25519/2.2.3/x86_64-unknown-linux-gnu/ed25519/index.html \"mod ed25519\");`\n\n## Modules\u00a7\u27e819\u27e9\n\nhazmat\u27e820\u27e9`hazmat`\n    Low-level interfaces to ed25519 functions\n\npkcs8\u27e89\u27e9`pkcs8`\n    PKCS#8 private key support.\n## Structs\u00a7\u27e821\u27e9\n\nContext\u27e822\u27e9`digest`\n    Ed25519 contexts as used by Ed25519ph.\n\nSignature\u27e823\u27e9\n    Ed25519 signature.\n\nSigningKey\u27e87\u27e9\n    ed25519 signing key which can be used to produce signatures.\n\nVerifyingKey\u27e88\u27e9\n    An ed25519 public key.\n## Constants\u00a7\u27e824\u27e9\n\nEXPANDED_SECRET_KEY_LENGTH\u27e825\u27e9\n    The length of an \u201cexpanded\u201d ed25519 key, `ExpandedSecretKey`, in bytes.\n\nKEYPAIR_LENGTH\u27e826\u27e9\n    The length of an ed25519 `Keypair`, in bytes.\n\nPUBLIC_KEY_LENGTH\u27e827\u27e9\n    The length of an ed25519 `PublicKey`, in bytes.\n\nSECRET_KEY_LENGTH\u27e828\u27e9\n    The length of a ed25519 `SecretKey`, in bytes.\n\nSIGNATURE_LENGTH\u27e829\u27e9\n    The length of a ed25519 `Signature`, in bytes.\n## Traits\u00a7\u27e830\u27e9\n\nDigest\u27e831\u27e9\n    Convenience wrapper trait covering functionality of cryptographic hash functions with fixed output size.\n\nDigestSigner\u27e832\u27e9`digest`\n    Sign the given prehashed message `Digest`\u27e831\u27e9 using `Self`.\n\nDigestVerifier\u27e833\u27e9`digest`\n    Verify the provided signature for the given prehashed message `Digest`\u27e831\u27e9 is authentic.\n\nSigner\u27e834\u27e9\n    Sign the provided message bytestring using `Self` (e.g. a cryptographic key or connection to an HSM), returning a digital signature.\n\nVerifier\u27e835\u27e9\n    Verify the provided message bytestring using `Self` (e.g. a public key)\n## Functions\u00a7\u27e836\u27e9\n\nverify_batch\u27e837\u27e9`batch`\n    Verify a batch of `signatures` on `messages` with their respective `verifying_keys`.\n## Type Aliases\u00a7\u27e838\u27e9\n\nSecretKey\u27e839\u27e9\n    ed25519 secret key as defined in RFC8032 \u00a7 5.1.5\u27e840\u27e9:\n\nSha512\u27e841\u27e9`digest`\n    SHA-512 hasher.\n\nSignatureError\u27e842\u27e9\n    Errors which may occur while processing signatures and keypairs.\n",
              "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://docs.rs/ed25519-dalek/latest/settings.html: Settings\n\u27e82\u27e9 https://docs.rs/ed25519-dalek/latest/help.html: Help\n\u27e83\u27e9 https://docs.rs/ed25519-dalek/latest/src/ed25519_dalek/lib.rs.html#10-293: Source\n\u27e84\u27e9 https://docs.rs/ed25519-dalek/latest/ed25519_dalek/#example: \u00a7\n\u27e85\u27e9 https://docs.rs/ed25519-dalek/latest/ed25519_dalek/#serialisation: \u00a7\n\u27e86\u27e9 https://docs.rs/ed25519-dalek/latest/ed25519_dalek/#pkcs8-key-encoding: \u00a7\n\u27e87\u27e9 https://docs.rs/ed25519-dalek/latest/ed25519_dalek/struct.SigningKey.html: struct ed25519_dalek::SigningKey - `SigningKey`\n\u27e88\u27e9 https://docs.rs/ed25519-dalek/latest/ed25519_dalek/struct.VerifyingKey.html: struct ed25519_dalek::VerifyingKey - `VerifyingKey`\n\u27e89\u27e9 https://docs.rs/ed25519-dalek/latest/ed25519_dalek/pkcs8/index.html: mod ed25519_dalek::pkcs8 - `pkcs8`\n\u27e810\u27e9 https://docs.rs/ed25519-dalek/latest/ed25519_dalek/pkcs8/trait.DecodePrivateKey.html: trait ed25519_dalek::pkcs8::DecodePrivateKey - `pkcs8::DecodePrivateKey`\n\u27e811\u27e9 https://docs.rs/ed25519-dalek/latest/ed25519_dalek/pkcs8/trait.EncodePrivateKey.html: trait ed25519_dalek::pkcs8::EncodePrivateKey - `pkcs8::EncodePrivateKey`\n\u27e812\u27e9 https://docs.rs/ed25519-dalek/latest/ed25519_dalek/pkcs8/trait.DecodePublicKey.html: trait ed25519_dalek::pkcs8::DecodePublicKey - `pkcs8::DecodePublicKey`\n\u27e813\u27e9 https://docs.rs/ed25519-dalek/latest/ed25519_dalek/pkcs8/trait.EncodePublicKey.html: trait ed25519_dalek::pkcs8::EncodePublicKey - `pkcs8::EncodePublicKey`\n\u27e814\u27e9 https://docs.rs/ed25519-dalek/latest/ed25519_dalek/#example-1: \u00a7\n\u27e815\u27e9 https://docs.rs/ed25519-dalek/latest/ed25519_dalek/#using-serde: \u00a7\n\u27e816\u27e9 https://serde.rs: serde\n\u27e817\u27e9 https://github.com/TyOverby/bincode: bincode\n\u27e818\u27e9 https://docs.rs/ed25519-dalek/latest/ed25519_dalek/#reexports: \u00a7\n\u27e819\u27e9 https://docs.rs/ed25519-dalek/latest/ed25519_dalek/#modules: \u00a7\n\u27e820\u27e9 https://docs.rs/ed25519-dalek/latest/ed25519_dalek/hazmat/index.html: mod ed25519_dalek::hazmat - hazmat\n\u27e821\u27e9 https://docs.rs/ed25519-dalek/latest/ed25519_dalek/#structs: \u00a7\n\u27e822\u27e9 https://docs.rs/ed25519-dalek/latest/ed25519_dalek/struct.Context.html: struct ed25519_dalek::Context - Context\n\u27e823\u27e9 https://docs.rs/ed25519-dalek/latest/ed25519_dalek/struct.Signature.html: struct ed25519_dalek::Signature - Signature\n\u27e824\u27e9 https://docs.rs/ed25519-dalek/latest/ed25519_dalek/#constants: \u00a7\n\u27e825\u27e9 https://docs.rs/ed25519-dalek/latest/ed25519_dalek/constant.EXPANDED_SECRET_KEY_LENGTH.html: constant ed25519_dalek::EXPANDED_SECRET_KEY_LENGTH - EXPANDED_SECRET_KEY_LENGTH\n\u27e826\u27e9 https://docs.rs/ed25519-dalek/latest/ed25519_dalek/constant.KEYPAIR_LENGTH.html: constant ed25519_dalek::KEYPAIR_LENGTH - KEYPAIR_LENGTH\n\u27e827\u27e9 https://docs.rs/ed25519-dalek/latest/ed25519_dalek/constant.PUBLIC_KEY_LENGTH.html: constant ed25519_dalek::PUBLIC_KEY_LENGTH - PUBLIC_KEY_LENGTH\n\u27e828\u27e9 https://docs.rs/ed25519-dalek/latest/ed25519_dalek/constant.SECRET_KEY_LENGTH.html: constant ed25519_dalek::SECRET_KEY_LENGTH - SECRET_KEY_LENGTH\n\u27e829\u27e9 https://docs.rs/ed25519-dalek/latest/ed25519_dalek/constant.SIGNATURE_LENGTH.html: constant ed25519_dalek::SIGNATURE_LENGTH - SIGNATURE_LENGTH\n\u27e830\u27e9 https://docs.rs/ed25519-dalek/latest/ed25519_dalek/#traits: \u00a7\n\u27e831\u27e9 https://docs.rs/ed25519-dalek/latest/ed25519_dalek/trait.Digest.html: trait ed25519_dalek::Digest - Digest\n\u27e832\u27e9 https://docs.rs/ed25519-dalek/latest/ed25519_dalek/trait.DigestSigner.html: trait ed25519_dalek::DigestSigner - DigestSigner\n\u27e833\u27e9 https://docs.rs/ed25519-dalek/latest/ed25519_dalek/trait.DigestVerifier.html: trait ed25519_dalek::DigestVerifier - DigestVerifier\n\u27e834\u27e9 https://docs.rs/ed25519-dalek/latest/ed25519_dalek/trait.Signer.html: trait ed25519_dalek::Signer - Signer\n\u27e835\u27e9 https://docs.rs/ed25519-dalek/latest/ed25519_dalek/trait.Verifier.html: trait ed25519_dalek::Verifier - Verifier\n\u27e836\u27e9 https://docs.rs/ed25519-dalek/latest/ed25519_dalek/#functions: \u00a7\n\u27e837\u27e9 https://docs.rs/ed25519-dalek/latest/ed25519_dalek/fn.verify_batch.html: fn ed25519_dalek::verify_batch - verify_batch\n\u27e838\u27e9 https://docs.rs/ed25519-dalek/latest/ed25519_dalek/#types: \u00a7\n\u27e839\u27e9 https://docs.rs/ed25519-dalek/latest/ed25519_dalek/type.SecretKey.html: type ed25519_dalek::SecretKey - SecretKey\n\u27e840\u27e9 https://www.rfc-editor.org/rfc/rfc8032#section-5.1.5: RFC8032 \u00a7 5.1.5\n\u27e841\u27e9 https://docs.rs/ed25519-dalek/latest/ed25519_dalek/type.Sha512.html: type ed25519_dalek::Sha512 - Sha512\n\u27e842\u27e9 https://docs.rs/ed25519-dalek/latest/ed25519_dalek/type.SignatureError.html: type ed25519_dalek::SignatureError - SignatureError\n",
              "fit_markdown": "",
              "fit_html": ""
            },
            "structured_data": {},
            "quality_score": 4.0,
            "extraction_method": "crawl4ai",
            "error": null,
            "metadata": {
              "doc_type": "docs",
              "content_length": 10681,
              "has_structured_data": false,
              "crawl_success": true
            },
            "timestamp": "118393.3238569"
          },
          "lib_rs": {
            "url": "https://lib.rs/crates/ed25519-dalek",
            "title": "Untitled",
            "content": {
              "raw_markdown": "###  [32 releases](https://lib.rs/crates/ed25519-dalek/versions) (5 stable)\n2.1.1 |  Feb 7, 2024   \n---|---  \n2.1.0 |  Nov 16, 2023   \n2.0.0 |  Aug 11, 2023   \n2.0.0-rc.3 |  Jun 24, 2023   \n0.1.0 |  Dec 9, 2016   \n#**13** in [#ed25519-key](https://lib.rs/keywords/ed25519-key)\nDownload history 869423/week @ 2025-03-08 1057581/week @ 2025-03-15 1402983/week @ 2025-03-22 778846/week @ 2025-03-29 794475/week @ 2025-04-05 682147/week @ 2025-04-12 641658/week @ 2025-04-19 586440/week @ 2025-04-26 648946/week @ 2025-05-03 645364/week @ 2025-05-10 650985/week @ 2025-05-17 589833/week @ 2025-05-24 613583/week @ 2025-05-31 587144/week @ 2025-06-07 587324/week @ 2025-06-14 554738/week @ 2025-06-21\n**2,446,993** downloads per month Used in [**4,260** crates (690 directly)](https://lib.rs/crates/ed25519-dalek/rev)\n**BSD-3-Clause**\n1.5MB  **27K** SLoC\n# ed25519-dalek [![](https://img.shields.io/crates/v/ed25519-dalek.svg)](https://crates.io/crates/ed25519-dalek) [![](https://img.gs/czjpqfbdkz/full/https://docs.rs/ed25519-dalek/badge.svg)](https://docs.rs/ed25519-dalek) [![CI](https://img.gs/czjpqfbdkz/full/https://github.com/dalek-cryptography/curve25519-dalek/actions/workflows/ed25519-dalek.yml/badge.svg?branch=main)](https://github.com/dalek-cryptography/curve25519-dalek/actions/workflows/ed25519-dalek.yml)\nFast and efficient Rust implementation of ed25519 key generation, signing, and verification.\n# Use\nTo import ``ed25519-dalek``, add the following to the dependencies section of your project's ``Cargo.toml``:\n```\n`ed25519-dalek = \"2\"\n`\n```\n\n# Feature Flags\nThis crate is ````#``[``no_std``]```` compatible with ``default`-`features `=` `false```.\nFeature | Default? | Description  \n---|---|---  \n``alloc`` | \u2713 | When ``pkcs8`` is enabled, implements ``EncodePrivateKey``/``EncodePublicKey`` for ``SigningKey``/``VerifyingKey``, respectively.  \n``std`` | \u2713 | Implements ```std`::```error`::``Error`` for ``SignatureError``. Also enables ``alloc``.  \n``zeroize`` | \u2713 | Implements ``Zeroize`` and ``ZeroizeOnDrop`` for ``SigningKey``  \n``rand_core`` |  | Enables ```SigningKey`::``generate``  \n``batch`` |  | Enables ``verify_batch`` for verifying many signatures quickly. Also enables ``rand_core``.  \n``digest`` |  | Enables ``Context``, ```SigningKey`::````{`with_context`,` sign_prehashed```}```` and ```VerifyingKey`::````{`with_context`,` verify_prehashed`,` verify_prehashed_strict```}```` for Ed25519ph prehashed signatures  \n``asm`` |  | Enables assembly optimizations in the SHA-512 compression functions  \n``pkcs8`` |  | Enables [PKCS#8](https://en.wikipedia.org/wiki/PKCS_8) serialization/deserialization for ``SigningKey`` and ``VerifyingKey``  \n``pem`` |  | Enables PEM serialization support for PKCS#8 private keys and SPKI public keys. Also enables ``alloc``.  \n``legacy_compatibility`` |  | **Unsafe:** Disables certain signature checks. See [below](https://lib.rs/crates/ed25519-dalek#readme-malleability-and-the-legacy_compatibility-feature)  \n``hazmat`` |  | **Unsafe:** Exposes the ``hazmat`` module for raw signing/verifying. Misuse of these functions will expose the private key, as in the [signing oracle attack](https://github.com/MystenLabs/ed25519-unsafe-libs).  \n# Major Changes\nSee [CHANGELOG.md](https://github.com/dalek-cryptography/curve25519-dalek/blob/HEAD/CHANGELOG.md) for a list of changes made in past version of this crate.\n## Breaking Changes in 2.0.0\n  * Bump MSRV from 1.41 to 1.60.0\n  * Bump Rust edition\n  * Bump ``signature`` dependency to 2.0\n  * Make ``digest`` an optional dependency\n  * Make ``zeroize`` an optional dependency\n  * Make ``rand_core`` an optional dependency\n  * Adopt [curve25519-backend selection](https://github.com/dalek-cryptography/curve25519-dalek/#backends) over features\n  * Make all batch verification deterministic remove ``batch_deterministic`` ([#256](https://github.com/dalek-cryptography/ed25519-dalek/pull/256))\n  * Remove ``ExpandedSecretKey`` API ([#205](https://github.com/dalek-cryptography/ed25519-dalek/pull/205))\n  * Rename ``Keypair`` \u2192 ``SigningKey`` and ``PublicKey`` \u2192 ``VerifyingKey``\n  * Make ``hazmat`` feature to expose, ``ExpandedSecretKey``, ```raw_sign``(``)```, ```raw_sign_prehashed``(``)```, ```raw_verify``(``)```, and ```raw_verify_prehashed``(``)```\n\n\n# Documentation\nDocumentation is available [here](https://docs.rs/ed25519-dalek).\n# Compatibility Policies\nAll on-by-default features of this library are covered by [semantic versioning](https://semver.org/spec/v2.0.0.html) (SemVer). SemVer exemptions are outlined below for MSRV and public API.\n## Minimum Supported Rust Version\nReleases | MSRV  \n---|---  \n2.x | 1.60  \n1.x | 1.41  \nFrom 2.x and on, MSRV changes will be accompanied by a minor version bump.\n## Public API SemVer Exemptions\nBreaking changes to SemVer-exempted components affecting the public API will be accompanied by some version bump.\nBelow are the specific policies:\nReleases | Public API Component(s) | Policy  \n---|---|---  \n2.x | Dependencies ``digest``, ``pkcs8`` and ``rand_core`` | Minor SemVer bump  \n# Safety\n``ed25519-dalek`` is designed to prevent misuse. Signing is constant-time, all signing keys are zeroed when they go out of scope (unless ``zeroize`` is disabled), detached public keys [cannot](https://github.com/MystenLabs/ed25519-unsafe-libs/blob/main/README.md) be used for signing, and extra functions like [```VerifyingKey`::``verify_strict``](https://lib.rs/crates/ed25519-dalek#readme-weak-key-forgery-and-verify_strict) are made available to avoid known gotchas.\nFurther, this crate has no\u2014and in fact forbids\u2014unsafe code. You can opt in to using some highly optimized unsafe code that resides in ``curve25519-dalek``, though. See [below](https://lib.rs/crates/ed25519-dalek#readme-microarchitecture-specific-backends) for more information on backend selection.\n# Performance\nPerformance is a secondary goal behind correctness, safety, and clarity, but we aim to be competitive with other implementations.\n## Benchmarks\nBenchmarks are run using [criterion.rs](https://github.com/japaric/criterion.rs):\n```\n```cargo``` bench`` --`features` ``\"`batch`\"```\n``#``` Uses avx2 or ifma only if compiled for an appropriate target.\n`export RUSTFLAGS='-C target_cpu=native'\ncargo +nightly bench --features \"batch\"\n`\n```\n\nOn an Intel 10700K running at stock comparing between the ``curve25519-dalek`` backends.\nBenchmark | u64 | simd +avx2 | fiat  \n---|---|---|---  \nsigning | 15.017 \u00b5s | 13.906 \u00b5s -7.3967% | 15.877 \u03bcs +5.7268%  \nsignature verification | 40.144 \u00b5s | 25.963 \u00b5s -35.603% | 42.118 \u03bcs +4.9173%  \nstrict signature verification | 41.334 \u00b5s | 27.874 \u00b5s -32.660% | 43.985 \u03bcs +6.4136%  \nbatch signature verification/4 | 109.44 \u00b5s | 81.778 \u00b5s -25.079% | 117.80 \u03bcs +7.6389%  \nbatch signature verification/8 | 182.75 \u00b5s | 138.40 \u00b5s -23.871% | 195.86 \u03bcs +7.1737%  \nbatch signature verification/16 | 328.67 \u00b5s | 251.39 \u00b5s -23.744% | 351.55 \u03bcs +6.9614%  \nbatch signature verification/32 | 619.49 \u00b5s | 477.36 \u00b5s -23.053% | 669.41 \u03bcs +8.0582%  \nbatch signature verification/64 | 1.2136 ms | 936.85 \u00b5s -22.543% | 1.3028 ms +7.3500%  \nbatch signature verification/96 | 1.8677 ms | 1.2357 ms -33.936% | 2.0552 ms +10.039%  \nbatch signature verification/128 | 2.3281 ms | 1.5795 ms -31.996% | 2.5596 ms +9.9437%  \nbatch signature verification/256 | 4.1868 ms | 2.8864 ms -31.061% | 4.6494 \u03bcs +11.049%  \nkeypair generation | 13.973 \u00b5s | 13.108 \u00b5s -6.5062% | 15.099 \u03bcs +8.0584%  \n## Batch Performance\nIf your protocol or application is able to batch signatures for verification, the [``verify_batch``](https://docs.rs/ed25519-dalek/latest/ed25519_dalek/fn.verify_batch.html) function has greatly improved performance.\nAs you can see, there's an optimal batch size for each machine, so you'll likely want to test the benchmarks on your target CPU to discover the best size.\n## (Micro)Architecture Specific Backends\nA _backend_ refers to an implementation of elliptic curve and scalar arithmetic. Different backends have different use cases. For example, if you demand formally verified code, you want to use the ``fiat`` backend (as it was generated from [Fiat Crypto](https://github.com/mit-plv/fiat-crypto)).\nBackend selection details and instructions can be found in the [curve25519-dalek docs](https://github.com/dalek-cryptography/curve25519-dalek#backends).\n# Contributing\nSee [CONTRIBUTING.md](https://github.com/dalek-cryptography/curve25519-dalek/blob/CONTRIBUTING.md)\n# Batch Signature Verification\nThe standard variants of batch signature verification (i.e. many signatures made with potentially many different public keys over potentially many different messages) is available via the ``batch`` feature. It uses deterministic randomness, i.e., it hashes the inputs (using [``merlin``](https://merlin.cool/), which handles transcript item separation) and uses the result to generate random coefficients. Batch verification requires allocation, so this won't function in heapless settings.\n# Validation Criteria\nThe _validation criteria_ of a signature scheme are the criteria that signatures and public keys must satisfy in order to be accepted. Unfortunately, Ed25519 has some underspecified parts, leading to different validation criteria across implementations. For a very good overview of this, see [Henry's post](https://hdevalence.ca/blog/2020-10-04-its-25519am).\nIn this section, we mention some specific details about our validation criteria, and how to navigate them.\n## Malleability and the ``legacy_compatibility`` Feature\nA signature scheme is considered to produce _malleable signatures_ if a passive attacker with knowledge of a public key _A_ , message _m_ , and valid signature _\u03c3'_ can produce a distinct _\u03c3'_ such that _\u03c3'_ is a valid signature of _m_ with respect to _A_. A scheme is only malleable if the attacker can do this _without_ knowledge of the private key corresponding to _A_.\n``ed25519-dalek`` is not a malleable signature scheme.\nSome other Ed25519 implementations are malleable, though, such as [libsodium with ```ED25519_COMPAT``` enabled](https://github.com/jedisct1/libsodium/blob/24211d370a9335373f0715664271dfe203c7c2cd/src/libsodium/crypto_sign/ed25519/ref10/open.c#L30), [ed25519-donna](https://github.com/floodyberry/ed25519-donna/blob/8757bd4cd209cb032853ece0ce413f122eef212c/ed25519.c#L100), [NaCl's ref10 impl](https://github.com/floodyberry/ed25519-donna/blob/8757bd4cd209cb032853ece0ce413f122eef212c/fuzz/ed25519-ref10.c#L4627), and probably a lot more. If you need to interoperate with such implementations and accept otherwise invalid signatures, you can enable the ``legacy_compatibility`` flag. **Do not enable``legacy_compatibility``** if you don't have to, because it will make your signatures malleable.\nNote: [CIRCL](https://github.com/cloudflare/circl/blob/fa6e0cca79a443d7be18ed241e779adf9ed2a301/sign/ed25519/ed25519.go#L358) has no scalar range check at all. We do not have a feature flag for interoperating with the larger set of RFC-disallowed signatures that CIRCL accepts.\n## Weak key Forgery and ```verify_strict``(``)```\nA _signature forgery_ is what it sounds like: it's when an attacker, given a public key _A_ , creates a signature _\u03c3_ and message _m_ such that _\u03c3_ is a valid signature of _m_ with respect to _A_. Since this is the core security definition of any signature scheme, Ed25519 signatures cannot be forged.\nHowever, there's a much looser kind of forgery that Ed25519 permits, which we call _weak key forgery_. An attacker can produce a special public key _A_ (which we call a _weak_ public key) and a signature _\u03c3_ such that _\u03c3_ is a valid signature of _any_ message _m_ , with respect to _A_ , with high probability. This attack is acknowledged in the [Ed25519 paper](https://ed25519.cr.yp.to/ed25519-20110926.pdf), and caused an exploitable bug in the Scuttlebutt protocol ([paper](https://eprint.iacr.org/2019/526.pdf), section 7.1). The [```VerifyingKey`::``verify`(``)```](https://docs.rs/ed25519-dalek/latest/ed25519_dalek/struct.VerifyingKey.html#method.verify) function permits weak keys.\nWe provide [```VerifyingKey`::``verify_strict``](https://docs.rs/ed25519-dalek/latest/ed25519_dalek/struct.VerifyingKey.html#method.verify_strict) (and [``verify_strict_prehashed``](https://docs.rs/ed25519-dalek/latest/ed25519_dalek/struct.VerifyingKey.html#method.verify_strict_prehashed)) to help users avoid these scenarios. These functions perform an extra check on _A_ , ensuring it's not a weak public key. In addition, we provide the [```VerifyingKey`::``is_weak``](https://docs.rs/ed25519-dalek/latest/ed25519_dalek/struct.VerifyingKey.html#method.is_weak) to allow users to perform this check before attempting signature verification.\n## Batch verification\nAs mentioned above, weak public keys can be used to produce signatures for unknown messages with high probability. This means that sometimes a weak forgery attempt will fail. In fact, it can fail up to 7/8 of the time. If you call ```verify``(``)``` twice on the same failed forgery, it will return an error both times, as expected. However, if you call ```verify_batch``(``)``` twice on two distinct otherwise-valid batches, both of which contain the failed forgery, there's a 21% chance that one fails and the other succeeds.\nWhy is this? It's because ```verify_batch``(``)``` does not do the weak key testing of ```verify_strict``(``)```, and it multiplies each verification equation by some random coefficient. If the failed forgery gets multiplied by 8, then the weak key (which is a low-order point) becomes 0, and the verification equation on the attempted forgery will succeed.\nSince ```verify_batch``(``)``` is intended to be high-throughput, we think it's best not to put weak key checks in it. If you want to prevent weird behavior due to weak public keys in your batches, you should call [```VerifyingKey`::``is_weak``](https://docs.rs/ed25519-dalek/latest/ed25519_dalek/struct.VerifyingKey.html#method.is_weak) on the inputs in advance.\n#### Dependencies\n~0.7\u20132MB  ~43K SLoC\n  * [curve25519-dalek](https://lib.rs/crates/curve25519-dalek \"new\") 4.0[+digest](https://lib.rs/crates/curve25519-dalek/features#feature-digest)\n  * [ed25519](https://lib.rs/crates/ed25519 \"new\") >=2.2, <2.3\n  * [alloc?](https://lib.rs/crates/ed25519-dalek/features#feature-alloc \"optional feature\") [serde?](https://lib.rs/crates/ed25519-dalek/features#feature-serde \"optional feature\") [std?](https://lib.rs/crates/ed25519-dalek/features#feature-std \"optional feature\") [serde](https://lib.rs/crates/serde \"1.0\")\n  * [alloc](https://lib.rs/crates/ed25519-dalek/features#feature-alloc \"default feature\") [zeroize](https://lib.rs/crates/ed25519-dalek/features#feature-zeroize \"default feature\") [zeroize](https://lib.rs/crates/zeroize \"1.5\")\n  * [sha2](https://lib.rs/crates/sha2 \"0.10\")\n  * [subtle](https://lib.rs/crates/subtle \"2.3.0\")\n  * [batch?](https://lib.rs/crates/ed25519-dalek/features#feature-batch \"optional feature\") [merlin](https://lib.rs/crates/merlin \"3\")\n  * [ optional ](https://lib.rs/crates/ed25519-dalek/features#feature-rand_core \"rand_core is optional feature\") [rand_core](https://lib.rs/crates/rand_core \"outdated\") 0.6.4\n  * [digest?](https://lib.rs/crates/ed25519-dalek/features#feature-digest \"optional feature\") [signature](https://lib.rs/crates/signature \"new\") >=2.0, <2.3\n\n\n  * dev  [bincode](https://lib.rs/crates/bincode \"1.0\")\n  * dev  [blake2](https://lib.rs/crates/blake2 \"0.10\")\n  * dev  [criterion](https://lib.rs/crates/criterion \"outdated\") 0.5[+html_reports](https://lib.rs/crates/criterion/features#feature-html_reports)\n  * dev  [hex](https://lib.rs/crates/hex \"0.4\")\n  * dev  [hex-literal](https://lib.rs/crates/hex-literal \"outdated\") 0.4\n  * dev  [rand](https://lib.rs/crates/rand \"outdated\") 0.8\n  * dev  [serde_json](https://lib.rs/crates/serde_json \"1.0\")\n  * dev  [sha3](https://lib.rs/crates/sha3 \"0.10\")\n  * dev  [toml](https://lib.rs/crates/toml \"obsolete\") 0.7\n  * dev  [x25519-dalek](https://lib.rs/crates/x25519-dalek \"new\") 2.0[+static_secrets](https://lib.rs/crates/x25519-dalek/features#feature-static_secrets)\n\n\n#### [Other features](https://lib.rs/crates/ed25519-dalek/features)\n  * [asm](https://lib.rs/crates/ed25519-dalek/features#feature-asm)\n  * [fast](https://lib.rs/crates/ed25519-dalek/features#feature-fast)\n  * [hazmat](https://lib.rs/crates/ed25519-dalek/features#feature-hazmat)\n  * [legacy_compatibility](https://lib.rs/crates/ed25519-dalek/features#feature-legacy_compatibility)\n  * [pem](https://lib.rs/crates/ed25519-dalek/features#feature-pem)\n  * [pkcs8](https://lib.rs/crates/ed25519-dalek/features#feature-pkcs8)\n\n\n  *[SLoC]: approx. additional lines of code\n",
              "markdown_with_citations": "###  32 releases\u27e81\u27e9 (5 stable)\n2.1.1 |  Feb 7, 2024   \n---|---  \n2.1.0 |  Nov 16, 2023   \n2.0.0 |  Aug 11, 2023   \n2.0.0-rc.3 |  Jun 24, 2023   \n0.1.0 |  Dec 9, 2016   \n#**13** in #ed25519-key\u27e82\u27e9\nDownload history 869423/week @ 2025-03-08 1057581/week @ 2025-03-15 1402983/week @ 2025-03-22 778846/week @ 2025-03-29 794475/week @ 2025-04-05 682147/week @ 2025-04-12 641658/week @ 2025-04-19 586440/week @ 2025-04-26 648946/week @ 2025-05-03 645364/week @ 2025-05-10 650985/week @ 2025-05-17 589833/week @ 2025-05-24 613583/week @ 2025-05-31 587144/week @ 2025-06-07 587324/week @ 2025-06-14 554738/week @ 2025-06-21\n**2,446,993** downloads per month Used in **4,260** crates (690 directly)\u27e83\u27e9\n**BSD-3-Clause**\n1.5MB  **27K** SLoC\n# ed25519-dalek ![\u27e84\u27e9](https://crates.io/crates/ed25519-dalek) ![\u27e85\u27e9](https://docs.rs/ed25519-dalek) ![CI\u27e86\u27e9](https://github.com/dalek-cryptography/curve25519-dalek/actions/workflows/ed25519-dalek.yml)\nFast and efficient Rust implementation of ed25519 key generation, signing, and verification.\n# Use\nTo import ``ed25519-dalek``, add the following to the dependencies section of your project's ``Cargo.toml``:\n```\n`ed25519-dalek = \"2\"\n`\n```\n\n# Feature Flags\nThis crate is ````#``[``no_std``]```` compatible with ``default`-`features `=` `false```.\nFeature | Default? | Description  \n---|---|---  \n``alloc`` | \u2713 | When ``pkcs8`` is enabled, implements ``EncodePrivateKey``/``EncodePublicKey`` for ``SigningKey``/``VerifyingKey``, respectively.  \n``std`` | \u2713 | Implements ```std`::```error`::``Error`` for ``SignatureError``. Also enables ``alloc``.  \n``zeroize`` | \u2713 | Implements ``Zeroize`` and ``ZeroizeOnDrop`` for ``SigningKey``  \n``rand_core`` |  | Enables ```SigningKey`::``generate``  \n``batch`` |  | Enables ``verify_batch`` for verifying many signatures quickly. Also enables ``rand_core``.  \n``digest`` |  | Enables ``Context``, ```SigningKey`::````{`with_context`,` sign_prehashed```}```` and ```VerifyingKey`::````{`with_context`,` verify_prehashed`,` verify_prehashed_strict```}```` for Ed25519ph prehashed signatures  \n``asm`` |  | Enables assembly optimizations in the SHA-512 compression functions  \n``pkcs8`` |  | Enables PKCS#8\u27e87\u27e9 serialization/deserialization for ``SigningKey`` and ``VerifyingKey``  \n``pem`` |  | Enables PEM serialization support for PKCS#8 private keys and SPKI public keys. Also enables ``alloc``.  \n``legacy_compatibility`` |  | **Unsafe:** Disables certain signature checks. See below\u27e88\u27e9  \n``hazmat`` |  | **Unsafe:** Exposes the ``hazmat`` module for raw signing/verifying. Misuse of these functions will expose the private key, as in the signing oracle attack\u27e89\u27e9.  \n# Major Changes\nSee CHANGELOG.md\u27e810\u27e9 for a list of changes made in past version of this crate.\n## Breaking Changes in 2.0.0\n  * Bump MSRV from 1.41 to 1.60.0\n  * Bump Rust edition\n  * Bump ``signature`` dependency to 2.0\n  * Make ``digest`` an optional dependency\n  * Make ``zeroize`` an optional dependency\n  * Make ``rand_core`` an optional dependency\n  * Adopt curve25519-backend selection\u27e811\u27e9 over features\n  * Make all batch verification deterministic remove ``batch_deterministic`` (#256\u27e812\u27e9)\n  * Remove ``ExpandedSecretKey`` API (#205\u27e813\u27e9)\n  * Rename ``Keypair`` \u2192 ``SigningKey`` and ``PublicKey`` \u2192 ``VerifyingKey``\n  * Make ``hazmat`` feature to expose, ``ExpandedSecretKey``, ```raw_sign``(``)```, ```raw_sign_prehashed``(``)```, ```raw_verify``(``)```, and ```raw_verify_prehashed``(``)```\n\n\n# Documentation\nDocumentation is available here\u27e814\u27e9.\n# Compatibility Policies\nAll on-by-default features of this library are covered by semantic versioning\u27e815\u27e9 (SemVer). SemVer exemptions are outlined below for MSRV and public API.\n## Minimum Supported Rust Version\nReleases | MSRV  \n---|---  \n2.x | 1.60  \n1.x | 1.41  \nFrom 2.x and on, MSRV changes will be accompanied by a minor version bump.\n## Public API SemVer Exemptions\nBreaking changes to SemVer-exempted components affecting the public API will be accompanied by some version bump.\nBelow are the specific policies:\nReleases | Public API Component(s) | Policy  \n---|---|---  \n2.x | Dependencies ``digest``, ``pkcs8`` and ``rand_core`` | Minor SemVer bump  \n# Safety\n``ed25519-dalek`` is designed to prevent misuse. Signing is constant-time, all signing keys are zeroed when they go out of scope (unless ``zeroize`` is disabled), detached public keys cannot\u27e816\u27e9 be used for signing, and extra functions like ```VerifyingKey`::``verify_strict``\u27e817\u27e9 are made available to avoid known gotchas.\nFurther, this crate has no\u2014and in fact forbids\u2014unsafe code. You can opt in to using some highly optimized unsafe code that resides in ``curve25519-dalek``, though. See below\u27e818\u27e9 for more information on backend selection.\n# Performance\nPerformance is a secondary goal behind correctness, safety, and clarity, but we aim to be competitive with other implementations.\n## Benchmarks\nBenchmarks are run using criterion.rs\u27e819\u27e9:\n```\n```cargo``` bench`` --`features` ``\"`batch`\"```\n``#``` Uses avx2 or ifma only if compiled for an appropriate target.\n`export RUSTFLAGS='-C target_cpu=native'\ncargo +nightly bench --features \"batch\"\n`\n```\n\nOn an Intel 10700K running at stock comparing between the ``curve25519-dalek`` backends.\nBenchmark | u64 | simd +avx2 | fiat  \n---|---|---|---  \nsigning | 15.017 \u00b5s | 13.906 \u00b5s -7.3967% | 15.877 \u03bcs +5.7268%  \nsignature verification | 40.144 \u00b5s | 25.963 \u00b5s -35.603% | 42.118 \u03bcs +4.9173%  \nstrict signature verification | 41.334 \u00b5s | 27.874 \u00b5s -32.660% | 43.985 \u03bcs +6.4136%  \nbatch signature verification/4 | 109.44 \u00b5s | 81.778 \u00b5s -25.079% | 117.80 \u03bcs +7.6389%  \nbatch signature verification/8 | 182.75 \u00b5s | 138.40 \u00b5s -23.871% | 195.86 \u03bcs +7.1737%  \nbatch signature verification/16 | 328.67 \u00b5s | 251.39 \u00b5s -23.744% | 351.55 \u03bcs +6.9614%  \nbatch signature verification/32 | 619.49 \u00b5s | 477.36 \u00b5s -23.053% | 669.41 \u03bcs +8.0582%  \nbatch signature verification/64 | 1.2136 ms | 936.85 \u00b5s -22.543% | 1.3028 ms +7.3500%  \nbatch signature verification/96 | 1.8677 ms | 1.2357 ms -33.936% | 2.0552 ms +10.039%  \nbatch signature verification/128 | 2.3281 ms | 1.5795 ms -31.996% | 2.5596 ms +9.9437%  \nbatch signature verification/256 | 4.1868 ms | 2.8864 ms -31.061% | 4.6494 \u03bcs +11.049%  \nkeypair generation | 13.973 \u00b5s | 13.108 \u00b5s -6.5062% | 15.099 \u03bcs +8.0584%  \n## Batch Performance\nIf your protocol or application is able to batch signatures for verification, the ``verify_batch``\u27e820\u27e9 function has greatly improved performance.\nAs you can see, there's an optimal batch size for each machine, so you'll likely want to test the benchmarks on your target CPU to discover the best size.\n## (Micro)Architecture Specific Backends\nA _backend_ refers to an implementation of elliptic curve and scalar arithmetic. Different backends have different use cases. For example, if you demand formally verified code, you want to use the ``fiat`` backend (as it was generated from Fiat Crypto\u27e821\u27e9).\nBackend selection details and instructions can be found in the curve25519-dalek docs\u27e822\u27e9.\n# Contributing\nSee CONTRIBUTING.md\u27e823\u27e9\n# Batch Signature Verification\nThe standard variants of batch signature verification (i.e. many signatures made with potentially many different public keys over potentially many different messages) is available via the ``batch`` feature. It uses deterministic randomness, i.e., it hashes the inputs (using ``merlin``\u27e824\u27e9, which handles transcript item separation) and uses the result to generate random coefficients. Batch verification requires allocation, so this won't function in heapless settings.\n# Validation Criteria\nThe _validation criteria_ of a signature scheme are the criteria that signatures and public keys must satisfy in order to be accepted. Unfortunately, Ed25519 has some underspecified parts, leading to different validation criteria across implementations. For a very good overview of this, see Henry's post\u27e825\u27e9.\nIn this section, we mention some specific details about our validation criteria, and how to navigate them.\n## Malleability and the ``legacy_compatibility`` Feature\nA signature scheme is considered to produce _malleable signatures_ if a passive attacker with knowledge of a public key _A_ , message _m_ , and valid signature _\u03c3'_ can produce a distinct _\u03c3'_ such that _\u03c3'_ is a valid signature of _m_ with respect to _A_. A scheme is only malleable if the attacker can do this _without_ knowledge of the private key corresponding to _A_.\n``ed25519-dalek`` is not a malleable signature scheme.\nSome other Ed25519 implementations are malleable, though, such as libsodium with ```ED25519_COMPAT``` enabled\u27e826\u27e9, ed25519-donna\u27e827\u27e9, NaCl's ref10 impl\u27e828\u27e9, and probably a lot more. If you need to interoperate with such implementations and accept otherwise invalid signatures, you can enable the ``legacy_compatibility`` flag. **Do not enable``legacy_compatibility``** if you don't have to, because it will make your signatures malleable.\nNote: CIRCL\u27e829\u27e9 has no scalar range check at all. We do not have a feature flag for interoperating with the larger set of RFC-disallowed signatures that CIRCL accepts.\n## Weak key Forgery and ```verify_strict``(``)```\nA _signature forgery_ is what it sounds like: it's when an attacker, given a public key _A_ , creates a signature _\u03c3_ and message _m_ such that _\u03c3_ is a valid signature of _m_ with respect to _A_. Since this is the core security definition of any signature scheme, Ed25519 signatures cannot be forged.\nHowever, there's a much looser kind of forgery that Ed25519 permits, which we call _weak key forgery_. An attacker can produce a special public key _A_ (which we call a _weak_ public key) and a signature _\u03c3_ such that _\u03c3_ is a valid signature of _any_ message _m_ , with respect to _A_ , with high probability. This attack is acknowledged in the Ed25519 paper\u27e830\u27e9, and caused an exploitable bug in the Scuttlebutt protocol (paper\u27e831\u27e9, section 7.1). The ```VerifyingKey`::``verify`(``)```\u27e832\u27e9 function permits weak keys.\nWe provide ```VerifyingKey`::``verify_strict``\u27e833\u27e9 (and ``verify_strict_prehashed``\u27e834\u27e9) to help users avoid these scenarios. These functions perform an extra check on _A_ , ensuring it's not a weak public key. In addition, we provide the ```VerifyingKey`::``is_weak``\u27e835\u27e9 to allow users to perform this check before attempting signature verification.\n## Batch verification\nAs mentioned above, weak public keys can be used to produce signatures for unknown messages with high probability. This means that sometimes a weak forgery attempt will fail. In fact, it can fail up to 7/8 of the time. If you call ```verify``(``)``` twice on the same failed forgery, it will return an error both times, as expected. However, if you call ```verify_batch``(``)``` twice on two distinct otherwise-valid batches, both of which contain the failed forgery, there's a 21% chance that one fails and the other succeeds.\nWhy is this? It's because ```verify_batch``(``)``` does not do the weak key testing of ```verify_strict``(``)```, and it multiplies each verification equation by some random coefficient. If the failed forgery gets multiplied by 8, then the weak key (which is a low-order point) becomes 0, and the verification equation on the attempted forgery will succeed.\nSince ```verify_batch``(``)``` is intended to be high-throughput, we think it's best not to put weak key checks in it. If you want to prevent weird behavior due to weak public keys in your batches, you should call ```VerifyingKey`::``is_weak``\u27e835\u27e9 on the inputs in advance.\n#### Dependencies\n~0.7\u20132MB  ~43K SLoC\n  * curve25519-dalek\u27e836\u27e9 4.0+digest\u27e837\u27e9\n  * ed25519\u27e838\u27e9 >=2.2, <2.3\n  * alloc?\u27e839\u27e9 serde?\u27e840\u27e9 std?\u27e841\u27e9 serde\u27e842\u27e9\n  * alloc\u27e839\u27e9 zeroize\u27e843\u27e9 zeroize\u27e844\u27e9\n  * sha2\u27e845\u27e9\n  * subtle\u27e846\u27e9\n  * batch?\u27e847\u27e9 merlin\u27e848\u27e9\n  *  optional \u27e849\u27e9 rand_core\u27e850\u27e9 0.6.4\n  * digest?\u27e851\u27e9 signature\u27e852\u27e9 >=2.0, <2.3\n\n\n  * dev  bincode\u27e853\u27e9\n  * dev  blake2\u27e854\u27e9\n  * dev  criterion\u27e855\u27e9 0.5+html_reports\u27e856\u27e9\n  * dev  hex\u27e857\u27e9\n  * dev  hex-literal\u27e858\u27e9 0.4\n  * dev  rand\u27e859\u27e9 0.8\n  * dev  serde_json\u27e860\u27e9\n  * dev  sha3\u27e861\u27e9\n  * dev  toml\u27e862\u27e9 0.7\n  * dev  x25519-dalek\u27e863\u27e9 2.0+static_secrets\u27e864\u27e9\n\n\n#### Other features\u27e865\u27e9\n  * asm\u27e866\u27e9\n  * fast\u27e867\u27e9\n  * hazmat\u27e868\u27e9\n  * legacy_compatibility\u27e869\u27e9\n  * pem\u27e870\u27e9\n  * pkcs8\u27e871\u27e9\n\n\n  *[SLoC]: approx. additional lines of code\n",
              "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://lib.rs/crates/ed25519-dalek/versions: 32 releases\n\u27e82\u27e9 https://lib.rs/keywords/ed25519-key: #ed25519-key\n\u27e83\u27e9 https://lib.rs/crates/ed25519-dalek/rev: **4,260** crates (690 directly)\n\u27e84\u27e9 https://img.shields.io/crates/v/ed25519-dalek.svg: ![\n\u27e85\u27e9 https://img.gs/czjpqfbdkz/full/https://docs.rs/ed25519-dalek/badge.svg: ![\n\u27e86\u27e9 https://img.gs/czjpqfbdkz/full/https://github.com/dalek-cryptography/curve25519-dalek/actions/workflows/ed25519-dalek.yml/badge.svg?branch=main: ![CI\n\u27e87\u27e9 https://en.wikipedia.org/wiki/PKCS_8: PKCS#8\n\u27e88\u27e9 https://lib.rs/crates/ed25519-dalek#readme-malleability-and-the-legacy_compatibility-feature: below\n\u27e89\u27e9 https://github.com/MystenLabs/ed25519-unsafe-libs: signing oracle attack\n\u27e810\u27e9 https://github.com/dalek-cryptography/curve25519-dalek/blob/HEAD/CHANGELOG.md: CHANGELOG.md\n\u27e811\u27e9 https://github.com/dalek-cryptography/curve25519-dalek/#backends: curve25519-backend selection\n\u27e812\u27e9 https://github.com/dalek-cryptography/ed25519-dalek/pull/256: #256\n\u27e813\u27e9 https://github.com/dalek-cryptography/ed25519-dalek/pull/205: #205\n\u27e814\u27e9 https://docs.rs/ed25519-dalek: here\n\u27e815\u27e9 https://semver.org/spec/v2.0.0.html: semantic versioning\n\u27e816\u27e9 https://github.com/MystenLabs/ed25519-unsafe-libs/blob/main/README.md: cannot\n\u27e817\u27e9 https://lib.rs/crates/ed25519-dalek#readme-weak-key-forgery-and-verify_strict: ```VerifyingKey`::``verify_strict``\n\u27e818\u27e9 https://lib.rs/crates/ed25519-dalek#readme-microarchitecture-specific-backends: below\n\u27e819\u27e9 https://github.com/japaric/criterion.rs: criterion.rs\n\u27e820\u27e9 https://docs.rs/ed25519-dalek/latest/ed25519_dalek/fn.verify_batch.html: ``verify_batch``\n\u27e821\u27e9 https://github.com/mit-plv/fiat-crypto: Fiat Crypto\n\u27e822\u27e9 https://github.com/dalek-cryptography/curve25519-dalek#backends: curve25519-dalek docs\n\u27e823\u27e9 https://github.com/dalek-cryptography/curve25519-dalek/blob/CONTRIBUTING.md: CONTRIBUTING.md\n\u27e824\u27e9 https://merlin.cool/: ``merlin``\n\u27e825\u27e9 https://hdevalence.ca/blog/2020-10-04-its-25519am: Henry's post\n\u27e826\u27e9 https://github.com/jedisct1/libsodium/blob/24211d370a9335373f0715664271dfe203c7c2cd/src/libsodium/crypto_sign/ed25519/ref10/open.c#L30: libsodium with ```ED25519_COMPAT``` enabled\n\u27e827\u27e9 https://github.com/floodyberry/ed25519-donna/blob/8757bd4cd209cb032853ece0ce413f122eef212c/ed25519.c#L100: ed25519-donna\n\u27e828\u27e9 https://github.com/floodyberry/ed25519-donna/blob/8757bd4cd209cb032853ece0ce413f122eef212c/fuzz/ed25519-ref10.c#L4627: NaCl's ref10 impl\n\u27e829\u27e9 https://github.com/cloudflare/circl/blob/fa6e0cca79a443d7be18ed241e779adf9ed2a301/sign/ed25519/ed25519.go#L358: CIRCL\n\u27e830\u27e9 https://ed25519.cr.yp.to/ed25519-20110926.pdf: Ed25519 paper\n\u27e831\u27e9 https://eprint.iacr.org/2019/526.pdf: paper\n\u27e832\u27e9 https://docs.rs/ed25519-dalek/latest/ed25519_dalek/struct.VerifyingKey.html#method.verify: ```VerifyingKey`::``verify`(``)```\n\u27e833\u27e9 https://docs.rs/ed25519-dalek/latest/ed25519_dalek/struct.VerifyingKey.html#method.verify_strict: ```VerifyingKey`::``verify_strict``\n\u27e834\u27e9 https://docs.rs/ed25519-dalek/latest/ed25519_dalek/struct.VerifyingKey.html#method.verify_strict_prehashed: ``verify_strict_prehashed``\n\u27e835\u27e9 https://docs.rs/ed25519-dalek/latest/ed25519_dalek/struct.VerifyingKey.html#method.is_weak: ```VerifyingKey`::``is_weak``\n\u27e836\u27e9 https://lib.rs/crates/curve25519-dalek: new - curve25519-dalek\n\u27e837\u27e9 https://lib.rs/crates/curve25519-dalek/features#feature-digest: +digest\n\u27e838\u27e9 https://lib.rs/crates/ed25519: new - ed25519\n\u27e839\u27e9 https://lib.rs/crates/ed25519-dalek/features#feature-alloc: optional feature - alloc?\n\u27e840\u27e9 https://lib.rs/crates/ed25519-dalek/features#feature-serde: optional feature - serde?\n\u27e841\u27e9 https://lib.rs/crates/ed25519-dalek/features#feature-std: optional feature - std?\n\u27e842\u27e9 https://lib.rs/crates/serde: 1.0 - serde\n\u27e843\u27e9 https://lib.rs/crates/ed25519-dalek/features#feature-zeroize: default feature - zeroize\n\u27e844\u27e9 https://lib.rs/crates/zeroize: 1.5 - zeroize\n\u27e845\u27e9 https://lib.rs/crates/sha2: 0.10 - sha2\n\u27e846\u27e9 https://lib.rs/crates/subtle: 2.3.0 - subtle\n\u27e847\u27e9 https://lib.rs/crates/ed25519-dalek/features#feature-batch: optional feature - batch?\n\u27e848\u27e9 https://lib.rs/crates/merlin: 3 - merlin\n\u27e849\u27e9 https://lib.rs/crates/ed25519-dalek/features#feature-rand_core: rand_core is optional feature -  optional \n\u27e850\u27e9 https://lib.rs/crates/rand_core: outdated - rand_core\n\u27e851\u27e9 https://lib.rs/crates/ed25519-dalek/features#feature-digest: optional feature - digest?\n\u27e852\u27e9 https://lib.rs/crates/signature: new - signature\n\u27e853\u27e9 https://lib.rs/crates/bincode: 1.0 - bincode\n\u27e854\u27e9 https://lib.rs/crates/blake2: 0.10 - blake2\n\u27e855\u27e9 https://lib.rs/crates/criterion: outdated - criterion\n\u27e856\u27e9 https://lib.rs/crates/criterion/features#feature-html_reports: +html_reports\n\u27e857\u27e9 https://lib.rs/crates/hex: 0.4 - hex\n\u27e858\u27e9 https://lib.rs/crates/hex-literal: outdated - hex-literal\n\u27e859\u27e9 https://lib.rs/crates/rand: outdated - rand\n\u27e860\u27e9 https://lib.rs/crates/serde_json: 1.0 - serde_json\n\u27e861\u27e9 https://lib.rs/crates/sha3: 0.10 - sha3\n\u27e862\u27e9 https://lib.rs/crates/toml: obsolete - toml\n\u27e863\u27e9 https://lib.rs/crates/x25519-dalek: new - x25519-dalek\n\u27e864\u27e9 https://lib.rs/crates/x25519-dalek/features#feature-static_secrets: +static_secrets\n\u27e865\u27e9 https://lib.rs/crates/ed25519-dalek/features: Other features\n\u27e866\u27e9 https://lib.rs/crates/ed25519-dalek/features#feature-asm: asm\n\u27e867\u27e9 https://lib.rs/crates/ed25519-dalek/features#feature-fast: fast\n\u27e868\u27e9 https://lib.rs/crates/ed25519-dalek/features#feature-hazmat: hazmat\n\u27e869\u27e9 https://lib.rs/crates/ed25519-dalek/features#feature-legacy_compatibility: legacy_compatibility\n\u27e870\u27e9 https://lib.rs/crates/ed25519-dalek/features#feature-pem: pem\n\u27e871\u27e9 https://lib.rs/crates/ed25519-dalek/features#feature-pkcs8: pkcs8\n",
              "fit_markdown": "",
              "fit_html": ""
            },
            "structured_data": {},
            "quality_score": 4.0,
            "extraction_method": "crawl4ai",
            "error": null,
            "metadata": {
              "doc_type": "docs",
              "content_length": 16632,
              "has_structured_data": false,
              "crawl_success": true
            },
            "timestamp": "118393.784652"
          }
        },
        "crate_analysis": {
          "status": "completed",
          "check": [
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#cpufeatures@0.2.17",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\cpufeatures-0.2.17\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "cpufeatures",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\cpufeatures-0.2.17\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmporvyhee1\\ed25519-dalek-2.1.1\\target\\debug\\deps\\libcpufeatures-43bbc20eaecde5c1.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#cfg-if@1.0.1",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\cfg-if-1.0.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "cfg_if",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\cfg-if-1.0.1\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmporvyhee1\\ed25519-dalek-2.1.1\\target\\debug\\deps\\libcfg_if-0416b600f5de43de.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#unicode-ident@1.0.18",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\unicode-ident-1.0.18\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "unicode_ident",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\unicode-ident-1.0.18\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmporvyhee1\\ed25519-dalek-2.1.1\\target\\debug\\deps\\libunicode_ident-f7db65657b8daa2b.rlib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmporvyhee1\\ed25519-dalek-2.1.1\\target\\debug\\deps\\libunicode_ident-f7db65657b8daa2b.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#signature@2.2.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\signature-2.2.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "signature",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\signature-2.2.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "alloc",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmporvyhee1\\ed25519-dalek-2.1.1\\target\\debug\\deps\\libsignature-7783634483113c89.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#subtle@2.6.1",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\subtle-2.6.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "subtle",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\subtle-2.6.1\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmporvyhee1\\ed25519-dalek-2.1.1\\target\\debug\\deps\\libsubtle-6a8dd217adcca8a8.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#zeroize@1.8.1",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\zeroize-1.8.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "zeroize",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\zeroize-1.8.1\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "alloc"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmporvyhee1\\ed25519-dalek-2.1.1\\target\\debug\\deps\\libzeroize-aea455bb79dc51b1.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#version_check@0.9.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.9.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "version_check",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.9.5\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmporvyhee1\\ed25519-dalek-2.1.1\\target\\debug\\deps\\libversion_check-8a7cb6ed787a6dad.rlib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmporvyhee1\\ed25519-dalek-2.1.1\\target\\debug\\deps\\libversion_check-8a7cb6ed787a6dad.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#ed25519@2.2.3",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\ed25519-2.2.3\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "ed25519",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\ed25519-2.2.3\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "alloc",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmporvyhee1\\ed25519-dalek-2.1.1\\target\\debug\\deps\\libed25519-e865abff06685a84.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#semver@1.0.26",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-1.0.26\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-1.0.26\\build.rs",
                "edition": "2018",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmporvyhee1\\ed25519-dalek-2.1.1\\target\\debug\\build\\semver-91f5c434b8fd4f4c\\build-script-build.exe",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmporvyhee1\\ed25519-dalek-2.1.1\\target\\debug\\build\\semver-91f5c434b8fd4f4c\\build_script_build.pdb"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#proc-macro2@1.0.95",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\proc-macro2-1.0.95\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\proc-macro2-1.0.95\\build.rs",
                "edition": "2021",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "proc-macro"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmporvyhee1\\ed25519-dalek-2.1.1\\target\\debug\\build\\proc-macro2-ff1a34852a360a33\\build-script-build.exe",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmporvyhee1\\ed25519-dalek-2.1.1\\target\\debug\\build\\proc-macro2-ff1a34852a360a33\\build_script_build.pdb"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#typenum@1.18.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\typenum-1.18.0\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\typenum-1.18.0\\build.rs",
                "edition": "2018",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmporvyhee1\\ed25519-dalek-2.1.1\\target\\debug\\build\\typenum-37b019eb12bdcebe\\build-script-build.exe",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmporvyhee1\\ed25519-dalek-2.1.1\\target\\debug\\build\\typenum-37b019eb12bdcebe\\build_script_build.pdb"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "build-script-executed",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#semver@1.0.26",
              "linked_libs": [],
              "linked_paths": [],
              "cfgs": [],
              "env": [],
              "out_dir": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmporvyhee1\\ed25519-dalek-2.1.1\\target\\debug\\build\\semver-4a07a867cb7b6953\\out"
            },
            {
              "reason": "build-script-executed",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#proc-macro2@1.0.95",
              "linked_libs": [],
              "linked_paths": [],
              "cfgs": [
                "wrap_proc_macro"
              ],
              "env": [],
              "out_dir": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmporvyhee1\\ed25519-dalek-2.1.1\\target\\debug\\build\\proc-macro2-bd004ad9dcfa0b46\\out"
            },
            {
              "reason": "build-script-executed",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#typenum@1.18.0",
              "linked_libs": [],
              "linked_paths": [],
              "cfgs": [],
              "env": [],
              "out_dir": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmporvyhee1\\ed25519-dalek-2.1.1\\target\\debug\\build\\typenum-82dc82260b93c660\\out"
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#generic-array@0.14.7",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\generic-array-0.14.7\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\generic-array-0.14.7\\build.rs",
                "edition": "2015",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "more_lengths"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmporvyhee1\\ed25519-dalek-2.1.1\\target\\debug\\build\\generic-array-8e5b32e26f9f36b6\\build-script-build.exe",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmporvyhee1\\ed25519-dalek-2.1.1\\target\\debug\\build\\generic-array-8e5b32e26f9f36b6\\build_script_build.pdb"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "build-script-executed",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#generic-array@0.14.7",
              "linked_libs": [],
              "linked_paths": [],
              "cfgs": [
                "relaxed_coherence"
              ],
              "env": [],
              "out_dir": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmporvyhee1\\ed25519-dalek-2.1.1\\target\\debug\\build\\generic-array-2379b21334ff8e3d\\out"
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#semver@1.0.26",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-1.0.26\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "semver",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-1.0.26\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmporvyhee1\\ed25519-dalek-2.1.1\\target\\debug\\deps\\libsemver-36540f5eb86da32d.rlib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmporvyhee1\\ed25519-dalek-2.1.1\\target\\debug\\deps\\libsemver-36540f5eb86da32d.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#typenum@1.18.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\typenum-1.18.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "typenum",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\typenum-1.18.0\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmporvyhee1\\ed25519-dalek-2.1.1\\target\\debug\\deps\\libtypenum-95206a06e2f7623e.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#proc-macro2@1.0.95",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\proc-macro2-1.0.95\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "proc_macro2",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\proc-macro2-1.0.95\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "proc-macro"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmporvyhee1\\ed25519-dalek-2.1.1\\target\\debug\\deps\\libproc_macro2-a3b3807fecd402e3.rlib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmporvyhee1\\ed25519-dalek-2.1.1\\target\\debug\\deps\\libproc_macro2-a3b3807fecd402e3.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#rustc_version@0.4.1",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\rustc_version-0.4.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "rustc_version",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\rustc_version-0.4.1\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmporvyhee1\\ed25519-dalek-2.1.1\\target\\debug\\deps\\librustc_version-c551a9a8c51a3973.rlib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmporvyhee1\\ed25519-dalek-2.1.1\\target\\debug\\deps\\librustc_version-c551a9a8c51a3973.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#quote@1.0.40",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\quote-1.0.40\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "quote",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\quote-1.0.40\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "proc-macro"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmporvyhee1\\ed25519-dalek-2.1.1\\target\\debug\\deps\\libquote-e850c7166d56c5b9.rlib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmporvyhee1\\ed25519-dalek-2.1.1\\target\\debug\\deps\\libquote-e850c7166d56c5b9.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#curve25519-dalek@4.1.3",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\curve25519-dalek-4.1.3\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\curve25519-dalek-4.1.3\\build.rs",
                "edition": "2021",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "alloc",
                "digest",
                "precomputed-tables",
                "zeroize"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmporvyhee1\\ed25519-dalek-2.1.1\\target\\debug\\build\\curve25519-dalek-100f55a3c537a110\\build-script-build.exe",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmporvyhee1\\ed25519-dalek-2.1.1\\target\\debug\\build\\curve25519-dalek-100f55a3c537a110\\build_script_build.pdb"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "build-script-executed",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#curve25519-dalek@4.1.3",
              "linked_libs": [],
              "linked_paths": [],
              "cfgs": [
                "curve25519_dalek_bits=\"64\"",
                "curve25519_dalek_backend=\"simd\""
              ],
              "env": [],
              "out_dir": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmporvyhee1\\ed25519-dalek-2.1.1\\target\\debug\\build\\curve25519-dalek-b11e711a54fa6aac\\out"
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#generic-array@0.14.7",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\generic-array-0.14.7\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "generic_array",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\generic-array-0.14.7\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "more_lengths"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmporvyhee1\\ed25519-dalek-2.1.1\\target\\debug\\deps\\libgeneric_array-9632664d9893cce1.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#crypto-common@0.1.6",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\crypto-common-0.1.6\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "crypto_common",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\crypto-common-0.1.6\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmporvyhee1\\ed25519-dalek-2.1.1\\target\\debug\\deps\\libcrypto_common-fd6b3e68bc469157.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#block-buffer@0.10.4",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\block-buffer-0.10.4\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "block_buffer",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\block-buffer-0.10.4\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmporvyhee1\\ed25519-dalek-2.1.1\\target\\debug\\deps\\libblock_buffer-c1d7e4ef1d3ca7f8.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#digest@0.10.7",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\digest-0.10.7\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "digest",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\digest-0.10.7\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "alloc",
                "block-buffer",
                "core-api",
                "default",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmporvyhee1\\ed25519-dalek-2.1.1\\target\\debug\\deps\\libdigest-fd0c806eaaec1595.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#sha2@0.10.9",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\sha2-0.10.9\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "sha2",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\sha2-0.10.9\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmporvyhee1\\ed25519-dalek-2.1.1\\target\\debug\\deps\\libsha2-384750caaede5218.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#syn@2.0.104",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\syn-2.0.104\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "syn",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\syn-2.0.104\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "clone-impls",
                "default",
                "derive",
                "full",
                "parsing",
                "printing",
                "proc-macro"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmporvyhee1\\ed25519-dalek-2.1.1\\target\\debug\\deps\\libsyn-4b137bbe8fff620f.rlib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmporvyhee1\\ed25519-dalek-2.1.1\\target\\debug\\deps\\libsyn-4b137bbe8fff620f.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#curve25519-dalek-derive@0.1.1",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\curve25519-dalek-derive-0.1.1\\Cargo.toml",
              "target": {
                "kind": [
                  "proc-macro"
                ],
                "crate_types": [
                  "proc-macro"
                ],
                "name": "curve25519_dalek_derive",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\curve25519-dalek-derive-0.1.1\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmporvyhee1\\ed25519-dalek-2.1.1\\target\\debug\\deps\\curve25519_dalek_derive-0911c10d2b023a6b.dll",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmporvyhee1\\ed25519-dalek-2.1.1\\target\\debug\\deps\\curve25519_dalek_derive-0911c10d2b023a6b.dll.lib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmporvyhee1\\ed25519-dalek-2.1.1\\target\\debug\\deps\\curve25519_dalek_derive-0911c10d2b023a6b.dll.exp",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmporvyhee1\\ed25519-dalek-2.1.1\\target\\debug\\deps\\curve25519_dalek_derive-0911c10d2b023a6b.pdb"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#curve25519-dalek@4.1.3",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\curve25519-dalek-4.1.3\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "curve25519_dalek",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\curve25519-dalek-4.1.3\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "alloc",
                "digest",
                "precomputed-tables",
                "zeroize"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmporvyhee1\\ed25519-dalek-2.1.1\\target\\debug\\deps\\libcurve25519_dalek-a7c8ead5af0293ea.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmporvyhee1/ed25519-dalek-2.1.1#ed25519-dalek@2.1.1",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmporvyhee1\\ed25519-dalek-2.1.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "ed25519_dalek",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmporvyhee1\\ed25519-dalek-2.1.1\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "alloc",
                "default",
                "fast",
                "std",
                "zeroize"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmporvyhee1\\ed25519-dalek-2.1.1\\target\\debug\\deps\\libed25519_dalek-ff16d35be95f033a.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "build-finished",
              "success": true
            }
          ],
          "clippy": [
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#typenum@1.18.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\typenum-1.18.0\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\typenum-1.18.0\\build.rs",
                "edition": "2018",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmporvyhee1\\ed25519-dalek-2.1.1\\target\\debug\\build\\typenum-37b019eb12bdcebe\\build-script-build.exe",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmporvyhee1\\ed25519-dalek-2.1.1\\target\\debug\\build\\typenum-37b019eb12bdcebe\\build_script_build.pdb"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#version_check@0.9.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.9.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "version_check",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.9.5\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmporvyhee1\\ed25519-dalek-2.1.1\\target\\debug\\deps\\libversion_check-8a7cb6ed787a6dad.rlib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmporvyhee1\\ed25519-dalek-2.1.1\\target\\debug\\deps\\libversion_check-8a7cb6ed787a6dad.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "build-script-executed",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#typenum@1.18.0",
              "linked_libs": [],
              "linked_paths": [],
              "cfgs": [],
              "env": [],
              "out_dir": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmporvyhee1\\ed25519-dalek-2.1.1\\target\\debug\\build\\typenum-82dc82260b93c660\\out"
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#proc-macro2@1.0.95",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\proc-macro2-1.0.95\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\proc-macro2-1.0.95\\build.rs",
                "edition": "2021",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "proc-macro"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmporvyhee1\\ed25519-dalek-2.1.1\\target\\debug\\build\\proc-macro2-ff1a34852a360a33\\build-script-build.exe",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmporvyhee1\\ed25519-dalek-2.1.1\\target\\debug\\build\\proc-macro2-ff1a34852a360a33\\build_script_build.pdb"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#semver@1.0.26",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-1.0.26\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-1.0.26\\build.rs",
                "edition": "2018",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmporvyhee1\\ed25519-dalek-2.1.1\\target\\debug\\build\\semver-91f5c434b8fd4f4c\\build-script-build.exe",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmporvyhee1\\ed25519-dalek-2.1.1\\target\\debug\\build\\semver-91f5c434b8fd4f4c\\build_script_build.pdb"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#unicode-ident@1.0.18",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\unicode-ident-1.0.18\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "unicode_ident",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\unicode-ident-1.0.18\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmporvyhee1\\ed25519-dalek-2.1.1\\target\\debug\\deps\\libunicode_ident-f7db65657b8daa2b.rlib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmporvyhee1\\ed25519-dalek-2.1.1\\target\\debug\\deps\\libunicode_ident-f7db65657b8daa2b.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#cfg-if@1.0.1",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\cfg-if-1.0.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "cfg_if",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\cfg-if-1.0.1\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmporvyhee1\\ed25519-dalek-2.1.1\\target\\debug\\deps\\libcfg_if-0416b600f5de43de.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#cpufeatures@0.2.17",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\cpufeatures-0.2.17\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "cpufeatures",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\cpufeatures-0.2.17\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmporvyhee1\\ed25519-dalek-2.1.1\\target\\debug\\deps\\libcpufeatures-43bbc20eaecde5c1.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#signature@2.2.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\signature-2.2.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "signature",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\signature-2.2.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "alloc",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmporvyhee1\\ed25519-dalek-2.1.1\\target\\debug\\deps\\libsignature-7783634483113c89.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#subtle@2.6.1",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\subtle-2.6.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "subtle",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\subtle-2.6.1\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmporvyhee1\\ed25519-dalek-2.1.1\\target\\debug\\deps\\libsubtle-6a8dd217adcca8a8.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#zeroize@1.8.1",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\zeroize-1.8.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "zeroize",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\zeroize-1.8.1\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "alloc"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmporvyhee1\\ed25519-dalek-2.1.1\\target\\debug\\deps\\libzeroize-aea455bb79dc51b1.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#generic-array@0.14.7",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\generic-array-0.14.7\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\generic-array-0.14.7\\build.rs",
                "edition": "2015",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "more_lengths"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmporvyhee1\\ed25519-dalek-2.1.1\\target\\debug\\build\\generic-array-8e5b32e26f9f36b6\\build-script-build.exe",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmporvyhee1\\ed25519-dalek-2.1.1\\target\\debug\\build\\generic-array-8e5b32e26f9f36b6\\build_script_build.pdb"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#typenum@1.18.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\typenum-1.18.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "typenum",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\typenum-1.18.0\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmporvyhee1\\ed25519-dalek-2.1.1\\target\\debug\\deps\\libtypenum-95206a06e2f7623e.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "build-script-executed",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#semver@1.0.26",
              "linked_libs": [],
              "linked_paths": [],
              "cfgs": [],
              "env": [],
              "out_dir": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmporvyhee1\\ed25519-dalek-2.1.1\\target\\debug\\build\\semver-4a07a867cb7b6953\\out"
            },
            {
              "reason": "build-script-executed",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#proc-macro2@1.0.95",
              "linked_libs": [],
              "linked_paths": [],
              "cfgs": [
                "wrap_proc_macro"
              ],
              "env": [],
              "out_dir": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmporvyhee1\\ed25519-dalek-2.1.1\\target\\debug\\build\\proc-macro2-bd004ad9dcfa0b46\\out"
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#ed25519@2.2.3",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\ed25519-2.2.3\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "ed25519",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\ed25519-2.2.3\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "alloc",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmporvyhee1\\ed25519-dalek-2.1.1\\target\\debug\\deps\\libed25519-e865abff06685a84.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "build-script-executed",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#generic-array@0.14.7",
              "linked_libs": [],
              "linked_paths": [],
              "cfgs": [
                "relaxed_coherence"
              ],
              "env": [],
              "out_dir": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmporvyhee1\\ed25519-dalek-2.1.1\\target\\debug\\build\\generic-array-2379b21334ff8e3d\\out"
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#proc-macro2@1.0.95",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\proc-macro2-1.0.95\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "proc_macro2",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\proc-macro2-1.0.95\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "proc-macro"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmporvyhee1\\ed25519-dalek-2.1.1\\target\\debug\\deps\\libproc_macro2-a3b3807fecd402e3.rlib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmporvyhee1\\ed25519-dalek-2.1.1\\target\\debug\\deps\\libproc_macro2-a3b3807fecd402e3.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#semver@1.0.26",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-1.0.26\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "semver",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\semver-1.0.26\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmporvyhee1\\ed25519-dalek-2.1.1\\target\\debug\\deps\\libsemver-36540f5eb86da32d.rlib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmporvyhee1\\ed25519-dalek-2.1.1\\target\\debug\\deps\\libsemver-36540f5eb86da32d.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#generic-array@0.14.7",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\generic-array-0.14.7\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "generic_array",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\generic-array-0.14.7\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "more_lengths"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmporvyhee1\\ed25519-dalek-2.1.1\\target\\debug\\deps\\libgeneric_array-9632664d9893cce1.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#quote@1.0.40",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\quote-1.0.40\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "quote",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\quote-1.0.40\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "proc-macro"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmporvyhee1\\ed25519-dalek-2.1.1\\target\\debug\\deps\\libquote-e850c7166d56c5b9.rlib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmporvyhee1\\ed25519-dalek-2.1.1\\target\\debug\\deps\\libquote-e850c7166d56c5b9.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#rustc_version@0.4.1",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\rustc_version-0.4.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "rustc_version",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\rustc_version-0.4.1\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmporvyhee1\\ed25519-dalek-2.1.1\\target\\debug\\deps\\librustc_version-c551a9a8c51a3973.rlib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmporvyhee1\\ed25519-dalek-2.1.1\\target\\debug\\deps\\librustc_version-c551a9a8c51a3973.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#crypto-common@0.1.6",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\crypto-common-0.1.6\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "crypto_common",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\crypto-common-0.1.6\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmporvyhee1\\ed25519-dalek-2.1.1\\target\\debug\\deps\\libcrypto_common-fd6b3e68bc469157.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#block-buffer@0.10.4",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\block-buffer-0.10.4\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "block_buffer",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\block-buffer-0.10.4\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmporvyhee1\\ed25519-dalek-2.1.1\\target\\debug\\deps\\libblock_buffer-c1d7e4ef1d3ca7f8.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#curve25519-dalek@4.1.3",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\curve25519-dalek-4.1.3\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\curve25519-dalek-4.1.3\\build.rs",
                "edition": "2021",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "alloc",
                "digest",
                "precomputed-tables",
                "zeroize"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmporvyhee1\\ed25519-dalek-2.1.1\\target\\debug\\build\\curve25519-dalek-100f55a3c537a110\\build-script-build.exe",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmporvyhee1\\ed25519-dalek-2.1.1\\target\\debug\\build\\curve25519-dalek-100f55a3c537a110\\build_script_build.pdb"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#syn@2.0.104",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\syn-2.0.104\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "syn",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\syn-2.0.104\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "clone-impls",
                "default",
                "derive",
                "full",
                "parsing",
                "printing",
                "proc-macro"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmporvyhee1\\ed25519-dalek-2.1.1\\target\\debug\\deps\\libsyn-4b137bbe8fff620f.rlib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmporvyhee1\\ed25519-dalek-2.1.1\\target\\debug\\deps\\libsyn-4b137bbe8fff620f.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#digest@0.10.7",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\digest-0.10.7\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "digest",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\digest-0.10.7\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "alloc",
                "block-buffer",
                "core-api",
                "default",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmporvyhee1\\ed25519-dalek-2.1.1\\target\\debug\\deps\\libdigest-fd0c806eaaec1595.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "build-script-executed",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#curve25519-dalek@4.1.3",
              "linked_libs": [],
              "linked_paths": [],
              "cfgs": [
                "curve25519_dalek_bits=\"64\"",
                "curve25519_dalek_backend=\"simd\""
              ],
              "env": [],
              "out_dir": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmporvyhee1\\ed25519-dalek-2.1.1\\target\\debug\\build\\curve25519-dalek-b11e711a54fa6aac\\out"
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#curve25519-dalek-derive@0.1.1",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\curve25519-dalek-derive-0.1.1\\Cargo.toml",
              "target": {
                "kind": [
                  "proc-macro"
                ],
                "crate_types": [
                  "proc-macro"
                ],
                "name": "curve25519_dalek_derive",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\curve25519-dalek-derive-0.1.1\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmporvyhee1\\ed25519-dalek-2.1.1\\target\\debug\\deps\\curve25519_dalek_derive-0911c10d2b023a6b.dll",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmporvyhee1\\ed25519-dalek-2.1.1\\target\\debug\\deps\\curve25519_dalek_derive-0911c10d2b023a6b.dll.lib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmporvyhee1\\ed25519-dalek-2.1.1\\target\\debug\\deps\\curve25519_dalek_derive-0911c10d2b023a6b.dll.exp",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmporvyhee1\\ed25519-dalek-2.1.1\\target\\debug\\deps\\curve25519_dalek_derive-0911c10d2b023a6b.pdb"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#curve25519-dalek@4.1.3",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\curve25519-dalek-4.1.3\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "curve25519_dalek",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\curve25519-dalek-4.1.3\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "alloc",
                "digest",
                "precomputed-tables",
                "zeroize"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmporvyhee1\\ed25519-dalek-2.1.1\\target\\debug\\deps\\libcurve25519_dalek-a7c8ead5af0293ea.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#sha2@0.10.9",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\sha2-0.10.9\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "sha2",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\sha2-0.10.9\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmporvyhee1\\ed25519-dalek-2.1.1\\target\\debug\\deps\\libsha2-384750caaede5218.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmporvyhee1/ed25519-dalek-2.1.1#ed25519-dalek@2.1.1",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmporvyhee1\\ed25519-dalek-2.1.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "ed25519_dalek",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmporvyhee1\\ed25519-dalek-2.1.1\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: variables can be used directly in the `format!` string\n  --> src\\errors.rs:63:17\n   |\n63 |                 write!(f, \"{} must be {} bytes in length\", n, l)\n   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args\n   = note: `#[warn(clippy::uninlined_format_args)]` on by default\nhelp: change this to\n   |\n63 -                 write!(f, \"{} must be {} bytes in length\", n, l)\n63 +                 write!(f, \"{n} must be {l} bytes in length\")\n   |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "`#[warn(clippy::uninlined_format_args)]` on by default",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "change this to",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 2102,
                        "byte_start": 2102,
                        "column_end": 29,
                        "column_start": 29,
                        "expansion": null,
                        "file_name": "src\\errors.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 63,
                        "line_start": 63,
                        "suggested_replacement": "n",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 29,
                            "highlight_start": 29,
                            "text": "                write!(f, \"{} must be {} bytes in length\", n, l)"
                          }
                        ]
                      },
                      {
                        "byte_end": 2113,
                        "byte_start": 2113,
                        "column_end": 40,
                        "column_start": 40,
                        "expansion": null,
                        "file_name": "src\\errors.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 63,
                        "line_start": 63,
                        "suggested_replacement": "l",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 40,
                            "highlight_start": 40,
                            "text": "                write!(f, \"{} must be {} bytes in length\", n, l)"
                          }
                        ]
                      },
                      {
                        "byte_end": 2134,
                        "byte_start": 2131,
                        "column_end": 61,
                        "column_start": 58,
                        "expansion": null,
                        "file_name": "src\\errors.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 63,
                        "line_start": 63,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 61,
                            "highlight_start": 58,
                            "text": "                write!(f, \"{} must be {} bytes in length\", n, l)"
                          }
                        ]
                      },
                      {
                        "byte_end": 2137,
                        "byte_start": 2134,
                        "column_end": 64,
                        "column_start": 61,
                        "expansion": null,
                        "file_name": "src\\errors.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 63,
                        "line_start": 63,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 64,
                            "highlight_start": 61,
                            "text": "                write!(f, \"{} must be {} bytes in length\", n, l)"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::uninlined_format_args",
                  "explanation": null
                },
                "level": "warning",
                "message": "variables can be used directly in the `format!` string",
                "spans": [
                  {
                    "byte_end": 2138,
                    "byte_start": 2090,
                    "column_end": 65,
                    "column_start": 17,
                    "expansion": null,
                    "file_name": "src\\errors.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 63,
                    "line_start": 63,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 65,
                        "highlight_start": 17,
                        "text": "                write!(f, \"{} must be {} bytes in length\", n, l)"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-artifact",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmporvyhee1/ed25519-dalek-2.1.1#ed25519-dalek@2.1.1",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmporvyhee1\\ed25519-dalek-2.1.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "ed25519_dalek",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmporvyhee1\\ed25519-dalek-2.1.1\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "alloc",
                "default",
                "fast",
                "std",
                "zeroize"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmporvyhee1\\ed25519-dalek-2.1.1\\target\\debug\\deps\\libed25519_dalek-c9af5cbd6b5bad05.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "build-finished",
              "success": true
            }
          ],
          "audit": {
            "database": {
              "advisory-count": 787,
              "last-commit": "7573f55ba337263f61167dbb0ea926cdc7c8eb5d",
              "last-updated": "2025-06-17T11:04:25+02:00"
            },
            "lockfile": {
              "dependency-count": 122
            },
            "settings": {
              "target_arch": [],
              "target_os": [],
              "severity": null,
              "ignore": [],
              "informational_warnings": [
                "unmaintained",
                "unsound",
                "notice"
              ]
            },
            "vulnerabilities": {
              "found": false,
              "count": 0,
              "list": []
            },
            "warnings": {}
          },
          "note": "Crate analysis performed with stable toolchain."
        },
        "crate_metadata": {
          "name": "ed25519-dalek",
          "version": "2.1.1",
          "description": "ALLOW: Positive community sentiment",
          "repository": "",
          "keywords": [],
          "categories": [],
          "readme": {
            "raw_markdown": "[](https://docs.rs/ed25519-dalek/latest/ed25519_dalek/all.html \"show sidebar\")\n# Crate ed25519_dalekCopy item path\n[Settings](https://docs.rs/ed25519-dalek/latest/settings.html)\n[Help](https://docs.rs/ed25519-dalek/latest/help.html)\nSummary[Source](https://docs.rs/ed25519-dalek/latest/src/ed25519_dalek/lib.rs.html#10-293)\nExpand description\nA Rust implementation of ed25519 key generation, signing, and verification.\n## [\u00a7](https://docs.rs/ed25519-dalek/latest/ed25519_dalek/#example)Example\nCreating an ed25519 signature on a message is simple.\nFirst, we need to generate a `SigningKey`, which includes both public and secret halves of an asymmetric key. To do so, we need a cryptographically secure pseudorandom number generator (CSPRNG). For this example, we\u2019ll use the operating system\u2019s builtin PRNG:\n```\nuse rand::rngs::OsRng;\nuse ed25519_dalek::SigningKey;\nuse ed25519_dalek::Signature;\nlet mut csprng = OsRng;\nlet signing_key: SigningKey = SigningKey::generate(&mut csprng);\n```\n\nWe can now use this `signing_key` to sign a message:\n```\nuse ed25519_dalek::{Signature, Signer};\nlet message: &[u8] = b\"This is a test of the tsunami alert system.\";\nlet signature: Signature = signing_key.sign(message);\n```\n\nAs well as to verify that this is, indeed, a valid signature on that `message`:\n```\nuse ed25519_dalek::Verifier;\nassert!(signing_key.verify(message, &signature).is_ok());\n```\n\nAnyone else, given the `public` half of the `signing_key` can also easily verify this signature:\n```\nuse ed25519_dalek::{VerifyingKey, Verifier};\nlet verifying_key: VerifyingKey = signing_key.verifying_key();\nassert!(verifying_key.verify(message, &signature).is_ok());\n```\n\n### [\u00a7](https://docs.rs/ed25519-dalek/latest/ed25519_dalek/#serialisation)Serialisation\n`VerifyingKey`s, `SecretKey`s, `SigningKey`s, and `Signature`s can be serialised into byte-arrays by calling `.to_bytes()`. It\u2019s perfectly acceptable and safe to transfer and/or store those bytes. (Of course, never transfer your secret key to anyone else, since they will only need the public key to verify your signatures!)\n```\nuse ed25519_dalek::{PUBLIC_KEY_LENGTH, SECRET_KEY_LENGTH, KEYPAIR_LENGTH, SIGNATURE_LENGTH};\nlet verifying_key_bytes: [u8; PUBLIC_KEY_LENGTH] = signing_key.verifying_key().to_bytes();\nlet secret_key_bytes: [u8; SECRET_KEY_LENGTH] = signing_key.to_bytes();\nlet signing_key_bytes:  [u8; KEYPAIR_LENGTH]  = signing_key.to_keypair_bytes();\nlet signature_bytes: [u8; SIGNATURE_LENGTH] = signature.to_bytes();\n```\n\nAnd similarly, decoded from bytes with `::from_bytes()`:\n```\nlet verifying_key: VerifyingKey = VerifyingKey::from_bytes(&verifying_key_bytes)?;\nlet signing_key: SigningKey = SigningKey::from_bytes(&signing_key_bytes);\nlet signature: Signature = Signature::try_from(&signature_bytes[..])?;\n```\n\n#### [\u00a7](https://docs.rs/ed25519-dalek/latest/ed25519_dalek/#pkcs8-key-encoding)PKCS#8 Key Encoding\nPKCS#8 is a private key format with support for multiple algorithms. It can be encoded as binary (DER) or text (PEM).\nYou can recognize PEM-encoded PKCS#8 keys by the following:\n```\n-----BEGIN PRIVATE KEY-----\n```\n\nTo use PKCS#8, you need to enable the `pkcs8` crate feature.\nThe following traits can be used to decode/encode [`SigningKey`](https://docs.rs/ed25519-dalek/latest/ed25519_dalek/struct.SigningKey.html \"struct ed25519_dalek::SigningKey\") and [`VerifyingKey`](https://docs.rs/ed25519-dalek/latest/ed25519_dalek/struct.VerifyingKey.html \"struct ed25519_dalek::VerifyingKey\") as PKCS#8. Note that [`pkcs8`](https://docs.rs/ed25519-dalek/latest/ed25519_dalek/pkcs8/index.html \"mod ed25519_dalek::pkcs8\") is re-exported from the toplevel of the crate:\n  * [`pkcs8::DecodePrivateKey`](https://docs.rs/ed25519-dalek/latest/ed25519_dalek/pkcs8/trait.DecodePrivateKey.html \"trait ed25519_dalek::pkcs8::DecodePrivateKey\"): decode private keys from PKCS#8\n  * [`pkcs8::EncodePrivateKey`](https://docs.rs/ed25519-dalek/latest/ed25519_dalek/pkcs8/trait.EncodePrivateKey.html \"trait ed25519_dalek::pkcs8::EncodePrivateKey\"): encode private keys to PKCS#8\n  * [`pkcs8::DecodePublicKey`](https://docs.rs/ed25519-dalek/latest/ed25519_dalek/pkcs8/trait.DecodePublicKey.html \"trait ed25519_dalek::pkcs8::DecodePublicKey\"): decode public keys from PKCS#8\n  * [`pkcs8::EncodePublicKey`](https://docs.rs/ed25519-dalek/latest/ed25519_dalek/pkcs8/trait.EncodePublicKey.html \"trait ed25519_dalek::pkcs8::EncodePublicKey\"): encode public keys to PKCS#8\n\n\n##### [\u00a7](https://docs.rs/ed25519-dalek/latest/ed25519_dalek/#example-1)Example\nNOTE: this requires the `pem` crate feature.\n```\nuse ed25519_dalek::{VerifyingKey, pkcs8::DecodePublicKey};\nlet pem = \"-----BEGIN PUBLIC KEY-----\nMCowBQYDK2VwAyEAGb9ECWmEzf6FQbrBZ9w7lshQhqowtrbLDFw4rXAxZuE=\n-----END PUBLIC KEY-----\";\nlet verifying_key = VerifyingKey::from_public_key_pem(pem)\n  .expect(\"invalid public key PEM\");\n```\n\n#### [\u00a7](https://docs.rs/ed25519-dalek/latest/ed25519_dalek/#using-serde)Using Serde\nIf you prefer the bytes to be wrapped in another serialisation format, all types additionally come with built-in [serde](https://serde.rs) support by building `ed25519-dalek` via:\n```\n$ cargo build --features=\"serde\"\n```\n\nThey can be then serialised into any of the wire formats which serde supports. For example, using [bincode](https://github.com/TyOverby/bincode):\n```\nuse bincode::serialize;\nlet encoded_verifying_key: Vec<u8> = serialize(&verifying_key).unwrap();\nlet encoded_signature: Vec<u8> = serialize(&signature).unwrap();\n```\n\nAfter sending the `encoded_verifying_key` and `encoded_signature`, the recipient may deserialise them and verify:\n```\nuse bincode::deserialize;\nlet message: &[u8] = b\"This is a test of the tsunami alert system.\";\nlet decoded_verifying_key: VerifyingKey = deserialize(&encoded_verifying_key).unwrap();\nlet decoded_signature: Signature = deserialize(&encoded_signature).unwrap();\nlet verified: bool = decoded_verifying_key.verify(&message, &decoded_signature).is_ok();\nassert!(verified);\n```\n\n## Re-exports[\u00a7](https://docs.rs/ed25519-dalek/latest/ed25519_dalek/#reexports)\n\n`pub use ed25519[](https://docs.rs/ed25519/2.2.3/x86_64-unknown-linux-gnu/ed25519/index.html \"mod ed25519\");`\n\n## Modules[\u00a7](https://docs.rs/ed25519-dalek/latest/ed25519_dalek/#modules)\n\n[hazmat](https://docs.rs/ed25519-dalek/latest/ed25519_dalek/hazmat/index.html \"mod ed25519_dalek::hazmat\")`hazmat`\n    Low-level interfaces to ed25519 functions\n\n[pkcs8](https://docs.rs/ed25519-dalek/latest/ed25519_dalek/pkcs8/index.html \"mod ed25519_dalek::pkcs8\")`pkcs8`\n    PKCS#8 private key support.\n## Structs[\u00a7](https://docs.rs/ed25519-dalek/latest/ed25519_dalek/#structs)\n\n[Context](https://docs.rs/ed25519-dalek/latest/ed25519_dalek/struct.Context.html \"struct ed25519_dalek::Context\")`digest`\n    Ed25519 contexts as used by Ed25519ph.\n\n[Signature](https://docs.rs/ed25519-dalek/latest/ed25519_dalek/struct.Signature.html \"struct ed25519_dalek::Signature\")\n    Ed25519 signature.\n\n[SigningKey](https://docs.rs/ed25519-dalek/latest/ed25519_dalek/struct.SigningKey.html \"struct ed25519_dalek::SigningKey\")\n    ed25519 signing key which can be used to produce signatures.\n\n[VerifyingKey](https://docs.rs/ed25519-dalek/latest/ed25519_dalek/struct.VerifyingKey.html \"struct ed25519_dalek::VerifyingKey\")\n    An ed25519 public key.\n## Constants[\u00a7](https://docs.rs/ed25519-dalek/latest/ed25519_dalek/#constants)\n\n[EXPANDED_SECRET_KEY_LENGTH](https://docs.rs/ed25519-dalek/latest/ed25519_dalek/constant.EXPANDED_SECRET_KEY_LENGTH.html \"constant ed25519_dalek::EXPANDED_SECRET_KEY_LENGTH\")\n    The length of an \u201cexpanded\u201d ed25519 key, `ExpandedSecretKey`, in bytes.\n\n[KEYPAIR_LENGTH](https://docs.rs/ed25519-dalek/latest/ed25519_dalek/constant.KEYPAIR_LENGTH.html \"constant ed25519_dalek::KEYPAIR_LENGTH\")\n    The length of an ed25519 `Keypair`, in bytes.\n\n[PUBLIC_KEY_LENGTH](https://docs.rs/ed25519-dalek/latest/ed25519_dalek/constant.PUBLIC_KEY_LENGTH.html \"constant ed25519_dalek::PUBLIC_KEY_LENGTH\")\n    The length of an ed25519 `PublicKey`, in bytes.\n\n[SECRET_KEY_LENGTH](https://docs.rs/ed25519-dalek/latest/ed25519_dalek/constant.SECRET_KEY_LENGTH.html \"constant ed25519_dalek::SECRET_KEY_LENGTH\")\n    The length of a ed25519 `SecretKey`, in bytes.\n\n[SIGNATURE_LENGTH](https://docs.rs/ed25519-dalek/latest/ed25519_dalek/constant.SIGNATURE_LENGTH.html \"constant ed25519_dalek::SIGNATURE_LENGTH\")\n    The length of a ed25519 `Signature`, in bytes.\n## Traits[\u00a7](https://docs.rs/ed25519-dalek/latest/ed25519_dalek/#traits)\n\n[Digest](https://docs.rs/ed25519-dalek/latest/ed25519_dalek/trait.Digest.html \"trait ed25519_dalek::Digest\")\n    Convenience wrapper trait covering functionality of cryptographic hash functions with fixed output size.\n\n[DigestSigner](https://docs.rs/ed25519-dalek/latest/ed25519_dalek/trait.DigestSigner.html \"trait ed25519_dalek::DigestSigner\")`digest`\n    Sign the given prehashed message [`Digest`](https://docs.rs/ed25519-dalek/latest/ed25519_dalek/trait.Digest.html \"trait ed25519_dalek::Digest\") using `Self`.\n\n[DigestVerifier](https://docs.rs/ed25519-dalek/latest/ed25519_dalek/trait.DigestVerifier.html \"trait ed25519_dalek::DigestVerifier\")`digest`\n    Verify the provided signature for the given prehashed message [`Digest`](https://docs.rs/ed25519-dalek/latest/ed25519_dalek/trait.Digest.html \"trait ed25519_dalek::Digest\") is authentic.\n\n[Signer](https://docs.rs/ed25519-dalek/latest/ed25519_dalek/trait.Signer.html \"trait ed25519_dalek::Signer\")\n    Sign the provided message bytestring using `Self` (e.g. a cryptographic key or connection to an HSM), returning a digital signature.\n\n[Verifier](https://docs.rs/ed25519-dalek/latest/ed25519_dalek/trait.Verifier.html \"trait ed25519_dalek::Verifier\")\n    Verify the provided message bytestring using `Self` (e.g. a public key)\n## Functions[\u00a7](https://docs.rs/ed25519-dalek/latest/ed25519_dalek/#functions)\n\n[verify_batch](https://docs.rs/ed25519-dalek/latest/ed25519_dalek/fn.verify_batch.html \"fn ed25519_dalek::verify_batch\")`batch`\n    Verify a batch of `signatures` on `messages` with their respective `verifying_keys`.\n## Type Aliases[\u00a7](https://docs.rs/ed25519-dalek/latest/ed25519_dalek/#types)\n\n[SecretKey](https://docs.rs/ed25519-dalek/latest/ed25519_dalek/type.SecretKey.html \"type ed25519_dalek::SecretKey\")\n    ed25519 secret key as defined in [RFC8032 \u00a7 5.1.5](https://www.rfc-editor.org/rfc/rfc8032#section-5.1.5):\n\n[Sha512](https://docs.rs/ed25519-dalek/latest/ed25519_dalek/type.Sha512.html \"type ed25519_dalek::Sha512\")`digest`\n    SHA-512 hasher.\n\n[SignatureError](https://docs.rs/ed25519-dalek/latest/ed25519_dalek/type.SignatureError.html \"type ed25519_dalek::SignatureError\")\n    Errors which may occur while processing signatures and keypairs.\n",
            "markdown_with_citations": "[](https://docs.rs/ed25519-dalek/latest/ed25519_dalek/all.html \"show sidebar\")\n# Crate ed25519_dalekCopy item path\nSettings\u27e81\u27e9\nHelp\u27e82\u27e9\nSummarySource\u27e83\u27e9\nExpand description\nA Rust implementation of ed25519 key generation, signing, and verification.\n## \u00a7\u27e84\u27e9Example\nCreating an ed25519 signature on a message is simple.\nFirst, we need to generate a `SigningKey`, which includes both public and secret halves of an asymmetric key. To do so, we need a cryptographically secure pseudorandom number generator (CSPRNG). For this example, we\u2019ll use the operating system\u2019s builtin PRNG:\n```\nuse rand::rngs::OsRng;\nuse ed25519_dalek::SigningKey;\nuse ed25519_dalek::Signature;\nlet mut csprng = OsRng;\nlet signing_key: SigningKey = SigningKey::generate(&mut csprng);\n```\n\nWe can now use this `signing_key` to sign a message:\n```\nuse ed25519_dalek::{Signature, Signer};\nlet message: &[u8] = b\"This is a test of the tsunami alert system.\";\nlet signature: Signature = signing_key.sign(message);\n```\n\nAs well as to verify that this is, indeed, a valid signature on that `message`:\n```\nuse ed25519_dalek::Verifier;\nassert!(signing_key.verify(message, &signature).is_ok());\n```\n\nAnyone else, given the `public` half of the `signing_key` can also easily verify this signature:\n```\nuse ed25519_dalek::{VerifyingKey, Verifier};\nlet verifying_key: VerifyingKey = signing_key.verifying_key();\nassert!(verifying_key.verify(message, &signature).is_ok());\n```\n\n### \u00a7\u27e85\u27e9Serialisation\n`VerifyingKey`s, `SecretKey`s, `SigningKey`s, and `Signature`s can be serialised into byte-arrays by calling `.to_bytes()`. It\u2019s perfectly acceptable and safe to transfer and/or store those bytes. (Of course, never transfer your secret key to anyone else, since they will only need the public key to verify your signatures!)\n```\nuse ed25519_dalek::{PUBLIC_KEY_LENGTH, SECRET_KEY_LENGTH, KEYPAIR_LENGTH, SIGNATURE_LENGTH};\nlet verifying_key_bytes: [u8; PUBLIC_KEY_LENGTH] = signing_key.verifying_key().to_bytes();\nlet secret_key_bytes: [u8; SECRET_KEY_LENGTH] = signing_key.to_bytes();\nlet signing_key_bytes:  [u8; KEYPAIR_LENGTH]  = signing_key.to_keypair_bytes();\nlet signature_bytes: [u8; SIGNATURE_LENGTH] = signature.to_bytes();\n```\n\nAnd similarly, decoded from bytes with `::from_bytes()`:\n```\nlet verifying_key: VerifyingKey = VerifyingKey::from_bytes(&verifying_key_bytes)?;\nlet signing_key: SigningKey = SigningKey::from_bytes(&signing_key_bytes);\nlet signature: Signature = Signature::try_from(&signature_bytes[..])?;\n```\n\n#### \u00a7\u27e86\u27e9PKCS#8 Key Encoding\nPKCS#8 is a private key format with support for multiple algorithms. It can be encoded as binary (DER) or text (PEM).\nYou can recognize PEM-encoded PKCS#8 keys by the following:\n```\n-----BEGIN PRIVATE KEY-----\n```\n\nTo use PKCS#8, you need to enable the `pkcs8` crate feature.\nThe following traits can be used to decode/encode `SigningKey`\u27e87\u27e9 and `VerifyingKey`\u27e88\u27e9 as PKCS#8. Note that `pkcs8`\u27e89\u27e9 is re-exported from the toplevel of the crate:\n  * `pkcs8::DecodePrivateKey`\u27e810\u27e9: decode private keys from PKCS#8\n  * `pkcs8::EncodePrivateKey`\u27e811\u27e9: encode private keys to PKCS#8\n  * `pkcs8::DecodePublicKey`\u27e812\u27e9: decode public keys from PKCS#8\n  * `pkcs8::EncodePublicKey`\u27e813\u27e9: encode public keys to PKCS#8\n\n\n##### \u00a7\u27e814\u27e9Example\nNOTE: this requires the `pem` crate feature.\n```\nuse ed25519_dalek::{VerifyingKey, pkcs8::DecodePublicKey};\nlet pem = \"-----BEGIN PUBLIC KEY-----\nMCowBQYDK2VwAyEAGb9ECWmEzf6FQbrBZ9w7lshQhqowtrbLDFw4rXAxZuE=\n-----END PUBLIC KEY-----\";\nlet verifying_key = VerifyingKey::from_public_key_pem(pem)\n  .expect(\"invalid public key PEM\");\n```\n\n#### \u00a7\u27e815\u27e9Using Serde\nIf you prefer the bytes to be wrapped in another serialisation format, all types additionally come with built-in serde\u27e816\u27e9 support by building `ed25519-dalek` via:\n```\n$ cargo build --features=\"serde\"\n```\n\nThey can be then serialised into any of the wire formats which serde supports. For example, using bincode\u27e817\u27e9:\n```\nuse bincode::serialize;\nlet encoded_verifying_key: Vec<u8> = serialize(&verifying_key).unwrap();\nlet encoded_signature: Vec<u8> = serialize(&signature).unwrap();\n```\n\nAfter sending the `encoded_verifying_key` and `encoded_signature`, the recipient may deserialise them and verify:\n```\nuse bincode::deserialize;\nlet message: &[u8] = b\"This is a test of the tsunami alert system.\";\nlet decoded_verifying_key: VerifyingKey = deserialize(&encoded_verifying_key).unwrap();\nlet decoded_signature: Signature = deserialize(&encoded_signature).unwrap();\nlet verified: bool = decoded_verifying_key.verify(&message, &decoded_signature).is_ok();\nassert!(verified);\n```\n\n## Re-exports\u00a7\u27e818\u27e9\n\n`pub use ed25519[](https://docs.rs/ed25519/2.2.3/x86_64-unknown-linux-gnu/ed25519/index.html \"mod ed25519\");`\n\n## Modules\u00a7\u27e819\u27e9\n\nhazmat\u27e820\u27e9`hazmat`\n    Low-level interfaces to ed25519 functions\n\npkcs8\u27e89\u27e9`pkcs8`\n    PKCS#8 private key support.\n## Structs\u00a7\u27e821\u27e9\n\nContext\u27e822\u27e9`digest`\n    Ed25519 contexts as used by Ed25519ph.\n\nSignature\u27e823\u27e9\n    Ed25519 signature.\n\nSigningKey\u27e87\u27e9\n    ed25519 signing key which can be used to produce signatures.\n\nVerifyingKey\u27e88\u27e9\n    An ed25519 public key.\n## Constants\u00a7\u27e824\u27e9\n\nEXPANDED_SECRET_KEY_LENGTH\u27e825\u27e9\n    The length of an \u201cexpanded\u201d ed25519 key, `ExpandedSecretKey`, in bytes.\n\nKEYPAIR_LENGTH\u27e826\u27e9\n    The length of an ed25519 `Keypair`, in bytes.\n\nPUBLIC_KEY_LENGTH\u27e827\u27e9\n    The length of an ed25519 `PublicKey`, in bytes.\n\nSECRET_KEY_LENGTH\u27e828\u27e9\n    The length of a ed25519 `SecretKey`, in bytes.\n\nSIGNATURE_LENGTH\u27e829\u27e9\n    The length of a ed25519 `Signature`, in bytes.\n## Traits\u00a7\u27e830\u27e9\n\nDigest\u27e831\u27e9\n    Convenience wrapper trait covering functionality of cryptographic hash functions with fixed output size.\n\nDigestSigner\u27e832\u27e9`digest`\n    Sign the given prehashed message `Digest`\u27e831\u27e9 using `Self`.\n\nDigestVerifier\u27e833\u27e9`digest`\n    Verify the provided signature for the given prehashed message `Digest`\u27e831\u27e9 is authentic.\n\nSigner\u27e834\u27e9\n    Sign the provided message bytestring using `Self` (e.g. a cryptographic key or connection to an HSM), returning a digital signature.\n\nVerifier\u27e835\u27e9\n    Verify the provided message bytestring using `Self` (e.g. a public key)\n## Functions\u00a7\u27e836\u27e9\n\nverify_batch\u27e837\u27e9`batch`\n    Verify a batch of `signatures` on `messages` with their respective `verifying_keys`.\n## Type Aliases\u00a7\u27e838\u27e9\n\nSecretKey\u27e839\u27e9\n    ed25519 secret key as defined in RFC8032 \u00a7 5.1.5\u27e840\u27e9:\n\nSha512\u27e841\u27e9`digest`\n    SHA-512 hasher.\n\nSignatureError\u27e842\u27e9\n    Errors which may occur while processing signatures and keypairs.\n",
            "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://docs.rs/ed25519-dalek/latest/settings.html: Settings\n\u27e82\u27e9 https://docs.rs/ed25519-dalek/latest/help.html: Help\n\u27e83\u27e9 https://docs.rs/ed25519-dalek/latest/src/ed25519_dalek/lib.rs.html#10-293: Source\n\u27e84\u27e9 https://docs.rs/ed25519-dalek/latest/ed25519_dalek/#example: \u00a7\n\u27e85\u27e9 https://docs.rs/ed25519-dalek/latest/ed25519_dalek/#serialisation: \u00a7\n\u27e86\u27e9 https://docs.rs/ed25519-dalek/latest/ed25519_dalek/#pkcs8-key-encoding: \u00a7\n\u27e87\u27e9 https://docs.rs/ed25519-dalek/latest/ed25519_dalek/struct.SigningKey.html: struct ed25519_dalek::SigningKey - `SigningKey`\n\u27e88\u27e9 https://docs.rs/ed25519-dalek/latest/ed25519_dalek/struct.VerifyingKey.html: struct ed25519_dalek::VerifyingKey - `VerifyingKey`\n\u27e89\u27e9 https://docs.rs/ed25519-dalek/latest/ed25519_dalek/pkcs8/index.html: mod ed25519_dalek::pkcs8 - `pkcs8`\n\u27e810\u27e9 https://docs.rs/ed25519-dalek/latest/ed25519_dalek/pkcs8/trait.DecodePrivateKey.html: trait ed25519_dalek::pkcs8::DecodePrivateKey - `pkcs8::DecodePrivateKey`\n\u27e811\u27e9 https://docs.rs/ed25519-dalek/latest/ed25519_dalek/pkcs8/trait.EncodePrivateKey.html: trait ed25519_dalek::pkcs8::EncodePrivateKey - `pkcs8::EncodePrivateKey`\n\u27e812\u27e9 https://docs.rs/ed25519-dalek/latest/ed25519_dalek/pkcs8/trait.DecodePublicKey.html: trait ed25519_dalek::pkcs8::DecodePublicKey - `pkcs8::DecodePublicKey`\n\u27e813\u27e9 https://docs.rs/ed25519-dalek/latest/ed25519_dalek/pkcs8/trait.EncodePublicKey.html: trait ed25519_dalek::pkcs8::EncodePublicKey - `pkcs8::EncodePublicKey`\n\u27e814\u27e9 https://docs.rs/ed25519-dalek/latest/ed25519_dalek/#example-1: \u00a7\n\u27e815\u27e9 https://docs.rs/ed25519-dalek/latest/ed25519_dalek/#using-serde: \u00a7\n\u27e816\u27e9 https://serde.rs: serde\n\u27e817\u27e9 https://github.com/TyOverby/bincode: bincode\n\u27e818\u27e9 https://docs.rs/ed25519-dalek/latest/ed25519_dalek/#reexports: \u00a7\n\u27e819\u27e9 https://docs.rs/ed25519-dalek/latest/ed25519_dalek/#modules: \u00a7\n\u27e820\u27e9 https://docs.rs/ed25519-dalek/latest/ed25519_dalek/hazmat/index.html: mod ed25519_dalek::hazmat - hazmat\n\u27e821\u27e9 https://docs.rs/ed25519-dalek/latest/ed25519_dalek/#structs: \u00a7\n\u27e822\u27e9 https://docs.rs/ed25519-dalek/latest/ed25519_dalek/struct.Context.html: struct ed25519_dalek::Context - Context\n\u27e823\u27e9 https://docs.rs/ed25519-dalek/latest/ed25519_dalek/struct.Signature.html: struct ed25519_dalek::Signature - Signature\n\u27e824\u27e9 https://docs.rs/ed25519-dalek/latest/ed25519_dalek/#constants: \u00a7\n\u27e825\u27e9 https://docs.rs/ed25519-dalek/latest/ed25519_dalek/constant.EXPANDED_SECRET_KEY_LENGTH.html: constant ed25519_dalek::EXPANDED_SECRET_KEY_LENGTH - EXPANDED_SECRET_KEY_LENGTH\n\u27e826\u27e9 https://docs.rs/ed25519-dalek/latest/ed25519_dalek/constant.KEYPAIR_LENGTH.html: constant ed25519_dalek::KEYPAIR_LENGTH - KEYPAIR_LENGTH\n\u27e827\u27e9 https://docs.rs/ed25519-dalek/latest/ed25519_dalek/constant.PUBLIC_KEY_LENGTH.html: constant ed25519_dalek::PUBLIC_KEY_LENGTH - PUBLIC_KEY_LENGTH\n\u27e828\u27e9 https://docs.rs/ed25519-dalek/latest/ed25519_dalek/constant.SECRET_KEY_LENGTH.html: constant ed25519_dalek::SECRET_KEY_LENGTH - SECRET_KEY_LENGTH\n\u27e829\u27e9 https://docs.rs/ed25519-dalek/latest/ed25519_dalek/constant.SIGNATURE_LENGTH.html: constant ed25519_dalek::SIGNATURE_LENGTH - SIGNATURE_LENGTH\n\u27e830\u27e9 https://docs.rs/ed25519-dalek/latest/ed25519_dalek/#traits: \u00a7\n\u27e831\u27e9 https://docs.rs/ed25519-dalek/latest/ed25519_dalek/trait.Digest.html: trait ed25519_dalek::Digest - Digest\n\u27e832\u27e9 https://docs.rs/ed25519-dalek/latest/ed25519_dalek/trait.DigestSigner.html: trait ed25519_dalek::DigestSigner - DigestSigner\n\u27e833\u27e9 https://docs.rs/ed25519-dalek/latest/ed25519_dalek/trait.DigestVerifier.html: trait ed25519_dalek::DigestVerifier - DigestVerifier\n\u27e834\u27e9 https://docs.rs/ed25519-dalek/latest/ed25519_dalek/trait.Signer.html: trait ed25519_dalek::Signer - Signer\n\u27e835\u27e9 https://docs.rs/ed25519-dalek/latest/ed25519_dalek/trait.Verifier.html: trait ed25519_dalek::Verifier - Verifier\n\u27e836\u27e9 https://docs.rs/ed25519-dalek/latest/ed25519_dalek/#functions: \u00a7\n\u27e837\u27e9 https://docs.rs/ed25519-dalek/latest/ed25519_dalek/fn.verify_batch.html: fn ed25519_dalek::verify_batch - verify_batch\n\u27e838\u27e9 https://docs.rs/ed25519-dalek/latest/ed25519_dalek/#types: \u00a7\n\u27e839\u27e9 https://docs.rs/ed25519-dalek/latest/ed25519_dalek/type.SecretKey.html: type ed25519_dalek::SecretKey - SecretKey\n\u27e840\u27e9 https://www.rfc-editor.org/rfc/rfc8032#section-5.1.5: RFC8032 \u00a7 5.1.5\n\u27e841\u27e9 https://docs.rs/ed25519-dalek/latest/ed25519_dalek/type.Sha512.html: type ed25519_dalek::Sha512 - Sha512\n\u27e842\u27e9 https://docs.rs/ed25519-dalek/latest/ed25519_dalek/type.SignatureError.html: type ed25519_dalek::SignatureError - SignatureError\n",
            "fit_markdown": "",
            "fit_html": ""
          },
          "downloads": 0,
          "github_stars": 0,
          "dependencies": [],
          "features": {},
          "code_snippets": [],
          "readme_sections": {},
          "librs_downloads": null,
          "source": "crates.io",
          "enhanced_scraping": {},
          "enhanced_features": [],
          "enhanced_dependencies": []
        },
        "enriched_crate": {
          "name": "ed25519-dalek",
          "version": "2.1.1",
          "description": "ALLOW: Positive community sentiment",
          "repository": "",
          "keywords": [],
          "categories": [],
          "readme": {
            "raw_markdown": "[](https://docs.rs/ed25519-dalek/latest/ed25519_dalek/all.html \"show sidebar\")\n# Crate ed25519_dalekCopy item path\n[Settings](https://docs.rs/ed25519-dalek/latest/settings.html)\n[Help](https://docs.rs/ed25519-dalek/latest/help.html)\nSummary[Source](https://docs.rs/ed25519-dalek/latest/src/ed25519_dalek/lib.rs.html#10-293)\nExpand description\nA Rust implementation of ed25519 key generation, signing, and verification.\n## [\u00a7](https://docs.rs/ed25519-dalek/latest/ed25519_dalek/#example)Example\nCreating an ed25519 signature on a message is simple.\nFirst, we need to generate a `SigningKey`, which includes both public and secret halves of an asymmetric key. To do so, we need a cryptographically secure pseudorandom number generator (CSPRNG). For this example, we\u2019ll use the operating system\u2019s builtin PRNG:\n```\nuse rand::rngs::OsRng;\nuse ed25519_dalek::SigningKey;\nuse ed25519_dalek::Signature;\nlet mut csprng = OsRng;\nlet signing_key: SigningKey = SigningKey::generate(&mut csprng);\n```\n\nWe can now use this `signing_key` to sign a message:\n```\nuse ed25519_dalek::{Signature, Signer};\nlet message: &[u8] = b\"This is a test of the tsunami alert system.\";\nlet signature: Signature = signing_key.sign(message);\n```\n\nAs well as to verify that this is, indeed, a valid signature on that `message`:\n```\nuse ed25519_dalek::Verifier;\nassert!(signing_key.verify(message, &signature).is_ok());\n```\n\nAnyone else, given the `public` half of the `signing_key` can also easily verify this signature:\n```\nuse ed25519_dalek::{VerifyingKey, Verifier};\nlet verifying_key: VerifyingKey = signing_key.verifying_key();\nassert!(verifying_key.verify(message, &signature).is_ok());\n```\n\n### [\u00a7](https://docs.rs/ed25519-dalek/latest/ed25519_dalek/#serialisation)Serialisation\n`VerifyingKey`s, `SecretKey`s, `SigningKey`s, and `Signature`s can be serialised into byte-arrays by calling `.to_bytes()`. It\u2019s perfectly acceptable and safe to transfer and/or store those bytes. (Of course, never transfer your secret key to anyone else, since they will only need the public key to verify your signatures!)\n```\nuse ed25519_dalek::{PUBLIC_KEY_LENGTH, SECRET_KEY_LENGTH, KEYPAIR_LENGTH, SIGNATURE_LENGTH};\nlet verifying_key_bytes: [u8; PUBLIC_KEY_LENGTH] = signing_key.verifying_key().to_bytes();\nlet secret_key_bytes: [u8; SECRET_KEY_LENGTH] = signing_key.to_bytes();\nlet signing_key_bytes:  [u8; KEYPAIR_LENGTH]  = signing_key.to_keypair_bytes();\nlet signature_bytes: [u8; SIGNATURE_LENGTH] = signature.to_bytes();\n```\n\nAnd similarly, decoded from bytes with `::from_bytes()`:\n```\nlet verifying_key: VerifyingKey = VerifyingKey::from_bytes(&verifying_key_bytes)?;\nlet signing_key: SigningKey = SigningKey::from_bytes(&signing_key_bytes);\nlet signature: Signature = Signature::try_from(&signature_bytes[..])?;\n```\n\n#### [\u00a7](https://docs.rs/ed25519-dalek/latest/ed25519_dalek/#pkcs8-key-encoding)PKCS#8 Key Encoding\nPKCS#8 is a private key format with support for multiple algorithms. It can be encoded as binary (DER) or text (PEM).\nYou can recognize PEM-encoded PKCS#8 keys by the following:\n```\n-----BEGIN PRIVATE KEY-----\n```\n\nTo use PKCS#8, you need to enable the `pkcs8` crate feature.\nThe following traits can be used to decode/encode [`SigningKey`](https://docs.rs/ed25519-dalek/latest/ed25519_dalek/struct.SigningKey.html \"struct ed25519_dalek::SigningKey\") and [`VerifyingKey`](https://docs.rs/ed25519-dalek/latest/ed25519_dalek/struct.VerifyingKey.html \"struct ed25519_dalek::VerifyingKey\") as PKCS#8. Note that [`pkcs8`](https://docs.rs/ed25519-dalek/latest/ed25519_dalek/pkcs8/index.html \"mod ed25519_dalek::pkcs8\") is re-exported from the toplevel of the crate:\n  * [`pkcs8::DecodePrivateKey`](https://docs.rs/ed25519-dalek/latest/ed25519_dalek/pkcs8/trait.DecodePrivateKey.html \"trait ed25519_dalek::pkcs8::DecodePrivateKey\"): decode private keys from PKCS#8\n  * [`pkcs8::EncodePrivateKey`](https://docs.rs/ed25519-dalek/latest/ed25519_dalek/pkcs8/trait.EncodePrivateKey.html \"trait ed25519_dalek::pkcs8::EncodePrivateKey\"): encode private keys to PKCS#8\n  * [`pkcs8::DecodePublicKey`](https://docs.rs/ed25519-dalek/latest/ed25519_dalek/pkcs8/trait.DecodePublicKey.html \"trait ed25519_dalek::pkcs8::DecodePublicKey\"): decode public keys from PKCS#8\n  * [`pkcs8::EncodePublicKey`](https://docs.rs/ed25519-dalek/latest/ed25519_dalek/pkcs8/trait.EncodePublicKey.html \"trait ed25519_dalek::pkcs8::EncodePublicKey\"): encode public keys to PKCS#8\n\n\n##### [\u00a7](https://docs.rs/ed25519-dalek/latest/ed25519_dalek/#example-1)Example\nNOTE: this requires the `pem` crate feature.\n```\nuse ed25519_dalek::{VerifyingKey, pkcs8::DecodePublicKey};\nlet pem = \"-----BEGIN PUBLIC KEY-----\nMCowBQYDK2VwAyEAGb9ECWmEzf6FQbrBZ9w7lshQhqowtrbLDFw4rXAxZuE=\n-----END PUBLIC KEY-----\";\nlet verifying_key = VerifyingKey::from_public_key_pem(pem)\n  .expect(\"invalid public key PEM\");\n```\n\n#### [\u00a7](https://docs.rs/ed25519-dalek/latest/ed25519_dalek/#using-serde)Using Serde\nIf you prefer the bytes to be wrapped in another serialisation format, all types additionally come with built-in [serde](https://serde.rs) support by building `ed25519-dalek` via:\n```\n$ cargo build --features=\"serde\"\n```\n\nThey can be then serialised into any of the wire formats which serde supports. For example, using [bincode](https://github.com/TyOverby/bincode):\n```\nuse bincode::serialize;\nlet encoded_verifying_key: Vec<u8> = serialize(&verifying_key).unwrap();\nlet encoded_signature: Vec<u8> = serialize(&signature).unwrap();\n```\n\nAfter sending the `encoded_verifying_key` and `encoded_signature`, the recipient may deserialise them and verify:\n```\nuse bincode::deserialize;\nlet message: &[u8] = b\"This is a test of the tsunami alert system.\";\nlet decoded_verifying_key: VerifyingKey = deserialize(&encoded_verifying_key).unwrap();\nlet decoded_signature: Signature = deserialize(&encoded_signature).unwrap();\nlet verified: bool = decoded_verifying_key.verify(&message, &decoded_signature).is_ok();\nassert!(verified);\n```\n\n## Re-exports[\u00a7](https://docs.rs/ed25519-dalek/latest/ed25519_dalek/#reexports)\n\n`pub use ed25519[](https://docs.rs/ed25519/2.2.3/x86_64-unknown-linux-gnu/ed25519/index.html \"mod ed25519\");`\n\n## Modules[\u00a7](https://docs.rs/ed25519-dalek/latest/ed25519_dalek/#modules)\n\n[hazmat](https://docs.rs/ed25519-dalek/latest/ed25519_dalek/hazmat/index.html \"mod ed25519_dalek::hazmat\")`hazmat`\n    Low-level interfaces to ed25519 functions\n\n[pkcs8](https://docs.rs/ed25519-dalek/latest/ed25519_dalek/pkcs8/index.html \"mod ed25519_dalek::pkcs8\")`pkcs8`\n    PKCS#8 private key support.\n## Structs[\u00a7](https://docs.rs/ed25519-dalek/latest/ed25519_dalek/#structs)\n\n[Context](https://docs.rs/ed25519-dalek/latest/ed25519_dalek/struct.Context.html \"struct ed25519_dalek::Context\")`digest`\n    Ed25519 contexts as used by Ed25519ph.\n\n[Signature](https://docs.rs/ed25519-dalek/latest/ed25519_dalek/struct.Signature.html \"struct ed25519_dalek::Signature\")\n    Ed25519 signature.\n\n[SigningKey](https://docs.rs/ed25519-dalek/latest/ed25519_dalek/struct.SigningKey.html \"struct ed25519_dalek::SigningKey\")\n    ed25519 signing key which can be used to produce signatures.\n\n[VerifyingKey](https://docs.rs/ed25519-dalek/latest/ed25519_dalek/struct.VerifyingKey.html \"struct ed25519_dalek::VerifyingKey\")\n    An ed25519 public key.\n## Constants[\u00a7](https://docs.rs/ed25519-dalek/latest/ed25519_dalek/#constants)\n\n[EXPANDED_SECRET_KEY_LENGTH](https://docs.rs/ed25519-dalek/latest/ed25519_dalek/constant.EXPANDED_SECRET_KEY_LENGTH.html \"constant ed25519_dalek::EXPANDED_SECRET_KEY_LENGTH\")\n    The length of an \u201cexpanded\u201d ed25519 key, `ExpandedSecretKey`, in bytes.\n\n[KEYPAIR_LENGTH](https://docs.rs/ed25519-dalek/latest/ed25519_dalek/constant.KEYPAIR_LENGTH.html \"constant ed25519_dalek::KEYPAIR_LENGTH\")\n    The length of an ed25519 `Keypair`, in bytes.\n\n[PUBLIC_KEY_LENGTH](https://docs.rs/ed25519-dalek/latest/ed25519_dalek/constant.PUBLIC_KEY_LENGTH.html \"constant ed25519_dalek::PUBLIC_KEY_LENGTH\")\n    The length of an ed25519 `PublicKey`, in bytes.\n\n[SECRET_KEY_LENGTH](https://docs.rs/ed25519-dalek/latest/ed25519_dalek/constant.SECRET_KEY_LENGTH.html \"constant ed25519_dalek::SECRET_KEY_LENGTH\")\n    The length of a ed25519 `SecretKey`, in bytes.\n\n[SIGNATURE_LENGTH](https://docs.rs/ed25519-dalek/latest/ed25519_dalek/constant.SIGNATURE_LENGTH.html \"constant ed25519_dalek::SIGNATURE_LENGTH\")\n    The length of a ed25519 `Signature`, in bytes.\n## Traits[\u00a7](https://docs.rs/ed25519-dalek/latest/ed25519_dalek/#traits)\n\n[Digest](https://docs.rs/ed25519-dalek/latest/ed25519_dalek/trait.Digest.html \"trait ed25519_dalek::Digest\")\n    Convenience wrapper trait covering functionality of cryptographic hash functions with fixed output size.\n\n[DigestSigner](https://docs.rs/ed25519-dalek/latest/ed25519_dalek/trait.DigestSigner.html \"trait ed25519_dalek::DigestSigner\")`digest`\n    Sign the given prehashed message [`Digest`](https://docs.rs/ed25519-dalek/latest/ed25519_dalek/trait.Digest.html \"trait ed25519_dalek::Digest\") using `Self`.\n\n[DigestVerifier](https://docs.rs/ed25519-dalek/latest/ed25519_dalek/trait.DigestVerifier.html \"trait ed25519_dalek::DigestVerifier\")`digest`\n    Verify the provided signature for the given prehashed message [`Digest`](https://docs.rs/ed25519-dalek/latest/ed25519_dalek/trait.Digest.html \"trait ed25519_dalek::Digest\") is authentic.\n\n[Signer](https://docs.rs/ed25519-dalek/latest/ed25519_dalek/trait.Signer.html \"trait ed25519_dalek::Signer\")\n    Sign the provided message bytestring using `Self` (e.g. a cryptographic key or connection to an HSM), returning a digital signature.\n\n[Verifier](https://docs.rs/ed25519-dalek/latest/ed25519_dalek/trait.Verifier.html \"trait ed25519_dalek::Verifier\")\n    Verify the provided message bytestring using `Self` (e.g. a public key)\n## Functions[\u00a7](https://docs.rs/ed25519-dalek/latest/ed25519_dalek/#functions)\n\n[verify_batch](https://docs.rs/ed25519-dalek/latest/ed25519_dalek/fn.verify_batch.html \"fn ed25519_dalek::verify_batch\")`batch`\n    Verify a batch of `signatures` on `messages` with their respective `verifying_keys`.\n## Type Aliases[\u00a7](https://docs.rs/ed25519-dalek/latest/ed25519_dalek/#types)\n\n[SecretKey](https://docs.rs/ed25519-dalek/latest/ed25519_dalek/type.SecretKey.html \"type ed25519_dalek::SecretKey\")\n    ed25519 secret key as defined in [RFC8032 \u00a7 5.1.5](https://www.rfc-editor.org/rfc/rfc8032#section-5.1.5):\n\n[Sha512](https://docs.rs/ed25519-dalek/latest/ed25519_dalek/type.Sha512.html \"type ed25519_dalek::Sha512\")`digest`\n    SHA-512 hasher.\n\n[SignatureError](https://docs.rs/ed25519-dalek/latest/ed25519_dalek/type.SignatureError.html \"type ed25519_dalek::SignatureError\")\n    Errors which may occur while processing signatures and keypairs.\n",
            "markdown_with_citations": "[](https://docs.rs/ed25519-dalek/latest/ed25519_dalek/all.html \"show sidebar\")\n# Crate ed25519_dalekCopy item path\nSettings\u27e81\u27e9\nHelp\u27e82\u27e9\nSummarySource\u27e83\u27e9\nExpand description\nA Rust implementation of ed25519 key generation, signing, and verification.\n## \u00a7\u27e84\u27e9Example\nCreating an ed25519 signature on a message is simple.\nFirst, we need to generate a `SigningKey`, which includes both public and secret halves of an asymmetric key. To do so, we need a cryptographically secure pseudorandom number generator (CSPRNG). For this example, we\u2019ll use the operating system\u2019s builtin PRNG:\n```\nuse rand::rngs::OsRng;\nuse ed25519_dalek::SigningKey;\nuse ed25519_dalek::Signature;\nlet mut csprng = OsRng;\nlet signing_key: SigningKey = SigningKey::generate(&mut csprng);\n```\n\nWe can now use this `signing_key` to sign a message:\n```\nuse ed25519_dalek::{Signature, Signer};\nlet message: &[u8] = b\"This is a test of the tsunami alert system.\";\nlet signature: Signature = signing_key.sign(message);\n```\n\nAs well as to verify that this is, indeed, a valid signature on that `message`:\n```\nuse ed25519_dalek::Verifier;\nassert!(signing_key.verify(message, &signature).is_ok());\n```\n\nAnyone else, given the `public` half of the `signing_key` can also easily verify this signature:\n```\nuse ed25519_dalek::{VerifyingKey, Verifier};\nlet verifying_key: VerifyingKey = signing_key.verifying_key();\nassert!(verifying_key.verify(message, &signature).is_ok());\n```\n\n### \u00a7\u27e85\u27e9Serialisation\n`VerifyingKey`s, `SecretKey`s, `SigningKey`s, and `Signature`s can be serialised into byte-arrays by calling `.to_bytes()`. It\u2019s perfectly acceptable and safe to transfer and/or store those bytes. (Of course, never transfer your secret key to anyone else, since they will only need the public key to verify your signatures!)\n```\nuse ed25519_dalek::{PUBLIC_KEY_LENGTH, SECRET_KEY_LENGTH, KEYPAIR_LENGTH, SIGNATURE_LENGTH};\nlet verifying_key_bytes: [u8; PUBLIC_KEY_LENGTH] = signing_key.verifying_key().to_bytes();\nlet secret_key_bytes: [u8; SECRET_KEY_LENGTH] = signing_key.to_bytes();\nlet signing_key_bytes:  [u8; KEYPAIR_LENGTH]  = signing_key.to_keypair_bytes();\nlet signature_bytes: [u8; SIGNATURE_LENGTH] = signature.to_bytes();\n```\n\nAnd similarly, decoded from bytes with `::from_bytes()`:\n```\nlet verifying_key: VerifyingKey = VerifyingKey::from_bytes(&verifying_key_bytes)?;\nlet signing_key: SigningKey = SigningKey::from_bytes(&signing_key_bytes);\nlet signature: Signature = Signature::try_from(&signature_bytes[..])?;\n```\n\n#### \u00a7\u27e86\u27e9PKCS#8 Key Encoding\nPKCS#8 is a private key format with support for multiple algorithms. It can be encoded as binary (DER) or text (PEM).\nYou can recognize PEM-encoded PKCS#8 keys by the following:\n```\n-----BEGIN PRIVATE KEY-----\n```\n\nTo use PKCS#8, you need to enable the `pkcs8` crate feature.\nThe following traits can be used to decode/encode `SigningKey`\u27e87\u27e9 and `VerifyingKey`\u27e88\u27e9 as PKCS#8. Note that `pkcs8`\u27e89\u27e9 is re-exported from the toplevel of the crate:\n  * `pkcs8::DecodePrivateKey`\u27e810\u27e9: decode private keys from PKCS#8\n  * `pkcs8::EncodePrivateKey`\u27e811\u27e9: encode private keys to PKCS#8\n  * `pkcs8::DecodePublicKey`\u27e812\u27e9: decode public keys from PKCS#8\n  * `pkcs8::EncodePublicKey`\u27e813\u27e9: encode public keys to PKCS#8\n\n\n##### \u00a7\u27e814\u27e9Example\nNOTE: this requires the `pem` crate feature.\n```\nuse ed25519_dalek::{VerifyingKey, pkcs8::DecodePublicKey};\nlet pem = \"-----BEGIN PUBLIC KEY-----\nMCowBQYDK2VwAyEAGb9ECWmEzf6FQbrBZ9w7lshQhqowtrbLDFw4rXAxZuE=\n-----END PUBLIC KEY-----\";\nlet verifying_key = VerifyingKey::from_public_key_pem(pem)\n  .expect(\"invalid public key PEM\");\n```\n\n#### \u00a7\u27e815\u27e9Using Serde\nIf you prefer the bytes to be wrapped in another serialisation format, all types additionally come with built-in serde\u27e816\u27e9 support by building `ed25519-dalek` via:\n```\n$ cargo build --features=\"serde\"\n```\n\nThey can be then serialised into any of the wire formats which serde supports. For example, using bincode\u27e817\u27e9:\n```\nuse bincode::serialize;\nlet encoded_verifying_key: Vec<u8> = serialize(&verifying_key).unwrap();\nlet encoded_signature: Vec<u8> = serialize(&signature).unwrap();\n```\n\nAfter sending the `encoded_verifying_key` and `encoded_signature`, the recipient may deserialise them and verify:\n```\nuse bincode::deserialize;\nlet message: &[u8] = b\"This is a test of the tsunami alert system.\";\nlet decoded_verifying_key: VerifyingKey = deserialize(&encoded_verifying_key).unwrap();\nlet decoded_signature: Signature = deserialize(&encoded_signature).unwrap();\nlet verified: bool = decoded_verifying_key.verify(&message, &decoded_signature).is_ok();\nassert!(verified);\n```\n\n## Re-exports\u00a7\u27e818\u27e9\n\n`pub use ed25519[](https://docs.rs/ed25519/2.2.3/x86_64-unknown-linux-gnu/ed25519/index.html \"mod ed25519\");`\n\n## Modules\u00a7\u27e819\u27e9\n\nhazmat\u27e820\u27e9`hazmat`\n    Low-level interfaces to ed25519 functions\n\npkcs8\u27e89\u27e9`pkcs8`\n    PKCS#8 private key support.\n## Structs\u00a7\u27e821\u27e9\n\nContext\u27e822\u27e9`digest`\n    Ed25519 contexts as used by Ed25519ph.\n\nSignature\u27e823\u27e9\n    Ed25519 signature.\n\nSigningKey\u27e87\u27e9\n    ed25519 signing key which can be used to produce signatures.\n\nVerifyingKey\u27e88\u27e9\n    An ed25519 public key.\n## Constants\u00a7\u27e824\u27e9\n\nEXPANDED_SECRET_KEY_LENGTH\u27e825\u27e9\n    The length of an \u201cexpanded\u201d ed25519 key, `ExpandedSecretKey`, in bytes.\n\nKEYPAIR_LENGTH\u27e826\u27e9\n    The length of an ed25519 `Keypair`, in bytes.\n\nPUBLIC_KEY_LENGTH\u27e827\u27e9\n    The length of an ed25519 `PublicKey`, in bytes.\n\nSECRET_KEY_LENGTH\u27e828\u27e9\n    The length of a ed25519 `SecretKey`, in bytes.\n\nSIGNATURE_LENGTH\u27e829\u27e9\n    The length of a ed25519 `Signature`, in bytes.\n## Traits\u00a7\u27e830\u27e9\n\nDigest\u27e831\u27e9\n    Convenience wrapper trait covering functionality of cryptographic hash functions with fixed output size.\n\nDigestSigner\u27e832\u27e9`digest`\n    Sign the given prehashed message `Digest`\u27e831\u27e9 using `Self`.\n\nDigestVerifier\u27e833\u27e9`digest`\n    Verify the provided signature for the given prehashed message `Digest`\u27e831\u27e9 is authentic.\n\nSigner\u27e834\u27e9\n    Sign the provided message bytestring using `Self` (e.g. a cryptographic key or connection to an HSM), returning a digital signature.\n\nVerifier\u27e835\u27e9\n    Verify the provided message bytestring using `Self` (e.g. a public key)\n## Functions\u00a7\u27e836\u27e9\n\nverify_batch\u27e837\u27e9`batch`\n    Verify a batch of `signatures` on `messages` with their respective `verifying_keys`.\n## Type Aliases\u00a7\u27e838\u27e9\n\nSecretKey\u27e839\u27e9\n    ed25519 secret key as defined in RFC8032 \u00a7 5.1.5\u27e840\u27e9:\n\nSha512\u27e841\u27e9`digest`\n    SHA-512 hasher.\n\nSignatureError\u27e842\u27e9\n    Errors which may occur while processing signatures and keypairs.\n",
            "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://docs.rs/ed25519-dalek/latest/settings.html: Settings\n\u27e82\u27e9 https://docs.rs/ed25519-dalek/latest/help.html: Help\n\u27e83\u27e9 https://docs.rs/ed25519-dalek/latest/src/ed25519_dalek/lib.rs.html#10-293: Source\n\u27e84\u27e9 https://docs.rs/ed25519-dalek/latest/ed25519_dalek/#example: \u00a7\n\u27e85\u27e9 https://docs.rs/ed25519-dalek/latest/ed25519_dalek/#serialisation: \u00a7\n\u27e86\u27e9 https://docs.rs/ed25519-dalek/latest/ed25519_dalek/#pkcs8-key-encoding: \u00a7\n\u27e87\u27e9 https://docs.rs/ed25519-dalek/latest/ed25519_dalek/struct.SigningKey.html: struct ed25519_dalek::SigningKey - `SigningKey`\n\u27e88\u27e9 https://docs.rs/ed25519-dalek/latest/ed25519_dalek/struct.VerifyingKey.html: struct ed25519_dalek::VerifyingKey - `VerifyingKey`\n\u27e89\u27e9 https://docs.rs/ed25519-dalek/latest/ed25519_dalek/pkcs8/index.html: mod ed25519_dalek::pkcs8 - `pkcs8`\n\u27e810\u27e9 https://docs.rs/ed25519-dalek/latest/ed25519_dalek/pkcs8/trait.DecodePrivateKey.html: trait ed25519_dalek::pkcs8::DecodePrivateKey - `pkcs8::DecodePrivateKey`\n\u27e811\u27e9 https://docs.rs/ed25519-dalek/latest/ed25519_dalek/pkcs8/trait.EncodePrivateKey.html: trait ed25519_dalek::pkcs8::EncodePrivateKey - `pkcs8::EncodePrivateKey`\n\u27e812\u27e9 https://docs.rs/ed25519-dalek/latest/ed25519_dalek/pkcs8/trait.DecodePublicKey.html: trait ed25519_dalek::pkcs8::DecodePublicKey - `pkcs8::DecodePublicKey`\n\u27e813\u27e9 https://docs.rs/ed25519-dalek/latest/ed25519_dalek/pkcs8/trait.EncodePublicKey.html: trait ed25519_dalek::pkcs8::EncodePublicKey - `pkcs8::EncodePublicKey`\n\u27e814\u27e9 https://docs.rs/ed25519-dalek/latest/ed25519_dalek/#example-1: \u00a7\n\u27e815\u27e9 https://docs.rs/ed25519-dalek/latest/ed25519_dalek/#using-serde: \u00a7\n\u27e816\u27e9 https://serde.rs: serde\n\u27e817\u27e9 https://github.com/TyOverby/bincode: bincode\n\u27e818\u27e9 https://docs.rs/ed25519-dalek/latest/ed25519_dalek/#reexports: \u00a7\n\u27e819\u27e9 https://docs.rs/ed25519-dalek/latest/ed25519_dalek/#modules: \u00a7\n\u27e820\u27e9 https://docs.rs/ed25519-dalek/latest/ed25519_dalek/hazmat/index.html: mod ed25519_dalek::hazmat - hazmat\n\u27e821\u27e9 https://docs.rs/ed25519-dalek/latest/ed25519_dalek/#structs: \u00a7\n\u27e822\u27e9 https://docs.rs/ed25519-dalek/latest/ed25519_dalek/struct.Context.html: struct ed25519_dalek::Context - Context\n\u27e823\u27e9 https://docs.rs/ed25519-dalek/latest/ed25519_dalek/struct.Signature.html: struct ed25519_dalek::Signature - Signature\n\u27e824\u27e9 https://docs.rs/ed25519-dalek/latest/ed25519_dalek/#constants: \u00a7\n\u27e825\u27e9 https://docs.rs/ed25519-dalek/latest/ed25519_dalek/constant.EXPANDED_SECRET_KEY_LENGTH.html: constant ed25519_dalek::EXPANDED_SECRET_KEY_LENGTH - EXPANDED_SECRET_KEY_LENGTH\n\u27e826\u27e9 https://docs.rs/ed25519-dalek/latest/ed25519_dalek/constant.KEYPAIR_LENGTH.html: constant ed25519_dalek::KEYPAIR_LENGTH - KEYPAIR_LENGTH\n\u27e827\u27e9 https://docs.rs/ed25519-dalek/latest/ed25519_dalek/constant.PUBLIC_KEY_LENGTH.html: constant ed25519_dalek::PUBLIC_KEY_LENGTH - PUBLIC_KEY_LENGTH\n\u27e828\u27e9 https://docs.rs/ed25519-dalek/latest/ed25519_dalek/constant.SECRET_KEY_LENGTH.html: constant ed25519_dalek::SECRET_KEY_LENGTH - SECRET_KEY_LENGTH\n\u27e829\u27e9 https://docs.rs/ed25519-dalek/latest/ed25519_dalek/constant.SIGNATURE_LENGTH.html: constant ed25519_dalek::SIGNATURE_LENGTH - SIGNATURE_LENGTH\n\u27e830\u27e9 https://docs.rs/ed25519-dalek/latest/ed25519_dalek/#traits: \u00a7\n\u27e831\u27e9 https://docs.rs/ed25519-dalek/latest/ed25519_dalek/trait.Digest.html: trait ed25519_dalek::Digest - Digest\n\u27e832\u27e9 https://docs.rs/ed25519-dalek/latest/ed25519_dalek/trait.DigestSigner.html: trait ed25519_dalek::DigestSigner - DigestSigner\n\u27e833\u27e9 https://docs.rs/ed25519-dalek/latest/ed25519_dalek/trait.DigestVerifier.html: trait ed25519_dalek::DigestVerifier - DigestVerifier\n\u27e834\u27e9 https://docs.rs/ed25519-dalek/latest/ed25519_dalek/trait.Signer.html: trait ed25519_dalek::Signer - Signer\n\u27e835\u27e9 https://docs.rs/ed25519-dalek/latest/ed25519_dalek/trait.Verifier.html: trait ed25519_dalek::Verifier - Verifier\n\u27e836\u27e9 https://docs.rs/ed25519-dalek/latest/ed25519_dalek/#functions: \u00a7\n\u27e837\u27e9 https://docs.rs/ed25519-dalek/latest/ed25519_dalek/fn.verify_batch.html: fn ed25519_dalek::verify_batch - verify_batch\n\u27e838\u27e9 https://docs.rs/ed25519-dalek/latest/ed25519_dalek/#types: \u00a7\n\u27e839\u27e9 https://docs.rs/ed25519-dalek/latest/ed25519_dalek/type.SecretKey.html: type ed25519_dalek::SecretKey - SecretKey\n\u27e840\u27e9 https://www.rfc-editor.org/rfc/rfc8032#section-5.1.5: RFC8032 \u00a7 5.1.5\n\u27e841\u27e9 https://docs.rs/ed25519-dalek/latest/ed25519_dalek/type.Sha512.html: type ed25519_dalek::Sha512 - Sha512\n\u27e842\u27e9 https://docs.rs/ed25519-dalek/latest/ed25519_dalek/type.SignatureError.html: type ed25519_dalek::SignatureError - SignatureError\n",
            "fit_markdown": "",
            "fit_html": ""
          },
          "downloads": 0,
          "github_stars": 0,
          "dependencies": [],
          "features": {},
          "code_snippets": [],
          "readme_sections": {},
          "librs_downloads": null,
          "source": "crates.io",
          "enhanced_scraping": {},
          "enhanced_features": [],
          "enhanced_dependencies": [],
          "readme_summary": "The `ed25519-dalek` crate provides a fast and secure Rust implementation of Ed25519 for key generation, message signing, and signature verification. It supports serialization/deserialization of keys and signatures, PKCS#8 encoding/decoding, and optional integration with Serde for flexible data formats. Additional features include PEM support for public keys and low-level cryptographic interfaces via its `hazmat` module.",
          "feature_summary": null,
          "use_case": "Cryptography",
          "score": 7.0,
          "factual_counterfactual": "### Pair 1: Key Generation and Signing  \n\u2705 Factual: The `ed25519-dalek` crate allows users to generate a `SigningKey` using a cryptographically secure pseudorandom number generator (CSPRNG), such as the operating system's `OsRng`. This key can then be used to sign messages securely.  \n\u274c Counterfactual: The `ed25519-dalek` crate requires an external library to generate cryptographic keys, as it does not support key generation natively.  \n\n---\n\n### Pair 2: Signature Verification  \n\u2705 Factual: The `ed25519-dalek` crate provides the `Verifier` trait, which allows both `SigningKey` and `VerifyingKey` to validate the authenticity of a signature against the original message.  \n\u274c Counterfactual: The `ed25519-dalek` crate only supports signature verification using the `SigningKey`, and does not allow verification using the `VerifyingKey`.  \n\n---\n\n### Pair 3: Serialization Support  \n\u2705 Factual: The `ed25519-dalek` crate supports serialization of keys and signatures into byte arrays using `.to_bytes()` and deserialization using `::from_bytes()`. This feature ensures safe storage and transfer of public keys and signatures.  \n\u274c Counterfactual: The `ed25519-dalek` crate does not support serialization or deserialization of keys and signatures, requiring users to implement their own serialization logic.",
          "source_analysis": null,
          "user_behavior": null,
          "security": null
        }
      },
      "irl_score": 8.6,
      "execution_id": "exec-701ec11f-55e1ceda-1751264602",
      "timestamp": "2025-06-30T06:23:22.667749+00:00",
      "canon_version": "1.3.0"
    },
    "rule_zero_compliant": true
  }
]