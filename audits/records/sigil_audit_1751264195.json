[
  {
    "execution_id": "exec-d23b334f-15d786b5-1751264173",
    "timestamp": "2025-06-30T06:16:13.761282+00:00",
    "sacred_chain": {
      "input_data": "rustls",
      "context_sources": [
        "crates.io",
        "github.com",
        "lib.rs",
        "docs.rs"
      ],
      "reasoning_steps": [
        "Input canonicalized: 'rustls' -> 'rustls'",
        "Context gathered from 4 validated sources",
        "Metadata extracted: 4 fields",
        "Documentation analyzed: quality 7.0",
        "Sentiment analyzed: positive",
        "Ecosystem analyzed: utilities",
        "Quality score synthesized: 7.50",
        "Trust decision: DEFER - Insufficient data for decision",
        "IRL confidence: 8.600"
      ],
      "suggestion": "ALLOW: Positive community sentiment",
      "verdict": "DEFER",
      "audit_info": {
        "metadata": {
          "name": "rustls",
          "type": "rust_crate",
          "source": "manual_input",
          "extraction_method": "irl_engine"
        },
        "sentiment": {
          "quality_score": 7.0,
          "completeness": 0.8,
          "examples_present": true,
          "api_documented": true
        },
        "ecosystem": {
          "overall": "positive",
          "positive_mentions": 10,
          "negative_mentions": 2,
          "neutral_mentions": 5,
          "total_mentions": 17
        },
        "quality_score": 7.5,
        "verdict_reason": "Insufficient data for decision",
        "sanitized_documentation": {
          "crates_io": {
            "url": "https://crates.io/crates/rustls",
            "title": "rustls v0.23.28",
            "content": {
              "raw_markdown": "#  rustls v0.23.28\nRustls is a modern TLS library written in Rust. \n  * [ Readme ](https://crates.io/crates/rustls)\n  * [ 97 Versions ](https://crates.io/crates/rustls/versions)\n  * [ Dependencies ](https://crates.io/crates/rustls/dependencies)\n  * [ Dependents ](https://crates.io/crates/rustls/reverse_dependencies)\n\n\n## Metadata\n14 days ago \nv1.71.0 \n[ Apache-2.0 ](https://choosealicense.com/licenses/apache-2.0) OR [ ISC ](https://choosealicense.com/licenses/isc) OR [ MIT ](https://choosealicense.com/licenses/mit)\n357 KiB \n## Install\nRun the following Cargo command in your project directory:\ncargo add rustls\nOr add the following line to your Cargo.toml:\nrustls = \"0.23.28\"\n## Repository\n[ github.com/rustls/rustls ](https://github.com/rustls/rustls)\n## Owners\n## Categories\n  * [Network programming](https://crates.io/categories/network-programming)\n  * [Cryptography](https://crates.io/categories/cryptography)\n\n\n[ Report crate ](https://crates.io/support?crate=rustls&inquire=crate-violation)\n### Stats Overview\n311,262,756 Downloads all time\n97 Versions published\n#### Downloads over the last 90 days\nDisplay as \nStacked \n  * Stacked \n  * Unstacked \n\n\nLoading\u2026\n",
              "markdown_with_citations": "#  rustls v0.23.28\nRustls is a modern TLS library written in Rust. \n  *  Readme \u27e81\u27e9\n  *  97 Versions \u27e82\u27e9\n  *  Dependencies \u27e83\u27e9\n  *  Dependents \u27e84\u27e9\n\n\n## Metadata\n14 days ago \nv1.71.0 \n Apache-2.0 \u27e85\u27e9 OR  ISC \u27e86\u27e9 OR  MIT \u27e87\u27e9\n357 KiB \n## Install\nRun the following Cargo command in your project directory:\ncargo add rustls\nOr add the following line to your Cargo.toml:\nrustls = \"0.23.28\"\n## Repository\n github.com/rustls/rustls \u27e88\u27e9\n## Owners\n## Categories\n  * Network programming\u27e89\u27e9\n  * Cryptography\u27e810\u27e9\n\n\n Report crate \u27e811\u27e9\n### Stats Overview\n311,262,756 Downloads all time\n97 Versions published\n#### Downloads over the last 90 days\nDisplay as \nStacked \n  * Stacked \n  * Unstacked \n\n\nLoading\u2026\n",
              "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://crates.io/crates/rustls:  Readme \n\u27e82\u27e9 https://crates.io/crates/rustls/versions:  97 Versions \n\u27e83\u27e9 https://crates.io/crates/rustls/dependencies:  Dependencies \n\u27e84\u27e9 https://crates.io/crates/rustls/reverse_dependencies:  Dependents \n\u27e85\u27e9 https://choosealicense.com/licenses/apache-2.0:  Apache-2.0 \n\u27e86\u27e9 https://choosealicense.com/licenses/isc:  ISC \n\u27e87\u27e9 https://choosealicense.com/licenses/mit:  MIT \n\u27e88\u27e9 https://github.com/rustls/rustls:  github.com/rustls/rustls \n\u27e89\u27e9 https://crates.io/categories/network-programming: Network programming\n\u27e810\u27e9 https://crates.io/categories/cryptography: Cryptography\n\u27e811\u27e9 https://crates.io/support?crate=rustls&inquire=crate-violation:  Report crate \n",
              "fit_markdown": "",
              "fit_html": ""
            },
            "structured_data": {},
            "quality_score": 3.0,
            "extraction_method": "crawl4ai",
            "error": null,
            "metadata": {
              "doc_type": "docs",
              "content_length": 1173,
              "has_structured_data": false,
              "crawl_success": true
            },
            "timestamp": "117963.448078"
          },
          "docs_rs": {
            "url": "https://docs.rs/rustls",
            "title": "Crate rustlsCopy item path",
            "content": {
              "raw_markdown": "[](https://docs.rs/rustls/latest/rustls/all.html \"show sidebar\")\n# Crate rustlsCopy item path\n[Settings](https://docs.rs/rustls/latest/settings.html)\n[Help](https://docs.rs/rustls/latest/help.html)\nSummary[Source](https://docs.rs/rustls/latest/src/rustls/lib.rs.html#1-715)\nExpand description\n## [\u00a7](https://docs.rs/rustls/latest/rustls/#rustls---a-modern-tls-library)Rustls - a modern TLS library\nRustls is a TLS library that aims to provide a good level of cryptographic security, requires no configuration to achieve that security, and provides no unsafe features or obsolete cryptography by default.\nRustls implements TLS1.2 and TLS1.3 for both clients and servers. See [the full list of protocol features](https://docs.rs/rustls/latest/rustls/manual/_04_features/index.html \"mod rustls::manual::_04_features\").\n#### [\u00a7](https://docs.rs/rustls/latest/rustls/#platform-support)Platform support\nWhile Rustls itself is platform independent, by default it uses [`aws-lc-rs`](https://crates.io/crates/aws-lc-rs) for implementing the cryptography in TLS. See [the aws-lc-rs FAQ](https://aws.github.io/aws-lc-rs/faq.html#can-i-run-aws-lc-rs-on-x-platform-or-architecture) for more details of the platform/architecture support constraints in aws-lc-rs.\n[`ring`](https://crates.io/crates/ring) is also available via the `ring` crate feature: see [the supported `ring` target platforms](https://github.com/briansmith/ring/blob/2e8363b433fa3b3962c877d9ed2e9145612f3160/include/ring-core/target.h#L18-L64).\nBy providing a custom instance of the [`crypto::CryptoProvider`](https://docs.rs/rustls/latest/rustls/crypto/struct.CryptoProvider.html \"struct rustls::crypto::CryptoProvider\") struct, you can replace all cryptography dependencies of rustls. This is a route to being portable to a wider set of architectures and environments, or compliance requirements. See the [`crypto::CryptoProvider`](https://docs.rs/rustls/latest/rustls/crypto/struct.CryptoProvider.html \"struct rustls::crypto::CryptoProvider\") documentation for more details.\nSpecifying `default-features = false` when depending on rustls will remove the implicit dependency on aws-lc-rs.\nRustls requires Rust 1.71 or later. It has an optional dependency on zlib-rs which requires 1.75 or later.\n#### [\u00a7](https://docs.rs/rustls/latest/rustls/#cryptography-providers)Cryptography providers\nSince Rustls 0.22 it has been possible to choose the provider of the cryptographic primitives that Rustls uses. This may be appealing if you have specific platform, compliance or feature requirements that aren\u2019t met by the default provider, [`aws-lc-rs`](https://crates.io/crates/aws-lc-rs).\nUsers that wish to customize the provider in use can do so when constructing `ClientConfig` and `ServerConfig` instances using the `with_crypto_provider` method on the respective config builder types. See the [`crypto::CryptoProvider`](https://docs.rs/rustls/latest/rustls/crypto/struct.CryptoProvider.html \"struct rustls::crypto::CryptoProvider\") documentation for more details.\n##### [\u00a7](https://docs.rs/rustls/latest/rustls/#built-in-providers)Built-in providers\nRustls ships with two built-in providers controlled by associated crate features:\n  * [`aws-lc-rs`](https://crates.io/crates/aws-lc-rs) - enabled by default, available with the `aws_lc_rs` crate feature enabled.\n  * [`ring`](https://crates.io/crates/ring) - available with the `ring` crate feature enabled.\n\n\nSee the documentation for [`crypto::CryptoProvider`](https://docs.rs/rustls/latest/rustls/crypto/struct.CryptoProvider.html \"struct rustls::crypto::CryptoProvider\") for details on how providers are selected.\n##### [\u00a7](https://docs.rs/rustls/latest/rustls/#third-party-providers)Third-party providers\nThe community has also started developing third-party providers for Rustls:\n  * [`boring-rustls-provider`](https://github.com/janrueth/boring-rustls-provider) - a work-in-progress provider that uses [`boringssl`](https://github.com/google/boringssl) for cryptography.\n  * [`rustls-graviola`](https://crates.io/crates/rustls-graviola) - a provider that uses [`graviola`](https://github.com/ctz/graviola) for cryptography.\n  * [`rustls-mbedtls-provider`](https://github.com/fortanix/rustls-mbedtls-provider) - a provider that uses [`mbedtls`](https://github.com/Mbed-TLS/mbedtls) for cryptography.\n  * [`rustls-openssl`](https://github.com/tofay/rustls-openssl) - a provider that uses [OpenSSL](https://openssl-library.org/) for cryptography.\n  * [`rustls-rustcrypto`](https://github.com/RustCrypto/rustls-rustcrypto) - an experimental provider that uses the crypto primitives from [`RustCrypto`](https://github.com/RustCrypto) for cryptography.\n  * [`rustls-symcrypt`](https://github.com/microsoft/rustls-symcrypt) - a provider that uses Microsoft\u2019s [SymCrypt](https://github.com/microsoft/SymCrypt) library.\n  * [`rustls-wolfcrypt-provider`](https://github.com/wolfSSL/rustls-wolfcrypt-provider) - a work-in-progress provider that uses [`wolfCrypt`](https://www.wolfssl.com/products/wolfcrypt) for cryptography.\n\n\n##### [\u00a7](https://docs.rs/rustls/latest/rustls/#custom-provider)Custom provider\nWe also provide a simple example of writing your own provider in the [custom provider example](https://github.com/rustls/rustls/tree/main/provider-example/). This example implements a minimal provider using parts of the [`RustCrypto`](https://github.com/RustCrypto) ecosystem.\nSee the [Making a custom CryptoProvider](https://docs.rs/rustls/latest/rustls/crypto/struct.CryptoProvider.html#making-a-custom-cryptoprovider) section of the documentation for more information on this topic.\n### [\u00a7](https://docs.rs/rustls/latest/rustls/#design-overview)Design overview\nRustls is a low-level library. If your goal is to make HTTPS connections you may prefer to use a library built on top of Rustls like [hyper](https://crates.io/crates/hyper) or [ureq](https://crates.io/crates/ureq).\n#### [\u00a7](https://docs.rs/rustls/latest/rustls/#rustls-does-not-take-care-of-network-io)Rustls does not take care of network IO\nIt doesn\u2019t make or accept TCP connections, or do DNS, or read or write files.\nOur [examples](https://github.com/rustls/rustls/tree/main/examples) directory contains demos that show how to handle I/O using the [`stream::Stream`](https://docs.rs/rustls/latest/rustls/struct.Stream.html \"struct rustls::Stream\") helper, as well as more complex asynchronous I/O using [`mio`](https://docs.rs/mio/latest/mio/). If you\u2019re already using Tokio for an async runtime you may prefer to use [`tokio-rustls`](https://github.com/rustls/tokio-rustls) instead of interacting with rustls directly.\n#### [\u00a7](https://docs.rs/rustls/latest/rustls/#rustls-provides-encrypted-pipes)Rustls provides encrypted pipes\nThese are the [`ServerConnection`](https://docs.rs/rustls/latest/rustls/server/struct.ServerConnection.html \"struct rustls::server::ServerConnection\") and [`ClientConnection`](https://docs.rs/rustls/latest/rustls/client/struct.ClientConnection.html \"struct rustls::client::ClientConnection\") types. You supply raw TLS traffic on the left (via the [`read_tls()`](https://docs.rs/rustls/latest/rustls/enum.Connection.html#method.read_tls \"method rustls::Connection::read_tls\") and [`write_tls()`](https://docs.rs/rustls/latest/rustls/enum.Connection.html#method.read_tls \"method rustls::Connection::read_tls\") methods) and then read/write the plaintext on the right:\n```\n     TLS                  Plaintext\n     ===                  =========\n  read_tls()   +-----------------------+   reader() as io::Read\n          |            |\n     +--------->  ClientConnection  +--------->\n          |     or      |\n     <---------+  ServerConnection  <---------+\n          |            |\n  write_tls()   +-----------------------+   writer() as io::Write\n```\n\n#### [\u00a7](https://docs.rs/rustls/latest/rustls/#rustls-takes-care-of-server-certificate-verification)Rustls takes care of server certificate verification\nYou do not need to provide anything other than a set of root certificates to trust. Certificate verification cannot be turned off or disabled in the main API.\n### [\u00a7](https://docs.rs/rustls/latest/rustls/#getting-started)Getting started\nThis is the minimum you need to do to make a TLS client connection.\nFirst we load some root certificates. These are used to authenticate the server. The simplest way is to depend on the [`webpki_roots`](https://crates.io/crates/webpki-roots) crate which contains the Mozilla set of root certificates.\n```\nlet root_store = rustls::RootCertStore::from_iter(\n  webpki_roots::TLS_SERVER_ROOTS\n    .iter()\n    .cloned(),\n);\n```\n\nNext, we make a `ClientConfig`. You\u2019re likely to make one of these per process, and use it for all connections made by that process.\n```\nlet config = rustls::ClientConfig::builder()\n  .with_root_certificates(root_store)\n  .with_no_client_auth();\n```\n\nNow we can make a connection. You need to provide the server\u2019s hostname so we know what to expect to find in the server\u2019s certificate.\n```\nlet rc_config = Arc::new(config);\nlet example_com = \"example.com\".try_into().unwrap();\nlet mut client = rustls::ClientConnection::new(rc_config, example_com);\n```\n\nNow you should do appropriate IO for the `client` object. If `client.wants_read()` yields true, you should call `client.read_tls()` when the underlying connection has data. Likewise, if `client.wants_write()` yields true, you should call `client.write_tls()` when the underlying connection is able to send data. You should continue doing this as long as the connection is valid.\nThe return types of `read_tls()` and `write_tls()` only tell you if the IO worked. No parsing or processing of the TLS messages is done. After each `read_tls()` you should therefore call `client.process_new_packets()` which parses and processes the messages. Any error returned from `process_new_packets` is fatal to the connection, and will tell you why. For example, if the server\u2019s certificate is expired `process_new_packets` will return `Err(InvalidCertificate(Expired))`. From this point on, `process_new_packets` will not do any new work and will return that error continually.\nYou can extract newly received data by calling `client.reader()` (which implements the `io::Read` trait). You can send data to the peer by calling `client.writer()` (which implements `io::Write` trait). Note that `client.writer().write()` buffers data you send if the TLS connection is not yet established: this is useful for writing (say) a HTTP request, but this is buffered so avoid large amounts of data.\nThe following code uses a fictional socket IO API for illustration, and does not handle errors.\n```\nuse std::io;\nuse rustls::Connection;\nclient.writer().write(b\"GET / HTTP/1.0\\r\\n\\r\\n\").unwrap();\nlet mut socket = connect(\"example.com\", 443);\nloop {\n if client.wants_read() && socket.ready_for_read() {\n  client.read_tls(&mut socket).unwrap();\n  client.process_new_packets().unwrap();\n  let mut plaintext = Vec::new();\n  client.reader().read_to_end(&mut plaintext).unwrap();\n  io::stdout().write(&plaintext).unwrap();\n }\n if client.wants_write() && socket.ready_for_write() {\n  client.write_tls(&mut socket).unwrap();\n }\n socket.wait_for_something_to_happen();\n}\n```\n\n## [\u00a7](https://docs.rs/rustls/latest/rustls/#examples)Examples\nYou can find several client and server examples of varying complexity in the [examples](https://github.com/rustls/rustls/tree/main/examples) directory, including [`tlsserver-mio`](https://github.com/rustls/rustls/blob/main/examples/src/bin/tlsserver-mio.rs) and [`tlsclient-mio`](https://github.com/rustls/rustls/blob/main/examples/src/bin/tlsclient-mio.rs) - full worked examples using [`mio`](https://docs.rs/mio/latest/mio/).\n## [\u00a7](https://docs.rs/rustls/latest/rustls/#manual)Manual\nThe [rustls manual](https://docs.rs/rustls/latest/rustls/manual/index.html \"mod rustls::manual\") explains design decisions and includes how-to guidance.\n## [\u00a7](https://docs.rs/rustls/latest/rustls/#crate-features)Crate features\nHere\u2019s a list of what features are exposed by the rustls crate and what they mean.\n  * `std` (enabled by default): enable the high-level (buffered) Connection API and other functionality which relies on the `std` library.\n  * `aws_lc_rs` (enabled by default): makes the rustls crate depend on the [`aws-lc-rs`](https://crates.io/crates/aws-lc-rs) crate. Use `rustls::crypto::aws_lc_rs::default_provider().install_default()` to use it as the default `CryptoProvider`, or provide it explicitly when making a `ClientConfig` or `ServerConfig`.\nNote that aws-lc-rs has additional build-time dependencies like cmake. See [the documentation](https://aws.github.io/aws-lc-rs/requirements/index.html) for details.\n  * `ring`: makes the rustls crate depend on the _ring_ crate for cryptography. Use `rustls::crypto::ring::default_provider().install_default()` to use it as the default `CryptoProvider`, or provide it explicitly when making a `ClientConfig` or `ServerConfig`.\n  * `fips`: enable support for FIPS140-3-approved cryptography, via the [`aws-lc-rs`](https://crates.io/crates/aws-lc-rs) crate. This feature enables the `aws_lc_rs` crate feature, which makes the rustls crate depend on [aws-lc-rs](https://github.com/aws/aws-lc-rs). It also changes the default for [`ServerConfig::require_ems`](https://docs.rs/rustls/latest/rustls/server/struct.ServerConfig.html#structfield.require_ems \"field rustls::server::ServerConfig::require_ems\") and [`ClientConfig::require_ems`](https://docs.rs/rustls/latest/rustls/client/struct.ClientConfig.html#structfield.require_ems \"field rustls::client::ClientConfig::require_ems\").\nSee [manual::_06_fips](https://docs.rs/rustls/latest/rustls/manual/_06_fips/index.html \"mod rustls::manual::_06_fips\") for more details.\n  * `prefer-post-quantum` (enabled by default): for the [`aws-lc-rs`](https://crates.io/crates/aws-lc-rs)-backed provider, prioritizes post-quantum secure key exchange by default (using X25519MLKEM768). This feature merely alters the order of `rustls::crypto::aws_lc_rs::DEFAULT_KX_GROUPS`. See [the manual](https://docs.rs/rustls/latest/rustls/manual/_05_defaults/index.html#about-the-post-quantum-secure-key-exchange-x25519mlkem768 \"mod rustls::manual::_05_defaults\") for more details.\n  * `custom-provider`: disables implicit use of built-in providers (`aws-lc-rs` or `ring`). This forces applications to manually install one, for instance, when using a custom `CryptoProvider`.\n  * `tls12` (enabled by default): enable support for TLS version 1.2. Note that, due to the additive nature of Cargo features and because it is enabled by default, other crates in your dependency graph could re-enable it for your application. If you want to disable TLS 1.2 for security reasons, consider explicitly enabling TLS 1.3 only in the config builder API.\n  * `logging` (enabled by default): make the rustls crate depend on the `log` crate. rustls outputs interesting protocol-level messages at `trace!` and `debug!` level, and protocol-level errors at `warn!` and `error!` level. The log messages do not contain secret key data, and so are safe to archive without affecting session security.\n  * `read_buf`: when building with Rust Nightly, adds support for the unstable `std::io::ReadBuf` and related APIs. This reduces costs from initializing buffers. Will do nothing on non-Nightly releases.\n  * `brotli`: uses the `brotli` crate for RFC8879 certificate compression support.\n  * `zlib`: uses the `zlib-rs` crate for RFC8879 certificate compression support.\n\n\n## Re-exports[\u00a7](https://docs.rs/rustls/latest/rustls/#reexports)\n\n`pub use crate::ticketer::TicketRotator[](https://docs.rs/rustls/latest/rustls/ticketer/struct.TicketRotator.html \"struct rustls::ticketer::TicketRotator\");``std`\n\n\n`pub use crate::ticketer::TicketSwitcher[](https://docs.rs/rustls/latest/rustls/ticketer/struct.TicketSwitcher.html \"struct rustls::ticketer::TicketSwitcher\");``std` or `hashbrown`\n\n\n`pub use client::ClientConfig[](https://docs.rs/rustls/latest/rustls/client/struct.ClientConfig.html \"struct rustls::client::ClientConfig\");`\n\n\n`pub use client::ClientConnection[](https://docs.rs/rustls/latest/rustls/client/struct.ClientConnection.html \"struct rustls::client::ClientConnection\");``std`\n\n\n`pub use server::ServerConfig[](https://docs.rs/rustls/latest/rustls/server/struct.ServerConfig.html \"struct rustls::server::ServerConfig\");`\n\n\n`pub use server::ServerConnection[](https://docs.rs/rustls/latest/rustls/server/struct.ServerConnection.html \"struct rustls::server::ServerConnection\");``std`\n\n## Modules[\u00a7](https://docs.rs/rustls/latest/rustls/#modules)\n\n[client](https://docs.rs/rustls/latest/rustls/client/index.html \"mod rustls::client\")\n    Items for use in a client.\n\n[compress](https://docs.rs/rustls/latest/rustls/compress/index.html \"mod rustls::compress\")\n    Certificate compression and decompression support\n\n[crypto](https://docs.rs/rustls/latest/rustls/crypto/index.html \"mod rustls::crypto\")\n    Crypto provider interface.\n\n[ffdhe_groups](https://docs.rs/rustls/latest/rustls/ffdhe_groups/index.html \"mod rustls::ffdhe_groups\")\n    This module contains parameters for FFDHE named groups as defined in [RFC 7919 Appendix A](https://datatracker.ietf.org/doc/html/rfc7919#appendix-A).\n\n[kernel](https://docs.rs/rustls/latest/rustls/kernel/index.html \"mod rustls::kernel\")\n    Kernel connection API.\n\n[lock](https://docs.rs/rustls/latest/rustls/lock/index.html \"mod rustls::lock\")\n    APIs abstracting over locking primitives.\n\n[manual](https://docs.rs/rustls/latest/rustls/manual/index.html \"mod rustls::manual\")\n    This is the rustls manual.\n\n[pki_types](https://docs.rs/rustls/latest/rustls/pki_types/index.html \"mod rustls::pki_types\")\n    Re-exports the contents of the [rustls-pki-types](https://docs.rs/rustls-pki-types) crate for easy access\n\n[quic](https://docs.rs/rustls/latest/rustls/quic/index.html \"mod rustls::quic\")\n    APIs for implementing QUIC TLS\n\n[server](https://docs.rs/rustls/latest/rustls/server/index.html \"mod rustls::server\")\n    Items for use in a server.\n\n[sign](https://docs.rs/rustls/latest/rustls/sign/index.html \"mod rustls::sign\")\n    Message signing interfaces.\n\n[ticketer](https://docs.rs/rustls/latest/rustls/ticketer/index.html \"mod rustls::ticketer\")`std` or `hashbrown`\n    APIs for implementing TLS tickets\n\n[time_provider](https://docs.rs/rustls/latest/rustls/time_provider/index.html \"mod rustls::time_provider\")\n    The library\u2019s source of time.\n\n[unbuffered](https://docs.rs/rustls/latest/rustls/unbuffered/index.html \"mod rustls::unbuffered\")\n    Unbuffered connection API\n\n[version](https://docs.rs/rustls/latest/rustls/version/index.html \"mod rustls::version\")\n    All defined protocol versions appear in this module.\n## Structs[\u00a7](https://docs.rs/rustls/latest/rustls/#structs)\n\n[CipherSuiteCommon](https://docs.rs/rustls/latest/rustls/struct.CipherSuiteCommon.html \"struct rustls::CipherSuiteCommon\")\n    Common state for cipher suites (both for TLS 1.2 and TLS 1.3)\n\n[CommonState](https://docs.rs/rustls/latest/rustls/struct.CommonState.html \"struct rustls::CommonState\")\n    Connection state common to both client and server connections.\n\n[ConfigBuilder](https://docs.rs/rustls/latest/rustls/struct.ConfigBuilder.html \"struct rustls::ConfigBuilder\")\n    A [builder](https://rust-unofficial.github.io/patterns/patterns/creational/builder.html) for [`ServerConfig`](https://docs.rs/rustls/latest/rustls/server/struct.ServerConfig.html \"struct rustls::server::ServerConfig\") or [`ClientConfig`](https://docs.rs/rustls/latest/rustls/client/struct.ClientConfig.html \"struct rustls::client::ClientConfig\") values.\n\n[ConnectionCommon](https://docs.rs/rustls/latest/rustls/struct.ConnectionCommon.html \"struct rustls::ConnectionCommon\")\n    Interface shared by client and server connections.\n\n[DigitallySignedStruct](https://docs.rs/rustls/latest/rustls/struct.DigitallySignedStruct.html \"struct rustls::DigitallySignedStruct\")\n    This type combines a [`SignatureScheme`](https://docs.rs/rustls/latest/rustls/enum.SignatureScheme.html \"enum rustls::SignatureScheme\") and a signature payload produced with that scheme.\n\n[DistinguishedName](https://docs.rs/rustls/latest/rustls/struct.DistinguishedName.html \"struct rustls::DistinguishedName\")\n    A `DistinguishedName` is a `Vec<u8>` wrapped in internal types.\n\n[ExtractedSecrets](https://docs.rs/rustls/latest/rustls/struct.ExtractedSecrets.html \"struct rustls::ExtractedSecrets\")\n    Secrets for transmitting/receiving data over a TLS session.\n\n[IoState](https://docs.rs/rustls/latest/rustls/struct.IoState.html \"struct rustls::IoState\")\n    Values of this structure are returned from [`Connection::process_new_packets`](https://docs.rs/rustls/latest/rustls/enum.Connection.html#method.process_new_packets \"method rustls::Connection::process_new_packets\") and tell the caller the current I/O state of the TLS connection.\n\n[KeyLogFile](https://docs.rs/rustls/latest/rustls/struct.KeyLogFile.html \"struct rustls::KeyLogFile\")`std`\n    [`KeyLog`](https://docs.rs/rustls/latest/rustls/trait.KeyLog.html \"trait rustls::KeyLog\") implementation that opens a file whose name is given by the `SSLKEYLOGFILE` environment variable, and writes keys into it.\n\n[NoKeyLog](https://docs.rs/rustls/latest/rustls/struct.NoKeyLog.html \"struct rustls::NoKeyLog\")\n    KeyLog that does exactly nothing.\n\n[OtherError](https://docs.rs/rustls/latest/rustls/struct.OtherError.html \"struct rustls::OtherError\")\n    Any other error that cannot be expressed by a more specific [`Error`](https://docs.rs/rustls/latest/rustls/enum.Error.html \"enum rustls::Error\") variant.\n\n[Reader](https://docs.rs/rustls/latest/rustls/struct.Reader.html \"struct rustls::Reader\")`std`\n    A structure that implements [`std::io::Read`](https://doc.rust-lang.org/nightly/std/io/trait.Read.html \"trait std::io::Read\") for reading plaintext.\n\n[RootCertStore](https://docs.rs/rustls/latest/rustls/struct.RootCertStore.html \"struct rustls::RootCertStore\")\n    A container for root certificates able to provide a root-of-trust for connection authentication.\n\n[Stream](https://docs.rs/rustls/latest/rustls/struct.Stream.html \"struct rustls::Stream\")`std`\n    This type implements `io::Read` and `io::Write`, encapsulating a Connection `C` and an underlying transport `T`, such as a socket.\n\n[StreamOwned](https://docs.rs/rustls/latest/rustls/struct.StreamOwned.html \"struct rustls::StreamOwned\")`std`\n    This type implements `io::Read` and `io::Write`, encapsulating and owning a Connection `C` and an underlying blocking transport `T`, such as a socket.\n\n[SupportedProtocolVersion](https://docs.rs/rustls/latest/rustls/struct.SupportedProtocolVersion.html \"struct rustls::SupportedProtocolVersion\")\n    A TLS protocol version supported by rustls.\n\n[Tls12CipherSuite](https://docs.rs/rustls/latest/rustls/struct.Tls12CipherSuite.html \"struct rustls::Tls12CipherSuite\")`tls12`\n    A TLS 1.2 cipher suite supported by rustls.\n\n[Tls13CipherSuite](https://docs.rs/rustls/latest/rustls/struct.Tls13CipherSuite.html \"struct rustls::Tls13CipherSuite\")\n    A TLS 1.3 cipher suite supported by rustls.\n\n[WantsVerifier](https://docs.rs/rustls/latest/rustls/struct.WantsVerifier.html \"struct rustls::WantsVerifier\")\n    Config builder state where the caller must supply a verifier.\n\n[WantsVersions](https://docs.rs/rustls/latest/rustls/struct.WantsVersions.html \"struct rustls::WantsVersions\")\n    Config builder state where the caller must supply TLS protocol versions.\n\n[Writer](https://docs.rs/rustls/latest/rustls/struct.Writer.html \"struct rustls::Writer\")`std`\n    A structure that implements [`std::io::Write`](https://doc.rust-lang.org/nightly/std/io/trait.Write.html \"trait std::io::Write\") for writing plaintext.\n## Enums[\u00a7](https://docs.rs/rustls/latest/rustls/#enums)\n\n[AlertDescription](https://docs.rs/rustls/latest/rustls/enum.AlertDescription.html \"enum rustls::AlertDescription\")\n    The `AlertDescription` TLS protocol enum. Values in this enum are taken from the various RFCs covering TLS, and are listed by IANA. The `Unknown` item is used when processing unrecognised ordinals.\n\n[CertRevocationListError](https://docs.rs/rustls/latest/rustls/enum.CertRevocationListError.html \"enum rustls::CertRevocationListError\")\n    The ways in which a certificate revocation list (CRL) can be invalid.\n\n[CertificateCompressionAlgorithm](https://docs.rs/rustls/latest/rustls/enum.CertificateCompressionAlgorithm.html \"enum rustls::CertificateCompressionAlgorithm\")\n    The \u201cTLS Certificate Compression Algorithm IDs\u201d TLS protocol enum. Values in this enum are taken from [RFC8879](https://www.rfc-editor.org/rfc/rfc8879.html#section-7.3).\n\n[CertificateError](https://docs.rs/rustls/latest/rustls/enum.CertificateError.html \"enum rustls::CertificateError\")\n    The ways in which certificate validators can express errors.\n\n[CipherSuite](https://docs.rs/rustls/latest/rustls/enum.CipherSuite.html \"enum rustls::CipherSuite\")\n    The `CipherSuite` TLS protocol enum. Values in this enum are taken from the various RFCs covering TLS, and are listed by IANA. The `Unknown` item is used when processing unrecognised ordinals.\n\n[Connection](https://docs.rs/rustls/latest/rustls/enum.Connection.html \"enum rustls::Connection\")`std`\n    A client or server connection.\n\n[ConnectionTrafficSecrets](https://docs.rs/rustls/latest/rustls/enum.ConnectionTrafficSecrets.html \"enum rustls::ConnectionTrafficSecrets\")\n    Secrets used to encrypt/decrypt data in a TLS session.\n\n[ContentType](https://docs.rs/rustls/latest/rustls/enum.ContentType.html \"enum rustls::ContentType\")\n    The `ContentType` TLS protocol enum. Values in this enum are taken from the various RFCs covering TLS, and are listed by IANA. The `Unknown` item is used when processing unrecognised ordinals.\n\n[EncryptedClientHelloError](https://docs.rs/rustls/latest/rustls/enum.EncryptedClientHelloError.html \"enum rustls::EncryptedClientHelloError\")\n    An error that occurred while handling Encrypted Client Hello (ECH).\n\n[Error](https://docs.rs/rustls/latest/rustls/enum.Error.html \"enum rustls::Error\")\n    rustls reports protocol errors using this type.\n\n[ExtendedKeyPurpose](https://docs.rs/rustls/latest/rustls/enum.ExtendedKeyPurpose.html \"enum rustls::ExtendedKeyPurpose\")\n    Extended Key Usage (EKU) purpose values.\n\n[HandshakeKind](https://docs.rs/rustls/latest/rustls/enum.HandshakeKind.html \"enum rustls::HandshakeKind\")\n    Describes which sort of handshake happened.\n\n[HandshakeType](https://docs.rs/rustls/latest/rustls/enum.HandshakeType.html \"enum rustls::HandshakeType\")\n    The `HandshakeType` TLS protocol enum. Values in this enum are taken from the various RFCs covering TLS, and are listed by IANA. The `Unknown` item is used when processing unrecognised ordinals.\n\n[InconsistentKeys](https://docs.rs/rustls/latest/rustls/enum.InconsistentKeys.html \"enum rustls::InconsistentKeys\")\n    Specific failure cases from [`keys_match`](https://docs.rs/rustls/latest/rustls/sign/struct.CertifiedKey.html#method.keys_match \"method rustls::sign::CertifiedKey::keys_match\") or a [`crate::crypto::signer::SigningKey`](https://docs.rs/rustls/latest/rustls/sign/trait.SigningKey.html \"trait rustls::sign::SigningKey\") that cannot produce a corresponding public key.\n\n[InvalidMessage](https://docs.rs/rustls/latest/rustls/enum.InvalidMessage.html \"enum rustls::InvalidMessage\")\n    A corrupt TLS message payload that resulted in an error.\n\n[NamedGroup](https://docs.rs/rustls/latest/rustls/enum.NamedGroup.html \"enum rustls::NamedGroup\")\n    The `NamedGroup` TLS protocol enum. Values in this enum are taken from the various RFCs covering TLS, and are listed by IANA. The `Unknown` item is used when processing unrecognised ordinals.\n\n[PeerIncompatible](https://docs.rs/rustls/latest/rustls/enum.PeerIncompatible.html \"enum rustls::PeerIncompatible\")\n    The set of cases where we failed to make a connection because a peer doesn\u2019t support a TLS version/feature we require.\n\n[PeerMisbehaved](https://docs.rs/rustls/latest/rustls/enum.PeerMisbehaved.html \"enum rustls::PeerMisbehaved\")\n    The set of cases where we failed to make a connection because we thought the peer was misbehaving.\n\n[ProtocolVersion](https://docs.rs/rustls/latest/rustls/enum.ProtocolVersion.html \"enum rustls::ProtocolVersion\")\n    The `ProtocolVersion` TLS protocol enum. Values in this enum are taken from the various RFCs covering TLS, and are listed by IANA. The `Unknown` item is used when processing unrecognised ordinals.\n\n[Side](https://docs.rs/rustls/latest/rustls/enum.Side.html \"enum rustls::Side\")\n    Side of the connection.\n\n[SignatureAlgorithm](https://docs.rs/rustls/latest/rustls/enum.SignatureAlgorithm.html \"enum rustls::SignatureAlgorithm\")\n    The `SignatureAlgorithm` TLS protocol enum. Values in this enum are taken from the various RFCs covering TLS, and are listed by IANA. The `Unknown` item is used when processing unrecognised ordinals.\n\n[SignatureScheme](https://docs.rs/rustls/latest/rustls/enum.SignatureScheme.html \"enum rustls::SignatureScheme\")\n    The `SignatureScheme` TLS protocol enum. Values in this enum are taken from the various RFCs covering TLS, and are listed by IANA. The `Unknown` item is used when processing unrecognised ordinals.\n\n[SupportedCipherSuite](https://docs.rs/rustls/latest/rustls/enum.SupportedCipherSuite.html \"enum rustls::SupportedCipherSuite\")\n    A cipher suite supported by rustls.\n## Statics[\u00a7](https://docs.rs/rustls/latest/rustls/#statics)\n\n[ALL_VERSIONS](https://docs.rs/rustls/latest/rustls/static.ALL_VERSIONS.html \"static rustls::ALL_VERSIONS\")\n    A list of all the protocol versions supported by rustls.\n\n[DEFAULT_VERSIONS](https://docs.rs/rustls/latest/rustls/static.DEFAULT_VERSIONS.html \"static rustls::DEFAULT_VERSIONS\")\n    The version configuration that an application should use by default.\n## Traits[\u00a7](https://docs.rs/rustls/latest/rustls/#traits)\n\n[ConfigSide](https://docs.rs/rustls/latest/rustls/trait.ConfigSide.html \"trait rustls::ConfigSide\")\n    Helper trait to abstract [`ConfigBuilder`](https://docs.rs/rustls/latest/rustls/struct.ConfigBuilder.html \"struct rustls::ConfigBuilder\") over building a [`ClientConfig`](https://docs.rs/rustls/latest/rustls/client/struct.ClientConfig.html \"struct rustls::client::ClientConfig\") or [`ServerConfig`](https://docs.rs/rustls/latest/rustls/server/struct.ServerConfig.html \"struct rustls::server::ServerConfig\").\n\n[KeyLog](https://docs.rs/rustls/latest/rustls/trait.KeyLog.html \"trait rustls::KeyLog\")\n    This trait represents the ability to do something useful with key material, such as logging it to a file for debugging.\n\n[SideData](https://docs.rs/rustls/latest/rustls/trait.SideData.html \"trait rustls::SideData\")\n    Data specific to the peer\u2019s side (client or server).\n",
              "markdown_with_citations": "[](https://docs.rs/rustls/latest/rustls/all.html \"show sidebar\")\n# Crate rustlsCopy item path\nSettings\u27e81\u27e9\nHelp\u27e82\u27e9\nSummarySource\u27e83\u27e9\nExpand description\n## \u00a7\u27e84\u27e9Rustls - a modern TLS library\nRustls is a TLS library that aims to provide a good level of cryptographic security, requires no configuration to achieve that security, and provides no unsafe features or obsolete cryptography by default.\nRustls implements TLS1.2 and TLS1.3 for both clients and servers. See the full list of protocol features\u27e85\u27e9.\n#### \u00a7\u27e86\u27e9Platform support\nWhile Rustls itself is platform independent, by default it uses `aws-lc-rs`\u27e87\u27e9 for implementing the cryptography in TLS. See the aws-lc-rs FAQ\u27e88\u27e9 for more details of the platform/architecture support constraints in aws-lc-rs.\n`ring`\u27e89\u27e9 is also available via the `ring` crate feature: see the supported `ring` target platforms\u27e810\u27e9.\nBy providing a custom instance of the `crypto::CryptoProvider`\u27e811\u27e9 struct, you can replace all cryptography dependencies of rustls. This is a route to being portable to a wider set of architectures and environments, or compliance requirements. See the `crypto::CryptoProvider`\u27e811\u27e9 documentation for more details.\nSpecifying `default-features = false` when depending on rustls will remove the implicit dependency on aws-lc-rs.\nRustls requires Rust 1.71 or later. It has an optional dependency on zlib-rs which requires 1.75 or later.\n#### \u00a7\u27e812\u27e9Cryptography providers\nSince Rustls 0.22 it has been possible to choose the provider of the cryptographic primitives that Rustls uses. This may be appealing if you have specific platform, compliance or feature requirements that aren\u2019t met by the default provider, `aws-lc-rs`\u27e87\u27e9.\nUsers that wish to customize the provider in use can do so when constructing `ClientConfig` and `ServerConfig` instances using the `with_crypto_provider` method on the respective config builder types. See the `crypto::CryptoProvider`\u27e811\u27e9 documentation for more details.\n##### \u00a7\u27e813\u27e9Built-in providers\nRustls ships with two built-in providers controlled by associated crate features:\n  * `aws-lc-rs`\u27e87\u27e9 - enabled by default, available with the `aws_lc_rs` crate feature enabled.\n  * `ring`\u27e89\u27e9 - available with the `ring` crate feature enabled.\n\n\nSee the documentation for `crypto::CryptoProvider`\u27e811\u27e9 for details on how providers are selected.\n##### \u00a7\u27e814\u27e9Third-party providers\nThe community has also started developing third-party providers for Rustls:\n  * `boring-rustls-provider`\u27e815\u27e9 - a work-in-progress provider that uses `boringssl`\u27e816\u27e9 for cryptography.\n  * `rustls-graviola`\u27e817\u27e9 - a provider that uses `graviola`\u27e818\u27e9 for cryptography.\n  * `rustls-mbedtls-provider`\u27e819\u27e9 - a provider that uses `mbedtls`\u27e820\u27e9 for cryptography.\n  * `rustls-openssl`\u27e821\u27e9 - a provider that uses OpenSSL\u27e822\u27e9 for cryptography.\n  * `rustls-rustcrypto`\u27e823\u27e9 - an experimental provider that uses the crypto primitives from `RustCrypto`\u27e824\u27e9 for cryptography.\n  * `rustls-symcrypt`\u27e825\u27e9 - a provider that uses Microsoft\u2019s SymCrypt\u27e826\u27e9 library.\n  * `rustls-wolfcrypt-provider`\u27e827\u27e9 - a work-in-progress provider that uses `wolfCrypt`\u27e828\u27e9 for cryptography.\n\n\n##### \u00a7\u27e829\u27e9Custom provider\nWe also provide a simple example of writing your own provider in the custom provider example\u27e830\u27e9. This example implements a minimal provider using parts of the `RustCrypto`\u27e824\u27e9 ecosystem.\nSee the Making a custom CryptoProvider\u27e831\u27e9 section of the documentation for more information on this topic.\n### \u00a7\u27e832\u27e9Design overview\nRustls is a low-level library. If your goal is to make HTTPS connections you may prefer to use a library built on top of Rustls like hyper\u27e833\u27e9 or ureq\u27e834\u27e9.\n#### \u00a7\u27e835\u27e9Rustls does not take care of network IO\nIt doesn\u2019t make or accept TCP connections, or do DNS, or read or write files.\nOur examples\u27e836\u27e9 directory contains demos that show how to handle I/O using the `stream::Stream`\u27e837\u27e9 helper, as well as more complex asynchronous I/O using `mio`\u27e838\u27e9. If you\u2019re already using Tokio for an async runtime you may prefer to use `tokio-rustls`\u27e839\u27e9 instead of interacting with rustls directly.\n#### \u00a7\u27e840\u27e9Rustls provides encrypted pipes\nThese are the `ServerConnection`\u27e841\u27e9 and `ClientConnection`\u27e842\u27e9 types. You supply raw TLS traffic on the left (via the `read_tls()`\u27e843\u27e9 and `write_tls()`\u27e843\u27e9 methods) and then read/write the plaintext on the right:\n```\n     TLS                  Plaintext\n     ===                  =========\n  read_tls()   +-----------------------+   reader() as io::Read\n          |            |\n     +--------->  ClientConnection  +--------->\n          |     or      |\n     <---------+  ServerConnection  <---------+\n          |            |\n  write_tls()   +-----------------------+   writer() as io::Write\n```\n\n#### \u00a7\u27e844\u27e9Rustls takes care of server certificate verification\nYou do not need to provide anything other than a set of root certificates to trust. Certificate verification cannot be turned off or disabled in the main API.\n### \u00a7\u27e845\u27e9Getting started\nThis is the minimum you need to do to make a TLS client connection.\nFirst we load some root certificates. These are used to authenticate the server. The simplest way is to depend on the `webpki_roots`\u27e846\u27e9 crate which contains the Mozilla set of root certificates.\n```\nlet root_store = rustls::RootCertStore::from_iter(\n  webpki_roots::TLS_SERVER_ROOTS\n    .iter()\n    .cloned(),\n);\n```\n\nNext, we make a `ClientConfig`. You\u2019re likely to make one of these per process, and use it for all connections made by that process.\n```\nlet config = rustls::ClientConfig::builder()\n  .with_root_certificates(root_store)\n  .with_no_client_auth();\n```\n\nNow we can make a connection. You need to provide the server\u2019s hostname so we know what to expect to find in the server\u2019s certificate.\n```\nlet rc_config = Arc::new(config);\nlet example_com = \"example.com\".try_into().unwrap();\nlet mut client = rustls::ClientConnection::new(rc_config, example_com);\n```\n\nNow you should do appropriate IO for the `client` object. If `client.wants_read()` yields true, you should call `client.read_tls()` when the underlying connection has data. Likewise, if `client.wants_write()` yields true, you should call `client.write_tls()` when the underlying connection is able to send data. You should continue doing this as long as the connection is valid.\nThe return types of `read_tls()` and `write_tls()` only tell you if the IO worked. No parsing or processing of the TLS messages is done. After each `read_tls()` you should therefore call `client.process_new_packets()` which parses and processes the messages. Any error returned from `process_new_packets` is fatal to the connection, and will tell you why. For example, if the server\u2019s certificate is expired `process_new_packets` will return `Err(InvalidCertificate(Expired))`. From this point on, `process_new_packets` will not do any new work and will return that error continually.\nYou can extract newly received data by calling `client.reader()` (which implements the `io::Read` trait). You can send data to the peer by calling `client.writer()` (which implements `io::Write` trait). Note that `client.writer().write()` buffers data you send if the TLS connection is not yet established: this is useful for writing (say) a HTTP request, but this is buffered so avoid large amounts of data.\nThe following code uses a fictional socket IO API for illustration, and does not handle errors.\n```\nuse std::io;\nuse rustls::Connection;\nclient.writer().write(b\"GET / HTTP/1.0\\r\\n\\r\\n\").unwrap();\nlet mut socket = connect(\"example.com\", 443);\nloop {\n if client.wants_read() && socket.ready_for_read() {\n  client.read_tls(&mut socket).unwrap();\n  client.process_new_packets().unwrap();\n  let mut plaintext = Vec::new();\n  client.reader().read_to_end(&mut plaintext).unwrap();\n  io::stdout().write(&plaintext).unwrap();\n }\n if client.wants_write() && socket.ready_for_write() {\n  client.write_tls(&mut socket).unwrap();\n }\n socket.wait_for_something_to_happen();\n}\n```\n\n## \u00a7\u27e847\u27e9Examples\nYou can find several client and server examples of varying complexity in the examples\u27e836\u27e9 directory, including `tlsserver-mio`\u27e848\u27e9 and `tlsclient-mio`\u27e849\u27e9 - full worked examples using `mio`\u27e838\u27e9.\n## \u00a7\u27e850\u27e9Manual\nThe rustls manual\u27e851\u27e9 explains design decisions and includes how-to guidance.\n## \u00a7\u27e852\u27e9Crate features\nHere\u2019s a list of what features are exposed by the rustls crate and what they mean.\n  * `std` (enabled by default): enable the high-level (buffered) Connection API and other functionality which relies on the `std` library.\n  * `aws_lc_rs` (enabled by default): makes the rustls crate depend on the `aws-lc-rs`\u27e87\u27e9 crate. Use `rustls::crypto::aws_lc_rs::default_provider().install_default()` to use it as the default `CryptoProvider`, or provide it explicitly when making a `ClientConfig` or `ServerConfig`.\nNote that aws-lc-rs has additional build-time dependencies like cmake. See the documentation\u27e853\u27e9 for details.\n  * `ring`: makes the rustls crate depend on the _ring_ crate for cryptography. Use `rustls::crypto::ring::default_provider().install_default()` to use it as the default `CryptoProvider`, or provide it explicitly when making a `ClientConfig` or `ServerConfig`.\n  * `fips`: enable support for FIPS140-3-approved cryptography, via the `aws-lc-rs`\u27e87\u27e9 crate. This feature enables the `aws_lc_rs` crate feature, which makes the rustls crate depend on aws-lc-rs\u27e854\u27e9. It also changes the default for `ServerConfig::require_ems`\u27e855\u27e9 and `ClientConfig::require_ems`\u27e856\u27e9.\nSee manual::_06_fips\u27e857\u27e9 for more details.\n  * `prefer-post-quantum` (enabled by default): for the `aws-lc-rs`\u27e87\u27e9-backed provider, prioritizes post-quantum secure key exchange by default (using X25519MLKEM768). This feature merely alters the order of `rustls::crypto::aws_lc_rs::DEFAULT_KX_GROUPS`. See the manual\u27e858\u27e9 for more details.\n  * `custom-provider`: disables implicit use of built-in providers (`aws-lc-rs` or `ring`). This forces applications to manually install one, for instance, when using a custom `CryptoProvider`.\n  * `tls12` (enabled by default): enable support for TLS version 1.2. Note that, due to the additive nature of Cargo features and because it is enabled by default, other crates in your dependency graph could re-enable it for your application. If you want to disable TLS 1.2 for security reasons, consider explicitly enabling TLS 1.3 only in the config builder API.\n  * `logging` (enabled by default): make the rustls crate depend on the `log` crate. rustls outputs interesting protocol-level messages at `trace!` and `debug!` level, and protocol-level errors at `warn!` and `error!` level. The log messages do not contain secret key data, and so are safe to archive without affecting session security.\n  * `read_buf`: when building with Rust Nightly, adds support for the unstable `std::io::ReadBuf` and related APIs. This reduces costs from initializing buffers. Will do nothing on non-Nightly releases.\n  * `brotli`: uses the `brotli` crate for RFC8879 certificate compression support.\n  * `zlib`: uses the `zlib-rs` crate for RFC8879 certificate compression support.\n\n\n## Re-exports\u00a7\u27e859\u27e9\n\n`pub use crate::ticketer::TicketRotator[](https://docs.rs/rustls/latest/rustls/ticketer/struct.TicketRotator.html \"struct rustls::ticketer::TicketRotator\");``std`\n\n\n`pub use crate::ticketer::TicketSwitcher[](https://docs.rs/rustls/latest/rustls/ticketer/struct.TicketSwitcher.html \"struct rustls::ticketer::TicketSwitcher\");``std` or `hashbrown`\n\n\n`pub use client::ClientConfig[](https://docs.rs/rustls/latest/rustls/client/struct.ClientConfig.html \"struct rustls::client::ClientConfig\");`\n\n\n`pub use client::ClientConnection[](https://docs.rs/rustls/latest/rustls/client/struct.ClientConnection.html \"struct rustls::client::ClientConnection\");``std`\n\n\n`pub use server::ServerConfig[](https://docs.rs/rustls/latest/rustls/server/struct.ServerConfig.html \"struct rustls::server::ServerConfig\");`\n\n\n`pub use server::ServerConnection[](https://docs.rs/rustls/latest/rustls/server/struct.ServerConnection.html \"struct rustls::server::ServerConnection\");``std`\n\n## Modules\u00a7\u27e860\u27e9\n\nclient\u27e861\u27e9\n    Items for use in a client.\n\ncompress\u27e862\u27e9\n    Certificate compression and decompression support\n\ncrypto\u27e863\u27e9\n    Crypto provider interface.\n\nffdhe_groups\u27e864\u27e9\n    This module contains parameters for FFDHE named groups as defined in RFC 7919 Appendix A\u27e865\u27e9.\n\nkernel\u27e866\u27e9\n    Kernel connection API.\n\nlock\u27e867\u27e9\n    APIs abstracting over locking primitives.\n\nmanual\u27e851\u27e9\n    This is the rustls manual.\n\npki_types\u27e868\u27e9\n    Re-exports the contents of the rustls-pki-types\u27e869\u27e9 crate for easy access\n\nquic\u27e870\u27e9\n    APIs for implementing QUIC TLS\n\nserver\u27e871\u27e9\n    Items for use in a server.\n\nsign\u27e872\u27e9\n    Message signing interfaces.\n\nticketer\u27e873\u27e9`std` or `hashbrown`\n    APIs for implementing TLS tickets\n\ntime_provider\u27e874\u27e9\n    The library\u2019s source of time.\n\nunbuffered\u27e875\u27e9\n    Unbuffered connection API\n\nversion\u27e876\u27e9\n    All defined protocol versions appear in this module.\n## Structs\u00a7\u27e877\u27e9\n\nCipherSuiteCommon\u27e878\u27e9\n    Common state for cipher suites (both for TLS 1.2 and TLS 1.3)\n\nCommonState\u27e879\u27e9\n    Connection state common to both client and server connections.\n\nConfigBuilder\u27e880\u27e9\n    A builder\u27e881\u27e9 for `ServerConfig`\u27e882\u27e9 or `ClientConfig`\u27e883\u27e9 values.\n\nConnectionCommon\u27e884\u27e9\n    Interface shared by client and server connections.\n\nDigitallySignedStruct\u27e885\u27e9\n    This type combines a `SignatureScheme`\u27e886\u27e9 and a signature payload produced with that scheme.\n\nDistinguishedName\u27e887\u27e9\n    A `DistinguishedName` is a `Vec<u8>` wrapped in internal types.\n\nExtractedSecrets\u27e888\u27e9\n    Secrets for transmitting/receiving data over a TLS session.\n\nIoState\u27e889\u27e9\n    Values of this structure are returned from `Connection::process_new_packets`\u27e890\u27e9 and tell the caller the current I/O state of the TLS connection.\n\nKeyLogFile\u27e891\u27e9`std`\n    `KeyLog`\u27e892\u27e9 implementation that opens a file whose name is given by the `SSLKEYLOGFILE` environment variable, and writes keys into it.\n\nNoKeyLog\u27e893\u27e9\n    KeyLog that does exactly nothing.\n\nOtherError\u27e894\u27e9\n    Any other error that cannot be expressed by a more specific `Error`\u27e895\u27e9 variant.\n\nReader\u27e896\u27e9`std`\n    A structure that implements `std::io::Read`\u27e897\u27e9 for reading plaintext.\n\nRootCertStore\u27e898\u27e9\n    A container for root certificates able to provide a root-of-trust for connection authentication.\n\nStream\u27e837\u27e9`std`\n    This type implements `io::Read` and `io::Write`, encapsulating a Connection `C` and an underlying transport `T`, such as a socket.\n\nStreamOwned\u27e899\u27e9`std`\n    This type implements `io::Read` and `io::Write`, encapsulating and owning a Connection `C` and an underlying blocking transport `T`, such as a socket.\n\nSupportedProtocolVersion\u27e8100\u27e9\n    A TLS protocol version supported by rustls.\n\nTls12CipherSuite\u27e8101\u27e9`tls12`\n    A TLS 1.2 cipher suite supported by rustls.\n\nTls13CipherSuite\u27e8102\u27e9\n    A TLS 1.3 cipher suite supported by rustls.\n\nWantsVerifier\u27e8103\u27e9\n    Config builder state where the caller must supply a verifier.\n\nWantsVersions\u27e8104\u27e9\n    Config builder state where the caller must supply TLS protocol versions.\n\nWriter\u27e8105\u27e9`std`\n    A structure that implements `std::io::Write`\u27e8106\u27e9 for writing plaintext.\n## Enums\u00a7\u27e8107\u27e9\n\nAlertDescription\u27e8108\u27e9\n    The `AlertDescription` TLS protocol enum. Values in this enum are taken from the various RFCs covering TLS, and are listed by IANA. The `Unknown` item is used when processing unrecognised ordinals.\n\nCertRevocationListError\u27e8109\u27e9\n    The ways in which a certificate revocation list (CRL) can be invalid.\n\nCertificateCompressionAlgorithm\u27e8110\u27e9\n    The \u201cTLS Certificate Compression Algorithm IDs\u201d TLS protocol enum. Values in this enum are taken from RFC8879\u27e8111\u27e9.\n\nCertificateError\u27e8112\u27e9\n    The ways in which certificate validators can express errors.\n\nCipherSuite\u27e8113\u27e9\n    The `CipherSuite` TLS protocol enum. Values in this enum are taken from the various RFCs covering TLS, and are listed by IANA. The `Unknown` item is used when processing unrecognised ordinals.\n\nConnection\u27e8114\u27e9`std`\n    A client or server connection.\n\nConnectionTrafficSecrets\u27e8115\u27e9\n    Secrets used to encrypt/decrypt data in a TLS session.\n\nContentType\u27e8116\u27e9\n    The `ContentType` TLS protocol enum. Values in this enum are taken from the various RFCs covering TLS, and are listed by IANA. The `Unknown` item is used when processing unrecognised ordinals.\n\nEncryptedClientHelloError\u27e8117\u27e9\n    An error that occurred while handling Encrypted Client Hello (ECH).\n\nError\u27e895\u27e9\n    rustls reports protocol errors using this type.\n\nExtendedKeyPurpose\u27e8118\u27e9\n    Extended Key Usage (EKU) purpose values.\n\nHandshakeKind\u27e8119\u27e9\n    Describes which sort of handshake happened.\n\nHandshakeType\u27e8120\u27e9\n    The `HandshakeType` TLS protocol enum. Values in this enum are taken from the various RFCs covering TLS, and are listed by IANA. The `Unknown` item is used when processing unrecognised ordinals.\n\nInconsistentKeys\u27e8121\u27e9\n    Specific failure cases from `keys_match`\u27e8122\u27e9 or a `crate::crypto::signer::SigningKey`\u27e8123\u27e9 that cannot produce a corresponding public key.\n\nInvalidMessage\u27e8124\u27e9\n    A corrupt TLS message payload that resulted in an error.\n\nNamedGroup\u27e8125\u27e9\n    The `NamedGroup` TLS protocol enum. Values in this enum are taken from the various RFCs covering TLS, and are listed by IANA. The `Unknown` item is used when processing unrecognised ordinals.\n\nPeerIncompatible\u27e8126\u27e9\n    The set of cases where we failed to make a connection because a peer doesn\u2019t support a TLS version/feature we require.\n\nPeerMisbehaved\u27e8127\u27e9\n    The set of cases where we failed to make a connection because we thought the peer was misbehaving.\n\nProtocolVersion\u27e8128\u27e9\n    The `ProtocolVersion` TLS protocol enum. Values in this enum are taken from the various RFCs covering TLS, and are listed by IANA. The `Unknown` item is used when processing unrecognised ordinals.\n\nSide\u27e8129\u27e9\n    Side of the connection.\n\nSignatureAlgorithm\u27e8130\u27e9\n    The `SignatureAlgorithm` TLS protocol enum. Values in this enum are taken from the various RFCs covering TLS, and are listed by IANA. The `Unknown` item is used when processing unrecognised ordinals.\n\nSignatureScheme\u27e886\u27e9\n    The `SignatureScheme` TLS protocol enum. Values in this enum are taken from the various RFCs covering TLS, and are listed by IANA. The `Unknown` item is used when processing unrecognised ordinals.\n\nSupportedCipherSuite\u27e8131\u27e9\n    A cipher suite supported by rustls.\n## Statics\u00a7\u27e8132\u27e9\n\nALL_VERSIONS\u27e8133\u27e9\n    A list of all the protocol versions supported by rustls.\n\nDEFAULT_VERSIONS\u27e8134\u27e9\n    The version configuration that an application should use by default.\n## Traits\u00a7\u27e8135\u27e9\n\nConfigSide\u27e8136\u27e9\n    Helper trait to abstract `ConfigBuilder`\u27e880\u27e9 over building a `ClientConfig`\u27e883\u27e9 or `ServerConfig`\u27e882\u27e9.\n\nKeyLog\u27e892\u27e9\n    This trait represents the ability to do something useful with key material, such as logging it to a file for debugging.\n\nSideData\u27e8137\u27e9\n    Data specific to the peer\u2019s side (client or server).\n",
              "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://docs.rs/rustls/latest/settings.html: Settings\n\u27e82\u27e9 https://docs.rs/rustls/latest/help.html: Help\n\u27e83\u27e9 https://docs.rs/rustls/latest/src/rustls/lib.rs.html#1-715: Source\n\u27e84\u27e9 https://docs.rs/rustls/latest/rustls/#rustls---a-modern-tls-library: \u00a7\n\u27e85\u27e9 https://docs.rs/rustls/latest/rustls/manual/_04_features/index.html: mod rustls::manual::_04_features - the full list of protocol features\n\u27e86\u27e9 https://docs.rs/rustls/latest/rustls/#platform-support: \u00a7\n\u27e87\u27e9 https://crates.io/crates/aws-lc-rs: `aws-lc-rs`\n\u27e88\u27e9 https://aws.github.io/aws-lc-rs/faq.html#can-i-run-aws-lc-rs-on-x-platform-or-architecture: the aws-lc-rs FAQ\n\u27e89\u27e9 https://crates.io/crates/ring: `ring`\n\u27e810\u27e9 https://github.com/briansmith/ring/blob/2e8363b433fa3b3962c877d9ed2e9145612f3160/include/ring-core/target.h#L18-L64: the supported `ring` target platforms\n\u27e811\u27e9 https://docs.rs/rustls/latest/rustls/crypto/struct.CryptoProvider.html: struct rustls::crypto::CryptoProvider - `crypto::CryptoProvider`\n\u27e812\u27e9 https://docs.rs/rustls/latest/rustls/#cryptography-providers: \u00a7\n\u27e813\u27e9 https://docs.rs/rustls/latest/rustls/#built-in-providers: \u00a7\n\u27e814\u27e9 https://docs.rs/rustls/latest/rustls/#third-party-providers: \u00a7\n\u27e815\u27e9 https://github.com/janrueth/boring-rustls-provider: `boring-rustls-provider`\n\u27e816\u27e9 https://github.com/google/boringssl: `boringssl`\n\u27e817\u27e9 https://crates.io/crates/rustls-graviola: `rustls-graviola`\n\u27e818\u27e9 https://github.com/ctz/graviola: `graviola`\n\u27e819\u27e9 https://github.com/fortanix/rustls-mbedtls-provider: `rustls-mbedtls-provider`\n\u27e820\u27e9 https://github.com/Mbed-TLS/mbedtls: `mbedtls`\n\u27e821\u27e9 https://github.com/tofay/rustls-openssl: `rustls-openssl`\n\u27e822\u27e9 https://openssl-library.org/: OpenSSL\n\u27e823\u27e9 https://github.com/RustCrypto/rustls-rustcrypto: `rustls-rustcrypto`\n\u27e824\u27e9 https://github.com/RustCrypto: `RustCrypto`\n\u27e825\u27e9 https://github.com/microsoft/rustls-symcrypt: `rustls-symcrypt`\n\u27e826\u27e9 https://github.com/microsoft/SymCrypt: SymCrypt\n\u27e827\u27e9 https://github.com/wolfSSL/rustls-wolfcrypt-provider: `rustls-wolfcrypt-provider`\n\u27e828\u27e9 https://www.wolfssl.com/products/wolfcrypt: `wolfCrypt`\n\u27e829\u27e9 https://docs.rs/rustls/latest/rustls/#custom-provider: \u00a7\n\u27e830\u27e9 https://github.com/rustls/rustls/tree/main/provider-example/: custom provider example\n\u27e831\u27e9 https://docs.rs/rustls/latest/rustls/crypto/struct.CryptoProvider.html#making-a-custom-cryptoprovider: Making a custom CryptoProvider\n\u27e832\u27e9 https://docs.rs/rustls/latest/rustls/#design-overview: \u00a7\n\u27e833\u27e9 https://crates.io/crates/hyper: hyper\n\u27e834\u27e9 https://crates.io/crates/ureq: ureq\n\u27e835\u27e9 https://docs.rs/rustls/latest/rustls/#rustls-does-not-take-care-of-network-io: \u00a7\n\u27e836\u27e9 https://github.com/rustls/rustls/tree/main/examples: examples\n\u27e837\u27e9 https://docs.rs/rustls/latest/rustls/struct.Stream.html: struct rustls::Stream - `stream::Stream`\n\u27e838\u27e9 https://docs.rs/mio/latest/mio/: `mio`\n\u27e839\u27e9 https://github.com/rustls/tokio-rustls: `tokio-rustls`\n\u27e840\u27e9 https://docs.rs/rustls/latest/rustls/#rustls-provides-encrypted-pipes: \u00a7\n\u27e841\u27e9 https://docs.rs/rustls/latest/rustls/server/struct.ServerConnection.html: struct rustls::server::ServerConnection - `ServerConnection`\n\u27e842\u27e9 https://docs.rs/rustls/latest/rustls/client/struct.ClientConnection.html: struct rustls::client::ClientConnection - `ClientConnection`\n\u27e843\u27e9 https://docs.rs/rustls/latest/rustls/enum.Connection.html#method.read_tls: method rustls::Connection::read_tls - `read_tls()`\n\u27e844\u27e9 https://docs.rs/rustls/latest/rustls/#rustls-takes-care-of-server-certificate-verification: \u00a7\n\u27e845\u27e9 https://docs.rs/rustls/latest/rustls/#getting-started: \u00a7\n\u27e846\u27e9 https://crates.io/crates/webpki-roots: `webpki_roots`\n\u27e847\u27e9 https://docs.rs/rustls/latest/rustls/#examples: \u00a7\n\u27e848\u27e9 https://github.com/rustls/rustls/blob/main/examples/src/bin/tlsserver-mio.rs: `tlsserver-mio`\n\u27e849\u27e9 https://github.com/rustls/rustls/blob/main/examples/src/bin/tlsclient-mio.rs: `tlsclient-mio`\n\u27e850\u27e9 https://docs.rs/rustls/latest/rustls/#manual: \u00a7\n\u27e851\u27e9 https://docs.rs/rustls/latest/rustls/manual/index.html: mod rustls::manual - rustls manual\n\u27e852\u27e9 https://docs.rs/rustls/latest/rustls/#crate-features: \u00a7\n\u27e853\u27e9 https://aws.github.io/aws-lc-rs/requirements/index.html: the documentation\n\u27e854\u27e9 https://github.com/aws/aws-lc-rs: aws-lc-rs\n\u27e855\u27e9 https://docs.rs/rustls/latest/rustls/server/struct.ServerConfig.html#structfield.require_ems: field rustls::server::ServerConfig::require_ems - `ServerConfig::require_ems`\n\u27e856\u27e9 https://docs.rs/rustls/latest/rustls/client/struct.ClientConfig.html#structfield.require_ems: field rustls::client::ClientConfig::require_ems - `ClientConfig::require_ems`\n\u27e857\u27e9 https://docs.rs/rustls/latest/rustls/manual/_06_fips/index.html: mod rustls::manual::_06_fips - manual::_06_fips\n\u27e858\u27e9 https://docs.rs/rustls/latest/rustls/manual/_05_defaults/index.html#about-the-post-quantum-secure-key-exchange-x25519mlkem768: mod rustls::manual::_05_defaults - the manual\n\u27e859\u27e9 https://docs.rs/rustls/latest/rustls/#reexports: \u00a7\n\u27e860\u27e9 https://docs.rs/rustls/latest/rustls/#modules: \u00a7\n\u27e861\u27e9 https://docs.rs/rustls/latest/rustls/client/index.html: mod rustls::client - client\n\u27e862\u27e9 https://docs.rs/rustls/latest/rustls/compress/index.html: mod rustls::compress - compress\n\u27e863\u27e9 https://docs.rs/rustls/latest/rustls/crypto/index.html: mod rustls::crypto - crypto\n\u27e864\u27e9 https://docs.rs/rustls/latest/rustls/ffdhe_groups/index.html: mod rustls::ffdhe_groups - ffdhe_groups\n\u27e865\u27e9 https://datatracker.ietf.org/doc/html/rfc7919#appendix-A: RFC 7919 Appendix A\n\u27e866\u27e9 https://docs.rs/rustls/latest/rustls/kernel/index.html: mod rustls::kernel - kernel\n\u27e867\u27e9 https://docs.rs/rustls/latest/rustls/lock/index.html: mod rustls::lock - lock\n\u27e868\u27e9 https://docs.rs/rustls/latest/rustls/pki_types/index.html: mod rustls::pki_types - pki_types\n\u27e869\u27e9 https://docs.rs/rustls-pki-types: rustls-pki-types\n\u27e870\u27e9 https://docs.rs/rustls/latest/rustls/quic/index.html: mod rustls::quic - quic\n\u27e871\u27e9 https://docs.rs/rustls/latest/rustls/server/index.html: mod rustls::server - server\n\u27e872\u27e9 https://docs.rs/rustls/latest/rustls/sign/index.html: mod rustls::sign - sign\n\u27e873\u27e9 https://docs.rs/rustls/latest/rustls/ticketer/index.html: mod rustls::ticketer - ticketer\n\u27e874\u27e9 https://docs.rs/rustls/latest/rustls/time_provider/index.html: mod rustls::time_provider - time_provider\n\u27e875\u27e9 https://docs.rs/rustls/latest/rustls/unbuffered/index.html: mod rustls::unbuffered - unbuffered\n\u27e876\u27e9 https://docs.rs/rustls/latest/rustls/version/index.html: mod rustls::version - version\n\u27e877\u27e9 https://docs.rs/rustls/latest/rustls/#structs: \u00a7\n\u27e878\u27e9 https://docs.rs/rustls/latest/rustls/struct.CipherSuiteCommon.html: struct rustls::CipherSuiteCommon - CipherSuiteCommon\n\u27e879\u27e9 https://docs.rs/rustls/latest/rustls/struct.CommonState.html: struct rustls::CommonState - CommonState\n\u27e880\u27e9 https://docs.rs/rustls/latest/rustls/struct.ConfigBuilder.html: struct rustls::ConfigBuilder - ConfigBuilder\n\u27e881\u27e9 https://rust-unofficial.github.io/patterns/patterns/creational/builder.html: builder\n\u27e882\u27e9 https://docs.rs/rustls/latest/rustls/server/struct.ServerConfig.html: struct rustls::server::ServerConfig - `ServerConfig`\n\u27e883\u27e9 https://docs.rs/rustls/latest/rustls/client/struct.ClientConfig.html: struct rustls::client::ClientConfig - `ClientConfig`\n\u27e884\u27e9 https://docs.rs/rustls/latest/rustls/struct.ConnectionCommon.html: struct rustls::ConnectionCommon - ConnectionCommon\n\u27e885\u27e9 https://docs.rs/rustls/latest/rustls/struct.DigitallySignedStruct.html: struct rustls::DigitallySignedStruct - DigitallySignedStruct\n\u27e886\u27e9 https://docs.rs/rustls/latest/rustls/enum.SignatureScheme.html: enum rustls::SignatureScheme - `SignatureScheme`\n\u27e887\u27e9 https://docs.rs/rustls/latest/rustls/struct.DistinguishedName.html: struct rustls::DistinguishedName - DistinguishedName\n\u27e888\u27e9 https://docs.rs/rustls/latest/rustls/struct.ExtractedSecrets.html: struct rustls::ExtractedSecrets - ExtractedSecrets\n\u27e889\u27e9 https://docs.rs/rustls/latest/rustls/struct.IoState.html: struct rustls::IoState - IoState\n\u27e890\u27e9 https://docs.rs/rustls/latest/rustls/enum.Connection.html#method.process_new_packets: method rustls::Connection::process_new_packets - `Connection::process_new_packets`\n\u27e891\u27e9 https://docs.rs/rustls/latest/rustls/struct.KeyLogFile.html: struct rustls::KeyLogFile - KeyLogFile\n\u27e892\u27e9 https://docs.rs/rustls/latest/rustls/trait.KeyLog.html: trait rustls::KeyLog - `KeyLog`\n\u27e893\u27e9 https://docs.rs/rustls/latest/rustls/struct.NoKeyLog.html: struct rustls::NoKeyLog - NoKeyLog\n\u27e894\u27e9 https://docs.rs/rustls/latest/rustls/struct.OtherError.html: struct rustls::OtherError - OtherError\n\u27e895\u27e9 https://docs.rs/rustls/latest/rustls/enum.Error.html: enum rustls::Error - `Error`\n\u27e896\u27e9 https://docs.rs/rustls/latest/rustls/struct.Reader.html: struct rustls::Reader - Reader\n\u27e897\u27e9 https://doc.rust-lang.org/nightly/std/io/trait.Read.html: trait std::io::Read - `std::io::Read`\n\u27e898\u27e9 https://docs.rs/rustls/latest/rustls/struct.RootCertStore.html: struct rustls::RootCertStore - RootCertStore\n\u27e899\u27e9 https://docs.rs/rustls/latest/rustls/struct.StreamOwned.html: struct rustls::StreamOwned - StreamOwned\n\u27e8100\u27e9 https://docs.rs/rustls/latest/rustls/struct.SupportedProtocolVersion.html: struct rustls::SupportedProtocolVersion - SupportedProtocolVersion\n\u27e8101\u27e9 https://docs.rs/rustls/latest/rustls/struct.Tls12CipherSuite.html: struct rustls::Tls12CipherSuite - Tls12CipherSuite\n\u27e8102\u27e9 https://docs.rs/rustls/latest/rustls/struct.Tls13CipherSuite.html: struct rustls::Tls13CipherSuite - Tls13CipherSuite\n\u27e8103\u27e9 https://docs.rs/rustls/latest/rustls/struct.WantsVerifier.html: struct rustls::WantsVerifier - WantsVerifier\n\u27e8104\u27e9 https://docs.rs/rustls/latest/rustls/struct.WantsVersions.html: struct rustls::WantsVersions - WantsVersions\n\u27e8105\u27e9 https://docs.rs/rustls/latest/rustls/struct.Writer.html: struct rustls::Writer - Writer\n\u27e8106\u27e9 https://doc.rust-lang.org/nightly/std/io/trait.Write.html: trait std::io::Write - `std::io::Write`\n\u27e8107\u27e9 https://docs.rs/rustls/latest/rustls/#enums: \u00a7\n\u27e8108\u27e9 https://docs.rs/rustls/latest/rustls/enum.AlertDescription.html: enum rustls::AlertDescription - AlertDescription\n\u27e8109\u27e9 https://docs.rs/rustls/latest/rustls/enum.CertRevocationListError.html: enum rustls::CertRevocationListError - CertRevocationListError\n\u27e8110\u27e9 https://docs.rs/rustls/latest/rustls/enum.CertificateCompressionAlgorithm.html: enum rustls::CertificateCompressionAlgorithm - CertificateCompressionAlgorithm\n\u27e8111\u27e9 https://www.rfc-editor.org/rfc/rfc8879.html#section-7.3: RFC8879\n\u27e8112\u27e9 https://docs.rs/rustls/latest/rustls/enum.CertificateError.html: enum rustls::CertificateError - CertificateError\n\u27e8113\u27e9 https://docs.rs/rustls/latest/rustls/enum.CipherSuite.html: enum rustls::CipherSuite - CipherSuite\n\u27e8114\u27e9 https://docs.rs/rustls/latest/rustls/enum.Connection.html: enum rustls::Connection - Connection\n\u27e8115\u27e9 https://docs.rs/rustls/latest/rustls/enum.ConnectionTrafficSecrets.html: enum rustls::ConnectionTrafficSecrets - ConnectionTrafficSecrets\n\u27e8116\u27e9 https://docs.rs/rustls/latest/rustls/enum.ContentType.html: enum rustls::ContentType - ContentType\n\u27e8117\u27e9 https://docs.rs/rustls/latest/rustls/enum.EncryptedClientHelloError.html: enum rustls::EncryptedClientHelloError - EncryptedClientHelloError\n\u27e8118\u27e9 https://docs.rs/rustls/latest/rustls/enum.ExtendedKeyPurpose.html: enum rustls::ExtendedKeyPurpose - ExtendedKeyPurpose\n\u27e8119\u27e9 https://docs.rs/rustls/latest/rustls/enum.HandshakeKind.html: enum rustls::HandshakeKind - HandshakeKind\n\u27e8120\u27e9 https://docs.rs/rustls/latest/rustls/enum.HandshakeType.html: enum rustls::HandshakeType - HandshakeType\n\u27e8121\u27e9 https://docs.rs/rustls/latest/rustls/enum.InconsistentKeys.html: enum rustls::InconsistentKeys - InconsistentKeys\n\u27e8122\u27e9 https://docs.rs/rustls/latest/rustls/sign/struct.CertifiedKey.html#method.keys_match: method rustls::sign::CertifiedKey::keys_match - `keys_match`\n\u27e8123\u27e9 https://docs.rs/rustls/latest/rustls/sign/trait.SigningKey.html: trait rustls::sign::SigningKey - `crate::crypto::signer::SigningKey`\n\u27e8124\u27e9 https://docs.rs/rustls/latest/rustls/enum.InvalidMessage.html: enum rustls::InvalidMessage - InvalidMessage\n\u27e8125\u27e9 https://docs.rs/rustls/latest/rustls/enum.NamedGroup.html: enum rustls::NamedGroup - NamedGroup\n\u27e8126\u27e9 https://docs.rs/rustls/latest/rustls/enum.PeerIncompatible.html: enum rustls::PeerIncompatible - PeerIncompatible\n\u27e8127\u27e9 https://docs.rs/rustls/latest/rustls/enum.PeerMisbehaved.html: enum rustls::PeerMisbehaved - PeerMisbehaved\n\u27e8128\u27e9 https://docs.rs/rustls/latest/rustls/enum.ProtocolVersion.html: enum rustls::ProtocolVersion - ProtocolVersion\n\u27e8129\u27e9 https://docs.rs/rustls/latest/rustls/enum.Side.html: enum rustls::Side - Side\n\u27e8130\u27e9 https://docs.rs/rustls/latest/rustls/enum.SignatureAlgorithm.html: enum rustls::SignatureAlgorithm - SignatureAlgorithm\n\u27e8131\u27e9 https://docs.rs/rustls/latest/rustls/enum.SupportedCipherSuite.html: enum rustls::SupportedCipherSuite - SupportedCipherSuite\n\u27e8132\u27e9 https://docs.rs/rustls/latest/rustls/#statics: \u00a7\n\u27e8133\u27e9 https://docs.rs/rustls/latest/rustls/static.ALL_VERSIONS.html: static rustls::ALL_VERSIONS - ALL_VERSIONS\n\u27e8134\u27e9 https://docs.rs/rustls/latest/rustls/static.DEFAULT_VERSIONS.html: static rustls::DEFAULT_VERSIONS - DEFAULT_VERSIONS\n\u27e8135\u27e9 https://docs.rs/rustls/latest/rustls/#traits: \u00a7\n\u27e8136\u27e9 https://docs.rs/rustls/latest/rustls/trait.ConfigSide.html: trait rustls::ConfigSide - ConfigSide\n\u27e8137\u27e9 https://docs.rs/rustls/latest/rustls/trait.SideData.html: trait rustls::SideData - SideData\n",
              "fit_markdown": "",
              "fit_html": ""
            },
            "structured_data": {},
            "quality_score": 4.0,
            "extraction_method": "crawl4ai",
            "error": null,
            "metadata": {
              "doc_type": "docs",
              "content_length": 30675,
              "has_structured_data": false,
              "crawl_success": true
            },
            "timestamp": "117964.2385824"
          },
          "lib_rs": {
            "url": "https://lib.rs/crates/rustls",
            "title": "Untitled",
            "content": {
              "raw_markdown": "###  [94 releases](https://lib.rs/crates/rustls/versions)\n0.23.28 |  Jun 16, 2025   \n---|---  \n0.23.26 |  Apr 10, 2025   \n0.23.25 |  Mar 17, 2025   \n0.23.20 |  Dec 11, 2024   \n0.5.2 |  Oct 7, 2016   \n#**1** in [Cryptography](https://lib.rs/cryptography \"Algorithms intended for securing data.\")\nDownload history 4432944/week @ 2025-03-10 4704368/week @ 2025-03-17 4755227/week @ 2025-03-24 4203893/week @ 2025-03-31 4543404/week @ 2025-04-07 4030367/week @ 2025-04-14 4021077/week @ 2025-04-21 3753210/week @ 2025-04-28 3966854/week @ 2025-05-05 4094383/week @ 2025-05-12 4057323/week @ 2025-05-19 3696716/week @ 2025-05-26 4141062/week @ 2025-06-02 4034203/week @ 2025-06-09 4167075/week @ 2025-06-16 4319981/week @ 2025-06-23\n**16,843,162** downloads per month Used in [**8,822** crates (1,177 directly)](https://lib.rs/crates/rustls/rev)\n**Apache-2.0 OR ISC OR MIT**\n1.5MB  **34K** SLoC\n![](https://img.gs/czjpqfbdkz/full/https://raw.githubusercontent.com/rustls/rustls/main/admin/rustls-logo-web.png)\nRustls is a modern TLS library written in Rust. \n# Status\nRustls is used in production at many organizations and projects. We aim to maintain reasonable API surface stability but the API may evolve as we make changes to accommodate new features or performance improvements.\nWe have a [roadmap](https://github.com/rustls/rustls/blob/12fe0c123fa7dd0d2ed46cc815d3629d9f07c335/rustls/ROADMAP.md) for our future plans. We also have [benchmarks](https://github.com/rustls/rustls/blob/12fe0c123fa7dd0d2ed46cc815d3629d9f07c335/rustls/BENCHMARKING.md) to prevent performance regressions and to let you evaluate rustls on your target hardware.\nIf you'd like to help out, please see [CONTRIBUTING.md](https://github.com/rustls/rustls/blob/12fe0c123fa7dd0d2ed46cc815d3629d9f07c335/rustls/CONTRIBUTING.md).\n[![Build Status](https://img.gs/czjpqfbdkz/full/https://github.com/rustls/rustls/actions/workflows/build.yml/badge.svg?branch=main)](https://github.com/rustls/rustls/actions/workflows/build.yml?query=branch%3Amain) [![Coverage Status \\(codecov.io\\)](https://img.gs/czjpqfbdkz/full/https://codecov.io/gh/rustls/rustls/branch/main/graph/badge.svg)](https://codecov.io/gh/rustls/rustls/) [![Documentation](https://img.gs/czjpqfbdkz/full/https://docs.rs/rustls/badge.svg)](https://docs.rs/rustls/) [![Chat](https://img.shields.io/discord/976380008299917365?logo=discord)](https://discord.gg/MCSB76RU96) [![OpenSSF Best Practices](https://img.gs/czjpqfbdkz/full/https://www.bestpractices.dev/projects/9034/badge)](https://www.bestpractices.dev/projects/9034)\n## Changelog\nThe detailed list of changes in each release can be found at <https://github.com/rustls/rustls/releases>.\n# Documentation\n<https://docs.rs/rustls/>\n# Approach\nRustls is a TLS library that aims to provide a good level of cryptographic security, requires no configuration to achieve that security, and provides no unsafe features or obsolete cryptography by default.\nRustls implements TLS1.2 and TLS1.3 for both clients and servers. See [the full list of protocol features](https://docs.rs/rustls/latest/rustls/manual/_04_features/index.html).\n### Platform support\nWhile Rustls itself is platform independent, by default it uses [``aws-lc-rs``](https://lib.rs/crates/aws-lc-rs) for implementing the cryptography in TLS. See [the aws-lc-rs FAQ](https://aws.github.io/aws-lc-rs/faq.html#can-i-run-aws-lc-rs-on-x-platform-or-architecture) for more details of the platform/architecture support constraints in aws-lc-rs.\n[``ring``](https://lib.rs/crates/ring) is also available via the ``ring`` crate feature: see [the supported ``ring`` target platforms](https://github.com/briansmith/ring/blob/2e8363b433fa3b3962c877d9ed2e9145612f3160/include/ring-core/target.h#L18-L64).\nBy providing a custom instance of the [```crypto`::``CryptoProvider``](https://docs.rs/rustls/latest/rustls/crypto/struct.CryptoProvider.html) struct, you can replace all cryptography dependencies of rustls. This is a route to being portable to a wider set of architectures and environments, or compliance requirements. See the [```crypto`::``CryptoProvider``](https://docs.rs/rustls/latest/rustls/crypto/struct.CryptoProvider.html) documentation for more details.\nSpecifying ``default`-`features `=` `false``` when depending on rustls will remove the implicit dependency on aws-lc-rs.\nRustls requires Rust 1.71 or later. It has an optional dependency on zlib-rs which requires 1.75 or later.\n### Cryptography providers\nSince Rustls 0.22 it has been possible to choose the provider of the cryptographic primitives that Rustls uses. This may be appealing if you have specific platform, compliance or feature requirements that aren't met by the default provider, [``aws-lc-rs``](https://lib.rs/crates/aws-lc-rs).\nUsers that wish to customize the provider in use can do so when constructing ``ClientConfig`` and ``ServerConfig`` instances using the ``with_crypto_provider`` method on the respective config builder types. See the [```crypto`::``CryptoProvider``](https://docs.rs/rustls/latest/rustls/crypto/struct.CryptoProvider.html) documentation for more details.\n#### Built-in providers\nRustls ships with two built-in providers controlled by associated crate features:\n  * [``aws-lc-rs``](https://lib.rs/crates/aws-lc-rs) - enabled by default, available with the ``aws_lc_rs`` crate feature enabled.\n  * [``ring``](https://lib.rs/crates/ring) - available with the ``ring`` crate feature enabled.\n\n\nSee the documentation for [```crypto`::``CryptoProvider``](https://docs.rs/rustls/latest/rustls/crypto/struct.CryptoProvider.html) for details on how providers are selected.\n#### Third-party providers\nThe community has also started developing third-party providers for Rustls:\n  * [``boring-rustls-provider``](https://github.com/janrueth/boring-rustls-provider) - a work-in-progress provider that uses [``boringssl``](https://github.com/google/boringssl) for cryptography.\n  * [``rustls-graviola``](https://lib.rs/crates/rustls-graviola) - a provider that uses [``graviola``](https://github.com/ctz/graviola) for cryptography.\n  * [``rustls-mbedtls-provider``](https://github.com/fortanix/rustls-mbedtls-provider) - a provider that uses [``mbedtls``](https://github.com/Mbed-TLS/mbedtls) for cryptography.\n  * [``rustls-openssl``](https://github.com/tofay/rustls-openssl) - a provider that uses [OpenSSL](https://openssl-library.org/) for cryptography.\n  * [``rustls-rustcrypto``](https://github.com/RustCrypto/rustls-rustcrypto) - an experimental provider that uses the crypto primitives from [``RustCrypto``](https://github.com/RustCrypto) for cryptography.\n  * [``rustls-symcrypt``](https://github.com/microsoft/rustls-symcrypt) - a provider that uses Microsoft's [SymCrypt](https://github.com/microsoft/SymCrypt) library.\n  * [``rustls-wolfcrypt-provider``](https://github.com/wolfSSL/rustls-wolfcrypt-provider) - a work-in-progress provider that uses [``wolfCrypt``](https://www.wolfssl.com/products/wolfcrypt) for cryptography.\n\n\n#### Custom provider\nWe also provide a simple example of writing your own provider in the [custom provider example](https://github.com/rustls/rustls/tree/main/provider-example/). This example implements a minimal provider using parts of the [``RustCrypto``](https://github.com/RustCrypto) ecosystem.\nSee the [Making a custom CryptoProvider](https://docs.rs/rustls/latest/rustls/crypto/struct.CryptoProvider.html#making-a-custom-cryptoprovider) section of the documentation for more information on this topic.\n# Example code\nOur [examples](https://github.com/rustls/rustls/blob/12fe0c123fa7dd0d2ed46cc815d3629d9f07c335/rustls/examples/) directory contains demos that show how to handle I/O using the [```stream`::``Stream``](https://docs.rs/rustls/latest/rustls/struct.Stream.html) helper, as well as more complex asynchronous I/O using [``mio``](https://docs.rs/mio/latest/mio/). If you're already using Tokio for an async runtime you may prefer to use [``tokio-rustls``](https://docs.rs/tokio-rustls/latest/tokio_rustls/) instead of interacting with rustls directly.\nThe [``mio``](https://docs.rs/mio/latest/mio/) based examples are the most complete, and discussed below. Users new to Rustls may prefer to look at the simple client/server examples before diving in to the more complex MIO examples.\n## Client example program\nThe MIO client example program is named ``tlsclient-mio``.\nSome sample runs:\n```\n```$``` cargo run`` --`bin` tlsclient-mio` --``` --http mozilla-modern.badssl.com`\n``HTTP/1.1``` 200 OK`\n``Server:``` nginx/1.6.2 (Ubuntu`)\n``Date:``` Wed, 01 Jun 2016 18:44:00 GMT`\n``Content-Type:``` text/html`\n``Content-Length:``` 644`\n`(```...```)`\n`\n```\n\nor\n```\n```$``` cargo run`` --`bin` tlsclient-mio` --``` --http expired.badssl.com`\n``TLS``` error: InvalidCertificate(Expired`)\n``Connection``` closed`\n`\n```\n\nRun ````cargo``` run`` --`bin` tlsclient-mio` --``` --help``` for more options.\n## Server example program\nThe MIO server example program is named ``tlsserver-mio``.\nHere's a sample run; we start a TLS echo server, then connect to it with ``openssl`` and ``tlsclient-mio``:\n```\n```$``` cargo run`` --`bin` tlsserver-mio` --``` --certs test-ca/rsa-2048/end.fullchain --key test-ca/rsa-2048/end.key -p 8443 echo ``&`\n``$``` echo hello world` `|` ``openssl``` s_client`` -`ign_eof``` -`quiet``` -`connect` localhost:8443`\n`depth``=``2` ``CN``` = ponytown RSA CA`\n``verify``` error:num=19:self signed certificate in certificate chain`\n``hello``` world`\n``^C``\n``$``` echo hello world` `|` ``cargo``` run`` --`bin` tlsclient-mio` --``` --cafile test-ca/rsa-2048/ca.cert --port 8443 localhost`\n``hello``` world`\n``^C``\n`\n```\n\nRun ````cargo``` run`` --`bin` tlsserver-mio` --``` --help``` for more options.\n# License\nRustls is distributed under the following three licenses:\n  * Apache License version 2.0.\n  * MIT license.\n  * ISC license.\n\n\nThese are included as LICENSE-APACHE, LICENSE-MIT and LICENSE-ISC respectively. You may use this software under the terms of any of these licenses, at your option.\n# Project Membership\n  * Joe Birr-Pixton ([@ctz](https://github.com/ctz), Project Founder - full-time funded by [Prossimo](https://www.memorysafety.org/initiative/rustls/))\n  * Dirkjan Ochtman ([@djc](https://github.com/djc), Co-maintainer)\n  * Daniel McCarney ([@cpu](https://github.com/cpu), Co-maintainer)\n  * Josh Aas ([@bdaehlie](https://github.com/bdaehlie), Project Management)\n\n\n# Code of conduct\nThis project adopts the [Rust Code of Conduct](https://www.rust-lang.org/policies/code-of-conduct). Please email rustls-mod@googlegroups.com to report any instance of misconduct, or if you have any comments or questions on the Code of Conduct.\n#### Dependencies\n~6\u201331MB  ~762K SLoC\n  * [aws_lc_rs](https://lib.rs/crates/rustls/features#feature-aws_lc_rs \"default feature\") [fips?](https://lib.rs/crates/rustls/features#feature-fips \"optional feature\") [aws-lc-rs](https://lib.rs/crates/aws-lc-rs \"1.12\")\n  * [logging](https://lib.rs/crates/rustls/features#feature-logging \"default feature\") [log](https://lib.rs/crates/log \"0.4.8\")\n  * [once_cell](https://lib.rs/crates/once_cell \"1.16\")[+alloc](https://lib.rs/crates/once_cell/features#feature-alloc)[+race](https://lib.rs/crates/once_cell/features#feature-race)\n  * [rustls-pki-types](https://lib.rs/crates/rustls-pki-types \"renamed pki-types, 1.11\")[+alloc](https://lib.rs/crates/rustls-pki-types/features#feature-alloc)\n  * [rustls-webpki](https://lib.rs/crates/rustls-webpki \"renamed webpki, new\") 0.103.2[+alloc](https://lib.rs/crates/rustls-webpki/features#feature-alloc)\n  * [subtle](https://lib.rs/crates/subtle \"2.5.0\")\n  * [zeroize](https://lib.rs/crates/zeroize \"1.7\")\n  * [brotli?](https://lib.rs/crates/rustls/features#feature-brotli \"optional feature\") [brotli](https://lib.rs/crates/brotli \"new\") 8.0[+std](https://lib.rs/crates/brotli/features#feature-std)\n  * [brotli?](https://lib.rs/crates/rustls/features#feature-brotli \"optional feature\") [brotli-decompressor](https://lib.rs/crates/brotli-decompressor \"new\") 5.0\n  * [ optional ](https://lib.rs/crates/rustls/features#feature-hashbrown \"hashbrown is optional feature\") [hashbrown](https://lib.rs/crates/hashbrown \"new\") 0.15[+default-hasher](https://lib.rs/crates/hashbrown/features#feature-default-hasher)[+inline-more](https://lib.rs/crates/hashbrown/features#feature-inline-more)\n  * [ optional ](https://lib.rs/crates/rustls/features#feature-ring \"ring is optional feature\") [ring](https://lib.rs/crates/ring \"new\") 0.17\n  * [zlib?](https://lib.rs/crates/rustls/features#feature-zlib \"optional feature\") [zlib-rs](https://lib.rs/crates/zlib-rs \"0.5\")\n\n\n  * build `build.rs`\n  * build  [read_buf?](https://lib.rs/crates/rustls/features#feature-read_buf \"optional feature\") [rustversion](https://lib.rs/crates/rustversion \"1.0.6\")\n  * dev  [base64](https://lib.rs/crates/base64 \"new\") 0.22\n  * dev  [bencher](https://lib.rs/crates/bencher \"0.1.5\")\n  * dev  [env_logger](https://lib.rs/crates/env_logger \"new\") 0.11\n  * dev  [hex](https://lib.rs/crates/hex \"0.4\")\n  * dev  [macro_rules_attribute](https://lib.rs/crates/macro_rules_attribute \"new\") 0.2\n  * dev  [num-bigint](https://lib.rs/crates/num-bigint \"0.4.4\")\n  * dev  [rcgen](https://lib.rs/crates/rcgen \"new\") 0.13[+pem](https://lib.rs/crates/rcgen/features#feature-pem)[+aws_lc_rs](https://lib.rs/crates/rcgen/features#feature-aws_lc_rs)\n  * dev  [serde](https://lib.rs/crates/serde \"1\")[+derive](https://lib.rs/crates/serde/features#feature-derive)\n  * dev  [serde_json](https://lib.rs/crates/serde_json \"1\")\n  * dev  [time](https://lib.rs/crates/time \"0.3.6\")\n  * dev  [webpki-roots](https://lib.rs/crates/webpki-roots \"new\") 1.0\n  * dev  [x509-parser](https://lib.rs/crates/x509-parser \"new\") 0.17\n\n\n#### [Other features](https://lib.rs/crates/rustls/features)\n  * [custom-provider](https://lib.rs/crates/rustls/features#feature-custom-provider)\n  * [prefer-post-quantum](https://lib.rs/crates/rustls/features#feature-prefer-post-quantum)\n  * [std](https://lib.rs/crates/rustls/features#feature-std)\n  * [tls12](https://lib.rs/crates/rustls/features#feature-tls12)\n\n\n  *[SLoC]: approx. additional lines of code\n",
              "markdown_with_citations": "###  94 releases\u27e81\u27e9\n0.23.28 |  Jun 16, 2025   \n---|---  \n0.23.26 |  Apr 10, 2025   \n0.23.25 |  Mar 17, 2025   \n0.23.20 |  Dec 11, 2024   \n0.5.2 |  Oct 7, 2016   \n#**1** in Cryptography\u27e82\u27e9\nDownload history 4432944/week @ 2025-03-10 4704368/week @ 2025-03-17 4755227/week @ 2025-03-24 4203893/week @ 2025-03-31 4543404/week @ 2025-04-07 4030367/week @ 2025-04-14 4021077/week @ 2025-04-21 3753210/week @ 2025-04-28 3966854/week @ 2025-05-05 4094383/week @ 2025-05-12 4057323/week @ 2025-05-19 3696716/week @ 2025-05-26 4141062/week @ 2025-06-02 4034203/week @ 2025-06-09 4167075/week @ 2025-06-16 4319981/week @ 2025-06-23\n**16,843,162** downloads per month Used in **8,822** crates (1,177 directly)\u27e83\u27e9\n**Apache-2.0 OR ISC OR MIT**\n1.5MB  **34K** SLoC\n![](https://img.gs/czjpqfbdkz/full/https://raw.githubusercontent.com/rustls/rustls/main/admin/rustls-logo-web.png)\nRustls is a modern TLS library written in Rust. \n# Status\nRustls is used in production at many organizations and projects. We aim to maintain reasonable API surface stability but the API may evolve as we make changes to accommodate new features or performance improvements.\nWe have a roadmap\u27e84\u27e9 for our future plans. We also have benchmarks\u27e85\u27e9 to prevent performance regressions and to let you evaluate rustls on your target hardware.\nIf you'd like to help out, please see CONTRIBUTING.md\u27e86\u27e9.\n![Build Status\u27e87\u27e9](https://github.com/rustls/rustls/actions/workflows/build.yml?query=branch%3Amain) ![Coverage Status \\(codecov.io\\)\u27e88\u27e9](https://codecov.io/gh/rustls/rustls/) ![Documentation\u27e89\u27e9](https://docs.rs/rustls/) ![Chat\u27e810\u27e9](https://discord.gg/MCSB76RU96) ![OpenSSF Best Practices\u27e811\u27e9](https://www.bestpractices.dev/projects/9034)\n## Changelog\nThe detailed list of changes in each release can be found at <https://github.com/rustls/rustls/releases>.\n# Documentation\n<https://docs.rs/rustls/>\n# Approach\nRustls is a TLS library that aims to provide a good level of cryptographic security, requires no configuration to achieve that security, and provides no unsafe features or obsolete cryptography by default.\nRustls implements TLS1.2 and TLS1.3 for both clients and servers. See the full list of protocol features\u27e812\u27e9.\n### Platform support\nWhile Rustls itself is platform independent, by default it uses ``aws-lc-rs``\u27e813\u27e9 for implementing the cryptography in TLS. See the aws-lc-rs FAQ\u27e814\u27e9 for more details of the platform/architecture support constraints in aws-lc-rs.\n``ring``\u27e815\u27e9 is also available via the ``ring`` crate feature: see the supported ``ring`` target platforms\u27e816\u27e9.\nBy providing a custom instance of the ```crypto`::``CryptoProvider``\u27e817\u27e9 struct, you can replace all cryptography dependencies of rustls. This is a route to being portable to a wider set of architectures and environments, or compliance requirements. See the ```crypto`::``CryptoProvider``\u27e817\u27e9 documentation for more details.\nSpecifying ``default`-`features `=` `false``` when depending on rustls will remove the implicit dependency on aws-lc-rs.\nRustls requires Rust 1.71 or later. It has an optional dependency on zlib-rs which requires 1.75 or later.\n### Cryptography providers\nSince Rustls 0.22 it has been possible to choose the provider of the cryptographic primitives that Rustls uses. This may be appealing if you have specific platform, compliance or feature requirements that aren't met by the default provider, ``aws-lc-rs``\u27e813\u27e9.\nUsers that wish to customize the provider in use can do so when constructing ``ClientConfig`` and ``ServerConfig`` instances using the ``with_crypto_provider`` method on the respective config builder types. See the ```crypto`::``CryptoProvider``\u27e817\u27e9 documentation for more details.\n#### Built-in providers\nRustls ships with two built-in providers controlled by associated crate features:\n  * ``aws-lc-rs``\u27e813\u27e9 - enabled by default, available with the ``aws_lc_rs`` crate feature enabled.\n  * ``ring``\u27e815\u27e9 - available with the ``ring`` crate feature enabled.\n\n\nSee the documentation for ```crypto`::``CryptoProvider``\u27e817\u27e9 for details on how providers are selected.\n#### Third-party providers\nThe community has also started developing third-party providers for Rustls:\n  * ``boring-rustls-provider``\u27e818\u27e9 - a work-in-progress provider that uses ``boringssl``\u27e819\u27e9 for cryptography.\n  * ``rustls-graviola``\u27e820\u27e9 - a provider that uses ``graviola``\u27e821\u27e9 for cryptography.\n  * ``rustls-mbedtls-provider``\u27e822\u27e9 - a provider that uses ``mbedtls``\u27e823\u27e9 for cryptography.\n  * ``rustls-openssl``\u27e824\u27e9 - a provider that uses OpenSSL\u27e825\u27e9 for cryptography.\n  * ``rustls-rustcrypto``\u27e826\u27e9 - an experimental provider that uses the crypto primitives from ``RustCrypto``\u27e827\u27e9 for cryptography.\n  * ``rustls-symcrypt``\u27e828\u27e9 - a provider that uses Microsoft's SymCrypt\u27e829\u27e9 library.\n  * ``rustls-wolfcrypt-provider``\u27e830\u27e9 - a work-in-progress provider that uses ``wolfCrypt``\u27e831\u27e9 for cryptography.\n\n\n#### Custom provider\nWe also provide a simple example of writing your own provider in the custom provider example\u27e832\u27e9. This example implements a minimal provider using parts of the ``RustCrypto``\u27e827\u27e9 ecosystem.\nSee the Making a custom CryptoProvider\u27e833\u27e9 section of the documentation for more information on this topic.\n# Example code\nOur examples\u27e834\u27e9 directory contains demos that show how to handle I/O using the ```stream`::``Stream``\u27e835\u27e9 helper, as well as more complex asynchronous I/O using ``mio``\u27e836\u27e9. If you're already using Tokio for an async runtime you may prefer to use ``tokio-rustls``\u27e837\u27e9 instead of interacting with rustls directly.\nThe ``mio``\u27e836\u27e9 based examples are the most complete, and discussed below. Users new to Rustls may prefer to look at the simple client/server examples before diving in to the more complex MIO examples.\n## Client example program\nThe MIO client example program is named ``tlsclient-mio``.\nSome sample runs:\n```\n```$``` cargo run`` --`bin` tlsclient-mio` --``` --http mozilla-modern.badssl.com`\n``HTTP/1.1``` 200 OK`\n``Server:``` nginx/1.6.2 (Ubuntu`)\n``Date:``` Wed, 01 Jun 2016 18:44:00 GMT`\n``Content-Type:``` text/html`\n``Content-Length:``` 644`\n`(```...```)`\n`\n```\n\nor\n```\n```$``` cargo run`` --`bin` tlsclient-mio` --``` --http expired.badssl.com`\n``TLS``` error: InvalidCertificate(Expired`)\n``Connection``` closed`\n`\n```\n\nRun ````cargo``` run`` --`bin` tlsclient-mio` --``` --help``` for more options.\n## Server example program\nThe MIO server example program is named ``tlsserver-mio``.\nHere's a sample run; we start a TLS echo server, then connect to it with ``openssl`` and ``tlsclient-mio``:\n```\n```$``` cargo run`` --`bin` tlsserver-mio` --``` --certs test-ca/rsa-2048/end.fullchain --key test-ca/rsa-2048/end.key -p 8443 echo ``&`\n``$``` echo hello world` `|` ``openssl``` s_client`` -`ign_eof``` -`quiet``` -`connect` localhost:8443`\n`depth``=``2` ``CN``` = ponytown RSA CA`\n``verify``` error:num=19:self signed certificate in certificate chain`\n``hello``` world`\n``^C``\n``$``` echo hello world` `|` ``cargo``` run`` --`bin` tlsclient-mio` --``` --cafile test-ca/rsa-2048/ca.cert --port 8443 localhost`\n``hello``` world`\n``^C``\n`\n```\n\nRun ````cargo``` run`` --`bin` tlsserver-mio` --``` --help``` for more options.\n# License\nRustls is distributed under the following three licenses:\n  * Apache License version 2.0.\n  * MIT license.\n  * ISC license.\n\n\nThese are included as LICENSE-APACHE, LICENSE-MIT and LICENSE-ISC respectively. You may use this software under the terms of any of these licenses, at your option.\n# Project Membership\n  * Joe Birr-Pixton (@ctz\u27e838\u27e9, Project Founder - full-time funded by Prossimo\u27e839\u27e9)\n  * Dirkjan Ochtman (@djc\u27e840\u27e9, Co-maintainer)\n  * Daniel McCarney (@cpu\u27e841\u27e9, Co-maintainer)\n  * Josh Aas (@bdaehlie\u27e842\u27e9, Project Management)\n\n\n# Code of conduct\nThis project adopts the Rust Code of Conduct\u27e843\u27e9. Please email rustls-mod@googlegroups.com to report any instance of misconduct, or if you have any comments or questions on the Code of Conduct.\n#### Dependencies\n~6\u201331MB  ~762K SLoC\n  * aws_lc_rs\u27e844\u27e9 fips?\u27e845\u27e9 aws-lc-rs\u27e813\u27e9\n  * logging\u27e846\u27e9 log\u27e847\u27e9\n  * once_cell\u27e848\u27e9+alloc\u27e849\u27e9+race\u27e850\u27e9\n  * rustls-pki-types\u27e851\u27e9+alloc\u27e852\u27e9\n  * rustls-webpki\u27e853\u27e9 0.103.2+alloc\u27e854\u27e9\n  * subtle\u27e855\u27e9\n  * zeroize\u27e856\u27e9\n  * brotli?\u27e857\u27e9 brotli\u27e858\u27e9 8.0+std\u27e859\u27e9\n  * brotli?\u27e857\u27e9 brotli-decompressor\u27e860\u27e9 5.0\n  *  optional \u27e861\u27e9 hashbrown\u27e862\u27e9 0.15+default-hasher\u27e863\u27e9+inline-more\u27e864\u27e9\n  *  optional \u27e865\u27e9 ring\u27e815\u27e9 0.17\n  * zlib?\u27e866\u27e9 zlib-rs\u27e867\u27e9\n\n\n  * build `build.rs`\n  * build  read_buf?\u27e868\u27e9 rustversion\u27e869\u27e9\n  * dev  base64\u27e870\u27e9 0.22\n  * dev  bencher\u27e871\u27e9\n  * dev  env_logger\u27e872\u27e9 0.11\n  * dev  hex\u27e873\u27e9\n  * dev  macro_rules_attribute\u27e874\u27e9 0.2\n  * dev  num-bigint\u27e875\u27e9\n  * dev  rcgen\u27e876\u27e9 0.13+pem\u27e877\u27e9+aws_lc_rs\u27e878\u27e9\n  * dev  serde\u27e879\u27e9+derive\u27e880\u27e9\n  * dev  serde_json\u27e881\u27e9\n  * dev  time\u27e882\u27e9\n  * dev  webpki-roots\u27e883\u27e9 1.0\n  * dev  x509-parser\u27e884\u27e9 0.17\n\n\n#### Other features\u27e885\u27e9\n  * custom-provider\u27e886\u27e9\n  * prefer-post-quantum\u27e887\u27e9\n  * std\u27e888\u27e9\n  * tls12\u27e889\u27e9\n\n\n  *[SLoC]: approx. additional lines of code\n",
              "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://lib.rs/crates/rustls/versions: 94 releases\n\u27e82\u27e9 https://lib.rs/cryptography: Algorithms intended for securing data. - Cryptography\n\u27e83\u27e9 https://lib.rs/crates/rustls/rev: **8,822** crates (1,177 directly)\n\u27e84\u27e9 https://github.com/rustls/rustls/blob/12fe0c123fa7dd0d2ed46cc815d3629d9f07c335/rustls/ROADMAP.md: roadmap\n\u27e85\u27e9 https://github.com/rustls/rustls/blob/12fe0c123fa7dd0d2ed46cc815d3629d9f07c335/rustls/BENCHMARKING.md: benchmarks\n\u27e86\u27e9 https://github.com/rustls/rustls/blob/12fe0c123fa7dd0d2ed46cc815d3629d9f07c335/rustls/CONTRIBUTING.md: CONTRIBUTING.md\n\u27e87\u27e9 https://img.gs/czjpqfbdkz/full/https://github.com/rustls/rustls/actions/workflows/build.yml/badge.svg?branch=main: ![Build Status\n\u27e88\u27e9 https://img.gs/czjpqfbdkz/full/https://codecov.io/gh/rustls/rustls/branch/main/graph/badge.svg: ![Coverage Status \\(codecov.io\\)\n\u27e89\u27e9 https://img.gs/czjpqfbdkz/full/https://docs.rs/rustls/badge.svg: ![Documentation\n\u27e810\u27e9 https://img.shields.io/discord/976380008299917365?logo=discord: ![Chat\n\u27e811\u27e9 https://img.gs/czjpqfbdkz/full/https://www.bestpractices.dev/projects/9034/badge: ![OpenSSF Best Practices\n\u27e812\u27e9 https://docs.rs/rustls/latest/rustls/manual/_04_features/index.html: the full list of protocol features\n\u27e813\u27e9 https://lib.rs/crates/aws-lc-rs: ``aws-lc-rs``\n\u27e814\u27e9 https://aws.github.io/aws-lc-rs/faq.html#can-i-run-aws-lc-rs-on-x-platform-or-architecture: the aws-lc-rs FAQ\n\u27e815\u27e9 https://lib.rs/crates/ring: ``ring``\n\u27e816\u27e9 https://github.com/briansmith/ring/blob/2e8363b433fa3b3962c877d9ed2e9145612f3160/include/ring-core/target.h#L18-L64: the supported ``ring`` target platforms\n\u27e817\u27e9 https://docs.rs/rustls/latest/rustls/crypto/struct.CryptoProvider.html: ```crypto`::``CryptoProvider``\n\u27e818\u27e9 https://github.com/janrueth/boring-rustls-provider: ``boring-rustls-provider``\n\u27e819\u27e9 https://github.com/google/boringssl: ``boringssl``\n\u27e820\u27e9 https://lib.rs/crates/rustls-graviola: ``rustls-graviola``\n\u27e821\u27e9 https://github.com/ctz/graviola: ``graviola``\n\u27e822\u27e9 https://github.com/fortanix/rustls-mbedtls-provider: ``rustls-mbedtls-provider``\n\u27e823\u27e9 https://github.com/Mbed-TLS/mbedtls: ``mbedtls``\n\u27e824\u27e9 https://github.com/tofay/rustls-openssl: ``rustls-openssl``\n\u27e825\u27e9 https://openssl-library.org/: OpenSSL\n\u27e826\u27e9 https://github.com/RustCrypto/rustls-rustcrypto: ``rustls-rustcrypto``\n\u27e827\u27e9 https://github.com/RustCrypto: ``RustCrypto``\n\u27e828\u27e9 https://github.com/microsoft/rustls-symcrypt: ``rustls-symcrypt``\n\u27e829\u27e9 https://github.com/microsoft/SymCrypt: SymCrypt\n\u27e830\u27e9 https://github.com/wolfSSL/rustls-wolfcrypt-provider: ``rustls-wolfcrypt-provider``\n\u27e831\u27e9 https://www.wolfssl.com/products/wolfcrypt: ``wolfCrypt``\n\u27e832\u27e9 https://github.com/rustls/rustls/tree/main/provider-example/: custom provider example\n\u27e833\u27e9 https://docs.rs/rustls/latest/rustls/crypto/struct.CryptoProvider.html#making-a-custom-cryptoprovider: Making a custom CryptoProvider\n\u27e834\u27e9 https://github.com/rustls/rustls/blob/12fe0c123fa7dd0d2ed46cc815d3629d9f07c335/rustls/examples/: examples\n\u27e835\u27e9 https://docs.rs/rustls/latest/rustls/struct.Stream.html: ```stream`::``Stream``\n\u27e836\u27e9 https://docs.rs/mio/latest/mio/: ``mio``\n\u27e837\u27e9 https://docs.rs/tokio-rustls/latest/tokio_rustls/: ``tokio-rustls``\n\u27e838\u27e9 https://github.com/ctz: @ctz\n\u27e839\u27e9 https://www.memorysafety.org/initiative/rustls/: Prossimo\n\u27e840\u27e9 https://github.com/djc: @djc\n\u27e841\u27e9 https://github.com/cpu: @cpu\n\u27e842\u27e9 https://github.com/bdaehlie: @bdaehlie\n\u27e843\u27e9 https://www.rust-lang.org/policies/code-of-conduct: Rust Code of Conduct\n\u27e844\u27e9 https://lib.rs/crates/rustls/features#feature-aws_lc_rs: default feature - aws_lc_rs\n\u27e845\u27e9 https://lib.rs/crates/rustls/features#feature-fips: optional feature - fips?\n\u27e846\u27e9 https://lib.rs/crates/rustls/features#feature-logging: default feature - logging\n\u27e847\u27e9 https://lib.rs/crates/log: 0.4.8 - log\n\u27e848\u27e9 https://lib.rs/crates/once_cell: 1.16 - once_cell\n\u27e849\u27e9 https://lib.rs/crates/once_cell/features#feature-alloc: +alloc\n\u27e850\u27e9 https://lib.rs/crates/once_cell/features#feature-race: +race\n\u27e851\u27e9 https://lib.rs/crates/rustls-pki-types: renamed pki-types, 1.11 - rustls-pki-types\n\u27e852\u27e9 https://lib.rs/crates/rustls-pki-types/features#feature-alloc: +alloc\n\u27e853\u27e9 https://lib.rs/crates/rustls-webpki: renamed webpki, new - rustls-webpki\n\u27e854\u27e9 https://lib.rs/crates/rustls-webpki/features#feature-alloc: +alloc\n\u27e855\u27e9 https://lib.rs/crates/subtle: 2.5.0 - subtle\n\u27e856\u27e9 https://lib.rs/crates/zeroize: 1.7 - zeroize\n\u27e857\u27e9 https://lib.rs/crates/rustls/features#feature-brotli: optional feature - brotli?\n\u27e858\u27e9 https://lib.rs/crates/brotli: new - brotli\n\u27e859\u27e9 https://lib.rs/crates/brotli/features#feature-std: +std\n\u27e860\u27e9 https://lib.rs/crates/brotli-decompressor: new - brotli-decompressor\n\u27e861\u27e9 https://lib.rs/crates/rustls/features#feature-hashbrown: hashbrown is optional feature -  optional \n\u27e862\u27e9 https://lib.rs/crates/hashbrown: new - hashbrown\n\u27e863\u27e9 https://lib.rs/crates/hashbrown/features#feature-default-hasher: +default-hasher\n\u27e864\u27e9 https://lib.rs/crates/hashbrown/features#feature-inline-more: +inline-more\n\u27e865\u27e9 https://lib.rs/crates/rustls/features#feature-ring: ring is optional feature -  optional \n\u27e866\u27e9 https://lib.rs/crates/rustls/features#feature-zlib: optional feature - zlib?\n\u27e867\u27e9 https://lib.rs/crates/zlib-rs: 0.5 - zlib-rs\n\u27e868\u27e9 https://lib.rs/crates/rustls/features#feature-read_buf: optional feature - read_buf?\n\u27e869\u27e9 https://lib.rs/crates/rustversion: 1.0.6 - rustversion\n\u27e870\u27e9 https://lib.rs/crates/base64: new - base64\n\u27e871\u27e9 https://lib.rs/crates/bencher: 0.1.5 - bencher\n\u27e872\u27e9 https://lib.rs/crates/env_logger: new - env_logger\n\u27e873\u27e9 https://lib.rs/crates/hex: 0.4 - hex\n\u27e874\u27e9 https://lib.rs/crates/macro_rules_attribute: new - macro_rules_attribute\n\u27e875\u27e9 https://lib.rs/crates/num-bigint: 0.4.4 - num-bigint\n\u27e876\u27e9 https://lib.rs/crates/rcgen: new - rcgen\n\u27e877\u27e9 https://lib.rs/crates/rcgen/features#feature-pem: +pem\n\u27e878\u27e9 https://lib.rs/crates/rcgen/features#feature-aws_lc_rs: +aws_lc_rs\n\u27e879\u27e9 https://lib.rs/crates/serde: 1 - serde\n\u27e880\u27e9 https://lib.rs/crates/serde/features#feature-derive: +derive\n\u27e881\u27e9 https://lib.rs/crates/serde_json: 1 - serde_json\n\u27e882\u27e9 https://lib.rs/crates/time: 0.3.6 - time\n\u27e883\u27e9 https://lib.rs/crates/webpki-roots: new - webpki-roots\n\u27e884\u27e9 https://lib.rs/crates/x509-parser: new - x509-parser\n\u27e885\u27e9 https://lib.rs/crates/rustls/features: Other features\n\u27e886\u27e9 https://lib.rs/crates/rustls/features#feature-custom-provider: custom-provider\n\u27e887\u27e9 https://lib.rs/crates/rustls/features#feature-prefer-post-quantum: prefer-post-quantum\n\u27e888\u27e9 https://lib.rs/crates/rustls/features#feature-std: std\n\u27e889\u27e9 https://lib.rs/crates/rustls/features#feature-tls12: tls12\n",
              "fit_markdown": "",
              "fit_html": ""
            },
            "structured_data": {},
            "quality_score": 3.0,
            "extraction_method": "crawl4ai",
            "error": null,
            "metadata": {
              "doc_type": "docs",
              "content_length": 14094,
              "has_structured_data": false,
              "crawl_success": true
            },
            "timestamp": "117964.8743911"
          }
        },
        "crate_analysis": {
          "status": "completed",
          "check": [
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#cfg-if@1.0.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\cfg-if-1.0.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "cfg_if",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\cfg-if-1.0.0\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp0sr0jhah\\rustls-0.23.28\\target\\debug\\deps\\libcfg_if-9709efac29ccc6e4.rlib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp0sr0jhah\\rustls-0.23.28\\target\\debug\\deps\\libcfg_if-9709efac29ccc6e4.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#untrusted@0.9.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\untrusted-0.9.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "untrusted",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\untrusted-0.9.0\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp0sr0jhah\\rustls-0.23.28\\target\\debug\\deps\\libuntrusted-6452109ac6963ab5.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#zeroize@1.8.1",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\zeroize-1.8.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "zeroize",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\zeroize-1.8.1\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "alloc",
                "default"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp0sr0jhah\\rustls-0.23.28\\target\\debug\\deps\\libzeroize-9775fe5b08a4aab7.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#subtle@2.6.1",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\subtle-2.6.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "subtle",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\subtle-2.6.1\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp0sr0jhah\\rustls-0.23.28\\target\\debug\\deps\\libsubtle-6a8dd217adcca8a8.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#shlex@1.3.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\shlex-1.3.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "shlex",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\shlex-1.3.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp0sr0jhah\\rustls-0.23.28\\target\\debug\\deps\\libshlex-25724775bd6ea405.rlib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp0sr0jhah\\rustls-0.23.28\\target\\debug\\deps\\libshlex-25724775bd6ea405.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#dunce@1.0.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\dunce-1.0.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "dunce",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\dunce-1.0.5\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp0sr0jhah\\rustls-0.23.28\\target\\debug\\deps\\libdunce-3643b65bb9ab8189.rlib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp0sr0jhah\\rustls-0.23.28\\target\\debug\\deps\\libdunce-3643b65bb9ab8189.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#once_cell@1.21.3",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.21.3\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "once_cell",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.21.3\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "alloc",
                "race",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp0sr0jhah\\rustls-0.23.28\\target\\debug\\deps\\libonce_cell-5a5d52b5655b1a68.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#log@0.4.27",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\log-0.4.27\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "log",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\log-0.4.27\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp0sr0jhah\\rustls-0.23.28\\target\\debug\\deps\\liblog-1786323f854c511b.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#aws-lc-rs@1.13.1",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\aws-lc-rs-1.13.1\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\aws-lc-rs-1.13.1\\build.rs",
                "edition": "2021",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "aws-lc-sys",
                "prebuilt-nasm"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp0sr0jhah\\rustls-0.23.28\\target\\debug\\build\\aws-lc-rs-3cd3d9091f23aa33\\build-script-build.exe",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp0sr0jhah\\rustls-0.23.28\\target\\debug\\build\\aws-lc-rs-3cd3d9091f23aa33\\build_script_build.pdb"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#getrandom@0.3.3",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\getrandom-0.3.3\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\getrandom-0.3.3\\build.rs",
                "edition": "2021",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp0sr0jhah\\rustls-0.23.28\\target\\debug\\build\\getrandom-f4b5fb250a4cd334\\build-script-build.exe",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp0sr0jhah\\rustls-0.23.28\\target\\debug\\build\\getrandom-f4b5fb250a4cd334\\build_script_build.pdb"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#fs_extra@1.3.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\fs_extra-1.3.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "fs_extra",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\fs_extra-1.3.0\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp0sr0jhah\\rustls-0.23.28\\target\\debug\\deps\\libfs_extra-8165a9407ad11d39.rlib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp0sr0jhah\\rustls-0.23.28\\target\\debug\\deps\\libfs_extra-8165a9407ad11d39.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmp0sr0jhah/rustls-0.23.28#rustls@0.23.28",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp0sr0jhah\\rustls-0.23.28\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp0sr0jhah\\rustls-0.23.28\\build.rs",
                "edition": "2021",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "aws-lc-rs",
                "aws_lc_rs",
                "default",
                "log",
                "logging",
                "prefer-post-quantum",
                "std",
                "tls12"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp0sr0jhah\\rustls-0.23.28\\target\\debug\\build\\rustls-f8490e85d397adca\\build-script-build.exe",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp0sr0jhah\\rustls-0.23.28\\target\\debug\\build\\rustls-f8490e85d397adca\\build_script_build.pdb"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "build-script-executed",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#getrandom@0.3.3",
              "linked_libs": [],
              "linked_paths": [],
              "cfgs": [],
              "env": [],
              "out_dir": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp0sr0jhah\\rustls-0.23.28\\target\\debug\\build\\getrandom-c3889605cb54e8da\\out"
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#rustls-pki-types@1.12.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\rustls-pki-types-1.12.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "rustls_pki_types",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\rustls-pki-types-1.12.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "alloc",
                "default",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp0sr0jhah\\rustls-0.23.28\\target\\debug\\deps\\librustls_pki_types-a4693c0bdb67cf2d.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#getrandom@0.3.3",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\getrandom-0.3.3\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "getrandom",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\getrandom-0.3.3\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp0sr0jhah\\rustls-0.23.28\\target\\debug\\deps\\libgetrandom-2481f9bb0d357062.rlib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp0sr0jhah\\rustls-0.23.28\\target\\debug\\deps\\libgetrandom-2481f9bb0d357062.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#jobserver@0.1.33",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\jobserver-0.1.33\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "jobserver",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\jobserver-0.1.33\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp0sr0jhah\\rustls-0.23.28\\target\\debug\\deps\\libjobserver-437de90e235ab2c5.rlib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp0sr0jhah\\rustls-0.23.28\\target\\debug\\deps\\libjobserver-437de90e235ab2c5.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#cmake@0.1.54",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\cmake-0.1.54\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "cmake",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\cmake-0.1.54\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp0sr0jhah\\rustls-0.23.28\\target\\debug\\deps\\libcmake-2cf0708244098cab.rlib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp0sr0jhah\\rustls-0.23.28\\target\\debug\\deps\\libcmake-2cf0708244098cab.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#cc@1.2.26",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\cc-1.2.26\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "cc",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\cc-1.2.26\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "parallel"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp0sr0jhah\\rustls-0.23.28\\target\\debug\\deps\\libcc-2b8d27f40437b72b.rlib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp0sr0jhah\\rustls-0.23.28\\target\\debug\\deps\\libcc-2b8d27f40437b72b.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#aws-lc-sys@0.29.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\aws-lc-sys-0.29.0\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-main",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\aws-lc-sys-0.29.0\\builder\\main.rs",
                "edition": "2021",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "prebuilt-nasm"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp0sr0jhah\\rustls-0.23.28\\target\\debug\\build\\aws-lc-sys-93af919ed4c82188\\build-script-main.exe",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp0sr0jhah\\rustls-0.23.28\\target\\debug\\build\\aws-lc-sys-93af919ed4c82188\\build_script_main.pdb"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "build-finished",
              "success": false
            }
          ],
          "clippy": [
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#getrandom@0.3.3",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\getrandom-0.3.3\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\getrandom-0.3.3\\build.rs",
                "edition": "2021",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp0sr0jhah\\rustls-0.23.28\\target\\debug\\build\\getrandom-f4b5fb250a4cd334\\build-script-build.exe",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp0sr0jhah\\rustls-0.23.28\\target\\debug\\build\\getrandom-f4b5fb250a4cd334\\build_script_build.pdb"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "build-script-executed",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#getrandom@0.3.3",
              "linked_libs": [],
              "linked_paths": [],
              "cfgs": [],
              "env": [],
              "out_dir": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp0sr0jhah\\rustls-0.23.28\\target\\debug\\build\\getrandom-c3889605cb54e8da\\out"
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#cfg-if@1.0.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\cfg-if-1.0.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "cfg_if",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\cfg-if-1.0.0\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp0sr0jhah\\rustls-0.23.28\\target\\debug\\deps\\libcfg_if-9709efac29ccc6e4.rlib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp0sr0jhah\\rustls-0.23.28\\target\\debug\\deps\\libcfg_if-9709efac29ccc6e4.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#shlex@1.3.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\shlex-1.3.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "shlex",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\shlex-1.3.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp0sr0jhah\\rustls-0.23.28\\target\\debug\\deps\\libshlex-25724775bd6ea405.rlib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp0sr0jhah\\rustls-0.23.28\\target\\debug\\deps\\libshlex-25724775bd6ea405.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#dunce@1.0.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\dunce-1.0.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "dunce",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\dunce-1.0.5\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp0sr0jhah\\rustls-0.23.28\\target\\debug\\deps\\libdunce-3643b65bb9ab8189.rlib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp0sr0jhah\\rustls-0.23.28\\target\\debug\\deps\\libdunce-3643b65bb9ab8189.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#fs_extra@1.3.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\fs_extra-1.3.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "fs_extra",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\fs_extra-1.3.0\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp0sr0jhah\\rustls-0.23.28\\target\\debug\\deps\\libfs_extra-8165a9407ad11d39.rlib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp0sr0jhah\\rustls-0.23.28\\target\\debug\\deps\\libfs_extra-8165a9407ad11d39.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#aws-lc-rs@1.13.1",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\aws-lc-rs-1.13.1\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\aws-lc-rs-1.13.1\\build.rs",
                "edition": "2021",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "aws-lc-sys",
                "prebuilt-nasm"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp0sr0jhah\\rustls-0.23.28\\target\\debug\\build\\aws-lc-rs-3cd3d9091f23aa33\\build-script-build.exe",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp0sr0jhah\\rustls-0.23.28\\target\\debug\\build\\aws-lc-rs-3cd3d9091f23aa33\\build_script_build.pdb"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#zeroize@1.8.1",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\zeroize-1.8.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "zeroize",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\zeroize-1.8.1\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "alloc",
                "default"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp0sr0jhah\\rustls-0.23.28\\target\\debug\\deps\\libzeroize-9775fe5b08a4aab7.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#untrusted@0.9.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\untrusted-0.9.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "untrusted",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\untrusted-0.9.0\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp0sr0jhah\\rustls-0.23.28\\target\\debug\\deps\\libuntrusted-6452109ac6963ab5.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#once_cell@1.21.3",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.21.3\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "once_cell",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.21.3\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "alloc",
                "race",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp0sr0jhah\\rustls-0.23.28\\target\\debug\\deps\\libonce_cell-5a5d52b5655b1a68.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#log@0.4.27",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\log-0.4.27\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "log",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\log-0.4.27\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp0sr0jhah\\rustls-0.23.28\\target\\debug\\deps\\liblog-1786323f854c511b.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#subtle@2.6.1",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\subtle-2.6.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "subtle",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\subtle-2.6.1\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp0sr0jhah\\rustls-0.23.28\\target\\debug\\deps\\libsubtle-6a8dd217adcca8a8.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#getrandom@0.3.3",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\getrandom-0.3.3\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "getrandom",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\getrandom-0.3.3\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp0sr0jhah\\rustls-0.23.28\\target\\debug\\deps\\libgetrandom-2481f9bb0d357062.rlib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp0sr0jhah\\rustls-0.23.28\\target\\debug\\deps\\libgetrandom-2481f9bb0d357062.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#rustls-pki-types@1.12.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\rustls-pki-types-1.12.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "rustls_pki_types",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\rustls-pki-types-1.12.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "alloc",
                "default",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp0sr0jhah\\rustls-0.23.28\\target\\debug\\deps\\librustls_pki_types-a4693c0bdb67cf2d.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#jobserver@0.1.33",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\jobserver-0.1.33\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "jobserver",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\jobserver-0.1.33\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp0sr0jhah\\rustls-0.23.28\\target\\debug\\deps\\libjobserver-437de90e235ab2c5.rlib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp0sr0jhah\\rustls-0.23.28\\target\\debug\\deps\\libjobserver-437de90e235ab2c5.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#cc@1.2.26",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\cc-1.2.26\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "cc",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\cc-1.2.26\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "parallel"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp0sr0jhah\\rustls-0.23.28\\target\\debug\\deps\\libcc-2b8d27f40437b72b.rlib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp0sr0jhah\\rustls-0.23.28\\target\\debug\\deps\\libcc-2b8d27f40437b72b.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#cmake@0.1.54",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\cmake-0.1.54\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "cmake",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\cmake-0.1.54\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp0sr0jhah\\rustls-0.23.28\\target\\debug\\deps\\libcmake-2cf0708244098cab.rlib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp0sr0jhah\\rustls-0.23.28\\target\\debug\\deps\\libcmake-2cf0708244098cab.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#aws-lc-sys@0.29.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\aws-lc-sys-0.29.0\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-main",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\aws-lc-sys-0.29.0\\builder\\main.rs",
                "edition": "2021",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "prebuilt-nasm"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp0sr0jhah\\rustls-0.23.28\\target\\debug\\build\\aws-lc-sys-93af919ed4c82188\\build-script-main.exe",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp0sr0jhah\\rustls-0.23.28\\target\\debug\\build\\aws-lc-sys-93af919ed4c82188\\build_script_main.pdb"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmp0sr0jhah/rustls-0.23.28#rustls@0.23.28",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp0sr0jhah\\rustls-0.23.28\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp0sr0jhah\\rustls-0.23.28\\build.rs",
                "edition": "2021",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "aws-lc-rs",
                "aws_lc_rs",
                "default",
                "log",
                "logging",
                "prefer-post-quantum",
                "std",
                "tls12"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp0sr0jhah\\rustls-0.23.28\\target\\debug\\build\\rustls-e19863855ffd20bd\\build-script-build.exe",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp0sr0jhah\\rustls-0.23.28\\target\\debug\\build\\rustls-e19863855ffd20bd\\build_script_build.pdb"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "build-finished",
              "success": false
            }
          ],
          "audit": {
            "database": {
              "advisory-count": 787,
              "last-commit": "7573f55ba337263f61167dbb0ea926cdc7c8eb5d",
              "last-updated": "2025-06-17T11:04:25+02:00"
            },
            "lockfile": {
              "dependency-count": 133
            },
            "settings": {
              "target_arch": [],
              "target_os": [],
              "severity": null,
              "ignore": [],
              "informational_warnings": [
                "unmaintained",
                "unsound",
                "notice"
              ]
            },
            "vulnerabilities": {
              "found": false,
              "count": 0,
              "list": []
            },
            "warnings": {
              "unmaintained": [
                {
                  "kind": "unmaintained",
                  "package": {
                    "name": "paste",
                    "version": "1.0.15",
                    "source": "registry+https://github.com/rust-lang/crates.io-index",
                    "checksum": "57c0d7b74b563b49d38dae00a0c37d4d6de9b432382b2892f0574ddcae73fd0a",
                    "replace": null
                  },
                  "advisory": {
                    "id": "RUSTSEC-2024-0436",
                    "package": "paste",
                    "title": "paste - no longer maintained",
                    "description": "The creator of the crate `paste` has stated in the [`README.md`](https://github.com/dtolnay/paste/blob/master/README.md) \nthat this project is not longer maintained as well as archived the repository",
                    "date": "2024-10-07",
                    "aliases": [],
                    "related": [],
                    "collection": "crates",
                    "categories": [],
                    "keywords": [],
                    "cvss": null,
                    "informational": "unmaintained",
                    "references": [],
                    "source": null,
                    "url": "https://github.com/dtolnay/paste",
                    "withdrawn": null,
                    "license": "CC0-1.0"
                  },
                  "affected": null,
                  "versions": {
                    "patched": [],
                    "unaffected": []
                  }
                }
              ]
            }
          },
          "note": "Crate analysis performed with stable toolchain."
        },
        "crate_metadata": {
          "name": "rustls",
          "version": "0.23.28",
          "description": "ALLOW: Positive community sentiment",
          "repository": "",
          "keywords": [],
          "categories": [],
          "readme": {
            "raw_markdown": "[](https://docs.rs/rustls/latest/rustls/all.html \"show sidebar\")\n# Crate rustlsCopy item path\n[Settings](https://docs.rs/rustls/latest/settings.html)\n[Help](https://docs.rs/rustls/latest/help.html)\nSummary[Source](https://docs.rs/rustls/latest/src/rustls/lib.rs.html#1-715)\nExpand description\n## [\u00a7](https://docs.rs/rustls/latest/rustls/#rustls---a-modern-tls-library)Rustls - a modern TLS library\nRustls is a TLS library that aims to provide a good level of cryptographic security, requires no configuration to achieve that security, and provides no unsafe features or obsolete cryptography by default.\nRustls implements TLS1.2 and TLS1.3 for both clients and servers. See [the full list of protocol features](https://docs.rs/rustls/latest/rustls/manual/_04_features/index.html \"mod rustls::manual::_04_features\").\n#### [\u00a7](https://docs.rs/rustls/latest/rustls/#platform-support)Platform support\nWhile Rustls itself is platform independent, by default it uses [`aws-lc-rs`](https://crates.io/crates/aws-lc-rs) for implementing the cryptography in TLS. See [the aws-lc-rs FAQ](https://aws.github.io/aws-lc-rs/faq.html#can-i-run-aws-lc-rs-on-x-platform-or-architecture) for more details of the platform/architecture support constraints in aws-lc-rs.\n[`ring`](https://crates.io/crates/ring) is also available via the `ring` crate feature: see [the supported `ring` target platforms](https://github.com/briansmith/ring/blob/2e8363b433fa3b3962c877d9ed2e9145612f3160/include/ring-core/target.h#L18-L64).\nBy providing a custom instance of the [`crypto::CryptoProvider`](https://docs.rs/rustls/latest/rustls/crypto/struct.CryptoProvider.html \"struct rustls::crypto::CryptoProvider\") struct, you can replace all cryptography dependencies of rustls. This is a route to being portable to a wider set of architectures and environments, or compliance requirements. See the [`crypto::CryptoProvider`](https://docs.rs/rustls/latest/rustls/crypto/struct.CryptoProvider.html \"struct rustls::crypto::CryptoProvider\") documentation for more details.\nSpecifying `default-features = false` when depending on rustls will remove the implicit dependency on aws-lc-rs.\nRustls requires Rust 1.71 or later. It has an optional dependency on zlib-rs which requires 1.75 or later.\n#### [\u00a7](https://docs.rs/rustls/latest/rustls/#cryptography-providers)Cryptography providers\nSince Rustls 0.22 it has been possible to choose the provider of the cryptographic primitives that Rustls uses. This may be appealing if you have specific platform, compliance or feature requirements that aren\u2019t met by the default provider, [`aws-lc-rs`](https://crates.io/crates/aws-lc-rs).\nUsers that wish to customize the provider in use can do so when constructing `ClientConfig` and `ServerConfig` instances using the `with_crypto_provider` method on the respective config builder types. See the [`crypto::CryptoProvider`](https://docs.rs/rustls/latest/rustls/crypto/struct.CryptoProvider.html \"struct rustls::crypto::CryptoProvider\") documentation for more details.\n##### [\u00a7](https://docs.rs/rustls/latest/rustls/#built-in-providers)Built-in providers\nRustls ships with two built-in providers controlled by associated crate features:\n  * [`aws-lc-rs`](https://crates.io/crates/aws-lc-rs) - enabled by default, available with the `aws_lc_rs` crate feature enabled.\n  * [`ring`](https://crates.io/crates/ring) - available with the `ring` crate feature enabled.\n\n\nSee the documentation for [`crypto::CryptoProvider`](https://docs.rs/rustls/latest/rustls/crypto/struct.CryptoProvider.html \"struct rustls::crypto::CryptoProvider\") for details on how providers are selected.\n##### [\u00a7](https://docs.rs/rustls/latest/rustls/#third-party-providers)Third-party providers\nThe community has also started developing third-party providers for Rustls:\n  * [`boring-rustls-provider`](https://github.com/janrueth/boring-rustls-provider) - a work-in-progress provider that uses [`boringssl`](https://github.com/google/boringssl) for cryptography.\n  * [`rustls-graviola`](https://crates.io/crates/rustls-graviola) - a provider that uses [`graviola`](https://github.com/ctz/graviola) for cryptography.\n  * [`rustls-mbedtls-provider`](https://github.com/fortanix/rustls-mbedtls-provider) - a provider that uses [`mbedtls`](https://github.com/Mbed-TLS/mbedtls) for cryptography.\n  * [`rustls-openssl`](https://github.com/tofay/rustls-openssl) - a provider that uses [OpenSSL](https://openssl-library.org/) for cryptography.\n  * [`rustls-rustcrypto`](https://github.com/RustCrypto/rustls-rustcrypto) - an experimental provider that uses the crypto primitives from [`RustCrypto`](https://github.com/RustCrypto) for cryptography.\n  * [`rustls-symcrypt`](https://github.com/microsoft/rustls-symcrypt) - a provider that uses Microsoft\u2019s [SymCrypt](https://github.com/microsoft/SymCrypt) library.\n  * [`rustls-wolfcrypt-provider`](https://github.com/wolfSSL/rustls-wolfcrypt-provider) - a work-in-progress provider that uses [`wolfCrypt`](https://www.wolfssl.com/products/wolfcrypt) for cryptography.\n\n\n##### [\u00a7](https://docs.rs/rustls/latest/rustls/#custom-provider)Custom provider\nWe also provide a simple example of writing your own provider in the [custom provider example](https://github.com/rustls/rustls/tree/main/provider-example/). This example implements a minimal provider using parts of the [`RustCrypto`](https://github.com/RustCrypto) ecosystem.\nSee the [Making a custom CryptoProvider](https://docs.rs/rustls/latest/rustls/crypto/struct.CryptoProvider.html#making-a-custom-cryptoprovider) section of the documentation for more information on this topic.\n### [\u00a7](https://docs.rs/rustls/latest/rustls/#design-overview)Design overview\nRustls is a low-level library. If your goal is to make HTTPS connections you may prefer to use a library built on top of Rustls like [hyper](https://crates.io/crates/hyper) or [ureq](https://crates.io/crates/ureq).\n#### [\u00a7](https://docs.rs/rustls/latest/rustls/#rustls-does-not-take-care-of-network-io)Rustls does not take care of network IO\nIt doesn\u2019t make or accept TCP connections, or do DNS, or read or write files.\nOur [examples](https://github.com/rustls/rustls/tree/main/examples) directory contains demos that show how to handle I/O using the [`stream::Stream`](https://docs.rs/rustls/latest/rustls/struct.Stream.html \"struct rustls::Stream\") helper, as well as more complex asynchronous I/O using [`mio`](https://docs.rs/mio/latest/mio/). If you\u2019re already using Tokio for an async runtime you may prefer to use [`tokio-rustls`](https://github.com/rustls/tokio-rustls) instead of interacting with rustls directly.\n#### [\u00a7](https://docs.rs/rustls/latest/rustls/#rustls-provides-encrypted-pipes)Rustls provides encrypted pipes\nThese are the [`ServerConnection`](https://docs.rs/rustls/latest/rustls/server/struct.ServerConnection.html \"struct rustls::server::ServerConnection\") and [`ClientConnection`](https://docs.rs/rustls/latest/rustls/client/struct.ClientConnection.html \"struct rustls::client::ClientConnection\") types. You supply raw TLS traffic on the left (via the [`read_tls()`](https://docs.rs/rustls/latest/rustls/enum.Connection.html#method.read_tls \"method rustls::Connection::read_tls\") and [`write_tls()`](https://docs.rs/rustls/latest/rustls/enum.Connection.html#method.read_tls \"method rustls::Connection::read_tls\") methods) and then read/write the plaintext on the right:\n```\n     TLS                  Plaintext\n     ===                  =========\n  read_tls()   +-----------------------+   reader() as io::Read\n          |            |\n     +--------->  ClientConnection  +--------->\n          |     or      |\n     <---------+  ServerConnection  <---------+\n          |            |\n  write_tls()   +-----------------------+   writer() as io::Write\n```\n\n#### [\u00a7](https://docs.rs/rustls/latest/rustls/#rustls-takes-care-of-server-certificate-verification)Rustls takes care of server certificate verification\nYou do not need to provide anything other than a set of root certificates to trust. Certificate verification cannot be turned off or disabled in the main API.\n### [\u00a7](https://docs.rs/rustls/latest/rustls/#getting-started)Getting started\nThis is the minimum you need to do to make a TLS client connection.\nFirst we load some root certificates. These are used to authenticate the server. The simplest way is to depend on the [`webpki_roots`](https://crates.io/crates/webpki-roots) crate which contains the Mozilla set of root certificates.\n```\nlet root_store = rustls::RootCertStore::from_iter(\n  webpki_roots::TLS_SERVER_ROOTS\n    .iter()\n    .cloned(),\n);\n```\n\nNext, we make a `ClientConfig`. You\u2019re likely to make one of these per process, and use it for all connections made by that process.\n```\nlet config = rustls::ClientConfig::builder()\n  .with_root_certificates(root_store)\n  .with_no_client_auth();\n```\n\nNow we can make a connection. You need to provide the server\u2019s hostname so we know what to expect to find in the server\u2019s certificate.\n```\nlet rc_config = Arc::new(config);\nlet example_com = \"example.com\".try_into().unwrap();\nlet mut client = rustls::ClientConnection::new(rc_config, example_com);\n```\n\nNow you should do appropriate IO for the `client` object. If `client.wants_read()` yields true, you should call `client.read_tls()` when the underlying connection has data. Likewise, if `client.wants_write()` yields true, you should call `client.write_tls()` when the underlying connection is able to send data. You should continue doing this as long as the connection is valid.\nThe return types of `read_tls()` and `write_tls()` only tell you if the IO worked. No parsing or processing of the TLS messages is done. After each `read_tls()` you should therefore call `client.process_new_packets()` which parses and processes the messages. Any error returned from `process_new_packets` is fatal to the connection, and will tell you why. For example, if the server\u2019s certificate is expired `process_new_packets` will return `Err(InvalidCertificate(Expired))`. From this point on, `process_new_packets` will not do any new work and will return that error continually.\nYou can extract newly received data by calling `client.reader()` (which implements the `io::Read` trait). You can send data to the peer by calling `client.writer()` (which implements `io::Write` trait). Note that `client.writer().write()` buffers data you send if the TLS connection is not yet established: this is useful for writing (say) a HTTP request, but this is buffered so avoid large amounts of data.\nThe following code uses a fictional socket IO API for illustration, and does not handle errors.\n```\nuse std::io;\nuse rustls::Connection;\nclient.writer().write(b\"GET / HTTP/1.0\\r\\n\\r\\n\").unwrap();\nlet mut socket = connect(\"example.com\", 443);\nloop {\n if client.wants_read() && socket.ready_for_read() {\n  client.read_tls(&mut socket).unwrap();\n  client.process_new_packets().unwrap();\n  let mut plaintext = Vec::new();\n  client.reader().read_to_end(&mut plaintext).unwrap();\n  io::stdout().write(&plaintext).unwrap();\n }\n if client.wants_write() && socket.ready_for_write() {\n  client.write_tls(&mut socket).unwrap();\n }\n socket.wait_for_something_to_happen();\n}\n```\n\n## [\u00a7](https://docs.rs/rustls/latest/rustls/#examples)Examples\nYou can find several client and server examples of varying complexity in the [examples](https://github.com/rustls/rustls/tree/main/examples) directory, including [`tlsserver-mio`](https://github.com/rustls/rustls/blob/main/examples/src/bin/tlsserver-mio.rs) and [`tlsclient-mio`](https://github.com/rustls/rustls/blob/main/examples/src/bin/tlsclient-mio.rs) - full worked examples using [`mio`](https://docs.rs/mio/latest/mio/).\n## [\u00a7](https://docs.rs/rustls/latest/rustls/#manual)Manual\nThe [rustls manual](https://docs.rs/rustls/latest/rustls/manual/index.html \"mod rustls::manual\") explains design decisions and includes how-to guidance.\n## [\u00a7](https://docs.rs/rustls/latest/rustls/#crate-features)Crate features\nHere\u2019s a list of what features are exposed by the rustls crate and what they mean.\n  * `std` (enabled by default): enable the high-level (buffered) Connection API and other functionality which relies on the `std` library.\n  * `aws_lc_rs` (enabled by default): makes the rustls crate depend on the [`aws-lc-rs`](https://crates.io/crates/aws-lc-rs) crate. Use `rustls::crypto::aws_lc_rs::default_provider().install_default()` to use it as the default `CryptoProvider`, or provide it explicitly when making a `ClientConfig` or `ServerConfig`.\nNote that aws-lc-rs has additional build-time dependencies like cmake. See [the documentation](https://aws.github.io/aws-lc-rs/requirements/index.html) for details.\n  * `ring`: makes the rustls crate depend on the _ring_ crate for cryptography. Use `rustls::crypto::ring::default_provider().install_default()` to use it as the default `CryptoProvider`, or provide it explicitly when making a `ClientConfig` or `ServerConfig`.\n  * `fips`: enable support for FIPS140-3-approved cryptography, via the [`aws-lc-rs`](https://crates.io/crates/aws-lc-rs) crate. This feature enables the `aws_lc_rs` crate feature, which makes the rustls crate depend on [aws-lc-rs](https://github.com/aws/aws-lc-rs). It also changes the default for [`ServerConfig::require_ems`](https://docs.rs/rustls/latest/rustls/server/struct.ServerConfig.html#structfield.require_ems \"field rustls::server::ServerConfig::require_ems\") and [`ClientConfig::require_ems`](https://docs.rs/rustls/latest/rustls/client/struct.ClientConfig.html#structfield.require_ems \"field rustls::client::ClientConfig::require_ems\").\nSee [manual::_06_fips](https://docs.rs/rustls/latest/rustls/manual/_06_fips/index.html \"mod rustls::manual::_06_fips\") for more details.\n  * `prefer-post-quantum` (enabled by default): for the [`aws-lc-rs`](https://crates.io/crates/aws-lc-rs)-backed provider, prioritizes post-quantum secure key exchange by default (using X25519MLKEM768). This feature merely alters the order of `rustls::crypto::aws_lc_rs::DEFAULT_KX_GROUPS`. See [the manual](https://docs.rs/rustls/latest/rustls/manual/_05_defaults/index.html#about-the-post-quantum-secure-key-exchange-x25519mlkem768 \"mod rustls::manual::_05_defaults\") for more details.\n  * `custom-provider`: disables implicit use of built-in providers (`aws-lc-rs` or `ring`). This forces applications to manually install one, for instance, when using a custom `CryptoProvider`.\n  * `tls12` (enabled by default): enable support for TLS version 1.2. Note that, due to the additive nature of Cargo features and because it is enabled by default, other crates in your dependency graph could re-enable it for your application. If you want to disable TLS 1.2 for security reasons, consider explicitly enabling TLS 1.3 only in the config builder API.\n  * `logging` (enabled by default): make the rustls crate depend on the `log` crate. rustls outputs interesting protocol-level messages at `trace!` and `debug!` level, and protocol-level errors at `warn!` and `error!` level. The log messages do not contain secret key data, and so are safe to archive without affecting session security.\n  * `read_buf`: when building with Rust Nightly, adds support for the unstable `std::io::ReadBuf` and related APIs. This reduces costs from initializing buffers. Will do nothing on non-Nightly releases.\n  * `brotli`: uses the `brotli` crate for RFC8879 certificate compression support.\n  * `zlib`: uses the `zlib-rs` crate for RFC8879 certificate compression support.\n\n\n## Re-exports[\u00a7](https://docs.rs/rustls/latest/rustls/#reexports)\n\n`pub use crate::ticketer::TicketRotator[](https://docs.rs/rustls/latest/rustls/ticketer/struct.TicketRotator.html \"struct rustls::ticketer::TicketRotator\");``std`\n\n\n`pub use crate::ticketer::TicketSwitcher[](https://docs.rs/rustls/latest/rustls/ticketer/struct.TicketSwitcher.html \"struct rustls::ticketer::TicketSwitcher\");``std` or `hashbrown`\n\n\n`pub use client::ClientConfig[](https://docs.rs/rustls/latest/rustls/client/struct.ClientConfig.html \"struct rustls::client::ClientConfig\");`\n\n\n`pub use client::ClientConnection[](https://docs.rs/rustls/latest/rustls/client/struct.ClientConnection.html \"struct rustls::client::ClientConnection\");``std`\n\n\n`pub use server::ServerConfig[](https://docs.rs/rustls/latest/rustls/server/struct.ServerConfig.html \"struct rustls::server::ServerConfig\");`\n\n\n`pub use server::ServerConnection[](https://docs.rs/rustls/latest/rustls/server/struct.ServerConnection.html \"struct rustls::server::ServerConnection\");``std`\n\n## Modules[\u00a7](https://docs.rs/rustls/latest/rustls/#modules)\n\n[client](https://docs.rs/rustls/latest/rustls/client/index.html \"mod rustls::client\")\n    Items for use in a client.\n\n[compress](https://docs.rs/rustls/latest/rustls/compress/index.html \"mod rustls::compress\")\n    Certificate compression and decompression support\n\n[crypto](https://docs.rs/rustls/latest/rustls/crypto/index.html \"mod rustls::crypto\")\n    Crypto provider interface.\n\n[ffdhe_groups](https://docs.rs/rustls/latest/rustls/ffdhe_groups/index.html \"mod rustls::ffdhe_groups\")\n    This module contains parameters for FFDHE named groups as defined in [RFC 7919 Appendix A](https://datatracker.ietf.org/doc/html/rfc7919#appendix-A).\n\n[kernel](https://docs.rs/rustls/latest/rustls/kernel/index.html \"mod rustls::kernel\")\n    Kernel connection API.\n\n[lock](https://docs.rs/rustls/latest/rustls/lock/index.html \"mod rustls::lock\")\n    APIs abstracting over locking primitives.\n\n[manual](https://docs.rs/rustls/latest/rustls/manual/index.html \"mod rustls::manual\")\n    This is the rustls manual.\n\n[pki_types](https://docs.rs/rustls/latest/rustls/pki_types/index.html \"mod rustls::pki_types\")\n    Re-exports the contents of the [rustls-pki-types](https://docs.rs/rustls-pki-types) crate for easy access\n\n[quic](https://docs.rs/rustls/latest/rustls/quic/index.html \"mod rustls::quic\")\n    APIs for implementing QUIC TLS\n\n[server](https://docs.rs/rustls/latest/rustls/server/index.html \"mod rustls::server\")\n    Items for use in a server.\n\n[sign](https://docs.rs/rustls/latest/rustls/sign/index.html \"mod rustls::sign\")\n    Message signing interfaces.\n\n[ticketer](https://docs.rs/rustls/latest/rustls/ticketer/index.html \"mod rustls::ticketer\")`std` or `hashbrown`\n    APIs for implementing TLS tickets\n\n[time_provider](https://docs.rs/rustls/latest/rustls/time_provider/index.html \"mod rustls::time_provider\")\n    The library\u2019s source of time.\n\n[unbuffered](https://docs.rs/rustls/latest/rustls/unbuffered/index.html \"mod rustls::unbuffered\")\n    Unbuffered connection API\n\n[version](https://docs.rs/rustls/latest/rustls/version/index.html \"mod rustls::version\")\n    All defined protocol versions appear in this module.\n## Structs[\u00a7](https://docs.rs/rustls/latest/rustls/#structs)\n\n[CipherSuiteCommon](https://docs.rs/rustls/latest/rustls/struct.CipherSuiteCommon.html \"struct rustls::CipherSuiteCommon\")\n    Common state for cipher suites (both for TLS 1.2 and TLS 1.3)\n\n[CommonState](https://docs.rs/rustls/latest/rustls/struct.CommonState.html \"struct rustls::CommonState\")\n    Connection state common to both client and server connections.\n\n[ConfigBuilder](https://docs.rs/rustls/latest/rustls/struct.ConfigBuilder.html \"struct rustls::ConfigBuilder\")\n    A [builder](https://rust-unofficial.github.io/patterns/patterns/creational/builder.html) for [`ServerConfig`](https://docs.rs/rustls/latest/rustls/server/struct.ServerConfig.html \"struct rustls::server::ServerConfig\") or [`ClientConfig`](https://docs.rs/rustls/latest/rustls/client/struct.ClientConfig.html \"struct rustls::client::ClientConfig\") values.\n\n[ConnectionCommon](https://docs.rs/rustls/latest/rustls/struct.ConnectionCommon.html \"struct rustls::ConnectionCommon\")\n    Interface shared by client and server connections.\n\n[DigitallySignedStruct](https://docs.rs/rustls/latest/rustls/struct.DigitallySignedStruct.html \"struct rustls::DigitallySignedStruct\")\n    This type combines a [`SignatureScheme`](https://docs.rs/rustls/latest/rustls/enum.SignatureScheme.html \"enum rustls::SignatureScheme\") and a signature payload produced with that scheme.\n\n[DistinguishedName](https://docs.rs/rustls/latest/rustls/struct.DistinguishedName.html \"struct rustls::DistinguishedName\")\n    A `DistinguishedName` is a `Vec<u8>` wrapped in internal types.\n\n[ExtractedSecrets](https://docs.rs/rustls/latest/rustls/struct.ExtractedSecrets.html \"struct rustls::ExtractedSecrets\")\n    Secrets for transmitting/receiving data over a TLS session.\n\n[IoState](https://docs.rs/rustls/latest/rustls/struct.IoState.html \"struct rustls::IoState\")\n    Values of this structure are returned from [`Connection::process_new_packets`](https://docs.rs/rustls/latest/rustls/enum.Connection.html#method.process_new_packets \"method rustls::Connection::process_new_packets\") and tell the caller the current I/O state of the TLS connection.\n\n[KeyLogFile](https://docs.rs/rustls/latest/rustls/struct.KeyLogFile.html \"struct rustls::KeyLogFile\")`std`\n    [`KeyLog`](https://docs.rs/rustls/latest/rustls/trait.KeyLog.html \"trait rustls::KeyLog\") implementation that opens a file whose name is given by the `SSLKEYLOGFILE` environment variable, and writes keys into it.\n\n[NoKeyLog](https://docs.rs/rustls/latest/rustls/struct.NoKeyLog.html \"struct rustls::NoKeyLog\")\n    KeyLog that does exactly nothing.\n\n[OtherError](https://docs.rs/rustls/latest/rustls/struct.OtherError.html \"struct rustls::OtherError\")\n    Any other error that cannot be expressed by a more specific [`Error`](https://docs.rs/rustls/latest/rustls/enum.Error.html \"enum rustls::Error\") variant.\n\n[Reader](https://docs.rs/rustls/latest/rustls/struct.Reader.html \"struct rustls::Reader\")`std`\n    A structure that implements [`std::io::Read`](https://doc.rust-lang.org/nightly/std/io/trait.Read.html \"trait std::io::Read\") for reading plaintext.\n\n[RootCertStore](https://docs.rs/rustls/latest/rustls/struct.RootCertStore.html \"struct rustls::RootCertStore\")\n    A container for root certificates able to provide a root-of-trust for connection authentication.\n\n[Stream](https://docs.rs/rustls/latest/rustls/struct.Stream.html \"struct rustls::Stream\")`std`\n    This type implements `io::Read` and `io::Write`, encapsulating a Connection `C` and an underlying transport `T`, such as a socket.\n\n[StreamOwned](https://docs.rs/rustls/latest/rustls/struct.StreamOwned.html \"struct rustls::StreamOwned\")`std`\n    This type implements `io::Read` and `io::Write`, encapsulating and owning a Connection `C` and an underlying blocking transport `T`, such as a socket.\n\n[SupportedProtocolVersion](https://docs.rs/rustls/latest/rustls/struct.SupportedProtocolVersion.html \"struct rustls::SupportedProtocolVersion\")\n    A TLS protocol version supported by rustls.\n\n[Tls12CipherSuite](https://docs.rs/rustls/latest/rustls/struct.Tls12CipherSuite.html \"struct rustls::Tls12CipherSuite\")`tls12`\n    A TLS 1.2 cipher suite supported by rustls.\n\n[Tls13CipherSuite](https://docs.rs/rustls/latest/rustls/struct.Tls13CipherSuite.html \"struct rustls::Tls13CipherSuite\")\n    A TLS 1.3 cipher suite supported by rustls.\n\n[WantsVerifier](https://docs.rs/rustls/latest/rustls/struct.WantsVerifier.html \"struct rustls::WantsVerifier\")\n    Config builder state where the caller must supply a verifier.\n\n[WantsVersions](https://docs.rs/rustls/latest/rustls/struct.WantsVersions.html \"struct rustls::WantsVersions\")\n    Config builder state where the caller must supply TLS protocol versions.\n\n[Writer](https://docs.rs/rustls/latest/rustls/struct.Writer.html \"struct rustls::Writer\")`std`\n    A structure that implements [`std::io::Write`](https://doc.rust-lang.org/nightly/std/io/trait.Write.html \"trait std::io::Write\") for writing plaintext.\n## Enums[\u00a7](https://docs.rs/rustls/latest/rustls/#enums)\n\n[AlertDescription](https://docs.rs/rustls/latest/rustls/enum.AlertDescription.html \"enum rustls::AlertDescription\")\n    The `AlertDescription` TLS protocol enum. Values in this enum are taken from the various RFCs covering TLS, and are listed by IANA. The `Unknown` item is used when processing unrecognised ordinals.\n\n[CertRevocationListError](https://docs.rs/rustls/latest/rustls/enum.CertRevocationListError.html \"enum rustls::CertRevocationListError\")\n    The ways in which a certificate revocation list (CRL) can be invalid.\n\n[CertificateCompressionAlgorithm](https://docs.rs/rustls/latest/rustls/enum.CertificateCompressionAlgorithm.html \"enum rustls::CertificateCompressionAlgorithm\")\n    The \u201cTLS Certificate Compression Algorithm IDs\u201d TLS protocol enum. Values in this enum are taken from [RFC8879](https://www.rfc-editor.org/rfc/rfc8879.html#section-7.3).\n\n[CertificateError](https://docs.rs/rustls/latest/rustls/enum.CertificateError.html \"enum rustls::CertificateError\")\n    The ways in which certificate validators can express errors.\n\n[CipherSuite](https://docs.rs/rustls/latest/rustls/enum.CipherSuite.html \"enum rustls::CipherSuite\")\n    The `CipherSuite` TLS protocol enum. Values in this enum are taken from the various RFCs covering TLS, and are listed by IANA. The `Unknown` item is used when processing unrecognised ordinals.\n\n[Connection](https://docs.rs/rustls/latest/rustls/enum.Connection.html \"enum rustls::Connection\")`std`\n    A client or server connection.\n\n[ConnectionTrafficSecrets](https://docs.rs/rustls/latest/rustls/enum.ConnectionTrafficSecrets.html \"enum rustls::ConnectionTrafficSecrets\")\n    Secrets used to encrypt/decrypt data in a TLS session.\n\n[ContentType](https://docs.rs/rustls/latest/rustls/enum.ContentType.html \"enum rustls::ContentType\")\n    The `ContentType` TLS protocol enum. Values in this enum are taken from the various RFCs covering TLS, and are listed by IANA. The `Unknown` item is used when processing unrecognised ordinals.\n\n[EncryptedClientHelloError](https://docs.rs/rustls/latest/rustls/enum.EncryptedClientHelloError.html \"enum rustls::EncryptedClientHelloError\")\n    An error that occurred while handling Encrypted Client Hello (ECH).\n\n[Error](https://docs.rs/rustls/latest/rustls/enum.Error.html \"enum rustls::Error\")\n    rustls reports protocol errors using this type.\n\n[ExtendedKeyPurpose](https://docs.rs/rustls/latest/rustls/enum.ExtendedKeyPurpose.html \"enum rustls::ExtendedKeyPurpose\")\n    Extended Key Usage (EKU) purpose values.\n\n[HandshakeKind](https://docs.rs/rustls/latest/rustls/enum.HandshakeKind.html \"enum rustls::HandshakeKind\")\n    Describes which sort of handshake happened.\n\n[HandshakeType](https://docs.rs/rustls/latest/rustls/enum.HandshakeType.html \"enum rustls::HandshakeType\")\n    The `HandshakeType` TLS protocol enum. Values in this enum are taken from the various RFCs covering TLS, and are listed by IANA. The `Unknown` item is used when processing unrecognised ordinals.\n\n[InconsistentKeys](https://docs.rs/rustls/latest/rustls/enum.InconsistentKeys.html \"enum rustls::InconsistentKeys\")\n    Specific failure cases from [`keys_match`](https://docs.rs/rustls/latest/rustls/sign/struct.CertifiedKey.html#method.keys_match \"method rustls::sign::CertifiedKey::keys_match\") or a [`crate::crypto::signer::SigningKey`](https://docs.rs/rustls/latest/rustls/sign/trait.SigningKey.html \"trait rustls::sign::SigningKey\") that cannot produce a corresponding public key.\n\n[InvalidMessage](https://docs.rs/rustls/latest/rustls/enum.InvalidMessage.html \"enum rustls::InvalidMessage\")\n    A corrupt TLS message payload that resulted in an error.\n\n[NamedGroup](https://docs.rs/rustls/latest/rustls/enum.NamedGroup.html \"enum rustls::NamedGroup\")\n    The `NamedGroup` TLS protocol enum. Values in this enum are taken from the various RFCs covering TLS, and are listed by IANA. The `Unknown` item is used when processing unrecognised ordinals.\n\n[PeerIncompatible](https://docs.rs/rustls/latest/rustls/enum.PeerIncompatible.html \"enum rustls::PeerIncompatible\")\n    The set of cases where we failed to make a connection because a peer doesn\u2019t support a TLS version/feature we require.\n\n[PeerMisbehaved](https://docs.rs/rustls/latest/rustls/enum.PeerMisbehaved.html \"enum rustls::PeerMisbehaved\")\n    The set of cases where we failed to make a connection because we thought the peer was misbehaving.\n\n[ProtocolVersion](https://docs.rs/rustls/latest/rustls/enum.ProtocolVersion.html \"enum rustls::ProtocolVersion\")\n    The `ProtocolVersion` TLS protocol enum. Values in this enum are taken from the various RFCs covering TLS, and are listed by IANA. The `Unknown` item is used when processing unrecognised ordinals.\n\n[Side](https://docs.rs/rustls/latest/rustls/enum.Side.html \"enum rustls::Side\")\n    Side of the connection.\n\n[SignatureAlgorithm](https://docs.rs/rustls/latest/rustls/enum.SignatureAlgorithm.html \"enum rustls::SignatureAlgorithm\")\n    The `SignatureAlgorithm` TLS protocol enum. Values in this enum are taken from the various RFCs covering TLS, and are listed by IANA. The `Unknown` item is used when processing unrecognised ordinals.\n\n[SignatureScheme](https://docs.rs/rustls/latest/rustls/enum.SignatureScheme.html \"enum rustls::SignatureScheme\")\n    The `SignatureScheme` TLS protocol enum. Values in this enum are taken from the various RFCs covering TLS, and are listed by IANA. The `Unknown` item is used when processing unrecognised ordinals.\n\n[SupportedCipherSuite](https://docs.rs/rustls/latest/rustls/enum.SupportedCipherSuite.html \"enum rustls::SupportedCipherSuite\")\n    A cipher suite supported by rustls.\n## Statics[\u00a7](https://docs.rs/rustls/latest/rustls/#statics)\n\n[ALL_VERSIONS](https://docs.rs/rustls/latest/rustls/static.ALL_VERSIONS.html \"static rustls::ALL_VERSIONS\")\n    A list of all the protocol versions supported by rustls.\n\n[DEFAULT_VERSIONS](https://docs.rs/rustls/latest/rustls/static.DEFAULT_VERSIONS.html \"static rustls::DEFAULT_VERSIONS\")\n    The version configuration that an application should use by default.\n## Traits[\u00a7](https://docs.rs/rustls/latest/rustls/#traits)\n\n[ConfigSide](https://docs.rs/rustls/latest/rustls/trait.ConfigSide.html \"trait rustls::ConfigSide\")\n    Helper trait to abstract [`ConfigBuilder`](https://docs.rs/rustls/latest/rustls/struct.ConfigBuilder.html \"struct rustls::ConfigBuilder\") over building a [`ClientConfig`](https://docs.rs/rustls/latest/rustls/client/struct.ClientConfig.html \"struct rustls::client::ClientConfig\") or [`ServerConfig`](https://docs.rs/rustls/latest/rustls/server/struct.ServerConfig.html \"struct rustls::server::ServerConfig\").\n\n[KeyLog](https://docs.rs/rustls/latest/rustls/trait.KeyLog.html \"trait rustls::KeyLog\")\n    This trait represents the ability to do something useful with key material, such as logging it to a file for debugging.\n\n[SideData](https://docs.rs/rustls/latest/rustls/trait.SideData.html \"trait rustls::SideData\")\n    Data specific to the peer\u2019s side (client or server).\n",
            "markdown_with_citations": "[](https://docs.rs/rustls/latest/rustls/all.html \"show sidebar\")\n# Crate rustlsCopy item path\nSettings\u27e81\u27e9\nHelp\u27e82\u27e9\nSummarySource\u27e83\u27e9\nExpand description\n## \u00a7\u27e84\u27e9Rustls - a modern TLS library\nRustls is a TLS library that aims to provide a good level of cryptographic security, requires no configuration to achieve that security, and provides no unsafe features or obsolete cryptography by default.\nRustls implements TLS1.2 and TLS1.3 for both clients and servers. See the full list of protocol features\u27e85\u27e9.\n#### \u00a7\u27e86\u27e9Platform support\nWhile Rustls itself is platform independent, by default it uses `aws-lc-rs`\u27e87\u27e9 for implementing the cryptography in TLS. See the aws-lc-rs FAQ\u27e88\u27e9 for more details of the platform/architecture support constraints in aws-lc-rs.\n`ring`\u27e89\u27e9 is also available via the `ring` crate feature: see the supported `ring` target platforms\u27e810\u27e9.\nBy providing a custom instance of the `crypto::CryptoProvider`\u27e811\u27e9 struct, you can replace all cryptography dependencies of rustls. This is a route to being portable to a wider set of architectures and environments, or compliance requirements. See the `crypto::CryptoProvider`\u27e811\u27e9 documentation for more details.\nSpecifying `default-features = false` when depending on rustls will remove the implicit dependency on aws-lc-rs.\nRustls requires Rust 1.71 or later. It has an optional dependency on zlib-rs which requires 1.75 or later.\n#### \u00a7\u27e812\u27e9Cryptography providers\nSince Rustls 0.22 it has been possible to choose the provider of the cryptographic primitives that Rustls uses. This may be appealing if you have specific platform, compliance or feature requirements that aren\u2019t met by the default provider, `aws-lc-rs`\u27e87\u27e9.\nUsers that wish to customize the provider in use can do so when constructing `ClientConfig` and `ServerConfig` instances using the `with_crypto_provider` method on the respective config builder types. See the `crypto::CryptoProvider`\u27e811\u27e9 documentation for more details.\n##### \u00a7\u27e813\u27e9Built-in providers\nRustls ships with two built-in providers controlled by associated crate features:\n  * `aws-lc-rs`\u27e87\u27e9 - enabled by default, available with the `aws_lc_rs` crate feature enabled.\n  * `ring`\u27e89\u27e9 - available with the `ring` crate feature enabled.\n\n\nSee the documentation for `crypto::CryptoProvider`\u27e811\u27e9 for details on how providers are selected.\n##### \u00a7\u27e814\u27e9Third-party providers\nThe community has also started developing third-party providers for Rustls:\n  * `boring-rustls-provider`\u27e815\u27e9 - a work-in-progress provider that uses `boringssl`\u27e816\u27e9 for cryptography.\n  * `rustls-graviola`\u27e817\u27e9 - a provider that uses `graviola`\u27e818\u27e9 for cryptography.\n  * `rustls-mbedtls-provider`\u27e819\u27e9 - a provider that uses `mbedtls`\u27e820\u27e9 for cryptography.\n  * `rustls-openssl`\u27e821\u27e9 - a provider that uses OpenSSL\u27e822\u27e9 for cryptography.\n  * `rustls-rustcrypto`\u27e823\u27e9 - an experimental provider that uses the crypto primitives from `RustCrypto`\u27e824\u27e9 for cryptography.\n  * `rustls-symcrypt`\u27e825\u27e9 - a provider that uses Microsoft\u2019s SymCrypt\u27e826\u27e9 library.\n  * `rustls-wolfcrypt-provider`\u27e827\u27e9 - a work-in-progress provider that uses `wolfCrypt`\u27e828\u27e9 for cryptography.\n\n\n##### \u00a7\u27e829\u27e9Custom provider\nWe also provide a simple example of writing your own provider in the custom provider example\u27e830\u27e9. This example implements a minimal provider using parts of the `RustCrypto`\u27e824\u27e9 ecosystem.\nSee the Making a custom CryptoProvider\u27e831\u27e9 section of the documentation for more information on this topic.\n### \u00a7\u27e832\u27e9Design overview\nRustls is a low-level library. If your goal is to make HTTPS connections you may prefer to use a library built on top of Rustls like hyper\u27e833\u27e9 or ureq\u27e834\u27e9.\n#### \u00a7\u27e835\u27e9Rustls does not take care of network IO\nIt doesn\u2019t make or accept TCP connections, or do DNS, or read or write files.\nOur examples\u27e836\u27e9 directory contains demos that show how to handle I/O using the `stream::Stream`\u27e837\u27e9 helper, as well as more complex asynchronous I/O using `mio`\u27e838\u27e9. If you\u2019re already using Tokio for an async runtime you may prefer to use `tokio-rustls`\u27e839\u27e9 instead of interacting with rustls directly.\n#### \u00a7\u27e840\u27e9Rustls provides encrypted pipes\nThese are the `ServerConnection`\u27e841\u27e9 and `ClientConnection`\u27e842\u27e9 types. You supply raw TLS traffic on the left (via the `read_tls()`\u27e843\u27e9 and `write_tls()`\u27e843\u27e9 methods) and then read/write the plaintext on the right:\n```\n     TLS                  Plaintext\n     ===                  =========\n  read_tls()   +-----------------------+   reader() as io::Read\n          |            |\n     +--------->  ClientConnection  +--------->\n          |     or      |\n     <---------+  ServerConnection  <---------+\n          |            |\n  write_tls()   +-----------------------+   writer() as io::Write\n```\n\n#### \u00a7\u27e844\u27e9Rustls takes care of server certificate verification\nYou do not need to provide anything other than a set of root certificates to trust. Certificate verification cannot be turned off or disabled in the main API.\n### \u00a7\u27e845\u27e9Getting started\nThis is the minimum you need to do to make a TLS client connection.\nFirst we load some root certificates. These are used to authenticate the server. The simplest way is to depend on the `webpki_roots`\u27e846\u27e9 crate which contains the Mozilla set of root certificates.\n```\nlet root_store = rustls::RootCertStore::from_iter(\n  webpki_roots::TLS_SERVER_ROOTS\n    .iter()\n    .cloned(),\n);\n```\n\nNext, we make a `ClientConfig`. You\u2019re likely to make one of these per process, and use it for all connections made by that process.\n```\nlet config = rustls::ClientConfig::builder()\n  .with_root_certificates(root_store)\n  .with_no_client_auth();\n```\n\nNow we can make a connection. You need to provide the server\u2019s hostname so we know what to expect to find in the server\u2019s certificate.\n```\nlet rc_config = Arc::new(config);\nlet example_com = \"example.com\".try_into().unwrap();\nlet mut client = rustls::ClientConnection::new(rc_config, example_com);\n```\n\nNow you should do appropriate IO for the `client` object. If `client.wants_read()` yields true, you should call `client.read_tls()` when the underlying connection has data. Likewise, if `client.wants_write()` yields true, you should call `client.write_tls()` when the underlying connection is able to send data. You should continue doing this as long as the connection is valid.\nThe return types of `read_tls()` and `write_tls()` only tell you if the IO worked. No parsing or processing of the TLS messages is done. After each `read_tls()` you should therefore call `client.process_new_packets()` which parses and processes the messages. Any error returned from `process_new_packets` is fatal to the connection, and will tell you why. For example, if the server\u2019s certificate is expired `process_new_packets` will return `Err(InvalidCertificate(Expired))`. From this point on, `process_new_packets` will not do any new work and will return that error continually.\nYou can extract newly received data by calling `client.reader()` (which implements the `io::Read` trait). You can send data to the peer by calling `client.writer()` (which implements `io::Write` trait). Note that `client.writer().write()` buffers data you send if the TLS connection is not yet established: this is useful for writing (say) a HTTP request, but this is buffered so avoid large amounts of data.\nThe following code uses a fictional socket IO API for illustration, and does not handle errors.\n```\nuse std::io;\nuse rustls::Connection;\nclient.writer().write(b\"GET / HTTP/1.0\\r\\n\\r\\n\").unwrap();\nlet mut socket = connect(\"example.com\", 443);\nloop {\n if client.wants_read() && socket.ready_for_read() {\n  client.read_tls(&mut socket).unwrap();\n  client.process_new_packets().unwrap();\n  let mut plaintext = Vec::new();\n  client.reader().read_to_end(&mut plaintext).unwrap();\n  io::stdout().write(&plaintext).unwrap();\n }\n if client.wants_write() && socket.ready_for_write() {\n  client.write_tls(&mut socket).unwrap();\n }\n socket.wait_for_something_to_happen();\n}\n```\n\n## \u00a7\u27e847\u27e9Examples\nYou can find several client and server examples of varying complexity in the examples\u27e836\u27e9 directory, including `tlsserver-mio`\u27e848\u27e9 and `tlsclient-mio`\u27e849\u27e9 - full worked examples using `mio`\u27e838\u27e9.\n## \u00a7\u27e850\u27e9Manual\nThe rustls manual\u27e851\u27e9 explains design decisions and includes how-to guidance.\n## \u00a7\u27e852\u27e9Crate features\nHere\u2019s a list of what features are exposed by the rustls crate and what they mean.\n  * `std` (enabled by default): enable the high-level (buffered) Connection API and other functionality which relies on the `std` library.\n  * `aws_lc_rs` (enabled by default): makes the rustls crate depend on the `aws-lc-rs`\u27e87\u27e9 crate. Use `rustls::crypto::aws_lc_rs::default_provider().install_default()` to use it as the default `CryptoProvider`, or provide it explicitly when making a `ClientConfig` or `ServerConfig`.\nNote that aws-lc-rs has additional build-time dependencies like cmake. See the documentation\u27e853\u27e9 for details.\n  * `ring`: makes the rustls crate depend on the _ring_ crate for cryptography. Use `rustls::crypto::ring::default_provider().install_default()` to use it as the default `CryptoProvider`, or provide it explicitly when making a `ClientConfig` or `ServerConfig`.\n  * `fips`: enable support for FIPS140-3-approved cryptography, via the `aws-lc-rs`\u27e87\u27e9 crate. This feature enables the `aws_lc_rs` crate feature, which makes the rustls crate depend on aws-lc-rs\u27e854\u27e9. It also changes the default for `ServerConfig::require_ems`\u27e855\u27e9 and `ClientConfig::require_ems`\u27e856\u27e9.\nSee manual::_06_fips\u27e857\u27e9 for more details.\n  * `prefer-post-quantum` (enabled by default): for the `aws-lc-rs`\u27e87\u27e9-backed provider, prioritizes post-quantum secure key exchange by default (using X25519MLKEM768). This feature merely alters the order of `rustls::crypto::aws_lc_rs::DEFAULT_KX_GROUPS`. See the manual\u27e858\u27e9 for more details.\n  * `custom-provider`: disables implicit use of built-in providers (`aws-lc-rs` or `ring`). This forces applications to manually install one, for instance, when using a custom `CryptoProvider`.\n  * `tls12` (enabled by default): enable support for TLS version 1.2. Note that, due to the additive nature of Cargo features and because it is enabled by default, other crates in your dependency graph could re-enable it for your application. If you want to disable TLS 1.2 for security reasons, consider explicitly enabling TLS 1.3 only in the config builder API.\n  * `logging` (enabled by default): make the rustls crate depend on the `log` crate. rustls outputs interesting protocol-level messages at `trace!` and `debug!` level, and protocol-level errors at `warn!` and `error!` level. The log messages do not contain secret key data, and so are safe to archive without affecting session security.\n  * `read_buf`: when building with Rust Nightly, adds support for the unstable `std::io::ReadBuf` and related APIs. This reduces costs from initializing buffers. Will do nothing on non-Nightly releases.\n  * `brotli`: uses the `brotli` crate for RFC8879 certificate compression support.\n  * `zlib`: uses the `zlib-rs` crate for RFC8879 certificate compression support.\n\n\n## Re-exports\u00a7\u27e859\u27e9\n\n`pub use crate::ticketer::TicketRotator[](https://docs.rs/rustls/latest/rustls/ticketer/struct.TicketRotator.html \"struct rustls::ticketer::TicketRotator\");``std`\n\n\n`pub use crate::ticketer::TicketSwitcher[](https://docs.rs/rustls/latest/rustls/ticketer/struct.TicketSwitcher.html \"struct rustls::ticketer::TicketSwitcher\");``std` or `hashbrown`\n\n\n`pub use client::ClientConfig[](https://docs.rs/rustls/latest/rustls/client/struct.ClientConfig.html \"struct rustls::client::ClientConfig\");`\n\n\n`pub use client::ClientConnection[](https://docs.rs/rustls/latest/rustls/client/struct.ClientConnection.html \"struct rustls::client::ClientConnection\");``std`\n\n\n`pub use server::ServerConfig[](https://docs.rs/rustls/latest/rustls/server/struct.ServerConfig.html \"struct rustls::server::ServerConfig\");`\n\n\n`pub use server::ServerConnection[](https://docs.rs/rustls/latest/rustls/server/struct.ServerConnection.html \"struct rustls::server::ServerConnection\");``std`\n\n## Modules\u00a7\u27e860\u27e9\n\nclient\u27e861\u27e9\n    Items for use in a client.\n\ncompress\u27e862\u27e9\n    Certificate compression and decompression support\n\ncrypto\u27e863\u27e9\n    Crypto provider interface.\n\nffdhe_groups\u27e864\u27e9\n    This module contains parameters for FFDHE named groups as defined in RFC 7919 Appendix A\u27e865\u27e9.\n\nkernel\u27e866\u27e9\n    Kernel connection API.\n\nlock\u27e867\u27e9\n    APIs abstracting over locking primitives.\n\nmanual\u27e851\u27e9\n    This is the rustls manual.\n\npki_types\u27e868\u27e9\n    Re-exports the contents of the rustls-pki-types\u27e869\u27e9 crate for easy access\n\nquic\u27e870\u27e9\n    APIs for implementing QUIC TLS\n\nserver\u27e871\u27e9\n    Items for use in a server.\n\nsign\u27e872\u27e9\n    Message signing interfaces.\n\nticketer\u27e873\u27e9`std` or `hashbrown`\n    APIs for implementing TLS tickets\n\ntime_provider\u27e874\u27e9\n    The library\u2019s source of time.\n\nunbuffered\u27e875\u27e9\n    Unbuffered connection API\n\nversion\u27e876\u27e9\n    All defined protocol versions appear in this module.\n## Structs\u00a7\u27e877\u27e9\n\nCipherSuiteCommon\u27e878\u27e9\n    Common state for cipher suites (both for TLS 1.2 and TLS 1.3)\n\nCommonState\u27e879\u27e9\n    Connection state common to both client and server connections.\n\nConfigBuilder\u27e880\u27e9\n    A builder\u27e881\u27e9 for `ServerConfig`\u27e882\u27e9 or `ClientConfig`\u27e883\u27e9 values.\n\nConnectionCommon\u27e884\u27e9\n    Interface shared by client and server connections.\n\nDigitallySignedStruct\u27e885\u27e9\n    This type combines a `SignatureScheme`\u27e886\u27e9 and a signature payload produced with that scheme.\n\nDistinguishedName\u27e887\u27e9\n    A `DistinguishedName` is a `Vec<u8>` wrapped in internal types.\n\nExtractedSecrets\u27e888\u27e9\n    Secrets for transmitting/receiving data over a TLS session.\n\nIoState\u27e889\u27e9\n    Values of this structure are returned from `Connection::process_new_packets`\u27e890\u27e9 and tell the caller the current I/O state of the TLS connection.\n\nKeyLogFile\u27e891\u27e9`std`\n    `KeyLog`\u27e892\u27e9 implementation that opens a file whose name is given by the `SSLKEYLOGFILE` environment variable, and writes keys into it.\n\nNoKeyLog\u27e893\u27e9\n    KeyLog that does exactly nothing.\n\nOtherError\u27e894\u27e9\n    Any other error that cannot be expressed by a more specific `Error`\u27e895\u27e9 variant.\n\nReader\u27e896\u27e9`std`\n    A structure that implements `std::io::Read`\u27e897\u27e9 for reading plaintext.\n\nRootCertStore\u27e898\u27e9\n    A container for root certificates able to provide a root-of-trust for connection authentication.\n\nStream\u27e837\u27e9`std`\n    This type implements `io::Read` and `io::Write`, encapsulating a Connection `C` and an underlying transport `T`, such as a socket.\n\nStreamOwned\u27e899\u27e9`std`\n    This type implements `io::Read` and `io::Write`, encapsulating and owning a Connection `C` and an underlying blocking transport `T`, such as a socket.\n\nSupportedProtocolVersion\u27e8100\u27e9\n    A TLS protocol version supported by rustls.\n\nTls12CipherSuite\u27e8101\u27e9`tls12`\n    A TLS 1.2 cipher suite supported by rustls.\n\nTls13CipherSuite\u27e8102\u27e9\n    A TLS 1.3 cipher suite supported by rustls.\n\nWantsVerifier\u27e8103\u27e9\n    Config builder state where the caller must supply a verifier.\n\nWantsVersions\u27e8104\u27e9\n    Config builder state where the caller must supply TLS protocol versions.\n\nWriter\u27e8105\u27e9`std`\n    A structure that implements `std::io::Write`\u27e8106\u27e9 for writing plaintext.\n## Enums\u00a7\u27e8107\u27e9\n\nAlertDescription\u27e8108\u27e9\n    The `AlertDescription` TLS protocol enum. Values in this enum are taken from the various RFCs covering TLS, and are listed by IANA. The `Unknown` item is used when processing unrecognised ordinals.\n\nCertRevocationListError\u27e8109\u27e9\n    The ways in which a certificate revocation list (CRL) can be invalid.\n\nCertificateCompressionAlgorithm\u27e8110\u27e9\n    The \u201cTLS Certificate Compression Algorithm IDs\u201d TLS protocol enum. Values in this enum are taken from RFC8879\u27e8111\u27e9.\n\nCertificateError\u27e8112\u27e9\n    The ways in which certificate validators can express errors.\n\nCipherSuite\u27e8113\u27e9\n    The `CipherSuite` TLS protocol enum. Values in this enum are taken from the various RFCs covering TLS, and are listed by IANA. The `Unknown` item is used when processing unrecognised ordinals.\n\nConnection\u27e8114\u27e9`std`\n    A client or server connection.\n\nConnectionTrafficSecrets\u27e8115\u27e9\n    Secrets used to encrypt/decrypt data in a TLS session.\n\nContentType\u27e8116\u27e9\n    The `ContentType` TLS protocol enum. Values in this enum are taken from the various RFCs covering TLS, and are listed by IANA. The `Unknown` item is used when processing unrecognised ordinals.\n\nEncryptedClientHelloError\u27e8117\u27e9\n    An error that occurred while handling Encrypted Client Hello (ECH).\n\nError\u27e895\u27e9\n    rustls reports protocol errors using this type.\n\nExtendedKeyPurpose\u27e8118\u27e9\n    Extended Key Usage (EKU) purpose values.\n\nHandshakeKind\u27e8119\u27e9\n    Describes which sort of handshake happened.\n\nHandshakeType\u27e8120\u27e9\n    The `HandshakeType` TLS protocol enum. Values in this enum are taken from the various RFCs covering TLS, and are listed by IANA. The `Unknown` item is used when processing unrecognised ordinals.\n\nInconsistentKeys\u27e8121\u27e9\n    Specific failure cases from `keys_match`\u27e8122\u27e9 or a `crate::crypto::signer::SigningKey`\u27e8123\u27e9 that cannot produce a corresponding public key.\n\nInvalidMessage\u27e8124\u27e9\n    A corrupt TLS message payload that resulted in an error.\n\nNamedGroup\u27e8125\u27e9\n    The `NamedGroup` TLS protocol enum. Values in this enum are taken from the various RFCs covering TLS, and are listed by IANA. The `Unknown` item is used when processing unrecognised ordinals.\n\nPeerIncompatible\u27e8126\u27e9\n    The set of cases where we failed to make a connection because a peer doesn\u2019t support a TLS version/feature we require.\n\nPeerMisbehaved\u27e8127\u27e9\n    The set of cases where we failed to make a connection because we thought the peer was misbehaving.\n\nProtocolVersion\u27e8128\u27e9\n    The `ProtocolVersion` TLS protocol enum. Values in this enum are taken from the various RFCs covering TLS, and are listed by IANA. The `Unknown` item is used when processing unrecognised ordinals.\n\nSide\u27e8129\u27e9\n    Side of the connection.\n\nSignatureAlgorithm\u27e8130\u27e9\n    The `SignatureAlgorithm` TLS protocol enum. Values in this enum are taken from the various RFCs covering TLS, and are listed by IANA. The `Unknown` item is used when processing unrecognised ordinals.\n\nSignatureScheme\u27e886\u27e9\n    The `SignatureScheme` TLS protocol enum. Values in this enum are taken from the various RFCs covering TLS, and are listed by IANA. The `Unknown` item is used when processing unrecognised ordinals.\n\nSupportedCipherSuite\u27e8131\u27e9\n    A cipher suite supported by rustls.\n## Statics\u00a7\u27e8132\u27e9\n\nALL_VERSIONS\u27e8133\u27e9\n    A list of all the protocol versions supported by rustls.\n\nDEFAULT_VERSIONS\u27e8134\u27e9\n    The version configuration that an application should use by default.\n## Traits\u00a7\u27e8135\u27e9\n\nConfigSide\u27e8136\u27e9\n    Helper trait to abstract `ConfigBuilder`\u27e880\u27e9 over building a `ClientConfig`\u27e883\u27e9 or `ServerConfig`\u27e882\u27e9.\n\nKeyLog\u27e892\u27e9\n    This trait represents the ability to do something useful with key material, such as logging it to a file for debugging.\n\nSideData\u27e8137\u27e9\n    Data specific to the peer\u2019s side (client or server).\n",
            "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://docs.rs/rustls/latest/settings.html: Settings\n\u27e82\u27e9 https://docs.rs/rustls/latest/help.html: Help\n\u27e83\u27e9 https://docs.rs/rustls/latest/src/rustls/lib.rs.html#1-715: Source\n\u27e84\u27e9 https://docs.rs/rustls/latest/rustls/#rustls---a-modern-tls-library: \u00a7\n\u27e85\u27e9 https://docs.rs/rustls/latest/rustls/manual/_04_features/index.html: mod rustls::manual::_04_features - the full list of protocol features\n\u27e86\u27e9 https://docs.rs/rustls/latest/rustls/#platform-support: \u00a7\n\u27e87\u27e9 https://crates.io/crates/aws-lc-rs: `aws-lc-rs`\n\u27e88\u27e9 https://aws.github.io/aws-lc-rs/faq.html#can-i-run-aws-lc-rs-on-x-platform-or-architecture: the aws-lc-rs FAQ\n\u27e89\u27e9 https://crates.io/crates/ring: `ring`\n\u27e810\u27e9 https://github.com/briansmith/ring/blob/2e8363b433fa3b3962c877d9ed2e9145612f3160/include/ring-core/target.h#L18-L64: the supported `ring` target platforms\n\u27e811\u27e9 https://docs.rs/rustls/latest/rustls/crypto/struct.CryptoProvider.html: struct rustls::crypto::CryptoProvider - `crypto::CryptoProvider`\n\u27e812\u27e9 https://docs.rs/rustls/latest/rustls/#cryptography-providers: \u00a7\n\u27e813\u27e9 https://docs.rs/rustls/latest/rustls/#built-in-providers: \u00a7\n\u27e814\u27e9 https://docs.rs/rustls/latest/rustls/#third-party-providers: \u00a7\n\u27e815\u27e9 https://github.com/janrueth/boring-rustls-provider: `boring-rustls-provider`\n\u27e816\u27e9 https://github.com/google/boringssl: `boringssl`\n\u27e817\u27e9 https://crates.io/crates/rustls-graviola: `rustls-graviola`\n\u27e818\u27e9 https://github.com/ctz/graviola: `graviola`\n\u27e819\u27e9 https://github.com/fortanix/rustls-mbedtls-provider: `rustls-mbedtls-provider`\n\u27e820\u27e9 https://github.com/Mbed-TLS/mbedtls: `mbedtls`\n\u27e821\u27e9 https://github.com/tofay/rustls-openssl: `rustls-openssl`\n\u27e822\u27e9 https://openssl-library.org/: OpenSSL\n\u27e823\u27e9 https://github.com/RustCrypto/rustls-rustcrypto: `rustls-rustcrypto`\n\u27e824\u27e9 https://github.com/RustCrypto: `RustCrypto`\n\u27e825\u27e9 https://github.com/microsoft/rustls-symcrypt: `rustls-symcrypt`\n\u27e826\u27e9 https://github.com/microsoft/SymCrypt: SymCrypt\n\u27e827\u27e9 https://github.com/wolfSSL/rustls-wolfcrypt-provider: `rustls-wolfcrypt-provider`\n\u27e828\u27e9 https://www.wolfssl.com/products/wolfcrypt: `wolfCrypt`\n\u27e829\u27e9 https://docs.rs/rustls/latest/rustls/#custom-provider: \u00a7\n\u27e830\u27e9 https://github.com/rustls/rustls/tree/main/provider-example/: custom provider example\n\u27e831\u27e9 https://docs.rs/rustls/latest/rustls/crypto/struct.CryptoProvider.html#making-a-custom-cryptoprovider: Making a custom CryptoProvider\n\u27e832\u27e9 https://docs.rs/rustls/latest/rustls/#design-overview: \u00a7\n\u27e833\u27e9 https://crates.io/crates/hyper: hyper\n\u27e834\u27e9 https://crates.io/crates/ureq: ureq\n\u27e835\u27e9 https://docs.rs/rustls/latest/rustls/#rustls-does-not-take-care-of-network-io: \u00a7\n\u27e836\u27e9 https://github.com/rustls/rustls/tree/main/examples: examples\n\u27e837\u27e9 https://docs.rs/rustls/latest/rustls/struct.Stream.html: struct rustls::Stream - `stream::Stream`\n\u27e838\u27e9 https://docs.rs/mio/latest/mio/: `mio`\n\u27e839\u27e9 https://github.com/rustls/tokio-rustls: `tokio-rustls`\n\u27e840\u27e9 https://docs.rs/rustls/latest/rustls/#rustls-provides-encrypted-pipes: \u00a7\n\u27e841\u27e9 https://docs.rs/rustls/latest/rustls/server/struct.ServerConnection.html: struct rustls::server::ServerConnection - `ServerConnection`\n\u27e842\u27e9 https://docs.rs/rustls/latest/rustls/client/struct.ClientConnection.html: struct rustls::client::ClientConnection - `ClientConnection`\n\u27e843\u27e9 https://docs.rs/rustls/latest/rustls/enum.Connection.html#method.read_tls: method rustls::Connection::read_tls - `read_tls()`\n\u27e844\u27e9 https://docs.rs/rustls/latest/rustls/#rustls-takes-care-of-server-certificate-verification: \u00a7\n\u27e845\u27e9 https://docs.rs/rustls/latest/rustls/#getting-started: \u00a7\n\u27e846\u27e9 https://crates.io/crates/webpki-roots: `webpki_roots`\n\u27e847\u27e9 https://docs.rs/rustls/latest/rustls/#examples: \u00a7\n\u27e848\u27e9 https://github.com/rustls/rustls/blob/main/examples/src/bin/tlsserver-mio.rs: `tlsserver-mio`\n\u27e849\u27e9 https://github.com/rustls/rustls/blob/main/examples/src/bin/tlsclient-mio.rs: `tlsclient-mio`\n\u27e850\u27e9 https://docs.rs/rustls/latest/rustls/#manual: \u00a7\n\u27e851\u27e9 https://docs.rs/rustls/latest/rustls/manual/index.html: mod rustls::manual - rustls manual\n\u27e852\u27e9 https://docs.rs/rustls/latest/rustls/#crate-features: \u00a7\n\u27e853\u27e9 https://aws.github.io/aws-lc-rs/requirements/index.html: the documentation\n\u27e854\u27e9 https://github.com/aws/aws-lc-rs: aws-lc-rs\n\u27e855\u27e9 https://docs.rs/rustls/latest/rustls/server/struct.ServerConfig.html#structfield.require_ems: field rustls::server::ServerConfig::require_ems - `ServerConfig::require_ems`\n\u27e856\u27e9 https://docs.rs/rustls/latest/rustls/client/struct.ClientConfig.html#structfield.require_ems: field rustls::client::ClientConfig::require_ems - `ClientConfig::require_ems`\n\u27e857\u27e9 https://docs.rs/rustls/latest/rustls/manual/_06_fips/index.html: mod rustls::manual::_06_fips - manual::_06_fips\n\u27e858\u27e9 https://docs.rs/rustls/latest/rustls/manual/_05_defaults/index.html#about-the-post-quantum-secure-key-exchange-x25519mlkem768: mod rustls::manual::_05_defaults - the manual\n\u27e859\u27e9 https://docs.rs/rustls/latest/rustls/#reexports: \u00a7\n\u27e860\u27e9 https://docs.rs/rustls/latest/rustls/#modules: \u00a7\n\u27e861\u27e9 https://docs.rs/rustls/latest/rustls/client/index.html: mod rustls::client - client\n\u27e862\u27e9 https://docs.rs/rustls/latest/rustls/compress/index.html: mod rustls::compress - compress\n\u27e863\u27e9 https://docs.rs/rustls/latest/rustls/crypto/index.html: mod rustls::crypto - crypto\n\u27e864\u27e9 https://docs.rs/rustls/latest/rustls/ffdhe_groups/index.html: mod rustls::ffdhe_groups - ffdhe_groups\n\u27e865\u27e9 https://datatracker.ietf.org/doc/html/rfc7919#appendix-A: RFC 7919 Appendix A\n\u27e866\u27e9 https://docs.rs/rustls/latest/rustls/kernel/index.html: mod rustls::kernel - kernel\n\u27e867\u27e9 https://docs.rs/rustls/latest/rustls/lock/index.html: mod rustls::lock - lock\n\u27e868\u27e9 https://docs.rs/rustls/latest/rustls/pki_types/index.html: mod rustls::pki_types - pki_types\n\u27e869\u27e9 https://docs.rs/rustls-pki-types: rustls-pki-types\n\u27e870\u27e9 https://docs.rs/rustls/latest/rustls/quic/index.html: mod rustls::quic - quic\n\u27e871\u27e9 https://docs.rs/rustls/latest/rustls/server/index.html: mod rustls::server - server\n\u27e872\u27e9 https://docs.rs/rustls/latest/rustls/sign/index.html: mod rustls::sign - sign\n\u27e873\u27e9 https://docs.rs/rustls/latest/rustls/ticketer/index.html: mod rustls::ticketer - ticketer\n\u27e874\u27e9 https://docs.rs/rustls/latest/rustls/time_provider/index.html: mod rustls::time_provider - time_provider\n\u27e875\u27e9 https://docs.rs/rustls/latest/rustls/unbuffered/index.html: mod rustls::unbuffered - unbuffered\n\u27e876\u27e9 https://docs.rs/rustls/latest/rustls/version/index.html: mod rustls::version - version\n\u27e877\u27e9 https://docs.rs/rustls/latest/rustls/#structs: \u00a7\n\u27e878\u27e9 https://docs.rs/rustls/latest/rustls/struct.CipherSuiteCommon.html: struct rustls::CipherSuiteCommon - CipherSuiteCommon\n\u27e879\u27e9 https://docs.rs/rustls/latest/rustls/struct.CommonState.html: struct rustls::CommonState - CommonState\n\u27e880\u27e9 https://docs.rs/rustls/latest/rustls/struct.ConfigBuilder.html: struct rustls::ConfigBuilder - ConfigBuilder\n\u27e881\u27e9 https://rust-unofficial.github.io/patterns/patterns/creational/builder.html: builder\n\u27e882\u27e9 https://docs.rs/rustls/latest/rustls/server/struct.ServerConfig.html: struct rustls::server::ServerConfig - `ServerConfig`\n\u27e883\u27e9 https://docs.rs/rustls/latest/rustls/client/struct.ClientConfig.html: struct rustls::client::ClientConfig - `ClientConfig`\n\u27e884\u27e9 https://docs.rs/rustls/latest/rustls/struct.ConnectionCommon.html: struct rustls::ConnectionCommon - ConnectionCommon\n\u27e885\u27e9 https://docs.rs/rustls/latest/rustls/struct.DigitallySignedStruct.html: struct rustls::DigitallySignedStruct - DigitallySignedStruct\n\u27e886\u27e9 https://docs.rs/rustls/latest/rustls/enum.SignatureScheme.html: enum rustls::SignatureScheme - `SignatureScheme`\n\u27e887\u27e9 https://docs.rs/rustls/latest/rustls/struct.DistinguishedName.html: struct rustls::DistinguishedName - DistinguishedName\n\u27e888\u27e9 https://docs.rs/rustls/latest/rustls/struct.ExtractedSecrets.html: struct rustls::ExtractedSecrets - ExtractedSecrets\n\u27e889\u27e9 https://docs.rs/rustls/latest/rustls/struct.IoState.html: struct rustls::IoState - IoState\n\u27e890\u27e9 https://docs.rs/rustls/latest/rustls/enum.Connection.html#method.process_new_packets: method rustls::Connection::process_new_packets - `Connection::process_new_packets`\n\u27e891\u27e9 https://docs.rs/rustls/latest/rustls/struct.KeyLogFile.html: struct rustls::KeyLogFile - KeyLogFile\n\u27e892\u27e9 https://docs.rs/rustls/latest/rustls/trait.KeyLog.html: trait rustls::KeyLog - `KeyLog`\n\u27e893\u27e9 https://docs.rs/rustls/latest/rustls/struct.NoKeyLog.html: struct rustls::NoKeyLog - NoKeyLog\n\u27e894\u27e9 https://docs.rs/rustls/latest/rustls/struct.OtherError.html: struct rustls::OtherError - OtherError\n\u27e895\u27e9 https://docs.rs/rustls/latest/rustls/enum.Error.html: enum rustls::Error - `Error`\n\u27e896\u27e9 https://docs.rs/rustls/latest/rustls/struct.Reader.html: struct rustls::Reader - Reader\n\u27e897\u27e9 https://doc.rust-lang.org/nightly/std/io/trait.Read.html: trait std::io::Read - `std::io::Read`\n\u27e898\u27e9 https://docs.rs/rustls/latest/rustls/struct.RootCertStore.html: struct rustls::RootCertStore - RootCertStore\n\u27e899\u27e9 https://docs.rs/rustls/latest/rustls/struct.StreamOwned.html: struct rustls::StreamOwned - StreamOwned\n\u27e8100\u27e9 https://docs.rs/rustls/latest/rustls/struct.SupportedProtocolVersion.html: struct rustls::SupportedProtocolVersion - SupportedProtocolVersion\n\u27e8101\u27e9 https://docs.rs/rustls/latest/rustls/struct.Tls12CipherSuite.html: struct rustls::Tls12CipherSuite - Tls12CipherSuite\n\u27e8102\u27e9 https://docs.rs/rustls/latest/rustls/struct.Tls13CipherSuite.html: struct rustls::Tls13CipherSuite - Tls13CipherSuite\n\u27e8103\u27e9 https://docs.rs/rustls/latest/rustls/struct.WantsVerifier.html: struct rustls::WantsVerifier - WantsVerifier\n\u27e8104\u27e9 https://docs.rs/rustls/latest/rustls/struct.WantsVersions.html: struct rustls::WantsVersions - WantsVersions\n\u27e8105\u27e9 https://docs.rs/rustls/latest/rustls/struct.Writer.html: struct rustls::Writer - Writer\n\u27e8106\u27e9 https://doc.rust-lang.org/nightly/std/io/trait.Write.html: trait std::io::Write - `std::io::Write`\n\u27e8107\u27e9 https://docs.rs/rustls/latest/rustls/#enums: \u00a7\n\u27e8108\u27e9 https://docs.rs/rustls/latest/rustls/enum.AlertDescription.html: enum rustls::AlertDescription - AlertDescription\n\u27e8109\u27e9 https://docs.rs/rustls/latest/rustls/enum.CertRevocationListError.html: enum rustls::CertRevocationListError - CertRevocationListError\n\u27e8110\u27e9 https://docs.rs/rustls/latest/rustls/enum.CertificateCompressionAlgorithm.html: enum rustls::CertificateCompressionAlgorithm - CertificateCompressionAlgorithm\n\u27e8111\u27e9 https://www.rfc-editor.org/rfc/rfc8879.html#section-7.3: RFC8879\n\u27e8112\u27e9 https://docs.rs/rustls/latest/rustls/enum.CertificateError.html: enum rustls::CertificateError - CertificateError\n\u27e8113\u27e9 https://docs.rs/rustls/latest/rustls/enum.CipherSuite.html: enum rustls::CipherSuite - CipherSuite\n\u27e8114\u27e9 https://docs.rs/rustls/latest/rustls/enum.Connection.html: enum rustls::Connection - Connection\n\u27e8115\u27e9 https://docs.rs/rustls/latest/rustls/enum.ConnectionTrafficSecrets.html: enum rustls::ConnectionTrafficSecrets - ConnectionTrafficSecrets\n\u27e8116\u27e9 https://docs.rs/rustls/latest/rustls/enum.ContentType.html: enum rustls::ContentType - ContentType\n\u27e8117\u27e9 https://docs.rs/rustls/latest/rustls/enum.EncryptedClientHelloError.html: enum rustls::EncryptedClientHelloError - EncryptedClientHelloError\n\u27e8118\u27e9 https://docs.rs/rustls/latest/rustls/enum.ExtendedKeyPurpose.html: enum rustls::ExtendedKeyPurpose - ExtendedKeyPurpose\n\u27e8119\u27e9 https://docs.rs/rustls/latest/rustls/enum.HandshakeKind.html: enum rustls::HandshakeKind - HandshakeKind\n\u27e8120\u27e9 https://docs.rs/rustls/latest/rustls/enum.HandshakeType.html: enum rustls::HandshakeType - HandshakeType\n\u27e8121\u27e9 https://docs.rs/rustls/latest/rustls/enum.InconsistentKeys.html: enum rustls::InconsistentKeys - InconsistentKeys\n\u27e8122\u27e9 https://docs.rs/rustls/latest/rustls/sign/struct.CertifiedKey.html#method.keys_match: method rustls::sign::CertifiedKey::keys_match - `keys_match`\n\u27e8123\u27e9 https://docs.rs/rustls/latest/rustls/sign/trait.SigningKey.html: trait rustls::sign::SigningKey - `crate::crypto::signer::SigningKey`\n\u27e8124\u27e9 https://docs.rs/rustls/latest/rustls/enum.InvalidMessage.html: enum rustls::InvalidMessage - InvalidMessage\n\u27e8125\u27e9 https://docs.rs/rustls/latest/rustls/enum.NamedGroup.html: enum rustls::NamedGroup - NamedGroup\n\u27e8126\u27e9 https://docs.rs/rustls/latest/rustls/enum.PeerIncompatible.html: enum rustls::PeerIncompatible - PeerIncompatible\n\u27e8127\u27e9 https://docs.rs/rustls/latest/rustls/enum.PeerMisbehaved.html: enum rustls::PeerMisbehaved - PeerMisbehaved\n\u27e8128\u27e9 https://docs.rs/rustls/latest/rustls/enum.ProtocolVersion.html: enum rustls::ProtocolVersion - ProtocolVersion\n\u27e8129\u27e9 https://docs.rs/rustls/latest/rustls/enum.Side.html: enum rustls::Side - Side\n\u27e8130\u27e9 https://docs.rs/rustls/latest/rustls/enum.SignatureAlgorithm.html: enum rustls::SignatureAlgorithm - SignatureAlgorithm\n\u27e8131\u27e9 https://docs.rs/rustls/latest/rustls/enum.SupportedCipherSuite.html: enum rustls::SupportedCipherSuite - SupportedCipherSuite\n\u27e8132\u27e9 https://docs.rs/rustls/latest/rustls/#statics: \u00a7\n\u27e8133\u27e9 https://docs.rs/rustls/latest/rustls/static.ALL_VERSIONS.html: static rustls::ALL_VERSIONS - ALL_VERSIONS\n\u27e8134\u27e9 https://docs.rs/rustls/latest/rustls/static.DEFAULT_VERSIONS.html: static rustls::DEFAULT_VERSIONS - DEFAULT_VERSIONS\n\u27e8135\u27e9 https://docs.rs/rustls/latest/rustls/#traits: \u00a7\n\u27e8136\u27e9 https://docs.rs/rustls/latest/rustls/trait.ConfigSide.html: trait rustls::ConfigSide - ConfigSide\n\u27e8137\u27e9 https://docs.rs/rustls/latest/rustls/trait.SideData.html: trait rustls::SideData - SideData\n",
            "fit_markdown": "",
            "fit_html": ""
          },
          "downloads": 0,
          "github_stars": 0,
          "dependencies": [],
          "features": {},
          "code_snippets": [],
          "readme_sections": {},
          "librs_downloads": null,
          "source": "crates.io",
          "enhanced_scraping": {},
          "enhanced_features": [],
          "enhanced_dependencies": []
        },
        "enriched_crate": {
          "name": "rustls",
          "version": "0.23.28",
          "description": "ALLOW: Positive community sentiment",
          "repository": "",
          "keywords": [],
          "categories": [],
          "readme": {
            "raw_markdown": "[](https://docs.rs/rustls/latest/rustls/all.html \"show sidebar\")\n# Crate rustlsCopy item path\n[Settings](https://docs.rs/rustls/latest/settings.html)\n[Help](https://docs.rs/rustls/latest/help.html)\nSummary[Source](https://docs.rs/rustls/latest/src/rustls/lib.rs.html#1-715)\nExpand description\n## [\u00a7](https://docs.rs/rustls/latest/rustls/#rustls---a-modern-tls-library)Rustls - a modern TLS library\nRustls is a TLS library that aims to provide a good level of cryptographic security, requires no configuration to achieve that security, and provides no unsafe features or obsolete cryptography by default.\nRustls implements TLS1.2 and TLS1.3 for both clients and servers. See [the full list of protocol features](https://docs.rs/rustls/latest/rustls/manual/_04_features/index.html \"mod rustls::manual::_04_features\").\n#### [\u00a7](https://docs.rs/rustls/latest/rustls/#platform-support)Platform support\nWhile Rustls itself is platform independent, by default it uses [`aws-lc-rs`](https://crates.io/crates/aws-lc-rs) for implementing the cryptography in TLS. See [the aws-lc-rs FAQ](https://aws.github.io/aws-lc-rs/faq.html#can-i-run-aws-lc-rs-on-x-platform-or-architecture) for more details of the platform/architecture support constraints in aws-lc-rs.\n[`ring`](https://crates.io/crates/ring) is also available via the `ring` crate feature: see [the supported `ring` target platforms](https://github.com/briansmith/ring/blob/2e8363b433fa3b3962c877d9ed2e9145612f3160/include/ring-core/target.h#L18-L64).\nBy providing a custom instance of the [`crypto::CryptoProvider`](https://docs.rs/rustls/latest/rustls/crypto/struct.CryptoProvider.html \"struct rustls::crypto::CryptoProvider\") struct, you can replace all cryptography dependencies of rustls. This is a route to being portable to a wider set of architectures and environments, or compliance requirements. See the [`crypto::CryptoProvider`](https://docs.rs/rustls/latest/rustls/crypto/struct.CryptoProvider.html \"struct rustls::crypto::CryptoProvider\") documentation for more details.\nSpecifying `default-features = false` when depending on rustls will remove the implicit dependency on aws-lc-rs.\nRustls requires Rust 1.71 or later. It has an optional dependency on zlib-rs which requires 1.75 or later.\n#### [\u00a7](https://docs.rs/rustls/latest/rustls/#cryptography-providers)Cryptography providers\nSince Rustls 0.22 it has been possible to choose the provider of the cryptographic primitives that Rustls uses. This may be appealing if you have specific platform, compliance or feature requirements that aren\u2019t met by the default provider, [`aws-lc-rs`](https://crates.io/crates/aws-lc-rs).\nUsers that wish to customize the provider in use can do so when constructing `ClientConfig` and `ServerConfig` instances using the `with_crypto_provider` method on the respective config builder types. See the [`crypto::CryptoProvider`](https://docs.rs/rustls/latest/rustls/crypto/struct.CryptoProvider.html \"struct rustls::crypto::CryptoProvider\") documentation for more details.\n##### [\u00a7](https://docs.rs/rustls/latest/rustls/#built-in-providers)Built-in providers\nRustls ships with two built-in providers controlled by associated crate features:\n  * [`aws-lc-rs`](https://crates.io/crates/aws-lc-rs) - enabled by default, available with the `aws_lc_rs` crate feature enabled.\n  * [`ring`](https://crates.io/crates/ring) - available with the `ring` crate feature enabled.\n\n\nSee the documentation for [`crypto::CryptoProvider`](https://docs.rs/rustls/latest/rustls/crypto/struct.CryptoProvider.html \"struct rustls::crypto::CryptoProvider\") for details on how providers are selected.\n##### [\u00a7](https://docs.rs/rustls/latest/rustls/#third-party-providers)Third-party providers\nThe community has also started developing third-party providers for Rustls:\n  * [`boring-rustls-provider`](https://github.com/janrueth/boring-rustls-provider) - a work-in-progress provider that uses [`boringssl`](https://github.com/google/boringssl) for cryptography.\n  * [`rustls-graviola`](https://crates.io/crates/rustls-graviola) - a provider that uses [`graviola`](https://github.com/ctz/graviola) for cryptography.\n  * [`rustls-mbedtls-provider`](https://github.com/fortanix/rustls-mbedtls-provider) - a provider that uses [`mbedtls`](https://github.com/Mbed-TLS/mbedtls) for cryptography.\n  * [`rustls-openssl`](https://github.com/tofay/rustls-openssl) - a provider that uses [OpenSSL](https://openssl-library.org/) for cryptography.\n  * [`rustls-rustcrypto`](https://github.com/RustCrypto/rustls-rustcrypto) - an experimental provider that uses the crypto primitives from [`RustCrypto`](https://github.com/RustCrypto) for cryptography.\n  * [`rustls-symcrypt`](https://github.com/microsoft/rustls-symcrypt) - a provider that uses Microsoft\u2019s [SymCrypt](https://github.com/microsoft/SymCrypt) library.\n  * [`rustls-wolfcrypt-provider`](https://github.com/wolfSSL/rustls-wolfcrypt-provider) - a work-in-progress provider that uses [`wolfCrypt`](https://www.wolfssl.com/products/wolfcrypt) for cryptography.\n\n\n##### [\u00a7](https://docs.rs/rustls/latest/rustls/#custom-provider)Custom provider\nWe also provide a simple example of writing your own provider in the [custom provider example](https://github.com/rustls/rustls/tree/main/provider-example/). This example implements a minimal provider using parts of the [`RustCrypto`](https://github.com/RustCrypto) ecosystem.\nSee the [Making a custom CryptoProvider](https://docs.rs/rustls/latest/rustls/crypto/struct.CryptoProvider.html#making-a-custom-cryptoprovider) section of the documentation for more information on this topic.\n### [\u00a7](https://docs.rs/rustls/latest/rustls/#design-overview)Design overview\nRustls is a low-level library. If your goal is to make HTTPS connections you may prefer to use a library built on top of Rustls like [hyper](https://crates.io/crates/hyper) or [ureq](https://crates.io/crates/ureq).\n#### [\u00a7](https://docs.rs/rustls/latest/rustls/#rustls-does-not-take-care-of-network-io)Rustls does not take care of network IO\nIt doesn\u2019t make or accept TCP connections, or do DNS, or read or write files.\nOur [examples](https://github.com/rustls/rustls/tree/main/examples) directory contains demos that show how to handle I/O using the [`stream::Stream`](https://docs.rs/rustls/latest/rustls/struct.Stream.html \"struct rustls::Stream\") helper, as well as more complex asynchronous I/O using [`mio`](https://docs.rs/mio/latest/mio/). If you\u2019re already using Tokio for an async runtime you may prefer to use [`tokio-rustls`](https://github.com/rustls/tokio-rustls) instead of interacting with rustls directly.\n#### [\u00a7](https://docs.rs/rustls/latest/rustls/#rustls-provides-encrypted-pipes)Rustls provides encrypted pipes\nThese are the [`ServerConnection`](https://docs.rs/rustls/latest/rustls/server/struct.ServerConnection.html \"struct rustls::server::ServerConnection\") and [`ClientConnection`](https://docs.rs/rustls/latest/rustls/client/struct.ClientConnection.html \"struct rustls::client::ClientConnection\") types. You supply raw TLS traffic on the left (via the [`read_tls()`](https://docs.rs/rustls/latest/rustls/enum.Connection.html#method.read_tls \"method rustls::Connection::read_tls\") and [`write_tls()`](https://docs.rs/rustls/latest/rustls/enum.Connection.html#method.read_tls \"method rustls::Connection::read_tls\") methods) and then read/write the plaintext on the right:\n```\n     TLS                  Plaintext\n     ===                  =========\n  read_tls()   +-----------------------+   reader() as io::Read\n          |            |\n     +--------->  ClientConnection  +--------->\n          |     or      |\n     <---------+  ServerConnection  <---------+\n          |            |\n  write_tls()   +-----------------------+   writer() as io::Write\n```\n\n#### [\u00a7](https://docs.rs/rustls/latest/rustls/#rustls-takes-care-of-server-certificate-verification)Rustls takes care of server certificate verification\nYou do not need to provide anything other than a set of root certificates to trust. Certificate verification cannot be turned off or disabled in the main API.\n### [\u00a7](https://docs.rs/rustls/latest/rustls/#getting-started)Getting started\nThis is the minimum you need to do to make a TLS client connection.\nFirst we load some root certificates. These are used to authenticate the server. The simplest way is to depend on the [`webpki_roots`](https://crates.io/crates/webpki-roots) crate which contains the Mozilla set of root certificates.\n```\nlet root_store = rustls::RootCertStore::from_iter(\n  webpki_roots::TLS_SERVER_ROOTS\n    .iter()\n    .cloned(),\n);\n```\n\nNext, we make a `ClientConfig`. You\u2019re likely to make one of these per process, and use it for all connections made by that process.\n```\nlet config = rustls::ClientConfig::builder()\n  .with_root_certificates(root_store)\n  .with_no_client_auth();\n```\n\nNow we can make a connection. You need to provide the server\u2019s hostname so we know what to expect to find in the server\u2019s certificate.\n```\nlet rc_config = Arc::new(config);\nlet example_com = \"example.com\".try_into().unwrap();\nlet mut client = rustls::ClientConnection::new(rc_config, example_com);\n```\n\nNow you should do appropriate IO for the `client` object. If `client.wants_read()` yields true, you should call `client.read_tls()` when the underlying connection has data. Likewise, if `client.wants_write()` yields true, you should call `client.write_tls()` when the underlying connection is able to send data. You should continue doing this as long as the connection is valid.\nThe return types of `read_tls()` and `write_tls()` only tell you if the IO worked. No parsing or processing of the TLS messages is done. After each `read_tls()` you should therefore call `client.process_new_packets()` which parses and processes the messages. Any error returned from `process_new_packets` is fatal to the connection, and will tell you why. For example, if the server\u2019s certificate is expired `process_new_packets` will return `Err(InvalidCertificate(Expired))`. From this point on, `process_new_packets` will not do any new work and will return that error continually.\nYou can extract newly received data by calling `client.reader()` (which implements the `io::Read` trait). You can send data to the peer by calling `client.writer()` (which implements `io::Write` trait). Note that `client.writer().write()` buffers data you send if the TLS connection is not yet established: this is useful for writing (say) a HTTP request, but this is buffered so avoid large amounts of data.\nThe following code uses a fictional socket IO API for illustration, and does not handle errors.\n```\nuse std::io;\nuse rustls::Connection;\nclient.writer().write(b\"GET / HTTP/1.0\\r\\n\\r\\n\").unwrap();\nlet mut socket = connect(\"example.com\", 443);\nloop {\n if client.wants_read() && socket.ready_for_read() {\n  client.read_tls(&mut socket).unwrap();\n  client.process_new_packets().unwrap();\n  let mut plaintext = Vec::new();\n  client.reader().read_to_end(&mut plaintext).unwrap();\n  io::stdout().write(&plaintext).unwrap();\n }\n if client.wants_write() && socket.ready_for_write() {\n  client.write_tls(&mut socket).unwrap();\n }\n socket.wait_for_something_to_happen();\n}\n```\n\n## [\u00a7](https://docs.rs/rustls/latest/rustls/#examples)Examples\nYou can find several client and server examples of varying complexity in the [examples](https://github.com/rustls/rustls/tree/main/examples) directory, including [`tlsserver-mio`](https://github.com/rustls/rustls/blob/main/examples/src/bin/tlsserver-mio.rs) and [`tlsclient-mio`](https://github.com/rustls/rustls/blob/main/examples/src/bin/tlsclient-mio.rs) - full worked examples using [`mio`](https://docs.rs/mio/latest/mio/).\n## [\u00a7](https://docs.rs/rustls/latest/rustls/#manual)Manual\nThe [rustls manual](https://docs.rs/rustls/latest/rustls/manual/index.html \"mod rustls::manual\") explains design decisions and includes how-to guidance.\n## [\u00a7](https://docs.rs/rustls/latest/rustls/#crate-features)Crate features\nHere\u2019s a list of what features are exposed by the rustls crate and what they mean.\n  * `std` (enabled by default): enable the high-level (buffered) Connection API and other functionality which relies on the `std` library.\n  * `aws_lc_rs` (enabled by default): makes the rustls crate depend on the [`aws-lc-rs`](https://crates.io/crates/aws-lc-rs) crate. Use `rustls::crypto::aws_lc_rs::default_provider().install_default()` to use it as the default `CryptoProvider`, or provide it explicitly when making a `ClientConfig` or `ServerConfig`.\nNote that aws-lc-rs has additional build-time dependencies like cmake. See [the documentation](https://aws.github.io/aws-lc-rs/requirements/index.html) for details.\n  * `ring`: makes the rustls crate depend on the _ring_ crate for cryptography. Use `rustls::crypto::ring::default_provider().install_default()` to use it as the default `CryptoProvider`, or provide it explicitly when making a `ClientConfig` or `ServerConfig`.\n  * `fips`: enable support for FIPS140-3-approved cryptography, via the [`aws-lc-rs`](https://crates.io/crates/aws-lc-rs) crate. This feature enables the `aws_lc_rs` crate feature, which makes the rustls crate depend on [aws-lc-rs](https://github.com/aws/aws-lc-rs). It also changes the default for [`ServerConfig::require_ems`](https://docs.rs/rustls/latest/rustls/server/struct.ServerConfig.html#structfield.require_ems \"field rustls::server::ServerConfig::require_ems\") and [`ClientConfig::require_ems`](https://docs.rs/rustls/latest/rustls/client/struct.ClientConfig.html#structfield.require_ems \"field rustls::client::ClientConfig::require_ems\").\nSee [manual::_06_fips](https://docs.rs/rustls/latest/rustls/manual/_06_fips/index.html \"mod rustls::manual::_06_fips\") for more details.\n  * `prefer-post-quantum` (enabled by default): for the [`aws-lc-rs`](https://crates.io/crates/aws-lc-rs)-backed provider, prioritizes post-quantum secure key exchange by default (using X25519MLKEM768). This feature merely alters the order of `rustls::crypto::aws_lc_rs::DEFAULT_KX_GROUPS`. See [the manual](https://docs.rs/rustls/latest/rustls/manual/_05_defaults/index.html#about-the-post-quantum-secure-key-exchange-x25519mlkem768 \"mod rustls::manual::_05_defaults\") for more details.\n  * `custom-provider`: disables implicit use of built-in providers (`aws-lc-rs` or `ring`). This forces applications to manually install one, for instance, when using a custom `CryptoProvider`.\n  * `tls12` (enabled by default): enable support for TLS version 1.2. Note that, due to the additive nature of Cargo features and because it is enabled by default, other crates in your dependency graph could re-enable it for your application. If you want to disable TLS 1.2 for security reasons, consider explicitly enabling TLS 1.3 only in the config builder API.\n  * `logging` (enabled by default): make the rustls crate depend on the `log` crate. rustls outputs interesting protocol-level messages at `trace!` and `debug!` level, and protocol-level errors at `warn!` and `error!` level. The log messages do not contain secret key data, and so are safe to archive without affecting session security.\n  * `read_buf`: when building with Rust Nightly, adds support for the unstable `std::io::ReadBuf` and related APIs. This reduces costs from initializing buffers. Will do nothing on non-Nightly releases.\n  * `brotli`: uses the `brotli` crate for RFC8879 certificate compression support.\n  * `zlib`: uses the `zlib-rs` crate for RFC8879 certificate compression support.\n\n\n## Re-exports[\u00a7](https://docs.rs/rustls/latest/rustls/#reexports)\n\n`pub use crate::ticketer::TicketRotator[](https://docs.rs/rustls/latest/rustls/ticketer/struct.TicketRotator.html \"struct rustls::ticketer::TicketRotator\");``std`\n\n\n`pub use crate::ticketer::TicketSwitcher[](https://docs.rs/rustls/latest/rustls/ticketer/struct.TicketSwitcher.html \"struct rustls::ticketer::TicketSwitcher\");``std` or `hashbrown`\n\n\n`pub use client::ClientConfig[](https://docs.rs/rustls/latest/rustls/client/struct.ClientConfig.html \"struct rustls::client::ClientConfig\");`\n\n\n`pub use client::ClientConnection[](https://docs.rs/rustls/latest/rustls/client/struct.ClientConnection.html \"struct rustls::client::ClientConnection\");``std`\n\n\n`pub use server::ServerConfig[](https://docs.rs/rustls/latest/rustls/server/struct.ServerConfig.html \"struct rustls::server::ServerConfig\");`\n\n\n`pub use server::ServerConnection[](https://docs.rs/rustls/latest/rustls/server/struct.ServerConnection.html \"struct rustls::server::ServerConnection\");``std`\n\n## Modules[\u00a7](https://docs.rs/rustls/latest/rustls/#modules)\n\n[client](https://docs.rs/rustls/latest/rustls/client/index.html \"mod rustls::client\")\n    Items for use in a client.\n\n[compress](https://docs.rs/rustls/latest/rustls/compress/index.html \"mod rustls::compress\")\n    Certificate compression and decompression support\n\n[crypto](https://docs.rs/rustls/latest/rustls/crypto/index.html \"mod rustls::crypto\")\n    Crypto provider interface.\n\n[ffdhe_groups](https://docs.rs/rustls/latest/rustls/ffdhe_groups/index.html \"mod rustls::ffdhe_groups\")\n    This module contains parameters for FFDHE named groups as defined in [RFC 7919 Appendix A](https://datatracker.ietf.org/doc/html/rfc7919#appendix-A).\n\n[kernel](https://docs.rs/rustls/latest/rustls/kernel/index.html \"mod rustls::kernel\")\n    Kernel connection API.\n\n[lock](https://docs.rs/rustls/latest/rustls/lock/index.html \"mod rustls::lock\")\n    APIs abstracting over locking primitives.\n\n[manual](https://docs.rs/rustls/latest/rustls/manual/index.html \"mod rustls::manual\")\n    This is the rustls manual.\n\n[pki_types](https://docs.rs/rustls/latest/rustls/pki_types/index.html \"mod rustls::pki_types\")\n    Re-exports the contents of the [rustls-pki-types](https://docs.rs/rustls-pki-types) crate for easy access\n\n[quic](https://docs.rs/rustls/latest/rustls/quic/index.html \"mod rustls::quic\")\n    APIs for implementing QUIC TLS\n\n[server](https://docs.rs/rustls/latest/rustls/server/index.html \"mod rustls::server\")\n    Items for use in a server.\n\n[sign](https://docs.rs/rustls/latest/rustls/sign/index.html \"mod rustls::sign\")\n    Message signing interfaces.\n\n[ticketer](https://docs.rs/rustls/latest/rustls/ticketer/index.html \"mod rustls::ticketer\")`std` or `hashbrown`\n    APIs for implementing TLS tickets\n\n[time_provider](https://docs.rs/rustls/latest/rustls/time_provider/index.html \"mod rustls::time_provider\")\n    The library\u2019s source of time.\n\n[unbuffered](https://docs.rs/rustls/latest/rustls/unbuffered/index.html \"mod rustls::unbuffered\")\n    Unbuffered connection API\n\n[version](https://docs.rs/rustls/latest/rustls/version/index.html \"mod rustls::version\")\n    All defined protocol versions appear in this module.\n## Structs[\u00a7](https://docs.rs/rustls/latest/rustls/#structs)\n\n[CipherSuiteCommon](https://docs.rs/rustls/latest/rustls/struct.CipherSuiteCommon.html \"struct rustls::CipherSuiteCommon\")\n    Common state for cipher suites (both for TLS 1.2 and TLS 1.3)\n\n[CommonState](https://docs.rs/rustls/latest/rustls/struct.CommonState.html \"struct rustls::CommonState\")\n    Connection state common to both client and server connections.\n\n[ConfigBuilder](https://docs.rs/rustls/latest/rustls/struct.ConfigBuilder.html \"struct rustls::ConfigBuilder\")\n    A [builder](https://rust-unofficial.github.io/patterns/patterns/creational/builder.html) for [`ServerConfig`](https://docs.rs/rustls/latest/rustls/server/struct.ServerConfig.html \"struct rustls::server::ServerConfig\") or [`ClientConfig`](https://docs.rs/rustls/latest/rustls/client/struct.ClientConfig.html \"struct rustls::client::ClientConfig\") values.\n\n[ConnectionCommon](https://docs.rs/rustls/latest/rustls/struct.ConnectionCommon.html \"struct rustls::ConnectionCommon\")\n    Interface shared by client and server connections.\n\n[DigitallySignedStruct](https://docs.rs/rustls/latest/rustls/struct.DigitallySignedStruct.html \"struct rustls::DigitallySignedStruct\")\n    This type combines a [`SignatureScheme`](https://docs.rs/rustls/latest/rustls/enum.SignatureScheme.html \"enum rustls::SignatureScheme\") and a signature payload produced with that scheme.\n\n[DistinguishedName](https://docs.rs/rustls/latest/rustls/struct.DistinguishedName.html \"struct rustls::DistinguishedName\")\n    A `DistinguishedName` is a `Vec<u8>` wrapped in internal types.\n\n[ExtractedSecrets](https://docs.rs/rustls/latest/rustls/struct.ExtractedSecrets.html \"struct rustls::ExtractedSecrets\")\n    Secrets for transmitting/receiving data over a TLS session.\n\n[IoState](https://docs.rs/rustls/latest/rustls/struct.IoState.html \"struct rustls::IoState\")\n    Values of this structure are returned from [`Connection::process_new_packets`](https://docs.rs/rustls/latest/rustls/enum.Connection.html#method.process_new_packets \"method rustls::Connection::process_new_packets\") and tell the caller the current I/O state of the TLS connection.\n\n[KeyLogFile](https://docs.rs/rustls/latest/rustls/struct.KeyLogFile.html \"struct rustls::KeyLogFile\")`std`\n    [`KeyLog`](https://docs.rs/rustls/latest/rustls/trait.KeyLog.html \"trait rustls::KeyLog\") implementation that opens a file whose name is given by the `SSLKEYLOGFILE` environment variable, and writes keys into it.\n\n[NoKeyLog](https://docs.rs/rustls/latest/rustls/struct.NoKeyLog.html \"struct rustls::NoKeyLog\")\n    KeyLog that does exactly nothing.\n\n[OtherError](https://docs.rs/rustls/latest/rustls/struct.OtherError.html \"struct rustls::OtherError\")\n    Any other error that cannot be expressed by a more specific [`Error`](https://docs.rs/rustls/latest/rustls/enum.Error.html \"enum rustls::Error\") variant.\n\n[Reader](https://docs.rs/rustls/latest/rustls/struct.Reader.html \"struct rustls::Reader\")`std`\n    A structure that implements [`std::io::Read`](https://doc.rust-lang.org/nightly/std/io/trait.Read.html \"trait std::io::Read\") for reading plaintext.\n\n[RootCertStore](https://docs.rs/rustls/latest/rustls/struct.RootCertStore.html \"struct rustls::RootCertStore\")\n    A container for root certificates able to provide a root-of-trust for connection authentication.\n\n[Stream](https://docs.rs/rustls/latest/rustls/struct.Stream.html \"struct rustls::Stream\")`std`\n    This type implements `io::Read` and `io::Write`, encapsulating a Connection `C` and an underlying transport `T`, such as a socket.\n\n[StreamOwned](https://docs.rs/rustls/latest/rustls/struct.StreamOwned.html \"struct rustls::StreamOwned\")`std`\n    This type implements `io::Read` and `io::Write`, encapsulating and owning a Connection `C` and an underlying blocking transport `T`, such as a socket.\n\n[SupportedProtocolVersion](https://docs.rs/rustls/latest/rustls/struct.SupportedProtocolVersion.html \"struct rustls::SupportedProtocolVersion\")\n    A TLS protocol version supported by rustls.\n\n[Tls12CipherSuite](https://docs.rs/rustls/latest/rustls/struct.Tls12CipherSuite.html \"struct rustls::Tls12CipherSuite\")`tls12`\n    A TLS 1.2 cipher suite supported by rustls.\n\n[Tls13CipherSuite](https://docs.rs/rustls/latest/rustls/struct.Tls13CipherSuite.html \"struct rustls::Tls13CipherSuite\")\n    A TLS 1.3 cipher suite supported by rustls.\n\n[WantsVerifier](https://docs.rs/rustls/latest/rustls/struct.WantsVerifier.html \"struct rustls::WantsVerifier\")\n    Config builder state where the caller must supply a verifier.\n\n[WantsVersions](https://docs.rs/rustls/latest/rustls/struct.WantsVersions.html \"struct rustls::WantsVersions\")\n    Config builder state where the caller must supply TLS protocol versions.\n\n[Writer](https://docs.rs/rustls/latest/rustls/struct.Writer.html \"struct rustls::Writer\")`std`\n    A structure that implements [`std::io::Write`](https://doc.rust-lang.org/nightly/std/io/trait.Write.html \"trait std::io::Write\") for writing plaintext.\n## Enums[\u00a7](https://docs.rs/rustls/latest/rustls/#enums)\n\n[AlertDescription](https://docs.rs/rustls/latest/rustls/enum.AlertDescription.html \"enum rustls::AlertDescription\")\n    The `AlertDescription` TLS protocol enum. Values in this enum are taken from the various RFCs covering TLS, and are listed by IANA. The `Unknown` item is used when processing unrecognised ordinals.\n\n[CertRevocationListError](https://docs.rs/rustls/latest/rustls/enum.CertRevocationListError.html \"enum rustls::CertRevocationListError\")\n    The ways in which a certificate revocation list (CRL) can be invalid.\n\n[CertificateCompressionAlgorithm](https://docs.rs/rustls/latest/rustls/enum.CertificateCompressionAlgorithm.html \"enum rustls::CertificateCompressionAlgorithm\")\n    The \u201cTLS Certificate Compression Algorithm IDs\u201d TLS protocol enum. Values in this enum are taken from [RFC8879](https://www.rfc-editor.org/rfc/rfc8879.html#section-7.3).\n\n[CertificateError](https://docs.rs/rustls/latest/rustls/enum.CertificateError.html \"enum rustls::CertificateError\")\n    The ways in which certificate validators can express errors.\n\n[CipherSuite](https://docs.rs/rustls/latest/rustls/enum.CipherSuite.html \"enum rustls::CipherSuite\")\n    The `CipherSuite` TLS protocol enum. Values in this enum are taken from the various RFCs covering TLS, and are listed by IANA. The `Unknown` item is used when processing unrecognised ordinals.\n\n[Connection](https://docs.rs/rustls/latest/rustls/enum.Connection.html \"enum rustls::Connection\")`std`\n    A client or server connection.\n\n[ConnectionTrafficSecrets](https://docs.rs/rustls/latest/rustls/enum.ConnectionTrafficSecrets.html \"enum rustls::ConnectionTrafficSecrets\")\n    Secrets used to encrypt/decrypt data in a TLS session.\n\n[ContentType](https://docs.rs/rustls/latest/rustls/enum.ContentType.html \"enum rustls::ContentType\")\n    The `ContentType` TLS protocol enum. Values in this enum are taken from the various RFCs covering TLS, and are listed by IANA. The `Unknown` item is used when processing unrecognised ordinals.\n\n[EncryptedClientHelloError](https://docs.rs/rustls/latest/rustls/enum.EncryptedClientHelloError.html \"enum rustls::EncryptedClientHelloError\")\n    An error that occurred while handling Encrypted Client Hello (ECH).\n\n[Error](https://docs.rs/rustls/latest/rustls/enum.Error.html \"enum rustls::Error\")\n    rustls reports protocol errors using this type.\n\n[ExtendedKeyPurpose](https://docs.rs/rustls/latest/rustls/enum.ExtendedKeyPurpose.html \"enum rustls::ExtendedKeyPurpose\")\n    Extended Key Usage (EKU) purpose values.\n\n[HandshakeKind](https://docs.rs/rustls/latest/rustls/enum.HandshakeKind.html \"enum rustls::HandshakeKind\")\n    Describes which sort of handshake happened.\n\n[HandshakeType](https://docs.rs/rustls/latest/rustls/enum.HandshakeType.html \"enum rustls::HandshakeType\")\n    The `HandshakeType` TLS protocol enum. Values in this enum are taken from the various RFCs covering TLS, and are listed by IANA. The `Unknown` item is used when processing unrecognised ordinals.\n\n[InconsistentKeys](https://docs.rs/rustls/latest/rustls/enum.InconsistentKeys.html \"enum rustls::InconsistentKeys\")\n    Specific failure cases from [`keys_match`](https://docs.rs/rustls/latest/rustls/sign/struct.CertifiedKey.html#method.keys_match \"method rustls::sign::CertifiedKey::keys_match\") or a [`crate::crypto::signer::SigningKey`](https://docs.rs/rustls/latest/rustls/sign/trait.SigningKey.html \"trait rustls::sign::SigningKey\") that cannot produce a corresponding public key.\n\n[InvalidMessage](https://docs.rs/rustls/latest/rustls/enum.InvalidMessage.html \"enum rustls::InvalidMessage\")\n    A corrupt TLS message payload that resulted in an error.\n\n[NamedGroup](https://docs.rs/rustls/latest/rustls/enum.NamedGroup.html \"enum rustls::NamedGroup\")\n    The `NamedGroup` TLS protocol enum. Values in this enum are taken from the various RFCs covering TLS, and are listed by IANA. The `Unknown` item is used when processing unrecognised ordinals.\n\n[PeerIncompatible](https://docs.rs/rustls/latest/rustls/enum.PeerIncompatible.html \"enum rustls::PeerIncompatible\")\n    The set of cases where we failed to make a connection because a peer doesn\u2019t support a TLS version/feature we require.\n\n[PeerMisbehaved](https://docs.rs/rustls/latest/rustls/enum.PeerMisbehaved.html \"enum rustls::PeerMisbehaved\")\n    The set of cases where we failed to make a connection because we thought the peer was misbehaving.\n\n[ProtocolVersion](https://docs.rs/rustls/latest/rustls/enum.ProtocolVersion.html \"enum rustls::ProtocolVersion\")\n    The `ProtocolVersion` TLS protocol enum. Values in this enum are taken from the various RFCs covering TLS, and are listed by IANA. The `Unknown` item is used when processing unrecognised ordinals.\n\n[Side](https://docs.rs/rustls/latest/rustls/enum.Side.html \"enum rustls::Side\")\n    Side of the connection.\n\n[SignatureAlgorithm](https://docs.rs/rustls/latest/rustls/enum.SignatureAlgorithm.html \"enum rustls::SignatureAlgorithm\")\n    The `SignatureAlgorithm` TLS protocol enum. Values in this enum are taken from the various RFCs covering TLS, and are listed by IANA. The `Unknown` item is used when processing unrecognised ordinals.\n\n[SignatureScheme](https://docs.rs/rustls/latest/rustls/enum.SignatureScheme.html \"enum rustls::SignatureScheme\")\n    The `SignatureScheme` TLS protocol enum. Values in this enum are taken from the various RFCs covering TLS, and are listed by IANA. The `Unknown` item is used when processing unrecognised ordinals.\n\n[SupportedCipherSuite](https://docs.rs/rustls/latest/rustls/enum.SupportedCipherSuite.html \"enum rustls::SupportedCipherSuite\")\n    A cipher suite supported by rustls.\n## Statics[\u00a7](https://docs.rs/rustls/latest/rustls/#statics)\n\n[ALL_VERSIONS](https://docs.rs/rustls/latest/rustls/static.ALL_VERSIONS.html \"static rustls::ALL_VERSIONS\")\n    A list of all the protocol versions supported by rustls.\n\n[DEFAULT_VERSIONS](https://docs.rs/rustls/latest/rustls/static.DEFAULT_VERSIONS.html \"static rustls::DEFAULT_VERSIONS\")\n    The version configuration that an application should use by default.\n## Traits[\u00a7](https://docs.rs/rustls/latest/rustls/#traits)\n\n[ConfigSide](https://docs.rs/rustls/latest/rustls/trait.ConfigSide.html \"trait rustls::ConfigSide\")\n    Helper trait to abstract [`ConfigBuilder`](https://docs.rs/rustls/latest/rustls/struct.ConfigBuilder.html \"struct rustls::ConfigBuilder\") over building a [`ClientConfig`](https://docs.rs/rustls/latest/rustls/client/struct.ClientConfig.html \"struct rustls::client::ClientConfig\") or [`ServerConfig`](https://docs.rs/rustls/latest/rustls/server/struct.ServerConfig.html \"struct rustls::server::ServerConfig\").\n\n[KeyLog](https://docs.rs/rustls/latest/rustls/trait.KeyLog.html \"trait rustls::KeyLog\")\n    This trait represents the ability to do something useful with key material, such as logging it to a file for debugging.\n\n[SideData](https://docs.rs/rustls/latest/rustls/trait.SideData.html \"trait rustls::SideData\")\n    Data specific to the peer\u2019s side (client or server).\n",
            "markdown_with_citations": "[](https://docs.rs/rustls/latest/rustls/all.html \"show sidebar\")\n# Crate rustlsCopy item path\nSettings\u27e81\u27e9\nHelp\u27e82\u27e9\nSummarySource\u27e83\u27e9\nExpand description\n## \u00a7\u27e84\u27e9Rustls - a modern TLS library\nRustls is a TLS library that aims to provide a good level of cryptographic security, requires no configuration to achieve that security, and provides no unsafe features or obsolete cryptography by default.\nRustls implements TLS1.2 and TLS1.3 for both clients and servers. See the full list of protocol features\u27e85\u27e9.\n#### \u00a7\u27e86\u27e9Platform support\nWhile Rustls itself is platform independent, by default it uses `aws-lc-rs`\u27e87\u27e9 for implementing the cryptography in TLS. See the aws-lc-rs FAQ\u27e88\u27e9 for more details of the platform/architecture support constraints in aws-lc-rs.\n`ring`\u27e89\u27e9 is also available via the `ring` crate feature: see the supported `ring` target platforms\u27e810\u27e9.\nBy providing a custom instance of the `crypto::CryptoProvider`\u27e811\u27e9 struct, you can replace all cryptography dependencies of rustls. This is a route to being portable to a wider set of architectures and environments, or compliance requirements. See the `crypto::CryptoProvider`\u27e811\u27e9 documentation for more details.\nSpecifying `default-features = false` when depending on rustls will remove the implicit dependency on aws-lc-rs.\nRustls requires Rust 1.71 or later. It has an optional dependency on zlib-rs which requires 1.75 or later.\n#### \u00a7\u27e812\u27e9Cryptography providers\nSince Rustls 0.22 it has been possible to choose the provider of the cryptographic primitives that Rustls uses. This may be appealing if you have specific platform, compliance or feature requirements that aren\u2019t met by the default provider, `aws-lc-rs`\u27e87\u27e9.\nUsers that wish to customize the provider in use can do so when constructing `ClientConfig` and `ServerConfig` instances using the `with_crypto_provider` method on the respective config builder types. See the `crypto::CryptoProvider`\u27e811\u27e9 documentation for more details.\n##### \u00a7\u27e813\u27e9Built-in providers\nRustls ships with two built-in providers controlled by associated crate features:\n  * `aws-lc-rs`\u27e87\u27e9 - enabled by default, available with the `aws_lc_rs` crate feature enabled.\n  * `ring`\u27e89\u27e9 - available with the `ring` crate feature enabled.\n\n\nSee the documentation for `crypto::CryptoProvider`\u27e811\u27e9 for details on how providers are selected.\n##### \u00a7\u27e814\u27e9Third-party providers\nThe community has also started developing third-party providers for Rustls:\n  * `boring-rustls-provider`\u27e815\u27e9 - a work-in-progress provider that uses `boringssl`\u27e816\u27e9 for cryptography.\n  * `rustls-graviola`\u27e817\u27e9 - a provider that uses `graviola`\u27e818\u27e9 for cryptography.\n  * `rustls-mbedtls-provider`\u27e819\u27e9 - a provider that uses `mbedtls`\u27e820\u27e9 for cryptography.\n  * `rustls-openssl`\u27e821\u27e9 - a provider that uses OpenSSL\u27e822\u27e9 for cryptography.\n  * `rustls-rustcrypto`\u27e823\u27e9 - an experimental provider that uses the crypto primitives from `RustCrypto`\u27e824\u27e9 for cryptography.\n  * `rustls-symcrypt`\u27e825\u27e9 - a provider that uses Microsoft\u2019s SymCrypt\u27e826\u27e9 library.\n  * `rustls-wolfcrypt-provider`\u27e827\u27e9 - a work-in-progress provider that uses `wolfCrypt`\u27e828\u27e9 for cryptography.\n\n\n##### \u00a7\u27e829\u27e9Custom provider\nWe also provide a simple example of writing your own provider in the custom provider example\u27e830\u27e9. This example implements a minimal provider using parts of the `RustCrypto`\u27e824\u27e9 ecosystem.\nSee the Making a custom CryptoProvider\u27e831\u27e9 section of the documentation for more information on this topic.\n### \u00a7\u27e832\u27e9Design overview\nRustls is a low-level library. If your goal is to make HTTPS connections you may prefer to use a library built on top of Rustls like hyper\u27e833\u27e9 or ureq\u27e834\u27e9.\n#### \u00a7\u27e835\u27e9Rustls does not take care of network IO\nIt doesn\u2019t make or accept TCP connections, or do DNS, or read or write files.\nOur examples\u27e836\u27e9 directory contains demos that show how to handle I/O using the `stream::Stream`\u27e837\u27e9 helper, as well as more complex asynchronous I/O using `mio`\u27e838\u27e9. If you\u2019re already using Tokio for an async runtime you may prefer to use `tokio-rustls`\u27e839\u27e9 instead of interacting with rustls directly.\n#### \u00a7\u27e840\u27e9Rustls provides encrypted pipes\nThese are the `ServerConnection`\u27e841\u27e9 and `ClientConnection`\u27e842\u27e9 types. You supply raw TLS traffic on the left (via the `read_tls()`\u27e843\u27e9 and `write_tls()`\u27e843\u27e9 methods) and then read/write the plaintext on the right:\n```\n     TLS                  Plaintext\n     ===                  =========\n  read_tls()   +-----------------------+   reader() as io::Read\n          |            |\n     +--------->  ClientConnection  +--------->\n          |     or      |\n     <---------+  ServerConnection  <---------+\n          |            |\n  write_tls()   +-----------------------+   writer() as io::Write\n```\n\n#### \u00a7\u27e844\u27e9Rustls takes care of server certificate verification\nYou do not need to provide anything other than a set of root certificates to trust. Certificate verification cannot be turned off or disabled in the main API.\n### \u00a7\u27e845\u27e9Getting started\nThis is the minimum you need to do to make a TLS client connection.\nFirst we load some root certificates. These are used to authenticate the server. The simplest way is to depend on the `webpki_roots`\u27e846\u27e9 crate which contains the Mozilla set of root certificates.\n```\nlet root_store = rustls::RootCertStore::from_iter(\n  webpki_roots::TLS_SERVER_ROOTS\n    .iter()\n    .cloned(),\n);\n```\n\nNext, we make a `ClientConfig`. You\u2019re likely to make one of these per process, and use it for all connections made by that process.\n```\nlet config = rustls::ClientConfig::builder()\n  .with_root_certificates(root_store)\n  .with_no_client_auth();\n```\n\nNow we can make a connection. You need to provide the server\u2019s hostname so we know what to expect to find in the server\u2019s certificate.\n```\nlet rc_config = Arc::new(config);\nlet example_com = \"example.com\".try_into().unwrap();\nlet mut client = rustls::ClientConnection::new(rc_config, example_com);\n```\n\nNow you should do appropriate IO for the `client` object. If `client.wants_read()` yields true, you should call `client.read_tls()` when the underlying connection has data. Likewise, if `client.wants_write()` yields true, you should call `client.write_tls()` when the underlying connection is able to send data. You should continue doing this as long as the connection is valid.\nThe return types of `read_tls()` and `write_tls()` only tell you if the IO worked. No parsing or processing of the TLS messages is done. After each `read_tls()` you should therefore call `client.process_new_packets()` which parses and processes the messages. Any error returned from `process_new_packets` is fatal to the connection, and will tell you why. For example, if the server\u2019s certificate is expired `process_new_packets` will return `Err(InvalidCertificate(Expired))`. From this point on, `process_new_packets` will not do any new work and will return that error continually.\nYou can extract newly received data by calling `client.reader()` (which implements the `io::Read` trait). You can send data to the peer by calling `client.writer()` (which implements `io::Write` trait). Note that `client.writer().write()` buffers data you send if the TLS connection is not yet established: this is useful for writing (say) a HTTP request, but this is buffered so avoid large amounts of data.\nThe following code uses a fictional socket IO API for illustration, and does not handle errors.\n```\nuse std::io;\nuse rustls::Connection;\nclient.writer().write(b\"GET / HTTP/1.0\\r\\n\\r\\n\").unwrap();\nlet mut socket = connect(\"example.com\", 443);\nloop {\n if client.wants_read() && socket.ready_for_read() {\n  client.read_tls(&mut socket).unwrap();\n  client.process_new_packets().unwrap();\n  let mut plaintext = Vec::new();\n  client.reader().read_to_end(&mut plaintext).unwrap();\n  io::stdout().write(&plaintext).unwrap();\n }\n if client.wants_write() && socket.ready_for_write() {\n  client.write_tls(&mut socket).unwrap();\n }\n socket.wait_for_something_to_happen();\n}\n```\n\n## \u00a7\u27e847\u27e9Examples\nYou can find several client and server examples of varying complexity in the examples\u27e836\u27e9 directory, including `tlsserver-mio`\u27e848\u27e9 and `tlsclient-mio`\u27e849\u27e9 - full worked examples using `mio`\u27e838\u27e9.\n## \u00a7\u27e850\u27e9Manual\nThe rustls manual\u27e851\u27e9 explains design decisions and includes how-to guidance.\n## \u00a7\u27e852\u27e9Crate features\nHere\u2019s a list of what features are exposed by the rustls crate and what they mean.\n  * `std` (enabled by default): enable the high-level (buffered) Connection API and other functionality which relies on the `std` library.\n  * `aws_lc_rs` (enabled by default): makes the rustls crate depend on the `aws-lc-rs`\u27e87\u27e9 crate. Use `rustls::crypto::aws_lc_rs::default_provider().install_default()` to use it as the default `CryptoProvider`, or provide it explicitly when making a `ClientConfig` or `ServerConfig`.\nNote that aws-lc-rs has additional build-time dependencies like cmake. See the documentation\u27e853\u27e9 for details.\n  * `ring`: makes the rustls crate depend on the _ring_ crate for cryptography. Use `rustls::crypto::ring::default_provider().install_default()` to use it as the default `CryptoProvider`, or provide it explicitly when making a `ClientConfig` or `ServerConfig`.\n  * `fips`: enable support for FIPS140-3-approved cryptography, via the `aws-lc-rs`\u27e87\u27e9 crate. This feature enables the `aws_lc_rs` crate feature, which makes the rustls crate depend on aws-lc-rs\u27e854\u27e9. It also changes the default for `ServerConfig::require_ems`\u27e855\u27e9 and `ClientConfig::require_ems`\u27e856\u27e9.\nSee manual::_06_fips\u27e857\u27e9 for more details.\n  * `prefer-post-quantum` (enabled by default): for the `aws-lc-rs`\u27e87\u27e9-backed provider, prioritizes post-quantum secure key exchange by default (using X25519MLKEM768). This feature merely alters the order of `rustls::crypto::aws_lc_rs::DEFAULT_KX_GROUPS`. See the manual\u27e858\u27e9 for more details.\n  * `custom-provider`: disables implicit use of built-in providers (`aws-lc-rs` or `ring`). This forces applications to manually install one, for instance, when using a custom `CryptoProvider`.\n  * `tls12` (enabled by default): enable support for TLS version 1.2. Note that, due to the additive nature of Cargo features and because it is enabled by default, other crates in your dependency graph could re-enable it for your application. If you want to disable TLS 1.2 for security reasons, consider explicitly enabling TLS 1.3 only in the config builder API.\n  * `logging` (enabled by default): make the rustls crate depend on the `log` crate. rustls outputs interesting protocol-level messages at `trace!` and `debug!` level, and protocol-level errors at `warn!` and `error!` level. The log messages do not contain secret key data, and so are safe to archive without affecting session security.\n  * `read_buf`: when building with Rust Nightly, adds support for the unstable `std::io::ReadBuf` and related APIs. This reduces costs from initializing buffers. Will do nothing on non-Nightly releases.\n  * `brotli`: uses the `brotli` crate for RFC8879 certificate compression support.\n  * `zlib`: uses the `zlib-rs` crate for RFC8879 certificate compression support.\n\n\n## Re-exports\u00a7\u27e859\u27e9\n\n`pub use crate::ticketer::TicketRotator[](https://docs.rs/rustls/latest/rustls/ticketer/struct.TicketRotator.html \"struct rustls::ticketer::TicketRotator\");``std`\n\n\n`pub use crate::ticketer::TicketSwitcher[](https://docs.rs/rustls/latest/rustls/ticketer/struct.TicketSwitcher.html \"struct rustls::ticketer::TicketSwitcher\");``std` or `hashbrown`\n\n\n`pub use client::ClientConfig[](https://docs.rs/rustls/latest/rustls/client/struct.ClientConfig.html \"struct rustls::client::ClientConfig\");`\n\n\n`pub use client::ClientConnection[](https://docs.rs/rustls/latest/rustls/client/struct.ClientConnection.html \"struct rustls::client::ClientConnection\");``std`\n\n\n`pub use server::ServerConfig[](https://docs.rs/rustls/latest/rustls/server/struct.ServerConfig.html \"struct rustls::server::ServerConfig\");`\n\n\n`pub use server::ServerConnection[](https://docs.rs/rustls/latest/rustls/server/struct.ServerConnection.html \"struct rustls::server::ServerConnection\");``std`\n\n## Modules\u00a7\u27e860\u27e9\n\nclient\u27e861\u27e9\n    Items for use in a client.\n\ncompress\u27e862\u27e9\n    Certificate compression and decompression support\n\ncrypto\u27e863\u27e9\n    Crypto provider interface.\n\nffdhe_groups\u27e864\u27e9\n    This module contains parameters for FFDHE named groups as defined in RFC 7919 Appendix A\u27e865\u27e9.\n\nkernel\u27e866\u27e9\n    Kernel connection API.\n\nlock\u27e867\u27e9\n    APIs abstracting over locking primitives.\n\nmanual\u27e851\u27e9\n    This is the rustls manual.\n\npki_types\u27e868\u27e9\n    Re-exports the contents of the rustls-pki-types\u27e869\u27e9 crate for easy access\n\nquic\u27e870\u27e9\n    APIs for implementing QUIC TLS\n\nserver\u27e871\u27e9\n    Items for use in a server.\n\nsign\u27e872\u27e9\n    Message signing interfaces.\n\nticketer\u27e873\u27e9`std` or `hashbrown`\n    APIs for implementing TLS tickets\n\ntime_provider\u27e874\u27e9\n    The library\u2019s source of time.\n\nunbuffered\u27e875\u27e9\n    Unbuffered connection API\n\nversion\u27e876\u27e9\n    All defined protocol versions appear in this module.\n## Structs\u00a7\u27e877\u27e9\n\nCipherSuiteCommon\u27e878\u27e9\n    Common state for cipher suites (both for TLS 1.2 and TLS 1.3)\n\nCommonState\u27e879\u27e9\n    Connection state common to both client and server connections.\n\nConfigBuilder\u27e880\u27e9\n    A builder\u27e881\u27e9 for `ServerConfig`\u27e882\u27e9 or `ClientConfig`\u27e883\u27e9 values.\n\nConnectionCommon\u27e884\u27e9\n    Interface shared by client and server connections.\n\nDigitallySignedStruct\u27e885\u27e9\n    This type combines a `SignatureScheme`\u27e886\u27e9 and a signature payload produced with that scheme.\n\nDistinguishedName\u27e887\u27e9\n    A `DistinguishedName` is a `Vec<u8>` wrapped in internal types.\n\nExtractedSecrets\u27e888\u27e9\n    Secrets for transmitting/receiving data over a TLS session.\n\nIoState\u27e889\u27e9\n    Values of this structure are returned from `Connection::process_new_packets`\u27e890\u27e9 and tell the caller the current I/O state of the TLS connection.\n\nKeyLogFile\u27e891\u27e9`std`\n    `KeyLog`\u27e892\u27e9 implementation that opens a file whose name is given by the `SSLKEYLOGFILE` environment variable, and writes keys into it.\n\nNoKeyLog\u27e893\u27e9\n    KeyLog that does exactly nothing.\n\nOtherError\u27e894\u27e9\n    Any other error that cannot be expressed by a more specific `Error`\u27e895\u27e9 variant.\n\nReader\u27e896\u27e9`std`\n    A structure that implements `std::io::Read`\u27e897\u27e9 for reading plaintext.\n\nRootCertStore\u27e898\u27e9\n    A container for root certificates able to provide a root-of-trust for connection authentication.\n\nStream\u27e837\u27e9`std`\n    This type implements `io::Read` and `io::Write`, encapsulating a Connection `C` and an underlying transport `T`, such as a socket.\n\nStreamOwned\u27e899\u27e9`std`\n    This type implements `io::Read` and `io::Write`, encapsulating and owning a Connection `C` and an underlying blocking transport `T`, such as a socket.\n\nSupportedProtocolVersion\u27e8100\u27e9\n    A TLS protocol version supported by rustls.\n\nTls12CipherSuite\u27e8101\u27e9`tls12`\n    A TLS 1.2 cipher suite supported by rustls.\n\nTls13CipherSuite\u27e8102\u27e9\n    A TLS 1.3 cipher suite supported by rustls.\n\nWantsVerifier\u27e8103\u27e9\n    Config builder state where the caller must supply a verifier.\n\nWantsVersions\u27e8104\u27e9\n    Config builder state where the caller must supply TLS protocol versions.\n\nWriter\u27e8105\u27e9`std`\n    A structure that implements `std::io::Write`\u27e8106\u27e9 for writing plaintext.\n## Enums\u00a7\u27e8107\u27e9\n\nAlertDescription\u27e8108\u27e9\n    The `AlertDescription` TLS protocol enum. Values in this enum are taken from the various RFCs covering TLS, and are listed by IANA. The `Unknown` item is used when processing unrecognised ordinals.\n\nCertRevocationListError\u27e8109\u27e9\n    The ways in which a certificate revocation list (CRL) can be invalid.\n\nCertificateCompressionAlgorithm\u27e8110\u27e9\n    The \u201cTLS Certificate Compression Algorithm IDs\u201d TLS protocol enum. Values in this enum are taken from RFC8879\u27e8111\u27e9.\n\nCertificateError\u27e8112\u27e9\n    The ways in which certificate validators can express errors.\n\nCipherSuite\u27e8113\u27e9\n    The `CipherSuite` TLS protocol enum. Values in this enum are taken from the various RFCs covering TLS, and are listed by IANA. The `Unknown` item is used when processing unrecognised ordinals.\n\nConnection\u27e8114\u27e9`std`\n    A client or server connection.\n\nConnectionTrafficSecrets\u27e8115\u27e9\n    Secrets used to encrypt/decrypt data in a TLS session.\n\nContentType\u27e8116\u27e9\n    The `ContentType` TLS protocol enum. Values in this enum are taken from the various RFCs covering TLS, and are listed by IANA. The `Unknown` item is used when processing unrecognised ordinals.\n\nEncryptedClientHelloError\u27e8117\u27e9\n    An error that occurred while handling Encrypted Client Hello (ECH).\n\nError\u27e895\u27e9\n    rustls reports protocol errors using this type.\n\nExtendedKeyPurpose\u27e8118\u27e9\n    Extended Key Usage (EKU) purpose values.\n\nHandshakeKind\u27e8119\u27e9\n    Describes which sort of handshake happened.\n\nHandshakeType\u27e8120\u27e9\n    The `HandshakeType` TLS protocol enum. Values in this enum are taken from the various RFCs covering TLS, and are listed by IANA. The `Unknown` item is used when processing unrecognised ordinals.\n\nInconsistentKeys\u27e8121\u27e9\n    Specific failure cases from `keys_match`\u27e8122\u27e9 or a `crate::crypto::signer::SigningKey`\u27e8123\u27e9 that cannot produce a corresponding public key.\n\nInvalidMessage\u27e8124\u27e9\n    A corrupt TLS message payload that resulted in an error.\n\nNamedGroup\u27e8125\u27e9\n    The `NamedGroup` TLS protocol enum. Values in this enum are taken from the various RFCs covering TLS, and are listed by IANA. The `Unknown` item is used when processing unrecognised ordinals.\n\nPeerIncompatible\u27e8126\u27e9\n    The set of cases where we failed to make a connection because a peer doesn\u2019t support a TLS version/feature we require.\n\nPeerMisbehaved\u27e8127\u27e9\n    The set of cases where we failed to make a connection because we thought the peer was misbehaving.\n\nProtocolVersion\u27e8128\u27e9\n    The `ProtocolVersion` TLS protocol enum. Values in this enum are taken from the various RFCs covering TLS, and are listed by IANA. The `Unknown` item is used when processing unrecognised ordinals.\n\nSide\u27e8129\u27e9\n    Side of the connection.\n\nSignatureAlgorithm\u27e8130\u27e9\n    The `SignatureAlgorithm` TLS protocol enum. Values in this enum are taken from the various RFCs covering TLS, and are listed by IANA. The `Unknown` item is used when processing unrecognised ordinals.\n\nSignatureScheme\u27e886\u27e9\n    The `SignatureScheme` TLS protocol enum. Values in this enum are taken from the various RFCs covering TLS, and are listed by IANA. The `Unknown` item is used when processing unrecognised ordinals.\n\nSupportedCipherSuite\u27e8131\u27e9\n    A cipher suite supported by rustls.\n## Statics\u00a7\u27e8132\u27e9\n\nALL_VERSIONS\u27e8133\u27e9\n    A list of all the protocol versions supported by rustls.\n\nDEFAULT_VERSIONS\u27e8134\u27e9\n    The version configuration that an application should use by default.\n## Traits\u00a7\u27e8135\u27e9\n\nConfigSide\u27e8136\u27e9\n    Helper trait to abstract `ConfigBuilder`\u27e880\u27e9 over building a `ClientConfig`\u27e883\u27e9 or `ServerConfig`\u27e882\u27e9.\n\nKeyLog\u27e892\u27e9\n    This trait represents the ability to do something useful with key material, such as logging it to a file for debugging.\n\nSideData\u27e8137\u27e9\n    Data specific to the peer\u2019s side (client or server).\n",
            "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://docs.rs/rustls/latest/settings.html: Settings\n\u27e82\u27e9 https://docs.rs/rustls/latest/help.html: Help\n\u27e83\u27e9 https://docs.rs/rustls/latest/src/rustls/lib.rs.html#1-715: Source\n\u27e84\u27e9 https://docs.rs/rustls/latest/rustls/#rustls---a-modern-tls-library: \u00a7\n\u27e85\u27e9 https://docs.rs/rustls/latest/rustls/manual/_04_features/index.html: mod rustls::manual::_04_features - the full list of protocol features\n\u27e86\u27e9 https://docs.rs/rustls/latest/rustls/#platform-support: \u00a7\n\u27e87\u27e9 https://crates.io/crates/aws-lc-rs: `aws-lc-rs`\n\u27e88\u27e9 https://aws.github.io/aws-lc-rs/faq.html#can-i-run-aws-lc-rs-on-x-platform-or-architecture: the aws-lc-rs FAQ\n\u27e89\u27e9 https://crates.io/crates/ring: `ring`\n\u27e810\u27e9 https://github.com/briansmith/ring/blob/2e8363b433fa3b3962c877d9ed2e9145612f3160/include/ring-core/target.h#L18-L64: the supported `ring` target platforms\n\u27e811\u27e9 https://docs.rs/rustls/latest/rustls/crypto/struct.CryptoProvider.html: struct rustls::crypto::CryptoProvider - `crypto::CryptoProvider`\n\u27e812\u27e9 https://docs.rs/rustls/latest/rustls/#cryptography-providers: \u00a7\n\u27e813\u27e9 https://docs.rs/rustls/latest/rustls/#built-in-providers: \u00a7\n\u27e814\u27e9 https://docs.rs/rustls/latest/rustls/#third-party-providers: \u00a7\n\u27e815\u27e9 https://github.com/janrueth/boring-rustls-provider: `boring-rustls-provider`\n\u27e816\u27e9 https://github.com/google/boringssl: `boringssl`\n\u27e817\u27e9 https://crates.io/crates/rustls-graviola: `rustls-graviola`\n\u27e818\u27e9 https://github.com/ctz/graviola: `graviola`\n\u27e819\u27e9 https://github.com/fortanix/rustls-mbedtls-provider: `rustls-mbedtls-provider`\n\u27e820\u27e9 https://github.com/Mbed-TLS/mbedtls: `mbedtls`\n\u27e821\u27e9 https://github.com/tofay/rustls-openssl: `rustls-openssl`\n\u27e822\u27e9 https://openssl-library.org/: OpenSSL\n\u27e823\u27e9 https://github.com/RustCrypto/rustls-rustcrypto: `rustls-rustcrypto`\n\u27e824\u27e9 https://github.com/RustCrypto: `RustCrypto`\n\u27e825\u27e9 https://github.com/microsoft/rustls-symcrypt: `rustls-symcrypt`\n\u27e826\u27e9 https://github.com/microsoft/SymCrypt: SymCrypt\n\u27e827\u27e9 https://github.com/wolfSSL/rustls-wolfcrypt-provider: `rustls-wolfcrypt-provider`\n\u27e828\u27e9 https://www.wolfssl.com/products/wolfcrypt: `wolfCrypt`\n\u27e829\u27e9 https://docs.rs/rustls/latest/rustls/#custom-provider: \u00a7\n\u27e830\u27e9 https://github.com/rustls/rustls/tree/main/provider-example/: custom provider example\n\u27e831\u27e9 https://docs.rs/rustls/latest/rustls/crypto/struct.CryptoProvider.html#making-a-custom-cryptoprovider: Making a custom CryptoProvider\n\u27e832\u27e9 https://docs.rs/rustls/latest/rustls/#design-overview: \u00a7\n\u27e833\u27e9 https://crates.io/crates/hyper: hyper\n\u27e834\u27e9 https://crates.io/crates/ureq: ureq\n\u27e835\u27e9 https://docs.rs/rustls/latest/rustls/#rustls-does-not-take-care-of-network-io: \u00a7\n\u27e836\u27e9 https://github.com/rustls/rustls/tree/main/examples: examples\n\u27e837\u27e9 https://docs.rs/rustls/latest/rustls/struct.Stream.html: struct rustls::Stream - `stream::Stream`\n\u27e838\u27e9 https://docs.rs/mio/latest/mio/: `mio`\n\u27e839\u27e9 https://github.com/rustls/tokio-rustls: `tokio-rustls`\n\u27e840\u27e9 https://docs.rs/rustls/latest/rustls/#rustls-provides-encrypted-pipes: \u00a7\n\u27e841\u27e9 https://docs.rs/rustls/latest/rustls/server/struct.ServerConnection.html: struct rustls::server::ServerConnection - `ServerConnection`\n\u27e842\u27e9 https://docs.rs/rustls/latest/rustls/client/struct.ClientConnection.html: struct rustls::client::ClientConnection - `ClientConnection`\n\u27e843\u27e9 https://docs.rs/rustls/latest/rustls/enum.Connection.html#method.read_tls: method rustls::Connection::read_tls - `read_tls()`\n\u27e844\u27e9 https://docs.rs/rustls/latest/rustls/#rustls-takes-care-of-server-certificate-verification: \u00a7\n\u27e845\u27e9 https://docs.rs/rustls/latest/rustls/#getting-started: \u00a7\n\u27e846\u27e9 https://crates.io/crates/webpki-roots: `webpki_roots`\n\u27e847\u27e9 https://docs.rs/rustls/latest/rustls/#examples: \u00a7\n\u27e848\u27e9 https://github.com/rustls/rustls/blob/main/examples/src/bin/tlsserver-mio.rs: `tlsserver-mio`\n\u27e849\u27e9 https://github.com/rustls/rustls/blob/main/examples/src/bin/tlsclient-mio.rs: `tlsclient-mio`\n\u27e850\u27e9 https://docs.rs/rustls/latest/rustls/#manual: \u00a7\n\u27e851\u27e9 https://docs.rs/rustls/latest/rustls/manual/index.html: mod rustls::manual - rustls manual\n\u27e852\u27e9 https://docs.rs/rustls/latest/rustls/#crate-features: \u00a7\n\u27e853\u27e9 https://aws.github.io/aws-lc-rs/requirements/index.html: the documentation\n\u27e854\u27e9 https://github.com/aws/aws-lc-rs: aws-lc-rs\n\u27e855\u27e9 https://docs.rs/rustls/latest/rustls/server/struct.ServerConfig.html#structfield.require_ems: field rustls::server::ServerConfig::require_ems - `ServerConfig::require_ems`\n\u27e856\u27e9 https://docs.rs/rustls/latest/rustls/client/struct.ClientConfig.html#structfield.require_ems: field rustls::client::ClientConfig::require_ems - `ClientConfig::require_ems`\n\u27e857\u27e9 https://docs.rs/rustls/latest/rustls/manual/_06_fips/index.html: mod rustls::manual::_06_fips - manual::_06_fips\n\u27e858\u27e9 https://docs.rs/rustls/latest/rustls/manual/_05_defaults/index.html#about-the-post-quantum-secure-key-exchange-x25519mlkem768: mod rustls::manual::_05_defaults - the manual\n\u27e859\u27e9 https://docs.rs/rustls/latest/rustls/#reexports: \u00a7\n\u27e860\u27e9 https://docs.rs/rustls/latest/rustls/#modules: \u00a7\n\u27e861\u27e9 https://docs.rs/rustls/latest/rustls/client/index.html: mod rustls::client - client\n\u27e862\u27e9 https://docs.rs/rustls/latest/rustls/compress/index.html: mod rustls::compress - compress\n\u27e863\u27e9 https://docs.rs/rustls/latest/rustls/crypto/index.html: mod rustls::crypto - crypto\n\u27e864\u27e9 https://docs.rs/rustls/latest/rustls/ffdhe_groups/index.html: mod rustls::ffdhe_groups - ffdhe_groups\n\u27e865\u27e9 https://datatracker.ietf.org/doc/html/rfc7919#appendix-A: RFC 7919 Appendix A\n\u27e866\u27e9 https://docs.rs/rustls/latest/rustls/kernel/index.html: mod rustls::kernel - kernel\n\u27e867\u27e9 https://docs.rs/rustls/latest/rustls/lock/index.html: mod rustls::lock - lock\n\u27e868\u27e9 https://docs.rs/rustls/latest/rustls/pki_types/index.html: mod rustls::pki_types - pki_types\n\u27e869\u27e9 https://docs.rs/rustls-pki-types: rustls-pki-types\n\u27e870\u27e9 https://docs.rs/rustls/latest/rustls/quic/index.html: mod rustls::quic - quic\n\u27e871\u27e9 https://docs.rs/rustls/latest/rustls/server/index.html: mod rustls::server - server\n\u27e872\u27e9 https://docs.rs/rustls/latest/rustls/sign/index.html: mod rustls::sign - sign\n\u27e873\u27e9 https://docs.rs/rustls/latest/rustls/ticketer/index.html: mod rustls::ticketer - ticketer\n\u27e874\u27e9 https://docs.rs/rustls/latest/rustls/time_provider/index.html: mod rustls::time_provider - time_provider\n\u27e875\u27e9 https://docs.rs/rustls/latest/rustls/unbuffered/index.html: mod rustls::unbuffered - unbuffered\n\u27e876\u27e9 https://docs.rs/rustls/latest/rustls/version/index.html: mod rustls::version - version\n\u27e877\u27e9 https://docs.rs/rustls/latest/rustls/#structs: \u00a7\n\u27e878\u27e9 https://docs.rs/rustls/latest/rustls/struct.CipherSuiteCommon.html: struct rustls::CipherSuiteCommon - CipherSuiteCommon\n\u27e879\u27e9 https://docs.rs/rustls/latest/rustls/struct.CommonState.html: struct rustls::CommonState - CommonState\n\u27e880\u27e9 https://docs.rs/rustls/latest/rustls/struct.ConfigBuilder.html: struct rustls::ConfigBuilder - ConfigBuilder\n\u27e881\u27e9 https://rust-unofficial.github.io/patterns/patterns/creational/builder.html: builder\n\u27e882\u27e9 https://docs.rs/rustls/latest/rustls/server/struct.ServerConfig.html: struct rustls::server::ServerConfig - `ServerConfig`\n\u27e883\u27e9 https://docs.rs/rustls/latest/rustls/client/struct.ClientConfig.html: struct rustls::client::ClientConfig - `ClientConfig`\n\u27e884\u27e9 https://docs.rs/rustls/latest/rustls/struct.ConnectionCommon.html: struct rustls::ConnectionCommon - ConnectionCommon\n\u27e885\u27e9 https://docs.rs/rustls/latest/rustls/struct.DigitallySignedStruct.html: struct rustls::DigitallySignedStruct - DigitallySignedStruct\n\u27e886\u27e9 https://docs.rs/rustls/latest/rustls/enum.SignatureScheme.html: enum rustls::SignatureScheme - `SignatureScheme`\n\u27e887\u27e9 https://docs.rs/rustls/latest/rustls/struct.DistinguishedName.html: struct rustls::DistinguishedName - DistinguishedName\n\u27e888\u27e9 https://docs.rs/rustls/latest/rustls/struct.ExtractedSecrets.html: struct rustls::ExtractedSecrets - ExtractedSecrets\n\u27e889\u27e9 https://docs.rs/rustls/latest/rustls/struct.IoState.html: struct rustls::IoState - IoState\n\u27e890\u27e9 https://docs.rs/rustls/latest/rustls/enum.Connection.html#method.process_new_packets: method rustls::Connection::process_new_packets - `Connection::process_new_packets`\n\u27e891\u27e9 https://docs.rs/rustls/latest/rustls/struct.KeyLogFile.html: struct rustls::KeyLogFile - KeyLogFile\n\u27e892\u27e9 https://docs.rs/rustls/latest/rustls/trait.KeyLog.html: trait rustls::KeyLog - `KeyLog`\n\u27e893\u27e9 https://docs.rs/rustls/latest/rustls/struct.NoKeyLog.html: struct rustls::NoKeyLog - NoKeyLog\n\u27e894\u27e9 https://docs.rs/rustls/latest/rustls/struct.OtherError.html: struct rustls::OtherError - OtherError\n\u27e895\u27e9 https://docs.rs/rustls/latest/rustls/enum.Error.html: enum rustls::Error - `Error`\n\u27e896\u27e9 https://docs.rs/rustls/latest/rustls/struct.Reader.html: struct rustls::Reader - Reader\n\u27e897\u27e9 https://doc.rust-lang.org/nightly/std/io/trait.Read.html: trait std::io::Read - `std::io::Read`\n\u27e898\u27e9 https://docs.rs/rustls/latest/rustls/struct.RootCertStore.html: struct rustls::RootCertStore - RootCertStore\n\u27e899\u27e9 https://docs.rs/rustls/latest/rustls/struct.StreamOwned.html: struct rustls::StreamOwned - StreamOwned\n\u27e8100\u27e9 https://docs.rs/rustls/latest/rustls/struct.SupportedProtocolVersion.html: struct rustls::SupportedProtocolVersion - SupportedProtocolVersion\n\u27e8101\u27e9 https://docs.rs/rustls/latest/rustls/struct.Tls12CipherSuite.html: struct rustls::Tls12CipherSuite - Tls12CipherSuite\n\u27e8102\u27e9 https://docs.rs/rustls/latest/rustls/struct.Tls13CipherSuite.html: struct rustls::Tls13CipherSuite - Tls13CipherSuite\n\u27e8103\u27e9 https://docs.rs/rustls/latest/rustls/struct.WantsVerifier.html: struct rustls::WantsVerifier - WantsVerifier\n\u27e8104\u27e9 https://docs.rs/rustls/latest/rustls/struct.WantsVersions.html: struct rustls::WantsVersions - WantsVersions\n\u27e8105\u27e9 https://docs.rs/rustls/latest/rustls/struct.Writer.html: struct rustls::Writer - Writer\n\u27e8106\u27e9 https://doc.rust-lang.org/nightly/std/io/trait.Write.html: trait std::io::Write - `std::io::Write`\n\u27e8107\u27e9 https://docs.rs/rustls/latest/rustls/#enums: \u00a7\n\u27e8108\u27e9 https://docs.rs/rustls/latest/rustls/enum.AlertDescription.html: enum rustls::AlertDescription - AlertDescription\n\u27e8109\u27e9 https://docs.rs/rustls/latest/rustls/enum.CertRevocationListError.html: enum rustls::CertRevocationListError - CertRevocationListError\n\u27e8110\u27e9 https://docs.rs/rustls/latest/rustls/enum.CertificateCompressionAlgorithm.html: enum rustls::CertificateCompressionAlgorithm - CertificateCompressionAlgorithm\n\u27e8111\u27e9 https://www.rfc-editor.org/rfc/rfc8879.html#section-7.3: RFC8879\n\u27e8112\u27e9 https://docs.rs/rustls/latest/rustls/enum.CertificateError.html: enum rustls::CertificateError - CertificateError\n\u27e8113\u27e9 https://docs.rs/rustls/latest/rustls/enum.CipherSuite.html: enum rustls::CipherSuite - CipherSuite\n\u27e8114\u27e9 https://docs.rs/rustls/latest/rustls/enum.Connection.html: enum rustls::Connection - Connection\n\u27e8115\u27e9 https://docs.rs/rustls/latest/rustls/enum.ConnectionTrafficSecrets.html: enum rustls::ConnectionTrafficSecrets - ConnectionTrafficSecrets\n\u27e8116\u27e9 https://docs.rs/rustls/latest/rustls/enum.ContentType.html: enum rustls::ContentType - ContentType\n\u27e8117\u27e9 https://docs.rs/rustls/latest/rustls/enum.EncryptedClientHelloError.html: enum rustls::EncryptedClientHelloError - EncryptedClientHelloError\n\u27e8118\u27e9 https://docs.rs/rustls/latest/rustls/enum.ExtendedKeyPurpose.html: enum rustls::ExtendedKeyPurpose - ExtendedKeyPurpose\n\u27e8119\u27e9 https://docs.rs/rustls/latest/rustls/enum.HandshakeKind.html: enum rustls::HandshakeKind - HandshakeKind\n\u27e8120\u27e9 https://docs.rs/rustls/latest/rustls/enum.HandshakeType.html: enum rustls::HandshakeType - HandshakeType\n\u27e8121\u27e9 https://docs.rs/rustls/latest/rustls/enum.InconsistentKeys.html: enum rustls::InconsistentKeys - InconsistentKeys\n\u27e8122\u27e9 https://docs.rs/rustls/latest/rustls/sign/struct.CertifiedKey.html#method.keys_match: method rustls::sign::CertifiedKey::keys_match - `keys_match`\n\u27e8123\u27e9 https://docs.rs/rustls/latest/rustls/sign/trait.SigningKey.html: trait rustls::sign::SigningKey - `crate::crypto::signer::SigningKey`\n\u27e8124\u27e9 https://docs.rs/rustls/latest/rustls/enum.InvalidMessage.html: enum rustls::InvalidMessage - InvalidMessage\n\u27e8125\u27e9 https://docs.rs/rustls/latest/rustls/enum.NamedGroup.html: enum rustls::NamedGroup - NamedGroup\n\u27e8126\u27e9 https://docs.rs/rustls/latest/rustls/enum.PeerIncompatible.html: enum rustls::PeerIncompatible - PeerIncompatible\n\u27e8127\u27e9 https://docs.rs/rustls/latest/rustls/enum.PeerMisbehaved.html: enum rustls::PeerMisbehaved - PeerMisbehaved\n\u27e8128\u27e9 https://docs.rs/rustls/latest/rustls/enum.ProtocolVersion.html: enum rustls::ProtocolVersion - ProtocolVersion\n\u27e8129\u27e9 https://docs.rs/rustls/latest/rustls/enum.Side.html: enum rustls::Side - Side\n\u27e8130\u27e9 https://docs.rs/rustls/latest/rustls/enum.SignatureAlgorithm.html: enum rustls::SignatureAlgorithm - SignatureAlgorithm\n\u27e8131\u27e9 https://docs.rs/rustls/latest/rustls/enum.SupportedCipherSuite.html: enum rustls::SupportedCipherSuite - SupportedCipherSuite\n\u27e8132\u27e9 https://docs.rs/rustls/latest/rustls/#statics: \u00a7\n\u27e8133\u27e9 https://docs.rs/rustls/latest/rustls/static.ALL_VERSIONS.html: static rustls::ALL_VERSIONS - ALL_VERSIONS\n\u27e8134\u27e9 https://docs.rs/rustls/latest/rustls/static.DEFAULT_VERSIONS.html: static rustls::DEFAULT_VERSIONS - DEFAULT_VERSIONS\n\u27e8135\u27e9 https://docs.rs/rustls/latest/rustls/#traits: \u00a7\n\u27e8136\u27e9 https://docs.rs/rustls/latest/rustls/trait.ConfigSide.html: trait rustls::ConfigSide - ConfigSide\n\u27e8137\u27e9 https://docs.rs/rustls/latest/rustls/trait.SideData.html: trait rustls::SideData - SideData\n",
            "fit_markdown": "",
            "fit_html": ""
          },
          "downloads": 0,
          "github_stars": 0,
          "dependencies": [],
          "features": {},
          "code_snippets": [],
          "readme_sections": {},
          "librs_downloads": null,
          "source": "crates.io",
          "enhanced_scraping": {},
          "enhanced_features": [],
          "enhanced_dependencies": [],
          "readme_summary": "The `rustls` crate is a modern, secure, and platform-independent TLS library implementing TLS 1.2 and 1.3 for both clients and servers. It emphasizes cryptographic security with no unsafe features or obsolete algorithms, supports customizable cryptography providers (e.g., `aws-lc-rs`, `ring`, or third-party options), and offers flexibility for integration into various environments. Designed as a low-level library, it is ideal for building secure communication protocols or can be used with higher-level libraries like `hyper` for HTTPS.",
          "feature_summary": null,
          "use_case": "Cryptography",
          "score": 7.0,
          "factual_counterfactual": "### Pair 1: Cryptographic Security\n\u2705 **Factual:** Rustls implements TLS 1.2 and TLS 1.3, ensuring modern cryptographic security without requiring unsafe features or obsolete cryptography by default.  \n\u274c **Counterfactual:** Rustls supports TLS 1.1 and SSL 3.0 for backward compatibility with older systems.  \n\n---\n\n### Pair 2: Platform Independence\n\u2705 **Factual:** Rustls is platform-independent but uses `aws-lc-rs` by default for cryptographic operations, which may have platform-specific constraints.  \n\u274c **Counterfactual:** Rustls is tied exclusively to the Linux platform and cannot be used on Windows or macOS without major modifications.  \n\n---\n\n### Pair 3: HTTPS Libraries\n\u2705 **Factual:** Rustls is a low-level library, and for HTTPS connections, users are encouraged to use higher-level libraries like `hyper` or `ureq` that build on Rustls.  \n\u274c **Counterfactual:** Rustls includes built-in support for making HTTPS requests directly without requiring any external libraries.",
          "source_analysis": null,
          "user_behavior": null,
          "security": null
        }
      },
      "irl_score": 8.6,
      "execution_id": "exec-d23b334f-15d786b5-1751264173",
      "timestamp": "2025-06-30T06:16:13.761282+00:00",
      "canon_version": "1.3.0"
    },
    "rule_zero_compliant": true
  }
]