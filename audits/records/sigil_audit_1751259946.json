[
  {
    "execution_id": "exec-9742b013-d18a297e-1751259932",
    "timestamp": "2025-06-30T05:05:32.850752+00:00",
    "sacred_chain": {
      "input_data": "structopt",
      "context_sources": [
        "crates.io",
        "github.com",
        "lib.rs",
        "docs.rs"
      ],
      "reasoning_steps": [
        "Input canonicalized: 'structopt' -> 'structopt'",
        "Context gathered from 4 validated sources",
        "Metadata extracted: 4 fields",
        "Documentation analyzed: quality 7.0",
        "Sentiment analyzed: positive",
        "Ecosystem analyzed: utilities",
        "Quality score synthesized: 7.50",
        "Trust decision: DEFER - Insufficient data for decision",
        "IRL confidence: 8.600"
      ],
      "suggestion": "ALLOW: Positive community sentiment",
      "verdict": "DEFER",
      "audit_info": {
        "metadata": {
          "name": "structopt",
          "type": "rust_crate",
          "source": "manual_input",
          "extraction_method": "irl_engine"
        },
        "sentiment": {
          "quality_score": 7.0,
          "completeness": 0.8,
          "examples_present": true,
          "api_documented": true
        },
        "ecosystem": {
          "overall": "positive",
          "positive_mentions": 10,
          "negative_mentions": 2,
          "neutral_mentions": 5,
          "total_mentions": 17
        },
        "quality_score": 7.5,
        "verdict_reason": "Insufficient data for decision",
        "sanitized_documentation": {
          "crates_io": {
            "url": "https://crates.io/crates/structopt",
            "title": "structopt v0.3.26",
            "content": {
              "raw_markdown": "#  structopt v0.3.26\nParse command line argument by defining a struct. \n  * [ #docopt ](https://crates.io/keywords/docopt)\n  * [ #clap ](https://crates.io/keywords/clap)\n  * [ #derive ](https://crates.io/keywords/derive)\n  * [ #cli ](https://crates.io/keywords/cli)\n\n\n  * [ Readme ](https://crates.io/crates/structopt)\n  * [ 60 Versions ](https://crates.io/crates/structopt/versions)\n  * [ Dependencies ](https://crates.io/crates/structopt/dependencies)\n  * [ Dependents ](https://crates.io/crates/structopt/reverse_dependencies)\n\n\n## Metadata\nover 3 years ago \n2018 edition \n[ Apache-2.0 ](https://choosealicense.com/licenses/apache-2.0) OR [ MIT ](https://choosealicense.com/licenses/mit)\n52.5 KiB \n## Install\nRun the following Cargo command in your project directory:\ncargo add structopt\nOr add the following line to your Cargo.toml:\nstructopt = \"0.3.26\"\n## Documentation\n[ docs.rs/structopt ](https://docs.rs/structopt)\n## Repository\n[ github.com/TeXitoi/structopt ](https://github.com/TeXitoi/structopt)\n## Owners\n## Categories\n  * [Command-line interface](https://crates.io/categories/command-line-interface)\n\n\n[ Report crate ](https://crates.io/support?crate=structopt&inquire=crate-violation)\n### Stats Overview\n62,128,133 Downloads all time\n60 Versions published\n#### Downloads over the last 90 days\nDisplay as \nStacked \n  * Stacked \n  * Unstacked \n\n\nLoading\u2026\n",
              "markdown_with_citations": "#  structopt v0.3.26\nParse command line argument by defining a struct. \n  *  #docopt \u27e81\u27e9\n  *  #clap \u27e82\u27e9\n  *  #derive \u27e83\u27e9\n  *  #cli \u27e84\u27e9\n\n\n  *  Readme \u27e85\u27e9\n  *  60 Versions \u27e86\u27e9\n  *  Dependencies \u27e87\u27e9\n  *  Dependents \u27e88\u27e9\n\n\n## Metadata\nover 3 years ago \n2018 edition \n Apache-2.0 \u27e89\u27e9 OR  MIT \u27e810\u27e9\n52.5 KiB \n## Install\nRun the following Cargo command in your project directory:\ncargo add structopt\nOr add the following line to your Cargo.toml:\nstructopt = \"0.3.26\"\n## Documentation\n docs.rs/structopt \u27e811\u27e9\n## Repository\n github.com/TeXitoi/structopt \u27e812\u27e9\n## Owners\n## Categories\n  * Command-line interface\u27e813\u27e9\n\n\n Report crate \u27e814\u27e9\n### Stats Overview\n62,128,133 Downloads all time\n60 Versions published\n#### Downloads over the last 90 days\nDisplay as \nStacked \n  * Stacked \n  * Unstacked \n\n\nLoading\u2026\n",
              "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://crates.io/keywords/docopt:  #docopt \n\u27e82\u27e9 https://crates.io/keywords/clap:  #clap \n\u27e83\u27e9 https://crates.io/keywords/derive:  #derive \n\u27e84\u27e9 https://crates.io/keywords/cli:  #cli \n\u27e85\u27e9 https://crates.io/crates/structopt:  Readme \n\u27e86\u27e9 https://crates.io/crates/structopt/versions:  60 Versions \n\u27e87\u27e9 https://crates.io/crates/structopt/dependencies:  Dependencies \n\u27e88\u27e9 https://crates.io/crates/structopt/reverse_dependencies:  Dependents \n\u27e89\u27e9 https://choosealicense.com/licenses/apache-2.0:  Apache-2.0 \n\u27e810\u27e9 https://choosealicense.com/licenses/mit:  MIT \n\u27e811\u27e9 https://docs.rs/structopt:  docs.rs/structopt \n\u27e812\u27e9 https://github.com/TeXitoi/structopt:  github.com/TeXitoi/structopt \n\u27e813\u27e9 https://crates.io/categories/command-line-interface: Command-line interface\n\u27e814\u27e9 https://crates.io/support?crate=structopt&inquire=crate-violation:  Report crate \n",
              "fit_markdown": "",
              "fit_html": ""
            },
            "structured_data": {},
            "quality_score": 3.0,
            "extraction_method": "crawl4ai",
            "error": null,
            "metadata": {
              "doc_type": "docs",
              "content_length": 1369,
              "has_structured_data": false,
              "crawl_success": true
            },
            "timestamp": "113722.689891"
          },
          "docs_rs": {
            "url": "https://docs.rs/structopt",
            "title": "Crate structoptCopy item path",
            "content": {
              "raw_markdown": "[](https://docs.rs/structopt/latest/structopt/all.html \"show sidebar\")\n# Crate structoptCopy item path\n[Settings](https://docs.rs/structopt/latest/settings.html)\n[Help](https://docs.rs/structopt/latest/help.html)\nSummary[Source](https://docs.rs/structopt/latest/src/structopt/lib.rs.html#9-1238)\nExpand description\nThis crate defines the `StructOpt` trait and its custom derive.\n### [\u00a7](https://docs.rs/structopt/latest/structopt/#maintenance)Maintenance\nAs clap v3 is now out, and the structopt features are integrated into (almost as-is), structopt is now in maintenance mode: no new feature will be added.\nBugs will be fixed, and documentation improvements will be accepted.\n### [\u00a7](https://docs.rs/structopt/latest/structopt/#features)Features\nIf you want to disable all the `clap` features (colors, suggestions, ..) add `default-features = false` to the `structopt` dependency:\n```\n[dependencies]\nstructopt = { version = \"0.3\", default-features = false }\n```\n\nSupport for [`paw`](https://github.com/rust-cli/paw) (the `Command line argument paw-rser abstraction for main`) is disabled by default, but can be enabled in the `structopt` dependency with the feature `paw`:\n```\n[dependencies]\nstructopt = { version = \"0.3\", features = [ \"paw\" ] }\npaw = \"1.0\"\n```\n\n## [\u00a7](https://docs.rs/structopt/latest/structopt/#table-of-contents)Table of Contents\n  * [How to `derive(StructOpt)`](https://docs.rs/structopt/latest/structopt/#how-to-derivestructopt)\n  * [Attributes](https://docs.rs/structopt/latest/structopt/#attributes)\n    * [Raw methods](https://docs.rs/structopt/latest/structopt/#raw-methods)\n    * [Magical methods](https://docs.rs/structopt/latest/structopt/#magical-methods)\n  * Arguments \n    * [Type magic](https://docs.rs/structopt/latest/structopt/#type-magic)\n    * [Specifying argument types](https://docs.rs/structopt/latest/structopt/#specifying-argument-types)\n    * [Default values](https://docs.rs/structopt/latest/structopt/#default-values)\n    * [Help messages](https://docs.rs/structopt/latest/structopt/#help-messages)\n    * [Environment variable fallback](https://docs.rs/structopt/latest/structopt/#environment-variable-fallback)\n  * [Skipping fields](https://docs.rs/structopt/latest/structopt/#skipping-fields)\n  * [Subcommands](https://docs.rs/structopt/latest/structopt/#subcommands)\n    * [Optional subcommands](https://docs.rs/structopt/latest/structopt/#optional-subcommands)\n    * [External subcommands](https://docs.rs/structopt/latest/structopt/#external-subcommands)\n    * [Flattening subcommands](https://docs.rs/structopt/latest/structopt/#flattening-subcommands)\n  * [Flattening](https://docs.rs/structopt/latest/structopt/#flattening)\n  * [Custom string parsers](https://docs.rs/structopt/latest/structopt/#custom-string-parsers)\n  * [Generics](https://docs.rs/structopt/latest/structopt/#generics)\n\n\n### [\u00a7](https://docs.rs/structopt/latest/structopt/#how-to-derivestructopt)How to `derive(StructOpt)`\nFirst, let\u2019s look at the example:\n```\nuse std::path::PathBuf;\nuse structopt::StructOpt;\n#[derive(Debug, StructOpt)]\n#[structopt(name = \"example\", about = \"An example of StructOpt usage.\")]\nstruct Opt {\n  /// Activate debug mode\n  // short and long flags (-d, --debug) will be deduced from the field's name\n  #[structopt(short, long)]\n  debug: bool,\n  /// Set speed\n  // we don't want to name it \"speed\", need to look smart\n  #[structopt(short = \"v\", long = \"velocity\", default_value = \"42\")]\n  speed: f64,\n  /// Input file\n  #[structopt(parse(from_os_str))]\n  input: PathBuf,\n  /// Output file, stdout if not present\n  #[structopt(parse(from_os_str))]\n  output: Option<PathBuf>,\n  /// Where to write the output: to `stdout` or `file`\n  #[structopt(short)]\n  out_type: String,\n  /// File name: only required when `out-type` is set to `file`\n  #[structopt(name = \"FILE\", required_if(\"out-type\", \"file\"))]\n  file_name: Option<String>,\n}\nfn main() {\n  let opt = Opt::from_args();\n  println!(\"{:?}\", opt);\n}\n```\n\nSo `derive(StructOpt)` tells Rust to generate a command line parser, and the various `structopt` attributes are simply used for additional parameters.\nFirst, define a struct, whatever its name. This structure corresponds to a `clap::App`, its fields correspond to `clap::Arg` (unless they\u2019re [subcommands](https://docs.rs/structopt/latest/structopt/#subcommands)), and you can adjust these apps and args by `#[structopt(...)]` [attributes](https://docs.rs/structopt/latest/structopt/#attributes).\n**Note:**\nKeep in mind that `StructOpt` trait is more than just `from_args` method. It has a number of additional features, including access to underlying `clap::App` via `StructOpt::clap()`. See the [trait\u2019s reference documentation](https://docs.rs/structopt/latest/structopt/trait.StructOpt.html).\n### [\u00a7](https://docs.rs/structopt/latest/structopt/#attributes)Attributes\nYou can control the way `structopt` translates your struct into an actual [`clap::App`](https://docs.rs/clap/2.33.3/x86_64-unknown-linux-gnu/clap/app/struct.App.html \"struct clap::app::App\") invocation via `#[structopt(...)]` attributes.\nThe attributes fall into two categories:\n  * `structopt`\u2019s own [magical methods](https://docs.rs/structopt/latest/structopt/#magical-methods).\nThey are used by `structopt` itself. They come mostly in `attr = [\"whatever\"]` form, but some `attr(args...)` also exist.\n  * [`raw` attributes](https://docs.rs/structopt/latest/structopt/#raw-methods).\nThey represent explicit `clap::Arg/App` method calls. They are what used to be explicit `#[structopt(raw(...))]` attrs in pre-0.3 `structopt`\n\n\nEvery `structopt attribute` looks like comma-separated sequence of methods:\n```\n#[structopt(\n  short, // method with no arguments - always magical\n  long = \"--long-option\", // method with one argument\n  required_if(\"out\", \"file\"), // method with one and more args\n  parse(from_os_str = path::to::parser) // some magical methods have their own syntax\n)]\n```\n\n`#[structopt(...)]` attributes can be placed on top of `struct`, `enum`, `struct` field or `enum` variant. Attributes on top of `struct` or `enum` represent `clap::App` method calls, field or variant attributes correspond to `clap::Arg` method calls.\nIn other words, the `Opt` struct from the example above will be turned into this (_details omitted_):\n```\nApp::new(\"example\")\n  .version(\"0.2.0\")\n  .about(\"An example of StructOpt usage.\")\n.arg(Arg::with_name(\"debug\")\n  .help(\"Activate debug mode\")\n  .short(\"debug\")\n  .long(\"debug\"))\n.arg(Arg::with_name(\"speed\")\n  .help(\"Set speed\")\n  .short(\"v\")\n  .long(\"velocity\")\n  .default_value(\"42\"))\n// and so on\n```\n\n### [\u00a7](https://docs.rs/structopt/latest/structopt/#raw-methods)Raw methods\nThey are the reason why `structopt` is so flexible. **Every and each method from`clap::App/Arg` can be used this way!** See the [`clap::App` methods](https://docs.rs/clap/2/clap/struct.App.html) and [`clap::Arg` methods](https://docs.rs/clap/2/clap/struct.Arg.html).\n```\n#[structopt(\n  global = true, // name = arg form, neat for one-arg methods\n  required_if(\"out\", \"file\") // name(arg1, arg2, ...) form.\n)]\n```\n\nThe first form can only be used for methods which take only one argument. The second form must be used with multi-arg methods, but can also be used with single-arg methods. These forms are identical otherwise.\nAs long as `method_name` is not one of the magical methods - it will be translated into a mere method call.\n**Note:**\n\u201cRaw methods\u201d are direct replacement for pre-0.3 structopt\u2019s `#[structopt(raw(...))]` attributes, any time you would have used a `raw()` attribute in 0.2 you should use raw method in 0.3.\nUnfortunately, old raw attributes collide with `clap::Arg::raw` method. To explicitly warn users of this change we allow `#[structopt(raw())]` only with `true` or `false` literals (this method is supposed to be called only with `true` anyway).\n### [\u00a7](https://docs.rs/structopt/latest/structopt/#magical-methods)Magical methods\nThey are the reason why `structopt` is so easy to use and convenient in most cases. Many of them have defaults, some of them get used even if not mentioned.\nMethods may be used on \u201ctop level\u201d (on top of a `struct`, `enum` or `enum` variant) and/or on \u201cfield-level\u201d (on top of a `struct` field or _inside_ of an enum variant). Top level (non-magical) methods correspond to `App::method` calls, field-level methods are `Arg::method` calls.\n[\u24d8](https://docs.rs/structopt/latest/structopt/ \"This example is not tested\")```\n#[structopt(top_level)]\nstruct Foo {\n  #[structopt(field_level)]\n  field: u32\n}\n#[structopt(top_level)]\nenum Bar {\n  #[structopt(top_level)]\n  Pineapple {\n    #[structopt(field_level)]\n    chocolate: String\n  },\n  #[structopt(top_level)]\n  Orange,\n}\n```\n\n  * `name`: `[name = expr]`\n    * On top level: `App::new(expr)`.\nThe binary name displayed in help messages. Defaults to the crate name given by Cargo.\n    * On field-level: `Arg::with_name(expr)`.\nThe name for the argument the field stands for, this name appears in help messages. Defaults to a name, deduced from a field, see also [`rename_all`](https://docs.rs/structopt/latest/structopt/#specifying-argument-types).\n  * `version`: `[version = \"version\"]`\nUsable only on top level: `App::version(\"version\" or env!(CARGO_PKG_VERSION))`.\nThe version displayed in help messages. Defaults to the crate version given by Cargo. If `CARGO_PKG_VERSION` is not set no `.version()` calls will be generated unless requested.\n  * `no_version`: `no_version`\nUsable only on top level. Prevents default `App::version` call, i.e when no `version = \"version\"` mentioned.\n  * `author`: `author [= \"author\"]`\nUsable only on top level: `App::author(\"author\" or env!(CARGO_PKG_AUTHORS))`.\nAuthor/maintainer of the binary, this name appears in help messages. Defaults to the crate author given by cargo, but only when `author` explicitly mentioned.\n  * `about`: `about [= \"about\"]`\nUsable only on top level: `App::about(\"about\" or env!(CARGO_PKG_DESCRIPTION))`.\nShort description of the binary, appears in help messages. Defaults to the crate description given by cargo, but only when `about` explicitly mentioned.\n  * [`short`](https://docs.rs/structopt/latest/structopt/#specifying-argument-types): `short [= \"short-opt-name\"]`\nUsable only on field-level.\n  * [`long`](https://docs.rs/structopt/latest/structopt/#specifying-argument-types): `long [= \"long-opt-name\"]`\nUsable only on field-level.\n  * [`default_value`](https://docs.rs/structopt/latest/structopt/#default-values): `default_value [= \"default value\"]`\nUsable only on field-level.\n  * [`rename_all`](https://docs.rs/structopt/latest/structopt/#specifying-argument-types): [`rename_all = \"kebab\"/\"snake\"/\"screaming-snake\"/\"camel\"/\"pascal\"/\"verbatim\"/\"lower\"/\"upper\"]`\nUsable both on top level and field level.\n  * [`parse`](https://docs.rs/structopt/latest/structopt/#custom-string-parsers): `parse(type [= path::to::parser::fn])`\nUsable only on field-level.\n  * [`skip`](https://docs.rs/structopt/latest/structopt/#skipping-fields): `skip [= expr]`\nUsable only on field-level.\n  * [`flatten`](https://docs.rs/structopt/latest/structopt/#flattening): `flatten`\nUsable on field-level or single-typed tuple variants.\n  * [`subcommand`](https://docs.rs/structopt/latest/structopt/#subcommands): `subcommand`\nUsable only on field-level.\n  * [`external_subcommand`](https://docs.rs/structopt/latest/structopt/#external-subcommands)\nUsable only on enum variants.\n  * [`env`](https://docs.rs/structopt/latest/structopt/#environment-variable-fallback): `env [= str_literal]`\nUsable only on field-level.\n  * [`rename_all_env`](https://docs.rs/structopt/latest/structopt/#auto-deriving-environment-variables): [`rename_all_env = \"kebab\"/\"snake\"/\"screaming-snake\"/\"camel\"/\"pascal\"/\"verbatim\"/\"lower\"/\"upper\"]`\nUsable both on top level and field level.\n  * [`verbatim_doc_comment`](https://docs.rs/structopt/latest/structopt/#doc-comment-preprocessing-and-structoptverbatim_doc_comment): `verbatim_doc_comment`\nUsable both on top level and field level.\n\n\n### [\u00a7](https://docs.rs/structopt/latest/structopt/#type-magic)Type magic\nOne of major things that makes `structopt` so awesome is its type magic. Do you want optional positional argument? Use `Option<T>`! Or perhaps optional argument that optionally takes value (`[--opt=[val]]`)? Use `Option<Option<T>>`!\nHere is the table of types and `clap` methods they correspond to:\nType| Effect| Added method call to `clap::Arg`  \n---|---|---  \n`bool`| `true` if the flag is present| `.takes_value(false).multiple(false)`  \n`Option<T: FromStr>`| optional positional argument or option| `.takes_value(true).multiple(false)`  \n`Option<Option<T: FromStr>>`| optional option with optional value| `.takes_value(true).multiple(false).min_values(0).max_values(1)`  \n`Vec<T: FromStr>`| list of options or the other positional arguments| `.takes_value(true).multiple(true)`  \n`Option<Vec<T: FromStr>`| optional list of options| `.takes_values(true).multiple(true).min_values(0)`  \n`T: FromStr`| required option or positional argument| `.takes_value(true).multiple(false).required(!has_default)`  \nThe `FromStr` trait is used to convert the argument to the given type, and the `Arg::validator` method is set to a method using `to_string()` (`FromStr::Err` must implement `std::fmt::Display`). If you would like to use a custom string parser other than `FromStr`, see the [same titled section](https://docs.rs/structopt/latest/structopt/#custom-string-parsers) below.\n**Important:**\nPay attention that _only literal occurrence_ of this types is special, for example `Option<T>` is special while `::std::option::Option<T>` is not.\nIf you need to avoid special casing you can make a `type` alias and use it in place of the said type.\n**Note:**\n`bool` cannot be used as positional argument unless you provide an explicit parser. If you need a positional bool, for example to parse `true` or `false`, you must annotate the field with explicit [`#[structopt(parse(...))]`](https://docs.rs/structopt/latest/structopt/#custom-string-parsers).\nThus, the `speed` argument is generated as:\n```\nclap::Arg::with_name(\"speed\")\n  .takes_value(true)\n  .multiple(false)\n  .required(false)\n  .validator(parse_validator::<f64>)\n  .short(\"v\")\n  .long(\"velocity\")\n  .help(\"Set speed\")\n  .default_value(\"42\");\n```\n\n### [\u00a7](https://docs.rs/structopt/latest/structopt/#specifying-argument-types)Specifying argument types\nThere are three types of arguments that can be supplied to each (sub-)command:\n  * short (e.g. `-h`),\n  * long (e.g. `--help`)\n  * and positional.\n\n\nLike clap, structopt defaults to creating positional arguments.\nIf you want to generate a long argument you can specify either `long = $NAME`, or just `long` to get a long flag generated using the field name. The generated casing style can be modified using the `rename_all` attribute. See the `rename_all` example for more.\nFor short arguments, `short` will use the first letter of the field name by default, but just like the long option it\u2019s also possible to use a custom letter through `short = $LETTER`.\nIf an argument is renamed using `name = $NAME` any following call to `short` or `long` will use the new name.\n**Attention** : If these arguments are used without an explicit name the resulting flag is going to be renamed using `kebab-case` if the `rename_all` attribute was not specified previously. The same is true for subcommands with implicit naming through the related data structure.\n```\nuse structopt::StructOpt;\n#[derive(StructOpt)]\n#[structopt(rename_all = \"kebab-case\")]\nstruct Opt {\n  /// This option can be specified with something like `--foo-option\n  /// value` or `--foo-option=value`\n  #[structopt(long)]\n  foo_option: String,\n  /// This option can be specified with something like `-b value` (but\n  /// not `--bar-option value`).\n  #[structopt(short)]\n  bar_option: String,\n  /// This option can be specified either `--baz value` or `-z value`.\n  #[structopt(short = \"z\", long = \"baz\")]\n  baz_option: String,\n  /// This option can be specified either by `--custom value` or\n  /// `-c value`.\n  #[structopt(name = \"custom\", long, short)]\n  custom_option: String,\n  /// This option is positional, meaning it is the first unadorned string\n  /// you provide (multiple others could follow).\n  my_positional: String,\n  /// This option is skipped and will be filled with the default value\n  /// for its type (in this case 0).\n  #[structopt(skip)]\n  skipped: u32,\n}\n\n```\n\n### [\u00a7](https://docs.rs/structopt/latest/structopt/#default-values)Default values\nIn clap, default values for options can be specified via [`Arg::default_value`](https://docs.rs/clap/2.33.0/clap/struct.Arg.html#method.default_value).\nOf course, you can use as a raw method:\n```\n#[derive(StructOpt)]\nstruct Opt {\n  #[structopt(default_value = \"\", long)]\n  prefix: String,\n}\n```\n\nThis is quite mundane and error-prone to type the `\"...\"` default by yourself, especially when the Rust ecosystem uses the [`Default`](https://doc.rust-lang.org/std/default/trait.Default.html) trait for that. It would be wonderful to have `structopt` to take the `Default_default` and fill it for you. And yes, `structopt` can do that.\nUnfortunately, `default_value` takes `&str` but `Default::default` gives us some `Self` value. We need to map `Self` to `&str` somehow.\n`structopt` solves this problem via [`ToString`](https://doc.rust-lang.org/std/string/trait.ToString.html) trait.\nTo be able to use auto-default the type must implement _both_ `Default` and `ToString`:\n```\n#[derive(StructOpt)]\nstruct Opt {\n  // just leave the `= \"...\"` part and structopt will figure it for you\n  #[structopt(default_value, long)]\n  prefix: String, // `String` implements both `Default` and `ToString`\n}\n```\n\n### [\u00a7](https://docs.rs/structopt/latest/structopt/#help-messages)Help messages\nIn clap, help messages for the whole binary can be specified via [`App::about`](https://docs.rs/clap/2/clap/struct.App.html#method.about) and [`App::long_about`](https://docs.rs/clap/2/clap/struct.App.html#method.long_about) while help messages for individual arguments can be specified via [`Arg::help`](https://docs.rs/clap/2/clap/struct.Arg.html#method.help) and [`Arg::long_help`](https://docs.rs/clap/2/clap/struct.Arg.html#method.long_help)\u201c.\n`long_*` variants are used when user calls the program with `--help` and \u201cshort\u201d variants are used with `-h` flag. In `structopt`, you can use them via [raw methods](https://docs.rs/structopt/latest/structopt/#raw-methods), for example:\n```\n\n#[derive(StructOpt)]\n#[structopt(about = \"I am a program and I work, just pass `-h`\")]\nstruct Foo {\n  #[structopt(short, help = \"Pass `-h` and you'll see me!\")]\n  bar: String,\n}\n```\n\nFor convenience, doc comments can be used instead of raw methods (this example works exactly like the one above):\n```\n\n#[derive(StructOpt)]\n/// I am a program and I work, just pass `-h`\nstruct Foo {\n  /// Pass `-h` and you'll see me!\n  bar: String,\n}\n```\n\nDoc comments on [top-level](https://docs.rs/structopt/latest/structopt/#magical-methods) will be turned into `App::about/long_about` call (see below), doc comments on field-level are `Arg::help/long_help` calls.\n**Important:**\nRaw methods have priority over doc comments!\n**Top level doc comments always generate`App::about/long_about` calls!** If you really want to use the `App::help/long_help` methods (you likely don\u2019t), use a raw method to override the `App::about` call generated from the doc comment.\n#### [\u00a7](https://docs.rs/structopt/latest/structopt/#long_help-and---help)`long_help` and `--help`\nA message passed to [`App::long_about`](https://docs.rs/clap/2/clap/struct.App.html#method.long_about) or [`Arg::long_help`](https://docs.rs/clap/2/clap/struct.Arg.html#method.long_help) will be displayed whenever your program is called with `--help` instead of `-h`. Of course, you can use them via raw methods as described [above](https://docs.rs/structopt/latest/structopt/#help-messages).\nThe more convenient way is to use a so-called \u201clong\u201d doc comment:\n```\n#[derive(StructOpt)]\n/// Hi there, I'm Robo!\n///\n/// I like beeping, stumbling, eating your electricity,\n/// and making records of you singing in a shower.\n/// Pay up, or I'll upload it to youtube!\nstruct Robo {\n  /// Call my brother SkyNet.\n  ///\n  /// I am artificial superintelligence. I won't rest\n  /// until I'll have destroyed humanity. Enjoy your\n  /// pathetic existence, you mere mortals.\n  #[structopt(long)]\n  kill_all_humans: bool,\n}\n```\n\nA long doc comment consists of three parts:\n  * Short summary\n  * A blank line (whitespace only)\n  * Detailed description, all the rest\n\n\nIn other words, \u201clong\u201d doc comment consists of two or more paragraphs, with the first being a summary and the rest being the detailed description.\n**A long comment will result in two method calls** , `help(<summary>)` and `long_help(<whole comment>)`, so clap will display the summary with `-h` and the whole help message on `--help` (see below).\nSo, the example above will be turned into this (details omitted):\n```\nclap::App::new(\"<name>\")\n  .about(\"Hi there, I'm Robo!\")\n  .long_about(\"Hi there, I'm Robo!\\n\\n\\\n         I like beeping, stumbling, eating your electricity,\\\n         and making records of you singing in a shower.\\\n         Pay up or I'll upload it to youtube!\")\n// args...\n```\n\n#### [\u00a7](https://docs.rs/structopt/latest/structopt/#-h-vs---help-aka-help-vs-long_help)`-h` vs `--help` (A.K.A `help()` vs `long_help()`)\nThe `-h` flag is not the same as `--help`.\n-h corresponds to `Arg::help/App::about` and requests short \u201csummary\u201d messages while \u2013help corresponds to `Arg::long_help/App::long_about` and requests more detailed, descriptive messages.\nIt is entirely up to `clap` what happens if you used only one of [`Arg::help`](https://docs.rs/clap/2/clap/struct.Arg.html#method.help)/[`Arg::long_help`](https://docs.rs/clap/2/clap/struct.Arg.html#method.long_help), see `clap`\u2019s documentation for these methods.\nAs of clap v2.33, if only a short message ([`Arg::help`](https://docs.rs/clap/2/clap/struct.Arg.html#method.help)) or only a long ([`Arg::long_help`](https://docs.rs/clap/2/clap/struct.Arg.html#method.long_help)) message is provided, clap will use it for both -h and \u2013help. The same logic applies to `about/long_about`.\n#### [\u00a7](https://docs.rs/structopt/latest/structopt/#doc-comment-preprocessing-and-structoptverbatim_doc_comment)Doc comment preprocessing and `#[structopt(verbatim_doc_comment)]`\n`structopt` applies some preprocessing to doc comments to ease the most common uses:\n  * Strip leading and trailing whitespace from every line, if present.\n  * Strip leading and trailing blank lines, if present.\n  * Interpret each group of non-empty lines as a word-wrapped paragraph.\nWe replace newlines within paragraphs with spaces to allow the output to be re-wrapped to the terminal width.\n  * Strip any excess blank lines so that there is exactly one per paragraph break.\n  * If the first paragraph ends in exactly one period, remove the trailing period (i.e. strip trailing periods but not trailing ellipses).\n\n\nSometimes you don\u2019t want this preprocessing to apply, for example the comment contains some ASCII art or markdown tables, you would need to preserve LFs along with blank lines and the leading/trailing whitespace. You can ask `structopt` to preserve them via `#[structopt(verbatim_doc_comment)]` attribute.\n**This attribute must be applied to each field separately** , there\u2019s no global switch.\n**Important:**\nKeep in mind that `structopt` will _still_ remove one leading space from each line, even if this attribute is present, to allow for a space between `///` and the content.\nAlso, `structopt` will _still_ remove leading and trailing blank lines so these formats are equivalent:\n```\n/** This is a doc comment\nHello! */\n/**\nThis is a doc comment\nHello!\n*/\n/// This is a doc comment\n///\n/// Hello!\n```\n\n### [\u00a7](https://docs.rs/structopt/latest/structopt/#environment-variable-fallback)Environment variable fallback\nIt is possible to specify an environment variable fallback option for an arguments so that its value is taken from the specified environment variable if not given through the command-line:\n```\n\n#[derive(StructOpt)]\nstruct Foo {\n  #[structopt(short, long, env = \"PARAMETER_VALUE\")]\n  parameter_value: String,\n}\n```\n\nBy default, values from the environment are shown in the help output (i.e. when invoking `--help`):\n```\n$ cargo run -- --help\n...\nOPTIONS:\n -p, --parameter-value <parameter-value>   [env: PARAMETER_VALUE=env_value]\n```\n\nIn some cases this may be undesirable, for example when being used for passing credentials or secret tokens. In those cases you can use `hide_env_values` to avoid having structopt emit the actual secret values:\n```\n\n#[derive(StructOpt)]\nstruct Foo {\n  #[structopt(long = \"secret\", env = \"SECRET_VALUE\", hide_env_values = true)]\n  secret_value: String,\n}\n```\n\n#### [\u00a7](https://docs.rs/structopt/latest/structopt/#auto-deriving-environment-variables)Auto-deriving environment variables\nEnvironment variables tend to be called after the corresponding `struct`\u2019s field, as in example above. The field is `secret_value` and the env var is \u201cSECRET_VALUE\u201d; the name is the same, except casing is different.\nIt\u2019s pretty tedious and error-prone to type the same name twice, so you can ask `structopt` to do that for you.\n```\n\n#[derive(StructOpt)]\nstruct Foo {\n  #[structopt(long = \"secret\", env)]\n  secret_value: String,\n}\n```\n\nIt works just like `#[structopt(short/long)]`: if `env` is not set to some concrete value the value will be derived from the field\u2019s name. This is controlled by `#[structopt(rename_all_env)]`.\n`rename_all_env` works exactly as `rename_all` (including overriding) except default casing is `SCREAMING_SNAKE_CASE` instead of `kebab-case`.\n### [\u00a7](https://docs.rs/structopt/latest/structopt/#skipping-fields)Skipping fields\nSometimes you may want to add a field to your `Opt` struct that is not a command line option and `clap` should know nothing about it. You can ask `structopt` to skip the field entirely via `#[structopt(skip = value)]` (`value` must implement `Into<FieldType>`) or `#[structopt(skip)]` if you want assign the field with `Default::default()` (obviously, the field\u2019s type must implement `Default`).\n```\n#[derive(StructOpt)]\npub struct Opt {\n  #[structopt(long, short)]\n  number: u32,\n  // these fields are to be assigned with Default::default()\n  #[structopt(skip)]\n  k: String,\n  #[structopt(skip)]\n  v: Vec<u32>,\n  // these fields get set explicitly\n  #[structopt(skip = vec![1, 2, 3])]\n  k2: Vec<u32>,\n  #[structopt(skip = \"cake\")] // &str implements Into<String>\n  v2: String,\n}\n```\n\n### [\u00a7](https://docs.rs/structopt/latest/structopt/#subcommands)Subcommands\nSome applications, especially large ones, split their functionality through the use of \u201csubcommands\u201d. Each of these act somewhat like a separate command, but is part of the larger group. One example is `git`, which has subcommands such as `add`, `commit`, and `clone`, to mention just a few.\n`clap` has this functionality, and `structopt` supports it through enums:\n```\n\n#[derive(StructOpt)]\n#[structopt(about = \"the stupid content tracker\")]\nenum Git {\n  Add {\n    #[structopt(short)]\n    interactive: bool,\n    #[structopt(short)]\n    patch: bool,\n    #[structopt(parse(from_os_str))]\n    files: Vec<PathBuf>,\n  },\n  Fetch {\n    #[structopt(long)]\n    dry_run: bool,\n    #[structopt(long)]\n    all: bool,\n    repository: Option<String>,\n  },\n  Commit {\n    #[structopt(short)]\n    message: Option<String>,\n    #[structopt(short)]\n    all: bool,\n  },\n}\n```\n\nUsing `derive(StructOpt)` on an enum instead of a struct will produce a `clap::App` that only takes subcommands. So `git add`, `git fetch`, and `git commit` would be commands allowed for the above example.\n`structopt` also provides support for applications where certain flags need to apply to all subcommands, as well as nested subcommands:\n```\n#[derive(StructOpt)]\nstruct MakeCookie {\n  #[structopt(name = \"supervisor\", default_value = \"Puck\", long = \"supervisor\")]\n  supervising_faerie: String,\n  /// The faerie tree this cookie is being made in.\n  tree: Option<String>,\n  #[structopt(subcommand)] // Note that we mark a field as a subcommand\n  cmd: Command,\n}\n#[derive(StructOpt)]\nenum Command {\n  /// Pound acorns into flour for cookie dough.\n  Pound {\n    acorns: u32,\n  },\n  /// Add magical sparkles -- the secret ingredient!\n  Sparkle {\n    #[structopt(short, parse(from_occurrences))]\n    magicality: u64,\n    #[structopt(short)]\n    color: String,\n  },\n  Finish(Finish),\n}\n// Subcommand can also be externalized by using a 1-uple enum variant\n#[derive(StructOpt)]\nstruct Finish {\n  #[structopt(short)]\n  time: u32,\n  #[structopt(subcommand)] // Note that we mark a field as a subcommand\n  finish_type: FinishType,\n}\n// subsubcommand!\n#[derive(StructOpt)]\nenum FinishType {\n  Glaze {\n    applications: u32,\n  },\n  Powder {\n    flavor: String,\n    dips: u32,\n  }\n}\n```\n\nMarking a field with `structopt(subcommand)` will add the subcommands of the designated enum to the current `clap::App`. The designated enum _must_ also be derived `StructOpt`. So the above example would take the following commands:\n  * `make-cookie pound 50`\n  * `make-cookie sparkle -mmm --color \"green\"`\n  * `make-cookie finish 130 glaze 3`\n\n\n#### [\u00a7](https://docs.rs/structopt/latest/structopt/#optional-subcommands)Optional subcommands\nSubcommands may be optional:\n```\n#[derive(StructOpt)]\nstruct Foo {\n  file: String,\n  #[structopt(subcommand)]\n  cmd: Option<Command>,\n}\n#[derive(StructOpt)]\nenum Command {\n  Bar,\n  Baz,\n  Quux,\n}\n```\n\n#### [\u00a7](https://docs.rs/structopt/latest/structopt/#external-subcommands)External subcommands\nSometimes you want to support not only the set of well-known subcommands but you also want to allow other, user-driven subcommands. `clap` supports this via [`AppSettings::AllowExternalSubcommands`](https://docs.rs/clap/2.32.0/clap/enum.AppSettings.html#variant.AllowExternalSubcommands).\n`structopt` provides it\u2019s own dedicated syntax for that:\n```\n#[derive(Debug, PartialEq, StructOpt)]\nstruct Opt {\n  #[structopt(subcommand)]\n  sub: Subcommands,\n}\n#[derive(Debug, PartialEq, StructOpt)]\nenum Subcommands {\n  // normal subcommand\n  Add,\n  // `external_subcommand` tells structopt to put\n  // all the extra arguments into this Vec\n  #[structopt(external_subcommand)]\n  Other(Vec<String>),\n}\n// normal subcommand\nassert_eq!(\n  Opt::from_iter(&[\"test\", \"add\"]),\n  Opt {\n    sub: Subcommands::Add\n  }\n);\nassert_eq!(\n  Opt::from_iter(&[\"test\", \"git\", \"status\"]),\n  Opt {\n    sub: Subcommands::Other(vec![\"git\".into(), \"status\".into()])\n  }\n);\n// Please note that if you'd wanted to allow \"no subcommands at all\" case\n// you should have used `sub: Option<Subcommands>` above\nassert!(Opt::from_iter_safe(&[\"test\"]).is_err());\n```\n\nIn other words, you just add an extra tuple variant marked with `#[structopt(subcommand)]`, and its type must be either `Vec<String>` or `Vec<OsString>`. `structopt` will detect `String` in this context and use appropriate `clap` API.\n#### [\u00a7](https://docs.rs/structopt/latest/structopt/#flattening-subcommands)Flattening subcommands\nIt is also possible to combine multiple enums of subcommands into one. All the subcommands will be on the same level.\n```\n#[derive(StructOpt)]\nenum BaseCli {\n  Ghost10 {\n    arg1: i32,\n  }\n}\n#[derive(StructOpt)]\nenum Opt {\n  #[structopt(flatten)]\n  BaseCli(BaseCli),\n  Dex {\n    arg2: i32,\n  },\n}\n```\n\n```\ncli ghost10 42\ncli dex 42\n```\n\n### [\u00a7](https://docs.rs/structopt/latest/structopt/#flattening)Flattening\nIt can sometimes be useful to group related arguments in a substruct, while keeping the command-line interface flat. In these cases you can mark a field as `flatten` and give it another type that derives `StructOpt`:\n```\n#[derive(StructOpt)]\nstruct Cmdline {\n  /// switch on verbosity\n  #[structopt(short)]\n  verbose: bool,\n  #[structopt(flatten)]\n  daemon_opts: DaemonOpts,\n}\n#[derive(StructOpt)]\nstruct DaemonOpts {\n  /// daemon user\n  #[structopt(short)]\n  user: String,\n  /// daemon group\n  #[structopt(short)]\n  group: String,\n}\n```\n\nIn this example, the derived `Cmdline` parser will support the options `-v`, `-u` and `-g`.\nThis feature also makes it possible to define a `StructOpt` struct in a library, parse the corresponding arguments in the main argument parser, and pass off this struct to a handler provided by that library.\n### [\u00a7](https://docs.rs/structopt/latest/structopt/#custom-string-parsers)Custom string parsers\nIf the field type does not have a `FromStr` implementation, or you would like to provide a custom parsing scheme other than `FromStr`, you may provide a custom string parser using `parse(...)` like this:\n```\nuse std::num::ParseIntError;\nuse std::path::PathBuf;\nfn parse_hex(src: &str) -> Result<u32, ParseIntError> {\n  u32::from_str_radix(src, 16)\n}\n#[derive(StructOpt)]\nstruct HexReader {\n  #[structopt(short, parse(try_from_str = parse_hex))]\n  number: u32,\n  #[structopt(short, parse(from_os_str))]\n  output: PathBuf,\n}\n```\n\nThere are five kinds of custom parsers:\nKind| Signature| Default  \n---|---|---  \n`from_str`| `fn(&str) -> T`| `::std::convert::From::from`  \n`try_from_str`| `fn(&str) -> Result<T, E>`| `::std::str::FromStr::from_str`  \n`from_os_str`| `fn(&OsStr) -> T`| `::std::convert::From::from`  \n`try_from_os_str`| `fn(&OsStr) -> Result<T, OsString>`| (no default function)  \n`from_occurrences`| `fn(u64) -> T`| `value as T`  \n`from_flag`| `fn(bool) -> T`| `::std::convert::From::from`  \nThe `from_occurrences` parser is special. Using `parse(from_occurrences)` results in the _number of flags occurrences_ being stored in the relevant field or being passed to the supplied function. In other words, it converts something like `-vvv` to `3`. This is equivalent to `.takes_value(false).multiple(true)`. Note that the default parser can only be used with fields of integer types (`u8`, `usize`, `i64`, etc.).\nThe `from_flag` parser is also special. Using `parse(from_flag)` or `parse(from_flag = some_func)` will result in the field being treated as a flag even if it does not have type `bool`.\nWhen supplying a custom string parser, `bool` will not be treated specially:\nType| Effect| Added method call to `clap::Arg`  \n---|---|---  \n`Option<T>`| optional argument| `.takes_value(true).multiple(false)`  \n`Vec<T>`| list of arguments| `.takes_value(true).multiple(true)`  \n`T`| required argument| `.takes_value(true).multiple(false).required(!has_default)`  \nIn the `try_from_*` variants, the function will run twice on valid input: once to validate, and once to parse. Hence, make sure the function is side-effect-free.\n### [\u00a7](https://docs.rs/structopt/latest/structopt/#generics)Generics\nGeneric structs and enums can be used. They require explicit trait bounds on any generic types that will be used by the `StructOpt` derive macro. In some cases, associated types will require additional bounds. See the usage of `FromStr` below for an example of this.\n```\nuse std::{fmt, str::FromStr};\n// a struct with single custom argument\n#[derive(StructOpt)]\nstruct GenericArgs<T: FromStr> where <T as FromStr>::Err: fmt::Display + fmt::Debug {\n  generic_arg_1: String,\n  generic_arg_2: String,\n  custom_arg_1: T,\n}\n```\n\nor\n```\n// a struct with multiple custom arguments in a substructure\n#[derive(StructOpt)]\nstruct GenericArgs<T: StructOpt> {\n  generic_arg_1: String,\n  generic_arg_2: String,\n  #[structopt(flatten)]\n  custom_args: T,\n}\n```\n\n## Re-exports[\u00a7](https://docs.rs/structopt/latest/structopt/#reexports)\n\n`pub use clap[](https://docs.rs/clap/2.33.3/x86_64-unknown-linux-gnu/clap/index.html \"mod clap\");`\n\n## Traits[\u00a7](https://docs.rs/structopt/latest/structopt/#traits)\n\n[StructOpt](https://docs.rs/structopt/latest/structopt/trait.StructOpt.html \"trait structopt::StructOpt\")\n    A struct that is converted from command line arguments.\n",
              "markdown_with_citations": "[](https://docs.rs/structopt/latest/structopt/all.html \"show sidebar\")\n# Crate structoptCopy item path\nSettings\u27e81\u27e9\nHelp\u27e82\u27e9\nSummarySource\u27e83\u27e9\nExpand description\nThis crate defines the `StructOpt` trait and its custom derive.\n### \u00a7\u27e84\u27e9Maintenance\nAs clap v3 is now out, and the structopt features are integrated into (almost as-is), structopt is now in maintenance mode: no new feature will be added.\nBugs will be fixed, and documentation improvements will be accepted.\n### \u00a7\u27e85\u27e9Features\nIf you want to disable all the `clap` features (colors, suggestions, ..) add `default-features = false` to the `structopt` dependency:\n```\n[dependencies]\nstructopt = { version = \"0.3\", default-features = false }\n```\n\nSupport for `paw`\u27e86\u27e9 (the `Command line argument paw-rser abstraction for main`) is disabled by default, but can be enabled in the `structopt` dependency with the feature `paw`:\n```\n[dependencies]\nstructopt = { version = \"0.3\", features = [ \"paw\" ] }\npaw = \"1.0\"\n```\n\n## \u00a7\u27e87\u27e9Table of Contents\n  * How to `derive(StructOpt)`\u27e88\u27e9\n  * Attributes\u27e89\u27e9\n    * Raw methods\u27e810\u27e9\n    * Magical methods\u27e811\u27e9\n  * Arguments \n    * Type magic\u27e812\u27e9\n    * Specifying argument types\u27e813\u27e9\n    * Default values\u27e814\u27e9\n    * Help messages\u27e815\u27e9\n    * Environment variable fallback\u27e816\u27e9\n  * Skipping fields\u27e817\u27e9\n  * Subcommands\u27e818\u27e9\n    * Optional subcommands\u27e819\u27e9\n    * External subcommands\u27e820\u27e9\n    * Flattening subcommands\u27e821\u27e9\n  * Flattening\u27e822\u27e9\n  * Custom string parsers\u27e823\u27e9\n  * Generics\u27e824\u27e9\n\n\n### \u00a7\u27e88\u27e9How to `derive(StructOpt)`\nFirst, let\u2019s look at the example:\n```\nuse std::path::PathBuf;\nuse structopt::StructOpt;\n#[derive(Debug, StructOpt)]\n#[structopt(name = \"example\", about = \"An example of StructOpt usage.\")]\nstruct Opt {\n  /// Activate debug mode\n  // short and long flags (-d, --debug) will be deduced from the field's name\n  #[structopt(short, long)]\n  debug: bool,\n  /// Set speed\n  // we don't want to name it \"speed\", need to look smart\n  #[structopt(short = \"v\", long = \"velocity\", default_value = \"42\")]\n  speed: f64,\n  /// Input file\n  #[structopt(parse(from_os_str))]\n  input: PathBuf,\n  /// Output file, stdout if not present\n  #[structopt(parse(from_os_str))]\n  output: Option<PathBuf>,\n  /// Where to write the output: to `stdout` or `file`\n  #[structopt(short)]\n  out_type: String,\n  /// File name: only required when `out-type` is set to `file`\n  #[structopt(name = \"FILE\", required_if(\"out-type\", \"file\"))]\n  file_name: Option<String>,\n}\nfn main() {\n  let opt = Opt::from_args();\n  println!(\"{:?}\", opt);\n}\n```\n\nSo `derive(StructOpt)` tells Rust to generate a command line parser, and the various `structopt` attributes are simply used for additional parameters.\nFirst, define a struct, whatever its name. This structure corresponds to a `clap::App`, its fields correspond to `clap::Arg` (unless they\u2019re subcommands\u27e818\u27e9), and you can adjust these apps and args by `#[structopt(...)]` attributes\u27e89\u27e9.\n**Note:**\nKeep in mind that `StructOpt` trait is more than just `from_args` method. It has a number of additional features, including access to underlying `clap::App` via `StructOpt::clap()`. See the trait\u2019s reference documentation\u27e825\u27e9.\n### \u00a7\u27e89\u27e9Attributes\nYou can control the way `structopt` translates your struct into an actual `clap::App`\u27e826\u27e9 invocation via `#[structopt(...)]` attributes.\nThe attributes fall into two categories:\n  * `structopt`\u2019s own magical methods\u27e811\u27e9.\nThey are used by `structopt` itself. They come mostly in `attr = [\"whatever\"]` form, but some `attr(args...)` also exist.\n  * `raw` attributes\u27e810\u27e9.\nThey represent explicit `clap::Arg/App` method calls. They are what used to be explicit `#[structopt(raw(...))]` attrs in pre-0.3 `structopt`\n\n\nEvery `structopt attribute` looks like comma-separated sequence of methods:\n```\n#[structopt(\n  short, // method with no arguments - always magical\n  long = \"--long-option\", // method with one argument\n  required_if(\"out\", \"file\"), // method with one and more args\n  parse(from_os_str = path::to::parser) // some magical methods have their own syntax\n)]\n```\n\n`#[structopt(...)]` attributes can be placed on top of `struct`, `enum`, `struct` field or `enum` variant. Attributes on top of `struct` or `enum` represent `clap::App` method calls, field or variant attributes correspond to `clap::Arg` method calls.\nIn other words, the `Opt` struct from the example above will be turned into this (_details omitted_):\n```\nApp::new(\"example\")\n  .version(\"0.2.0\")\n  .about(\"An example of StructOpt usage.\")\n.arg(Arg::with_name(\"debug\")\n  .help(\"Activate debug mode\")\n  .short(\"debug\")\n  .long(\"debug\"))\n.arg(Arg::with_name(\"speed\")\n  .help(\"Set speed\")\n  .short(\"v\")\n  .long(\"velocity\")\n  .default_value(\"42\"))\n// and so on\n```\n\n### \u00a7\u27e810\u27e9Raw methods\nThey are the reason why `structopt` is so flexible. **Every and each method from`clap::App/Arg` can be used this way!** See the `clap::App` methods\u27e827\u27e9 and `clap::Arg` methods\u27e828\u27e9.\n```\n#[structopt(\n  global = true, // name = arg form, neat for one-arg methods\n  required_if(\"out\", \"file\") // name(arg1, arg2, ...) form.\n)]\n```\n\nThe first form can only be used for methods which take only one argument. The second form must be used with multi-arg methods, but can also be used with single-arg methods. These forms are identical otherwise.\nAs long as `method_name` is not one of the magical methods - it will be translated into a mere method call.\n**Note:**\n\u201cRaw methods\u201d are direct replacement for pre-0.3 structopt\u2019s `#[structopt(raw(...))]` attributes, any time you would have used a `raw()` attribute in 0.2 you should use raw method in 0.3.\nUnfortunately, old raw attributes collide with `clap::Arg::raw` method. To explicitly warn users of this change we allow `#[structopt(raw())]` only with `true` or `false` literals (this method is supposed to be called only with `true` anyway).\n### \u00a7\u27e811\u27e9Magical methods\nThey are the reason why `structopt` is so easy to use and convenient in most cases. Many of them have defaults, some of them get used even if not mentioned.\nMethods may be used on \u201ctop level\u201d (on top of a `struct`, `enum` or `enum` variant) and/or on \u201cfield-level\u201d (on top of a `struct` field or _inside_ of an enum variant). Top level (non-magical) methods correspond to `App::method` calls, field-level methods are `Arg::method` calls.\n\u24d8\u27e829\u27e9```\n#[structopt(top_level)]\nstruct Foo {\n  #[structopt(field_level)]\n  field: u32\n}\n#[structopt(top_level)]\nenum Bar {\n  #[structopt(top_level)]\n  Pineapple {\n    #[structopt(field_level)]\n    chocolate: String\n  },\n  #[structopt(top_level)]\n  Orange,\n}\n```\n\n  * `name`: `[name = expr]`\n    * On top level: `App::new(expr)`.\nThe binary name displayed in help messages. Defaults to the crate name given by Cargo.\n    * On field-level: `Arg::with_name(expr)`.\nThe name for the argument the field stands for, this name appears in help messages. Defaults to a name, deduced from a field, see also `rename_all`\u27e813\u27e9.\n  * `version`: `[version = \"version\"]`\nUsable only on top level: `App::version(\"version\" or env!(CARGO_PKG_VERSION))`.\nThe version displayed in help messages. Defaults to the crate version given by Cargo. If `CARGO_PKG_VERSION` is not set no `.version()` calls will be generated unless requested.\n  * `no_version`: `no_version`\nUsable only on top level. Prevents default `App::version` call, i.e when no `version = \"version\"` mentioned.\n  * `author`: `author [= \"author\"]`\nUsable only on top level: `App::author(\"author\" or env!(CARGO_PKG_AUTHORS))`.\nAuthor/maintainer of the binary, this name appears in help messages. Defaults to the crate author given by cargo, but only when `author` explicitly mentioned.\n  * `about`: `about [= \"about\"]`\nUsable only on top level: `App::about(\"about\" or env!(CARGO_PKG_DESCRIPTION))`.\nShort description of the binary, appears in help messages. Defaults to the crate description given by cargo, but only when `about` explicitly mentioned.\n  * `short`\u27e813\u27e9: `short [= \"short-opt-name\"]`\nUsable only on field-level.\n  * `long`\u27e813\u27e9: `long [= \"long-opt-name\"]`\nUsable only on field-level.\n  * `default_value`\u27e814\u27e9: `default_value [= \"default value\"]`\nUsable only on field-level.\n  * `rename_all`\u27e813\u27e9: [`rename_all = \"kebab\"/\"snake\"/\"screaming-snake\"/\"camel\"/\"pascal\"/\"verbatim\"/\"lower\"/\"upper\"]`\nUsable both on top level and field level.\n  * `parse`\u27e823\u27e9: `parse(type [= path::to::parser::fn])`\nUsable only on field-level.\n  * `skip`\u27e817\u27e9: `skip [= expr]`\nUsable only on field-level.\n  * `flatten`\u27e822\u27e9: `flatten`\nUsable on field-level or single-typed tuple variants.\n  * `subcommand`\u27e818\u27e9: `subcommand`\nUsable only on field-level.\n  * `external_subcommand`\u27e820\u27e9\nUsable only on enum variants.\n  * `env`\u27e816\u27e9: `env [= str_literal]`\nUsable only on field-level.\n  * `rename_all_env`\u27e830\u27e9: [`rename_all_env = \"kebab\"/\"snake\"/\"screaming-snake\"/\"camel\"/\"pascal\"/\"verbatim\"/\"lower\"/\"upper\"]`\nUsable both on top level and field level.\n  * `verbatim_doc_comment`\u27e831\u27e9: `verbatim_doc_comment`\nUsable both on top level and field level.\n\n\n### \u00a7\u27e812\u27e9Type magic\nOne of major things that makes `structopt` so awesome is its type magic. Do you want optional positional argument? Use `Option<T>`! Or perhaps optional argument that optionally takes value (`[--opt=[val]]`)? Use `Option<Option<T>>`!\nHere is the table of types and `clap` methods they correspond to:\nType| Effect| Added method call to `clap::Arg`  \n---|---|---  \n`bool`| `true` if the flag is present| `.takes_value(false).multiple(false)`  \n`Option<T: FromStr>`| optional positional argument or option| `.takes_value(true).multiple(false)`  \n`Option<Option<T: FromStr>>`| optional option with optional value| `.takes_value(true).multiple(false).min_values(0).max_values(1)`  \n`Vec<T: FromStr>`| list of options or the other positional arguments| `.takes_value(true).multiple(true)`  \n`Option<Vec<T: FromStr>`| optional list of options| `.takes_values(true).multiple(true).min_values(0)`  \n`T: FromStr`| required option or positional argument| `.takes_value(true).multiple(false).required(!has_default)`  \nThe `FromStr` trait is used to convert the argument to the given type, and the `Arg::validator` method is set to a method using `to_string()` (`FromStr::Err` must implement `std::fmt::Display`). If you would like to use a custom string parser other than `FromStr`, see the same titled section\u27e823\u27e9 below.\n**Important:**\nPay attention that _only literal occurrence_ of this types is special, for example `Option<T>` is special while `::std::option::Option<T>` is not.\nIf you need to avoid special casing you can make a `type` alias and use it in place of the said type.\n**Note:**\n`bool` cannot be used as positional argument unless you provide an explicit parser. If you need a positional bool, for example to parse `true` or `false`, you must annotate the field with explicit [`#[structopt(parse(...))]`](https://docs.rs/structopt/latest/structopt/#custom-string-parsers).\nThus, the `speed` argument is generated as:\n```\nclap::Arg::with_name(\"speed\")\n  .takes_value(true)\n  .multiple(false)\n  .required(false)\n  .validator(parse_validator::<f64>)\n  .short(\"v\")\n  .long(\"velocity\")\n  .help(\"Set speed\")\n  .default_value(\"42\");\n```\n\n### \u00a7\u27e813\u27e9Specifying argument types\nThere are three types of arguments that can be supplied to each (sub-)command:\n  * short (e.g. `-h`),\n  * long (e.g. `--help`)\n  * and positional.\n\n\nLike clap, structopt defaults to creating positional arguments.\nIf you want to generate a long argument you can specify either `long = $NAME`, or just `long` to get a long flag generated using the field name. The generated casing style can be modified using the `rename_all` attribute. See the `rename_all` example for more.\nFor short arguments, `short` will use the first letter of the field name by default, but just like the long option it\u2019s also possible to use a custom letter through `short = $LETTER`.\nIf an argument is renamed using `name = $NAME` any following call to `short` or `long` will use the new name.\n**Attention** : If these arguments are used without an explicit name the resulting flag is going to be renamed using `kebab-case` if the `rename_all` attribute was not specified previously. The same is true for subcommands with implicit naming through the related data structure.\n```\nuse structopt::StructOpt;\n#[derive(StructOpt)]\n#[structopt(rename_all = \"kebab-case\")]\nstruct Opt {\n  /// This option can be specified with something like `--foo-option\n  /// value` or `--foo-option=value`\n  #[structopt(long)]\n  foo_option: String,\n  /// This option can be specified with something like `-b value` (but\n  /// not `--bar-option value`).\n  #[structopt(short)]\n  bar_option: String,\n  /// This option can be specified either `--baz value` or `-z value`.\n  #[structopt(short = \"z\", long = \"baz\")]\n  baz_option: String,\n  /// This option can be specified either by `--custom value` or\n  /// `-c value`.\n  #[structopt(name = \"custom\", long, short)]\n  custom_option: String,\n  /// This option is positional, meaning it is the first unadorned string\n  /// you provide (multiple others could follow).\n  my_positional: String,\n  /// This option is skipped and will be filled with the default value\n  /// for its type (in this case 0).\n  #[structopt(skip)]\n  skipped: u32,\n}\n\n```\n\n### \u00a7\u27e814\u27e9Default values\nIn clap, default values for options can be specified via `Arg::default_value`\u27e832\u27e9.\nOf course, you can use as a raw method:\n```\n#[derive(StructOpt)]\nstruct Opt {\n  #[structopt(default_value = \"\", long)]\n  prefix: String,\n}\n```\n\nThis is quite mundane and error-prone to type the `\"...\"` default by yourself, especially when the Rust ecosystem uses the `Default`\u27e833\u27e9 trait for that. It would be wonderful to have `structopt` to take the `Default_default` and fill it for you. And yes, `structopt` can do that.\nUnfortunately, `default_value` takes `&str` but `Default::default` gives us some `Self` value. We need to map `Self` to `&str` somehow.\n`structopt` solves this problem via `ToString`\u27e834\u27e9 trait.\nTo be able to use auto-default the type must implement _both_ `Default` and `ToString`:\n```\n#[derive(StructOpt)]\nstruct Opt {\n  // just leave the `= \"...\"` part and structopt will figure it for you\n  #[structopt(default_value, long)]\n  prefix: String, // `String` implements both `Default` and `ToString`\n}\n```\n\n### \u00a7\u27e815\u27e9Help messages\nIn clap, help messages for the whole binary can be specified via `App::about`\u27e835\u27e9 and `App::long_about`\u27e836\u27e9 while help messages for individual arguments can be specified via `Arg::help`\u27e837\u27e9 and `Arg::long_help`\u27e838\u27e9\u201c.\n`long_*` variants are used when user calls the program with `--help` and \u201cshort\u201d variants are used with `-h` flag. In `structopt`, you can use them via raw methods\u27e810\u27e9, for example:\n```\n\n#[derive(StructOpt)]\n#[structopt(about = \"I am a program and I work, just pass `-h`\")]\nstruct Foo {\n  #[structopt(short, help = \"Pass `-h` and you'll see me!\")]\n  bar: String,\n}\n```\n\nFor convenience, doc comments can be used instead of raw methods (this example works exactly like the one above):\n```\n\n#[derive(StructOpt)]\n/// I am a program and I work, just pass `-h`\nstruct Foo {\n  /// Pass `-h` and you'll see me!\n  bar: String,\n}\n```\n\nDoc comments on top-level\u27e811\u27e9 will be turned into `App::about/long_about` call (see below), doc comments on field-level are `Arg::help/long_help` calls.\n**Important:**\nRaw methods have priority over doc comments!\n**Top level doc comments always generate`App::about/long_about` calls!** If you really want to use the `App::help/long_help` methods (you likely don\u2019t), use a raw method to override the `App::about` call generated from the doc comment.\n#### \u00a7\u27e839\u27e9`long_help` and `--help`\nA message passed to `App::long_about`\u27e836\u27e9 or `Arg::long_help`\u27e838\u27e9 will be displayed whenever your program is called with `--help` instead of `-h`. Of course, you can use them via raw methods as described above\u27e815\u27e9.\nThe more convenient way is to use a so-called \u201clong\u201d doc comment:\n```\n#[derive(StructOpt)]\n/// Hi there, I'm Robo!\n///\n/// I like beeping, stumbling, eating your electricity,\n/// and making records of you singing in a shower.\n/// Pay up, or I'll upload it to youtube!\nstruct Robo {\n  /// Call my brother SkyNet.\n  ///\n  /// I am artificial superintelligence. I won't rest\n  /// until I'll have destroyed humanity. Enjoy your\n  /// pathetic existence, you mere mortals.\n  #[structopt(long)]\n  kill_all_humans: bool,\n}\n```\n\nA long doc comment consists of three parts:\n  * Short summary\n  * A blank line (whitespace only)\n  * Detailed description, all the rest\n\n\nIn other words, \u201clong\u201d doc comment consists of two or more paragraphs, with the first being a summary and the rest being the detailed description.\n**A long comment will result in two method calls** , `help(<summary>)` and `long_help(<whole comment>)`, so clap will display the summary with `-h` and the whole help message on `--help` (see below).\nSo, the example above will be turned into this (details omitted):\n```\nclap::App::new(\"<name>\")\n  .about(\"Hi there, I'm Robo!\")\n  .long_about(\"Hi there, I'm Robo!\\n\\n\\\n         I like beeping, stumbling, eating your electricity,\\\n         and making records of you singing in a shower.\\\n         Pay up or I'll upload it to youtube!\")\n// args...\n```\n\n#### \u00a7\u27e840\u27e9`-h` vs `--help` (A.K.A `help()` vs `long_help()`)\nThe `-h` flag is not the same as `--help`.\n-h corresponds to `Arg::help/App::about` and requests short \u201csummary\u201d messages while \u2013help corresponds to `Arg::long_help/App::long_about` and requests more detailed, descriptive messages.\nIt is entirely up to `clap` what happens if you used only one of `Arg::help`\u27e837\u27e9/`Arg::long_help`\u27e838\u27e9, see `clap`\u2019s documentation for these methods.\nAs of clap v2.33, if only a short message (`Arg::help`\u27e837\u27e9) or only a long (`Arg::long_help`\u27e838\u27e9) message is provided, clap will use it for both -h and \u2013help. The same logic applies to `about/long_about`.\n#### \u00a7\u27e831\u27e9Doc comment preprocessing and `#[structopt(verbatim_doc_comment)]`\n`structopt` applies some preprocessing to doc comments to ease the most common uses:\n  * Strip leading and trailing whitespace from every line, if present.\n  * Strip leading and trailing blank lines, if present.\n  * Interpret each group of non-empty lines as a word-wrapped paragraph.\nWe replace newlines within paragraphs with spaces to allow the output to be re-wrapped to the terminal width.\n  * Strip any excess blank lines so that there is exactly one per paragraph break.\n  * If the first paragraph ends in exactly one period, remove the trailing period (i.e. strip trailing periods but not trailing ellipses).\n\n\nSometimes you don\u2019t want this preprocessing to apply, for example the comment contains some ASCII art or markdown tables, you would need to preserve LFs along with blank lines and the leading/trailing whitespace. You can ask `structopt` to preserve them via `#[structopt(verbatim_doc_comment)]` attribute.\n**This attribute must be applied to each field separately** , there\u2019s no global switch.\n**Important:**\nKeep in mind that `structopt` will _still_ remove one leading space from each line, even if this attribute is present, to allow for a space between `///` and the content.\nAlso, `structopt` will _still_ remove leading and trailing blank lines so these formats are equivalent:\n```\n/** This is a doc comment\nHello! */\n/**\nThis is a doc comment\nHello!\n*/\n/// This is a doc comment\n///\n/// Hello!\n```\n\n### \u00a7\u27e816\u27e9Environment variable fallback\nIt is possible to specify an environment variable fallback option for an arguments so that its value is taken from the specified environment variable if not given through the command-line:\n```\n\n#[derive(StructOpt)]\nstruct Foo {\n  #[structopt(short, long, env = \"PARAMETER_VALUE\")]\n  parameter_value: String,\n}\n```\n\nBy default, values from the environment are shown in the help output (i.e. when invoking `--help`):\n```\n$ cargo run -- --help\n...\nOPTIONS:\n -p, --parameter-value <parameter-value>   [env: PARAMETER_VALUE=env_value]\n```\n\nIn some cases this may be undesirable, for example when being used for passing credentials or secret tokens. In those cases you can use `hide_env_values` to avoid having structopt emit the actual secret values:\n```\n\n#[derive(StructOpt)]\nstruct Foo {\n  #[structopt(long = \"secret\", env = \"SECRET_VALUE\", hide_env_values = true)]\n  secret_value: String,\n}\n```\n\n#### \u00a7\u27e830\u27e9Auto-deriving environment variables\nEnvironment variables tend to be called after the corresponding `struct`\u2019s field, as in example above. The field is `secret_value` and the env var is \u201cSECRET_VALUE\u201d; the name is the same, except casing is different.\nIt\u2019s pretty tedious and error-prone to type the same name twice, so you can ask `structopt` to do that for you.\n```\n\n#[derive(StructOpt)]\nstruct Foo {\n  #[structopt(long = \"secret\", env)]\n  secret_value: String,\n}\n```\n\nIt works just like `#[structopt(short/long)]`: if `env` is not set to some concrete value the value will be derived from the field\u2019s name. This is controlled by `#[structopt(rename_all_env)]`.\n`rename_all_env` works exactly as `rename_all` (including overriding) except default casing is `SCREAMING_SNAKE_CASE` instead of `kebab-case`.\n### \u00a7\u27e817\u27e9Skipping fields\nSometimes you may want to add a field to your `Opt` struct that is not a command line option and `clap` should know nothing about it. You can ask `structopt` to skip the field entirely via `#[structopt(skip = value)]` (`value` must implement `Into<FieldType>`) or `#[structopt(skip)]` if you want assign the field with `Default::default()` (obviously, the field\u2019s type must implement `Default`).\n```\n#[derive(StructOpt)]\npub struct Opt {\n  #[structopt(long, short)]\n  number: u32,\n  // these fields are to be assigned with Default::default()\n  #[structopt(skip)]\n  k: String,\n  #[structopt(skip)]\n  v: Vec<u32>,\n  // these fields get set explicitly\n  #[structopt(skip = vec![1, 2, 3])]\n  k2: Vec<u32>,\n  #[structopt(skip = \"cake\")] // &str implements Into<String>\n  v2: String,\n}\n```\n\n### \u00a7\u27e818\u27e9Subcommands\nSome applications, especially large ones, split their functionality through the use of \u201csubcommands\u201d. Each of these act somewhat like a separate command, but is part of the larger group. One example is `git`, which has subcommands such as `add`, `commit`, and `clone`, to mention just a few.\n`clap` has this functionality, and `structopt` supports it through enums:\n```\n\n#[derive(StructOpt)]\n#[structopt(about = \"the stupid content tracker\")]\nenum Git {\n  Add {\n    #[structopt(short)]\n    interactive: bool,\n    #[structopt(short)]\n    patch: bool,\n    #[structopt(parse(from_os_str))]\n    files: Vec<PathBuf>,\n  },\n  Fetch {\n    #[structopt(long)]\n    dry_run: bool,\n    #[structopt(long)]\n    all: bool,\n    repository: Option<String>,\n  },\n  Commit {\n    #[structopt(short)]\n    message: Option<String>,\n    #[structopt(short)]\n    all: bool,\n  },\n}\n```\n\nUsing `derive(StructOpt)` on an enum instead of a struct will produce a `clap::App` that only takes subcommands. So `git add`, `git fetch`, and `git commit` would be commands allowed for the above example.\n`structopt` also provides support for applications where certain flags need to apply to all subcommands, as well as nested subcommands:\n```\n#[derive(StructOpt)]\nstruct MakeCookie {\n  #[structopt(name = \"supervisor\", default_value = \"Puck\", long = \"supervisor\")]\n  supervising_faerie: String,\n  /// The faerie tree this cookie is being made in.\n  tree: Option<String>,\n  #[structopt(subcommand)] // Note that we mark a field as a subcommand\n  cmd: Command,\n}\n#[derive(StructOpt)]\nenum Command {\n  /// Pound acorns into flour for cookie dough.\n  Pound {\n    acorns: u32,\n  },\n  /// Add magical sparkles -- the secret ingredient!\n  Sparkle {\n    #[structopt(short, parse(from_occurrences))]\n    magicality: u64,\n    #[structopt(short)]\n    color: String,\n  },\n  Finish(Finish),\n}\n// Subcommand can also be externalized by using a 1-uple enum variant\n#[derive(StructOpt)]\nstruct Finish {\n  #[structopt(short)]\n  time: u32,\n  #[structopt(subcommand)] // Note that we mark a field as a subcommand\n  finish_type: FinishType,\n}\n// subsubcommand!\n#[derive(StructOpt)]\nenum FinishType {\n  Glaze {\n    applications: u32,\n  },\n  Powder {\n    flavor: String,\n    dips: u32,\n  }\n}\n```\n\nMarking a field with `structopt(subcommand)` will add the subcommands of the designated enum to the current `clap::App`. The designated enum _must_ also be derived `StructOpt`. So the above example would take the following commands:\n  * `make-cookie pound 50`\n  * `make-cookie sparkle -mmm --color \"green\"`\n  * `make-cookie finish 130 glaze 3`\n\n\n#### \u00a7\u27e819\u27e9Optional subcommands\nSubcommands may be optional:\n```\n#[derive(StructOpt)]\nstruct Foo {\n  file: String,\n  #[structopt(subcommand)]\n  cmd: Option<Command>,\n}\n#[derive(StructOpt)]\nenum Command {\n  Bar,\n  Baz,\n  Quux,\n}\n```\n\n#### \u00a7\u27e820\u27e9External subcommands\nSometimes you want to support not only the set of well-known subcommands but you also want to allow other, user-driven subcommands. `clap` supports this via `AppSettings::AllowExternalSubcommands`\u27e841\u27e9.\n`structopt` provides it\u2019s own dedicated syntax for that:\n```\n#[derive(Debug, PartialEq, StructOpt)]\nstruct Opt {\n  #[structopt(subcommand)]\n  sub: Subcommands,\n}\n#[derive(Debug, PartialEq, StructOpt)]\nenum Subcommands {\n  // normal subcommand\n  Add,\n  // `external_subcommand` tells structopt to put\n  // all the extra arguments into this Vec\n  #[structopt(external_subcommand)]\n  Other(Vec<String>),\n}\n// normal subcommand\nassert_eq!(\n  Opt::from_iter(&[\"test\", \"add\"]),\n  Opt {\n    sub: Subcommands::Add\n  }\n);\nassert_eq!(\n  Opt::from_iter(&[\"test\", \"git\", \"status\"]),\n  Opt {\n    sub: Subcommands::Other(vec![\"git\".into(), \"status\".into()])\n  }\n);\n// Please note that if you'd wanted to allow \"no subcommands at all\" case\n// you should have used `sub: Option<Subcommands>` above\nassert!(Opt::from_iter_safe(&[\"test\"]).is_err());\n```\n\nIn other words, you just add an extra tuple variant marked with `#[structopt(subcommand)]`, and its type must be either `Vec<String>` or `Vec<OsString>`. `structopt` will detect `String` in this context and use appropriate `clap` API.\n#### \u00a7\u27e821\u27e9Flattening subcommands\nIt is also possible to combine multiple enums of subcommands into one. All the subcommands will be on the same level.\n```\n#[derive(StructOpt)]\nenum BaseCli {\n  Ghost10 {\n    arg1: i32,\n  }\n}\n#[derive(StructOpt)]\nenum Opt {\n  #[structopt(flatten)]\n  BaseCli(BaseCli),\n  Dex {\n    arg2: i32,\n  },\n}\n```\n\n```\ncli ghost10 42\ncli dex 42\n```\n\n### \u00a7\u27e822\u27e9Flattening\nIt can sometimes be useful to group related arguments in a substruct, while keeping the command-line interface flat. In these cases you can mark a field as `flatten` and give it another type that derives `StructOpt`:\n```\n#[derive(StructOpt)]\nstruct Cmdline {\n  /// switch on verbosity\n  #[structopt(short)]\n  verbose: bool,\n  #[structopt(flatten)]\n  daemon_opts: DaemonOpts,\n}\n#[derive(StructOpt)]\nstruct DaemonOpts {\n  /// daemon user\n  #[structopt(short)]\n  user: String,\n  /// daemon group\n  #[structopt(short)]\n  group: String,\n}\n```\n\nIn this example, the derived `Cmdline` parser will support the options `-v`, `-u` and `-g`.\nThis feature also makes it possible to define a `StructOpt` struct in a library, parse the corresponding arguments in the main argument parser, and pass off this struct to a handler provided by that library.\n### \u00a7\u27e823\u27e9Custom string parsers\nIf the field type does not have a `FromStr` implementation, or you would like to provide a custom parsing scheme other than `FromStr`, you may provide a custom string parser using `parse(...)` like this:\n```\nuse std::num::ParseIntError;\nuse std::path::PathBuf;\nfn parse_hex(src: &str) -> Result<u32, ParseIntError> {\n  u32::from_str_radix(src, 16)\n}\n#[derive(StructOpt)]\nstruct HexReader {\n  #[structopt(short, parse(try_from_str = parse_hex))]\n  number: u32,\n  #[structopt(short, parse(from_os_str))]\n  output: PathBuf,\n}\n```\n\nThere are five kinds of custom parsers:\nKind| Signature| Default  \n---|---|---  \n`from_str`| `fn(&str) -> T`| `::std::convert::From::from`  \n`try_from_str`| `fn(&str) -> Result<T, E>`| `::std::str::FromStr::from_str`  \n`from_os_str`| `fn(&OsStr) -> T`| `::std::convert::From::from`  \n`try_from_os_str`| `fn(&OsStr) -> Result<T, OsString>`| (no default function)  \n`from_occurrences`| `fn(u64) -> T`| `value as T`  \n`from_flag`| `fn(bool) -> T`| `::std::convert::From::from`  \nThe `from_occurrences` parser is special. Using `parse(from_occurrences)` results in the _number of flags occurrences_ being stored in the relevant field or being passed to the supplied function. In other words, it converts something like `-vvv` to `3`. This is equivalent to `.takes_value(false).multiple(true)`. Note that the default parser can only be used with fields of integer types (`u8`, `usize`, `i64`, etc.).\nThe `from_flag` parser is also special. Using `parse(from_flag)` or `parse(from_flag = some_func)` will result in the field being treated as a flag even if it does not have type `bool`.\nWhen supplying a custom string parser, `bool` will not be treated specially:\nType| Effect| Added method call to `clap::Arg`  \n---|---|---  \n`Option<T>`| optional argument| `.takes_value(true).multiple(false)`  \n`Vec<T>`| list of arguments| `.takes_value(true).multiple(true)`  \n`T`| required argument| `.takes_value(true).multiple(false).required(!has_default)`  \nIn the `try_from_*` variants, the function will run twice on valid input: once to validate, and once to parse. Hence, make sure the function is side-effect-free.\n### \u00a7\u27e824\u27e9Generics\nGeneric structs and enums can be used. They require explicit trait bounds on any generic types that will be used by the `StructOpt` derive macro. In some cases, associated types will require additional bounds. See the usage of `FromStr` below for an example of this.\n```\nuse std::{fmt, str::FromStr};\n// a struct with single custom argument\n#[derive(StructOpt)]\nstruct GenericArgs<T: FromStr> where <T as FromStr>::Err: fmt::Display + fmt::Debug {\n  generic_arg_1: String,\n  generic_arg_2: String,\n  custom_arg_1: T,\n}\n```\n\nor\n```\n// a struct with multiple custom arguments in a substructure\n#[derive(StructOpt)]\nstruct GenericArgs<T: StructOpt> {\n  generic_arg_1: String,\n  generic_arg_2: String,\n  #[structopt(flatten)]\n  custom_args: T,\n}\n```\n\n## Re-exports\u00a7\u27e842\u27e9\n\n`pub use clap[](https://docs.rs/clap/2.33.3/x86_64-unknown-linux-gnu/clap/index.html \"mod clap\");`\n\n## Traits\u00a7\u27e843\u27e9\n\nStructOpt\u27e825\u27e9\n    A struct that is converted from command line arguments.\n",
              "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://docs.rs/structopt/latest/settings.html: Settings\n\u27e82\u27e9 https://docs.rs/structopt/latest/help.html: Help\n\u27e83\u27e9 https://docs.rs/structopt/latest/src/structopt/lib.rs.html#9-1238: Source\n\u27e84\u27e9 https://docs.rs/structopt/latest/structopt/#maintenance: \u00a7\n\u27e85\u27e9 https://docs.rs/structopt/latest/structopt/#features: \u00a7\n\u27e86\u27e9 https://github.com/rust-cli/paw: `paw`\n\u27e87\u27e9 https://docs.rs/structopt/latest/structopt/#table-of-contents: \u00a7\n\u27e88\u27e9 https://docs.rs/structopt/latest/structopt/#how-to-derivestructopt: How to `derive(StructOpt)`\n\u27e89\u27e9 https://docs.rs/structopt/latest/structopt/#attributes: Attributes\n\u27e810\u27e9 https://docs.rs/structopt/latest/structopt/#raw-methods: Raw methods\n\u27e811\u27e9 https://docs.rs/structopt/latest/structopt/#magical-methods: Magical methods\n\u27e812\u27e9 https://docs.rs/structopt/latest/structopt/#type-magic: Type magic\n\u27e813\u27e9 https://docs.rs/structopt/latest/structopt/#specifying-argument-types: Specifying argument types\n\u27e814\u27e9 https://docs.rs/structopt/latest/structopt/#default-values: Default values\n\u27e815\u27e9 https://docs.rs/structopt/latest/structopt/#help-messages: Help messages\n\u27e816\u27e9 https://docs.rs/structopt/latest/structopt/#environment-variable-fallback: Environment variable fallback\n\u27e817\u27e9 https://docs.rs/structopt/latest/structopt/#skipping-fields: Skipping fields\n\u27e818\u27e9 https://docs.rs/structopt/latest/structopt/#subcommands: Subcommands\n\u27e819\u27e9 https://docs.rs/structopt/latest/structopt/#optional-subcommands: Optional subcommands\n\u27e820\u27e9 https://docs.rs/structopt/latest/structopt/#external-subcommands: External subcommands\n\u27e821\u27e9 https://docs.rs/structopt/latest/structopt/#flattening-subcommands: Flattening subcommands\n\u27e822\u27e9 https://docs.rs/structopt/latest/structopt/#flattening: Flattening\n\u27e823\u27e9 https://docs.rs/structopt/latest/structopt/#custom-string-parsers: Custom string parsers\n\u27e824\u27e9 https://docs.rs/structopt/latest/structopt/#generics: Generics\n\u27e825\u27e9 https://docs.rs/structopt/latest/structopt/trait.StructOpt.html: trait\u2019s reference documentation\n\u27e826\u27e9 https://docs.rs/clap/2.33.3/x86_64-unknown-linux-gnu/clap/app/struct.App.html: struct clap::app::App - `clap::App`\n\u27e827\u27e9 https://docs.rs/clap/2/clap/struct.App.html: `clap::App` methods\n\u27e828\u27e9 https://docs.rs/clap/2/clap/struct.Arg.html: `clap::Arg` methods\n\u27e829\u27e9 https://docs.rs/structopt/latest/structopt/: This example is not tested - \u24d8\n\u27e830\u27e9 https://docs.rs/structopt/latest/structopt/#auto-deriving-environment-variables: `rename_all_env`\n\u27e831\u27e9 https://docs.rs/structopt/latest/structopt/#doc-comment-preprocessing-and-structoptverbatim_doc_comment: `verbatim_doc_comment`\n\u27e832\u27e9 https://docs.rs/clap/2.33.0/clap/struct.Arg.html#method.default_value: `Arg::default_value`\n\u27e833\u27e9 https://doc.rust-lang.org/std/default/trait.Default.html: `Default`\n\u27e834\u27e9 https://doc.rust-lang.org/std/string/trait.ToString.html: `ToString`\n\u27e835\u27e9 https://docs.rs/clap/2/clap/struct.App.html#method.about: `App::about`\n\u27e836\u27e9 https://docs.rs/clap/2/clap/struct.App.html#method.long_about: `App::long_about`\n\u27e837\u27e9 https://docs.rs/clap/2/clap/struct.Arg.html#method.help: `Arg::help`\n\u27e838\u27e9 https://docs.rs/clap/2/clap/struct.Arg.html#method.long_help: `Arg::long_help`\n\u27e839\u27e9 https://docs.rs/structopt/latest/structopt/#long_help-and---help: \u00a7\n\u27e840\u27e9 https://docs.rs/structopt/latest/structopt/#-h-vs---help-aka-help-vs-long_help: \u00a7\n\u27e841\u27e9 https://docs.rs/clap/2.32.0/clap/enum.AppSettings.html#variant.AllowExternalSubcommands: `AppSettings::AllowExternalSubcommands`\n\u27e842\u27e9 https://docs.rs/structopt/latest/structopt/#reexports: \u00a7\n\u27e843\u27e9 https://docs.rs/structopt/latest/structopt/#traits: \u00a7\n",
              "fit_markdown": "",
              "fit_html": ""
            },
            "structured_data": {},
            "quality_score": 4.0,
            "extraction_method": "crawl4ai",
            "error": null,
            "metadata": {
              "doc_type": "docs",
              "content_length": 35775,
              "has_structured_data": false,
              "crawl_success": true
            },
            "timestamp": "113723.5053774"
          },
          "lib_rs": {
            "url": "https://lib.rs/crates/structopt",
            "title": "Untitled",
            "content": {
              "raw_markdown": "###  [55 releases](https://lib.rs/crates/structopt/versions)\n0.3.26 |  Jan 18, 2022   \n---|---  \n0.3.25 |  Oct 18, 2021   \n0.3.23 |  Aug 30, 2021   \n0.3.22 |  Jul 4, 2021   \n0.0.3 |  Feb 11, 2017   \n#**1062** in [Command-line interface](https://lib.rs/command-line-interface \"Crates to help create command line interfaces, such as argument parsers, line-editing, or output coloring and formatting.\")\nDownload history 349300/week @ 2024-11-16 253706/week @ 2024-11-23 278798/week @ 2024-11-30 392994/week @ 2024-12-07 326768/week @ 2024-12-14 94311/week @ 2024-12-21 146456/week @ 2024-12-28 327512/week @ 2025-01-04 379520/week @ 2025-01-11 290512/week @ 2025-01-18 315830/week @ 2025-01-25 400933/week @ 2025-02-01 398252/week @ 2025-02-08 340521/week @ 2025-02-15 416265/week @ 2025-02-22 332318/week @ 2025-03-01\n**1,565,832** downloads per month [This crate has lost popularity](https://lib.rs/crates/structopt/rev)\n**Apache-2.0 OR MIT**\n62KB  270 lines\n# StructOpt\n[![Build status](https://img.gs/czjpqfbdkz/full/https://travis-ci.com/TeXitoi/structopt.svg?branch=master)](https://app.travis-ci.com/github/TeXitoi/structopt) [![](https://img.shields.io/crates/v/structopt.svg)](https://crates.io/crates/structopt) [![](https://img.gs/czjpqfbdkz/full/https://docs.rs/structopt/badge.svg)](https://docs.rs/structopt) [![unsafe forbidden](https://img.shields.io/badge/unsafe-forbidden-success.svg)](https://github.com/rust-secure-code/safety-dance/)\nParse command line arguments by defining a struct. It combines [clap](https://lib.rs/crates/clap) with custom derive.\n## Maintenance\nAs clap v3 is now out, and the structopt features are integrated into (almost as-is), structopt is now in maintenance mode: no new feature will be added.\nBugs will be fixed, and documentation improvements will be accepted.\n## Documentation\nFind it on [Docs.rs](https://docs.rs/structopt). You can also check the [examples](https://github.com/TeXitoi/structopt/tree/master/examples) and the [changelog](https://github.com/TeXitoi/structopt/blob/master/CHANGELOG.md).\n## Example\nAdd ``structopt`` to your dependencies of your ``Cargo.toml``:\n```\n```[``dependencies``]`\n`structopt ``=` ``\"`0.3`\"``\n``\n```\n\nAnd then, in your rust file:\n```\n``use` `std`::```path`::``PathBuf`;`\n`use` `structopt`::``StructOpt`;`\n``///` A basic example`\n``#``[``derive```(```StructOpt`,` Debug```)```]``\n``#``[``structopt```(```name `=` ``\"`basic`\"`````)```]``\n``struct` ```Opt` ````{`\n  ``//` A flag, true if used in the command line. Note doc comment will`\n  ``//` be used for the help message of the flag. The name of the`\n  ``//` argument will be, by default, based on the name of the field.`\n  ``///` Activate debug mode`\n  ``#``[``structopt```(```short`,` long```)```]``\n  `debug``:` `bool`,\n  ``//` The number of occurrences of the `v/verbose` flag`\n  ``///` Verbose mode (-v, -vv, -vvv, etc.)`\n  ``#``[``structopt```(```short`,` long`,` ``parse``(```from_occurrences```)`````)```]``\n  `verbose``:` `u8`,\n  ``///` Set speed`\n  ``#``[``structopt```(```short`,` long`,` default_value `=` ``\"`42`\"`````)```]``\n  `speed``:` `f64`,\n  ``///` Output file`\n  ``#``[``structopt```(```short`,` long`,` ``parse``(```from_os_str```)`````)```]``\n  `output``:` PathBuf,\n  ``//` the long option will be translated by default to kebab case,`\n  ``//` i.e. `--nb-cars`.`\n  ``///` Number of cars`\n  ``#``[``structopt```(```short `=` ``\"`c`\"```,` long```)```]``\n  `nb_cars``:` ``Option``<``i32``>``,\n  ``///` admin_level to consider`\n  ``#``[``structopt```(```short`,` long```)```]``\n  `level``:` ``Vec``<``String``>``,\n  ``///` Files to process`\n  ``#``[``structopt```(```name `=` ``\"`FILE`\"```,` ``parse``(```from_os_str```)`````)```]``\n  `files``:` ``Vec``<`PathBuf`>``,\n```}```\n``fn` `main`````(````)``````{`\n  `let` opt `=` `Opt`::``from_args`(``)``;`\n  `println!``(```\"``{:#?}``\"```,` opt`)``;`\n```}```\n`\n```\n\nUsing this example:\n```\n```$``` ./basic`\n``error:``` The following required arguments were not provided:`\n  ``--output``` `<`output`>``\n``USAGE:``\n  ``basic````` --`output` `<`output`>` `-`-speed `<`speed`>``\n``For``` more information try`` --`help``\n``$``` ./basic`` --`help``\n``basic``` 0.3.0`\n``Guillaume``` Pinot `<`texitoi@texitoi.eu`>`, others`\n``A``` basic example`\n``USAGE:``\n  ``basic``` `[`FLAGS`]` `[`OPTIONS`]``` --`output` `<`output`>` `[`--`]` `[`file`]`...`\n``FLAGS:``\n  ``-d,````` --`debug`   Activate debug mode`\n  ``-h,````` --`help`    Prints help information`\n  ``-V,````` --`version`  Prints version information`\n  ``-v,````` --`verbose`  Verbose mode (-v,`` -`vv`,`` -`vvv`, etc.`)\n``OPTIONS:``\n  ``-l,````` --`level` `<`level`>`...   admin_level to consider`\n  ``-c,````` --`nb-cars` `<`nb-cars`>`  Number of cars`\n  ``-o,````` --`output` `<`output`>`   Output file`\n  ``-s,````` --`speed` `<`speed`>`    Set speed `[`default: 42`]``\n``ARGS:``\n  `<`file`>`...  ``Files``` to process`\n``$``` ./basic`` -`o` foo.txt`\n``Opt``` `{`\n  debug: false`,`\n  verbose: 0`,`\n  speed: 42.0`,`\n  output: ``\"`foo.txt`\"```,`\n  nb_cars: None`,`\n  level: `[``]``,`\n  files: `[``]``,`\n`}``\n``$``` ./basic`` -`o` foo.txt`` -`dvvvs` 1337`` -`l` alice`` -`l` bob`` --`nb-cars` 4 bar.txt baz.txt`\n``Opt``` `{`\n  debug: true`,`\n  verbose: 3`,`\n  speed: 1337.0`,`\n  output: ``\"`foo.txt`\"```,`\n  nb_cars: Some(\n    4`,`\n  )`,`\n  level: [\n    ``\"`alice`\"```,`\n    ``\"`bob`\"```,`\n  ]`,`\n  files: [\n    ``\"`bar.txt`\"```,`\n    ``\"`baz.txt`\"```,`\n  ]`,`\n`}``\n`\n```\n\n## StructOpt rustc version policy\n  * Minimum rustc version modification must be specified in the [changelog](https://github.com/TeXitoi/structopt/blob/master/CHANGELOG.md) and in the [travis configuration](https://github.com/TeXitoi/structopt/blob/master/.travis.yml).\n  * Contributors can increment minimum rustc version without any justification if the new version is required by the latest version of one of StructOpt's dependencies (````cargo``` update``` will not fail on StructOpt).\n  * Contributors can increment minimum rustc version if the library user experience is improved.\n\n\n## License\nLicensed under either of\n  * Apache License, Version 2.0 ([LICENSE-APACHE](https://github.com/texitoi/structopt/blob/97e92a3755a65f8ea44c994fd403208e7d97f561/LICENSE-APACHE) or <https://www.apache.org/licenses/LICENSE-2.0>)\n  * MIT license ([LICENSE-MIT](https://github.com/texitoi/structopt/blob/97e92a3755a65f8ea44c994fd403208e7d97f561/LICENSE-MIT) or <https://opensource.org/licenses/MIT>)\n\n\nat your option.\n### Contribution\nUnless you explicitly state otherwise, any contribution intentionally submitted for inclusion in the work by you, as defined in the Apache-2.0 license, shall be dual licensed as above, without any additional terms or conditions.\n#### Dependencies\n~4MB  ~70K SLoC\n  * [clap](https://lib.rs/crates/clap \"outdated\") 2.33\n  * [lazy_static](https://lib.rs/crates/lazy_static \"1.4.0\")\n  * [paw?](https://lib.rs/crates/structopt/features#feature-paw \"optional feature\") [paw](https://lib.rs/crates/paw \"renamed paw_dep, outdated\") 1.0\n  * [structopt-derive](https://lib.rs/crates/structopt-derive \"outdated\") =0.4.18\n\n\n  * dev  [rustversion](https://lib.rs/crates/rustversion \"1\")\n  * dev  [strum](https://lib.rs/crates/strum \"obsolete\") 0.21[+derive](https://lib.rs/crates/strum/features#feature-derive)\n  * dev  [trybuild](https://lib.rs/crates/trybuild \"1.0.5\")[+diff](https://lib.rs/crates/trybuild/features#feature-diff)\n\n\n#### [Other features](https://lib.rs/crates/structopt/features)\n  * [color](https://lib.rs/crates/structopt/features#feature-color)\n  * [debug](https://lib.rs/crates/structopt/features#feature-debug)\n  * [doc](https://lib.rs/crates/structopt/features#feature-doc)\n  * [lints](https://lib.rs/crates/structopt/features#feature-lints)\n  * [no_cargo](https://lib.rs/crates/structopt/features#feature-no_cargo)\n  * [suggestions](https://lib.rs/crates/structopt/features#feature-suggestions)\n  * [wrap_help](https://lib.rs/crates/structopt/features#feature-wrap_help)\n  * [yaml](https://lib.rs/crates/structopt/features#feature-yaml)\n\n\n  *[SLoC]: approx. additional lines of code\n",
              "markdown_with_citations": "###  55 releases\u27e81\u27e9\n0.3.26 |  Jan 18, 2022   \n---|---  \n0.3.25 |  Oct 18, 2021   \n0.3.23 |  Aug 30, 2021   \n0.3.22 |  Jul 4, 2021   \n0.0.3 |  Feb 11, 2017   \n#**1062** in Command-line interface\u27e82\u27e9\nDownload history 349300/week @ 2024-11-16 253706/week @ 2024-11-23 278798/week @ 2024-11-30 392994/week @ 2024-12-07 326768/week @ 2024-12-14 94311/week @ 2024-12-21 146456/week @ 2024-12-28 327512/week @ 2025-01-04 379520/week @ 2025-01-11 290512/week @ 2025-01-18 315830/week @ 2025-01-25 400933/week @ 2025-02-01 398252/week @ 2025-02-08 340521/week @ 2025-02-15 416265/week @ 2025-02-22 332318/week @ 2025-03-01\n**1,565,832** downloads per month This crate has lost popularity\u27e83\u27e9\n**Apache-2.0 OR MIT**\n62KB  270 lines\n# StructOpt\n![Build status\u27e84\u27e9](https://app.travis-ci.com/github/TeXitoi/structopt) ![\u27e85\u27e9](https://crates.io/crates/structopt) ![\u27e86\u27e9](https://docs.rs/structopt) ![unsafe forbidden\u27e87\u27e9](https://github.com/rust-secure-code/safety-dance/)\nParse command line arguments by defining a struct. It combines clap\u27e88\u27e9 with custom derive.\n## Maintenance\nAs clap v3 is now out, and the structopt features are integrated into (almost as-is), structopt is now in maintenance mode: no new feature will be added.\nBugs will be fixed, and documentation improvements will be accepted.\n## Documentation\nFind it on Docs.rs\u27e89\u27e9. You can also check the examples\u27e810\u27e9 and the changelog\u27e811\u27e9.\n## Example\nAdd ``structopt`` to your dependencies of your ``Cargo.toml``:\n```\n```[``dependencies``]`\n`structopt ``=` ``\"`0.3`\"``\n``\n```\n\nAnd then, in your rust file:\n```\n``use` `std`::```path`::``PathBuf`;`\n`use` `structopt`::``StructOpt`;`\n``///` A basic example`\n``#``[``derive```(```StructOpt`,` Debug```)```]``\n``#``[``structopt```(```name `=` ``\"`basic`\"`````)```]``\n``struct` ```Opt` ````{`\n  ``//` A flag, true if used in the command line. Note doc comment will`\n  ``//` be used for the help message of the flag. The name of the`\n  ``//` argument will be, by default, based on the name of the field.`\n  ``///` Activate debug mode`\n  ``#``[``structopt```(```short`,` long```)```]``\n  `debug``:` `bool`,\n  ``//` The number of occurrences of the `v/verbose` flag`\n  ``///` Verbose mode (-v, -vv, -vvv, etc.)`\n  ``#``[``structopt```(```short`,` long`,` ``parse``(```from_occurrences```)`````)```]``\n  `verbose``:` `u8`,\n  ``///` Set speed`\n  ``#``[``structopt```(```short`,` long`,` default_value `=` ``\"`42`\"`````)```]``\n  `speed``:` `f64`,\n  ``///` Output file`\n  ``#``[``structopt```(```short`,` long`,` ``parse``(```from_os_str```)`````)```]``\n  `output``:` PathBuf,\n  ``//` the long option will be translated by default to kebab case,`\n  ``//` i.e. `--nb-cars`.`\n  ``///` Number of cars`\n  ``#``[``structopt```(```short `=` ``\"`c`\"```,` long```)```]``\n  `nb_cars``:` ``Option``<``i32``>``,\n  ``///` admin_level to consider`\n  ``#``[``structopt```(```short`,` long```)```]``\n  `level``:` ``Vec``<``String``>``,\n  ``///` Files to process`\n  ``#``[``structopt```(```name `=` ``\"`FILE`\"```,` ``parse``(```from_os_str```)`````)```]``\n  `files``:` ``Vec``<`PathBuf`>``,\n```}```\n``fn` `main`````(````)``````{`\n  `let` opt `=` `Opt`::``from_args`(``)``;`\n  `println!``(```\"``{:#?}``\"```,` opt`)``;`\n```}```\n`\n```\n\nUsing this example:\n```\n```$``` ./basic`\n``error:``` The following required arguments were not provided:`\n  ``--output``` `<`output`>``\n``USAGE:``\n  ``basic````` --`output` `<`output`>` `-`-speed `<`speed`>``\n``For``` more information try`` --`help``\n``$``` ./basic`` --`help``\n``basic``` 0.3.0`\n``Guillaume``` Pinot `<`texitoi@texitoi.eu`>`, others`\n``A``` basic example`\n``USAGE:``\n  ``basic``` `[`FLAGS`]` `[`OPTIONS`]``` --`output` `<`output`>` `[`--`]` `[`file`]`...`\n``FLAGS:``\n  ``-d,````` --`debug`   Activate debug mode`\n  ``-h,````` --`help`    Prints help information`\n  ``-V,````` --`version`  Prints version information`\n  ``-v,````` --`verbose`  Verbose mode (-v,`` -`vv`,`` -`vvv`, etc.`)\n``OPTIONS:``\n  ``-l,````` --`level` `<`level`>`...   admin_level to consider`\n  ``-c,````` --`nb-cars` `<`nb-cars`>`  Number of cars`\n  ``-o,````` --`output` `<`output`>`   Output file`\n  ``-s,````` --`speed` `<`speed`>`    Set speed `[`default: 42`]``\n``ARGS:``\n  `<`file`>`...  ``Files``` to process`\n``$``` ./basic`` -`o` foo.txt`\n``Opt``` `{`\n  debug: false`,`\n  verbose: 0`,`\n  speed: 42.0`,`\n  output: ``\"`foo.txt`\"```,`\n  nb_cars: None`,`\n  level: `[``]``,`\n  files: `[``]``,`\n`}``\n``$``` ./basic`` -`o` foo.txt`` -`dvvvs` 1337`` -`l` alice`` -`l` bob`` --`nb-cars` 4 bar.txt baz.txt`\n``Opt``` `{`\n  debug: true`,`\n  verbose: 3`,`\n  speed: 1337.0`,`\n  output: ``\"`foo.txt`\"```,`\n  nb_cars: Some(\n    4`,`\n  )`,`\n  level: [\n    ``\"`alice`\"```,`\n    ``\"`bob`\"```,`\n  ]`,`\n  files: [\n    ``\"`bar.txt`\"```,`\n    ``\"`baz.txt`\"```,`\n  ]`,`\n`}``\n`\n```\n\n## StructOpt rustc version policy\n  * Minimum rustc version modification must be specified in the changelog\u27e811\u27e9 and in the travis configuration\u27e812\u27e9.\n  * Contributors can increment minimum rustc version without any justification if the new version is required by the latest version of one of StructOpt's dependencies (````cargo``` update``` will not fail on StructOpt).\n  * Contributors can increment minimum rustc version if the library user experience is improved.\n\n\n## License\nLicensed under either of\n  * Apache License, Version 2.0 (LICENSE-APACHE\u27e813\u27e9 or <https://www.apache.org/licenses/LICENSE-2.0>)\n  * MIT license (LICENSE-MIT\u27e814\u27e9 or <https://opensource.org/licenses/MIT>)\n\n\nat your option.\n### Contribution\nUnless you explicitly state otherwise, any contribution intentionally submitted for inclusion in the work by you, as defined in the Apache-2.0 license, shall be dual licensed as above, without any additional terms or conditions.\n#### Dependencies\n~4MB  ~70K SLoC\n  * clap\u27e88\u27e9 2.33\n  * lazy_static\u27e815\u27e9\n  * paw?\u27e816\u27e9 paw\u27e817\u27e9 1.0\n  * structopt-derive\u27e818\u27e9 =0.4.18\n\n\n  * dev  rustversion\u27e819\u27e9\n  * dev  strum\u27e820\u27e9 0.21+derive\u27e821\u27e9\n  * dev  trybuild\u27e822\u27e9+diff\u27e823\u27e9\n\n\n#### Other features\u27e824\u27e9\n  * color\u27e825\u27e9\n  * debug\u27e826\u27e9\n  * doc\u27e827\u27e9\n  * lints\u27e828\u27e9\n  * no_cargo\u27e829\u27e9\n  * suggestions\u27e830\u27e9\n  * wrap_help\u27e831\u27e9\n  * yaml\u27e832\u27e9\n\n\n  *[SLoC]: approx. additional lines of code\n",
              "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://lib.rs/crates/structopt/versions: 55 releases\n\u27e82\u27e9 https://lib.rs/command-line-interface: Crates to help create command line interfaces, such as argument parsers, line-editing, or output coloring and formatting. - Command-line interface\n\u27e83\u27e9 https://lib.rs/crates/structopt/rev: This crate has lost popularity\n\u27e84\u27e9 https://img.gs/czjpqfbdkz/full/https://travis-ci.com/TeXitoi/structopt.svg?branch=master: ![Build status\n\u27e85\u27e9 https://img.shields.io/crates/v/structopt.svg: ![\n\u27e86\u27e9 https://img.gs/czjpqfbdkz/full/https://docs.rs/structopt/badge.svg: ![\n\u27e87\u27e9 https://img.shields.io/badge/unsafe-forbidden-success.svg: ![unsafe forbidden\n\u27e88\u27e9 https://lib.rs/crates/clap: clap\n\u27e89\u27e9 https://docs.rs/structopt: Docs.rs\n\u27e810\u27e9 https://github.com/TeXitoi/structopt/tree/master/examples: examples\n\u27e811\u27e9 https://github.com/TeXitoi/structopt/blob/master/CHANGELOG.md: changelog\n\u27e812\u27e9 https://github.com/TeXitoi/structopt/blob/master/.travis.yml: travis configuration\n\u27e813\u27e9 https://github.com/texitoi/structopt/blob/97e92a3755a65f8ea44c994fd403208e7d97f561/LICENSE-APACHE: LICENSE-APACHE\n\u27e814\u27e9 https://github.com/texitoi/structopt/blob/97e92a3755a65f8ea44c994fd403208e7d97f561/LICENSE-MIT: LICENSE-MIT\n\u27e815\u27e9 https://lib.rs/crates/lazy_static: 1.4.0 - lazy_static\n\u27e816\u27e9 https://lib.rs/crates/structopt/features#feature-paw: optional feature - paw?\n\u27e817\u27e9 https://lib.rs/crates/paw: renamed paw_dep, outdated - paw\n\u27e818\u27e9 https://lib.rs/crates/structopt-derive: outdated - structopt-derive\n\u27e819\u27e9 https://lib.rs/crates/rustversion: 1 - rustversion\n\u27e820\u27e9 https://lib.rs/crates/strum: obsolete - strum\n\u27e821\u27e9 https://lib.rs/crates/strum/features#feature-derive: +derive\n\u27e822\u27e9 https://lib.rs/crates/trybuild: 1.0.5 - trybuild\n\u27e823\u27e9 https://lib.rs/crates/trybuild/features#feature-diff: +diff\n\u27e824\u27e9 https://lib.rs/crates/structopt/features: Other features\n\u27e825\u27e9 https://lib.rs/crates/structopt/features#feature-color: color\n\u27e826\u27e9 https://lib.rs/crates/structopt/features#feature-debug: debug\n\u27e827\u27e9 https://lib.rs/crates/structopt/features#feature-doc: doc\n\u27e828\u27e9 https://lib.rs/crates/structopt/features#feature-lints: lints\n\u27e829\u27e9 https://lib.rs/crates/structopt/features#feature-no_cargo: no_cargo\n\u27e830\u27e9 https://lib.rs/crates/structopt/features#feature-suggestions: suggestions\n\u27e831\u27e9 https://lib.rs/crates/structopt/features#feature-wrap_help: wrap_help\n\u27e832\u27e9 https://lib.rs/crates/structopt/features#feature-yaml: yaml\n",
              "fit_markdown": "",
              "fit_html": ""
            },
            "structured_data": {},
            "quality_score": 3.0,
            "extraction_method": "crawl4ai",
            "error": null,
            "metadata": {
              "doc_type": "docs",
              "content_length": 8045,
              "has_structured_data": false,
              "crawl_success": true
            },
            "timestamp": "113723.9184288"
          }
        },
        "crate_analysis": {
          "status": "completed",
          "check": [
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#lazy_static@1.4.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\lazy_static-1.4.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "lazy_static",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\lazy_static-1.4.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp5jijkibn\\structopt-0.3.26\\target\\debug\\deps\\liblazy_static-1b2aa05184283f8f.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#unicode-xid@0.2.1",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\unicode-xid-0.2.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "unicode_xid",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\unicode-xid-0.2.1\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp5jijkibn\\structopt-0.3.26\\target\\debug\\deps\\libunicode_xid-e635364a866a1233.rlib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp5jijkibn\\structopt-0.3.26\\target\\debug\\deps\\libunicode_xid-e635364a866a1233.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#unicode-width@0.1.8",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\unicode-width-0.1.8\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "unicode_width",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\unicode-width-0.1.8\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp5jijkibn\\structopt-0.3.26\\target\\debug\\deps\\libunicode_width-7d2d9bd8c815a1cf.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#strsim@0.8.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\strsim-0.8.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "strsim",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\strsim-0.8.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp5jijkibn\\structopt-0.3.26\\target\\debug\\deps\\libstrsim-c5e315d296637963.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#vec_map@0.8.2",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\vec_map-0.8.2\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "vec_map",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\vec_map-0.8.2\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp5jijkibn\\structopt-0.3.26\\target\\debug\\deps\\libvec_map-b383aca46fb32a21.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#version_check@0.9.2",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.9.2\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "version_check",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.9.2\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp5jijkibn\\structopt-0.3.26\\target\\debug\\deps\\libversion_check-b13c737d08dda3d3.rlib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp5jijkibn\\structopt-0.3.26\\target\\debug\\deps\\libversion_check-b13c737d08dda3d3.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#bitflags@1.2.1",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\bitflags-1.2.1\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\bitflags-1.2.1\\build.rs",
                "edition": "2015",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp5jijkibn\\structopt-0.3.26\\target\\debug\\build\\bitflags-09461fa3ccd26528\\build-script-build.exe",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp5jijkibn\\structopt-0.3.26\\target\\debug\\build\\bitflags-09461fa3ccd26528\\build_script_build.pdb"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#syn@1.0.61",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\syn-1.0.61\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\syn-1.0.61\\build.rs",
                "edition": "2018",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "clone-impls",
                "default",
                "derive",
                "extra-traits",
                "full",
                "parsing",
                "printing",
                "proc-macro",
                "quote"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp5jijkibn\\structopt-0.3.26\\target\\debug\\build\\syn-9a7a9b847934eb5b\\build-script-build.exe",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp5jijkibn\\structopt-0.3.26\\target\\debug\\build\\syn-9a7a9b847934eb5b\\build_script_build.pdb"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#proc-macro2@1.0.24",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\proc-macro2-1.0.24\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\proc-macro2-1.0.24\\build.rs",
                "edition": "2018",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "proc-macro"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp5jijkibn\\structopt-0.3.26\\target\\debug\\build\\proc-macro2-7a467a941c657ce3\\build-script-build.exe",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp5jijkibn\\structopt-0.3.26\\target\\debug\\build\\proc-macro2-7a467a941c657ce3\\build_script_build.pdb"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#textwrap@0.11.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\textwrap-0.11.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "textwrap",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\textwrap-0.11.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp5jijkibn\\structopt-0.3.26\\target\\debug\\deps\\libtextwrap-069ddc30273e8548.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "build-script-executed",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#bitflags@1.2.1",
              "linked_libs": [],
              "linked_paths": [],
              "cfgs": [
                "bitflags_const_fn"
              ],
              "env": [],
              "out_dir": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp5jijkibn\\structopt-0.3.26\\target\\debug\\build\\bitflags-748f89805faf86e4\\out"
            },
            {
              "reason": "build-script-executed",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#syn@1.0.61",
              "linked_libs": [],
              "linked_paths": [],
              "cfgs": [
                "syn_disable_nightly_tests"
              ],
              "env": [],
              "out_dir": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp5jijkibn\\structopt-0.3.26\\target\\debug\\build\\syn-5471d1da10d1600a\\out"
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#unicode-segmentation@1.7.1",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\unicode-segmentation-1.7.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "unicode_segmentation",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\unicode-segmentation-1.7.1\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp5jijkibn\\structopt-0.3.26\\target\\debug\\deps\\libunicode_segmentation-604d7bfec3385777.rlib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp5jijkibn\\structopt-0.3.26\\target\\debug\\deps\\libunicode_segmentation-604d7bfec3385777.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "build-script-executed",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#proc-macro2@1.0.24",
              "linked_libs": [],
              "linked_paths": [],
              "cfgs": [
                "lexerror_display",
                "hygiene",
                "use_proc_macro",
                "wrap_proc_macro"
              ],
              "env": [],
              "out_dir": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp5jijkibn\\structopt-0.3.26\\target\\debug\\build\\proc-macro2-343d25629b2cb8fa\\out"
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#proc-macro-error@1.0.4",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\proc-macro-error-1.0.4\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\proc-macro-error-1.0.4\\build.rs",
                "edition": "2018",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "syn",
                "syn-error"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp5jijkibn\\structopt-0.3.26\\target\\debug\\build\\proc-macro-error-26737644db3bf547\\build-script-build.exe",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp5jijkibn\\structopt-0.3.26\\target\\debug\\build\\proc-macro-error-26737644db3bf547\\build_script_build.pdb"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#proc-macro-error-attr@1.0.4",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\proc-macro-error-attr-1.0.4\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\proc-macro-error-attr-1.0.4\\build.rs",
                "edition": "2018",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp5jijkibn\\structopt-0.3.26\\target\\debug\\build\\proc-macro-error-attr-f3e2a0c775ec8e45\\build-script-build.exe",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp5jijkibn\\structopt-0.3.26\\target\\debug\\build\\proc-macro-error-attr-f3e2a0c775ec8e45\\build_script_build.pdb"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#bitflags@1.2.1",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\bitflags-1.2.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "bitflags",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\bitflags-1.2.1\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp5jijkibn\\structopt-0.3.26\\target\\debug\\deps\\libbitflags-26701e6b2a197173.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#winapi@0.3.9",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\winapi-0.3.9\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\winapi-0.3.9\\build.rs",
                "edition": "2015",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "consoleapi",
                "errhandlingapi",
                "fileapi",
                "minwinbase",
                "minwindef",
                "processenv",
                "std",
                "winbase",
                "wincon",
                "winerror",
                "winnt"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp5jijkibn\\structopt-0.3.26\\target\\debug\\build\\winapi-431342fc2ad9dc10\\build-script-build.exe",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp5jijkibn\\structopt-0.3.26\\target\\debug\\build\\winapi-431342fc2ad9dc10\\build_script_build.pdb"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "build-script-executed",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#proc-macro-error@1.0.4",
              "linked_libs": [],
              "linked_paths": [],
              "cfgs": [
                "use_fallback"
              ],
              "env": [],
              "out_dir": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp5jijkibn\\structopt-0.3.26\\target\\debug\\build\\proc-macro-error-a913ae68c2e17596\\out"
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#heck@0.3.2",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\heck-0.3.2\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "heck",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\heck-0.3.2\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp5jijkibn\\structopt-0.3.26\\target\\debug\\deps\\libheck-993602f39d8c35ba.rlib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp5jijkibn\\structopt-0.3.26\\target\\debug\\deps\\libheck-993602f39d8c35ba.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "build-script-executed",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#proc-macro-error-attr@1.0.4",
              "linked_libs": [],
              "linked_paths": [],
              "cfgs": [],
              "env": [],
              "out_dir": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp5jijkibn\\structopt-0.3.26\\target\\debug\\build\\proc-macro-error-attr-bb8cfe9247099ff2\\out"
            },
            {
              "reason": "build-script-executed",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#winapi@0.3.9",
              "linked_libs": [
                "dylib=advapi32",
                "dylib=cfgmgr32",
                "dylib=gdi32",
                "dylib=kernel32",
                "dylib=msimg32",
                "dylib=opengl32",
                "dylib=user32",
                "dylib=winspool"
              ],
              "linked_paths": [],
              "cfgs": [
                "feature=\"wtypesbase\"",
                "feature=\"wincontypes\"",
                "feature=\"cfgmgr32\"",
                "feature=\"basetsd\"",
                "feature=\"processthreadsapi\"",
                "feature=\"devpropdef\"",
                "feature=\"winreg\"",
                "feature=\"libloaderapi\"",
                "feature=\"ktmtypes\"",
                "feature=\"excpt\"",
                "feature=\"vcruntime\"",
                "feature=\"ntstatus\"",
                "feature=\"rpcndr\"",
                "feature=\"vadefs\"",
                "feature=\"ntdef\"",
                "feature=\"windef\"",
                "feature=\"wingdi\"",
                "feature=\"reason\"",
                "feature=\"guiddef\"",
                "feature=\"cfg\""
              ],
              "env": [],
              "out_dir": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp5jijkibn\\structopt-0.3.26\\target\\debug\\build\\winapi-119e1993fa6721b7\\out"
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#proc-macro2@1.0.24",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\proc-macro2-1.0.24\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "proc_macro2",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\proc-macro2-1.0.24\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "proc-macro"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp5jijkibn\\structopt-0.3.26\\target\\debug\\deps\\libproc_macro2-69e2586c79c5d735.rlib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp5jijkibn\\structopt-0.3.26\\target\\debug\\deps\\libproc_macro2-69e2586c79c5d735.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#quote@1.0.9",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\quote-1.0.9\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "quote",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\quote-1.0.9\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "proc-macro"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp5jijkibn\\structopt-0.3.26\\target\\debug\\deps\\libquote-b662a77508339c30.rlib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp5jijkibn\\structopt-0.3.26\\target\\debug\\deps\\libquote-b662a77508339c30.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#proc-macro-error-attr@1.0.4",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\proc-macro-error-attr-1.0.4\\Cargo.toml",
              "target": {
                "kind": [
                  "proc-macro"
                ],
                "crate_types": [
                  "proc-macro"
                ],
                "name": "proc_macro_error_attr",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\proc-macro-error-attr-1.0.4\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp5jijkibn\\structopt-0.3.26\\target\\debug\\deps\\proc_macro_error_attr-85148be83d5fbae1.dll",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp5jijkibn\\structopt-0.3.26\\target\\debug\\deps\\proc_macro_error_attr-85148be83d5fbae1.dll.lib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp5jijkibn\\structopt-0.3.26\\target\\debug\\deps\\proc_macro_error_attr-85148be83d5fbae1.dll.exp",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp5jijkibn\\structopt-0.3.26\\target\\debug\\deps\\proc_macro_error_attr-85148be83d5fbae1.pdb"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#winapi@0.3.9",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\winapi-0.3.9\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "winapi",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\winapi-0.3.9\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "consoleapi",
                "errhandlingapi",
                "fileapi",
                "minwinbase",
                "minwindef",
                "processenv",
                "std",
                "winbase",
                "wincon",
                "winerror",
                "winnt"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp5jijkibn\\structopt-0.3.26\\target\\debug\\deps\\libwinapi-bdda0cb6afb0fe0a.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#atty@0.2.14",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\atty-0.2.14\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "atty",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\atty-0.2.14\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp5jijkibn\\structopt-0.3.26\\target\\debug\\deps\\libatty-a172c88d01ed134c.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#clap@2.33.3",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\clap-2.33.3\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "clap",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\clap-2.33.3\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "ansi_term",
                "atty",
                "color",
                "default",
                "strsim",
                "suggestions",
                "vec_map"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp5jijkibn\\structopt-0.3.26\\target\\debug\\deps\\libclap-255816e23108b5a1.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#proc-macro-error@1.0.4",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\proc-macro-error-1.0.4\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "proc_macro_error",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\proc-macro-error-1.0.4\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "syn",
                "syn-error"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp5jijkibn\\structopt-0.3.26\\target\\debug\\deps\\libproc_macro_error-3bc85d92e42ede43.rlib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp5jijkibn\\structopt-0.3.26\\target\\debug\\deps\\libproc_macro_error-3bc85d92e42ede43.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#syn@1.0.61",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\syn-1.0.61\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "syn",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\syn-1.0.61\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "clone-impls",
                "default",
                "derive",
                "extra-traits",
                "full",
                "parsing",
                "printing",
                "proc-macro",
                "quote"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp5jijkibn\\structopt-0.3.26\\target\\debug\\deps\\libsyn-434c51932f235131.rlib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp5jijkibn\\structopt-0.3.26\\target\\debug\\deps\\libsyn-434c51932f235131.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#structopt-derive@0.4.18",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\structopt-derive-0.4.18\\Cargo.toml",
              "target": {
                "kind": [
                  "proc-macro"
                ],
                "crate_types": [
                  "proc-macro"
                ],
                "name": "structopt_derive",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\structopt-derive-0.4.18\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp5jijkibn\\structopt-0.3.26\\target\\debug\\deps\\structopt_derive-d68029a3f03a0e28.dll",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp5jijkibn\\structopt-0.3.26\\target\\debug\\deps\\structopt_derive-d68029a3f03a0e28.dll.lib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp5jijkibn\\structopt-0.3.26\\target\\debug\\deps\\structopt_derive-d68029a3f03a0e28.dll.exp",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp5jijkibn\\structopt-0.3.26\\target\\debug\\deps\\structopt_derive-d68029a3f03a0e28.pdb"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmp5jijkibn/structopt-0.3.26#structopt@0.3.26",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp5jijkibn\\structopt-0.3.26\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "structopt",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp5jijkibn\\structopt-0.3.26\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp5jijkibn\\structopt-0.3.26\\target\\debug\\deps\\libstructopt-210797411f8953b4.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "build-finished",
              "success": true
            }
          ],
          "clippy": [
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#version_check@0.9.2",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.9.2\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "version_check",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.9.2\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp5jijkibn\\structopt-0.3.26\\target\\debug\\deps\\libversion_check-b13c737d08dda3d3.rlib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp5jijkibn\\structopt-0.3.26\\target\\debug\\deps\\libversion_check-b13c737d08dda3d3.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#proc-macro2@1.0.24",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\proc-macro2-1.0.24\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\proc-macro2-1.0.24\\build.rs",
                "edition": "2018",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "proc-macro"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp5jijkibn\\structopt-0.3.26\\target\\debug\\build\\proc-macro2-7a467a941c657ce3\\build-script-build.exe",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp5jijkibn\\structopt-0.3.26\\target\\debug\\build\\proc-macro2-7a467a941c657ce3\\build_script_build.pdb"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#unicode-xid@0.2.1",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\unicode-xid-0.2.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "unicode_xid",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\unicode-xid-0.2.1\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp5jijkibn\\structopt-0.3.26\\target\\debug\\deps\\libunicode_xid-e635364a866a1233.rlib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp5jijkibn\\structopt-0.3.26\\target\\debug\\deps\\libunicode_xid-e635364a866a1233.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#proc-macro-error-attr@1.0.4",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\proc-macro-error-attr-1.0.4\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\proc-macro-error-attr-1.0.4\\build.rs",
                "edition": "2018",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp5jijkibn\\structopt-0.3.26\\target\\debug\\build\\proc-macro-error-attr-f3e2a0c775ec8e45\\build-script-build.exe",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp5jijkibn\\structopt-0.3.26\\target\\debug\\build\\proc-macro-error-attr-f3e2a0c775ec8e45\\build_script_build.pdb"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#winapi@0.3.9",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\winapi-0.3.9\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\winapi-0.3.9\\build.rs",
                "edition": "2015",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "consoleapi",
                "errhandlingapi",
                "fileapi",
                "minwinbase",
                "minwindef",
                "processenv",
                "std",
                "winbase",
                "wincon",
                "winerror",
                "winnt"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp5jijkibn\\structopt-0.3.26\\target\\debug\\build\\winapi-431342fc2ad9dc10\\build-script-build.exe",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp5jijkibn\\structopt-0.3.26\\target\\debug\\build\\winapi-431342fc2ad9dc10\\build_script_build.pdb"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#syn@1.0.61",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\syn-1.0.61\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\syn-1.0.61\\build.rs",
                "edition": "2018",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "clone-impls",
                "default",
                "derive",
                "extra-traits",
                "full",
                "parsing",
                "printing",
                "proc-macro",
                "quote"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp5jijkibn\\structopt-0.3.26\\target\\debug\\build\\syn-9a7a9b847934eb5b\\build-script-build.exe",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp5jijkibn\\structopt-0.3.26\\target\\debug\\build\\syn-9a7a9b847934eb5b\\build_script_build.pdb"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#proc-macro-error@1.0.4",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\proc-macro-error-1.0.4\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\proc-macro-error-1.0.4\\build.rs",
                "edition": "2018",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "syn",
                "syn-error"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp5jijkibn\\structopt-0.3.26\\target\\debug\\build\\proc-macro-error-26737644db3bf547\\build-script-build.exe",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp5jijkibn\\structopt-0.3.26\\target\\debug\\build\\proc-macro-error-26737644db3bf547\\build_script_build.pdb"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#bitflags@1.2.1",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\bitflags-1.2.1\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\bitflags-1.2.1\\build.rs",
                "edition": "2015",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp5jijkibn\\structopt-0.3.26\\target\\debug\\build\\bitflags-09461fa3ccd26528\\build-script-build.exe",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp5jijkibn\\structopt-0.3.26\\target\\debug\\build\\bitflags-09461fa3ccd26528\\build_script_build.pdb"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#unicode-segmentation@1.7.1",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\unicode-segmentation-1.7.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "unicode_segmentation",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\unicode-segmentation-1.7.1\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp5jijkibn\\structopt-0.3.26\\target\\debug\\deps\\libunicode_segmentation-604d7bfec3385777.rlib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp5jijkibn\\structopt-0.3.26\\target\\debug\\deps\\libunicode_segmentation-604d7bfec3385777.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#unicode-width@0.1.8",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\unicode-width-0.1.8\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "unicode_width",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\unicode-width-0.1.8\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp5jijkibn\\structopt-0.3.26\\target\\debug\\deps\\libunicode_width-7d2d9bd8c815a1cf.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#vec_map@0.8.2",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\vec_map-0.8.2\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "vec_map",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\vec_map-0.8.2\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp5jijkibn\\structopt-0.3.26\\target\\debug\\deps\\libvec_map-b383aca46fb32a21.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#strsim@0.8.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\strsim-0.8.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "strsim",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\strsim-0.8.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp5jijkibn\\structopt-0.3.26\\target\\debug\\deps\\libstrsim-c5e315d296637963.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "build-script-executed",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#proc-macro2@1.0.24",
              "linked_libs": [],
              "linked_paths": [],
              "cfgs": [
                "lexerror_display",
                "hygiene",
                "use_proc_macro",
                "wrap_proc_macro"
              ],
              "env": [],
              "out_dir": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp5jijkibn\\structopt-0.3.26\\target\\debug\\build\\proc-macro2-343d25629b2cb8fa\\out"
            },
            {
              "reason": "build-script-executed",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#syn@1.0.61",
              "linked_libs": [],
              "linked_paths": [],
              "cfgs": [
                "syn_disable_nightly_tests"
              ],
              "env": [],
              "out_dir": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp5jijkibn\\structopt-0.3.26\\target\\debug\\build\\syn-5471d1da10d1600a\\out"
            },
            {
              "reason": "build-script-executed",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#winapi@0.3.9",
              "linked_libs": [
                "dylib=advapi32",
                "dylib=cfgmgr32",
                "dylib=gdi32",
                "dylib=kernel32",
                "dylib=msimg32",
                "dylib=opengl32",
                "dylib=user32",
                "dylib=winspool"
              ],
              "linked_paths": [],
              "cfgs": [
                "feature=\"wtypesbase\"",
                "feature=\"wincontypes\"",
                "feature=\"cfgmgr32\"",
                "feature=\"basetsd\"",
                "feature=\"processthreadsapi\"",
                "feature=\"devpropdef\"",
                "feature=\"winreg\"",
                "feature=\"libloaderapi\"",
                "feature=\"ktmtypes\"",
                "feature=\"excpt\"",
                "feature=\"vcruntime\"",
                "feature=\"ntstatus\"",
                "feature=\"rpcndr\"",
                "feature=\"vadefs\"",
                "feature=\"ntdef\"",
                "feature=\"windef\"",
                "feature=\"wingdi\"",
                "feature=\"reason\"",
                "feature=\"guiddef\"",
                "feature=\"cfg\""
              ],
              "env": [],
              "out_dir": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp5jijkibn\\structopt-0.3.26\\target\\debug\\build\\winapi-119e1993fa6721b7\\out"
            },
            {
              "reason": "build-script-executed",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#proc-macro-error-attr@1.0.4",
              "linked_libs": [],
              "linked_paths": [],
              "cfgs": [],
              "env": [],
              "out_dir": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp5jijkibn\\structopt-0.3.26\\target\\debug\\build\\proc-macro-error-attr-bb8cfe9247099ff2\\out"
            },
            {
              "reason": "build-script-executed",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#proc-macro-error@1.0.4",
              "linked_libs": [],
              "linked_paths": [],
              "cfgs": [
                "use_fallback"
              ],
              "env": [],
              "out_dir": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp5jijkibn\\structopt-0.3.26\\target\\debug\\build\\proc-macro-error-a913ae68c2e17596\\out"
            },
            {
              "reason": "build-script-executed",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#bitflags@1.2.1",
              "linked_libs": [],
              "linked_paths": [],
              "cfgs": [
                "bitflags_const_fn"
              ],
              "env": [],
              "out_dir": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp5jijkibn\\structopt-0.3.26\\target\\debug\\build\\bitflags-748f89805faf86e4\\out"
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#textwrap@0.11.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\textwrap-0.11.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "textwrap",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\textwrap-0.11.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp5jijkibn\\structopt-0.3.26\\target\\debug\\deps\\libtextwrap-069ddc30273e8548.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#heck@0.3.2",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\heck-0.3.2\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "heck",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\heck-0.3.2\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp5jijkibn\\structopt-0.3.26\\target\\debug\\deps\\libheck-993602f39d8c35ba.rlib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp5jijkibn\\structopt-0.3.26\\target\\debug\\deps\\libheck-993602f39d8c35ba.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#lazy_static@1.4.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\lazy_static-1.4.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "lazy_static",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\lazy_static-1.4.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp5jijkibn\\structopt-0.3.26\\target\\debug\\deps\\liblazy_static-1b2aa05184283f8f.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#proc-macro2@1.0.24",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\proc-macro2-1.0.24\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "proc_macro2",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\proc-macro2-1.0.24\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "proc-macro"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp5jijkibn\\structopt-0.3.26\\target\\debug\\deps\\libproc_macro2-69e2586c79c5d735.rlib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp5jijkibn\\structopt-0.3.26\\target\\debug\\deps\\libproc_macro2-69e2586c79c5d735.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#winapi@0.3.9",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\winapi-0.3.9\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "winapi",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\winapi-0.3.9\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "consoleapi",
                "errhandlingapi",
                "fileapi",
                "minwinbase",
                "minwindef",
                "processenv",
                "std",
                "winbase",
                "wincon",
                "winerror",
                "winnt"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp5jijkibn\\structopt-0.3.26\\target\\debug\\deps\\libwinapi-bdda0cb6afb0fe0a.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#bitflags@1.2.1",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\bitflags-1.2.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "bitflags",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\bitflags-1.2.1\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp5jijkibn\\structopt-0.3.26\\target\\debug\\deps\\libbitflags-26701e6b2a197173.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#quote@1.0.9",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\quote-1.0.9\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "quote",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\quote-1.0.9\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "proc-macro"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp5jijkibn\\structopt-0.3.26\\target\\debug\\deps\\libquote-b662a77508339c30.rlib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp5jijkibn\\structopt-0.3.26\\target\\debug\\deps\\libquote-b662a77508339c30.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#atty@0.2.14",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\atty-0.2.14\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "atty",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\atty-0.2.14\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp5jijkibn\\structopt-0.3.26\\target\\debug\\deps\\libatty-a172c88d01ed134c.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#syn@1.0.61",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\syn-1.0.61\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "syn",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\syn-1.0.61\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "clone-impls",
                "default",
                "derive",
                "extra-traits",
                "full",
                "parsing",
                "printing",
                "proc-macro",
                "quote"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp5jijkibn\\structopt-0.3.26\\target\\debug\\deps\\libsyn-434c51932f235131.rlib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp5jijkibn\\structopt-0.3.26\\target\\debug\\deps\\libsyn-434c51932f235131.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#proc-macro-error-attr@1.0.4",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\proc-macro-error-attr-1.0.4\\Cargo.toml",
              "target": {
                "kind": [
                  "proc-macro"
                ],
                "crate_types": [
                  "proc-macro"
                ],
                "name": "proc_macro_error_attr",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\proc-macro-error-attr-1.0.4\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp5jijkibn\\structopt-0.3.26\\target\\debug\\deps\\proc_macro_error_attr-85148be83d5fbae1.dll",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp5jijkibn\\structopt-0.3.26\\target\\debug\\deps\\proc_macro_error_attr-85148be83d5fbae1.dll.lib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp5jijkibn\\structopt-0.3.26\\target\\debug\\deps\\proc_macro_error_attr-85148be83d5fbae1.dll.exp",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp5jijkibn\\structopt-0.3.26\\target\\debug\\deps\\proc_macro_error_attr-85148be83d5fbae1.pdb"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#clap@2.33.3",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\clap-2.33.3\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "clap",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\clap-2.33.3\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "ansi_term",
                "atty",
                "color",
                "default",
                "strsim",
                "suggestions",
                "vec_map"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp5jijkibn\\structopt-0.3.26\\target\\debug\\deps\\libclap-255816e23108b5a1.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#proc-macro-error@1.0.4",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\proc-macro-error-1.0.4\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "proc_macro_error",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\proc-macro-error-1.0.4\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "syn",
                "syn-error"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp5jijkibn\\structopt-0.3.26\\target\\debug\\deps\\libproc_macro_error-3bc85d92e42ede43.rlib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp5jijkibn\\structopt-0.3.26\\target\\debug\\deps\\libproc_macro_error-3bc85d92e42ede43.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#structopt-derive@0.4.18",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\structopt-derive-0.4.18\\Cargo.toml",
              "target": {
                "kind": [
                  "proc-macro"
                ],
                "crate_types": [
                  "proc-macro"
                ],
                "name": "structopt_derive",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\structopt-derive-0.4.18\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp5jijkibn\\structopt-0.3.26\\target\\debug\\deps\\structopt_derive-d68029a3f03a0e28.dll",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp5jijkibn\\structopt-0.3.26\\target\\debug\\deps\\structopt_derive-d68029a3f03a0e28.dll.lib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp5jijkibn\\structopt-0.3.26\\target\\debug\\deps\\structopt_derive-d68029a3f03a0e28.dll.exp",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp5jijkibn\\structopt-0.3.26\\target\\debug\\deps\\structopt_derive-d68029a3f03a0e28.pdb"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmp5jijkibn/structopt-0.3.26#structopt@0.3.26",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp5jijkibn\\structopt-0.3.26\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "structopt",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp5jijkibn\\structopt-0.3.26\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: doc list item overindented\n   --> src\\lib.rs:140:5\n    |\n140 | //!    `attr = [\"whatever\"]` form, but some `attr(args...)` also exist.\n    |     ^^^ help: try using `  ` (2 spaces)\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#doc_overindented_list_items\n    = note: `#[warn(clippy::doc_overindented_list_items)]` on by default\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#doc_overindented_list_items",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "`#[warn(clippy::doc_overindented_list_items)]` on by default",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "try using `  ` (2 spaces)",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 4712,
                        "byte_start": 4709,
                        "column_end": 8,
                        "column_start": 5,
                        "expansion": null,
                        "file_name": "src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 140,
                        "line_start": 140,
                        "suggested_replacement": "  ",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 8,
                            "highlight_start": 5,
                            "text": "//!    `attr = [\"whatever\"]` form, but some `attr(args...)` also exist."
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::doc_overindented_list_items",
                  "explanation": null
                },
                "level": "warning",
                "message": "doc list item overindented",
                "spans": [
                  {
                    "byte_end": 4712,
                    "byte_start": 4709,
                    "column_end": 8,
                    "column_start": 5,
                    "expansion": null,
                    "file_name": "src\\lib.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 140,
                    "line_start": 140,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 8,
                        "highlight_start": 5,
                        "text": "//!    `attr = [\"whatever\"]` form, but some `attr(args...)` also exist."
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmp5jijkibn/structopt-0.3.26#structopt@0.3.26",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp5jijkibn\\structopt-0.3.26\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "structopt",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp5jijkibn\\structopt-0.3.26\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: doc list item overindented\n   --> src\\lib.rs:145:5\n    |\n145 | //!     They are what used to be explicit `#[structopt(raw(...))]` attrs in pre-0.3 `structopt`\n    |     ^^^^ help: try using `  ` (2 spaces)\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#doc_overindented_list_items\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#doc_overindented_list_items",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "try using `  ` (2 spaces)",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 4895,
                        "byte_start": 4891,
                        "column_end": 9,
                        "column_start": 5,
                        "expansion": null,
                        "file_name": "src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 145,
                        "line_start": 145,
                        "suggested_replacement": "  ",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 9,
                            "highlight_start": 5,
                            "text": "//!     They are what used to be explicit `#[structopt(raw(...))]` attrs in pre-0.3 `structopt`"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::doc_overindented_list_items",
                  "explanation": null
                },
                "level": "warning",
                "message": "doc list item overindented",
                "spans": [
                  {
                    "byte_end": 4895,
                    "byte_start": 4891,
                    "column_end": 9,
                    "column_start": 5,
                    "expansion": null,
                    "file_name": "src\\lib.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 145,
                    "line_start": 145,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 9,
                        "highlight_start": 5,
                        "text": "//!     They are what used to be explicit `#[structopt(raw(...))]` attrs in pre-0.3 `structopt`"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmp5jijkibn/structopt-0.3.26#structopt@0.3.26",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp5jijkibn\\structopt-0.3.26\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "structopt",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp5jijkibn\\structopt-0.3.26\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: doc list item overindented\n   --> src\\lib.rs:270:5\n    |\n270 | //!     Defaults to the crate version given by Cargo. If `CARGO_PKG_VERSION` is not\n    |     ^^^^ help: try using `  ` (2 spaces)\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#doc_overindented_list_items\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#doc_overindented_list_items",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "try using `  ` (2 spaces)",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 9297,
                        "byte_start": 9293,
                        "column_end": 9,
                        "column_start": 5,
                        "expansion": null,
                        "file_name": "src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 270,
                        "line_start": 270,
                        "suggested_replacement": "  ",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 9,
                            "highlight_start": 5,
                            "text": "//!     Defaults to the crate version given by Cargo. If `CARGO_PKG_VERSION` is not"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::doc_overindented_list_items",
                  "explanation": null
                },
                "level": "warning",
                "message": "doc list item overindented",
                "spans": [
                  {
                    "byte_end": 9297,
                    "byte_start": 9293,
                    "column_end": 9,
                    "column_start": 5,
                    "expansion": null,
                    "file_name": "src\\lib.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 270,
                    "line_start": 270,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 9,
                        "highlight_start": 5,
                        "text": "//!     Defaults to the crate version given by Cargo. If `CARGO_PKG_VERSION` is not"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmp5jijkibn/structopt-0.3.26#structopt@0.3.26",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp5jijkibn\\structopt-0.3.26\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "structopt",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp5jijkibn\\structopt-0.3.26\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: doc list item overindented\n   --> src\\lib.rs:271:5\n    |\n271 | //!     set no `.version()` calls will be generated unless requested.\n    |     ^^^^ help: try using `  ` (2 spaces)\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#doc_overindented_list_items\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#doc_overindented_list_items",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "try using `  ` (2 spaces)",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 9381,
                        "byte_start": 9377,
                        "column_end": 9,
                        "column_start": 5,
                        "expansion": null,
                        "file_name": "src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 271,
                        "line_start": 271,
                        "suggested_replacement": "  ",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 9,
                            "highlight_start": 5,
                            "text": "//!     set no `.version()` calls will be generated unless requested."
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::doc_overindented_list_items",
                  "explanation": null
                },
                "level": "warning",
                "message": "doc list item overindented",
                "spans": [
                  {
                    "byte_end": 9381,
                    "byte_start": 9377,
                    "column_end": 9,
                    "column_start": 5,
                    "expansion": null,
                    "file_name": "src\\lib.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 271,
                    "line_start": 271,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 9,
                        "highlight_start": 5,
                        "text": "//!     set no `.version()` calls will be generated unless requested."
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmp5jijkibn/structopt-0.3.26#structopt@0.3.26",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp5jijkibn\\structopt-0.3.26\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "structopt",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp5jijkibn\\structopt-0.3.26\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: doc list item overindented\n   --> src\\lib.rs:276:5\n    |\n276 | //!     when no `version = \"version\"` mentioned.\n    |     ^^^^ help: try using `  ` (2 spaces)\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#doc_overindented_list_items\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#doc_overindented_list_items",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "try using `  ` (2 spaces)",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 9568,
                        "byte_start": 9564,
                        "column_end": 9,
                        "column_start": 5,
                        "expansion": null,
                        "file_name": "src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 276,
                        "line_start": 276,
                        "suggested_replacement": "  ",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 9,
                            "highlight_start": 5,
                            "text": "//!     when no `version = \"version\"` mentioned."
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::doc_overindented_list_items",
                  "explanation": null
                },
                "level": "warning",
                "message": "doc list item overindented",
                "spans": [
                  {
                    "byte_end": 9568,
                    "byte_start": 9564,
                    "column_end": 9,
                    "column_start": 5,
                    "expansion": null,
                    "file_name": "src\\lib.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 276,
                    "line_start": 276,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 9,
                        "highlight_start": 5,
                        "text": "//!     when no `version = \"version\"` mentioned."
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmp5jijkibn/structopt-0.3.26#structopt@0.3.26",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp5jijkibn\\structopt-0.3.26\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "structopt",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp5jijkibn\\structopt-0.3.26\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: doc list item overindented\n   --> src\\lib.rs:283:5\n    |\n283 | //!     Defaults to the crate author given by cargo, but only when `author` explicitly mentioned.\n    |     ^^^^ help: try using `  ` (2 spaces)\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#doc_overindented_list_items\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#doc_overindented_list_items",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "try using `  ` (2 spaces)",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 9830,
                        "byte_start": 9826,
                        "column_end": 9,
                        "column_start": 5,
                        "expansion": null,
                        "file_name": "src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 283,
                        "line_start": 283,
                        "suggested_replacement": "  ",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 9,
                            "highlight_start": 5,
                            "text": "//!     Defaults to the crate author given by cargo, but only when `author` explicitly mentioned."
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::doc_overindented_list_items",
                  "explanation": null
                },
                "level": "warning",
                "message": "doc list item overindented",
                "spans": [
                  {
                    "byte_end": 9830,
                    "byte_start": 9826,
                    "column_end": 9,
                    "column_start": 5,
                    "expansion": null,
                    "file_name": "src\\lib.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 283,
                    "line_start": 283,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 9,
                        "highlight_start": 5,
                        "text": "//!     Defaults to the crate author given by cargo, but only when `author` explicitly mentioned."
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmp5jijkibn/structopt-0.3.26#structopt@0.3.26",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp5jijkibn\\structopt-0.3.26\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "structopt",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp5jijkibn\\structopt-0.3.26\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: doc list item overindented\n   --> src\\lib.rs:290:5\n    |\n290 | //!     Defaults to the crate description given by cargo,\n    |     ^^^^ help: try using `  ` (2 spaces)\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#doc_overindented_list_items\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#doc_overindented_list_items",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "try using `  ` (2 spaces)",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 10130,
                        "byte_start": 10126,
                        "column_end": 9,
                        "column_start": 5,
                        "expansion": null,
                        "file_name": "src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 290,
                        "line_start": 290,
                        "suggested_replacement": "  ",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 9,
                            "highlight_start": 5,
                            "text": "//!     Defaults to the crate description given by cargo,"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::doc_overindented_list_items",
                  "explanation": null
                },
                "level": "warning",
                "message": "doc list item overindented",
                "spans": [
                  {
                    "byte_end": 10130,
                    "byte_start": 10126,
                    "column_end": 9,
                    "column_start": 5,
                    "expansion": null,
                    "file_name": "src\\lib.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 290,
                    "line_start": 290,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 9,
                        "highlight_start": 5,
                        "text": "//!     Defaults to the crate description given by cargo,"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmp5jijkibn/structopt-0.3.26#structopt@0.3.26",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp5jijkibn\\structopt-0.3.26\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "structopt",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp5jijkibn\\structopt-0.3.26\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: doc list item overindented\n   --> src\\lib.rs:291:5\n    |\n291 | //!     but only when `about` explicitly mentioned.\n    |     ^^^^ help: try using `  ` (2 spaces)\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#doc_overindented_list_items\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#doc_overindented_list_items",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "try using `  ` (2 spaces)",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 10188,
                        "byte_start": 10184,
                        "column_end": 9,
                        "column_start": 5,
                        "expansion": null,
                        "file_name": "src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 291,
                        "line_start": 291,
                        "suggested_replacement": "  ",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 9,
                            "highlight_start": 5,
                            "text": "//!     but only when `about` explicitly mentioned."
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::doc_overindented_list_items",
                  "explanation": null
                },
                "level": "warning",
                "message": "doc list item overindented",
                "spans": [
                  {
                    "byte_end": 10188,
                    "byte_start": 10184,
                    "column_end": 9,
                    "column_start": 5,
                    "expansion": null,
                    "file_name": "src\\lib.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 291,
                    "line_start": 291,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 9,
                        "highlight_start": 5,
                        "text": "//!     but only when `about` explicitly mentioned."
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmp5jijkibn/structopt-0.3.26#structopt@0.3.26",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp5jijkibn\\structopt-0.3.26\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "structopt",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp5jijkibn\\structopt-0.3.26\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: doc list item overindented\n   --> src\\lib.rs:306:5\n    |\n306 | //!     [`rename_all = \"kebab\"/\"snake\"/\"screaming-snake\"/\"camel\"/\"pascal\"/\"verbatim\"/\"lower\"/\"upper\"]`\n    |     ^^^^ help: try using `  ` (2 spaces)\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#doc_overindented_list_items\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#doc_overindented_list_items",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "try using `  ` (2 spaces)",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 10649,
                        "byte_start": 10645,
                        "column_end": 9,
                        "column_start": 5,
                        "expansion": null,
                        "file_name": "src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 306,
                        "line_start": 306,
                        "suggested_replacement": "  ",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 9,
                            "highlight_start": 5,
                            "text": "//!     [`rename_all = \"kebab\"/\"snake\"/\"screaming-snake\"/\"camel\"/\"pascal\"/\"verbatim\"/\"lower\"/\"upper\"]`"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::doc_overindented_list_items",
                  "explanation": null
                },
                "level": "warning",
                "message": "doc list item overindented",
                "spans": [
                  {
                    "byte_end": 10649,
                    "byte_start": 10645,
                    "column_end": 9,
                    "column_start": 5,
                    "expansion": null,
                    "file_name": "src\\lib.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 306,
                    "line_start": 306,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 9,
                        "highlight_start": 5,
                        "text": "//!     [`rename_all = \"kebab\"/\"snake\"/\"screaming-snake\"/\"camel\"/\"pascal\"/\"verbatim\"/\"lower\"/\"upper\"]`"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmp5jijkibn/structopt-0.3.26#structopt@0.3.26",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp5jijkibn\\structopt-0.3.26\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "structopt",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp5jijkibn\\structopt-0.3.26\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: doc list item overindented\n   --> src\\lib.rs:335:5\n    |\n335 | //!     [`rename_all_env = \"kebab\"/\"snake\"/\"screaming-snake\"/\"camel\"/\"pascal\"/\"verbatim\"/\"lower\"/\"upper\"]`\n    |     ^^^^ help: try using `  ` (2 spaces)\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#doc_overindented_list_items\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#doc_overindented_list_items",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "try using `  ` (2 spaces)",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 11509,
                        "byte_start": 11505,
                        "column_end": 9,
                        "column_start": 5,
                        "expansion": null,
                        "file_name": "src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 335,
                        "line_start": 335,
                        "suggested_replacement": "  ",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 9,
                            "highlight_start": 5,
                            "text": "//!     [`rename_all_env = \"kebab\"/\"snake\"/\"screaming-snake\"/\"camel\"/\"pascal\"/\"verbatim\"/\"lower\"/\"upper\"]`"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::doc_overindented_list_items",
                  "explanation": null
                },
                "level": "warning",
                "message": "doc list item overindented",
                "spans": [
                  {
                    "byte_end": 11509,
                    "byte_start": 11505,
                    "column_end": 9,
                    "column_start": 5,
                    "expansion": null,
                    "file_name": "src\\lib.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 335,
                    "line_start": 335,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 9,
                        "highlight_start": 5,
                        "text": "//!     [`rename_all_env = \"kebab\"/\"snake\"/\"screaming-snake\"/\"camel\"/\"pascal\"/\"verbatim\"/\"lower\"/\"upper\"]`"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmp5jijkibn/structopt-0.3.26#structopt@0.3.26",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp5jijkibn\\structopt-0.3.26\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "structopt",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp5jijkibn\\structopt-0.3.26\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: doc list item overindented\n   --> src\\lib.rs:340:5\n    |\n340 | //!     `verbatim_doc_comment`\n    |     ^^^^ help: try using `  ` (2 spaces)\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#doc_overindented_list_items\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#doc_overindented_list_items",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "try using `  ` (2 spaces)",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 11768,
                        "byte_start": 11764,
                        "column_end": 9,
                        "column_start": 5,
                        "expansion": null,
                        "file_name": "src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 340,
                        "line_start": 340,
                        "suggested_replacement": "  ",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 9,
                            "highlight_start": 5,
                            "text": "//!     `verbatim_doc_comment`"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::doc_overindented_list_items",
                  "explanation": null
                },
                "level": "warning",
                "message": "doc list item overindented",
                "spans": [
                  {
                    "byte_end": 11768,
                    "byte_start": 11764,
                    "column_end": 9,
                    "column_start": 5,
                    "expansion": null,
                    "file_name": "src\\lib.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 340,
                    "line_start": 340,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 9,
                        "highlight_start": 5,
                        "text": "//!     `verbatim_doc_comment`"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-artifact",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmp5jijkibn/structopt-0.3.26#structopt@0.3.26",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp5jijkibn\\structopt-0.3.26\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "structopt",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp5jijkibn\\structopt-0.3.26\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp5jijkibn\\structopt-0.3.26\\target\\debug\\deps\\libstructopt-c8ce30c56769f1a0.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "build-finished",
              "success": true
            }
          ],
          "audit": {
            "database": {
              "advisory-count": 787,
              "last-commit": "7573f55ba337263f61167dbb0ea926cdc7c8eb5d",
              "last-updated": "2025-06-17T11:04:25+02:00"
            },
            "lockfile": {
              "dependency-count": 61
            },
            "settings": {
              "target_arch": [],
              "target_os": [],
              "severity": null,
              "ignore": [],
              "informational_warnings": [
                "unmaintained",
                "unsound",
                "notice"
              ]
            },
            "vulnerabilities": {
              "found": true,
              "count": 1,
              "list": [
                {
                  "advisory": {
                    "id": "RUSTSEC-2018-0006",
                    "package": "yaml-rust",
                    "title": "Uncontrolled recursion leads to abort in deserialization",
                    "description": "Affected versions of this crate did not prevent deep recursion while\ndeserializing data structures.\n\nThis allows an attacker to make a YAML file with deeply nested structures\nthat causes an abort while deserializing it.\n\nThe flaw was corrected by checking the recursion depth.\n\nNote: `clap 2.33` is not affected by this because it uses `yaml-rust`\nin a way that doesn't trigger the vulnerability. More specifically:\n\n1. The input to the YAML parser is always trusted - is included at compile\ntime via `include_str!`.\n\n2. The nesting level is never deep enough to trigger the overflow in practice\n(at most 5).",
                    "date": "2018-09-17",
                    "aliases": [
                      "CVE-2018-20993",
                      "GHSA-hv87-47h9-jcvq"
                    ],
                    "related": [],
                    "collection": "crates",
                    "categories": [],
                    "keywords": [
                      "crash"
                    ],
                    "cvss": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
                    "informational": null,
                    "references": [],
                    "source": null,
                    "url": "https://github.com/chyh1990/yaml-rust/pull/109",
                    "withdrawn": null,
                    "license": "CC0-1.0"
                  },
                  "versions": {
                    "patched": [
                      ">=0.4.1"
                    ],
                    "unaffected": []
                  },
                  "affected": null,
                  "package": {
                    "name": "yaml-rust",
                    "version": "0.3.5",
                    "source": "registry+https://github.com/rust-lang/crates.io-index",
                    "checksum": "e66366e18dc58b46801afbf2ca7661a9f59cc8c5962c29892b6039b4f86fa992",
                    "replace": null
                  }
                }
              ]
            },
            "warnings": {
              "unmaintained": [
                {
                  "kind": "unmaintained",
                  "package": {
                    "name": "ansi_term",
                    "version": "0.11.0",
                    "source": "registry+https://github.com/rust-lang/crates.io-index",
                    "checksum": "ee49baf6cb617b853aa8d93bf420db2383fab46d314482ca2803b40d5fde979b",
                    "dependencies": [
                      {
                        "name": "winapi",
                        "version": "0.3.9",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      }
                    ],
                    "replace": null
                  },
                  "advisory": {
                    "id": "RUSTSEC-2021-0139",
                    "package": "ansi_term",
                    "title": "ansi_term is Unmaintained",
                    "description": "The maintainer has advised that this crate is deprecated and will not receive any maintenance.\n\nThe crate does not seem to have much dependencies and may or may not be ok to use as-is.\n\nLast release seems to have been three years ago.\n\n## Possible Alternative(s)\n\n The below list has not been vetted in any way and may or may not contain alternatives;\n\n - [ansiterm](https://crates.io/crates/ansiterm)\n - [anstyle](https://github.com/epage/anstyle)\n - [console](https://crates.io/crates/console)\n - [nu-ansi-term](https://crates.io/crates/nu-ansi-term)\n - [owo-colors](https://crates.io/crates/owo-colors)\n - [stylish](https://crates.io/crates/stylish)\n - [yansi](https://crates.io/crates/yansi)\n\n## Dependency Specific Migration(s)\n\n - [structopt, clap2](https://github.com/clap-rs/clap/discussions/4172)",
                    "date": "2021-08-18",
                    "aliases": [],
                    "related": [],
                    "collection": "crates",
                    "categories": [],
                    "keywords": [],
                    "cvss": null,
                    "informational": "unmaintained",
                    "references": [],
                    "source": null,
                    "url": "https://github.com/ogham/rust-ansi-term/issues/72",
                    "withdrawn": null,
                    "license": "CC0-1.0"
                  },
                  "affected": null,
                  "versions": {
                    "patched": [],
                    "unaffected": []
                  }
                },
                {
                  "kind": "unmaintained",
                  "package": {
                    "name": "atty",
                    "version": "0.2.14",
                    "source": "registry+https://github.com/rust-lang/crates.io-index",
                    "checksum": "d9b39be18770d11421cdb1b9947a45dd3f37e93092cbf377614828a319d5fee8",
                    "dependencies": [
                      {
                        "name": "hermit-abi",
                        "version": "0.1.18",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "libc",
                        "version": "0.2.87",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "winapi",
                        "version": "0.3.9",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      }
                    ],
                    "replace": null
                  },
                  "advisory": {
                    "id": "RUSTSEC-2024-0375",
                    "package": "atty",
                    "title": "`atty` is unmaintained",
                    "description": "The maintainer of `atty` has [published](https://github.com/softprops/atty/commit/5bfdbe9e48c6ca6a4909e8d5b04f5e843a257e93) an official notice that the crate is no longer\nunder development, and that users should instead rely on the functionality in the standard library's [`IsTerminal`](https://doc.rust-lang.org/std/io/trait.IsTerminal.html) trait.\n\n## Alternative(s)\n\n- [std::io::IsTerminal](https://doc.rust-lang.org/stable/std/io/trait.IsTerminal.html) - Stable since Rust 1.70.0 and the recommended replacement per the `atty` maintainer.\n- [is-terminal](https://crates.io/crates/is-terminal) - Standalone crate supporting Rust older than 1.70.0",
                    "date": "2024-09-25",
                    "aliases": [],
                    "related": [],
                    "collection": "crates",
                    "categories": [],
                    "keywords": [],
                    "cvss": null,
                    "informational": "unmaintained",
                    "references": [],
                    "source": null,
                    "url": "https://github.com/softprops/atty/issues/57",
                    "withdrawn": null,
                    "license": "CC0-1.0"
                  },
                  "affected": null,
                  "versions": {
                    "patched": [],
                    "unaffected": []
                  }
                },
                {
                  "kind": "unmaintained",
                  "package": {
                    "name": "proc-macro-error",
                    "version": "1.0.4",
                    "source": "registry+https://github.com/rust-lang/crates.io-index",
                    "checksum": "da25490ff9892aab3fcf7c36f08cfb902dd3e71ca0f9f9517bea02a73a5ce38c",
                    "dependencies": [
                      {
                        "name": "proc-macro-error-attr",
                        "version": "1.0.4",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "proc-macro2",
                        "version": "1.0.24",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "quote",
                        "version": "1.0.9",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "syn",
                        "version": "1.0.61",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "version_check",
                        "version": "0.9.2",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      }
                    ],
                    "replace": null
                  },
                  "advisory": {
                    "id": "RUSTSEC-2024-0370",
                    "package": "proc-macro-error",
                    "title": "proc-macro-error is unmaintained",
                    "description": "proc-macro-error's maintainer seems to be unreachable, with no commits for 2 years, no releases pushed for 4 years, and no activity on the GitLab repo or response to email.\n\nproc-macro-error also depends on `syn 1.x`, which may be bringing duplicate dependencies into dependant build trees.\n\n## Possible Alternative(s)\n\n- [manyhow](https://crates.io/crates/manyhow)\n- [proc-macro-error2](https://crates.io/crates/proc-macro-error2)\n- [proc-macro2-diagnostics](https://github.com/SergioBenitez/proc-macro2-diagnostics)",
                    "date": "2024-09-01",
                    "aliases": [],
                    "related": [],
                    "collection": "crates",
                    "categories": [],
                    "keywords": [],
                    "cvss": null,
                    "informational": "unmaintained",
                    "references": [],
                    "source": null,
                    "url": "https://gitlab.com/CreepySkeleton/proc-macro-error/-/issues/20",
                    "withdrawn": null,
                    "license": "CC0-1.0"
                  },
                  "affected": null,
                  "versions": {
                    "patched": [],
                    "unaffected": []
                  }
                },
                {
                  "kind": "unmaintained",
                  "package": {
                    "name": "term",
                    "version": "0.5.2",
                    "source": "registry+https://github.com/rust-lang/crates.io-index",
                    "checksum": "edd106a334b7657c10b7c540a0106114feadeb4dc314513e97df481d5d966f42",
                    "dependencies": [
                      {
                        "name": "byteorder",
                        "version": "1.4.2",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "dirs",
                        "version": "1.0.5",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "winapi",
                        "version": "0.3.9",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      }
                    ],
                    "replace": null
                  },
                  "advisory": {
                    "id": "RUSTSEC-2018-0015",
                    "package": "term",
                    "title": "term is looking for a new maintainer",
                    "description": "The author of the `term` crate does not have time to maintain it and is looking\nfor a new maintainer.\n\nSome maintained alternatives you can potentially switch to instead, depending\non your needs:\n\n- [`crossterm`](https://github.com/crossterm-rs/crossterm)\n- [`termcolor`](https://crates.io/crates/termcolor)\n- [`yansi`](https://crates.io/crates/yansi)",
                    "date": "2018-11-19",
                    "aliases": [],
                    "related": [],
                    "collection": "crates",
                    "categories": [],
                    "keywords": [],
                    "cvss": null,
                    "informational": "unmaintained",
                    "references": [],
                    "source": null,
                    "url": "https://github.com/Stebalien/term/issues/93",
                    "withdrawn": null,
                    "license": "CC0-1.0"
                  },
                  "affected": null,
                  "versions": {
                    "patched": [],
                    "unaffected": [
                      ">0.6.1"
                    ]
                  }
                },
                {
                  "kind": "unmaintained",
                  "package": {
                    "name": "term_size",
                    "version": "0.3.2",
                    "source": "registry+https://github.com/rust-lang/crates.io-index",
                    "checksum": "1e4129646ca0ed8f45d09b929036bafad5377103edd06e50bf574b353d2b08d9",
                    "dependencies": [
                      {
                        "name": "libc",
                        "version": "0.2.87",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "winapi",
                        "version": "0.3.9",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      }
                    ],
                    "replace": null
                  },
                  "advisory": {
                    "id": "RUSTSEC-2020-0163",
                    "package": "term_size",
                    "title": "`term_size` is unmaintained; use `terminal_size` instead",
                    "description": "The [`term_size`](https://crates.io/crates/term_size) crate is no longer maintained. Consider using\n[`terminal_size`](https://crates.io/crates/terminal_size) instead.",
                    "date": "2020-11-03",
                    "aliases": [],
                    "related": [],
                    "collection": "crates",
                    "categories": [],
                    "keywords": [],
                    "cvss": null,
                    "informational": "unmaintained",
                    "references": [],
                    "source": null,
                    "url": "https://github.com/clap-rs/term_size-rs/pull/31",
                    "withdrawn": null,
                    "license": "CC0-1.0"
                  },
                  "affected": null,
                  "versions": {
                    "patched": [],
                    "unaffected": []
                  }
                },
                {
                  "kind": "unmaintained",
                  "package": {
                    "name": "yaml-rust",
                    "version": "0.3.5",
                    "source": "registry+https://github.com/rust-lang/crates.io-index",
                    "checksum": "e66366e18dc58b46801afbf2ca7661a9f59cc8c5962c29892b6039b4f86fa992",
                    "replace": null
                  },
                  "advisory": {
                    "id": "RUSTSEC-2024-0320",
                    "package": "yaml-rust",
                    "title": "yaml-rust is unmaintained.",
                    "description": "The maintainer seems [unreachable](https://github.com/chyh1990/yaml-rust/issues/197).\n\nMany issues and pull requests have been submitted over the years\nwithout any [response](https://github.com/chyh1990/yaml-rust/issues/160).\n\n## Alternatives\n\nConsider switching to the actively maintained `yaml-rust2` fork of the original project:\n\n- [yaml-rust2](https://github.com/Ethiraric/yaml-rust2)\n- [yaml-rust2 @ crates.io](https://crates.io/crates/yaml-rust2)",
                    "date": "2024-03-20",
                    "aliases": [],
                    "related": [],
                    "collection": "crates",
                    "categories": [],
                    "keywords": [],
                    "cvss": null,
                    "informational": "unmaintained",
                    "references": [],
                    "source": null,
                    "url": "https://github.com/rustsec/advisory-db/issues/1921",
                    "withdrawn": null,
                    "license": "CC0-1.0"
                  },
                  "affected": null,
                  "versions": {
                    "patched": [],
                    "unaffected": []
                  }
                }
              ],
              "unsound": [
                {
                  "kind": "unsound",
                  "package": {
                    "name": "atty",
                    "version": "0.2.14",
                    "source": "registry+https://github.com/rust-lang/crates.io-index",
                    "checksum": "d9b39be18770d11421cdb1b9947a45dd3f37e93092cbf377614828a319d5fee8",
                    "dependencies": [
                      {
                        "name": "hermit-abi",
                        "version": "0.1.18",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "libc",
                        "version": "0.2.87",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "winapi",
                        "version": "0.3.9",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      }
                    ],
                    "replace": null
                  },
                  "advisory": {
                    "id": "RUSTSEC-2021-0145",
                    "package": "atty",
                    "title": "Potential unaligned read",
                    "description": "On windows, `atty` dereferences a potentially unaligned pointer.\n\nIn practice however, the pointer won't be unaligned unless a custom global allocator is used.\n\nIn particular, the `System` allocator on windows uses `HeapAlloc`, which guarantees a large enough alignment.\n\n# atty is Unmaintained\n\nA Pull Request with a fix has been provided over a year ago but the maintainer seems to be unreachable.\n\nLast release of `atty` was almost 3 years ago.\n\n## Possible Alternative(s)\n\nThe below list has not been vetted in any way and may or may not contain alternatives;\n\n - [std::io::IsTerminal](https://doc.rust-lang.org/stable/std/io/trait.IsTerminal.html) - Stable since Rust 1.70.0\n - [is-terminal](https://crates.io/crates/is-terminal) - Standalone crate supporting Rust older than 1.70.0",
                    "date": "2021-07-04",
                    "aliases": [
                      "GHSA-g98v-hv3f-hcfr"
                    ],
                    "related": [],
                    "collection": "crates",
                    "categories": [],
                    "keywords": [
                      "unaligned-read"
                    ],
                    "cvss": null,
                    "informational": "unsound",
                    "references": [
                      "https://github.com/softprops/atty/pull/51",
                      "https://github.com/softprops/atty/issues/57"
                    ],
                    "source": null,
                    "url": "https://github.com/softprops/atty/issues/50",
                    "withdrawn": null,
                    "license": "CC0-1.0"
                  },
                  "affected": {
                    "arch": [],
                    "os": [
                      "windows"
                    ],
                    "functions": {}
                  },
                  "versions": {
                    "patched": [],
                    "unaffected": []
                  }
                },
                {
                  "kind": "unsound",
                  "package": {
                    "name": "crossbeam-utils",
                    "version": "0.8.3",
                    "source": "registry+https://github.com/rust-lang/crates.io-index",
                    "checksum": "e7e9d99fa91428effe99c5c6d4634cdeba32b8cf784fc428a2a687f61a952c49",
                    "dependencies": [
                      {
                        "name": "autocfg",
                        "version": "1.0.1",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "cfg-if",
                        "version": "1.0.0",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "lazy_static",
                        "version": "1.4.0",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      }
                    ],
                    "replace": null
                  },
                  "advisory": {
                    "id": "RUSTSEC-2022-0041",
                    "package": "crossbeam-utils",
                    "title": "Unsoundness of AtomicCell<*64> arithmetics on 32-bit targets that support Atomic*64",
                    "description": "## Impact\n\nAffected versions of this crate incorrectly assumed that the alignment of {i,u}64 was always the same as Atomic{I,U}64.\n\nHowever, the alignment of {i,u}64 on a 32-bit target can be smaller than Atomic{I,U}64.\n\nThis can cause the following problems:\n\n- Unaligned memory accesses\n- Data race\n\nCrates using fetch_* methods with AtomicCell<{i,u}64> are affected by this issue.\n\n32-bit targets without Atomic{I,U}64 and 64-bit targets are not affected by this issue.\n\n32-bit targets with Atomic{I,U}64 and {i,u}64 have the same alignment are also not affected by this issue.\n\nThe following is a complete list of the builtin targets that may be affected. (last update: nightly-2022-02-11)\n\n- armv7-apple-ios (tier 3)\n- armv7s-apple-ios (tier 3)\n- i386-apple-ios (tier 3)\n- i586-unknown-linux-gnu\n- i586-unknown-linux-musl\n- i686-apple-darwin (tier 3)\n- i686-linux-android\n- i686-unknown-freebsd\n- i686-unknown-haiku (tier 3)\n- i686-unknown-linux-gnu\n- i686-unknown-linux-musl\n- i686-unknown-netbsd (tier 3)\n- i686-unknown-openbsd (tier 3)\n- i686-wrs-vxworks (tier 3)\n\n([script to get list](https://gist.github.com/taiki-e/3c7891e8c5f5e0cbcb44d7396aabfe10))\n\n## Patches\n\nThis has been fixed in crossbeam-utils 0.8.7.\n\nAffected 0.8.x releases have been yanked.\n\nThanks to @taiki-e",
                    "date": "2022-02-05",
                    "aliases": [
                      "GHSA-qc84-gqf4-9926",
                      "CVE-2022-23639"
                    ],
                    "related": [],
                    "collection": "crates",
                    "categories": [
                      "memory-corruption"
                    ],
                    "keywords": [],
                    "cvss": null,
                    "informational": "unsound",
                    "references": [],
                    "source": null,
                    "url": "https://github.com/crossbeam-rs/crossbeam/pull/781",
                    "withdrawn": null,
                    "license": "CC0-1.0"
                  },
                  "affected": null,
                  "versions": {
                    "patched": [
                      ">=0.8.7"
                    ],
                    "unaffected": []
                  }
                }
              ],
              "yanked": [
                {
                  "kind": "yanked",
                  "package": {
                    "name": "crossbeam-utils",
                    "version": "0.8.3",
                    "source": "registry+https://github.com/rust-lang/crates.io-index",
                    "checksum": "e7e9d99fa91428effe99c5c6d4634cdeba32b8cf784fc428a2a687f61a952c49",
                    "dependencies": [
                      {
                        "name": "autocfg",
                        "version": "1.0.1",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "cfg-if",
                        "version": "1.0.0",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "lazy_static",
                        "version": "1.4.0",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      }
                    ],
                    "replace": null
                  },
                  "advisory": null,
                  "affected": null,
                  "versions": null
                }
              ]
            }
          },
          "note": "Crate analysis performed with stable toolchain."
        },
        "crate_metadata": {
          "name": "structopt",
          "version": "0.3.26",
          "description": "ALLOW: Positive community sentiment",
          "repository": "",
          "keywords": [],
          "categories": [],
          "readme": {
            "raw_markdown": "[](https://docs.rs/structopt/latest/structopt/all.html \"show sidebar\")\n# Crate structoptCopy item path\n[Settings](https://docs.rs/structopt/latest/settings.html)\n[Help](https://docs.rs/structopt/latest/help.html)\nSummary[Source](https://docs.rs/structopt/latest/src/structopt/lib.rs.html#9-1238)\nExpand description\nThis crate defines the `StructOpt` trait and its custom derive.\n### [\u00a7](https://docs.rs/structopt/latest/structopt/#maintenance)Maintenance\nAs clap v3 is now out, and the structopt features are integrated into (almost as-is), structopt is now in maintenance mode: no new feature will be added.\nBugs will be fixed, and documentation improvements will be accepted.\n### [\u00a7](https://docs.rs/structopt/latest/structopt/#features)Features\nIf you want to disable all the `clap` features (colors, suggestions, ..) add `default-features = false` to the `structopt` dependency:\n```\n[dependencies]\nstructopt = { version = \"0.3\", default-features = false }\n```\n\nSupport for [`paw`](https://github.com/rust-cli/paw) (the `Command line argument paw-rser abstraction for main`) is disabled by default, but can be enabled in the `structopt` dependency with the feature `paw`:\n```\n[dependencies]\nstructopt = { version = \"0.3\", features = [ \"paw\" ] }\npaw = \"1.0\"\n```\n\n## [\u00a7](https://docs.rs/structopt/latest/structopt/#table-of-contents)Table of Contents\n  * [How to `derive(StructOpt)`](https://docs.rs/structopt/latest/structopt/#how-to-derivestructopt)\n  * [Attributes](https://docs.rs/structopt/latest/structopt/#attributes)\n    * [Raw methods](https://docs.rs/structopt/latest/structopt/#raw-methods)\n    * [Magical methods](https://docs.rs/structopt/latest/structopt/#magical-methods)\n  * Arguments \n    * [Type magic](https://docs.rs/structopt/latest/structopt/#type-magic)\n    * [Specifying argument types](https://docs.rs/structopt/latest/structopt/#specifying-argument-types)\n    * [Default values](https://docs.rs/structopt/latest/structopt/#default-values)\n    * [Help messages](https://docs.rs/structopt/latest/structopt/#help-messages)\n    * [Environment variable fallback](https://docs.rs/structopt/latest/structopt/#environment-variable-fallback)\n  * [Skipping fields](https://docs.rs/structopt/latest/structopt/#skipping-fields)\n  * [Subcommands](https://docs.rs/structopt/latest/structopt/#subcommands)\n    * [Optional subcommands](https://docs.rs/structopt/latest/structopt/#optional-subcommands)\n    * [External subcommands](https://docs.rs/structopt/latest/structopt/#external-subcommands)\n    * [Flattening subcommands](https://docs.rs/structopt/latest/structopt/#flattening-subcommands)\n  * [Flattening](https://docs.rs/structopt/latest/structopt/#flattening)\n  * [Custom string parsers](https://docs.rs/structopt/latest/structopt/#custom-string-parsers)\n  * [Generics](https://docs.rs/structopt/latest/structopt/#generics)\n\n\n### [\u00a7](https://docs.rs/structopt/latest/structopt/#how-to-derivestructopt)How to `derive(StructOpt)`\nFirst, let\u2019s look at the example:\n```\nuse std::path::PathBuf;\nuse structopt::StructOpt;\n#[derive(Debug, StructOpt)]\n#[structopt(name = \"example\", about = \"An example of StructOpt usage.\")]\nstruct Opt {\n  /// Activate debug mode\n  // short and long flags (-d, --debug) will be deduced from the field's name\n  #[structopt(short, long)]\n  debug: bool,\n  /// Set speed\n  // we don't want to name it \"speed\", need to look smart\n  #[structopt(short = \"v\", long = \"velocity\", default_value = \"42\")]\n  speed: f64,\n  /// Input file\n  #[structopt(parse(from_os_str))]\n  input: PathBuf,\n  /// Output file, stdout if not present\n  #[structopt(parse(from_os_str))]\n  output: Option<PathBuf>,\n  /// Where to write the output: to `stdout` or `file`\n  #[structopt(short)]\n  out_type: String,\n  /// File name: only required when `out-type` is set to `file`\n  #[structopt(name = \"FILE\", required_if(\"out-type\", \"file\"))]\n  file_name: Option<String>,\n}\nfn main() {\n  let opt = Opt::from_args();\n  println!(\"{:?}\", opt);\n}\n```\n\nSo `derive(StructOpt)` tells Rust to generate a command line parser, and the various `structopt` attributes are simply used for additional parameters.\nFirst, define a struct, whatever its name. This structure corresponds to a `clap::App`, its fields correspond to `clap::Arg` (unless they\u2019re [subcommands](https://docs.rs/structopt/latest/structopt/#subcommands)), and you can adjust these apps and args by `#[structopt(...)]` [attributes](https://docs.rs/structopt/latest/structopt/#attributes).\n**Note:**\nKeep in mind that `StructOpt` trait is more than just `from_args` method. It has a number of additional features, including access to underlying `clap::App` via `StructOpt::clap()`. See the [trait\u2019s reference documentation](https://docs.rs/structopt/latest/structopt/trait.StructOpt.html).\n### [\u00a7](https://docs.rs/structopt/latest/structopt/#attributes)Attributes\nYou can control the way `structopt` translates your struct into an actual [`clap::App`](https://docs.rs/clap/2.33.3/x86_64-unknown-linux-gnu/clap/app/struct.App.html \"struct clap::app::App\") invocation via `#[structopt(...)]` attributes.\nThe attributes fall into two categories:\n  * `structopt`\u2019s own [magical methods](https://docs.rs/structopt/latest/structopt/#magical-methods).\nThey are used by `structopt` itself. They come mostly in `attr = [\"whatever\"]` form, but some `attr(args...)` also exist.\n  * [`raw` attributes](https://docs.rs/structopt/latest/structopt/#raw-methods).\nThey represent explicit `clap::Arg/App` method calls. They are what used to be explicit `#[structopt(raw(...))]` attrs in pre-0.3 `structopt`\n\n\nEvery `structopt attribute` looks like comma-separated sequence of methods:\n```\n#[structopt(\n  short, // method with no arguments - always magical\n  long = \"--long-option\", // method with one argument\n  required_if(\"out\", \"file\"), // method with one and more args\n  parse(from_os_str = path::to::parser) // some magical methods have their own syntax\n)]\n```\n\n`#[structopt(...)]` attributes can be placed on top of `struct`, `enum`, `struct` field or `enum` variant. Attributes on top of `struct` or `enum` represent `clap::App` method calls, field or variant attributes correspond to `clap::Arg` method calls.\nIn other words, the `Opt` struct from the example above will be turned into this (_details omitted_):\n```\nApp::new(\"example\")\n  .version(\"0.2.0\")\n  .about(\"An example of StructOpt usage.\")\n.arg(Arg::with_name(\"debug\")\n  .help(\"Activate debug mode\")\n  .short(\"debug\")\n  .long(\"debug\"))\n.arg(Arg::with_name(\"speed\")\n  .help(\"Set speed\")\n  .short(\"v\")\n  .long(\"velocity\")\n  .default_value(\"42\"))\n// and so on\n```\n\n### [\u00a7](https://docs.rs/structopt/latest/structopt/#raw-methods)Raw methods\nThey are the reason why `structopt` is so flexible. **Every and each method from`clap::App/Arg` can be used this way!** See the [`clap::App` methods](https://docs.rs/clap/2/clap/struct.App.html) and [`clap::Arg` methods](https://docs.rs/clap/2/clap/struct.Arg.html).\n```\n#[structopt(\n  global = true, // name = arg form, neat for one-arg methods\n  required_if(\"out\", \"file\") // name(arg1, arg2, ...) form.\n)]\n```\n\nThe first form can only be used for methods which take only one argument. The second form must be used with multi-arg methods, but can also be used with single-arg methods. These forms are identical otherwise.\nAs long as `method_name` is not one of the magical methods - it will be translated into a mere method call.\n**Note:**\n\u201cRaw methods\u201d are direct replacement for pre-0.3 structopt\u2019s `#[structopt(raw(...))]` attributes, any time you would have used a `raw()` attribute in 0.2 you should use raw method in 0.3.\nUnfortunately, old raw attributes collide with `clap::Arg::raw` method. To explicitly warn users of this change we allow `#[structopt(raw())]` only with `true` or `false` literals (this method is supposed to be called only with `true` anyway).\n### [\u00a7](https://docs.rs/structopt/latest/structopt/#magical-methods)Magical methods\nThey are the reason why `structopt` is so easy to use and convenient in most cases. Many of them have defaults, some of them get used even if not mentioned.\nMethods may be used on \u201ctop level\u201d (on top of a `struct`, `enum` or `enum` variant) and/or on \u201cfield-level\u201d (on top of a `struct` field or _inside_ of an enum variant). Top level (non-magical) methods correspond to `App::method` calls, field-level methods are `Arg::method` calls.\n[\u24d8](https://docs.rs/structopt/latest/structopt/ \"This example is not tested\")```\n#[structopt(top_level)]\nstruct Foo {\n  #[structopt(field_level)]\n  field: u32\n}\n#[structopt(top_level)]\nenum Bar {\n  #[structopt(top_level)]\n  Pineapple {\n    #[structopt(field_level)]\n    chocolate: String\n  },\n  #[structopt(top_level)]\n  Orange,\n}\n```\n\n  * `name`: `[name = expr]`\n    * On top level: `App::new(expr)`.\nThe binary name displayed in help messages. Defaults to the crate name given by Cargo.\n    * On field-level: `Arg::with_name(expr)`.\nThe name for the argument the field stands for, this name appears in help messages. Defaults to a name, deduced from a field, see also [`rename_all`](https://docs.rs/structopt/latest/structopt/#specifying-argument-types).\n  * `version`: `[version = \"version\"]`\nUsable only on top level: `App::version(\"version\" or env!(CARGO_PKG_VERSION))`.\nThe version displayed in help messages. Defaults to the crate version given by Cargo. If `CARGO_PKG_VERSION` is not set no `.version()` calls will be generated unless requested.\n  * `no_version`: `no_version`\nUsable only on top level. Prevents default `App::version` call, i.e when no `version = \"version\"` mentioned.\n  * `author`: `author [= \"author\"]`\nUsable only on top level: `App::author(\"author\" or env!(CARGO_PKG_AUTHORS))`.\nAuthor/maintainer of the binary, this name appears in help messages. Defaults to the crate author given by cargo, but only when `author` explicitly mentioned.\n  * `about`: `about [= \"about\"]`\nUsable only on top level: `App::about(\"about\" or env!(CARGO_PKG_DESCRIPTION))`.\nShort description of the binary, appears in help messages. Defaults to the crate description given by cargo, but only when `about` explicitly mentioned.\n  * [`short`](https://docs.rs/structopt/latest/structopt/#specifying-argument-types): `short [= \"short-opt-name\"]`\nUsable only on field-level.\n  * [`long`](https://docs.rs/structopt/latest/structopt/#specifying-argument-types): `long [= \"long-opt-name\"]`\nUsable only on field-level.\n  * [`default_value`](https://docs.rs/structopt/latest/structopt/#default-values): `default_value [= \"default value\"]`\nUsable only on field-level.\n  * [`rename_all`](https://docs.rs/structopt/latest/structopt/#specifying-argument-types): [`rename_all = \"kebab\"/\"snake\"/\"screaming-snake\"/\"camel\"/\"pascal\"/\"verbatim\"/\"lower\"/\"upper\"]`\nUsable both on top level and field level.\n  * [`parse`](https://docs.rs/structopt/latest/structopt/#custom-string-parsers): `parse(type [= path::to::parser::fn])`\nUsable only on field-level.\n  * [`skip`](https://docs.rs/structopt/latest/structopt/#skipping-fields): `skip [= expr]`\nUsable only on field-level.\n  * [`flatten`](https://docs.rs/structopt/latest/structopt/#flattening): `flatten`\nUsable on field-level or single-typed tuple variants.\n  * [`subcommand`](https://docs.rs/structopt/latest/structopt/#subcommands): `subcommand`\nUsable only on field-level.\n  * [`external_subcommand`](https://docs.rs/structopt/latest/structopt/#external-subcommands)\nUsable only on enum variants.\n  * [`env`](https://docs.rs/structopt/latest/structopt/#environment-variable-fallback): `env [= str_literal]`\nUsable only on field-level.\n  * [`rename_all_env`](https://docs.rs/structopt/latest/structopt/#auto-deriving-environment-variables): [`rename_all_env = \"kebab\"/\"snake\"/\"screaming-snake\"/\"camel\"/\"pascal\"/\"verbatim\"/\"lower\"/\"upper\"]`\nUsable both on top level and field level.\n  * [`verbatim_doc_comment`](https://docs.rs/structopt/latest/structopt/#doc-comment-preprocessing-and-structoptverbatim_doc_comment): `verbatim_doc_comment`\nUsable both on top level and field level.\n\n\n### [\u00a7](https://docs.rs/structopt/latest/structopt/#type-magic)Type magic\nOne of major things that makes `structopt` so awesome is its type magic. Do you want optional positional argument? Use `Option<T>`! Or perhaps optional argument that optionally takes value (`[--opt=[val]]`)? Use `Option<Option<T>>`!\nHere is the table of types and `clap` methods they correspond to:\nType| Effect| Added method call to `clap::Arg`  \n---|---|---  \n`bool`| `true` if the flag is present| `.takes_value(false).multiple(false)`  \n`Option<T: FromStr>`| optional positional argument or option| `.takes_value(true).multiple(false)`  \n`Option<Option<T: FromStr>>`| optional option with optional value| `.takes_value(true).multiple(false).min_values(0).max_values(1)`  \n`Vec<T: FromStr>`| list of options or the other positional arguments| `.takes_value(true).multiple(true)`  \n`Option<Vec<T: FromStr>`| optional list of options| `.takes_values(true).multiple(true).min_values(0)`  \n`T: FromStr`| required option or positional argument| `.takes_value(true).multiple(false).required(!has_default)`  \nThe `FromStr` trait is used to convert the argument to the given type, and the `Arg::validator` method is set to a method using `to_string()` (`FromStr::Err` must implement `std::fmt::Display`). If you would like to use a custom string parser other than `FromStr`, see the [same titled section](https://docs.rs/structopt/latest/structopt/#custom-string-parsers) below.\n**Important:**\nPay attention that _only literal occurrence_ of this types is special, for example `Option<T>` is special while `::std::option::Option<T>` is not.\nIf you need to avoid special casing you can make a `type` alias and use it in place of the said type.\n**Note:**\n`bool` cannot be used as positional argument unless you provide an explicit parser. If you need a positional bool, for example to parse `true` or `false`, you must annotate the field with explicit [`#[structopt(parse(...))]`](https://docs.rs/structopt/latest/structopt/#custom-string-parsers).\nThus, the `speed` argument is generated as:\n```\nclap::Arg::with_name(\"speed\")\n  .takes_value(true)\n  .multiple(false)\n  .required(false)\n  .validator(parse_validator::<f64>)\n  .short(\"v\")\n  .long(\"velocity\")\n  .help(\"Set speed\")\n  .default_value(\"42\");\n```\n\n### [\u00a7](https://docs.rs/structopt/latest/structopt/#specifying-argument-types)Specifying argument types\nThere are three types of arguments that can be supplied to each (sub-)command:\n  * short (e.g. `-h`),\n  * long (e.g. `--help`)\n  * and positional.\n\n\nLike clap, structopt defaults to creating positional arguments.\nIf you want to generate a long argument you can specify either `long = $NAME`, or just `long` to get a long flag generated using the field name. The generated casing style can be modified using the `rename_all` attribute. See the `rename_all` example for more.\nFor short arguments, `short` will use the first letter of the field name by default, but just like the long option it\u2019s also possible to use a custom letter through `short = $LETTER`.\nIf an argument is renamed using `name = $NAME` any following call to `short` or `long` will use the new name.\n**Attention** : If these arguments are used without an explicit name the resulting flag is going to be renamed using `kebab-case` if the `rename_all` attribute was not specified previously. The same is true for subcommands with implicit naming through the related data structure.\n```\nuse structopt::StructOpt;\n#[derive(StructOpt)]\n#[structopt(rename_all = \"kebab-case\")]\nstruct Opt {\n  /// This option can be specified with something like `--foo-option\n  /// value` or `--foo-option=value`\n  #[structopt(long)]\n  foo_option: String,\n  /// This option can be specified with something like `-b value` (but\n  /// not `--bar-option value`).\n  #[structopt(short)]\n  bar_option: String,\n  /// This option can be specified either `--baz value` or `-z value`.\n  #[structopt(short = \"z\", long = \"baz\")]\n  baz_option: String,\n  /// This option can be specified either by `--custom value` or\n  /// `-c value`.\n  #[structopt(name = \"custom\", long, short)]\n  custom_option: String,\n  /// This option is positional, meaning it is the first unadorned string\n  /// you provide (multiple others could follow).\n  my_positional: String,\n  /// This option is skipped and will be filled with the default value\n  /// for its type (in this case 0).\n  #[structopt(skip)]\n  skipped: u32,\n}\n\n```\n\n### [\u00a7](https://docs.rs/structopt/latest/structopt/#default-values)Default values\nIn clap, default values for options can be specified via [`Arg::default_value`](https://docs.rs/clap/2.33.0/clap/struct.Arg.html#method.default_value).\nOf course, you can use as a raw method:\n```\n#[derive(StructOpt)]\nstruct Opt {\n  #[structopt(default_value = \"\", long)]\n  prefix: String,\n}\n```\n\nThis is quite mundane and error-prone to type the `\"...\"` default by yourself, especially when the Rust ecosystem uses the [`Default`](https://doc.rust-lang.org/std/default/trait.Default.html) trait for that. It would be wonderful to have `structopt` to take the `Default_default` and fill it for you. And yes, `structopt` can do that.\nUnfortunately, `default_value` takes `&str` but `Default::default` gives us some `Self` value. We need to map `Self` to `&str` somehow.\n`structopt` solves this problem via [`ToString`](https://doc.rust-lang.org/std/string/trait.ToString.html) trait.\nTo be able to use auto-default the type must implement _both_ `Default` and `ToString`:\n```\n#[derive(StructOpt)]\nstruct Opt {\n  // just leave the `= \"...\"` part and structopt will figure it for you\n  #[structopt(default_value, long)]\n  prefix: String, // `String` implements both `Default` and `ToString`\n}\n```\n\n### [\u00a7](https://docs.rs/structopt/latest/structopt/#help-messages)Help messages\nIn clap, help messages for the whole binary can be specified via [`App::about`](https://docs.rs/clap/2/clap/struct.App.html#method.about) and [`App::long_about`](https://docs.rs/clap/2/clap/struct.App.html#method.long_about) while help messages for individual arguments can be specified via [`Arg::help`](https://docs.rs/clap/2/clap/struct.Arg.html#method.help) and [`Arg::long_help`](https://docs.rs/clap/2/clap/struct.Arg.html#method.long_help)\u201c.\n`long_*` variants are used when user calls the program with `--help` and \u201cshort\u201d variants are used with `-h` flag. In `structopt`, you can use them via [raw methods](https://docs.rs/structopt/latest/structopt/#raw-methods), for example:\n```\n\n#[derive(StructOpt)]\n#[structopt(about = \"I am a program and I work, just pass `-h`\")]\nstruct Foo {\n  #[structopt(short, help = \"Pass `-h` and you'll see me!\")]\n  bar: String,\n}\n```\n\nFor convenience, doc comments can be used instead of raw methods (this example works exactly like the one above):\n```\n\n#[derive(StructOpt)]\n/// I am a program and I work, just pass `-h`\nstruct Foo {\n  /// Pass `-h` and you'll see me!\n  bar: String,\n}\n```\n\nDoc comments on [top-level](https://docs.rs/structopt/latest/structopt/#magical-methods) will be turned into `App::about/long_about` call (see below), doc comments on field-level are `Arg::help/long_help` calls.\n**Important:**\nRaw methods have priority over doc comments!\n**Top level doc comments always generate`App::about/long_about` calls!** If you really want to use the `App::help/long_help` methods (you likely don\u2019t), use a raw method to override the `App::about` call generated from the doc comment.\n#### [\u00a7](https://docs.rs/structopt/latest/structopt/#long_help-and---help)`long_help` and `--help`\nA message passed to [`App::long_about`](https://docs.rs/clap/2/clap/struct.App.html#method.long_about) or [`Arg::long_help`](https://docs.rs/clap/2/clap/struct.Arg.html#method.long_help) will be displayed whenever your program is called with `--help` instead of `-h`. Of course, you can use them via raw methods as described [above](https://docs.rs/structopt/latest/structopt/#help-messages).\nThe more convenient way is to use a so-called \u201clong\u201d doc comment:\n```\n#[derive(StructOpt)]\n/// Hi there, I'm Robo!\n///\n/// I like beeping, stumbling, eating your electricity,\n/// and making records of you singing in a shower.\n/// Pay up, or I'll upload it to youtube!\nstruct Robo {\n  /// Call my brother SkyNet.\n  ///\n  /// I am artificial superintelligence. I won't rest\n  /// until I'll have destroyed humanity. Enjoy your\n  /// pathetic existence, you mere mortals.\n  #[structopt(long)]\n  kill_all_humans: bool,\n}\n```\n\nA long doc comment consists of three parts:\n  * Short summary\n  * A blank line (whitespace only)\n  * Detailed description, all the rest\n\n\nIn other words, \u201clong\u201d doc comment consists of two or more paragraphs, with the first being a summary and the rest being the detailed description.\n**A long comment will result in two method calls** , `help(<summary>)` and `long_help(<whole comment>)`, so clap will display the summary with `-h` and the whole help message on `--help` (see below).\nSo, the example above will be turned into this (details omitted):\n```\nclap::App::new(\"<name>\")\n  .about(\"Hi there, I'm Robo!\")\n  .long_about(\"Hi there, I'm Robo!\\n\\n\\\n         I like beeping, stumbling, eating your electricity,\\\n         and making records of you singing in a shower.\\\n         Pay up or I'll upload it to youtube!\")\n// args...\n```\n\n#### [\u00a7](https://docs.rs/structopt/latest/structopt/#-h-vs---help-aka-help-vs-long_help)`-h` vs `--help` (A.K.A `help()` vs `long_help()`)\nThe `-h` flag is not the same as `--help`.\n-h corresponds to `Arg::help/App::about` and requests short \u201csummary\u201d messages while \u2013help corresponds to `Arg::long_help/App::long_about` and requests more detailed, descriptive messages.\nIt is entirely up to `clap` what happens if you used only one of [`Arg::help`](https://docs.rs/clap/2/clap/struct.Arg.html#method.help)/[`Arg::long_help`](https://docs.rs/clap/2/clap/struct.Arg.html#method.long_help), see `clap`\u2019s documentation for these methods.\nAs of clap v2.33, if only a short message ([`Arg::help`](https://docs.rs/clap/2/clap/struct.Arg.html#method.help)) or only a long ([`Arg::long_help`](https://docs.rs/clap/2/clap/struct.Arg.html#method.long_help)) message is provided, clap will use it for both -h and \u2013help. The same logic applies to `about/long_about`.\n#### [\u00a7](https://docs.rs/structopt/latest/structopt/#doc-comment-preprocessing-and-structoptverbatim_doc_comment)Doc comment preprocessing and `#[structopt(verbatim_doc_comment)]`\n`structopt` applies some preprocessing to doc comments to ease the most common uses:\n  * Strip leading and trailing whitespace from every line, if present.\n  * Strip leading and trailing blank lines, if present.\n  * Interpret each group of non-empty lines as a word-wrapped paragraph.\nWe replace newlines within paragraphs with spaces to allow the output to be re-wrapped to the terminal width.\n  * Strip any excess blank lines so that there is exactly one per paragraph break.\n  * If the first paragraph ends in exactly one period, remove the trailing period (i.e. strip trailing periods but not trailing ellipses).\n\n\nSometimes you don\u2019t want this preprocessing to apply, for example the comment contains some ASCII art or markdown tables, you would need to preserve LFs along with blank lines and the leading/trailing whitespace. You can ask `structopt` to preserve them via `#[structopt(verbatim_doc_comment)]` attribute.\n**This attribute must be applied to each field separately** , there\u2019s no global switch.\n**Important:**\nKeep in mind that `structopt` will _still_ remove one leading space from each line, even if this attribute is present, to allow for a space between `///` and the content.\nAlso, `structopt` will _still_ remove leading and trailing blank lines so these formats are equivalent:\n```\n/** This is a doc comment\nHello! */\n/**\nThis is a doc comment\nHello!\n*/\n/// This is a doc comment\n///\n/// Hello!\n```\n\n### [\u00a7](https://docs.rs/structopt/latest/structopt/#environment-variable-fallback)Environment variable fallback\nIt is possible to specify an environment variable fallback option for an arguments so that its value is taken from the specified environment variable if not given through the command-line:\n```\n\n#[derive(StructOpt)]\nstruct Foo {\n  #[structopt(short, long, env = \"PARAMETER_VALUE\")]\n  parameter_value: String,\n}\n```\n\nBy default, values from the environment are shown in the help output (i.e. when invoking `--help`):\n```\n$ cargo run -- --help\n...\nOPTIONS:\n -p, --parameter-value <parameter-value>   [env: PARAMETER_VALUE=env_value]\n```\n\nIn some cases this may be undesirable, for example when being used for passing credentials or secret tokens. In those cases you can use `hide_env_values` to avoid having structopt emit the actual secret values:\n```\n\n#[derive(StructOpt)]\nstruct Foo {\n  #[structopt(long = \"secret\", env = \"SECRET_VALUE\", hide_env_values = true)]\n  secret_value: String,\n}\n```\n\n#### [\u00a7](https://docs.rs/structopt/latest/structopt/#auto-deriving-environment-variables)Auto-deriving environment variables\nEnvironment variables tend to be called after the corresponding `struct`\u2019s field, as in example above. The field is `secret_value` and the env var is \u201cSECRET_VALUE\u201d; the name is the same, except casing is different.\nIt\u2019s pretty tedious and error-prone to type the same name twice, so you can ask `structopt` to do that for you.\n```\n\n#[derive(StructOpt)]\nstruct Foo {\n  #[structopt(long = \"secret\", env)]\n  secret_value: String,\n}\n```\n\nIt works just like `#[structopt(short/long)]`: if `env` is not set to some concrete value the value will be derived from the field\u2019s name. This is controlled by `#[structopt(rename_all_env)]`.\n`rename_all_env` works exactly as `rename_all` (including overriding) except default casing is `SCREAMING_SNAKE_CASE` instead of `kebab-case`.\n### [\u00a7](https://docs.rs/structopt/latest/structopt/#skipping-fields)Skipping fields\nSometimes you may want to add a field to your `Opt` struct that is not a command line option and `clap` should know nothing about it. You can ask `structopt` to skip the field entirely via `#[structopt(skip = value)]` (`value` must implement `Into<FieldType>`) or `#[structopt(skip)]` if you want assign the field with `Default::default()` (obviously, the field\u2019s type must implement `Default`).\n```\n#[derive(StructOpt)]\npub struct Opt {\n  #[structopt(long, short)]\n  number: u32,\n  // these fields are to be assigned with Default::default()\n  #[structopt(skip)]\n  k: String,\n  #[structopt(skip)]\n  v: Vec<u32>,\n  // these fields get set explicitly\n  #[structopt(skip = vec![1, 2, 3])]\n  k2: Vec<u32>,\n  #[structopt(skip = \"cake\")] // &str implements Into<String>\n  v2: String,\n}\n```\n\n### [\u00a7](https://docs.rs/structopt/latest/structopt/#subcommands)Subcommands\nSome applications, especially large ones, split their functionality through the use of \u201csubcommands\u201d. Each of these act somewhat like a separate command, but is part of the larger group. One example is `git`, which has subcommands such as `add`, `commit`, and `clone`, to mention just a few.\n`clap` has this functionality, and `structopt` supports it through enums:\n```\n\n#[derive(StructOpt)]\n#[structopt(about = \"the stupid content tracker\")]\nenum Git {\n  Add {\n    #[structopt(short)]\n    interactive: bool,\n    #[structopt(short)]\n    patch: bool,\n    #[structopt(parse(from_os_str))]\n    files: Vec<PathBuf>,\n  },\n  Fetch {\n    #[structopt(long)]\n    dry_run: bool,\n    #[structopt(long)]\n    all: bool,\n    repository: Option<String>,\n  },\n  Commit {\n    #[structopt(short)]\n    message: Option<String>,\n    #[structopt(short)]\n    all: bool,\n  },\n}\n```\n\nUsing `derive(StructOpt)` on an enum instead of a struct will produce a `clap::App` that only takes subcommands. So `git add`, `git fetch`, and `git commit` would be commands allowed for the above example.\n`structopt` also provides support for applications where certain flags need to apply to all subcommands, as well as nested subcommands:\n```\n#[derive(StructOpt)]\nstruct MakeCookie {\n  #[structopt(name = \"supervisor\", default_value = \"Puck\", long = \"supervisor\")]\n  supervising_faerie: String,\n  /// The faerie tree this cookie is being made in.\n  tree: Option<String>,\n  #[structopt(subcommand)] // Note that we mark a field as a subcommand\n  cmd: Command,\n}\n#[derive(StructOpt)]\nenum Command {\n  /// Pound acorns into flour for cookie dough.\n  Pound {\n    acorns: u32,\n  },\n  /// Add magical sparkles -- the secret ingredient!\n  Sparkle {\n    #[structopt(short, parse(from_occurrences))]\n    magicality: u64,\n    #[structopt(short)]\n    color: String,\n  },\n  Finish(Finish),\n}\n// Subcommand can also be externalized by using a 1-uple enum variant\n#[derive(StructOpt)]\nstruct Finish {\n  #[structopt(short)]\n  time: u32,\n  #[structopt(subcommand)] // Note that we mark a field as a subcommand\n  finish_type: FinishType,\n}\n// subsubcommand!\n#[derive(StructOpt)]\nenum FinishType {\n  Glaze {\n    applications: u32,\n  },\n  Powder {\n    flavor: String,\n    dips: u32,\n  }\n}\n```\n\nMarking a field with `structopt(subcommand)` will add the subcommands of the designated enum to the current `clap::App`. The designated enum _must_ also be derived `StructOpt`. So the above example would take the following commands:\n  * `make-cookie pound 50`\n  * `make-cookie sparkle -mmm --color \"green\"`\n  * `make-cookie finish 130 glaze 3`\n\n\n#### [\u00a7](https://docs.rs/structopt/latest/structopt/#optional-subcommands)Optional subcommands\nSubcommands may be optional:\n```\n#[derive(StructOpt)]\nstruct Foo {\n  file: String,\n  #[structopt(subcommand)]\n  cmd: Option<Command>,\n}\n#[derive(StructOpt)]\nenum Command {\n  Bar,\n  Baz,\n  Quux,\n}\n```\n\n#### [\u00a7](https://docs.rs/structopt/latest/structopt/#external-subcommands)External subcommands\nSometimes you want to support not only the set of well-known subcommands but you also want to allow other, user-driven subcommands. `clap` supports this via [`AppSettings::AllowExternalSubcommands`](https://docs.rs/clap/2.32.0/clap/enum.AppSettings.html#variant.AllowExternalSubcommands).\n`structopt` provides it\u2019s own dedicated syntax for that:\n```\n#[derive(Debug, PartialEq, StructOpt)]\nstruct Opt {\n  #[structopt(subcommand)]\n  sub: Subcommands,\n}\n#[derive(Debug, PartialEq, StructOpt)]\nenum Subcommands {\n  // normal subcommand\n  Add,\n  // `external_subcommand` tells structopt to put\n  // all the extra arguments into this Vec\n  #[structopt(external_subcommand)]\n  Other(Vec<String>),\n}\n// normal subcommand\nassert_eq!(\n  Opt::from_iter(&[\"test\", \"add\"]),\n  Opt {\n    sub: Subcommands::Add\n  }\n);\nassert_eq!(\n  Opt::from_iter(&[\"test\", \"git\", \"status\"]),\n  Opt {\n    sub: Subcommands::Other(vec![\"git\".into(), \"status\".into()])\n  }\n);\n// Please note that if you'd wanted to allow \"no subcommands at all\" case\n// you should have used `sub: Option<Subcommands>` above\nassert!(Opt::from_iter_safe(&[\"test\"]).is_err());\n```\n\nIn other words, you just add an extra tuple variant marked with `#[structopt(subcommand)]`, and its type must be either `Vec<String>` or `Vec<OsString>`. `structopt` will detect `String` in this context and use appropriate `clap` API.\n#### [\u00a7](https://docs.rs/structopt/latest/structopt/#flattening-subcommands)Flattening subcommands\nIt is also possible to combine multiple enums of subcommands into one. All the subcommands will be on the same level.\n```\n#[derive(StructOpt)]\nenum BaseCli {\n  Ghost10 {\n    arg1: i32,\n  }\n}\n#[derive(StructOpt)]\nenum Opt {\n  #[structopt(flatten)]\n  BaseCli(BaseCli),\n  Dex {\n    arg2: i32,\n  },\n}\n```\n\n```\ncli ghost10 42\ncli dex 42\n```\n\n### [\u00a7](https://docs.rs/structopt/latest/structopt/#flattening)Flattening\nIt can sometimes be useful to group related arguments in a substruct, while keeping the command-line interface flat. In these cases you can mark a field as `flatten` and give it another type that derives `StructOpt`:\n```\n#[derive(StructOpt)]\nstruct Cmdline {\n  /// switch on verbosity\n  #[structopt(short)]\n  verbose: bool,\n  #[structopt(flatten)]\n  daemon_opts: DaemonOpts,\n}\n#[derive(StructOpt)]\nstruct DaemonOpts {\n  /// daemon user\n  #[structopt(short)]\n  user: String,\n  /// daemon group\n  #[structopt(short)]\n  group: String,\n}\n```\n\nIn this example, the derived `Cmdline` parser will support the options `-v`, `-u` and `-g`.\nThis feature also makes it possible to define a `StructOpt` struct in a library, parse the corresponding arguments in the main argument parser, and pass off this struct to a handler provided by that library.\n### [\u00a7](https://docs.rs/structopt/latest/structopt/#custom-string-parsers)Custom string parsers\nIf the field type does not have a `FromStr` implementation, or you would like to provide a custom parsing scheme other than `FromStr`, you may provide a custom string parser using `parse(...)` like this:\n```\nuse std::num::ParseIntError;\nuse std::path::PathBuf;\nfn parse_hex(src: &str) -> Result<u32, ParseIntError> {\n  u32::from_str_radix(src, 16)\n}\n#[derive(StructOpt)]\nstruct HexReader {\n  #[structopt(short, parse(try_from_str = parse_hex))]\n  number: u32,\n  #[structopt(short, parse(from_os_str))]\n  output: PathBuf,\n}\n```\n\nThere are five kinds of custom parsers:\nKind| Signature| Default  \n---|---|---  \n`from_str`| `fn(&str) -> T`| `::std::convert::From::from`  \n`try_from_str`| `fn(&str) -> Result<T, E>`| `::std::str::FromStr::from_str`  \n`from_os_str`| `fn(&OsStr) -> T`| `::std::convert::From::from`  \n`try_from_os_str`| `fn(&OsStr) -> Result<T, OsString>`| (no default function)  \n`from_occurrences`| `fn(u64) -> T`| `value as T`  \n`from_flag`| `fn(bool) -> T`| `::std::convert::From::from`  \nThe `from_occurrences` parser is special. Using `parse(from_occurrences)` results in the _number of flags occurrences_ being stored in the relevant field or being passed to the supplied function. In other words, it converts something like `-vvv` to `3`. This is equivalent to `.takes_value(false).multiple(true)`. Note that the default parser can only be used with fields of integer types (`u8`, `usize`, `i64`, etc.).\nThe `from_flag` parser is also special. Using `parse(from_flag)` or `parse(from_flag = some_func)` will result in the field being treated as a flag even if it does not have type `bool`.\nWhen supplying a custom string parser, `bool` will not be treated specially:\nType| Effect| Added method call to `clap::Arg`  \n---|---|---  \n`Option<T>`| optional argument| `.takes_value(true).multiple(false)`  \n`Vec<T>`| list of arguments| `.takes_value(true).multiple(true)`  \n`T`| required argument| `.takes_value(true).multiple(false).required(!has_default)`  \nIn the `try_from_*` variants, the function will run twice on valid input: once to validate, and once to parse. Hence, make sure the function is side-effect-free.\n### [\u00a7](https://docs.rs/structopt/latest/structopt/#generics)Generics\nGeneric structs and enums can be used. They require explicit trait bounds on any generic types that will be used by the `StructOpt` derive macro. In some cases, associated types will require additional bounds. See the usage of `FromStr` below for an example of this.\n```\nuse std::{fmt, str::FromStr};\n// a struct with single custom argument\n#[derive(StructOpt)]\nstruct GenericArgs<T: FromStr> where <T as FromStr>::Err: fmt::Display + fmt::Debug {\n  generic_arg_1: String,\n  generic_arg_2: String,\n  custom_arg_1: T,\n}\n```\n\nor\n```\n// a struct with multiple custom arguments in a substructure\n#[derive(StructOpt)]\nstruct GenericArgs<T: StructOpt> {\n  generic_arg_1: String,\n  generic_arg_2: String,\n  #[structopt(flatten)]\n  custom_args: T,\n}\n```\n\n## Re-exports[\u00a7](https://docs.rs/structopt/latest/structopt/#reexports)\n\n`pub use clap[](https://docs.rs/clap/2.33.3/x86_64-unknown-linux-gnu/clap/index.html \"mod clap\");`\n\n## Traits[\u00a7](https://docs.rs/structopt/latest/structopt/#traits)\n\n[StructOpt](https://docs.rs/structopt/latest/structopt/trait.StructOpt.html \"trait structopt::StructOpt\")\n    A struct that is converted from command line arguments.\n",
            "markdown_with_citations": "[](https://docs.rs/structopt/latest/structopt/all.html \"show sidebar\")\n# Crate structoptCopy item path\nSettings\u27e81\u27e9\nHelp\u27e82\u27e9\nSummarySource\u27e83\u27e9\nExpand description\nThis crate defines the `StructOpt` trait and its custom derive.\n### \u00a7\u27e84\u27e9Maintenance\nAs clap v3 is now out, and the structopt features are integrated into (almost as-is), structopt is now in maintenance mode: no new feature will be added.\nBugs will be fixed, and documentation improvements will be accepted.\n### \u00a7\u27e85\u27e9Features\nIf you want to disable all the `clap` features (colors, suggestions, ..) add `default-features = false` to the `structopt` dependency:\n```\n[dependencies]\nstructopt = { version = \"0.3\", default-features = false }\n```\n\nSupport for `paw`\u27e86\u27e9 (the `Command line argument paw-rser abstraction for main`) is disabled by default, but can be enabled in the `structopt` dependency with the feature `paw`:\n```\n[dependencies]\nstructopt = { version = \"0.3\", features = [ \"paw\" ] }\npaw = \"1.0\"\n```\n\n## \u00a7\u27e87\u27e9Table of Contents\n  * How to `derive(StructOpt)`\u27e88\u27e9\n  * Attributes\u27e89\u27e9\n    * Raw methods\u27e810\u27e9\n    * Magical methods\u27e811\u27e9\n  * Arguments \n    * Type magic\u27e812\u27e9\n    * Specifying argument types\u27e813\u27e9\n    * Default values\u27e814\u27e9\n    * Help messages\u27e815\u27e9\n    * Environment variable fallback\u27e816\u27e9\n  * Skipping fields\u27e817\u27e9\n  * Subcommands\u27e818\u27e9\n    * Optional subcommands\u27e819\u27e9\n    * External subcommands\u27e820\u27e9\n    * Flattening subcommands\u27e821\u27e9\n  * Flattening\u27e822\u27e9\n  * Custom string parsers\u27e823\u27e9\n  * Generics\u27e824\u27e9\n\n\n### \u00a7\u27e88\u27e9How to `derive(StructOpt)`\nFirst, let\u2019s look at the example:\n```\nuse std::path::PathBuf;\nuse structopt::StructOpt;\n#[derive(Debug, StructOpt)]\n#[structopt(name = \"example\", about = \"An example of StructOpt usage.\")]\nstruct Opt {\n  /// Activate debug mode\n  // short and long flags (-d, --debug) will be deduced from the field's name\n  #[structopt(short, long)]\n  debug: bool,\n  /// Set speed\n  // we don't want to name it \"speed\", need to look smart\n  #[structopt(short = \"v\", long = \"velocity\", default_value = \"42\")]\n  speed: f64,\n  /// Input file\n  #[structopt(parse(from_os_str))]\n  input: PathBuf,\n  /// Output file, stdout if not present\n  #[structopt(parse(from_os_str))]\n  output: Option<PathBuf>,\n  /// Where to write the output: to `stdout` or `file`\n  #[structopt(short)]\n  out_type: String,\n  /// File name: only required when `out-type` is set to `file`\n  #[structopt(name = \"FILE\", required_if(\"out-type\", \"file\"))]\n  file_name: Option<String>,\n}\nfn main() {\n  let opt = Opt::from_args();\n  println!(\"{:?}\", opt);\n}\n```\n\nSo `derive(StructOpt)` tells Rust to generate a command line parser, and the various `structopt` attributes are simply used for additional parameters.\nFirst, define a struct, whatever its name. This structure corresponds to a `clap::App`, its fields correspond to `clap::Arg` (unless they\u2019re subcommands\u27e818\u27e9), and you can adjust these apps and args by `#[structopt(...)]` attributes\u27e89\u27e9.\n**Note:**\nKeep in mind that `StructOpt` trait is more than just `from_args` method. It has a number of additional features, including access to underlying `clap::App` via `StructOpt::clap()`. See the trait\u2019s reference documentation\u27e825\u27e9.\n### \u00a7\u27e89\u27e9Attributes\nYou can control the way `structopt` translates your struct into an actual `clap::App`\u27e826\u27e9 invocation via `#[structopt(...)]` attributes.\nThe attributes fall into two categories:\n  * `structopt`\u2019s own magical methods\u27e811\u27e9.\nThey are used by `structopt` itself. They come mostly in `attr = [\"whatever\"]` form, but some `attr(args...)` also exist.\n  * `raw` attributes\u27e810\u27e9.\nThey represent explicit `clap::Arg/App` method calls. They are what used to be explicit `#[structopt(raw(...))]` attrs in pre-0.3 `structopt`\n\n\nEvery `structopt attribute` looks like comma-separated sequence of methods:\n```\n#[structopt(\n  short, // method with no arguments - always magical\n  long = \"--long-option\", // method with one argument\n  required_if(\"out\", \"file\"), // method with one and more args\n  parse(from_os_str = path::to::parser) // some magical methods have their own syntax\n)]\n```\n\n`#[structopt(...)]` attributes can be placed on top of `struct`, `enum`, `struct` field or `enum` variant. Attributes on top of `struct` or `enum` represent `clap::App` method calls, field or variant attributes correspond to `clap::Arg` method calls.\nIn other words, the `Opt` struct from the example above will be turned into this (_details omitted_):\n```\nApp::new(\"example\")\n  .version(\"0.2.0\")\n  .about(\"An example of StructOpt usage.\")\n.arg(Arg::with_name(\"debug\")\n  .help(\"Activate debug mode\")\n  .short(\"debug\")\n  .long(\"debug\"))\n.arg(Arg::with_name(\"speed\")\n  .help(\"Set speed\")\n  .short(\"v\")\n  .long(\"velocity\")\n  .default_value(\"42\"))\n// and so on\n```\n\n### \u00a7\u27e810\u27e9Raw methods\nThey are the reason why `structopt` is so flexible. **Every and each method from`clap::App/Arg` can be used this way!** See the `clap::App` methods\u27e827\u27e9 and `clap::Arg` methods\u27e828\u27e9.\n```\n#[structopt(\n  global = true, // name = arg form, neat for one-arg methods\n  required_if(\"out\", \"file\") // name(arg1, arg2, ...) form.\n)]\n```\n\nThe first form can only be used for methods which take only one argument. The second form must be used with multi-arg methods, but can also be used with single-arg methods. These forms are identical otherwise.\nAs long as `method_name` is not one of the magical methods - it will be translated into a mere method call.\n**Note:**\n\u201cRaw methods\u201d are direct replacement for pre-0.3 structopt\u2019s `#[structopt(raw(...))]` attributes, any time you would have used a `raw()` attribute in 0.2 you should use raw method in 0.3.\nUnfortunately, old raw attributes collide with `clap::Arg::raw` method. To explicitly warn users of this change we allow `#[structopt(raw())]` only with `true` or `false` literals (this method is supposed to be called only with `true` anyway).\n### \u00a7\u27e811\u27e9Magical methods\nThey are the reason why `structopt` is so easy to use and convenient in most cases. Many of them have defaults, some of them get used even if not mentioned.\nMethods may be used on \u201ctop level\u201d (on top of a `struct`, `enum` or `enum` variant) and/or on \u201cfield-level\u201d (on top of a `struct` field or _inside_ of an enum variant). Top level (non-magical) methods correspond to `App::method` calls, field-level methods are `Arg::method` calls.\n\u24d8\u27e829\u27e9```\n#[structopt(top_level)]\nstruct Foo {\n  #[structopt(field_level)]\n  field: u32\n}\n#[structopt(top_level)]\nenum Bar {\n  #[structopt(top_level)]\n  Pineapple {\n    #[structopt(field_level)]\n    chocolate: String\n  },\n  #[structopt(top_level)]\n  Orange,\n}\n```\n\n  * `name`: `[name = expr]`\n    * On top level: `App::new(expr)`.\nThe binary name displayed in help messages. Defaults to the crate name given by Cargo.\n    * On field-level: `Arg::with_name(expr)`.\nThe name for the argument the field stands for, this name appears in help messages. Defaults to a name, deduced from a field, see also `rename_all`\u27e813\u27e9.\n  * `version`: `[version = \"version\"]`\nUsable only on top level: `App::version(\"version\" or env!(CARGO_PKG_VERSION))`.\nThe version displayed in help messages. Defaults to the crate version given by Cargo. If `CARGO_PKG_VERSION` is not set no `.version()` calls will be generated unless requested.\n  * `no_version`: `no_version`\nUsable only on top level. Prevents default `App::version` call, i.e when no `version = \"version\"` mentioned.\n  * `author`: `author [= \"author\"]`\nUsable only on top level: `App::author(\"author\" or env!(CARGO_PKG_AUTHORS))`.\nAuthor/maintainer of the binary, this name appears in help messages. Defaults to the crate author given by cargo, but only when `author` explicitly mentioned.\n  * `about`: `about [= \"about\"]`\nUsable only on top level: `App::about(\"about\" or env!(CARGO_PKG_DESCRIPTION))`.\nShort description of the binary, appears in help messages. Defaults to the crate description given by cargo, but only when `about` explicitly mentioned.\n  * `short`\u27e813\u27e9: `short [= \"short-opt-name\"]`\nUsable only on field-level.\n  * `long`\u27e813\u27e9: `long [= \"long-opt-name\"]`\nUsable only on field-level.\n  * `default_value`\u27e814\u27e9: `default_value [= \"default value\"]`\nUsable only on field-level.\n  * `rename_all`\u27e813\u27e9: [`rename_all = \"kebab\"/\"snake\"/\"screaming-snake\"/\"camel\"/\"pascal\"/\"verbatim\"/\"lower\"/\"upper\"]`\nUsable both on top level and field level.\n  * `parse`\u27e823\u27e9: `parse(type [= path::to::parser::fn])`\nUsable only on field-level.\n  * `skip`\u27e817\u27e9: `skip [= expr]`\nUsable only on field-level.\n  * `flatten`\u27e822\u27e9: `flatten`\nUsable on field-level or single-typed tuple variants.\n  * `subcommand`\u27e818\u27e9: `subcommand`\nUsable only on field-level.\n  * `external_subcommand`\u27e820\u27e9\nUsable only on enum variants.\n  * `env`\u27e816\u27e9: `env [= str_literal]`\nUsable only on field-level.\n  * `rename_all_env`\u27e830\u27e9: [`rename_all_env = \"kebab\"/\"snake\"/\"screaming-snake\"/\"camel\"/\"pascal\"/\"verbatim\"/\"lower\"/\"upper\"]`\nUsable both on top level and field level.\n  * `verbatim_doc_comment`\u27e831\u27e9: `verbatim_doc_comment`\nUsable both on top level and field level.\n\n\n### \u00a7\u27e812\u27e9Type magic\nOne of major things that makes `structopt` so awesome is its type magic. Do you want optional positional argument? Use `Option<T>`! Or perhaps optional argument that optionally takes value (`[--opt=[val]]`)? Use `Option<Option<T>>`!\nHere is the table of types and `clap` methods they correspond to:\nType| Effect| Added method call to `clap::Arg`  \n---|---|---  \n`bool`| `true` if the flag is present| `.takes_value(false).multiple(false)`  \n`Option<T: FromStr>`| optional positional argument or option| `.takes_value(true).multiple(false)`  \n`Option<Option<T: FromStr>>`| optional option with optional value| `.takes_value(true).multiple(false).min_values(0).max_values(1)`  \n`Vec<T: FromStr>`| list of options or the other positional arguments| `.takes_value(true).multiple(true)`  \n`Option<Vec<T: FromStr>`| optional list of options| `.takes_values(true).multiple(true).min_values(0)`  \n`T: FromStr`| required option or positional argument| `.takes_value(true).multiple(false).required(!has_default)`  \nThe `FromStr` trait is used to convert the argument to the given type, and the `Arg::validator` method is set to a method using `to_string()` (`FromStr::Err` must implement `std::fmt::Display`). If you would like to use a custom string parser other than `FromStr`, see the same titled section\u27e823\u27e9 below.\n**Important:**\nPay attention that _only literal occurrence_ of this types is special, for example `Option<T>` is special while `::std::option::Option<T>` is not.\nIf you need to avoid special casing you can make a `type` alias and use it in place of the said type.\n**Note:**\n`bool` cannot be used as positional argument unless you provide an explicit parser. If you need a positional bool, for example to parse `true` or `false`, you must annotate the field with explicit [`#[structopt(parse(...))]`](https://docs.rs/structopt/latest/structopt/#custom-string-parsers).\nThus, the `speed` argument is generated as:\n```\nclap::Arg::with_name(\"speed\")\n  .takes_value(true)\n  .multiple(false)\n  .required(false)\n  .validator(parse_validator::<f64>)\n  .short(\"v\")\n  .long(\"velocity\")\n  .help(\"Set speed\")\n  .default_value(\"42\");\n```\n\n### \u00a7\u27e813\u27e9Specifying argument types\nThere are three types of arguments that can be supplied to each (sub-)command:\n  * short (e.g. `-h`),\n  * long (e.g. `--help`)\n  * and positional.\n\n\nLike clap, structopt defaults to creating positional arguments.\nIf you want to generate a long argument you can specify either `long = $NAME`, or just `long` to get a long flag generated using the field name. The generated casing style can be modified using the `rename_all` attribute. See the `rename_all` example for more.\nFor short arguments, `short` will use the first letter of the field name by default, but just like the long option it\u2019s also possible to use a custom letter through `short = $LETTER`.\nIf an argument is renamed using `name = $NAME` any following call to `short` or `long` will use the new name.\n**Attention** : If these arguments are used without an explicit name the resulting flag is going to be renamed using `kebab-case` if the `rename_all` attribute was not specified previously. The same is true for subcommands with implicit naming through the related data structure.\n```\nuse structopt::StructOpt;\n#[derive(StructOpt)]\n#[structopt(rename_all = \"kebab-case\")]\nstruct Opt {\n  /// This option can be specified with something like `--foo-option\n  /// value` or `--foo-option=value`\n  #[structopt(long)]\n  foo_option: String,\n  /// This option can be specified with something like `-b value` (but\n  /// not `--bar-option value`).\n  #[structopt(short)]\n  bar_option: String,\n  /// This option can be specified either `--baz value` or `-z value`.\n  #[structopt(short = \"z\", long = \"baz\")]\n  baz_option: String,\n  /// This option can be specified either by `--custom value` or\n  /// `-c value`.\n  #[structopt(name = \"custom\", long, short)]\n  custom_option: String,\n  /// This option is positional, meaning it is the first unadorned string\n  /// you provide (multiple others could follow).\n  my_positional: String,\n  /// This option is skipped and will be filled with the default value\n  /// for its type (in this case 0).\n  #[structopt(skip)]\n  skipped: u32,\n}\n\n```\n\n### \u00a7\u27e814\u27e9Default values\nIn clap, default values for options can be specified via `Arg::default_value`\u27e832\u27e9.\nOf course, you can use as a raw method:\n```\n#[derive(StructOpt)]\nstruct Opt {\n  #[structopt(default_value = \"\", long)]\n  prefix: String,\n}\n```\n\nThis is quite mundane and error-prone to type the `\"...\"` default by yourself, especially when the Rust ecosystem uses the `Default`\u27e833\u27e9 trait for that. It would be wonderful to have `structopt` to take the `Default_default` and fill it for you. And yes, `structopt` can do that.\nUnfortunately, `default_value` takes `&str` but `Default::default` gives us some `Self` value. We need to map `Self` to `&str` somehow.\n`structopt` solves this problem via `ToString`\u27e834\u27e9 trait.\nTo be able to use auto-default the type must implement _both_ `Default` and `ToString`:\n```\n#[derive(StructOpt)]\nstruct Opt {\n  // just leave the `= \"...\"` part and structopt will figure it for you\n  #[structopt(default_value, long)]\n  prefix: String, // `String` implements both `Default` and `ToString`\n}\n```\n\n### \u00a7\u27e815\u27e9Help messages\nIn clap, help messages for the whole binary can be specified via `App::about`\u27e835\u27e9 and `App::long_about`\u27e836\u27e9 while help messages for individual arguments can be specified via `Arg::help`\u27e837\u27e9 and `Arg::long_help`\u27e838\u27e9\u201c.\n`long_*` variants are used when user calls the program with `--help` and \u201cshort\u201d variants are used with `-h` flag. In `structopt`, you can use them via raw methods\u27e810\u27e9, for example:\n```\n\n#[derive(StructOpt)]\n#[structopt(about = \"I am a program and I work, just pass `-h`\")]\nstruct Foo {\n  #[structopt(short, help = \"Pass `-h` and you'll see me!\")]\n  bar: String,\n}\n```\n\nFor convenience, doc comments can be used instead of raw methods (this example works exactly like the one above):\n```\n\n#[derive(StructOpt)]\n/// I am a program and I work, just pass `-h`\nstruct Foo {\n  /// Pass `-h` and you'll see me!\n  bar: String,\n}\n```\n\nDoc comments on top-level\u27e811\u27e9 will be turned into `App::about/long_about` call (see below), doc comments on field-level are `Arg::help/long_help` calls.\n**Important:**\nRaw methods have priority over doc comments!\n**Top level doc comments always generate`App::about/long_about` calls!** If you really want to use the `App::help/long_help` methods (you likely don\u2019t), use a raw method to override the `App::about` call generated from the doc comment.\n#### \u00a7\u27e839\u27e9`long_help` and `--help`\nA message passed to `App::long_about`\u27e836\u27e9 or `Arg::long_help`\u27e838\u27e9 will be displayed whenever your program is called with `--help` instead of `-h`. Of course, you can use them via raw methods as described above\u27e815\u27e9.\nThe more convenient way is to use a so-called \u201clong\u201d doc comment:\n```\n#[derive(StructOpt)]\n/// Hi there, I'm Robo!\n///\n/// I like beeping, stumbling, eating your electricity,\n/// and making records of you singing in a shower.\n/// Pay up, or I'll upload it to youtube!\nstruct Robo {\n  /// Call my brother SkyNet.\n  ///\n  /// I am artificial superintelligence. I won't rest\n  /// until I'll have destroyed humanity. Enjoy your\n  /// pathetic existence, you mere mortals.\n  #[structopt(long)]\n  kill_all_humans: bool,\n}\n```\n\nA long doc comment consists of three parts:\n  * Short summary\n  * A blank line (whitespace only)\n  * Detailed description, all the rest\n\n\nIn other words, \u201clong\u201d doc comment consists of two or more paragraphs, with the first being a summary and the rest being the detailed description.\n**A long comment will result in two method calls** , `help(<summary>)` and `long_help(<whole comment>)`, so clap will display the summary with `-h` and the whole help message on `--help` (see below).\nSo, the example above will be turned into this (details omitted):\n```\nclap::App::new(\"<name>\")\n  .about(\"Hi there, I'm Robo!\")\n  .long_about(\"Hi there, I'm Robo!\\n\\n\\\n         I like beeping, stumbling, eating your electricity,\\\n         and making records of you singing in a shower.\\\n         Pay up or I'll upload it to youtube!\")\n// args...\n```\n\n#### \u00a7\u27e840\u27e9`-h` vs `--help` (A.K.A `help()` vs `long_help()`)\nThe `-h` flag is not the same as `--help`.\n-h corresponds to `Arg::help/App::about` and requests short \u201csummary\u201d messages while \u2013help corresponds to `Arg::long_help/App::long_about` and requests more detailed, descriptive messages.\nIt is entirely up to `clap` what happens if you used only one of `Arg::help`\u27e837\u27e9/`Arg::long_help`\u27e838\u27e9, see `clap`\u2019s documentation for these methods.\nAs of clap v2.33, if only a short message (`Arg::help`\u27e837\u27e9) or only a long (`Arg::long_help`\u27e838\u27e9) message is provided, clap will use it for both -h and \u2013help. The same logic applies to `about/long_about`.\n#### \u00a7\u27e831\u27e9Doc comment preprocessing and `#[structopt(verbatim_doc_comment)]`\n`structopt` applies some preprocessing to doc comments to ease the most common uses:\n  * Strip leading and trailing whitespace from every line, if present.\n  * Strip leading and trailing blank lines, if present.\n  * Interpret each group of non-empty lines as a word-wrapped paragraph.\nWe replace newlines within paragraphs with spaces to allow the output to be re-wrapped to the terminal width.\n  * Strip any excess blank lines so that there is exactly one per paragraph break.\n  * If the first paragraph ends in exactly one period, remove the trailing period (i.e. strip trailing periods but not trailing ellipses).\n\n\nSometimes you don\u2019t want this preprocessing to apply, for example the comment contains some ASCII art or markdown tables, you would need to preserve LFs along with blank lines and the leading/trailing whitespace. You can ask `structopt` to preserve them via `#[structopt(verbatim_doc_comment)]` attribute.\n**This attribute must be applied to each field separately** , there\u2019s no global switch.\n**Important:**\nKeep in mind that `structopt` will _still_ remove one leading space from each line, even if this attribute is present, to allow for a space between `///` and the content.\nAlso, `structopt` will _still_ remove leading and trailing blank lines so these formats are equivalent:\n```\n/** This is a doc comment\nHello! */\n/**\nThis is a doc comment\nHello!\n*/\n/// This is a doc comment\n///\n/// Hello!\n```\n\n### \u00a7\u27e816\u27e9Environment variable fallback\nIt is possible to specify an environment variable fallback option for an arguments so that its value is taken from the specified environment variable if not given through the command-line:\n```\n\n#[derive(StructOpt)]\nstruct Foo {\n  #[structopt(short, long, env = \"PARAMETER_VALUE\")]\n  parameter_value: String,\n}\n```\n\nBy default, values from the environment are shown in the help output (i.e. when invoking `--help`):\n```\n$ cargo run -- --help\n...\nOPTIONS:\n -p, --parameter-value <parameter-value>   [env: PARAMETER_VALUE=env_value]\n```\n\nIn some cases this may be undesirable, for example when being used for passing credentials or secret tokens. In those cases you can use `hide_env_values` to avoid having structopt emit the actual secret values:\n```\n\n#[derive(StructOpt)]\nstruct Foo {\n  #[structopt(long = \"secret\", env = \"SECRET_VALUE\", hide_env_values = true)]\n  secret_value: String,\n}\n```\n\n#### \u00a7\u27e830\u27e9Auto-deriving environment variables\nEnvironment variables tend to be called after the corresponding `struct`\u2019s field, as in example above. The field is `secret_value` and the env var is \u201cSECRET_VALUE\u201d; the name is the same, except casing is different.\nIt\u2019s pretty tedious and error-prone to type the same name twice, so you can ask `structopt` to do that for you.\n```\n\n#[derive(StructOpt)]\nstruct Foo {\n  #[structopt(long = \"secret\", env)]\n  secret_value: String,\n}\n```\n\nIt works just like `#[structopt(short/long)]`: if `env` is not set to some concrete value the value will be derived from the field\u2019s name. This is controlled by `#[structopt(rename_all_env)]`.\n`rename_all_env` works exactly as `rename_all` (including overriding) except default casing is `SCREAMING_SNAKE_CASE` instead of `kebab-case`.\n### \u00a7\u27e817\u27e9Skipping fields\nSometimes you may want to add a field to your `Opt` struct that is not a command line option and `clap` should know nothing about it. You can ask `structopt` to skip the field entirely via `#[structopt(skip = value)]` (`value` must implement `Into<FieldType>`) or `#[structopt(skip)]` if you want assign the field with `Default::default()` (obviously, the field\u2019s type must implement `Default`).\n```\n#[derive(StructOpt)]\npub struct Opt {\n  #[structopt(long, short)]\n  number: u32,\n  // these fields are to be assigned with Default::default()\n  #[structopt(skip)]\n  k: String,\n  #[structopt(skip)]\n  v: Vec<u32>,\n  // these fields get set explicitly\n  #[structopt(skip = vec![1, 2, 3])]\n  k2: Vec<u32>,\n  #[structopt(skip = \"cake\")] // &str implements Into<String>\n  v2: String,\n}\n```\n\n### \u00a7\u27e818\u27e9Subcommands\nSome applications, especially large ones, split their functionality through the use of \u201csubcommands\u201d. Each of these act somewhat like a separate command, but is part of the larger group. One example is `git`, which has subcommands such as `add`, `commit`, and `clone`, to mention just a few.\n`clap` has this functionality, and `structopt` supports it through enums:\n```\n\n#[derive(StructOpt)]\n#[structopt(about = \"the stupid content tracker\")]\nenum Git {\n  Add {\n    #[structopt(short)]\n    interactive: bool,\n    #[structopt(short)]\n    patch: bool,\n    #[structopt(parse(from_os_str))]\n    files: Vec<PathBuf>,\n  },\n  Fetch {\n    #[structopt(long)]\n    dry_run: bool,\n    #[structopt(long)]\n    all: bool,\n    repository: Option<String>,\n  },\n  Commit {\n    #[structopt(short)]\n    message: Option<String>,\n    #[structopt(short)]\n    all: bool,\n  },\n}\n```\n\nUsing `derive(StructOpt)` on an enum instead of a struct will produce a `clap::App` that only takes subcommands. So `git add`, `git fetch`, and `git commit` would be commands allowed for the above example.\n`structopt` also provides support for applications where certain flags need to apply to all subcommands, as well as nested subcommands:\n```\n#[derive(StructOpt)]\nstruct MakeCookie {\n  #[structopt(name = \"supervisor\", default_value = \"Puck\", long = \"supervisor\")]\n  supervising_faerie: String,\n  /// The faerie tree this cookie is being made in.\n  tree: Option<String>,\n  #[structopt(subcommand)] // Note that we mark a field as a subcommand\n  cmd: Command,\n}\n#[derive(StructOpt)]\nenum Command {\n  /// Pound acorns into flour for cookie dough.\n  Pound {\n    acorns: u32,\n  },\n  /// Add magical sparkles -- the secret ingredient!\n  Sparkle {\n    #[structopt(short, parse(from_occurrences))]\n    magicality: u64,\n    #[structopt(short)]\n    color: String,\n  },\n  Finish(Finish),\n}\n// Subcommand can also be externalized by using a 1-uple enum variant\n#[derive(StructOpt)]\nstruct Finish {\n  #[structopt(short)]\n  time: u32,\n  #[structopt(subcommand)] // Note that we mark a field as a subcommand\n  finish_type: FinishType,\n}\n// subsubcommand!\n#[derive(StructOpt)]\nenum FinishType {\n  Glaze {\n    applications: u32,\n  },\n  Powder {\n    flavor: String,\n    dips: u32,\n  }\n}\n```\n\nMarking a field with `structopt(subcommand)` will add the subcommands of the designated enum to the current `clap::App`. The designated enum _must_ also be derived `StructOpt`. So the above example would take the following commands:\n  * `make-cookie pound 50`\n  * `make-cookie sparkle -mmm --color \"green\"`\n  * `make-cookie finish 130 glaze 3`\n\n\n#### \u00a7\u27e819\u27e9Optional subcommands\nSubcommands may be optional:\n```\n#[derive(StructOpt)]\nstruct Foo {\n  file: String,\n  #[structopt(subcommand)]\n  cmd: Option<Command>,\n}\n#[derive(StructOpt)]\nenum Command {\n  Bar,\n  Baz,\n  Quux,\n}\n```\n\n#### \u00a7\u27e820\u27e9External subcommands\nSometimes you want to support not only the set of well-known subcommands but you also want to allow other, user-driven subcommands. `clap` supports this via `AppSettings::AllowExternalSubcommands`\u27e841\u27e9.\n`structopt` provides it\u2019s own dedicated syntax for that:\n```\n#[derive(Debug, PartialEq, StructOpt)]\nstruct Opt {\n  #[structopt(subcommand)]\n  sub: Subcommands,\n}\n#[derive(Debug, PartialEq, StructOpt)]\nenum Subcommands {\n  // normal subcommand\n  Add,\n  // `external_subcommand` tells structopt to put\n  // all the extra arguments into this Vec\n  #[structopt(external_subcommand)]\n  Other(Vec<String>),\n}\n// normal subcommand\nassert_eq!(\n  Opt::from_iter(&[\"test\", \"add\"]),\n  Opt {\n    sub: Subcommands::Add\n  }\n);\nassert_eq!(\n  Opt::from_iter(&[\"test\", \"git\", \"status\"]),\n  Opt {\n    sub: Subcommands::Other(vec![\"git\".into(), \"status\".into()])\n  }\n);\n// Please note that if you'd wanted to allow \"no subcommands at all\" case\n// you should have used `sub: Option<Subcommands>` above\nassert!(Opt::from_iter_safe(&[\"test\"]).is_err());\n```\n\nIn other words, you just add an extra tuple variant marked with `#[structopt(subcommand)]`, and its type must be either `Vec<String>` or `Vec<OsString>`. `structopt` will detect `String` in this context and use appropriate `clap` API.\n#### \u00a7\u27e821\u27e9Flattening subcommands\nIt is also possible to combine multiple enums of subcommands into one. All the subcommands will be on the same level.\n```\n#[derive(StructOpt)]\nenum BaseCli {\n  Ghost10 {\n    arg1: i32,\n  }\n}\n#[derive(StructOpt)]\nenum Opt {\n  #[structopt(flatten)]\n  BaseCli(BaseCli),\n  Dex {\n    arg2: i32,\n  },\n}\n```\n\n```\ncli ghost10 42\ncli dex 42\n```\n\n### \u00a7\u27e822\u27e9Flattening\nIt can sometimes be useful to group related arguments in a substruct, while keeping the command-line interface flat. In these cases you can mark a field as `flatten` and give it another type that derives `StructOpt`:\n```\n#[derive(StructOpt)]\nstruct Cmdline {\n  /// switch on verbosity\n  #[structopt(short)]\n  verbose: bool,\n  #[structopt(flatten)]\n  daemon_opts: DaemonOpts,\n}\n#[derive(StructOpt)]\nstruct DaemonOpts {\n  /// daemon user\n  #[structopt(short)]\n  user: String,\n  /// daemon group\n  #[structopt(short)]\n  group: String,\n}\n```\n\nIn this example, the derived `Cmdline` parser will support the options `-v`, `-u` and `-g`.\nThis feature also makes it possible to define a `StructOpt` struct in a library, parse the corresponding arguments in the main argument parser, and pass off this struct to a handler provided by that library.\n### \u00a7\u27e823\u27e9Custom string parsers\nIf the field type does not have a `FromStr` implementation, or you would like to provide a custom parsing scheme other than `FromStr`, you may provide a custom string parser using `parse(...)` like this:\n```\nuse std::num::ParseIntError;\nuse std::path::PathBuf;\nfn parse_hex(src: &str) -> Result<u32, ParseIntError> {\n  u32::from_str_radix(src, 16)\n}\n#[derive(StructOpt)]\nstruct HexReader {\n  #[structopt(short, parse(try_from_str = parse_hex))]\n  number: u32,\n  #[structopt(short, parse(from_os_str))]\n  output: PathBuf,\n}\n```\n\nThere are five kinds of custom parsers:\nKind| Signature| Default  \n---|---|---  \n`from_str`| `fn(&str) -> T`| `::std::convert::From::from`  \n`try_from_str`| `fn(&str) -> Result<T, E>`| `::std::str::FromStr::from_str`  \n`from_os_str`| `fn(&OsStr) -> T`| `::std::convert::From::from`  \n`try_from_os_str`| `fn(&OsStr) -> Result<T, OsString>`| (no default function)  \n`from_occurrences`| `fn(u64) -> T`| `value as T`  \n`from_flag`| `fn(bool) -> T`| `::std::convert::From::from`  \nThe `from_occurrences` parser is special. Using `parse(from_occurrences)` results in the _number of flags occurrences_ being stored in the relevant field or being passed to the supplied function. In other words, it converts something like `-vvv` to `3`. This is equivalent to `.takes_value(false).multiple(true)`. Note that the default parser can only be used with fields of integer types (`u8`, `usize`, `i64`, etc.).\nThe `from_flag` parser is also special. Using `parse(from_flag)` or `parse(from_flag = some_func)` will result in the field being treated as a flag even if it does not have type `bool`.\nWhen supplying a custom string parser, `bool` will not be treated specially:\nType| Effect| Added method call to `clap::Arg`  \n---|---|---  \n`Option<T>`| optional argument| `.takes_value(true).multiple(false)`  \n`Vec<T>`| list of arguments| `.takes_value(true).multiple(true)`  \n`T`| required argument| `.takes_value(true).multiple(false).required(!has_default)`  \nIn the `try_from_*` variants, the function will run twice on valid input: once to validate, and once to parse. Hence, make sure the function is side-effect-free.\n### \u00a7\u27e824\u27e9Generics\nGeneric structs and enums can be used. They require explicit trait bounds on any generic types that will be used by the `StructOpt` derive macro. In some cases, associated types will require additional bounds. See the usage of `FromStr` below for an example of this.\n```\nuse std::{fmt, str::FromStr};\n// a struct with single custom argument\n#[derive(StructOpt)]\nstruct GenericArgs<T: FromStr> where <T as FromStr>::Err: fmt::Display + fmt::Debug {\n  generic_arg_1: String,\n  generic_arg_2: String,\n  custom_arg_1: T,\n}\n```\n\nor\n```\n// a struct with multiple custom arguments in a substructure\n#[derive(StructOpt)]\nstruct GenericArgs<T: StructOpt> {\n  generic_arg_1: String,\n  generic_arg_2: String,\n  #[structopt(flatten)]\n  custom_args: T,\n}\n```\n\n## Re-exports\u00a7\u27e842\u27e9\n\n`pub use clap[](https://docs.rs/clap/2.33.3/x86_64-unknown-linux-gnu/clap/index.html \"mod clap\");`\n\n## Traits\u00a7\u27e843\u27e9\n\nStructOpt\u27e825\u27e9\n    A struct that is converted from command line arguments.\n",
            "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://docs.rs/structopt/latest/settings.html: Settings\n\u27e82\u27e9 https://docs.rs/structopt/latest/help.html: Help\n\u27e83\u27e9 https://docs.rs/structopt/latest/src/structopt/lib.rs.html#9-1238: Source\n\u27e84\u27e9 https://docs.rs/structopt/latest/structopt/#maintenance: \u00a7\n\u27e85\u27e9 https://docs.rs/structopt/latest/structopt/#features: \u00a7\n\u27e86\u27e9 https://github.com/rust-cli/paw: `paw`\n\u27e87\u27e9 https://docs.rs/structopt/latest/structopt/#table-of-contents: \u00a7\n\u27e88\u27e9 https://docs.rs/structopt/latest/structopt/#how-to-derivestructopt: How to `derive(StructOpt)`\n\u27e89\u27e9 https://docs.rs/structopt/latest/structopt/#attributes: Attributes\n\u27e810\u27e9 https://docs.rs/structopt/latest/structopt/#raw-methods: Raw methods\n\u27e811\u27e9 https://docs.rs/structopt/latest/structopt/#magical-methods: Magical methods\n\u27e812\u27e9 https://docs.rs/structopt/latest/structopt/#type-magic: Type magic\n\u27e813\u27e9 https://docs.rs/structopt/latest/structopt/#specifying-argument-types: Specifying argument types\n\u27e814\u27e9 https://docs.rs/structopt/latest/structopt/#default-values: Default values\n\u27e815\u27e9 https://docs.rs/structopt/latest/structopt/#help-messages: Help messages\n\u27e816\u27e9 https://docs.rs/structopt/latest/structopt/#environment-variable-fallback: Environment variable fallback\n\u27e817\u27e9 https://docs.rs/structopt/latest/structopt/#skipping-fields: Skipping fields\n\u27e818\u27e9 https://docs.rs/structopt/latest/structopt/#subcommands: Subcommands\n\u27e819\u27e9 https://docs.rs/structopt/latest/structopt/#optional-subcommands: Optional subcommands\n\u27e820\u27e9 https://docs.rs/structopt/latest/structopt/#external-subcommands: External subcommands\n\u27e821\u27e9 https://docs.rs/structopt/latest/structopt/#flattening-subcommands: Flattening subcommands\n\u27e822\u27e9 https://docs.rs/structopt/latest/structopt/#flattening: Flattening\n\u27e823\u27e9 https://docs.rs/structopt/latest/structopt/#custom-string-parsers: Custom string parsers\n\u27e824\u27e9 https://docs.rs/structopt/latest/structopt/#generics: Generics\n\u27e825\u27e9 https://docs.rs/structopt/latest/structopt/trait.StructOpt.html: trait\u2019s reference documentation\n\u27e826\u27e9 https://docs.rs/clap/2.33.3/x86_64-unknown-linux-gnu/clap/app/struct.App.html: struct clap::app::App - `clap::App`\n\u27e827\u27e9 https://docs.rs/clap/2/clap/struct.App.html: `clap::App` methods\n\u27e828\u27e9 https://docs.rs/clap/2/clap/struct.Arg.html: `clap::Arg` methods\n\u27e829\u27e9 https://docs.rs/structopt/latest/structopt/: This example is not tested - \u24d8\n\u27e830\u27e9 https://docs.rs/structopt/latest/structopt/#auto-deriving-environment-variables: `rename_all_env`\n\u27e831\u27e9 https://docs.rs/structopt/latest/structopt/#doc-comment-preprocessing-and-structoptverbatim_doc_comment: `verbatim_doc_comment`\n\u27e832\u27e9 https://docs.rs/clap/2.33.0/clap/struct.Arg.html#method.default_value: `Arg::default_value`\n\u27e833\u27e9 https://doc.rust-lang.org/std/default/trait.Default.html: `Default`\n\u27e834\u27e9 https://doc.rust-lang.org/std/string/trait.ToString.html: `ToString`\n\u27e835\u27e9 https://docs.rs/clap/2/clap/struct.App.html#method.about: `App::about`\n\u27e836\u27e9 https://docs.rs/clap/2/clap/struct.App.html#method.long_about: `App::long_about`\n\u27e837\u27e9 https://docs.rs/clap/2/clap/struct.Arg.html#method.help: `Arg::help`\n\u27e838\u27e9 https://docs.rs/clap/2/clap/struct.Arg.html#method.long_help: `Arg::long_help`\n\u27e839\u27e9 https://docs.rs/structopt/latest/structopt/#long_help-and---help: \u00a7\n\u27e840\u27e9 https://docs.rs/structopt/latest/structopt/#-h-vs---help-aka-help-vs-long_help: \u00a7\n\u27e841\u27e9 https://docs.rs/clap/2.32.0/clap/enum.AppSettings.html#variant.AllowExternalSubcommands: `AppSettings::AllowExternalSubcommands`\n\u27e842\u27e9 https://docs.rs/structopt/latest/structopt/#reexports: \u00a7\n\u27e843\u27e9 https://docs.rs/structopt/latest/structopt/#traits: \u00a7\n",
            "fit_markdown": "",
            "fit_html": ""
          },
          "downloads": 0,
          "github_stars": 0,
          "dependencies": [],
          "features": {},
          "code_snippets": [],
          "readme_sections": {},
          "librs_downloads": null,
          "source": "crates.io",
          "enhanced_scraping": {},
          "enhanced_features": [],
          "enhanced_dependencies": []
        },
        "enriched_crate": {
          "name": "structopt",
          "version": "0.3.26",
          "description": "ALLOW: Positive community sentiment",
          "repository": "",
          "keywords": [],
          "categories": [],
          "readme": {
            "raw_markdown": "[](https://docs.rs/structopt/latest/structopt/all.html \"show sidebar\")\n# Crate structoptCopy item path\n[Settings](https://docs.rs/structopt/latest/settings.html)\n[Help](https://docs.rs/structopt/latest/help.html)\nSummary[Source](https://docs.rs/structopt/latest/src/structopt/lib.rs.html#9-1238)\nExpand description\nThis crate defines the `StructOpt` trait and its custom derive.\n### [\u00a7](https://docs.rs/structopt/latest/structopt/#maintenance)Maintenance\nAs clap v3 is now out, and the structopt features are integrated into (almost as-is), structopt is now in maintenance mode: no new feature will be added.\nBugs will be fixed, and documentation improvements will be accepted.\n### [\u00a7](https://docs.rs/structopt/latest/structopt/#features)Features\nIf you want to disable all the `clap` features (colors, suggestions, ..) add `default-features = false` to the `structopt` dependency:\n```\n[dependencies]\nstructopt = { version = \"0.3\", default-features = false }\n```\n\nSupport for [`paw`](https://github.com/rust-cli/paw) (the `Command line argument paw-rser abstraction for main`) is disabled by default, but can be enabled in the `structopt` dependency with the feature `paw`:\n```\n[dependencies]\nstructopt = { version = \"0.3\", features = [ \"paw\" ] }\npaw = \"1.0\"\n```\n\n## [\u00a7](https://docs.rs/structopt/latest/structopt/#table-of-contents)Table of Contents\n  * [How to `derive(StructOpt)`](https://docs.rs/structopt/latest/structopt/#how-to-derivestructopt)\n  * [Attributes](https://docs.rs/structopt/latest/structopt/#attributes)\n    * [Raw methods](https://docs.rs/structopt/latest/structopt/#raw-methods)\n    * [Magical methods](https://docs.rs/structopt/latest/structopt/#magical-methods)\n  * Arguments \n    * [Type magic](https://docs.rs/structopt/latest/structopt/#type-magic)\n    * [Specifying argument types](https://docs.rs/structopt/latest/structopt/#specifying-argument-types)\n    * [Default values](https://docs.rs/structopt/latest/structopt/#default-values)\n    * [Help messages](https://docs.rs/structopt/latest/structopt/#help-messages)\n    * [Environment variable fallback](https://docs.rs/structopt/latest/structopt/#environment-variable-fallback)\n  * [Skipping fields](https://docs.rs/structopt/latest/structopt/#skipping-fields)\n  * [Subcommands](https://docs.rs/structopt/latest/structopt/#subcommands)\n    * [Optional subcommands](https://docs.rs/structopt/latest/structopt/#optional-subcommands)\n    * [External subcommands](https://docs.rs/structopt/latest/structopt/#external-subcommands)\n    * [Flattening subcommands](https://docs.rs/structopt/latest/structopt/#flattening-subcommands)\n  * [Flattening](https://docs.rs/structopt/latest/structopt/#flattening)\n  * [Custom string parsers](https://docs.rs/structopt/latest/structopt/#custom-string-parsers)\n  * [Generics](https://docs.rs/structopt/latest/structopt/#generics)\n\n\n### [\u00a7](https://docs.rs/structopt/latest/structopt/#how-to-derivestructopt)How to `derive(StructOpt)`\nFirst, let\u2019s look at the example:\n```\nuse std::path::PathBuf;\nuse structopt::StructOpt;\n#[derive(Debug, StructOpt)]\n#[structopt(name = \"example\", about = \"An example of StructOpt usage.\")]\nstruct Opt {\n  /// Activate debug mode\n  // short and long flags (-d, --debug) will be deduced from the field's name\n  #[structopt(short, long)]\n  debug: bool,\n  /// Set speed\n  // we don't want to name it \"speed\", need to look smart\n  #[structopt(short = \"v\", long = \"velocity\", default_value = \"42\")]\n  speed: f64,\n  /// Input file\n  #[structopt(parse(from_os_str))]\n  input: PathBuf,\n  /// Output file, stdout if not present\n  #[structopt(parse(from_os_str))]\n  output: Option<PathBuf>,\n  /// Where to write the output: to `stdout` or `file`\n  #[structopt(short)]\n  out_type: String,\n  /// File name: only required when `out-type` is set to `file`\n  #[structopt(name = \"FILE\", required_if(\"out-type\", \"file\"))]\n  file_name: Option<String>,\n}\nfn main() {\n  let opt = Opt::from_args();\n  println!(\"{:?}\", opt);\n}\n```\n\nSo `derive(StructOpt)` tells Rust to generate a command line parser, and the various `structopt` attributes are simply used for additional parameters.\nFirst, define a struct, whatever its name. This structure corresponds to a `clap::App`, its fields correspond to `clap::Arg` (unless they\u2019re [subcommands](https://docs.rs/structopt/latest/structopt/#subcommands)), and you can adjust these apps and args by `#[structopt(...)]` [attributes](https://docs.rs/structopt/latest/structopt/#attributes).\n**Note:**\nKeep in mind that `StructOpt` trait is more than just `from_args` method. It has a number of additional features, including access to underlying `clap::App` via `StructOpt::clap()`. See the [trait\u2019s reference documentation](https://docs.rs/structopt/latest/structopt/trait.StructOpt.html).\n### [\u00a7](https://docs.rs/structopt/latest/structopt/#attributes)Attributes\nYou can control the way `structopt` translates your struct into an actual [`clap::App`](https://docs.rs/clap/2.33.3/x86_64-unknown-linux-gnu/clap/app/struct.App.html \"struct clap::app::App\") invocation via `#[structopt(...)]` attributes.\nThe attributes fall into two categories:\n  * `structopt`\u2019s own [magical methods](https://docs.rs/structopt/latest/structopt/#magical-methods).\nThey are used by `structopt` itself. They come mostly in `attr = [\"whatever\"]` form, but some `attr(args...)` also exist.\n  * [`raw` attributes](https://docs.rs/structopt/latest/structopt/#raw-methods).\nThey represent explicit `clap::Arg/App` method calls. They are what used to be explicit `#[structopt(raw(...))]` attrs in pre-0.3 `structopt`\n\n\nEvery `structopt attribute` looks like comma-separated sequence of methods:\n```\n#[structopt(\n  short, // method with no arguments - always magical\n  long = \"--long-option\", // method with one argument\n  required_if(\"out\", \"file\"), // method with one and more args\n  parse(from_os_str = path::to::parser) // some magical methods have their own syntax\n)]\n```\n\n`#[structopt(...)]` attributes can be placed on top of `struct`, `enum`, `struct` field or `enum` variant. Attributes on top of `struct` or `enum` represent `clap::App` method calls, field or variant attributes correspond to `clap::Arg` method calls.\nIn other words, the `Opt` struct from the example above will be turned into this (_details omitted_):\n```\nApp::new(\"example\")\n  .version(\"0.2.0\")\n  .about(\"An example of StructOpt usage.\")\n.arg(Arg::with_name(\"debug\")\n  .help(\"Activate debug mode\")\n  .short(\"debug\")\n  .long(\"debug\"))\n.arg(Arg::with_name(\"speed\")\n  .help(\"Set speed\")\n  .short(\"v\")\n  .long(\"velocity\")\n  .default_value(\"42\"))\n// and so on\n```\n\n### [\u00a7](https://docs.rs/structopt/latest/structopt/#raw-methods)Raw methods\nThey are the reason why `structopt` is so flexible. **Every and each method from`clap::App/Arg` can be used this way!** See the [`clap::App` methods](https://docs.rs/clap/2/clap/struct.App.html) and [`clap::Arg` methods](https://docs.rs/clap/2/clap/struct.Arg.html).\n```\n#[structopt(\n  global = true, // name = arg form, neat for one-arg methods\n  required_if(\"out\", \"file\") // name(arg1, arg2, ...) form.\n)]\n```\n\nThe first form can only be used for methods which take only one argument. The second form must be used with multi-arg methods, but can also be used with single-arg methods. These forms are identical otherwise.\nAs long as `method_name` is not one of the magical methods - it will be translated into a mere method call.\n**Note:**\n\u201cRaw methods\u201d are direct replacement for pre-0.3 structopt\u2019s `#[structopt(raw(...))]` attributes, any time you would have used a `raw()` attribute in 0.2 you should use raw method in 0.3.\nUnfortunately, old raw attributes collide with `clap::Arg::raw` method. To explicitly warn users of this change we allow `#[structopt(raw())]` only with `true` or `false` literals (this method is supposed to be called only with `true` anyway).\n### [\u00a7](https://docs.rs/structopt/latest/structopt/#magical-methods)Magical methods\nThey are the reason why `structopt` is so easy to use and convenient in most cases. Many of them have defaults, some of them get used even if not mentioned.\nMethods may be used on \u201ctop level\u201d (on top of a `struct`, `enum` or `enum` variant) and/or on \u201cfield-level\u201d (on top of a `struct` field or _inside_ of an enum variant). Top level (non-magical) methods correspond to `App::method` calls, field-level methods are `Arg::method` calls.\n[\u24d8](https://docs.rs/structopt/latest/structopt/ \"This example is not tested\")```\n#[structopt(top_level)]\nstruct Foo {\n  #[structopt(field_level)]\n  field: u32\n}\n#[structopt(top_level)]\nenum Bar {\n  #[structopt(top_level)]\n  Pineapple {\n    #[structopt(field_level)]\n    chocolate: String\n  },\n  #[structopt(top_level)]\n  Orange,\n}\n```\n\n  * `name`: `[name = expr]`\n    * On top level: `App::new(expr)`.\nThe binary name displayed in help messages. Defaults to the crate name given by Cargo.\n    * On field-level: `Arg::with_name(expr)`.\nThe name for the argument the field stands for, this name appears in help messages. Defaults to a name, deduced from a field, see also [`rename_all`](https://docs.rs/structopt/latest/structopt/#specifying-argument-types).\n  * `version`: `[version = \"version\"]`\nUsable only on top level: `App::version(\"version\" or env!(CARGO_PKG_VERSION))`.\nThe version displayed in help messages. Defaults to the crate version given by Cargo. If `CARGO_PKG_VERSION` is not set no `.version()` calls will be generated unless requested.\n  * `no_version`: `no_version`\nUsable only on top level. Prevents default `App::version` call, i.e when no `version = \"version\"` mentioned.\n  * `author`: `author [= \"author\"]`\nUsable only on top level: `App::author(\"author\" or env!(CARGO_PKG_AUTHORS))`.\nAuthor/maintainer of the binary, this name appears in help messages. Defaults to the crate author given by cargo, but only when `author` explicitly mentioned.\n  * `about`: `about [= \"about\"]`\nUsable only on top level: `App::about(\"about\" or env!(CARGO_PKG_DESCRIPTION))`.\nShort description of the binary, appears in help messages. Defaults to the crate description given by cargo, but only when `about` explicitly mentioned.\n  * [`short`](https://docs.rs/structopt/latest/structopt/#specifying-argument-types): `short [= \"short-opt-name\"]`\nUsable only on field-level.\n  * [`long`](https://docs.rs/structopt/latest/structopt/#specifying-argument-types): `long [= \"long-opt-name\"]`\nUsable only on field-level.\n  * [`default_value`](https://docs.rs/structopt/latest/structopt/#default-values): `default_value [= \"default value\"]`\nUsable only on field-level.\n  * [`rename_all`](https://docs.rs/structopt/latest/structopt/#specifying-argument-types): [`rename_all = \"kebab\"/\"snake\"/\"screaming-snake\"/\"camel\"/\"pascal\"/\"verbatim\"/\"lower\"/\"upper\"]`\nUsable both on top level and field level.\n  * [`parse`](https://docs.rs/structopt/latest/structopt/#custom-string-parsers): `parse(type [= path::to::parser::fn])`\nUsable only on field-level.\n  * [`skip`](https://docs.rs/structopt/latest/structopt/#skipping-fields): `skip [= expr]`\nUsable only on field-level.\n  * [`flatten`](https://docs.rs/structopt/latest/structopt/#flattening): `flatten`\nUsable on field-level or single-typed tuple variants.\n  * [`subcommand`](https://docs.rs/structopt/latest/structopt/#subcommands): `subcommand`\nUsable only on field-level.\n  * [`external_subcommand`](https://docs.rs/structopt/latest/structopt/#external-subcommands)\nUsable only on enum variants.\n  * [`env`](https://docs.rs/structopt/latest/structopt/#environment-variable-fallback): `env [= str_literal]`\nUsable only on field-level.\n  * [`rename_all_env`](https://docs.rs/structopt/latest/structopt/#auto-deriving-environment-variables): [`rename_all_env = \"kebab\"/\"snake\"/\"screaming-snake\"/\"camel\"/\"pascal\"/\"verbatim\"/\"lower\"/\"upper\"]`\nUsable both on top level and field level.\n  * [`verbatim_doc_comment`](https://docs.rs/structopt/latest/structopt/#doc-comment-preprocessing-and-structoptverbatim_doc_comment): `verbatim_doc_comment`\nUsable both on top level and field level.\n\n\n### [\u00a7](https://docs.rs/structopt/latest/structopt/#type-magic)Type magic\nOne of major things that makes `structopt` so awesome is its type magic. Do you want optional positional argument? Use `Option<T>`! Or perhaps optional argument that optionally takes value (`[--opt=[val]]`)? Use `Option<Option<T>>`!\nHere is the table of types and `clap` methods they correspond to:\nType| Effect| Added method call to `clap::Arg`  \n---|---|---  \n`bool`| `true` if the flag is present| `.takes_value(false).multiple(false)`  \n`Option<T: FromStr>`| optional positional argument or option| `.takes_value(true).multiple(false)`  \n`Option<Option<T: FromStr>>`| optional option with optional value| `.takes_value(true).multiple(false).min_values(0).max_values(1)`  \n`Vec<T: FromStr>`| list of options or the other positional arguments| `.takes_value(true).multiple(true)`  \n`Option<Vec<T: FromStr>`| optional list of options| `.takes_values(true).multiple(true).min_values(0)`  \n`T: FromStr`| required option or positional argument| `.takes_value(true).multiple(false).required(!has_default)`  \nThe `FromStr` trait is used to convert the argument to the given type, and the `Arg::validator` method is set to a method using `to_string()` (`FromStr::Err` must implement `std::fmt::Display`). If you would like to use a custom string parser other than `FromStr`, see the [same titled section](https://docs.rs/structopt/latest/structopt/#custom-string-parsers) below.\n**Important:**\nPay attention that _only literal occurrence_ of this types is special, for example `Option<T>` is special while `::std::option::Option<T>` is not.\nIf you need to avoid special casing you can make a `type` alias and use it in place of the said type.\n**Note:**\n`bool` cannot be used as positional argument unless you provide an explicit parser. If you need a positional bool, for example to parse `true` or `false`, you must annotate the field with explicit [`#[structopt(parse(...))]`](https://docs.rs/structopt/latest/structopt/#custom-string-parsers).\nThus, the `speed` argument is generated as:\n```\nclap::Arg::with_name(\"speed\")\n  .takes_value(true)\n  .multiple(false)\n  .required(false)\n  .validator(parse_validator::<f64>)\n  .short(\"v\")\n  .long(\"velocity\")\n  .help(\"Set speed\")\n  .default_value(\"42\");\n```\n\n### [\u00a7](https://docs.rs/structopt/latest/structopt/#specifying-argument-types)Specifying argument types\nThere are three types of arguments that can be supplied to each (sub-)command:\n  * short (e.g. `-h`),\n  * long (e.g. `--help`)\n  * and positional.\n\n\nLike clap, structopt defaults to creating positional arguments.\nIf you want to generate a long argument you can specify either `long = $NAME`, or just `long` to get a long flag generated using the field name. The generated casing style can be modified using the `rename_all` attribute. See the `rename_all` example for more.\nFor short arguments, `short` will use the first letter of the field name by default, but just like the long option it\u2019s also possible to use a custom letter through `short = $LETTER`.\nIf an argument is renamed using `name = $NAME` any following call to `short` or `long` will use the new name.\n**Attention** : If these arguments are used without an explicit name the resulting flag is going to be renamed using `kebab-case` if the `rename_all` attribute was not specified previously. The same is true for subcommands with implicit naming through the related data structure.\n```\nuse structopt::StructOpt;\n#[derive(StructOpt)]\n#[structopt(rename_all = \"kebab-case\")]\nstruct Opt {\n  /// This option can be specified with something like `--foo-option\n  /// value` or `--foo-option=value`\n  #[structopt(long)]\n  foo_option: String,\n  /// This option can be specified with something like `-b value` (but\n  /// not `--bar-option value`).\n  #[structopt(short)]\n  bar_option: String,\n  /// This option can be specified either `--baz value` or `-z value`.\n  #[structopt(short = \"z\", long = \"baz\")]\n  baz_option: String,\n  /// This option can be specified either by `--custom value` or\n  /// `-c value`.\n  #[structopt(name = \"custom\", long, short)]\n  custom_option: String,\n  /// This option is positional, meaning it is the first unadorned string\n  /// you provide (multiple others could follow).\n  my_positional: String,\n  /// This option is skipped and will be filled with the default value\n  /// for its type (in this case 0).\n  #[structopt(skip)]\n  skipped: u32,\n}\n\n```\n\n### [\u00a7](https://docs.rs/structopt/latest/structopt/#default-values)Default values\nIn clap, default values for options can be specified via [`Arg::default_value`](https://docs.rs/clap/2.33.0/clap/struct.Arg.html#method.default_value).\nOf course, you can use as a raw method:\n```\n#[derive(StructOpt)]\nstruct Opt {\n  #[structopt(default_value = \"\", long)]\n  prefix: String,\n}\n```\n\nThis is quite mundane and error-prone to type the `\"...\"` default by yourself, especially when the Rust ecosystem uses the [`Default`](https://doc.rust-lang.org/std/default/trait.Default.html) trait for that. It would be wonderful to have `structopt` to take the `Default_default` and fill it for you. And yes, `structopt` can do that.\nUnfortunately, `default_value` takes `&str` but `Default::default` gives us some `Self` value. We need to map `Self` to `&str` somehow.\n`structopt` solves this problem via [`ToString`](https://doc.rust-lang.org/std/string/trait.ToString.html) trait.\nTo be able to use auto-default the type must implement _both_ `Default` and `ToString`:\n```\n#[derive(StructOpt)]\nstruct Opt {\n  // just leave the `= \"...\"` part and structopt will figure it for you\n  #[structopt(default_value, long)]\n  prefix: String, // `String` implements both `Default` and `ToString`\n}\n```\n\n### [\u00a7](https://docs.rs/structopt/latest/structopt/#help-messages)Help messages\nIn clap, help messages for the whole binary can be specified via [`App::about`](https://docs.rs/clap/2/clap/struct.App.html#method.about) and [`App::long_about`](https://docs.rs/clap/2/clap/struct.App.html#method.long_about) while help messages for individual arguments can be specified via [`Arg::help`](https://docs.rs/clap/2/clap/struct.Arg.html#method.help) and [`Arg::long_help`](https://docs.rs/clap/2/clap/struct.Arg.html#method.long_help)\u201c.\n`long_*` variants are used when user calls the program with `--help` and \u201cshort\u201d variants are used with `-h` flag. In `structopt`, you can use them via [raw methods](https://docs.rs/structopt/latest/structopt/#raw-methods), for example:\n```\n\n#[derive(StructOpt)]\n#[structopt(about = \"I am a program and I work, just pass `-h`\")]\nstruct Foo {\n  #[structopt(short, help = \"Pass `-h` and you'll see me!\")]\n  bar: String,\n}\n```\n\nFor convenience, doc comments can be used instead of raw methods (this example works exactly like the one above):\n```\n\n#[derive(StructOpt)]\n/// I am a program and I work, just pass `-h`\nstruct Foo {\n  /// Pass `-h` and you'll see me!\n  bar: String,\n}\n```\n\nDoc comments on [top-level](https://docs.rs/structopt/latest/structopt/#magical-methods) will be turned into `App::about/long_about` call (see below), doc comments on field-level are `Arg::help/long_help` calls.\n**Important:**\nRaw methods have priority over doc comments!\n**Top level doc comments always generate`App::about/long_about` calls!** If you really want to use the `App::help/long_help` methods (you likely don\u2019t), use a raw method to override the `App::about` call generated from the doc comment.\n#### [\u00a7](https://docs.rs/structopt/latest/structopt/#long_help-and---help)`long_help` and `--help`\nA message passed to [`App::long_about`](https://docs.rs/clap/2/clap/struct.App.html#method.long_about) or [`Arg::long_help`](https://docs.rs/clap/2/clap/struct.Arg.html#method.long_help) will be displayed whenever your program is called with `--help` instead of `-h`. Of course, you can use them via raw methods as described [above](https://docs.rs/structopt/latest/structopt/#help-messages).\nThe more convenient way is to use a so-called \u201clong\u201d doc comment:\n```\n#[derive(StructOpt)]\n/// Hi there, I'm Robo!\n///\n/// I like beeping, stumbling, eating your electricity,\n/// and making records of you singing in a shower.\n/// Pay up, or I'll upload it to youtube!\nstruct Robo {\n  /// Call my brother SkyNet.\n  ///\n  /// I am artificial superintelligence. I won't rest\n  /// until I'll have destroyed humanity. Enjoy your\n  /// pathetic existence, you mere mortals.\n  #[structopt(long)]\n  kill_all_humans: bool,\n}\n```\n\nA long doc comment consists of three parts:\n  * Short summary\n  * A blank line (whitespace only)\n  * Detailed description, all the rest\n\n\nIn other words, \u201clong\u201d doc comment consists of two or more paragraphs, with the first being a summary and the rest being the detailed description.\n**A long comment will result in two method calls** , `help(<summary>)` and `long_help(<whole comment>)`, so clap will display the summary with `-h` and the whole help message on `--help` (see below).\nSo, the example above will be turned into this (details omitted):\n```\nclap::App::new(\"<name>\")\n  .about(\"Hi there, I'm Robo!\")\n  .long_about(\"Hi there, I'm Robo!\\n\\n\\\n         I like beeping, stumbling, eating your electricity,\\\n         and making records of you singing in a shower.\\\n         Pay up or I'll upload it to youtube!\")\n// args...\n```\n\n#### [\u00a7](https://docs.rs/structopt/latest/structopt/#-h-vs---help-aka-help-vs-long_help)`-h` vs `--help` (A.K.A `help()` vs `long_help()`)\nThe `-h` flag is not the same as `--help`.\n-h corresponds to `Arg::help/App::about` and requests short \u201csummary\u201d messages while \u2013help corresponds to `Arg::long_help/App::long_about` and requests more detailed, descriptive messages.\nIt is entirely up to `clap` what happens if you used only one of [`Arg::help`](https://docs.rs/clap/2/clap/struct.Arg.html#method.help)/[`Arg::long_help`](https://docs.rs/clap/2/clap/struct.Arg.html#method.long_help), see `clap`\u2019s documentation for these methods.\nAs of clap v2.33, if only a short message ([`Arg::help`](https://docs.rs/clap/2/clap/struct.Arg.html#method.help)) or only a long ([`Arg::long_help`](https://docs.rs/clap/2/clap/struct.Arg.html#method.long_help)) message is provided, clap will use it for both -h and \u2013help. The same logic applies to `about/long_about`.\n#### [\u00a7](https://docs.rs/structopt/latest/structopt/#doc-comment-preprocessing-and-structoptverbatim_doc_comment)Doc comment preprocessing and `#[structopt(verbatim_doc_comment)]`\n`structopt` applies some preprocessing to doc comments to ease the most common uses:\n  * Strip leading and trailing whitespace from every line, if present.\n  * Strip leading and trailing blank lines, if present.\n  * Interpret each group of non-empty lines as a word-wrapped paragraph.\nWe replace newlines within paragraphs with spaces to allow the output to be re-wrapped to the terminal width.\n  * Strip any excess blank lines so that there is exactly one per paragraph break.\n  * If the first paragraph ends in exactly one period, remove the trailing period (i.e. strip trailing periods but not trailing ellipses).\n\n\nSometimes you don\u2019t want this preprocessing to apply, for example the comment contains some ASCII art or markdown tables, you would need to preserve LFs along with blank lines and the leading/trailing whitespace. You can ask `structopt` to preserve them via `#[structopt(verbatim_doc_comment)]` attribute.\n**This attribute must be applied to each field separately** , there\u2019s no global switch.\n**Important:**\nKeep in mind that `structopt` will _still_ remove one leading space from each line, even if this attribute is present, to allow for a space between `///` and the content.\nAlso, `structopt` will _still_ remove leading and trailing blank lines so these formats are equivalent:\n```\n/** This is a doc comment\nHello! */\n/**\nThis is a doc comment\nHello!\n*/\n/// This is a doc comment\n///\n/// Hello!\n```\n\n### [\u00a7](https://docs.rs/structopt/latest/structopt/#environment-variable-fallback)Environment variable fallback\nIt is possible to specify an environment variable fallback option for an arguments so that its value is taken from the specified environment variable if not given through the command-line:\n```\n\n#[derive(StructOpt)]\nstruct Foo {\n  #[structopt(short, long, env = \"PARAMETER_VALUE\")]\n  parameter_value: String,\n}\n```\n\nBy default, values from the environment are shown in the help output (i.e. when invoking `--help`):\n```\n$ cargo run -- --help\n...\nOPTIONS:\n -p, --parameter-value <parameter-value>   [env: PARAMETER_VALUE=env_value]\n```\n\nIn some cases this may be undesirable, for example when being used for passing credentials or secret tokens. In those cases you can use `hide_env_values` to avoid having structopt emit the actual secret values:\n```\n\n#[derive(StructOpt)]\nstruct Foo {\n  #[structopt(long = \"secret\", env = \"SECRET_VALUE\", hide_env_values = true)]\n  secret_value: String,\n}\n```\n\n#### [\u00a7](https://docs.rs/structopt/latest/structopt/#auto-deriving-environment-variables)Auto-deriving environment variables\nEnvironment variables tend to be called after the corresponding `struct`\u2019s field, as in example above. The field is `secret_value` and the env var is \u201cSECRET_VALUE\u201d; the name is the same, except casing is different.\nIt\u2019s pretty tedious and error-prone to type the same name twice, so you can ask `structopt` to do that for you.\n```\n\n#[derive(StructOpt)]\nstruct Foo {\n  #[structopt(long = \"secret\", env)]\n  secret_value: String,\n}\n```\n\nIt works just like `#[structopt(short/long)]`: if `env` is not set to some concrete value the value will be derived from the field\u2019s name. This is controlled by `#[structopt(rename_all_env)]`.\n`rename_all_env` works exactly as `rename_all` (including overriding) except default casing is `SCREAMING_SNAKE_CASE` instead of `kebab-case`.\n### [\u00a7](https://docs.rs/structopt/latest/structopt/#skipping-fields)Skipping fields\nSometimes you may want to add a field to your `Opt` struct that is not a command line option and `clap` should know nothing about it. You can ask `structopt` to skip the field entirely via `#[structopt(skip = value)]` (`value` must implement `Into<FieldType>`) or `#[structopt(skip)]` if you want assign the field with `Default::default()` (obviously, the field\u2019s type must implement `Default`).\n```\n#[derive(StructOpt)]\npub struct Opt {\n  #[structopt(long, short)]\n  number: u32,\n  // these fields are to be assigned with Default::default()\n  #[structopt(skip)]\n  k: String,\n  #[structopt(skip)]\n  v: Vec<u32>,\n  // these fields get set explicitly\n  #[structopt(skip = vec![1, 2, 3])]\n  k2: Vec<u32>,\n  #[structopt(skip = \"cake\")] // &str implements Into<String>\n  v2: String,\n}\n```\n\n### [\u00a7](https://docs.rs/structopt/latest/structopt/#subcommands)Subcommands\nSome applications, especially large ones, split their functionality through the use of \u201csubcommands\u201d. Each of these act somewhat like a separate command, but is part of the larger group. One example is `git`, which has subcommands such as `add`, `commit`, and `clone`, to mention just a few.\n`clap` has this functionality, and `structopt` supports it through enums:\n```\n\n#[derive(StructOpt)]\n#[structopt(about = \"the stupid content tracker\")]\nenum Git {\n  Add {\n    #[structopt(short)]\n    interactive: bool,\n    #[structopt(short)]\n    patch: bool,\n    #[structopt(parse(from_os_str))]\n    files: Vec<PathBuf>,\n  },\n  Fetch {\n    #[structopt(long)]\n    dry_run: bool,\n    #[structopt(long)]\n    all: bool,\n    repository: Option<String>,\n  },\n  Commit {\n    #[structopt(short)]\n    message: Option<String>,\n    #[structopt(short)]\n    all: bool,\n  },\n}\n```\n\nUsing `derive(StructOpt)` on an enum instead of a struct will produce a `clap::App` that only takes subcommands. So `git add`, `git fetch`, and `git commit` would be commands allowed for the above example.\n`structopt` also provides support for applications where certain flags need to apply to all subcommands, as well as nested subcommands:\n```\n#[derive(StructOpt)]\nstruct MakeCookie {\n  #[structopt(name = \"supervisor\", default_value = \"Puck\", long = \"supervisor\")]\n  supervising_faerie: String,\n  /// The faerie tree this cookie is being made in.\n  tree: Option<String>,\n  #[structopt(subcommand)] // Note that we mark a field as a subcommand\n  cmd: Command,\n}\n#[derive(StructOpt)]\nenum Command {\n  /// Pound acorns into flour for cookie dough.\n  Pound {\n    acorns: u32,\n  },\n  /// Add magical sparkles -- the secret ingredient!\n  Sparkle {\n    #[structopt(short, parse(from_occurrences))]\n    magicality: u64,\n    #[structopt(short)]\n    color: String,\n  },\n  Finish(Finish),\n}\n// Subcommand can also be externalized by using a 1-uple enum variant\n#[derive(StructOpt)]\nstruct Finish {\n  #[structopt(short)]\n  time: u32,\n  #[structopt(subcommand)] // Note that we mark a field as a subcommand\n  finish_type: FinishType,\n}\n// subsubcommand!\n#[derive(StructOpt)]\nenum FinishType {\n  Glaze {\n    applications: u32,\n  },\n  Powder {\n    flavor: String,\n    dips: u32,\n  }\n}\n```\n\nMarking a field with `structopt(subcommand)` will add the subcommands of the designated enum to the current `clap::App`. The designated enum _must_ also be derived `StructOpt`. So the above example would take the following commands:\n  * `make-cookie pound 50`\n  * `make-cookie sparkle -mmm --color \"green\"`\n  * `make-cookie finish 130 glaze 3`\n\n\n#### [\u00a7](https://docs.rs/structopt/latest/structopt/#optional-subcommands)Optional subcommands\nSubcommands may be optional:\n```\n#[derive(StructOpt)]\nstruct Foo {\n  file: String,\n  #[structopt(subcommand)]\n  cmd: Option<Command>,\n}\n#[derive(StructOpt)]\nenum Command {\n  Bar,\n  Baz,\n  Quux,\n}\n```\n\n#### [\u00a7](https://docs.rs/structopt/latest/structopt/#external-subcommands)External subcommands\nSometimes you want to support not only the set of well-known subcommands but you also want to allow other, user-driven subcommands. `clap` supports this via [`AppSettings::AllowExternalSubcommands`](https://docs.rs/clap/2.32.0/clap/enum.AppSettings.html#variant.AllowExternalSubcommands).\n`structopt` provides it\u2019s own dedicated syntax for that:\n```\n#[derive(Debug, PartialEq, StructOpt)]\nstruct Opt {\n  #[structopt(subcommand)]\n  sub: Subcommands,\n}\n#[derive(Debug, PartialEq, StructOpt)]\nenum Subcommands {\n  // normal subcommand\n  Add,\n  // `external_subcommand` tells structopt to put\n  // all the extra arguments into this Vec\n  #[structopt(external_subcommand)]\n  Other(Vec<String>),\n}\n// normal subcommand\nassert_eq!(\n  Opt::from_iter(&[\"test\", \"add\"]),\n  Opt {\n    sub: Subcommands::Add\n  }\n);\nassert_eq!(\n  Opt::from_iter(&[\"test\", \"git\", \"status\"]),\n  Opt {\n    sub: Subcommands::Other(vec![\"git\".into(), \"status\".into()])\n  }\n);\n// Please note that if you'd wanted to allow \"no subcommands at all\" case\n// you should have used `sub: Option<Subcommands>` above\nassert!(Opt::from_iter_safe(&[\"test\"]).is_err());\n```\n\nIn other words, you just add an extra tuple variant marked with `#[structopt(subcommand)]`, and its type must be either `Vec<String>` or `Vec<OsString>`. `structopt` will detect `String` in this context and use appropriate `clap` API.\n#### [\u00a7](https://docs.rs/structopt/latest/structopt/#flattening-subcommands)Flattening subcommands\nIt is also possible to combine multiple enums of subcommands into one. All the subcommands will be on the same level.\n```\n#[derive(StructOpt)]\nenum BaseCli {\n  Ghost10 {\n    arg1: i32,\n  }\n}\n#[derive(StructOpt)]\nenum Opt {\n  #[structopt(flatten)]\n  BaseCli(BaseCli),\n  Dex {\n    arg2: i32,\n  },\n}\n```\n\n```\ncli ghost10 42\ncli dex 42\n```\n\n### [\u00a7](https://docs.rs/structopt/latest/structopt/#flattening)Flattening\nIt can sometimes be useful to group related arguments in a substruct, while keeping the command-line interface flat. In these cases you can mark a field as `flatten` and give it another type that derives `StructOpt`:\n```\n#[derive(StructOpt)]\nstruct Cmdline {\n  /// switch on verbosity\n  #[structopt(short)]\n  verbose: bool,\n  #[structopt(flatten)]\n  daemon_opts: DaemonOpts,\n}\n#[derive(StructOpt)]\nstruct DaemonOpts {\n  /// daemon user\n  #[structopt(short)]\n  user: String,\n  /// daemon group\n  #[structopt(short)]\n  group: String,\n}\n```\n\nIn this example, the derived `Cmdline` parser will support the options `-v`, `-u` and `-g`.\nThis feature also makes it possible to define a `StructOpt` struct in a library, parse the corresponding arguments in the main argument parser, and pass off this struct to a handler provided by that library.\n### [\u00a7](https://docs.rs/structopt/latest/structopt/#custom-string-parsers)Custom string parsers\nIf the field type does not have a `FromStr` implementation, or you would like to provide a custom parsing scheme other than `FromStr`, you may provide a custom string parser using `parse(...)` like this:\n```\nuse std::num::ParseIntError;\nuse std::path::PathBuf;\nfn parse_hex(src: &str) -> Result<u32, ParseIntError> {\n  u32::from_str_radix(src, 16)\n}\n#[derive(StructOpt)]\nstruct HexReader {\n  #[structopt(short, parse(try_from_str = parse_hex))]\n  number: u32,\n  #[structopt(short, parse(from_os_str))]\n  output: PathBuf,\n}\n```\n\nThere are five kinds of custom parsers:\nKind| Signature| Default  \n---|---|---  \n`from_str`| `fn(&str) -> T`| `::std::convert::From::from`  \n`try_from_str`| `fn(&str) -> Result<T, E>`| `::std::str::FromStr::from_str`  \n`from_os_str`| `fn(&OsStr) -> T`| `::std::convert::From::from`  \n`try_from_os_str`| `fn(&OsStr) -> Result<T, OsString>`| (no default function)  \n`from_occurrences`| `fn(u64) -> T`| `value as T`  \n`from_flag`| `fn(bool) -> T`| `::std::convert::From::from`  \nThe `from_occurrences` parser is special. Using `parse(from_occurrences)` results in the _number of flags occurrences_ being stored in the relevant field or being passed to the supplied function. In other words, it converts something like `-vvv` to `3`. This is equivalent to `.takes_value(false).multiple(true)`. Note that the default parser can only be used with fields of integer types (`u8`, `usize`, `i64`, etc.).\nThe `from_flag` parser is also special. Using `parse(from_flag)` or `parse(from_flag = some_func)` will result in the field being treated as a flag even if it does not have type `bool`.\nWhen supplying a custom string parser, `bool` will not be treated specially:\nType| Effect| Added method call to `clap::Arg`  \n---|---|---  \n`Option<T>`| optional argument| `.takes_value(true).multiple(false)`  \n`Vec<T>`| list of arguments| `.takes_value(true).multiple(true)`  \n`T`| required argument| `.takes_value(true).multiple(false).required(!has_default)`  \nIn the `try_from_*` variants, the function will run twice on valid input: once to validate, and once to parse. Hence, make sure the function is side-effect-free.\n### [\u00a7](https://docs.rs/structopt/latest/structopt/#generics)Generics\nGeneric structs and enums can be used. They require explicit trait bounds on any generic types that will be used by the `StructOpt` derive macro. In some cases, associated types will require additional bounds. See the usage of `FromStr` below for an example of this.\n```\nuse std::{fmt, str::FromStr};\n// a struct with single custom argument\n#[derive(StructOpt)]\nstruct GenericArgs<T: FromStr> where <T as FromStr>::Err: fmt::Display + fmt::Debug {\n  generic_arg_1: String,\n  generic_arg_2: String,\n  custom_arg_1: T,\n}\n```\n\nor\n```\n// a struct with multiple custom arguments in a substructure\n#[derive(StructOpt)]\nstruct GenericArgs<T: StructOpt> {\n  generic_arg_1: String,\n  generic_arg_2: String,\n  #[structopt(flatten)]\n  custom_args: T,\n}\n```\n\n## Re-exports[\u00a7](https://docs.rs/structopt/latest/structopt/#reexports)\n\n`pub use clap[](https://docs.rs/clap/2.33.3/x86_64-unknown-linux-gnu/clap/index.html \"mod clap\");`\n\n## Traits[\u00a7](https://docs.rs/structopt/latest/structopt/#traits)\n\n[StructOpt](https://docs.rs/structopt/latest/structopt/trait.StructOpt.html \"trait structopt::StructOpt\")\n    A struct that is converted from command line arguments.\n",
            "markdown_with_citations": "[](https://docs.rs/structopt/latest/structopt/all.html \"show sidebar\")\n# Crate structoptCopy item path\nSettings\u27e81\u27e9\nHelp\u27e82\u27e9\nSummarySource\u27e83\u27e9\nExpand description\nThis crate defines the `StructOpt` trait and its custom derive.\n### \u00a7\u27e84\u27e9Maintenance\nAs clap v3 is now out, and the structopt features are integrated into (almost as-is), structopt is now in maintenance mode: no new feature will be added.\nBugs will be fixed, and documentation improvements will be accepted.\n### \u00a7\u27e85\u27e9Features\nIf you want to disable all the `clap` features (colors, suggestions, ..) add `default-features = false` to the `structopt` dependency:\n```\n[dependencies]\nstructopt = { version = \"0.3\", default-features = false }\n```\n\nSupport for `paw`\u27e86\u27e9 (the `Command line argument paw-rser abstraction for main`) is disabled by default, but can be enabled in the `structopt` dependency with the feature `paw`:\n```\n[dependencies]\nstructopt = { version = \"0.3\", features = [ \"paw\" ] }\npaw = \"1.0\"\n```\n\n## \u00a7\u27e87\u27e9Table of Contents\n  * How to `derive(StructOpt)`\u27e88\u27e9\n  * Attributes\u27e89\u27e9\n    * Raw methods\u27e810\u27e9\n    * Magical methods\u27e811\u27e9\n  * Arguments \n    * Type magic\u27e812\u27e9\n    * Specifying argument types\u27e813\u27e9\n    * Default values\u27e814\u27e9\n    * Help messages\u27e815\u27e9\n    * Environment variable fallback\u27e816\u27e9\n  * Skipping fields\u27e817\u27e9\n  * Subcommands\u27e818\u27e9\n    * Optional subcommands\u27e819\u27e9\n    * External subcommands\u27e820\u27e9\n    * Flattening subcommands\u27e821\u27e9\n  * Flattening\u27e822\u27e9\n  * Custom string parsers\u27e823\u27e9\n  * Generics\u27e824\u27e9\n\n\n### \u00a7\u27e88\u27e9How to `derive(StructOpt)`\nFirst, let\u2019s look at the example:\n```\nuse std::path::PathBuf;\nuse structopt::StructOpt;\n#[derive(Debug, StructOpt)]\n#[structopt(name = \"example\", about = \"An example of StructOpt usage.\")]\nstruct Opt {\n  /// Activate debug mode\n  // short and long flags (-d, --debug) will be deduced from the field's name\n  #[structopt(short, long)]\n  debug: bool,\n  /// Set speed\n  // we don't want to name it \"speed\", need to look smart\n  #[structopt(short = \"v\", long = \"velocity\", default_value = \"42\")]\n  speed: f64,\n  /// Input file\n  #[structopt(parse(from_os_str))]\n  input: PathBuf,\n  /// Output file, stdout if not present\n  #[structopt(parse(from_os_str))]\n  output: Option<PathBuf>,\n  /// Where to write the output: to `stdout` or `file`\n  #[structopt(short)]\n  out_type: String,\n  /// File name: only required when `out-type` is set to `file`\n  #[structopt(name = \"FILE\", required_if(\"out-type\", \"file\"))]\n  file_name: Option<String>,\n}\nfn main() {\n  let opt = Opt::from_args();\n  println!(\"{:?}\", opt);\n}\n```\n\nSo `derive(StructOpt)` tells Rust to generate a command line parser, and the various `structopt` attributes are simply used for additional parameters.\nFirst, define a struct, whatever its name. This structure corresponds to a `clap::App`, its fields correspond to `clap::Arg` (unless they\u2019re subcommands\u27e818\u27e9), and you can adjust these apps and args by `#[structopt(...)]` attributes\u27e89\u27e9.\n**Note:**\nKeep in mind that `StructOpt` trait is more than just `from_args` method. It has a number of additional features, including access to underlying `clap::App` via `StructOpt::clap()`. See the trait\u2019s reference documentation\u27e825\u27e9.\n### \u00a7\u27e89\u27e9Attributes\nYou can control the way `structopt` translates your struct into an actual `clap::App`\u27e826\u27e9 invocation via `#[structopt(...)]` attributes.\nThe attributes fall into two categories:\n  * `structopt`\u2019s own magical methods\u27e811\u27e9.\nThey are used by `structopt` itself. They come mostly in `attr = [\"whatever\"]` form, but some `attr(args...)` also exist.\n  * `raw` attributes\u27e810\u27e9.\nThey represent explicit `clap::Arg/App` method calls. They are what used to be explicit `#[structopt(raw(...))]` attrs in pre-0.3 `structopt`\n\n\nEvery `structopt attribute` looks like comma-separated sequence of methods:\n```\n#[structopt(\n  short, // method with no arguments - always magical\n  long = \"--long-option\", // method with one argument\n  required_if(\"out\", \"file\"), // method with one and more args\n  parse(from_os_str = path::to::parser) // some magical methods have their own syntax\n)]\n```\n\n`#[structopt(...)]` attributes can be placed on top of `struct`, `enum`, `struct` field or `enum` variant. Attributes on top of `struct` or `enum` represent `clap::App` method calls, field or variant attributes correspond to `clap::Arg` method calls.\nIn other words, the `Opt` struct from the example above will be turned into this (_details omitted_):\n```\nApp::new(\"example\")\n  .version(\"0.2.0\")\n  .about(\"An example of StructOpt usage.\")\n.arg(Arg::with_name(\"debug\")\n  .help(\"Activate debug mode\")\n  .short(\"debug\")\n  .long(\"debug\"))\n.arg(Arg::with_name(\"speed\")\n  .help(\"Set speed\")\n  .short(\"v\")\n  .long(\"velocity\")\n  .default_value(\"42\"))\n// and so on\n```\n\n### \u00a7\u27e810\u27e9Raw methods\nThey are the reason why `structopt` is so flexible. **Every and each method from`clap::App/Arg` can be used this way!** See the `clap::App` methods\u27e827\u27e9 and `clap::Arg` methods\u27e828\u27e9.\n```\n#[structopt(\n  global = true, // name = arg form, neat for one-arg methods\n  required_if(\"out\", \"file\") // name(arg1, arg2, ...) form.\n)]\n```\n\nThe first form can only be used for methods which take only one argument. The second form must be used with multi-arg methods, but can also be used with single-arg methods. These forms are identical otherwise.\nAs long as `method_name` is not one of the magical methods - it will be translated into a mere method call.\n**Note:**\n\u201cRaw methods\u201d are direct replacement for pre-0.3 structopt\u2019s `#[structopt(raw(...))]` attributes, any time you would have used a `raw()` attribute in 0.2 you should use raw method in 0.3.\nUnfortunately, old raw attributes collide with `clap::Arg::raw` method. To explicitly warn users of this change we allow `#[structopt(raw())]` only with `true` or `false` literals (this method is supposed to be called only with `true` anyway).\n### \u00a7\u27e811\u27e9Magical methods\nThey are the reason why `structopt` is so easy to use and convenient in most cases. Many of them have defaults, some of them get used even if not mentioned.\nMethods may be used on \u201ctop level\u201d (on top of a `struct`, `enum` or `enum` variant) and/or on \u201cfield-level\u201d (on top of a `struct` field or _inside_ of an enum variant). Top level (non-magical) methods correspond to `App::method` calls, field-level methods are `Arg::method` calls.\n\u24d8\u27e829\u27e9```\n#[structopt(top_level)]\nstruct Foo {\n  #[structopt(field_level)]\n  field: u32\n}\n#[structopt(top_level)]\nenum Bar {\n  #[structopt(top_level)]\n  Pineapple {\n    #[structopt(field_level)]\n    chocolate: String\n  },\n  #[structopt(top_level)]\n  Orange,\n}\n```\n\n  * `name`: `[name = expr]`\n    * On top level: `App::new(expr)`.\nThe binary name displayed in help messages. Defaults to the crate name given by Cargo.\n    * On field-level: `Arg::with_name(expr)`.\nThe name for the argument the field stands for, this name appears in help messages. Defaults to a name, deduced from a field, see also `rename_all`\u27e813\u27e9.\n  * `version`: `[version = \"version\"]`\nUsable only on top level: `App::version(\"version\" or env!(CARGO_PKG_VERSION))`.\nThe version displayed in help messages. Defaults to the crate version given by Cargo. If `CARGO_PKG_VERSION` is not set no `.version()` calls will be generated unless requested.\n  * `no_version`: `no_version`\nUsable only on top level. Prevents default `App::version` call, i.e when no `version = \"version\"` mentioned.\n  * `author`: `author [= \"author\"]`\nUsable only on top level: `App::author(\"author\" or env!(CARGO_PKG_AUTHORS))`.\nAuthor/maintainer of the binary, this name appears in help messages. Defaults to the crate author given by cargo, but only when `author` explicitly mentioned.\n  * `about`: `about [= \"about\"]`\nUsable only on top level: `App::about(\"about\" or env!(CARGO_PKG_DESCRIPTION))`.\nShort description of the binary, appears in help messages. Defaults to the crate description given by cargo, but only when `about` explicitly mentioned.\n  * `short`\u27e813\u27e9: `short [= \"short-opt-name\"]`\nUsable only on field-level.\n  * `long`\u27e813\u27e9: `long [= \"long-opt-name\"]`\nUsable only on field-level.\n  * `default_value`\u27e814\u27e9: `default_value [= \"default value\"]`\nUsable only on field-level.\n  * `rename_all`\u27e813\u27e9: [`rename_all = \"kebab\"/\"snake\"/\"screaming-snake\"/\"camel\"/\"pascal\"/\"verbatim\"/\"lower\"/\"upper\"]`\nUsable both on top level and field level.\n  * `parse`\u27e823\u27e9: `parse(type [= path::to::parser::fn])`\nUsable only on field-level.\n  * `skip`\u27e817\u27e9: `skip [= expr]`\nUsable only on field-level.\n  * `flatten`\u27e822\u27e9: `flatten`\nUsable on field-level or single-typed tuple variants.\n  * `subcommand`\u27e818\u27e9: `subcommand`\nUsable only on field-level.\n  * `external_subcommand`\u27e820\u27e9\nUsable only on enum variants.\n  * `env`\u27e816\u27e9: `env [= str_literal]`\nUsable only on field-level.\n  * `rename_all_env`\u27e830\u27e9: [`rename_all_env = \"kebab\"/\"snake\"/\"screaming-snake\"/\"camel\"/\"pascal\"/\"verbatim\"/\"lower\"/\"upper\"]`\nUsable both on top level and field level.\n  * `verbatim_doc_comment`\u27e831\u27e9: `verbatim_doc_comment`\nUsable both on top level and field level.\n\n\n### \u00a7\u27e812\u27e9Type magic\nOne of major things that makes `structopt` so awesome is its type magic. Do you want optional positional argument? Use `Option<T>`! Or perhaps optional argument that optionally takes value (`[--opt=[val]]`)? Use `Option<Option<T>>`!\nHere is the table of types and `clap` methods they correspond to:\nType| Effect| Added method call to `clap::Arg`  \n---|---|---  \n`bool`| `true` if the flag is present| `.takes_value(false).multiple(false)`  \n`Option<T: FromStr>`| optional positional argument or option| `.takes_value(true).multiple(false)`  \n`Option<Option<T: FromStr>>`| optional option with optional value| `.takes_value(true).multiple(false).min_values(0).max_values(1)`  \n`Vec<T: FromStr>`| list of options or the other positional arguments| `.takes_value(true).multiple(true)`  \n`Option<Vec<T: FromStr>`| optional list of options| `.takes_values(true).multiple(true).min_values(0)`  \n`T: FromStr`| required option or positional argument| `.takes_value(true).multiple(false).required(!has_default)`  \nThe `FromStr` trait is used to convert the argument to the given type, and the `Arg::validator` method is set to a method using `to_string()` (`FromStr::Err` must implement `std::fmt::Display`). If you would like to use a custom string parser other than `FromStr`, see the same titled section\u27e823\u27e9 below.\n**Important:**\nPay attention that _only literal occurrence_ of this types is special, for example `Option<T>` is special while `::std::option::Option<T>` is not.\nIf you need to avoid special casing you can make a `type` alias and use it in place of the said type.\n**Note:**\n`bool` cannot be used as positional argument unless you provide an explicit parser. If you need a positional bool, for example to parse `true` or `false`, you must annotate the field with explicit [`#[structopt(parse(...))]`](https://docs.rs/structopt/latest/structopt/#custom-string-parsers).\nThus, the `speed` argument is generated as:\n```\nclap::Arg::with_name(\"speed\")\n  .takes_value(true)\n  .multiple(false)\n  .required(false)\n  .validator(parse_validator::<f64>)\n  .short(\"v\")\n  .long(\"velocity\")\n  .help(\"Set speed\")\n  .default_value(\"42\");\n```\n\n### \u00a7\u27e813\u27e9Specifying argument types\nThere are three types of arguments that can be supplied to each (sub-)command:\n  * short (e.g. `-h`),\n  * long (e.g. `--help`)\n  * and positional.\n\n\nLike clap, structopt defaults to creating positional arguments.\nIf you want to generate a long argument you can specify either `long = $NAME`, or just `long` to get a long flag generated using the field name. The generated casing style can be modified using the `rename_all` attribute. See the `rename_all` example for more.\nFor short arguments, `short` will use the first letter of the field name by default, but just like the long option it\u2019s also possible to use a custom letter through `short = $LETTER`.\nIf an argument is renamed using `name = $NAME` any following call to `short` or `long` will use the new name.\n**Attention** : If these arguments are used without an explicit name the resulting flag is going to be renamed using `kebab-case` if the `rename_all` attribute was not specified previously. The same is true for subcommands with implicit naming through the related data structure.\n```\nuse structopt::StructOpt;\n#[derive(StructOpt)]\n#[structopt(rename_all = \"kebab-case\")]\nstruct Opt {\n  /// This option can be specified with something like `--foo-option\n  /// value` or `--foo-option=value`\n  #[structopt(long)]\n  foo_option: String,\n  /// This option can be specified with something like `-b value` (but\n  /// not `--bar-option value`).\n  #[structopt(short)]\n  bar_option: String,\n  /// This option can be specified either `--baz value` or `-z value`.\n  #[structopt(short = \"z\", long = \"baz\")]\n  baz_option: String,\n  /// This option can be specified either by `--custom value` or\n  /// `-c value`.\n  #[structopt(name = \"custom\", long, short)]\n  custom_option: String,\n  /// This option is positional, meaning it is the first unadorned string\n  /// you provide (multiple others could follow).\n  my_positional: String,\n  /// This option is skipped and will be filled with the default value\n  /// for its type (in this case 0).\n  #[structopt(skip)]\n  skipped: u32,\n}\n\n```\n\n### \u00a7\u27e814\u27e9Default values\nIn clap, default values for options can be specified via `Arg::default_value`\u27e832\u27e9.\nOf course, you can use as a raw method:\n```\n#[derive(StructOpt)]\nstruct Opt {\n  #[structopt(default_value = \"\", long)]\n  prefix: String,\n}\n```\n\nThis is quite mundane and error-prone to type the `\"...\"` default by yourself, especially when the Rust ecosystem uses the `Default`\u27e833\u27e9 trait for that. It would be wonderful to have `structopt` to take the `Default_default` and fill it for you. And yes, `structopt` can do that.\nUnfortunately, `default_value` takes `&str` but `Default::default` gives us some `Self` value. We need to map `Self` to `&str` somehow.\n`structopt` solves this problem via `ToString`\u27e834\u27e9 trait.\nTo be able to use auto-default the type must implement _both_ `Default` and `ToString`:\n```\n#[derive(StructOpt)]\nstruct Opt {\n  // just leave the `= \"...\"` part and structopt will figure it for you\n  #[structopt(default_value, long)]\n  prefix: String, // `String` implements both `Default` and `ToString`\n}\n```\n\n### \u00a7\u27e815\u27e9Help messages\nIn clap, help messages for the whole binary can be specified via `App::about`\u27e835\u27e9 and `App::long_about`\u27e836\u27e9 while help messages for individual arguments can be specified via `Arg::help`\u27e837\u27e9 and `Arg::long_help`\u27e838\u27e9\u201c.\n`long_*` variants are used when user calls the program with `--help` and \u201cshort\u201d variants are used with `-h` flag. In `structopt`, you can use them via raw methods\u27e810\u27e9, for example:\n```\n\n#[derive(StructOpt)]\n#[structopt(about = \"I am a program and I work, just pass `-h`\")]\nstruct Foo {\n  #[structopt(short, help = \"Pass `-h` and you'll see me!\")]\n  bar: String,\n}\n```\n\nFor convenience, doc comments can be used instead of raw methods (this example works exactly like the one above):\n```\n\n#[derive(StructOpt)]\n/// I am a program and I work, just pass `-h`\nstruct Foo {\n  /// Pass `-h` and you'll see me!\n  bar: String,\n}\n```\n\nDoc comments on top-level\u27e811\u27e9 will be turned into `App::about/long_about` call (see below), doc comments on field-level are `Arg::help/long_help` calls.\n**Important:**\nRaw methods have priority over doc comments!\n**Top level doc comments always generate`App::about/long_about` calls!** If you really want to use the `App::help/long_help` methods (you likely don\u2019t), use a raw method to override the `App::about` call generated from the doc comment.\n#### \u00a7\u27e839\u27e9`long_help` and `--help`\nA message passed to `App::long_about`\u27e836\u27e9 or `Arg::long_help`\u27e838\u27e9 will be displayed whenever your program is called with `--help` instead of `-h`. Of course, you can use them via raw methods as described above\u27e815\u27e9.\nThe more convenient way is to use a so-called \u201clong\u201d doc comment:\n```\n#[derive(StructOpt)]\n/// Hi there, I'm Robo!\n///\n/// I like beeping, stumbling, eating your electricity,\n/// and making records of you singing in a shower.\n/// Pay up, or I'll upload it to youtube!\nstruct Robo {\n  /// Call my brother SkyNet.\n  ///\n  /// I am artificial superintelligence. I won't rest\n  /// until I'll have destroyed humanity. Enjoy your\n  /// pathetic existence, you mere mortals.\n  #[structopt(long)]\n  kill_all_humans: bool,\n}\n```\n\nA long doc comment consists of three parts:\n  * Short summary\n  * A blank line (whitespace only)\n  * Detailed description, all the rest\n\n\nIn other words, \u201clong\u201d doc comment consists of two or more paragraphs, with the first being a summary and the rest being the detailed description.\n**A long comment will result in two method calls** , `help(<summary>)` and `long_help(<whole comment>)`, so clap will display the summary with `-h` and the whole help message on `--help` (see below).\nSo, the example above will be turned into this (details omitted):\n```\nclap::App::new(\"<name>\")\n  .about(\"Hi there, I'm Robo!\")\n  .long_about(\"Hi there, I'm Robo!\\n\\n\\\n         I like beeping, stumbling, eating your electricity,\\\n         and making records of you singing in a shower.\\\n         Pay up or I'll upload it to youtube!\")\n// args...\n```\n\n#### \u00a7\u27e840\u27e9`-h` vs `--help` (A.K.A `help()` vs `long_help()`)\nThe `-h` flag is not the same as `--help`.\n-h corresponds to `Arg::help/App::about` and requests short \u201csummary\u201d messages while \u2013help corresponds to `Arg::long_help/App::long_about` and requests more detailed, descriptive messages.\nIt is entirely up to `clap` what happens if you used only one of `Arg::help`\u27e837\u27e9/`Arg::long_help`\u27e838\u27e9, see `clap`\u2019s documentation for these methods.\nAs of clap v2.33, if only a short message (`Arg::help`\u27e837\u27e9) or only a long (`Arg::long_help`\u27e838\u27e9) message is provided, clap will use it for both -h and \u2013help. The same logic applies to `about/long_about`.\n#### \u00a7\u27e831\u27e9Doc comment preprocessing and `#[structopt(verbatim_doc_comment)]`\n`structopt` applies some preprocessing to doc comments to ease the most common uses:\n  * Strip leading and trailing whitespace from every line, if present.\n  * Strip leading and trailing blank lines, if present.\n  * Interpret each group of non-empty lines as a word-wrapped paragraph.\nWe replace newlines within paragraphs with spaces to allow the output to be re-wrapped to the terminal width.\n  * Strip any excess blank lines so that there is exactly one per paragraph break.\n  * If the first paragraph ends in exactly one period, remove the trailing period (i.e. strip trailing periods but not trailing ellipses).\n\n\nSometimes you don\u2019t want this preprocessing to apply, for example the comment contains some ASCII art or markdown tables, you would need to preserve LFs along with blank lines and the leading/trailing whitespace. You can ask `structopt` to preserve them via `#[structopt(verbatim_doc_comment)]` attribute.\n**This attribute must be applied to each field separately** , there\u2019s no global switch.\n**Important:**\nKeep in mind that `structopt` will _still_ remove one leading space from each line, even if this attribute is present, to allow for a space between `///` and the content.\nAlso, `structopt` will _still_ remove leading and trailing blank lines so these formats are equivalent:\n```\n/** This is a doc comment\nHello! */\n/**\nThis is a doc comment\nHello!\n*/\n/// This is a doc comment\n///\n/// Hello!\n```\n\n### \u00a7\u27e816\u27e9Environment variable fallback\nIt is possible to specify an environment variable fallback option for an arguments so that its value is taken from the specified environment variable if not given through the command-line:\n```\n\n#[derive(StructOpt)]\nstruct Foo {\n  #[structopt(short, long, env = \"PARAMETER_VALUE\")]\n  parameter_value: String,\n}\n```\n\nBy default, values from the environment are shown in the help output (i.e. when invoking `--help`):\n```\n$ cargo run -- --help\n...\nOPTIONS:\n -p, --parameter-value <parameter-value>   [env: PARAMETER_VALUE=env_value]\n```\n\nIn some cases this may be undesirable, for example when being used for passing credentials or secret tokens. In those cases you can use `hide_env_values` to avoid having structopt emit the actual secret values:\n```\n\n#[derive(StructOpt)]\nstruct Foo {\n  #[structopt(long = \"secret\", env = \"SECRET_VALUE\", hide_env_values = true)]\n  secret_value: String,\n}\n```\n\n#### \u00a7\u27e830\u27e9Auto-deriving environment variables\nEnvironment variables tend to be called after the corresponding `struct`\u2019s field, as in example above. The field is `secret_value` and the env var is \u201cSECRET_VALUE\u201d; the name is the same, except casing is different.\nIt\u2019s pretty tedious and error-prone to type the same name twice, so you can ask `structopt` to do that for you.\n```\n\n#[derive(StructOpt)]\nstruct Foo {\n  #[structopt(long = \"secret\", env)]\n  secret_value: String,\n}\n```\n\nIt works just like `#[structopt(short/long)]`: if `env` is not set to some concrete value the value will be derived from the field\u2019s name. This is controlled by `#[structopt(rename_all_env)]`.\n`rename_all_env` works exactly as `rename_all` (including overriding) except default casing is `SCREAMING_SNAKE_CASE` instead of `kebab-case`.\n### \u00a7\u27e817\u27e9Skipping fields\nSometimes you may want to add a field to your `Opt` struct that is not a command line option and `clap` should know nothing about it. You can ask `structopt` to skip the field entirely via `#[structopt(skip = value)]` (`value` must implement `Into<FieldType>`) or `#[structopt(skip)]` if you want assign the field with `Default::default()` (obviously, the field\u2019s type must implement `Default`).\n```\n#[derive(StructOpt)]\npub struct Opt {\n  #[structopt(long, short)]\n  number: u32,\n  // these fields are to be assigned with Default::default()\n  #[structopt(skip)]\n  k: String,\n  #[structopt(skip)]\n  v: Vec<u32>,\n  // these fields get set explicitly\n  #[structopt(skip = vec![1, 2, 3])]\n  k2: Vec<u32>,\n  #[structopt(skip = \"cake\")] // &str implements Into<String>\n  v2: String,\n}\n```\n\n### \u00a7\u27e818\u27e9Subcommands\nSome applications, especially large ones, split their functionality through the use of \u201csubcommands\u201d. Each of these act somewhat like a separate command, but is part of the larger group. One example is `git`, which has subcommands such as `add`, `commit`, and `clone`, to mention just a few.\n`clap` has this functionality, and `structopt` supports it through enums:\n```\n\n#[derive(StructOpt)]\n#[structopt(about = \"the stupid content tracker\")]\nenum Git {\n  Add {\n    #[structopt(short)]\n    interactive: bool,\n    #[structopt(short)]\n    patch: bool,\n    #[structopt(parse(from_os_str))]\n    files: Vec<PathBuf>,\n  },\n  Fetch {\n    #[structopt(long)]\n    dry_run: bool,\n    #[structopt(long)]\n    all: bool,\n    repository: Option<String>,\n  },\n  Commit {\n    #[structopt(short)]\n    message: Option<String>,\n    #[structopt(short)]\n    all: bool,\n  },\n}\n```\n\nUsing `derive(StructOpt)` on an enum instead of a struct will produce a `clap::App` that only takes subcommands. So `git add`, `git fetch`, and `git commit` would be commands allowed for the above example.\n`structopt` also provides support for applications where certain flags need to apply to all subcommands, as well as nested subcommands:\n```\n#[derive(StructOpt)]\nstruct MakeCookie {\n  #[structopt(name = \"supervisor\", default_value = \"Puck\", long = \"supervisor\")]\n  supervising_faerie: String,\n  /// The faerie tree this cookie is being made in.\n  tree: Option<String>,\n  #[structopt(subcommand)] // Note that we mark a field as a subcommand\n  cmd: Command,\n}\n#[derive(StructOpt)]\nenum Command {\n  /// Pound acorns into flour for cookie dough.\n  Pound {\n    acorns: u32,\n  },\n  /// Add magical sparkles -- the secret ingredient!\n  Sparkle {\n    #[structopt(short, parse(from_occurrences))]\n    magicality: u64,\n    #[structopt(short)]\n    color: String,\n  },\n  Finish(Finish),\n}\n// Subcommand can also be externalized by using a 1-uple enum variant\n#[derive(StructOpt)]\nstruct Finish {\n  #[structopt(short)]\n  time: u32,\n  #[structopt(subcommand)] // Note that we mark a field as a subcommand\n  finish_type: FinishType,\n}\n// subsubcommand!\n#[derive(StructOpt)]\nenum FinishType {\n  Glaze {\n    applications: u32,\n  },\n  Powder {\n    flavor: String,\n    dips: u32,\n  }\n}\n```\n\nMarking a field with `structopt(subcommand)` will add the subcommands of the designated enum to the current `clap::App`. The designated enum _must_ also be derived `StructOpt`. So the above example would take the following commands:\n  * `make-cookie pound 50`\n  * `make-cookie sparkle -mmm --color \"green\"`\n  * `make-cookie finish 130 glaze 3`\n\n\n#### \u00a7\u27e819\u27e9Optional subcommands\nSubcommands may be optional:\n```\n#[derive(StructOpt)]\nstruct Foo {\n  file: String,\n  #[structopt(subcommand)]\n  cmd: Option<Command>,\n}\n#[derive(StructOpt)]\nenum Command {\n  Bar,\n  Baz,\n  Quux,\n}\n```\n\n#### \u00a7\u27e820\u27e9External subcommands\nSometimes you want to support not only the set of well-known subcommands but you also want to allow other, user-driven subcommands. `clap` supports this via `AppSettings::AllowExternalSubcommands`\u27e841\u27e9.\n`structopt` provides it\u2019s own dedicated syntax for that:\n```\n#[derive(Debug, PartialEq, StructOpt)]\nstruct Opt {\n  #[structopt(subcommand)]\n  sub: Subcommands,\n}\n#[derive(Debug, PartialEq, StructOpt)]\nenum Subcommands {\n  // normal subcommand\n  Add,\n  // `external_subcommand` tells structopt to put\n  // all the extra arguments into this Vec\n  #[structopt(external_subcommand)]\n  Other(Vec<String>),\n}\n// normal subcommand\nassert_eq!(\n  Opt::from_iter(&[\"test\", \"add\"]),\n  Opt {\n    sub: Subcommands::Add\n  }\n);\nassert_eq!(\n  Opt::from_iter(&[\"test\", \"git\", \"status\"]),\n  Opt {\n    sub: Subcommands::Other(vec![\"git\".into(), \"status\".into()])\n  }\n);\n// Please note that if you'd wanted to allow \"no subcommands at all\" case\n// you should have used `sub: Option<Subcommands>` above\nassert!(Opt::from_iter_safe(&[\"test\"]).is_err());\n```\n\nIn other words, you just add an extra tuple variant marked with `#[structopt(subcommand)]`, and its type must be either `Vec<String>` or `Vec<OsString>`. `structopt` will detect `String` in this context and use appropriate `clap` API.\n#### \u00a7\u27e821\u27e9Flattening subcommands\nIt is also possible to combine multiple enums of subcommands into one. All the subcommands will be on the same level.\n```\n#[derive(StructOpt)]\nenum BaseCli {\n  Ghost10 {\n    arg1: i32,\n  }\n}\n#[derive(StructOpt)]\nenum Opt {\n  #[structopt(flatten)]\n  BaseCli(BaseCli),\n  Dex {\n    arg2: i32,\n  },\n}\n```\n\n```\ncli ghost10 42\ncli dex 42\n```\n\n### \u00a7\u27e822\u27e9Flattening\nIt can sometimes be useful to group related arguments in a substruct, while keeping the command-line interface flat. In these cases you can mark a field as `flatten` and give it another type that derives `StructOpt`:\n```\n#[derive(StructOpt)]\nstruct Cmdline {\n  /// switch on verbosity\n  #[structopt(short)]\n  verbose: bool,\n  #[structopt(flatten)]\n  daemon_opts: DaemonOpts,\n}\n#[derive(StructOpt)]\nstruct DaemonOpts {\n  /// daemon user\n  #[structopt(short)]\n  user: String,\n  /// daemon group\n  #[structopt(short)]\n  group: String,\n}\n```\n\nIn this example, the derived `Cmdline` parser will support the options `-v`, `-u` and `-g`.\nThis feature also makes it possible to define a `StructOpt` struct in a library, parse the corresponding arguments in the main argument parser, and pass off this struct to a handler provided by that library.\n### \u00a7\u27e823\u27e9Custom string parsers\nIf the field type does not have a `FromStr` implementation, or you would like to provide a custom parsing scheme other than `FromStr`, you may provide a custom string parser using `parse(...)` like this:\n```\nuse std::num::ParseIntError;\nuse std::path::PathBuf;\nfn parse_hex(src: &str) -> Result<u32, ParseIntError> {\n  u32::from_str_radix(src, 16)\n}\n#[derive(StructOpt)]\nstruct HexReader {\n  #[structopt(short, parse(try_from_str = parse_hex))]\n  number: u32,\n  #[structopt(short, parse(from_os_str))]\n  output: PathBuf,\n}\n```\n\nThere are five kinds of custom parsers:\nKind| Signature| Default  \n---|---|---  \n`from_str`| `fn(&str) -> T`| `::std::convert::From::from`  \n`try_from_str`| `fn(&str) -> Result<T, E>`| `::std::str::FromStr::from_str`  \n`from_os_str`| `fn(&OsStr) -> T`| `::std::convert::From::from`  \n`try_from_os_str`| `fn(&OsStr) -> Result<T, OsString>`| (no default function)  \n`from_occurrences`| `fn(u64) -> T`| `value as T`  \n`from_flag`| `fn(bool) -> T`| `::std::convert::From::from`  \nThe `from_occurrences` parser is special. Using `parse(from_occurrences)` results in the _number of flags occurrences_ being stored in the relevant field or being passed to the supplied function. In other words, it converts something like `-vvv` to `3`. This is equivalent to `.takes_value(false).multiple(true)`. Note that the default parser can only be used with fields of integer types (`u8`, `usize`, `i64`, etc.).\nThe `from_flag` parser is also special. Using `parse(from_flag)` or `parse(from_flag = some_func)` will result in the field being treated as a flag even if it does not have type `bool`.\nWhen supplying a custom string parser, `bool` will not be treated specially:\nType| Effect| Added method call to `clap::Arg`  \n---|---|---  \n`Option<T>`| optional argument| `.takes_value(true).multiple(false)`  \n`Vec<T>`| list of arguments| `.takes_value(true).multiple(true)`  \n`T`| required argument| `.takes_value(true).multiple(false).required(!has_default)`  \nIn the `try_from_*` variants, the function will run twice on valid input: once to validate, and once to parse. Hence, make sure the function is side-effect-free.\n### \u00a7\u27e824\u27e9Generics\nGeneric structs and enums can be used. They require explicit trait bounds on any generic types that will be used by the `StructOpt` derive macro. In some cases, associated types will require additional bounds. See the usage of `FromStr` below for an example of this.\n```\nuse std::{fmt, str::FromStr};\n// a struct with single custom argument\n#[derive(StructOpt)]\nstruct GenericArgs<T: FromStr> where <T as FromStr>::Err: fmt::Display + fmt::Debug {\n  generic_arg_1: String,\n  generic_arg_2: String,\n  custom_arg_1: T,\n}\n```\n\nor\n```\n// a struct with multiple custom arguments in a substructure\n#[derive(StructOpt)]\nstruct GenericArgs<T: StructOpt> {\n  generic_arg_1: String,\n  generic_arg_2: String,\n  #[structopt(flatten)]\n  custom_args: T,\n}\n```\n\n## Re-exports\u00a7\u27e842\u27e9\n\n`pub use clap[](https://docs.rs/clap/2.33.3/x86_64-unknown-linux-gnu/clap/index.html \"mod clap\");`\n\n## Traits\u00a7\u27e843\u27e9\n\nStructOpt\u27e825\u27e9\n    A struct that is converted from command line arguments.\n",
            "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://docs.rs/structopt/latest/settings.html: Settings\n\u27e82\u27e9 https://docs.rs/structopt/latest/help.html: Help\n\u27e83\u27e9 https://docs.rs/structopt/latest/src/structopt/lib.rs.html#9-1238: Source\n\u27e84\u27e9 https://docs.rs/structopt/latest/structopt/#maintenance: \u00a7\n\u27e85\u27e9 https://docs.rs/structopt/latest/structopt/#features: \u00a7\n\u27e86\u27e9 https://github.com/rust-cli/paw: `paw`\n\u27e87\u27e9 https://docs.rs/structopt/latest/structopt/#table-of-contents: \u00a7\n\u27e88\u27e9 https://docs.rs/structopt/latest/structopt/#how-to-derivestructopt: How to `derive(StructOpt)`\n\u27e89\u27e9 https://docs.rs/structopt/latest/structopt/#attributes: Attributes\n\u27e810\u27e9 https://docs.rs/structopt/latest/structopt/#raw-methods: Raw methods\n\u27e811\u27e9 https://docs.rs/structopt/latest/structopt/#magical-methods: Magical methods\n\u27e812\u27e9 https://docs.rs/structopt/latest/structopt/#type-magic: Type magic\n\u27e813\u27e9 https://docs.rs/structopt/latest/structopt/#specifying-argument-types: Specifying argument types\n\u27e814\u27e9 https://docs.rs/structopt/latest/structopt/#default-values: Default values\n\u27e815\u27e9 https://docs.rs/structopt/latest/structopt/#help-messages: Help messages\n\u27e816\u27e9 https://docs.rs/structopt/latest/structopt/#environment-variable-fallback: Environment variable fallback\n\u27e817\u27e9 https://docs.rs/structopt/latest/structopt/#skipping-fields: Skipping fields\n\u27e818\u27e9 https://docs.rs/structopt/latest/structopt/#subcommands: Subcommands\n\u27e819\u27e9 https://docs.rs/structopt/latest/structopt/#optional-subcommands: Optional subcommands\n\u27e820\u27e9 https://docs.rs/structopt/latest/structopt/#external-subcommands: External subcommands\n\u27e821\u27e9 https://docs.rs/structopt/latest/structopt/#flattening-subcommands: Flattening subcommands\n\u27e822\u27e9 https://docs.rs/structopt/latest/structopt/#flattening: Flattening\n\u27e823\u27e9 https://docs.rs/structopt/latest/structopt/#custom-string-parsers: Custom string parsers\n\u27e824\u27e9 https://docs.rs/structopt/latest/structopt/#generics: Generics\n\u27e825\u27e9 https://docs.rs/structopt/latest/structopt/trait.StructOpt.html: trait\u2019s reference documentation\n\u27e826\u27e9 https://docs.rs/clap/2.33.3/x86_64-unknown-linux-gnu/clap/app/struct.App.html: struct clap::app::App - `clap::App`\n\u27e827\u27e9 https://docs.rs/clap/2/clap/struct.App.html: `clap::App` methods\n\u27e828\u27e9 https://docs.rs/clap/2/clap/struct.Arg.html: `clap::Arg` methods\n\u27e829\u27e9 https://docs.rs/structopt/latest/structopt/: This example is not tested - \u24d8\n\u27e830\u27e9 https://docs.rs/structopt/latest/structopt/#auto-deriving-environment-variables: `rename_all_env`\n\u27e831\u27e9 https://docs.rs/structopt/latest/structopt/#doc-comment-preprocessing-and-structoptverbatim_doc_comment: `verbatim_doc_comment`\n\u27e832\u27e9 https://docs.rs/clap/2.33.0/clap/struct.Arg.html#method.default_value: `Arg::default_value`\n\u27e833\u27e9 https://doc.rust-lang.org/std/default/trait.Default.html: `Default`\n\u27e834\u27e9 https://doc.rust-lang.org/std/string/trait.ToString.html: `ToString`\n\u27e835\u27e9 https://docs.rs/clap/2/clap/struct.App.html#method.about: `App::about`\n\u27e836\u27e9 https://docs.rs/clap/2/clap/struct.App.html#method.long_about: `App::long_about`\n\u27e837\u27e9 https://docs.rs/clap/2/clap/struct.Arg.html#method.help: `Arg::help`\n\u27e838\u27e9 https://docs.rs/clap/2/clap/struct.Arg.html#method.long_help: `Arg::long_help`\n\u27e839\u27e9 https://docs.rs/structopt/latest/structopt/#long_help-and---help: \u00a7\n\u27e840\u27e9 https://docs.rs/structopt/latest/structopt/#-h-vs---help-aka-help-vs-long_help: \u00a7\n\u27e841\u27e9 https://docs.rs/clap/2.32.0/clap/enum.AppSettings.html#variant.AllowExternalSubcommands: `AppSettings::AllowExternalSubcommands`\n\u27e842\u27e9 https://docs.rs/structopt/latest/structopt/#reexports: \u00a7\n\u27e843\u27e9 https://docs.rs/structopt/latest/structopt/#traits: \u00a7\n",
            "fit_markdown": "",
            "fit_html": ""
          },
          "downloads": 0,
          "github_stars": 0,
          "dependencies": [],
          "features": {},
          "code_snippets": [],
          "readme_sections": {},
          "librs_downloads": null,
          "source": "crates.io",
          "enhanced_scraping": {},
          "enhanced_features": [],
          "enhanced_dependencies": [],
          "readme_summary": "The `structopt` crate simplifies command-line argument parsing in Rust by deriving a parser directly from struct definitions using the `StructOpt` trait and attributes. It integrates tightly with `clap`, allowing customization of arguments, subcommands, default values, and environment variable fallbacks. While in maintenance mode, it remains feature-rich, supporting advanced configurations like custom parsers, generics, and external subcommands.",
          "feature_summary": null,
          "use_case": "Utilities",
          "score": 6.0,
          "factual_counterfactual": "### Pair 1: Command Line Parsing with `derive(StructOpt)`\n\u2705 **Factual:** The `structopt` crate allows users to derive the `StructOpt` trait to automatically generate a command-line parser based on a struct's fields and attributes.  \n\u274c **Counterfactual:** The `structopt` crate requires manual implementation of the `StructOpt` trait for each struct, as it does not support automatic derivation.\n\n---\n\n### Pair 2: Maintenance Status\n\u2705 **Factual:** The `structopt` crate is in maintenance mode, as its features have been integrated into `clap` v3, meaning no new features will be added, but bug fixes and documentation updates will still be accepted.  \n\u274c **Counterfactual:** The `structopt` crate is actively developed with plans to introduce new features and enhancements that extend beyond its current functionality.\n\n---\n\n### Pair 3: Feature Flags\n\u2705 **Factual:** Users can disable all `clap` features in `structopt` by setting `default-features = false` in the dependency configuration, which disables features like colors and suggestions.  \n\u274c **Counterfactual:** Disabling `default-features = false` in the dependency configuration removes support for the `paw` feature, making it impossible to enable `paw`.",
          "source_analysis": null,
          "user_behavior": null,
          "security": null
        }
      },
      "irl_score": 8.6,
      "execution_id": "exec-9742b013-d18a297e-1751259932",
      "timestamp": "2025-06-30T05:05:32.850752+00:00",
      "canon_version": "1.3.0"
    },
    "rule_zero_compliant": true
  }
]