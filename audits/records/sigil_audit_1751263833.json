[
  {
    "execution_id": "exec-20833d31-4f0e98c3-1751263823",
    "timestamp": "2025-06-30T06:10:23.647278+00:00",
    "sacred_chain": {
      "input_data": "proc-macro2",
      "context_sources": [
        "crates.io",
        "github.com",
        "lib.rs",
        "docs.rs"
      ],
      "reasoning_steps": [
        "Input canonicalized: 'proc-macro2' -> 'proc-macro2'",
        "Context gathered from 4 validated sources",
        "Metadata extracted: 4 fields",
        "Documentation analyzed: quality 7.0",
        "Sentiment analyzed: positive",
        "Ecosystem analyzed: utilities",
        "Quality score synthesized: 7.50",
        "Trust decision: DEFER - Insufficient data for decision",
        "IRL confidence: 8.600"
      ],
      "suggestion": "ALLOW: Positive community sentiment",
      "verdict": "DEFER",
      "audit_info": {
        "metadata": {
          "name": "proc-macro2",
          "type": "rust_crate",
          "source": "manual_input",
          "extraction_method": "irl_engine"
        },
        "sentiment": {
          "quality_score": 7.0,
          "completeness": 0.8,
          "examples_present": true,
          "api_documented": true
        },
        "ecosystem": {
          "overall": "positive",
          "positive_mentions": 10,
          "negative_mentions": 2,
          "neutral_mentions": 5,
          "total_mentions": 17
        },
        "quality_score": 7.5,
        "verdict_reason": "Insufficient data for decision",
        "sanitized_documentation": {
          "crates_io": {
            "url": "https://crates.io/crates/proc-macro2",
            "title": "proc-macro2 v1.0.95",
            "content": {
              "raw_markdown": "#  proc-macro2 v1.0.95\nA substitute implementation of the compiler's `proc_macro` API to decouple token-based libraries from the procedural macro use case. \n  * [ #macros ](https://crates.io/keywords/macros)\n  * [ #syn ](https://crates.io/keywords/syn)\n\n\n  * [ Readme ](https://crates.io/crates/proc-macro2)\n  * [ 151 Versions ](https://crates.io/crates/proc-macro2/versions)\n  * [ Dependencies ](https://crates.io/crates/proc-macro2/dependencies)\n  * [ Dependents ](https://crates.io/crates/proc-macro2/reverse_dependencies)\n\n\n## Metadata\n3 months ago \nv1.56.0 \n[ MIT ](https://choosealicense.com/licenses/mit) OR [ Apache-2.0 ](https://choosealicense.com/licenses/apache-2.0)\n50.6 KiB \n## Install\nRun the following Cargo command in your project directory:\ncargo add proc-macro2\nOr add the following line to your Cargo.toml:\nproc-macro2 = \"1.0.95\"\n## Documentation\n[ docs.rs/proc-macro2 ](https://docs.rs/proc-macro2)\n## Repository\n[ github.com/dtolnay/proc-macro2 ](https://github.com/dtolnay/proc-macro2)\n## Owners\n## Categories\n  * [Procedural macro helpers](https://crates.io/categories/development-tools::procedural-macro-helpers)\n\n\n[ Report crate ](https://crates.io/support?crate=proc-macro2&inquire=crate-violation)\n### Stats Overview\n651,463,756 Downloads all time\n151 Versions published\n#### Downloads over the last 90 days\nDisplay as \nStacked \n  * Stacked \n  * Unstacked \n\n\nLoading\u2026\n",
              "markdown_with_citations": "#  proc-macro2 v1.0.95\nA substitute implementation of the compiler's `proc_macro` API to decouple token-based libraries from the procedural macro use case. \n  *  #macros \u27e81\u27e9\n  *  #syn \u27e82\u27e9\n\n\n  *  Readme \u27e83\u27e9\n  *  151 Versions \u27e84\u27e9\n  *  Dependencies \u27e85\u27e9\n  *  Dependents \u27e86\u27e9\n\n\n## Metadata\n3 months ago \nv1.56.0 \n MIT \u27e87\u27e9 OR  Apache-2.0 \u27e88\u27e9\n50.6 KiB \n## Install\nRun the following Cargo command in your project directory:\ncargo add proc-macro2\nOr add the following line to your Cargo.toml:\nproc-macro2 = \"1.0.95\"\n## Documentation\n docs.rs/proc-macro2 \u27e89\u27e9\n## Repository\n github.com/dtolnay/proc-macro2 \u27e810\u27e9\n## Owners\n## Categories\n  * Procedural macro helpers\u27e811\u27e9\n\n\n Report crate \u27e812\u27e9\n### Stats Overview\n651,463,756 Downloads all time\n151 Versions published\n#### Downloads over the last 90 days\nDisplay as \nStacked \n  * Stacked \n  * Unstacked \n\n\nLoading\u2026\n",
              "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://crates.io/keywords/macros:  #macros \n\u27e82\u27e9 https://crates.io/keywords/syn:  #syn \n\u27e83\u27e9 https://crates.io/crates/proc-macro2:  Readme \n\u27e84\u27e9 https://crates.io/crates/proc-macro2/versions:  151 Versions \n\u27e85\u27e9 https://crates.io/crates/proc-macro2/dependencies:  Dependencies \n\u27e86\u27e9 https://crates.io/crates/proc-macro2/reverse_dependencies:  Dependents \n\u27e87\u27e9 https://choosealicense.com/licenses/mit:  MIT \n\u27e88\u27e9 https://choosealicense.com/licenses/apache-2.0:  Apache-2.0 \n\u27e89\u27e9 https://docs.rs/proc-macro2:  docs.rs/proc-macro2 \n\u27e810\u27e9 https://github.com/dtolnay/proc-macro2:  github.com/dtolnay/proc-macro2 \n\u27e811\u27e9 https://crates.io/categories/development-tools::procedural-macro-helpers: Procedural macro helpers\n\u27e812\u27e9 https://crates.io/support?crate=proc-macro2&inquire=crate-violation:  Report crate \n",
              "fit_markdown": "",
              "fit_html": ""
            },
            "structured_data": {},
            "quality_score": 3.0,
            "extraction_method": "crawl4ai",
            "error": null,
            "metadata": {
              "doc_type": "docs",
              "content_length": 1395,
              "has_structured_data": false,
              "crawl_success": true
            },
            "timestamp": "117613.5993961"
          },
          "docs_rs": {
            "url": "https://docs.rs/proc-macro2",
            "title": "Crate proc_macro2Copy item path",
            "content": {
              "raw_markdown": "[](https://docs.rs/proc-macro2/latest/proc_macro2/all.html \"show sidebar\")\n# Crate proc_macro2Copy item path\n[Settings](https://docs.rs/proc-macro2/latest/settings.html)\n[Help](https://docs.rs/proc-macro2/latest/help.html)\nSummary[Source](https://docs.rs/proc-macro2/latest/src/proc_macro2/lib.rs.html#1-1351)\nExpand description\n[![github](https://img.shields.io/badge/github-8da0cb?style=for-the-badge&labelColor=555555&logo=github)](https://github.com/dtolnay/proc-macro2) [![crates-io](https://img.shields.io/badge/crates.io-fc8d62?style=for-the-badge&labelColor=555555&logo=rust)](https://crates.io/crates/proc-macro2) [![docs-rs](https://img.shields.io/badge/docs.rs-66c2a5?style=for-the-badge&labelColor=555555&logo=docs.rs)](https://docs.rs/proc-macro2/latest/proc_macro2/index.html \"mod proc_macro2\")\nA wrapper around the procedural macro API of the compiler\u2019s [`proc_macro`](https://doc.rust-lang.org/proc_macro/index.html \"mod proc_macro\") crate. This library serves two purposes:\n  * **Bring proc-macro-like functionality to other contexts like build.rs and main.rs.** Types from `proc_macro` are entirely specific to procedural macros and cannot ever exist in code outside of a procedural macro. Meanwhile `proc_macro2` types may exist anywhere including non-macro code. By developing foundational libraries like [syn](https://github.com/dtolnay/syn) and [quote](https://github.com/dtolnay/quote) against `proc_macro2` rather than `proc_macro`, the procedural macro ecosystem becomes easily applicable to many other use cases and we avoid reimplementing non-macro equivalents of those libraries.\n  * **Make procedural macros unit testable.** As a consequence of being specific to procedural macros, nothing that uses `proc_macro` can be executed from a unit test. In order for helper libraries or components of a macro to be testable in isolation, they must be implemented using `proc_macro2`.\n\n\n## [\u00a7](https://docs.rs/proc-macro2/latest/proc_macro2/#usage)Usage\nThe skeleton of a typical procedural macro typically looks like this:\n```\nextern crate proc_macro;\n#[proc_macro_derive(MyDerive)]\npub fn my_derive(input: proc_macro::TokenStream) -> proc_macro::TokenStream {\n  let input = proc_macro2::TokenStream::from(input);\n  let output: proc_macro2::TokenStream = {\n    /* transform input */\n  };\n  proc_macro::TokenStream::from(output)\n}\n```\n\nIf parsing with [Syn](https://github.com/dtolnay/syn), you\u2019ll use [`parse_macro_input!`](https://docs.rs/syn/2.0/syn/macro.parse_macro_input.html) instead to propagate parse errors correctly back to the compiler when parsing fails.\n## [\u00a7](https://docs.rs/proc-macro2/latest/proc_macro2/#unstable-features)Unstable features\nThe default feature set of proc-macro2 tracks the most recent stable compiler API. Functionality in `proc_macro` that is not yet stable is not exposed by proc-macro2 by default.\nTo opt into the additional APIs available in the most recent nightly compiler, the `procmacro2_semver_exempt` config flag must be passed to rustc. We will polyfill those nightly-only APIs back to Rust 1.56.0. As these are unstable APIs that track the nightly compiler, minor versions of proc-macro2 may make breaking changes to them at any time.\n```\nRUSTFLAGS='--cfg procmacro2_semver_exempt' cargo build\n```\n\nNote that this must not only be done for your crate, but for any crate that depends on your crate. This infectious nature is intentional, as it serves as a reminder that you are outside of the normal semver guarantees.\nSemver exempt methods are marked as such in the proc-macro2 documentation.\n## [\u00a7](https://docs.rs/proc-macro2/latest/proc_macro2/#thread-safety)Thread-Safety\nMost types in this crate are `!Sync` because the underlying compiler types make use of thread-local memory, meaning they cannot be accessed from a different thread.\n## Modules[\u00a7](https://docs.rs/proc-macro2/latest/proc_macro2/#modules)\n\n[extra](https://docs.rs/proc-macro2/latest/proc_macro2/extra/index.html \"mod proc_macro2::extra\")\n    Items which do not have a correspondence to any API in the proc_macro crate, but are necessary to include in proc-macro2.\n\n[token_stream](https://docs.rs/proc-macro2/latest/proc_macro2/token_stream/index.html \"mod proc_macro2::token_stream\")\n    Public implementation details for the `TokenStream` type, such as iterators.\n## Structs[\u00a7](https://docs.rs/proc-macro2/latest/proc_macro2/#structs)\n\n[Group](https://docs.rs/proc-macro2/latest/proc_macro2/struct.Group.html \"struct proc_macro2::Group\")\n    A delimited token stream.\n\n[Ident](https://docs.rs/proc-macro2/latest/proc_macro2/struct.Ident.html \"struct proc_macro2::Ident\")\n    A word of Rust code, which may be a keyword or legal variable name.\n\n[LexError](https://docs.rs/proc-macro2/latest/proc_macro2/struct.LexError.html \"struct proc_macro2::LexError\")\n    Error returned from `TokenStream::from_str`.\n\n[LineColumn](https://docs.rs/proc-macro2/latest/proc_macro2/struct.LineColumn.html \"struct proc_macro2::LineColumn\")`span-locations`\n    A line-column pair representing the start or end of a `Span`.\n\n[Literal](https://docs.rs/proc-macro2/latest/proc_macro2/struct.Literal.html \"struct proc_macro2::Literal\")\n    A literal string (`\"hello\"`), byte string (`b\"hello\"`), character (`'a'`), byte character (`b'a'`), an integer or floating point number with or without a suffix (`1`, `1u8`, `2.3`, `2.3f32`).\n\n[Punct](https://docs.rs/proc-macro2/latest/proc_macro2/struct.Punct.html \"struct proc_macro2::Punct\")\n    A `Punct` is a single punctuation character like `+`, `-` or `#`.\n\n[Span](https://docs.rs/proc-macro2/latest/proc_macro2/struct.Span.html \"struct proc_macro2::Span\")\n    A region of source code, along with macro expansion information.\n\n[TokenStream](https://docs.rs/proc-macro2/latest/proc_macro2/struct.TokenStream.html \"struct proc_macro2::TokenStream\")\n    An abstract stream of tokens, or more concretely a sequence of token trees.\n## Enums[\u00a7](https://docs.rs/proc-macro2/latest/proc_macro2/#enums)\n\n[Delimiter](https://docs.rs/proc-macro2/latest/proc_macro2/enum.Delimiter.html \"enum proc_macro2::Delimiter\")\n    Describes how a sequence of token trees is delimited.\n\n[Spacing](https://docs.rs/proc-macro2/latest/proc_macro2/enum.Spacing.html \"enum proc_macro2::Spacing\")\n    Whether a `Punct` is followed immediately by another `Punct` or followed by another token or whitespace.\n\n[TokenTree](https://docs.rs/proc-macro2/latest/proc_macro2/enum.TokenTree.html \"enum proc_macro2::TokenTree\")\n    A single token or a delimited sequence of token trees (e.g. `[1, (), ..]`).\n",
              "markdown_with_citations": "[](https://docs.rs/proc-macro2/latest/proc_macro2/all.html \"show sidebar\")\n# Crate proc_macro2Copy item path\nSettings\u27e81\u27e9\nHelp\u27e82\u27e9\nSummarySource\u27e83\u27e9\nExpand description\n![github\u27e84\u27e9](https://github.com/dtolnay/proc-macro2) ![crates-io\u27e85\u27e9](https://crates.io/crates/proc-macro2) ![docs-rs\u27e86\u27e9](https://docs.rs/proc-macro2/latest/proc_macro2/index.html \"mod proc_macro2\")\nA wrapper around the procedural macro API of the compiler\u2019s `proc_macro`\u27e87\u27e9 crate. This library serves two purposes:\n  * **Bring proc-macro-like functionality to other contexts like build.rs and main.rs.** Types from `proc_macro` are entirely specific to procedural macros and cannot ever exist in code outside of a procedural macro. Meanwhile `proc_macro2` types may exist anywhere including non-macro code. By developing foundational libraries like syn\u27e88\u27e9 and quote\u27e89\u27e9 against `proc_macro2` rather than `proc_macro`, the procedural macro ecosystem becomes easily applicable to many other use cases and we avoid reimplementing non-macro equivalents of those libraries.\n  * **Make procedural macros unit testable.** As a consequence of being specific to procedural macros, nothing that uses `proc_macro` can be executed from a unit test. In order for helper libraries or components of a macro to be testable in isolation, they must be implemented using `proc_macro2`.\n\n\n## \u00a7\u27e810\u27e9Usage\nThe skeleton of a typical procedural macro typically looks like this:\n```\nextern crate proc_macro;\n#[proc_macro_derive(MyDerive)]\npub fn my_derive(input: proc_macro::TokenStream) -> proc_macro::TokenStream {\n  let input = proc_macro2::TokenStream::from(input);\n  let output: proc_macro2::TokenStream = {\n    /* transform input */\n  };\n  proc_macro::TokenStream::from(output)\n}\n```\n\nIf parsing with Syn\u27e88\u27e9, you\u2019ll use `parse_macro_input!`\u27e811\u27e9 instead to propagate parse errors correctly back to the compiler when parsing fails.\n## \u00a7\u27e812\u27e9Unstable features\nThe default feature set of proc-macro2 tracks the most recent stable compiler API. Functionality in `proc_macro` that is not yet stable is not exposed by proc-macro2 by default.\nTo opt into the additional APIs available in the most recent nightly compiler, the `procmacro2_semver_exempt` config flag must be passed to rustc. We will polyfill those nightly-only APIs back to Rust 1.56.0. As these are unstable APIs that track the nightly compiler, minor versions of proc-macro2 may make breaking changes to them at any time.\n```\nRUSTFLAGS='--cfg procmacro2_semver_exempt' cargo build\n```\n\nNote that this must not only be done for your crate, but for any crate that depends on your crate. This infectious nature is intentional, as it serves as a reminder that you are outside of the normal semver guarantees.\nSemver exempt methods are marked as such in the proc-macro2 documentation.\n## \u00a7\u27e813\u27e9Thread-Safety\nMost types in this crate are `!Sync` because the underlying compiler types make use of thread-local memory, meaning they cannot be accessed from a different thread.\n## Modules\u00a7\u27e814\u27e9\n\nextra\u27e815\u27e9\n    Items which do not have a correspondence to any API in the proc_macro crate, but are necessary to include in proc-macro2.\n\ntoken_stream\u27e816\u27e9\n    Public implementation details for the `TokenStream` type, such as iterators.\n## Structs\u00a7\u27e817\u27e9\n\nGroup\u27e818\u27e9\n    A delimited token stream.\n\nIdent\u27e819\u27e9\n    A word of Rust code, which may be a keyword or legal variable name.\n\nLexError\u27e820\u27e9\n    Error returned from `TokenStream::from_str`.\n\nLineColumn\u27e821\u27e9`span-locations`\n    A line-column pair representing the start or end of a `Span`.\n\nLiteral\u27e822\u27e9\n    A literal string (`\"hello\"`), byte string (`b\"hello\"`), character (`'a'`), byte character (`b'a'`), an integer or floating point number with or without a suffix (`1`, `1u8`, `2.3`, `2.3f32`).\n\nPunct\u27e823\u27e9\n    A `Punct` is a single punctuation character like `+`, `-` or `#`.\n\nSpan\u27e824\u27e9\n    A region of source code, along with macro expansion information.\n\nTokenStream\u27e825\u27e9\n    An abstract stream of tokens, or more concretely a sequence of token trees.\n## Enums\u00a7\u27e826\u27e9\n\nDelimiter\u27e827\u27e9\n    Describes how a sequence of token trees is delimited.\n\nSpacing\u27e828\u27e9\n    Whether a `Punct` is followed immediately by another `Punct` or followed by another token or whitespace.\n\nTokenTree\u27e829\u27e9\n    A single token or a delimited sequence of token trees (e.g. `[1, (), ..]`).\n",
              "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://docs.rs/proc-macro2/latest/settings.html: Settings\n\u27e82\u27e9 https://docs.rs/proc-macro2/latest/help.html: Help\n\u27e83\u27e9 https://docs.rs/proc-macro2/latest/src/proc_macro2/lib.rs.html#1-1351: Source\n\u27e84\u27e9 https://img.shields.io/badge/github-8da0cb?style=for-the-badge&labelColor=555555&logo=github: ![github\n\u27e85\u27e9 https://img.shields.io/badge/crates.io-fc8d62?style=for-the-badge&labelColor=555555&logo=rust: ![crates-io\n\u27e86\u27e9 https://img.shields.io/badge/docs.rs-66c2a5?style=for-the-badge&labelColor=555555&logo=docs.rs: ![docs-rs\n\u27e87\u27e9 https://doc.rust-lang.org/proc_macro/index.html: mod proc_macro - `proc_macro`\n\u27e88\u27e9 https://github.com/dtolnay/syn: syn\n\u27e89\u27e9 https://github.com/dtolnay/quote: quote\n\u27e810\u27e9 https://docs.rs/proc-macro2/latest/proc_macro2/#usage: \u00a7\n\u27e811\u27e9 https://docs.rs/syn/2.0/syn/macro.parse_macro_input.html: `parse_macro_input!`\n\u27e812\u27e9 https://docs.rs/proc-macro2/latest/proc_macro2/#unstable-features: \u00a7\n\u27e813\u27e9 https://docs.rs/proc-macro2/latest/proc_macro2/#thread-safety: \u00a7\n\u27e814\u27e9 https://docs.rs/proc-macro2/latest/proc_macro2/#modules: \u00a7\n\u27e815\u27e9 https://docs.rs/proc-macro2/latest/proc_macro2/extra/index.html: mod proc_macro2::extra - extra\n\u27e816\u27e9 https://docs.rs/proc-macro2/latest/proc_macro2/token_stream/index.html: mod proc_macro2::token_stream - token_stream\n\u27e817\u27e9 https://docs.rs/proc-macro2/latest/proc_macro2/#structs: \u00a7\n\u27e818\u27e9 https://docs.rs/proc-macro2/latest/proc_macro2/struct.Group.html: struct proc_macro2::Group - Group\n\u27e819\u27e9 https://docs.rs/proc-macro2/latest/proc_macro2/struct.Ident.html: struct proc_macro2::Ident - Ident\n\u27e820\u27e9 https://docs.rs/proc-macro2/latest/proc_macro2/struct.LexError.html: struct proc_macro2::LexError - LexError\n\u27e821\u27e9 https://docs.rs/proc-macro2/latest/proc_macro2/struct.LineColumn.html: struct proc_macro2::LineColumn - LineColumn\n\u27e822\u27e9 https://docs.rs/proc-macro2/latest/proc_macro2/struct.Literal.html: struct proc_macro2::Literal - Literal\n\u27e823\u27e9 https://docs.rs/proc-macro2/latest/proc_macro2/struct.Punct.html: struct proc_macro2::Punct - Punct\n\u27e824\u27e9 https://docs.rs/proc-macro2/latest/proc_macro2/struct.Span.html: struct proc_macro2::Span - Span\n\u27e825\u27e9 https://docs.rs/proc-macro2/latest/proc_macro2/struct.TokenStream.html: struct proc_macro2::TokenStream - TokenStream\n\u27e826\u27e9 https://docs.rs/proc-macro2/latest/proc_macro2/#enums: \u00a7\n\u27e827\u27e9 https://docs.rs/proc-macro2/latest/proc_macro2/enum.Delimiter.html: enum proc_macro2::Delimiter - Delimiter\n\u27e828\u27e9 https://docs.rs/proc-macro2/latest/proc_macro2/enum.Spacing.html: enum proc_macro2::Spacing - Spacing\n\u27e829\u27e9 https://docs.rs/proc-macro2/latest/proc_macro2/enum.TokenTree.html: enum proc_macro2::TokenTree - TokenTree\n",
              "fit_markdown": "",
              "fit_html": ""
            },
            "structured_data": {},
            "quality_score": 4.0,
            "extraction_method": "crawl4ai",
            "error": null,
            "metadata": {
              "doc_type": "docs",
              "content_length": 6536,
              "has_structured_data": false,
              "crawl_success": true
            },
            "timestamp": "117614.163766"
          },
          "lib_rs": {
            "url": "https://lib.rs/crates/proc-macro2",
            "title": "Untitled",
            "content": {
              "raw_markdown": "###  [149 releases](https://lib.rs/crates/proc-macro2/versions) (94 stable)\n1.0.95 |  Apr 16, 2025   \n---|---  \n1.0.94 |  Mar 3, 2025   \n1.0.93 |  Jan 11, 2025   \n1.0.92 |  Nov 21, 2024   \n0.1.2 |  Jul 14, 2017   \n#**13** in [Procedural macros](https://lib.rs/development-tools/procedural-macro-helpers \"Crates to help you write procedural macros in Rust.\n\")\nDownload history 6574491/week @ 2025-03-09 6909182/week @ 2025-03-16 6801245/week @ 2025-03-23 6651848/week @ 2025-03-30 7204755/week @ 2025-04-06 6990172/week @ 2025-04-13 6631817/week @ 2025-04-20 6763394/week @ 2025-04-27 6543318/week @ 2025-05-04 6965908/week @ 2025-05-11 7179082/week @ 2025-05-18 5664965/week @ 2025-05-25 5874080/week @ 2025-06-01 6845764/week @ 2025-06-08 8102921/week @ 2025-06-15 7418686/week @ 2025-06-22\n**28,653,668** downloads per month Used in [**126,693** crates (9,623 directly)](https://lib.rs/crates/proc-macro2/rev)\n**MIT/Apache**\n170KB  4K  SLoC\n# proc-macro2\n[![github](https://img.shields.io/badge/github-dtolnay/proc--macro2-8da0cb?style=for-the-badge&labelColor=555555&logo=github)](https://github.com/dtolnay/proc-macro2) [![crates.io](https://img.shields.io/crates/v/proc-macro2.svg?style=for-the-badge&color=fc8d62&logo=rust)](https://crates.io/crates/proc-macro2) [![docs.rs](https://img.shields.io/badge/docs.rs-proc--macro2-66c2a5?style=for-the-badge&labelColor=555555&logo=docs.rs)](https://docs.rs/proc-macro2) [![build status](https://img.shields.io/github/actions/workflow/status/dtolnay/proc-macro2/ci.yml?branch=master&style=for-the-badge)](https://github.com/dtolnay/proc-macro2/actions?query=branch%3Amaster)\nA wrapper around the procedural macro API of the compiler's ``proc_macro`` crate. This library serves two purposes:\n  * **Bring proc-macro-like functionality to other contexts like build.rs and main.rs.** Types from ``proc_macro`` are entirely specific to procedural macros and cannot ever exist in code outside of a procedural macro. Meanwhile ``proc_macro2`` types may exist anywhere including non-macro code. By developing foundational libraries like [syn](https://github.com/dtolnay/syn) and [quote](https://github.com/dtolnay/quote) against ``proc_macro2`` rather than ``proc_macro``, the procedural macro ecosystem becomes easily applicable to many other use cases and we avoid reimplementing non-macro equivalents of those libraries.\n  * **Make procedural macros unit testable.** As a consequence of being specific to procedural macros, nothing that uses ``proc_macro`` can be executed from a unit test. In order for helper libraries or components of a macro to be testable in isolation, they must be implemented using ``proc_macro2``.\n\n\n## Usage\n```\n```[``dependencies``]`\n`proc-macro2 ``=` ``\"`1.0`\"``\n``\n```\n\nThe skeleton of a typical procedural macro typically looks like this:\n```\n``extern` `crate` proc_macro`;`\n``#``[``proc_macro_derive```(```MyDerive```)```]``\n``pub` `fn` `my_derive`````(``input``:` `proc_macro`::``TokenStream```)```` ``->` `proc_macro`::``TokenStream` ````{`\n  `let` input `=` `proc_macro2`::```TokenStream`::``from`(`input`)``;`\n  `let` output`:` `proc_macro2`::``TokenStream `=` `{`\n    ``/*` transform input `*/``\n  `}``;`\n  `proc_macro`::```TokenStream`::``from`(`output`)`\n```}```\n`\n```\n\nIf parsing with [Syn](https://github.com/dtolnay/syn), you'll use [``parse_macro_input!``](https://docs.rs/syn/2.0/syn/macro.parse_macro_input.html) instead to propagate parse errors correctly back to the compiler when parsing fails.\n## Unstable features\nThe default feature set of proc-macro2 tracks the most recent stable compiler API. Functionality in ``proc_macro`` that is not yet stable is not exposed by proc-macro2 by default.\nTo opt into the additional APIs available in the most recent nightly compiler, the ``procmacro2_semver_exempt`` config flag must be passed to rustc. We will polyfill those nightly-only APIs back to Rust 1.56.0. As these are unstable APIs that track the nightly compiler, minor versions of proc-macro2 may make breaking changes to them at any time.\n```\n``RUSTFLAGS``=````'`--cfg procmacro2_semver_exempt`'``` ``cargo``` build`\n`\n```\n\nNote that this must not only be done for your crate, but for any crate that depends on your crate. This infectious nature is intentional, as it serves as a reminder that you are outside of the normal semver guarantees.\nSemver exempt methods are marked as such in the proc-macro2 documentation.\n#### License\nLicensed under either of [Apache License, Version 2.0](https://github.com/dtolnay/proc-macro2/blob/24bbf16d9df01d5f7d9ac39bdfbaea85f4c194fb/LICENSE-APACHE) or [MIT license](https://github.com/dtolnay/proc-macro2/blob/24bbf16d9df01d5f7d9ac39bdfbaea85f4c194fb/LICENSE-MIT) at your option.  Unless you explicitly state otherwise, any contribution intentionally submitted for inclusion in this crate by you, as defined in the Apache-2.0 license, shall be dual licensed as above, without any additional terms or conditions. \n#### Dependencies\n  * [unicode-ident](https://lib.rs/crates/unicode-ident \"1.0\")\n\n\n  * build `build.rs`\n  * dev  [flate2](https://lib.rs/crates/flate2 \"1.0\")\n  * dev  [quote](https://lib.rs/crates/quote \"1.0\")\n  * dev  [rayon](https://lib.rs/crates/rayon \"1.0\")\n  * dev  [rustversion](https://lib.rs/crates/rustversion \"1\")\n  * dev  [tar](https://lib.rs/crates/tar \"0.4\")\n\n\n#### [Other features](https://lib.rs/crates/proc-macro2/features)\n  * [nightly](https://lib.rs/crates/proc-macro2/features#feature-nightly)\n  * [proc-macro](https://lib.rs/crates/proc-macro2/features#feature-proc-macro)\n  * [span-locations](https://lib.rs/crates/proc-macro2/features#feature-span-locations)\n\n\n  *[SLoC]: Lines of code, excluding comments\n",
              "markdown_with_citations": "###  149 releases\u27e81\u27e9 (94 stable)\n1.0.95 |  Apr 16, 2025   \n---|---  \n1.0.94 |  Mar 3, 2025   \n1.0.93 |  Jan 11, 2025   \n1.0.92 |  Nov 21, 2024   \n0.1.2 |  Jul 14, 2017   \n#**13** in Procedural macros\u27e82\u27e9\nDownload history 6574491/week @ 2025-03-09 6909182/week @ 2025-03-16 6801245/week @ 2025-03-23 6651848/week @ 2025-03-30 7204755/week @ 2025-04-06 6990172/week @ 2025-04-13 6631817/week @ 2025-04-20 6763394/week @ 2025-04-27 6543318/week @ 2025-05-04 6965908/week @ 2025-05-11 7179082/week @ 2025-05-18 5664965/week @ 2025-05-25 5874080/week @ 2025-06-01 6845764/week @ 2025-06-08 8102921/week @ 2025-06-15 7418686/week @ 2025-06-22\n**28,653,668** downloads per month Used in **126,693** crates (9,623 directly)\u27e83\u27e9\n**MIT/Apache**\n170KB  4K  SLoC\n# proc-macro2\n![github\u27e84\u27e9](https://github.com/dtolnay/proc-macro2) ![crates.io\u27e85\u27e9](https://crates.io/crates/proc-macro2) ![docs.rs\u27e86\u27e9](https://docs.rs/proc-macro2) ![build status\u27e87\u27e9](https://github.com/dtolnay/proc-macro2/actions?query=branch%3Amaster)\nA wrapper around the procedural macro API of the compiler's ``proc_macro`` crate. This library serves two purposes:\n  * **Bring proc-macro-like functionality to other contexts like build.rs and main.rs.** Types from ``proc_macro`` are entirely specific to procedural macros and cannot ever exist in code outside of a procedural macro. Meanwhile ``proc_macro2`` types may exist anywhere including non-macro code. By developing foundational libraries like syn\u27e88\u27e9 and quote\u27e89\u27e9 against ``proc_macro2`` rather than ``proc_macro``, the procedural macro ecosystem becomes easily applicable to many other use cases and we avoid reimplementing non-macro equivalents of those libraries.\n  * **Make procedural macros unit testable.** As a consequence of being specific to procedural macros, nothing that uses ``proc_macro`` can be executed from a unit test. In order for helper libraries or components of a macro to be testable in isolation, they must be implemented using ``proc_macro2``.\n\n\n## Usage\n```\n```[``dependencies``]`\n`proc-macro2 ``=` ``\"`1.0`\"``\n``\n```\n\nThe skeleton of a typical procedural macro typically looks like this:\n```\n``extern` `crate` proc_macro`;`\n``#``[``proc_macro_derive```(```MyDerive```)```]``\n``pub` `fn` `my_derive`````(``input``:` `proc_macro`::``TokenStream```)```` ``->` `proc_macro`::``TokenStream` ````{`\n  `let` input `=` `proc_macro2`::```TokenStream`::``from`(`input`)``;`\n  `let` output`:` `proc_macro2`::``TokenStream `=` `{`\n    ``/*` transform input `*/``\n  `}``;`\n  `proc_macro`::```TokenStream`::``from`(`output`)`\n```}```\n`\n```\n\nIf parsing with Syn\u27e88\u27e9, you'll use ``parse_macro_input!``\u27e810\u27e9 instead to propagate parse errors correctly back to the compiler when parsing fails.\n## Unstable features\nThe default feature set of proc-macro2 tracks the most recent stable compiler API. Functionality in ``proc_macro`` that is not yet stable is not exposed by proc-macro2 by default.\nTo opt into the additional APIs available in the most recent nightly compiler, the ``procmacro2_semver_exempt`` config flag must be passed to rustc. We will polyfill those nightly-only APIs back to Rust 1.56.0. As these are unstable APIs that track the nightly compiler, minor versions of proc-macro2 may make breaking changes to them at any time.\n```\n``RUSTFLAGS``=````'`--cfg procmacro2_semver_exempt`'``` ``cargo``` build`\n`\n```\n\nNote that this must not only be done for your crate, but for any crate that depends on your crate. This infectious nature is intentional, as it serves as a reminder that you are outside of the normal semver guarantees.\nSemver exempt methods are marked as such in the proc-macro2 documentation.\n#### License\nLicensed under either of Apache License, Version 2.0\u27e811\u27e9 or MIT license\u27e812\u27e9 at your option.  Unless you explicitly state otherwise, any contribution intentionally submitted for inclusion in this crate by you, as defined in the Apache-2.0 license, shall be dual licensed as above, without any additional terms or conditions. \n#### Dependencies\n  * unicode-ident\u27e813\u27e9\n\n\n  * build `build.rs`\n  * dev  flate2\u27e814\u27e9\n  * dev  quote\u27e815\u27e9\n  * dev  rayon\u27e816\u27e9\n  * dev  rustversion\u27e817\u27e9\n  * dev  tar\u27e818\u27e9\n\n\n#### Other features\u27e819\u27e9\n  * nightly\u27e820\u27e9\n  * proc-macro\u27e821\u27e9\n  * span-locations\u27e822\u27e9\n\n\n  *[SLoC]: Lines of code, excluding comments\n",
              "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://lib.rs/crates/proc-macro2/versions: 149 releases\n\u27e82\u27e9 https://lib.rs/development-tools/procedural-macro-helpers: Crates to help you write procedural macros in Rust.\n - Procedural macros\n\u27e83\u27e9 https://lib.rs/crates/proc-macro2/rev: **126,693** crates (9,623 directly)\n\u27e84\u27e9 https://img.shields.io/badge/github-dtolnay/proc--macro2-8da0cb?style=for-the-badge&labelColor=555555&logo=github: ![github\n\u27e85\u27e9 https://img.shields.io/crates/v/proc-macro2.svg?style=for-the-badge&color=fc8d62&logo=rust: ![crates.io\n\u27e86\u27e9 https://img.shields.io/badge/docs.rs-proc--macro2-66c2a5?style=for-the-badge&labelColor=555555&logo=docs.rs: ![docs.rs\n\u27e87\u27e9 https://img.shields.io/github/actions/workflow/status/dtolnay/proc-macro2/ci.yml?branch=master&style=for-the-badge: ![build status\n\u27e88\u27e9 https://github.com/dtolnay/syn: syn\n\u27e89\u27e9 https://github.com/dtolnay/quote: quote\n\u27e810\u27e9 https://docs.rs/syn/2.0/syn/macro.parse_macro_input.html: ``parse_macro_input!``\n\u27e811\u27e9 https://github.com/dtolnay/proc-macro2/blob/24bbf16d9df01d5f7d9ac39bdfbaea85f4c194fb/LICENSE-APACHE: Apache License, Version 2.0\n\u27e812\u27e9 https://github.com/dtolnay/proc-macro2/blob/24bbf16d9df01d5f7d9ac39bdfbaea85f4c194fb/LICENSE-MIT: MIT license\n\u27e813\u27e9 https://lib.rs/crates/unicode-ident: 1.0 - unicode-ident\n\u27e814\u27e9 https://lib.rs/crates/flate2: 1.0 - flate2\n\u27e815\u27e9 https://lib.rs/crates/quote: 1.0 - quote\n\u27e816\u27e9 https://lib.rs/crates/rayon: 1.0 - rayon\n\u27e817\u27e9 https://lib.rs/crates/rustversion: 1 - rustversion\n\u27e818\u27e9 https://lib.rs/crates/tar: 0.4 - tar\n\u27e819\u27e9 https://lib.rs/crates/proc-macro2/features: Other features\n\u27e820\u27e9 https://lib.rs/crates/proc-macro2/features#feature-nightly: nightly\n\u27e821\u27e9 https://lib.rs/crates/proc-macro2/features#feature-proc-macro: proc-macro\n\u27e822\u27e9 https://lib.rs/crates/proc-macro2/features#feature-span-locations: span-locations\n",
              "fit_markdown": "",
              "fit_html": ""
            },
            "structured_data": {},
            "quality_score": 3.0,
            "extraction_method": "crawl4ai",
            "error": null,
            "metadata": {
              "doc_type": "docs",
              "content_length": 5676,
              "has_structured_data": false,
              "crawl_success": true
            },
            "timestamp": "117614.7560376"
          }
        },
        "crate_analysis": {
          "status": "completed",
          "check": [
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#unicode-ident@1.0.18",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\unicode-ident-1.0.18\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "unicode_ident",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\unicode-ident-1.0.18\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpxj5nu7ob\\proc-macro2-1.0.95\\target\\debug\\deps\\libunicode_ident-0ff2238d530c1ee1.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpxj5nu7ob/proc-macro2-1.0.95#proc-macro2@1.0.95",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpxj5nu7ob\\proc-macro2-1.0.95\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpxj5nu7ob\\proc-macro2-1.0.95\\build.rs",
                "edition": "2021",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "proc-macro"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpxj5nu7ob\\proc-macro2-1.0.95\\target\\debug\\build\\proc-macro2-3c20911993b24260\\build-script-build.exe",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpxj5nu7ob\\proc-macro2-1.0.95\\target\\debug\\build\\proc-macro2-3c20911993b24260\\build_script_build.pdb"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "build-script-executed",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpxj5nu7ob/proc-macro2-1.0.95#proc-macro2@1.0.95",
              "linked_libs": [],
              "linked_paths": [],
              "cfgs": [
                "wrap_proc_macro"
              ],
              "env": [],
              "out_dir": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpxj5nu7ob\\proc-macro2-1.0.95\\target\\debug\\build\\proc-macro2-20932fb86263463b\\out"
            },
            {
              "reason": "compiler-artifact",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpxj5nu7ob/proc-macro2-1.0.95#proc-macro2@1.0.95",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpxj5nu7ob\\proc-macro2-1.0.95\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "proc_macro2",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpxj5nu7ob\\proc-macro2-1.0.95\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "proc-macro"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpxj5nu7ob\\proc-macro2-1.0.95\\target\\debug\\deps\\libproc_macro2-94fe1f9e79895b40.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "build-finished",
              "success": true
            }
          ],
          "clippy": [
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#unicode-ident@1.0.18",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\unicode-ident-1.0.18\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "unicode_ident",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\unicode-ident-1.0.18\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpxj5nu7ob\\proc-macro2-1.0.95\\target\\debug\\deps\\libunicode_ident-0ff2238d530c1ee1.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpxj5nu7ob/proc-macro2-1.0.95#proc-macro2@1.0.95",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpxj5nu7ob\\proc-macro2-1.0.95\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpxj5nu7ob\\proc-macro2-1.0.95\\build.rs",
                "edition": "2021",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "proc-macro"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpxj5nu7ob\\proc-macro2-1.0.95\\target\\debug\\build\\proc-macro2-6253ce749aba1b5c\\build-script-build.exe",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpxj5nu7ob\\proc-macro2-1.0.95\\target\\debug\\build\\proc-macro2-6253ce749aba1b5c\\build_script_build.pdb"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "build-script-executed",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpxj5nu7ob/proc-macro2-1.0.95#proc-macro2@1.0.95",
              "linked_libs": [],
              "linked_paths": [],
              "cfgs": [
                "wrap_proc_macro"
              ],
              "env": [],
              "out_dir": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpxj5nu7ob\\proc-macro2-1.0.95\\target\\debug\\build\\proc-macro2-74012c6364b42aee\\out"
            },
            {
              "reason": "compiler-artifact",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpxj5nu7ob/proc-macro2-1.0.95#proc-macro2@1.0.95",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpxj5nu7ob\\proc-macro2-1.0.95\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "proc_macro2",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpxj5nu7ob\\proc-macro2-1.0.95\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "proc-macro"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpxj5nu7ob\\proc-macro2-1.0.95\\target\\debug\\deps\\libproc_macro2-aed7d9f668f910f1.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "build-finished",
              "success": true
            }
          ],
          "audit": {
            "database": {
              "advisory-count": 787,
              "last-commit": "7573f55ba337263f61167dbb0ea926cdc7c8eb5d",
              "last-updated": "2025-06-17T11:04:25+02:00"
            },
            "lockfile": {
              "dependency-count": 36
            },
            "settings": {
              "target_arch": [],
              "target_os": [],
              "severity": null,
              "ignore": [],
              "informational_warnings": [
                "unmaintained",
                "unsound",
                "notice"
              ]
            },
            "vulnerabilities": {
              "found": false,
              "count": 0,
              "list": []
            },
            "warnings": {}
          },
          "note": "Crate analysis performed with stable toolchain."
        },
        "crate_metadata": {
          "name": "proc-macro2",
          "version": "1.0.95",
          "description": "ALLOW: Positive community sentiment",
          "repository": "",
          "keywords": [],
          "categories": [],
          "readme": {
            "raw_markdown": "[](https://docs.rs/proc-macro2/latest/proc_macro2/all.html \"show sidebar\")\n# Crate proc_macro2Copy item path\n[Settings](https://docs.rs/proc-macro2/latest/settings.html)\n[Help](https://docs.rs/proc-macro2/latest/help.html)\nSummary[Source](https://docs.rs/proc-macro2/latest/src/proc_macro2/lib.rs.html#1-1351)\nExpand description\n[![github](https://img.shields.io/badge/github-8da0cb?style=for-the-badge&labelColor=555555&logo=github)](https://github.com/dtolnay/proc-macro2) [![crates-io](https://img.shields.io/badge/crates.io-fc8d62?style=for-the-badge&labelColor=555555&logo=rust)](https://crates.io/crates/proc-macro2) [![docs-rs](https://img.shields.io/badge/docs.rs-66c2a5?style=for-the-badge&labelColor=555555&logo=docs.rs)](https://docs.rs/proc-macro2/latest/proc_macro2/index.html \"mod proc_macro2\")\nA wrapper around the procedural macro API of the compiler\u2019s [`proc_macro`](https://doc.rust-lang.org/proc_macro/index.html \"mod proc_macro\") crate. This library serves two purposes:\n  * **Bring proc-macro-like functionality to other contexts like build.rs and main.rs.** Types from `proc_macro` are entirely specific to procedural macros and cannot ever exist in code outside of a procedural macro. Meanwhile `proc_macro2` types may exist anywhere including non-macro code. By developing foundational libraries like [syn](https://github.com/dtolnay/syn) and [quote](https://github.com/dtolnay/quote) against `proc_macro2` rather than `proc_macro`, the procedural macro ecosystem becomes easily applicable to many other use cases and we avoid reimplementing non-macro equivalents of those libraries.\n  * **Make procedural macros unit testable.** As a consequence of being specific to procedural macros, nothing that uses `proc_macro` can be executed from a unit test. In order for helper libraries or components of a macro to be testable in isolation, they must be implemented using `proc_macro2`.\n\n\n## [\u00a7](https://docs.rs/proc-macro2/latest/proc_macro2/#usage)Usage\nThe skeleton of a typical procedural macro typically looks like this:\n```\nextern crate proc_macro;\n#[proc_macro_derive(MyDerive)]\npub fn my_derive(input: proc_macro::TokenStream) -> proc_macro::TokenStream {\n  let input = proc_macro2::TokenStream::from(input);\n  let output: proc_macro2::TokenStream = {\n    /* transform input */\n  };\n  proc_macro::TokenStream::from(output)\n}\n```\n\nIf parsing with [Syn](https://github.com/dtolnay/syn), you\u2019ll use [`parse_macro_input!`](https://docs.rs/syn/2.0/syn/macro.parse_macro_input.html) instead to propagate parse errors correctly back to the compiler when parsing fails.\n## [\u00a7](https://docs.rs/proc-macro2/latest/proc_macro2/#unstable-features)Unstable features\nThe default feature set of proc-macro2 tracks the most recent stable compiler API. Functionality in `proc_macro` that is not yet stable is not exposed by proc-macro2 by default.\nTo opt into the additional APIs available in the most recent nightly compiler, the `procmacro2_semver_exempt` config flag must be passed to rustc. We will polyfill those nightly-only APIs back to Rust 1.56.0. As these are unstable APIs that track the nightly compiler, minor versions of proc-macro2 may make breaking changes to them at any time.\n```\nRUSTFLAGS='--cfg procmacro2_semver_exempt' cargo build\n```\n\nNote that this must not only be done for your crate, but for any crate that depends on your crate. This infectious nature is intentional, as it serves as a reminder that you are outside of the normal semver guarantees.\nSemver exempt methods are marked as such in the proc-macro2 documentation.\n## [\u00a7](https://docs.rs/proc-macro2/latest/proc_macro2/#thread-safety)Thread-Safety\nMost types in this crate are `!Sync` because the underlying compiler types make use of thread-local memory, meaning they cannot be accessed from a different thread.\n## Modules[\u00a7](https://docs.rs/proc-macro2/latest/proc_macro2/#modules)\n\n[extra](https://docs.rs/proc-macro2/latest/proc_macro2/extra/index.html \"mod proc_macro2::extra\")\n    Items which do not have a correspondence to any API in the proc_macro crate, but are necessary to include in proc-macro2.\n\n[token_stream](https://docs.rs/proc-macro2/latest/proc_macro2/token_stream/index.html \"mod proc_macro2::token_stream\")\n    Public implementation details for the `TokenStream` type, such as iterators.\n## Structs[\u00a7](https://docs.rs/proc-macro2/latest/proc_macro2/#structs)\n\n[Group](https://docs.rs/proc-macro2/latest/proc_macro2/struct.Group.html \"struct proc_macro2::Group\")\n    A delimited token stream.\n\n[Ident](https://docs.rs/proc-macro2/latest/proc_macro2/struct.Ident.html \"struct proc_macro2::Ident\")\n    A word of Rust code, which may be a keyword or legal variable name.\n\n[LexError](https://docs.rs/proc-macro2/latest/proc_macro2/struct.LexError.html \"struct proc_macro2::LexError\")\n    Error returned from `TokenStream::from_str`.\n\n[LineColumn](https://docs.rs/proc-macro2/latest/proc_macro2/struct.LineColumn.html \"struct proc_macro2::LineColumn\")`span-locations`\n    A line-column pair representing the start or end of a `Span`.\n\n[Literal](https://docs.rs/proc-macro2/latest/proc_macro2/struct.Literal.html \"struct proc_macro2::Literal\")\n    A literal string (`\"hello\"`), byte string (`b\"hello\"`), character (`'a'`), byte character (`b'a'`), an integer or floating point number with or without a suffix (`1`, `1u8`, `2.3`, `2.3f32`).\n\n[Punct](https://docs.rs/proc-macro2/latest/proc_macro2/struct.Punct.html \"struct proc_macro2::Punct\")\n    A `Punct` is a single punctuation character like `+`, `-` or `#`.\n\n[Span](https://docs.rs/proc-macro2/latest/proc_macro2/struct.Span.html \"struct proc_macro2::Span\")\n    A region of source code, along with macro expansion information.\n\n[TokenStream](https://docs.rs/proc-macro2/latest/proc_macro2/struct.TokenStream.html \"struct proc_macro2::TokenStream\")\n    An abstract stream of tokens, or more concretely a sequence of token trees.\n## Enums[\u00a7](https://docs.rs/proc-macro2/latest/proc_macro2/#enums)\n\n[Delimiter](https://docs.rs/proc-macro2/latest/proc_macro2/enum.Delimiter.html \"enum proc_macro2::Delimiter\")\n    Describes how a sequence of token trees is delimited.\n\n[Spacing](https://docs.rs/proc-macro2/latest/proc_macro2/enum.Spacing.html \"enum proc_macro2::Spacing\")\n    Whether a `Punct` is followed immediately by another `Punct` or followed by another token or whitespace.\n\n[TokenTree](https://docs.rs/proc-macro2/latest/proc_macro2/enum.TokenTree.html \"enum proc_macro2::TokenTree\")\n    A single token or a delimited sequence of token trees (e.g. `[1, (), ..]`).\n",
            "markdown_with_citations": "[](https://docs.rs/proc-macro2/latest/proc_macro2/all.html \"show sidebar\")\n# Crate proc_macro2Copy item path\nSettings\u27e81\u27e9\nHelp\u27e82\u27e9\nSummarySource\u27e83\u27e9\nExpand description\n![github\u27e84\u27e9](https://github.com/dtolnay/proc-macro2) ![crates-io\u27e85\u27e9](https://crates.io/crates/proc-macro2) ![docs-rs\u27e86\u27e9](https://docs.rs/proc-macro2/latest/proc_macro2/index.html \"mod proc_macro2\")\nA wrapper around the procedural macro API of the compiler\u2019s `proc_macro`\u27e87\u27e9 crate. This library serves two purposes:\n  * **Bring proc-macro-like functionality to other contexts like build.rs and main.rs.** Types from `proc_macro` are entirely specific to procedural macros and cannot ever exist in code outside of a procedural macro. Meanwhile `proc_macro2` types may exist anywhere including non-macro code. By developing foundational libraries like syn\u27e88\u27e9 and quote\u27e89\u27e9 against `proc_macro2` rather than `proc_macro`, the procedural macro ecosystem becomes easily applicable to many other use cases and we avoid reimplementing non-macro equivalents of those libraries.\n  * **Make procedural macros unit testable.** As a consequence of being specific to procedural macros, nothing that uses `proc_macro` can be executed from a unit test. In order for helper libraries or components of a macro to be testable in isolation, they must be implemented using `proc_macro2`.\n\n\n## \u00a7\u27e810\u27e9Usage\nThe skeleton of a typical procedural macro typically looks like this:\n```\nextern crate proc_macro;\n#[proc_macro_derive(MyDerive)]\npub fn my_derive(input: proc_macro::TokenStream) -> proc_macro::TokenStream {\n  let input = proc_macro2::TokenStream::from(input);\n  let output: proc_macro2::TokenStream = {\n    /* transform input */\n  };\n  proc_macro::TokenStream::from(output)\n}\n```\n\nIf parsing with Syn\u27e88\u27e9, you\u2019ll use `parse_macro_input!`\u27e811\u27e9 instead to propagate parse errors correctly back to the compiler when parsing fails.\n## \u00a7\u27e812\u27e9Unstable features\nThe default feature set of proc-macro2 tracks the most recent stable compiler API. Functionality in `proc_macro` that is not yet stable is not exposed by proc-macro2 by default.\nTo opt into the additional APIs available in the most recent nightly compiler, the `procmacro2_semver_exempt` config flag must be passed to rustc. We will polyfill those nightly-only APIs back to Rust 1.56.0. As these are unstable APIs that track the nightly compiler, minor versions of proc-macro2 may make breaking changes to them at any time.\n```\nRUSTFLAGS='--cfg procmacro2_semver_exempt' cargo build\n```\n\nNote that this must not only be done for your crate, but for any crate that depends on your crate. This infectious nature is intentional, as it serves as a reminder that you are outside of the normal semver guarantees.\nSemver exempt methods are marked as such in the proc-macro2 documentation.\n## \u00a7\u27e813\u27e9Thread-Safety\nMost types in this crate are `!Sync` because the underlying compiler types make use of thread-local memory, meaning they cannot be accessed from a different thread.\n## Modules\u00a7\u27e814\u27e9\n\nextra\u27e815\u27e9\n    Items which do not have a correspondence to any API in the proc_macro crate, but are necessary to include in proc-macro2.\n\ntoken_stream\u27e816\u27e9\n    Public implementation details for the `TokenStream` type, such as iterators.\n## Structs\u00a7\u27e817\u27e9\n\nGroup\u27e818\u27e9\n    A delimited token stream.\n\nIdent\u27e819\u27e9\n    A word of Rust code, which may be a keyword or legal variable name.\n\nLexError\u27e820\u27e9\n    Error returned from `TokenStream::from_str`.\n\nLineColumn\u27e821\u27e9`span-locations`\n    A line-column pair representing the start or end of a `Span`.\n\nLiteral\u27e822\u27e9\n    A literal string (`\"hello\"`), byte string (`b\"hello\"`), character (`'a'`), byte character (`b'a'`), an integer or floating point number with or without a suffix (`1`, `1u8`, `2.3`, `2.3f32`).\n\nPunct\u27e823\u27e9\n    A `Punct` is a single punctuation character like `+`, `-` or `#`.\n\nSpan\u27e824\u27e9\n    A region of source code, along with macro expansion information.\n\nTokenStream\u27e825\u27e9\n    An abstract stream of tokens, or more concretely a sequence of token trees.\n## Enums\u00a7\u27e826\u27e9\n\nDelimiter\u27e827\u27e9\n    Describes how a sequence of token trees is delimited.\n\nSpacing\u27e828\u27e9\n    Whether a `Punct` is followed immediately by another `Punct` or followed by another token or whitespace.\n\nTokenTree\u27e829\u27e9\n    A single token or a delimited sequence of token trees (e.g. `[1, (), ..]`).\n",
            "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://docs.rs/proc-macro2/latest/settings.html: Settings\n\u27e82\u27e9 https://docs.rs/proc-macro2/latest/help.html: Help\n\u27e83\u27e9 https://docs.rs/proc-macro2/latest/src/proc_macro2/lib.rs.html#1-1351: Source\n\u27e84\u27e9 https://img.shields.io/badge/github-8da0cb?style=for-the-badge&labelColor=555555&logo=github: ![github\n\u27e85\u27e9 https://img.shields.io/badge/crates.io-fc8d62?style=for-the-badge&labelColor=555555&logo=rust: ![crates-io\n\u27e86\u27e9 https://img.shields.io/badge/docs.rs-66c2a5?style=for-the-badge&labelColor=555555&logo=docs.rs: ![docs-rs\n\u27e87\u27e9 https://doc.rust-lang.org/proc_macro/index.html: mod proc_macro - `proc_macro`\n\u27e88\u27e9 https://github.com/dtolnay/syn: syn\n\u27e89\u27e9 https://github.com/dtolnay/quote: quote\n\u27e810\u27e9 https://docs.rs/proc-macro2/latest/proc_macro2/#usage: \u00a7\n\u27e811\u27e9 https://docs.rs/syn/2.0/syn/macro.parse_macro_input.html: `parse_macro_input!`\n\u27e812\u27e9 https://docs.rs/proc-macro2/latest/proc_macro2/#unstable-features: \u00a7\n\u27e813\u27e9 https://docs.rs/proc-macro2/latest/proc_macro2/#thread-safety: \u00a7\n\u27e814\u27e9 https://docs.rs/proc-macro2/latest/proc_macro2/#modules: \u00a7\n\u27e815\u27e9 https://docs.rs/proc-macro2/latest/proc_macro2/extra/index.html: mod proc_macro2::extra - extra\n\u27e816\u27e9 https://docs.rs/proc-macro2/latest/proc_macro2/token_stream/index.html: mod proc_macro2::token_stream - token_stream\n\u27e817\u27e9 https://docs.rs/proc-macro2/latest/proc_macro2/#structs: \u00a7\n\u27e818\u27e9 https://docs.rs/proc-macro2/latest/proc_macro2/struct.Group.html: struct proc_macro2::Group - Group\n\u27e819\u27e9 https://docs.rs/proc-macro2/latest/proc_macro2/struct.Ident.html: struct proc_macro2::Ident - Ident\n\u27e820\u27e9 https://docs.rs/proc-macro2/latest/proc_macro2/struct.LexError.html: struct proc_macro2::LexError - LexError\n\u27e821\u27e9 https://docs.rs/proc-macro2/latest/proc_macro2/struct.LineColumn.html: struct proc_macro2::LineColumn - LineColumn\n\u27e822\u27e9 https://docs.rs/proc-macro2/latest/proc_macro2/struct.Literal.html: struct proc_macro2::Literal - Literal\n\u27e823\u27e9 https://docs.rs/proc-macro2/latest/proc_macro2/struct.Punct.html: struct proc_macro2::Punct - Punct\n\u27e824\u27e9 https://docs.rs/proc-macro2/latest/proc_macro2/struct.Span.html: struct proc_macro2::Span - Span\n\u27e825\u27e9 https://docs.rs/proc-macro2/latest/proc_macro2/struct.TokenStream.html: struct proc_macro2::TokenStream - TokenStream\n\u27e826\u27e9 https://docs.rs/proc-macro2/latest/proc_macro2/#enums: \u00a7\n\u27e827\u27e9 https://docs.rs/proc-macro2/latest/proc_macro2/enum.Delimiter.html: enum proc_macro2::Delimiter - Delimiter\n\u27e828\u27e9 https://docs.rs/proc-macro2/latest/proc_macro2/enum.Spacing.html: enum proc_macro2::Spacing - Spacing\n\u27e829\u27e9 https://docs.rs/proc-macro2/latest/proc_macro2/enum.TokenTree.html: enum proc_macro2::TokenTree - TokenTree\n",
            "fit_markdown": "",
            "fit_html": ""
          },
          "downloads": 0,
          "github_stars": 0,
          "dependencies": [],
          "features": {},
          "code_snippets": [],
          "readme_sections": {},
          "librs_downloads": null,
          "source": "crates.io",
          "enhanced_scraping": {},
          "enhanced_features": [],
          "enhanced_dependencies": []
        },
        "enriched_crate": {
          "name": "proc-macro2",
          "version": "1.0.95",
          "description": "ALLOW: Positive community sentiment",
          "repository": "",
          "keywords": [],
          "categories": [],
          "readme": {
            "raw_markdown": "[](https://docs.rs/proc-macro2/latest/proc_macro2/all.html \"show sidebar\")\n# Crate proc_macro2Copy item path\n[Settings](https://docs.rs/proc-macro2/latest/settings.html)\n[Help](https://docs.rs/proc-macro2/latest/help.html)\nSummary[Source](https://docs.rs/proc-macro2/latest/src/proc_macro2/lib.rs.html#1-1351)\nExpand description\n[![github](https://img.shields.io/badge/github-8da0cb?style=for-the-badge&labelColor=555555&logo=github)](https://github.com/dtolnay/proc-macro2) [![crates-io](https://img.shields.io/badge/crates.io-fc8d62?style=for-the-badge&labelColor=555555&logo=rust)](https://crates.io/crates/proc-macro2) [![docs-rs](https://img.shields.io/badge/docs.rs-66c2a5?style=for-the-badge&labelColor=555555&logo=docs.rs)](https://docs.rs/proc-macro2/latest/proc_macro2/index.html \"mod proc_macro2\")\nA wrapper around the procedural macro API of the compiler\u2019s [`proc_macro`](https://doc.rust-lang.org/proc_macro/index.html \"mod proc_macro\") crate. This library serves two purposes:\n  * **Bring proc-macro-like functionality to other contexts like build.rs and main.rs.** Types from `proc_macro` are entirely specific to procedural macros and cannot ever exist in code outside of a procedural macro. Meanwhile `proc_macro2` types may exist anywhere including non-macro code. By developing foundational libraries like [syn](https://github.com/dtolnay/syn) and [quote](https://github.com/dtolnay/quote) against `proc_macro2` rather than `proc_macro`, the procedural macro ecosystem becomes easily applicable to many other use cases and we avoid reimplementing non-macro equivalents of those libraries.\n  * **Make procedural macros unit testable.** As a consequence of being specific to procedural macros, nothing that uses `proc_macro` can be executed from a unit test. In order for helper libraries or components of a macro to be testable in isolation, they must be implemented using `proc_macro2`.\n\n\n## [\u00a7](https://docs.rs/proc-macro2/latest/proc_macro2/#usage)Usage\nThe skeleton of a typical procedural macro typically looks like this:\n```\nextern crate proc_macro;\n#[proc_macro_derive(MyDerive)]\npub fn my_derive(input: proc_macro::TokenStream) -> proc_macro::TokenStream {\n  let input = proc_macro2::TokenStream::from(input);\n  let output: proc_macro2::TokenStream = {\n    /* transform input */\n  };\n  proc_macro::TokenStream::from(output)\n}\n```\n\nIf parsing with [Syn](https://github.com/dtolnay/syn), you\u2019ll use [`parse_macro_input!`](https://docs.rs/syn/2.0/syn/macro.parse_macro_input.html) instead to propagate parse errors correctly back to the compiler when parsing fails.\n## [\u00a7](https://docs.rs/proc-macro2/latest/proc_macro2/#unstable-features)Unstable features\nThe default feature set of proc-macro2 tracks the most recent stable compiler API. Functionality in `proc_macro` that is not yet stable is not exposed by proc-macro2 by default.\nTo opt into the additional APIs available in the most recent nightly compiler, the `procmacro2_semver_exempt` config flag must be passed to rustc. We will polyfill those nightly-only APIs back to Rust 1.56.0. As these are unstable APIs that track the nightly compiler, minor versions of proc-macro2 may make breaking changes to them at any time.\n```\nRUSTFLAGS='--cfg procmacro2_semver_exempt' cargo build\n```\n\nNote that this must not only be done for your crate, but for any crate that depends on your crate. This infectious nature is intentional, as it serves as a reminder that you are outside of the normal semver guarantees.\nSemver exempt methods are marked as such in the proc-macro2 documentation.\n## [\u00a7](https://docs.rs/proc-macro2/latest/proc_macro2/#thread-safety)Thread-Safety\nMost types in this crate are `!Sync` because the underlying compiler types make use of thread-local memory, meaning they cannot be accessed from a different thread.\n## Modules[\u00a7](https://docs.rs/proc-macro2/latest/proc_macro2/#modules)\n\n[extra](https://docs.rs/proc-macro2/latest/proc_macro2/extra/index.html \"mod proc_macro2::extra\")\n    Items which do not have a correspondence to any API in the proc_macro crate, but are necessary to include in proc-macro2.\n\n[token_stream](https://docs.rs/proc-macro2/latest/proc_macro2/token_stream/index.html \"mod proc_macro2::token_stream\")\n    Public implementation details for the `TokenStream` type, such as iterators.\n## Structs[\u00a7](https://docs.rs/proc-macro2/latest/proc_macro2/#structs)\n\n[Group](https://docs.rs/proc-macro2/latest/proc_macro2/struct.Group.html \"struct proc_macro2::Group\")\n    A delimited token stream.\n\n[Ident](https://docs.rs/proc-macro2/latest/proc_macro2/struct.Ident.html \"struct proc_macro2::Ident\")\n    A word of Rust code, which may be a keyword or legal variable name.\n\n[LexError](https://docs.rs/proc-macro2/latest/proc_macro2/struct.LexError.html \"struct proc_macro2::LexError\")\n    Error returned from `TokenStream::from_str`.\n\n[LineColumn](https://docs.rs/proc-macro2/latest/proc_macro2/struct.LineColumn.html \"struct proc_macro2::LineColumn\")`span-locations`\n    A line-column pair representing the start or end of a `Span`.\n\n[Literal](https://docs.rs/proc-macro2/latest/proc_macro2/struct.Literal.html \"struct proc_macro2::Literal\")\n    A literal string (`\"hello\"`), byte string (`b\"hello\"`), character (`'a'`), byte character (`b'a'`), an integer or floating point number with or without a suffix (`1`, `1u8`, `2.3`, `2.3f32`).\n\n[Punct](https://docs.rs/proc-macro2/latest/proc_macro2/struct.Punct.html \"struct proc_macro2::Punct\")\n    A `Punct` is a single punctuation character like `+`, `-` or `#`.\n\n[Span](https://docs.rs/proc-macro2/latest/proc_macro2/struct.Span.html \"struct proc_macro2::Span\")\n    A region of source code, along with macro expansion information.\n\n[TokenStream](https://docs.rs/proc-macro2/latest/proc_macro2/struct.TokenStream.html \"struct proc_macro2::TokenStream\")\n    An abstract stream of tokens, or more concretely a sequence of token trees.\n## Enums[\u00a7](https://docs.rs/proc-macro2/latest/proc_macro2/#enums)\n\n[Delimiter](https://docs.rs/proc-macro2/latest/proc_macro2/enum.Delimiter.html \"enum proc_macro2::Delimiter\")\n    Describes how a sequence of token trees is delimited.\n\n[Spacing](https://docs.rs/proc-macro2/latest/proc_macro2/enum.Spacing.html \"enum proc_macro2::Spacing\")\n    Whether a `Punct` is followed immediately by another `Punct` or followed by another token or whitespace.\n\n[TokenTree](https://docs.rs/proc-macro2/latest/proc_macro2/enum.TokenTree.html \"enum proc_macro2::TokenTree\")\n    A single token or a delimited sequence of token trees (e.g. `[1, (), ..]`).\n",
            "markdown_with_citations": "[](https://docs.rs/proc-macro2/latest/proc_macro2/all.html \"show sidebar\")\n# Crate proc_macro2Copy item path\nSettings\u27e81\u27e9\nHelp\u27e82\u27e9\nSummarySource\u27e83\u27e9\nExpand description\n![github\u27e84\u27e9](https://github.com/dtolnay/proc-macro2) ![crates-io\u27e85\u27e9](https://crates.io/crates/proc-macro2) ![docs-rs\u27e86\u27e9](https://docs.rs/proc-macro2/latest/proc_macro2/index.html \"mod proc_macro2\")\nA wrapper around the procedural macro API of the compiler\u2019s `proc_macro`\u27e87\u27e9 crate. This library serves two purposes:\n  * **Bring proc-macro-like functionality to other contexts like build.rs and main.rs.** Types from `proc_macro` are entirely specific to procedural macros and cannot ever exist in code outside of a procedural macro. Meanwhile `proc_macro2` types may exist anywhere including non-macro code. By developing foundational libraries like syn\u27e88\u27e9 and quote\u27e89\u27e9 against `proc_macro2` rather than `proc_macro`, the procedural macro ecosystem becomes easily applicable to many other use cases and we avoid reimplementing non-macro equivalents of those libraries.\n  * **Make procedural macros unit testable.** As a consequence of being specific to procedural macros, nothing that uses `proc_macro` can be executed from a unit test. In order for helper libraries or components of a macro to be testable in isolation, they must be implemented using `proc_macro2`.\n\n\n## \u00a7\u27e810\u27e9Usage\nThe skeleton of a typical procedural macro typically looks like this:\n```\nextern crate proc_macro;\n#[proc_macro_derive(MyDerive)]\npub fn my_derive(input: proc_macro::TokenStream) -> proc_macro::TokenStream {\n  let input = proc_macro2::TokenStream::from(input);\n  let output: proc_macro2::TokenStream = {\n    /* transform input */\n  };\n  proc_macro::TokenStream::from(output)\n}\n```\n\nIf parsing with Syn\u27e88\u27e9, you\u2019ll use `parse_macro_input!`\u27e811\u27e9 instead to propagate parse errors correctly back to the compiler when parsing fails.\n## \u00a7\u27e812\u27e9Unstable features\nThe default feature set of proc-macro2 tracks the most recent stable compiler API. Functionality in `proc_macro` that is not yet stable is not exposed by proc-macro2 by default.\nTo opt into the additional APIs available in the most recent nightly compiler, the `procmacro2_semver_exempt` config flag must be passed to rustc. We will polyfill those nightly-only APIs back to Rust 1.56.0. As these are unstable APIs that track the nightly compiler, minor versions of proc-macro2 may make breaking changes to them at any time.\n```\nRUSTFLAGS='--cfg procmacro2_semver_exempt' cargo build\n```\n\nNote that this must not only be done for your crate, but for any crate that depends on your crate. This infectious nature is intentional, as it serves as a reminder that you are outside of the normal semver guarantees.\nSemver exempt methods are marked as such in the proc-macro2 documentation.\n## \u00a7\u27e813\u27e9Thread-Safety\nMost types in this crate are `!Sync` because the underlying compiler types make use of thread-local memory, meaning they cannot be accessed from a different thread.\n## Modules\u00a7\u27e814\u27e9\n\nextra\u27e815\u27e9\n    Items which do not have a correspondence to any API in the proc_macro crate, but are necessary to include in proc-macro2.\n\ntoken_stream\u27e816\u27e9\n    Public implementation details for the `TokenStream` type, such as iterators.\n## Structs\u00a7\u27e817\u27e9\n\nGroup\u27e818\u27e9\n    A delimited token stream.\n\nIdent\u27e819\u27e9\n    A word of Rust code, which may be a keyword or legal variable name.\n\nLexError\u27e820\u27e9\n    Error returned from `TokenStream::from_str`.\n\nLineColumn\u27e821\u27e9`span-locations`\n    A line-column pair representing the start or end of a `Span`.\n\nLiteral\u27e822\u27e9\n    A literal string (`\"hello\"`), byte string (`b\"hello\"`), character (`'a'`), byte character (`b'a'`), an integer or floating point number with or without a suffix (`1`, `1u8`, `2.3`, `2.3f32`).\n\nPunct\u27e823\u27e9\n    A `Punct` is a single punctuation character like `+`, `-` or `#`.\n\nSpan\u27e824\u27e9\n    A region of source code, along with macro expansion information.\n\nTokenStream\u27e825\u27e9\n    An abstract stream of tokens, or more concretely a sequence of token trees.\n## Enums\u00a7\u27e826\u27e9\n\nDelimiter\u27e827\u27e9\n    Describes how a sequence of token trees is delimited.\n\nSpacing\u27e828\u27e9\n    Whether a `Punct` is followed immediately by another `Punct` or followed by another token or whitespace.\n\nTokenTree\u27e829\u27e9\n    A single token or a delimited sequence of token trees (e.g. `[1, (), ..]`).\n",
            "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://docs.rs/proc-macro2/latest/settings.html: Settings\n\u27e82\u27e9 https://docs.rs/proc-macro2/latest/help.html: Help\n\u27e83\u27e9 https://docs.rs/proc-macro2/latest/src/proc_macro2/lib.rs.html#1-1351: Source\n\u27e84\u27e9 https://img.shields.io/badge/github-8da0cb?style=for-the-badge&labelColor=555555&logo=github: ![github\n\u27e85\u27e9 https://img.shields.io/badge/crates.io-fc8d62?style=for-the-badge&labelColor=555555&logo=rust: ![crates-io\n\u27e86\u27e9 https://img.shields.io/badge/docs.rs-66c2a5?style=for-the-badge&labelColor=555555&logo=docs.rs: ![docs-rs\n\u27e87\u27e9 https://doc.rust-lang.org/proc_macro/index.html: mod proc_macro - `proc_macro`\n\u27e88\u27e9 https://github.com/dtolnay/syn: syn\n\u27e89\u27e9 https://github.com/dtolnay/quote: quote\n\u27e810\u27e9 https://docs.rs/proc-macro2/latest/proc_macro2/#usage: \u00a7\n\u27e811\u27e9 https://docs.rs/syn/2.0/syn/macro.parse_macro_input.html: `parse_macro_input!`\n\u27e812\u27e9 https://docs.rs/proc-macro2/latest/proc_macro2/#unstable-features: \u00a7\n\u27e813\u27e9 https://docs.rs/proc-macro2/latest/proc_macro2/#thread-safety: \u00a7\n\u27e814\u27e9 https://docs.rs/proc-macro2/latest/proc_macro2/#modules: \u00a7\n\u27e815\u27e9 https://docs.rs/proc-macro2/latest/proc_macro2/extra/index.html: mod proc_macro2::extra - extra\n\u27e816\u27e9 https://docs.rs/proc-macro2/latest/proc_macro2/token_stream/index.html: mod proc_macro2::token_stream - token_stream\n\u27e817\u27e9 https://docs.rs/proc-macro2/latest/proc_macro2/#structs: \u00a7\n\u27e818\u27e9 https://docs.rs/proc-macro2/latest/proc_macro2/struct.Group.html: struct proc_macro2::Group - Group\n\u27e819\u27e9 https://docs.rs/proc-macro2/latest/proc_macro2/struct.Ident.html: struct proc_macro2::Ident - Ident\n\u27e820\u27e9 https://docs.rs/proc-macro2/latest/proc_macro2/struct.LexError.html: struct proc_macro2::LexError - LexError\n\u27e821\u27e9 https://docs.rs/proc-macro2/latest/proc_macro2/struct.LineColumn.html: struct proc_macro2::LineColumn - LineColumn\n\u27e822\u27e9 https://docs.rs/proc-macro2/latest/proc_macro2/struct.Literal.html: struct proc_macro2::Literal - Literal\n\u27e823\u27e9 https://docs.rs/proc-macro2/latest/proc_macro2/struct.Punct.html: struct proc_macro2::Punct - Punct\n\u27e824\u27e9 https://docs.rs/proc-macro2/latest/proc_macro2/struct.Span.html: struct proc_macro2::Span - Span\n\u27e825\u27e9 https://docs.rs/proc-macro2/latest/proc_macro2/struct.TokenStream.html: struct proc_macro2::TokenStream - TokenStream\n\u27e826\u27e9 https://docs.rs/proc-macro2/latest/proc_macro2/#enums: \u00a7\n\u27e827\u27e9 https://docs.rs/proc-macro2/latest/proc_macro2/enum.Delimiter.html: enum proc_macro2::Delimiter - Delimiter\n\u27e828\u27e9 https://docs.rs/proc-macro2/latest/proc_macro2/enum.Spacing.html: enum proc_macro2::Spacing - Spacing\n\u27e829\u27e9 https://docs.rs/proc-macro2/latest/proc_macro2/enum.TokenTree.html: enum proc_macro2::TokenTree - TokenTree\n",
            "fit_markdown": "",
            "fit_html": ""
          },
          "downloads": 0,
          "github_stars": 0,
          "dependencies": [],
          "features": {},
          "code_snippets": [],
          "readme_sections": {},
          "librs_downloads": null,
          "source": "crates.io",
          "enhanced_scraping": {},
          "enhanced_features": [],
          "enhanced_dependencies": [],
          "readme_summary": "The `proc-macro2` crate provides a wrapper around Rust's `proc_macro` API, enabling procedural macro-like functionality in non-macro contexts (e.g., `build.rs` or `main.rs`) and allowing unit testing of procedural macros. It offers types like `TokenStream`, `Span`, `Ident`, and `Literal` for working with token streams and source code regions, while supporting stable and nightly compiler APIs with optional features. The crate also includes thread-safety considerations and utilities for parsing, transforming, and generating Rust code.",
          "feature_summary": null,
          "use_case": "DevTools",
          "score": 9.0,
          "factual_counterfactual": "### Pair 1: Procedural Macro Compatibility  \n\u2705 Factual: The `proc-macro2` crate allows procedural macro-like functionality to be used in contexts outside of procedural macros, such as `build.rs` or `main.rs`.  \n\u274c Counterfactual: The `proc-macro2` crate is restricted to procedural macro contexts and cannot be used in regular Rust code outside of macros.  \n\n---\n\n### Pair 2: Thread Safety  \n\u2705 Factual: Most types in the `proc-macro2` crate are `!Sync` because they rely on thread-local memory from the underlying compiler types, making them unsuitable for access from multiple threads.  \n\u274c Counterfactual: All types in the `proc-macro2` crate are `Sync` and can be safely accessed across multiple threads without restrictions.  \n\n---\n\n### Pair 3: Unit Testing Support  \n\u2705 Factual: The `proc-macro2` crate enables procedural macros to be unit tested by providing types that are independent of the `proc_macro` crate, which cannot be executed in unit tests.  \n\u274c Counterfactual: The `proc-macro2` crate does not support unit testing for procedural macros and requires macros to be tested in full integration scenarios.",
          "source_analysis": null,
          "user_behavior": null,
          "security": null
        }
      },
      "irl_score": 8.6,
      "execution_id": "exec-20833d31-4f0e98c3-1751263823",
      "timestamp": "2025-06-30T06:10:23.647278+00:00",
      "canon_version": "1.3.0"
    },
    "rule_zero_compliant": true
  }
]