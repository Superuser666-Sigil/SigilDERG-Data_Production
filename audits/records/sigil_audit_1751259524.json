[
  {
    "execution_id": "exec-122ee46b-2d423d4d-1751259512",
    "timestamp": "2025-06-30T04:58:32.513144+00:00",
    "sacred_chain": {
      "input_data": "thiserror",
      "context_sources": [
        "crates.io",
        "github.com",
        "lib.rs",
        "docs.rs"
      ],
      "reasoning_steps": [
        "Input canonicalized: 'thiserror' -> 'thiserror'",
        "Context gathered from 4 validated sources",
        "Metadata extracted: 4 fields",
        "Documentation analyzed: quality 7.0",
        "Sentiment analyzed: positive",
        "Ecosystem analyzed: utilities",
        "Quality score synthesized: 7.50",
        "Trust decision: DEFER - Insufficient data for decision",
        "IRL confidence: 8.600"
      ],
      "suggestion": "ALLOW: Positive community sentiment",
      "verdict": "DEFER",
      "audit_info": {
        "metadata": {
          "name": "thiserror",
          "type": "rust_crate",
          "source": "manual_input",
          "extraction_method": "irl_engine"
        },
        "sentiment": {
          "quality_score": 7.0,
          "completeness": 0.8,
          "examples_present": true,
          "api_documented": true
        },
        "ecosystem": {
          "overall": "positive",
          "positive_mentions": 10,
          "negative_mentions": 2,
          "neutral_mentions": 5,
          "total_mentions": 17
        },
        "quality_score": 7.5,
        "verdict_reason": "Insufficient data for decision",
        "sanitized_documentation": {
          "crates_io": {
            "url": "https://crates.io/crates/thiserror",
            "title": "thiserror v2.0.12",
            "content": {
              "raw_markdown": "#  thiserror v2.0.12\nderive(Error) \n  * [ #derive ](https://crates.io/keywords/derive)\n  * [ #error ](https://crates.io/keywords/error)\n  * [ #error-handling ](https://crates.io/keywords/error-handling)\n\n\n  * [ Readme ](https://crates.io/crates/thiserror)\n  * [ 83 Versions ](https://crates.io/crates/thiserror/versions)\n  * [ Dependencies ](https://crates.io/crates/thiserror/dependencies)\n  * [ Dependents ](https://crates.io/crates/thiserror/reverse_dependencies)\n\n\n## Metadata\n4 months ago \nv1.61.0 \n[ MIT ](https://choosealicense.com/licenses/mit) OR [ Apache-2.0 ](https://choosealicense.com/licenses/apache-2.0)\n28 KiB \n## Install\nRun the following Cargo command in your project directory:\ncargo add thiserror\nOr add the following line to your Cargo.toml:\nthiserror = \"2.0.12\"\n## Documentation\n[ docs.rs/thiserror ](https://docs.rs/thiserror)\n## Repository\n[ github.com/dtolnay/thiserror ](https://github.com/dtolnay/thiserror)\n## Owners\n## Categories\n  * [Rust patterns](https://crates.io/categories/rust-patterns)\n\n\n[ Report crate ](https://crates.io/support?crate=thiserror&inquire=crate-violation)\n### Stats Overview\n456,073,388 Downloads all time\n83 Versions published\n#### Downloads over the last 90 days\nDisplay as \nStacked \n  * Stacked \n  * Unstacked \n\n\nLoading\u2026\n",
              "markdown_with_citations": "#  thiserror v2.0.12\nderive(Error) \n  *  #derive \u27e81\u27e9\n  *  #error \u27e82\u27e9\n  *  #error-handling \u27e83\u27e9\n\n\n  *  Readme \u27e84\u27e9\n  *  83 Versions \u27e85\u27e9\n  *  Dependencies \u27e86\u27e9\n  *  Dependents \u27e87\u27e9\n\n\n## Metadata\n4 months ago \nv1.61.0 \n MIT \u27e88\u27e9 OR  Apache-2.0 \u27e89\u27e9\n28 KiB \n## Install\nRun the following Cargo command in your project directory:\ncargo add thiserror\nOr add the following line to your Cargo.toml:\nthiserror = \"2.0.12\"\n## Documentation\n docs.rs/thiserror \u27e810\u27e9\n## Repository\n github.com/dtolnay/thiserror \u27e811\u27e9\n## Owners\n## Categories\n  * Rust patterns\u27e812\u27e9\n\n\n Report crate \u27e813\u27e9\n### Stats Overview\n456,073,388 Downloads all time\n83 Versions published\n#### Downloads over the last 90 days\nDisplay as \nStacked \n  * Stacked \n  * Unstacked \n\n\nLoading\u2026\n",
              "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://crates.io/keywords/derive:  #derive \n\u27e82\u27e9 https://crates.io/keywords/error:  #error \n\u27e83\u27e9 https://crates.io/keywords/error-handling:  #error-handling \n\u27e84\u27e9 https://crates.io/crates/thiserror:  Readme \n\u27e85\u27e9 https://crates.io/crates/thiserror/versions:  83 Versions \n\u27e86\u27e9 https://crates.io/crates/thiserror/dependencies:  Dependencies \n\u27e87\u27e9 https://crates.io/crates/thiserror/reverse_dependencies:  Dependents \n\u27e88\u27e9 https://choosealicense.com/licenses/mit:  MIT \n\u27e89\u27e9 https://choosealicense.com/licenses/apache-2.0:  Apache-2.0 \n\u27e810\u27e9 https://docs.rs/thiserror:  docs.rs/thiserror \n\u27e811\u27e9 https://github.com/dtolnay/thiserror:  github.com/dtolnay/thiserror \n\u27e812\u27e9 https://crates.io/categories/rust-patterns: Rust patterns\n\u27e813\u27e9 https://crates.io/support?crate=thiserror&inquire=crate-violation:  Report crate \n",
              "fit_markdown": "",
              "fit_html": ""
            },
            "structured_data": {},
            "quality_score": 3.0,
            "extraction_method": "crawl4ai",
            "error": null,
            "metadata": {
              "doc_type": "docs",
              "content_length": 1278,
              "has_structured_data": false,
              "crawl_success": true
            },
            "timestamp": "113302.2521642"
          },
          "docs_rs": {
            "url": "https://docs.rs/thiserror",
            "title": "Crate thiserrorCopy item path",
            "content": {
              "raw_markdown": "[](https://docs.rs/thiserror/latest/thiserror/all.html \"show sidebar\")\n# Crate thiserrorCopy item path\n[Settings](https://docs.rs/thiserror/latest/settings.html)\n[Help](https://docs.rs/thiserror/latest/help.html)\nSummary[Source](https://docs.rs/thiserror/latest/src/thiserror/lib.rs.html#1-303)\nExpand description\n[![github](https://img.shields.io/badge/github-8da0cb?style=for-the-badge&labelColor=555555&logo=github)](https://github.com/dtolnay/thiserror) [![crates-io](https://img.shields.io/badge/crates.io-fc8d62?style=for-the-badge&labelColor=555555&logo=rust)](https://crates.io/crates/thiserror) [![docs-rs](https://img.shields.io/badge/docs.rs-66c2a5?style=for-the-badge&labelColor=555555&logo=docs.rs)](https://docs.rs/thiserror)\nThis library provides a convenient derive macro for the standard library\u2019s [`std::error::Error`](https://doc.rust-lang.org/core/error/trait.Error.html \"trait core::error::Error\") trait.\n## [\u00a7](https://docs.rs/thiserror/latest/thiserror/#example)Example\n```\nuse thiserror::Error;\n#[derive(Error, Debug)]\npub enum DataStoreError {\n  #[error(\"data store disconnected\")]\n  Disconnect(#[from] io::Error),\n  #[error(\"the data for key `{0}` is not available\")]\n  Redaction(String),\n  #[error(\"invalid header (expected {expected:?}, found {found:?})\")]\n  InvalidHeader {\n    expected: String,\n    found: String,\n  },\n  #[error(\"unknown data store error\")]\n  Unknown,\n}\n```\n\n## [\u00a7](https://docs.rs/thiserror/latest/thiserror/#details)Details\n  * Thiserror deliberately does not appear in your public API. You get the same thing as if you had written an implementation of `std::error::Error` by hand, and switching from handwritten impls to thiserror or vice versa is not a breaking change.\n  * Errors may be enums, structs with named fields, tuple structs, or unit structs.\n  * A `Display` impl is generated for your error if you provide `#[error(\"...\")]` messages on the struct or each variant of your enum, as shown above in the example.\nThe messages support a shorthand for interpolating fields from the error.\n    * `#[error(\"{var}\")]` \u27f6 `write!(\"{}\", self.var)`\n    * `#[error(\"{0}\")]` \u27f6 `write!(\"{}\", self.0)`\n    * `#[error(\"{var:?}\")]` \u27f6 `write!(\"{:?}\", self.var)`\n    * `#[error(\"{0:?}\")]` \u27f6 `write!(\"{:?}\", self.0)`\nThese shorthands can be used together with any additional format args, which may be arbitrary expressions. For example:\n```\n#[derive(Error, Debug)]\npub enum Error {\n  #[error(\"invalid rdo_lookahead_frames {0} (expected < {max})\", max = i32::MAX)]\n  InvalidLookahead(u32),\n}\n```\n\nIf one of the additional expression arguments needs to refer to a field of the struct or enum, then refer to named fields as `.var` and tuple fields as `.0`.\n```\n#[derive(Error, Debug)]\npub enum Error {\n  #[error(\"first letter must be lowercase but was {:?}\", first_char(.0))]\n  WrongCase(String),\n  #[error(\"invalid index {idx}, expected at least {} and at most {}\", .limits.lo, .limits.hi)]\n  OutOfBounds { idx: usize, limits: Limits },\n}\n```\n\n  * A `From` impl is generated for each variant that contains a `#[from]` attribute.\nThe variant using `#[from]` must not contain any other fields beyond the source error (and possibly a backtrace \u2014 see below). Usually `#[from]` fields are unnamed, but `#[from]` is allowed on a named field too.\n```\n#[derive(Error, Debug)]\npub enum MyError {\n  Io(#[from] io::Error),\n  Glob(#[from] globset::Error),\n}\n```\n\n  * The Error trait\u2019s `source()` method is implemented to return whichever field has a `#[source]` attribute or is named `source`, if any. This is for identifying the underlying lower level error that caused your error.\nThe `#[from]` attribute always implies that the same field is `#[source]`, so you don\u2019t ever need to specify both attributes.\nAny error type that implements `std::error::Error` or dereferences to `dyn std::error::Error` will work as a source.\n```\n#[derive(Error, Debug)]\npub struct MyError {\n  msg: String,\n  #[source] // optional if field name is `source`\n  source: anyhow::Error,\n}\n```\n\n  * The Error trait\u2019s `provide()` method is implemented to provide whichever field has a type named `Backtrace`, if any, as a `std::backtrace::Backtrace`. Using `Backtrace` in errors requires a nightly compiler with Rust version 1.73 or newer.\n```\nuse std::backtrace::Backtrace;\n#[derive(Error, Debug)]\npub struct MyError {\n  msg: String,\n  backtrace: Backtrace, // automatically detected\n}\n```\n\n  * If a field is both a source (named `source`, or has `#[source]` or `#[from]` attribute) _and_ is marked `#[backtrace]`, then the Error trait\u2019s `provide()` method is forwarded to the source\u2019s `provide` so that both layers of the error share the same backtrace. The `#[backtrace]` attribute requires a nightly compiler with Rust version 1.73 or newer.\n```\n#[derive(Error, Debug)]\npub enum MyError {\n  Io {\n    #[backtrace]\n    source: io::Error,\n  },\n}\n```\n\n  * For variants that use `#[from]` and also contain a `Backtrace` field, a backtrace is captured from within the `From` impl.\n```\n#[derive(Error, Debug)]\npub enum MyError {\n  Io {\n    #[from]\n    source: io::Error,\n    backtrace: Backtrace,\n  },\n}\n```\n\n  * Errors may use `error(transparent)` to forward the source and Display methods straight through to an underlying error without adding an additional message. This would be appropriate for enums that need an \u201canything else\u201d variant.\n```\n#[derive(Error, Debug)]\npub enum MyError {\n  ...\n  #[error(transparent)]\n  Other(#[from] anyhow::Error), // source and Display delegate to anyhow::Error\n}\n```\n\nAnother use case is hiding implementation details of an error representation behind an opaque error type, so that the representation is able to evolve without breaking the crate\u2019s public API.\n```\n// PublicError is public, but opaque and easy to keep compatible.\n#[derive(Error, Debug)]\n#[error(transparent)]\npub struct PublicError(#[from] ErrorRepr);\nimpl PublicError {\n  // Accessors for anything we do want to expose publicly.\n}\n// Private and free to change across minor version of the crate.\n#[derive(Error, Debug)]\nenum ErrorRepr {\n  ...\n}\n```\n\n  * See also the [`anyhow`](https://github.com/dtolnay/anyhow) library for a convenient single error type to use in application code.\n\n\n## Derive Macros[\u00a7](https://docs.rs/thiserror/latest/thiserror/#derives)\n\n[Error](https://docs.rs/thiserror/latest/thiserror/derive.Error.html \"derive thiserror::Error\")\n\n",
              "markdown_with_citations": "[](https://docs.rs/thiserror/latest/thiserror/all.html \"show sidebar\")\n# Crate thiserrorCopy item path\nSettings\u27e81\u27e9\nHelp\u27e82\u27e9\nSummarySource\u27e83\u27e9\nExpand description\n![github\u27e84\u27e9](https://github.com/dtolnay/thiserror) ![crates-io\u27e85\u27e9](https://crates.io/crates/thiserror) ![docs-rs\u27e86\u27e9](https://docs.rs/thiserror)\nThis library provides a convenient derive macro for the standard library\u2019s `std::error::Error`\u27e87\u27e9 trait.\n## \u00a7\u27e88\u27e9Example\n```\nuse thiserror::Error;\n#[derive(Error, Debug)]\npub enum DataStoreError {\n  #[error(\"data store disconnected\")]\n  Disconnect(#[from] io::Error),\n  #[error(\"the data for key `{0}` is not available\")]\n  Redaction(String),\n  #[error(\"invalid header (expected {expected:?}, found {found:?})\")]\n  InvalidHeader {\n    expected: String,\n    found: String,\n  },\n  #[error(\"unknown data store error\")]\n  Unknown,\n}\n```\n\n## \u00a7\u27e89\u27e9Details\n  * Thiserror deliberately does not appear in your public API. You get the same thing as if you had written an implementation of `std::error::Error` by hand, and switching from handwritten impls to thiserror or vice versa is not a breaking change.\n  * Errors may be enums, structs with named fields, tuple structs, or unit structs.\n  * A `Display` impl is generated for your error if you provide `#[error(\"...\")]` messages on the struct or each variant of your enum, as shown above in the example.\nThe messages support a shorthand for interpolating fields from the error.\n    * `#[error(\"{var}\")]` \u27f6 `write!(\"{}\", self.var)`\n    * `#[error(\"{0}\")]` \u27f6 `write!(\"{}\", self.0)`\n    * `#[error(\"{var:?}\")]` \u27f6 `write!(\"{:?}\", self.var)`\n    * `#[error(\"{0:?}\")]` \u27f6 `write!(\"{:?}\", self.0)`\nThese shorthands can be used together with any additional format args, which may be arbitrary expressions. For example:\n```\n#[derive(Error, Debug)]\npub enum Error {\n  #[error(\"invalid rdo_lookahead_frames {0} (expected < {max})\", max = i32::MAX)]\n  InvalidLookahead(u32),\n}\n```\n\nIf one of the additional expression arguments needs to refer to a field of the struct or enum, then refer to named fields as `.var` and tuple fields as `.0`.\n```\n#[derive(Error, Debug)]\npub enum Error {\n  #[error(\"first letter must be lowercase but was {:?}\", first_char(.0))]\n  WrongCase(String),\n  #[error(\"invalid index {idx}, expected at least {} and at most {}\", .limits.lo, .limits.hi)]\n  OutOfBounds { idx: usize, limits: Limits },\n}\n```\n\n  * A `From` impl is generated for each variant that contains a `#[from]` attribute.\nThe variant using `#[from]` must not contain any other fields beyond the source error (and possibly a backtrace \u2014 see below). Usually `#[from]` fields are unnamed, but `#[from]` is allowed on a named field too.\n```\n#[derive(Error, Debug)]\npub enum MyError {\n  Io(#[from] io::Error),\n  Glob(#[from] globset::Error),\n}\n```\n\n  * The Error trait\u2019s `source()` method is implemented to return whichever field has a `#[source]` attribute or is named `source`, if any. This is for identifying the underlying lower level error that caused your error.\nThe `#[from]` attribute always implies that the same field is `#[source]`, so you don\u2019t ever need to specify both attributes.\nAny error type that implements `std::error::Error` or dereferences to `dyn std::error::Error` will work as a source.\n```\n#[derive(Error, Debug)]\npub struct MyError {\n  msg: String,\n  #[source] // optional if field name is `source`\n  source: anyhow::Error,\n}\n```\n\n  * The Error trait\u2019s `provide()` method is implemented to provide whichever field has a type named `Backtrace`, if any, as a `std::backtrace::Backtrace`. Using `Backtrace` in errors requires a nightly compiler with Rust version 1.73 or newer.\n```\nuse std::backtrace::Backtrace;\n#[derive(Error, Debug)]\npub struct MyError {\n  msg: String,\n  backtrace: Backtrace, // automatically detected\n}\n```\n\n  * If a field is both a source (named `source`, or has `#[source]` or `#[from]` attribute) _and_ is marked `#[backtrace]`, then the Error trait\u2019s `provide()` method is forwarded to the source\u2019s `provide` so that both layers of the error share the same backtrace. The `#[backtrace]` attribute requires a nightly compiler with Rust version 1.73 or newer.\n```\n#[derive(Error, Debug)]\npub enum MyError {\n  Io {\n    #[backtrace]\n    source: io::Error,\n  },\n}\n```\n\n  * For variants that use `#[from]` and also contain a `Backtrace` field, a backtrace is captured from within the `From` impl.\n```\n#[derive(Error, Debug)]\npub enum MyError {\n  Io {\n    #[from]\n    source: io::Error,\n    backtrace: Backtrace,\n  },\n}\n```\n\n  * Errors may use `error(transparent)` to forward the source and Display methods straight through to an underlying error without adding an additional message. This would be appropriate for enums that need an \u201canything else\u201d variant.\n```\n#[derive(Error, Debug)]\npub enum MyError {\n  ...\n  #[error(transparent)]\n  Other(#[from] anyhow::Error), // source and Display delegate to anyhow::Error\n}\n```\n\nAnother use case is hiding implementation details of an error representation behind an opaque error type, so that the representation is able to evolve without breaking the crate\u2019s public API.\n```\n// PublicError is public, but opaque and easy to keep compatible.\n#[derive(Error, Debug)]\n#[error(transparent)]\npub struct PublicError(#[from] ErrorRepr);\nimpl PublicError {\n  // Accessors for anything we do want to expose publicly.\n}\n// Private and free to change across minor version of the crate.\n#[derive(Error, Debug)]\nenum ErrorRepr {\n  ...\n}\n```\n\n  * See also the `anyhow`\u27e810\u27e9 library for a convenient single error type to use in application code.\n\n\n## Derive Macros\u00a7\u27e811\u27e9\n\nError\u27e812\u27e9\n\n",
              "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://docs.rs/thiserror/latest/settings.html: Settings\n\u27e82\u27e9 https://docs.rs/thiserror/latest/help.html: Help\n\u27e83\u27e9 https://docs.rs/thiserror/latest/src/thiserror/lib.rs.html#1-303: Source\n\u27e84\u27e9 https://img.shields.io/badge/github-8da0cb?style=for-the-badge&labelColor=555555&logo=github: ![github\n\u27e85\u27e9 https://img.shields.io/badge/crates.io-fc8d62?style=for-the-badge&labelColor=555555&logo=rust: ![crates-io\n\u27e86\u27e9 https://img.shields.io/badge/docs.rs-66c2a5?style=for-the-badge&labelColor=555555&logo=docs.rs: ![docs-rs\n\u27e87\u27e9 https://doc.rust-lang.org/core/error/trait.Error.html: trait core::error::Error - `std::error::Error`\n\u27e88\u27e9 https://docs.rs/thiserror/latest/thiserror/#example: \u00a7\n\u27e89\u27e9 https://docs.rs/thiserror/latest/thiserror/#details: \u00a7\n\u27e810\u27e9 https://github.com/dtolnay/anyhow: `anyhow`\n\u27e811\u27e9 https://docs.rs/thiserror/latest/thiserror/#derives: \u00a7\n\u27e812\u27e9 https://docs.rs/thiserror/latest/thiserror/derive.Error.html: derive thiserror::Error - Error\n",
              "fit_markdown": "",
              "fit_html": ""
            },
            "structured_data": {},
            "quality_score": 4.0,
            "extraction_method": "crawl4ai",
            "error": null,
            "metadata": {
              "doc_type": "docs",
              "content_length": 6363,
              "has_structured_data": false,
              "crawl_success": true
            },
            "timestamp": "113302.9603946"
          },
          "lib_rs": {
            "url": "https://lib.rs/crates/thiserror",
            "title": "Untitled",
            "content": {
              "raw_markdown": "###  [83 stable releases](https://lib.rs/crates/thiserror/versions)\n2.0.12 |  Mar 3, 2025   \n---|---  \n2.0.9 |  Dec 21, 2024   \n2.0.3 |  Nov 10, 2024   \n1.0.69 |  Nov 10, 2024   \n1.0.6 |  Nov 19, 2019   \n#**14** in [Rust patterns](https://lib.rs/rust-patterns \"Shared solutions for particular situations specific to programming in Rust.\")\nDownload history 6659397/week @ 2025-03-08 7212470/week @ 2025-03-15 7609180/week @ 2025-03-22 6629810/week @ 2025-03-29 7060335/week @ 2025-04-05 6241618/week @ 2025-04-12 6161789/week @ 2025-04-19 6076443/week @ 2025-04-26 6118091/week @ 2025-05-03 6302024/week @ 2025-05-10 6545286/week @ 2025-05-17 5740768/week @ 2025-05-24 6126508/week @ 2025-05-31 6378566/week @ 2025-06-07 6800287/week @ 2025-06-14 6151507/week @ 2025-06-21\n**26,450,419** downloads per month Used in [**59,245** crates (23,631 directly)](https://lib.rs/crates/thiserror/rev)\n**MIT/Apache**\n39KB  508 lines\n# derive(Error)\n[![github](https://img.shields.io/badge/github-dtolnay/thiserror-8da0cb?style=for-the-badge&labelColor=555555&logo=github)](https://github.com/dtolnay/thiserror) [![crates.io](https://img.shields.io/crates/v/thiserror.svg?style=for-the-badge&color=fc8d62&logo=rust)](https://crates.io/crates/thiserror) [![docs.rs](https://img.shields.io/badge/docs.rs-thiserror-66c2a5?style=for-the-badge&labelColor=555555&logo=docs.rs)](https://docs.rs/thiserror) [![build status](https://img.shields.io/github/actions/workflow/status/dtolnay/thiserror/ci.yml?branch=master&style=for-the-badge)](https://github.com/dtolnay/thiserror/actions?query=branch%3Amaster)\nThis library provides a convenient derive macro for the standard library's [```std`::```error`::``Error``](https://doc.rust-lang.org/std/error/trait.Error.html) trait.\n```\n```[``dependencies``]`\n`thiserror ``=` ``\"`2`\"``\n``\n```\n\n_Compiler support: requires rustc 1.61+_\n## Example\n```\n``use` `thiserror`::``Error`;`\n``#``[``derive```(```Error`,` Debug```)```]``\n``pub` `enum` `DataStoreError` ``{`\n  ``#``[``error```(`````\"`data store disconnected`\"`````)```]``\n  Disconnect`(```#``[``from``]`` `io`::``Error`)``,`\n  ``#``[``error```(`````\"`the data for key `{0}` is not available`\"`````)```]``\n  Redaction`(``String``)``,`\n  ``#``[``error```(`````\"`invalid header (expected {expected:?}, found {found:?})`\"`````)```]``\n  InvalidHeader `{`\n    expected`:` `String``,`\n    found`:` `String``,`\n  `}``,`\n  ``#``[``error```(`````\"`unknown data store error`\"`````)```]``\n  Unknown`,`\n```}```\n`\n```\n\n## Details\n  * Thiserror deliberately does not appear in your public API. You get the same thing as if you had written an implementation of ```std`::```error`::``Error`` by hand, and switching from handwritten impls to thiserror or vice versa is not a breaking change.\n  * Errors may be enums, structs with named fields, tuple structs, or unit structs.\n  * A ``Display`` impl is generated for your error if you provide ````#``[``error```(`````\"`...`\"`````)```]```` messages on the struct or each variant of your enum, as shown above in the example.\nThe messages support a shorthand for interpolating fields from the error.\n    * ````#``[``error```(`````\"`{var}`\"`````)```]```` \u27f6 ```write!``(`\"{}\", `self``.`var`)```\n    * ````#``[``error```(`````\"`{0}`\"`````)```]```` \u27f6 ```write!``(`\"{}\", `self``.``0``)```\n    * ````#``[``error```(`````\"`{var:?}`\"`````)```]```` \u27f6 ```write!``(`\"{:?}\", `self``.`var`)```\n    * ````#``[``error```(`````\"`{0:?}`\"`````)```]```` \u27f6 ```write!``(`\"{:?}\", `self``.``0``)```\nThese shorthands can be used together with any additional format args, which may be arbitrary expressions. For example:\n```\n```#``[``derive```(```Error`,` Debug```)```]``\n``pub` `enum` `Error` ``{`\n  ``#``[``error```(`````\"`invalid rdo_lookahead_frames {0} (expected < {max})`\"```,` max `=` i32::MAX```)```]``\n  InvalidLookahead`(``u32``)``,`\n```}```\n`\n```\n\nIf one of the additional expression arguments needs to refer to a field of the struct or enum, then refer to named fields as ```.`var`` and tuple fields as ```.``0```.\n```\n```#``[``derive```(```Error`,` Debug```)```]``\n``pub` `enum` `Error` ``{`\n  ``#``[``error```(`````\"`first letter must be lowercase but was {:?}`\"```,` ``first_char``(```.0```)`````)```]``\n  WrongCase`(``String``)``,`\n  ``#``[``error```(`````\"`invalid index {idx}, expected at least {} and at most {}`\"```,` .limits.lo`,` .limits.hi```)```]``\n  OutOfBounds `{` idx`:` `usize``,` limits`:` Limits `}``,`\n```}```\n`\n```\n\n  * A ```From``` impl is generated for each variant that contains a ````#``[``from``]```` attribute.\nThe variant using ````#``[``from``]```` must not contain any other fields beyond the source error (and possibly a backtrace \u2014 see below). Usually ````#``[``from``]```` fields are unnamed, but ````#``[``from``]```` is allowed on a named field too.\n```\n```#``[``derive```(```Error`,` Debug```)```]``\n``pub` `enum` `MyError` ``{`\n  Io`(```#``[``from``]`` `io`::``Error`)``,`\n  Glob`(```#``[``from``]`` `globset`::``Error`)``,`\n```}```\n`\n```\n\n  * The Error trait's ```source``(``)``` method is implemented to return whichever field has a ````#``[``source``]```` attribute or is named ``source``, if any. This is for identifying the underlying lower level error that caused your error.\nThe ````#``[``from``]```` attribute always implies that the same field is ````#``[``source``]````, so you don't ever need to specify both attributes.\nAny error type that implements ```std`::```error`::``Error`` or dereferences to ``dyn `std`::```error`::``Error`` will work as a source.\n```\n```#``[``derive```(```Error`,` Debug```)```]``\n``pub` `struct` ```MyError` ````{`\n  `msg``:` String,\n  ``#``[``source``]`` ``//` optional if field name is `source``\n  `source``:` `anyhow`::``Error,\n```}```\n`\n```\n\n  * The Error trait's ```provide``(``)``` method is implemented to provide whichever field has a type named ``Backtrace``, if any, as a ```std`::```backtrace`::``Backtrace``. Using ``Backtrace`` in errors requires a nightly compiler with Rust version 1.73 or newer.\n```\n``use` `std`::```backtrace`::``Backtrace`;`\n``#``[``derive```(```Error`,` Debug```)```]``\n``pub` `struct` ```MyError` ````{`\n  `msg``:` String,\n  `backtrace``:` Backtrace, ``//` automatically detected`\n```}```\n`\n```\n\n  * If a field is both a source (named ``source``, or has ````#``[``source``]```` or ````#``[``from``]```` attribute) _and_ is marked ````#``[``backtrace``]````, then the Error trait's ```provide``(``)``` method is forwarded to the source's ``provide`` so that both layers of the error share the same backtrace. The ````#``[``backtrace``]```` attribute requires a nightly compiler with Rust version 1.73 or newer.\n```\n```#``[``derive```(```Error`,` Debug```)```]``\n``pub` `enum` `MyError` ``{`\n  Io `{`\n    ``#``[``backtrace``]``\n    source`:` `io`::``Error`,`\n  `}``,`\n```}```\n`\n```\n\n  * For variants that use ````#``[``from``]```` and also contain a ``Backtrace`` field, a backtrace is captured from within the ```From``` impl.\n```\n```#``[``derive```(```Error`,` Debug```)```]``\n``pub` `enum` `MyError` ``{`\n  Io `{`\n    ``#``[``from``]``\n    source`:` `io`::``Error`,`\n    backtrace`:` Backtrace`,`\n  `}``,`\n```}```\n`\n```\n\n  * Errors may use ```error``(`transparent`)``` to forward the source and Display methods straight through to an underlying error without adding an additional message. This would be appropriate for enums that need an \"anything else\" variant.\n```\n```#``[``derive```(```Error`,` Debug```)```]``\n``pub` `enum` `MyError` ``{`\n  `...`\n  ``#``[``error```(```transparent```)```]``\n  Other`(```#``[``from``]`` `anyhow`::``Error`)``,` ``//` source and Display delegate to anyhow::Error`\n```}```\n`\n```\n\nAnother use case is hiding implementation details of an error representation behind an opaque error type, so that the representation is able to evolve without breaking the crate's public API.\n```\n```//` PublicError is public, but opaque and easy to keep compatible.`\n``#``[``derive```(```Error`,` Debug```)```]``\n``#``[``error```(```transparent```)```]``\n``pub` `struct` ```PublicError````(`#[from] ErrorRepr`)```;`\n``impl` ```PublicError` ````{`\n  ``//` Accessors for anything we do want to expose publicly.`\n```}```\n``//` Private and free to change across minor version of the crate.`\n``#``[``derive```(```Error`,` Debug```)```]``\n``enum` `ErrorRepr` ``{`\n  `...`\n```}```\n`\n```\n\n  * See also the [``anyhow``](https://github.com/dtolnay/anyhow) library for a convenient single error type to use in application code.\n\n\n## Comparison to anyhow\nUse thiserror if you care about designing your own dedicated error type(s) so that the caller receives exactly the information that you choose in the event of failure. This most often applies to library-like code. Use [Anyhow](https://github.com/dtolnay/anyhow) if you don't care what error type your functions return, you just want it to be easy. This is common in application-like code.\n#### License\nLicensed under either of [Apache License, Version 2.0](https://github.com/dtolnay/thiserror/blob/95a512669395f30cf9ae10343149726c0563ed76/LICENSE-APACHE) or [MIT license](https://github.com/dtolnay/thiserror/blob/95a512669395f30cf9ae10343149726c0563ed76/LICENSE-MIT) at your option.  Unless you explicitly state otherwise, any contribution intentionally submitted for inclusion in this crate by you, as defined in the Apache-2.0 license, shall be dual licensed as above, without any additional terms or conditions. \n#### Dependencies\n~185\u2013610KB  ~14K SLoC\n  * [thiserror-impl](https://lib.rs/crates/thiserror-impl \"new\") =2.0.12\n\n\n  * build `build.rs`\n  * dev  [anyhow](https://lib.rs/crates/anyhow \"1.0.73\")\n  * dev  [ref-cast](https://lib.rs/crates/ref-cast \"1.0.18\")\n  * dev  [rustversion](https://lib.rs/crates/rustversion \"1.0.13\")\n  * dev  [trybuild](https://lib.rs/crates/trybuild \"1.0.81\")[+diff](https://lib.rs/crates/trybuild/features#feature-diff)\n\n\n#### [Other feature](https://lib.rs/crates/thiserror/features)\n  * [std](https://lib.rs/crates/thiserror/features#feature-std)\n\n\n  *[SLoC]: approx. additional lines of code\n",
              "markdown_with_citations": "###  83 stable releases\u27e81\u27e9\n2.0.12 |  Mar 3, 2025   \n---|---  \n2.0.9 |  Dec 21, 2024   \n2.0.3 |  Nov 10, 2024   \n1.0.69 |  Nov 10, 2024   \n1.0.6 |  Nov 19, 2019   \n#**14** in Rust patterns\u27e82\u27e9\nDownload history 6659397/week @ 2025-03-08 7212470/week @ 2025-03-15 7609180/week @ 2025-03-22 6629810/week @ 2025-03-29 7060335/week @ 2025-04-05 6241618/week @ 2025-04-12 6161789/week @ 2025-04-19 6076443/week @ 2025-04-26 6118091/week @ 2025-05-03 6302024/week @ 2025-05-10 6545286/week @ 2025-05-17 5740768/week @ 2025-05-24 6126508/week @ 2025-05-31 6378566/week @ 2025-06-07 6800287/week @ 2025-06-14 6151507/week @ 2025-06-21\n**26,450,419** downloads per month Used in **59,245** crates (23,631 directly)\u27e83\u27e9\n**MIT/Apache**\n39KB  508 lines\n# derive(Error)\n![github\u27e84\u27e9](https://github.com/dtolnay/thiserror) ![crates.io\u27e85\u27e9](https://crates.io/crates/thiserror) ![docs.rs\u27e86\u27e9](https://docs.rs/thiserror) ![build status\u27e87\u27e9](https://github.com/dtolnay/thiserror/actions?query=branch%3Amaster)\nThis library provides a convenient derive macro for the standard library's ```std`::```error`::``Error``\u27e88\u27e9 trait.\n```\n```[``dependencies``]`\n`thiserror ``=` ``\"`2`\"``\n``\n```\n\n_Compiler support: requires rustc 1.61+_\n## Example\n```\n``use` `thiserror`::``Error`;`\n``#``[``derive```(```Error`,` Debug```)```]``\n``pub` `enum` `DataStoreError` ``{`\n  ``#``[``error```(`````\"`data store disconnected`\"`````)```]``\n  Disconnect`(```#``[``from``]`` `io`::``Error`)``,`\n  ``#``[``error```(`````\"`the data for key `{0}` is not available`\"`````)```]``\n  Redaction`(``String``)``,`\n  ``#``[``error```(`````\"`invalid header (expected {expected:?}, found {found:?})`\"`````)```]``\n  InvalidHeader `{`\n    expected`:` `String``,`\n    found`:` `String``,`\n  `}``,`\n  ``#``[``error```(`````\"`unknown data store error`\"`````)```]``\n  Unknown`,`\n```}```\n`\n```\n\n## Details\n  * Thiserror deliberately does not appear in your public API. You get the same thing as if you had written an implementation of ```std`::```error`::``Error`` by hand, and switching from handwritten impls to thiserror or vice versa is not a breaking change.\n  * Errors may be enums, structs with named fields, tuple structs, or unit structs.\n  * A ``Display`` impl is generated for your error if you provide ````#``[``error```(`````\"`...`\"`````)```]```` messages on the struct or each variant of your enum, as shown above in the example.\nThe messages support a shorthand for interpolating fields from the error.\n    * ````#``[``error```(`````\"`{var}`\"`````)```]```` \u27f6 ```write!``(`\"{}\", `self``.`var`)```\n    * ````#``[``error```(`````\"`{0}`\"`````)```]```` \u27f6 ```write!``(`\"{}\", `self``.``0``)```\n    * ````#``[``error```(`````\"`{var:?}`\"`````)```]```` \u27f6 ```write!``(`\"{:?}\", `self``.`var`)```\n    * ````#``[``error```(`````\"`{0:?}`\"`````)```]```` \u27f6 ```write!``(`\"{:?}\", `self``.``0``)```\nThese shorthands can be used together with any additional format args, which may be arbitrary expressions. For example:\n```\n```#``[``derive```(```Error`,` Debug```)```]``\n``pub` `enum` `Error` ``{`\n  ``#``[``error```(`````\"`invalid rdo_lookahead_frames {0} (expected < {max})`\"```,` max `=` i32::MAX```)```]``\n  InvalidLookahead`(``u32``)``,`\n```}```\n`\n```\n\nIf one of the additional expression arguments needs to refer to a field of the struct or enum, then refer to named fields as ```.`var`` and tuple fields as ```.``0```.\n```\n```#``[``derive```(```Error`,` Debug```)```]``\n``pub` `enum` `Error` ``{`\n  ``#``[``error```(`````\"`first letter must be lowercase but was {:?}`\"```,` ``first_char``(```.0```)`````)```]``\n  WrongCase`(``String``)``,`\n  ``#``[``error```(`````\"`invalid index {idx}, expected at least {} and at most {}`\"```,` .limits.lo`,` .limits.hi```)```]``\n  OutOfBounds `{` idx`:` `usize``,` limits`:` Limits `}``,`\n```}```\n`\n```\n\n  * A ```From``` impl is generated for each variant that contains a ````#``[``from``]```` attribute.\nThe variant using ````#``[``from``]```` must not contain any other fields beyond the source error (and possibly a backtrace \u2014 see below). Usually ````#``[``from``]```` fields are unnamed, but ````#``[``from``]```` is allowed on a named field too.\n```\n```#``[``derive```(```Error`,` Debug```)```]``\n``pub` `enum` `MyError` ``{`\n  Io`(```#``[``from``]`` `io`::``Error`)``,`\n  Glob`(```#``[``from``]`` `globset`::``Error`)``,`\n```}```\n`\n```\n\n  * The Error trait's ```source``(``)``` method is implemented to return whichever field has a ````#``[``source``]```` attribute or is named ``source``, if any. This is for identifying the underlying lower level error that caused your error.\nThe ````#``[``from``]```` attribute always implies that the same field is ````#``[``source``]````, so you don't ever need to specify both attributes.\nAny error type that implements ```std`::```error`::``Error`` or dereferences to ``dyn `std`::```error`::``Error`` will work as a source.\n```\n```#``[``derive```(```Error`,` Debug```)```]``\n``pub` `struct` ```MyError` ````{`\n  `msg``:` String,\n  ``#``[``source``]`` ``//` optional if field name is `source``\n  `source``:` `anyhow`::``Error,\n```}```\n`\n```\n\n  * The Error trait's ```provide``(``)``` method is implemented to provide whichever field has a type named ``Backtrace``, if any, as a ```std`::```backtrace`::``Backtrace``. Using ``Backtrace`` in errors requires a nightly compiler with Rust version 1.73 or newer.\n```\n``use` `std`::```backtrace`::``Backtrace`;`\n``#``[``derive```(```Error`,` Debug```)```]``\n``pub` `struct` ```MyError` ````{`\n  `msg``:` String,\n  `backtrace``:` Backtrace, ``//` automatically detected`\n```}```\n`\n```\n\n  * If a field is both a source (named ``source``, or has ````#``[``source``]```` or ````#``[``from``]```` attribute) _and_ is marked ````#``[``backtrace``]````, then the Error trait's ```provide``(``)``` method is forwarded to the source's ``provide`` so that both layers of the error share the same backtrace. The ````#``[``backtrace``]```` attribute requires a nightly compiler with Rust version 1.73 or newer.\n```\n```#``[``derive```(```Error`,` Debug```)```]``\n``pub` `enum` `MyError` ``{`\n  Io `{`\n    ``#``[``backtrace``]``\n    source`:` `io`::``Error`,`\n  `}``,`\n```}```\n`\n```\n\n  * For variants that use ````#``[``from``]```` and also contain a ``Backtrace`` field, a backtrace is captured from within the ```From``` impl.\n```\n```#``[``derive```(```Error`,` Debug```)```]``\n``pub` `enum` `MyError` ``{`\n  Io `{`\n    ``#``[``from``]``\n    source`:` `io`::``Error`,`\n    backtrace`:` Backtrace`,`\n  `}``,`\n```}```\n`\n```\n\n  * Errors may use ```error``(`transparent`)``` to forward the source and Display methods straight through to an underlying error without adding an additional message. This would be appropriate for enums that need an \"anything else\" variant.\n```\n```#``[``derive```(```Error`,` Debug```)```]``\n``pub` `enum` `MyError` ``{`\n  `...`\n  ``#``[``error```(```transparent```)```]``\n  Other`(```#``[``from``]`` `anyhow`::``Error`)``,` ``//` source and Display delegate to anyhow::Error`\n```}```\n`\n```\n\nAnother use case is hiding implementation details of an error representation behind an opaque error type, so that the representation is able to evolve without breaking the crate's public API.\n```\n```//` PublicError is public, but opaque and easy to keep compatible.`\n``#``[``derive```(```Error`,` Debug```)```]``\n``#``[``error```(```transparent```)```]``\n``pub` `struct` ```PublicError````(`#[from] ErrorRepr`)```;`\n``impl` ```PublicError` ````{`\n  ``//` Accessors for anything we do want to expose publicly.`\n```}```\n``//` Private and free to change across minor version of the crate.`\n``#``[``derive```(```Error`,` Debug```)```]``\n``enum` `ErrorRepr` ``{`\n  `...`\n```}```\n`\n```\n\n  * See also the ``anyhow``\u27e89\u27e9 library for a convenient single error type to use in application code.\n\n\n## Comparison to anyhow\nUse thiserror if you care about designing your own dedicated error type(s) so that the caller receives exactly the information that you choose in the event of failure. This most often applies to library-like code. Use Anyhow\u27e89\u27e9 if you don't care what error type your functions return, you just want it to be easy. This is common in application-like code.\n#### License\nLicensed under either of Apache License, Version 2.0\u27e810\u27e9 or MIT license\u27e811\u27e9 at your option.  Unless you explicitly state otherwise, any contribution intentionally submitted for inclusion in this crate by you, as defined in the Apache-2.0 license, shall be dual licensed as above, without any additional terms or conditions. \n#### Dependencies\n~185\u2013610KB  ~14K SLoC\n  * thiserror-impl\u27e812\u27e9 =2.0.12\n\n\n  * build `build.rs`\n  * dev  anyhow\u27e813\u27e9\n  * dev  ref-cast\u27e814\u27e9\n  * dev  rustversion\u27e815\u27e9\n  * dev  trybuild\u27e816\u27e9+diff\u27e817\u27e9\n\n\n#### Other feature\u27e818\u27e9\n  * std\u27e819\u27e9\n\n\n  *[SLoC]: approx. additional lines of code\n",
              "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://lib.rs/crates/thiserror/versions: 83 stable releases\n\u27e82\u27e9 https://lib.rs/rust-patterns: Shared solutions for particular situations specific to programming in Rust. - Rust patterns\n\u27e83\u27e9 https://lib.rs/crates/thiserror/rev: **59,245** crates (23,631 directly)\n\u27e84\u27e9 https://img.shields.io/badge/github-dtolnay/thiserror-8da0cb?style=for-the-badge&labelColor=555555&logo=github: ![github\n\u27e85\u27e9 https://img.shields.io/crates/v/thiserror.svg?style=for-the-badge&color=fc8d62&logo=rust: ![crates.io\n\u27e86\u27e9 https://img.shields.io/badge/docs.rs-thiserror-66c2a5?style=for-the-badge&labelColor=555555&logo=docs.rs: ![docs.rs\n\u27e87\u27e9 https://img.shields.io/github/actions/workflow/status/dtolnay/thiserror/ci.yml?branch=master&style=for-the-badge: ![build status\n\u27e88\u27e9 https://doc.rust-lang.org/std/error/trait.Error.html: ```std`::```error`::``Error``\n\u27e89\u27e9 https://github.com/dtolnay/anyhow: ``anyhow``\n\u27e810\u27e9 https://github.com/dtolnay/thiserror/blob/95a512669395f30cf9ae10343149726c0563ed76/LICENSE-APACHE: Apache License, Version 2.0\n\u27e811\u27e9 https://github.com/dtolnay/thiserror/blob/95a512669395f30cf9ae10343149726c0563ed76/LICENSE-MIT: MIT license\n\u27e812\u27e9 https://lib.rs/crates/thiserror-impl: new - thiserror-impl\n\u27e813\u27e9 https://lib.rs/crates/anyhow: 1.0.73 - anyhow\n\u27e814\u27e9 https://lib.rs/crates/ref-cast: 1.0.18 - ref-cast\n\u27e815\u27e9 https://lib.rs/crates/rustversion: 1.0.13 - rustversion\n\u27e816\u27e9 https://lib.rs/crates/trybuild: 1.0.81 - trybuild\n\u27e817\u27e9 https://lib.rs/crates/trybuild/features#feature-diff: +diff\n\u27e818\u27e9 https://lib.rs/crates/thiserror/features: Other feature\n\u27e819\u27e9 https://lib.rs/crates/thiserror/features#feature-std: std\n",
              "fit_markdown": "",
              "fit_html": ""
            },
            "structured_data": {},
            "quality_score": 3.0,
            "extraction_method": "crawl4ai",
            "error": null,
            "metadata": {
              "doc_type": "docs",
              "content_length": 9998,
              "has_structured_data": false,
              "crawl_success": true
            },
            "timestamp": "113303.5762579"
          }
        },
        "crate_analysis": {
          "status": "completed",
          "check": [
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#unicode-ident@1.0.17",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\unicode-ident-1.0.17\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "unicode_ident",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\unicode-ident-1.0.17\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp07ec90wi\\thiserror-2.0.12\\target\\debug\\deps\\libunicode_ident-ea9e5036135f255f.rlib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp07ec90wi\\thiserror-2.0.12\\target\\debug\\deps\\libunicode_ident-ea9e5036135f255f.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#proc-macro2@1.0.93",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\proc-macro2-1.0.93\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\proc-macro2-1.0.93\\build.rs",
                "edition": "2021",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "proc-macro"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp07ec90wi\\thiserror-2.0.12\\target\\debug\\build\\proc-macro2-30ca5d38283c7f87\\build-script-build.exe",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp07ec90wi\\thiserror-2.0.12\\target\\debug\\build\\proc-macro2-30ca5d38283c7f87\\build_script_build.pdb"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmp07ec90wi/thiserror-2.0.12#thiserror@2.0.12",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp07ec90wi\\thiserror-2.0.12\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp07ec90wi\\thiserror-2.0.12\\build.rs",
                "edition": "2021",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp07ec90wi\\thiserror-2.0.12\\target\\debug\\build\\thiserror-dbec5d444efda067\\build-script-build.exe",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp07ec90wi\\thiserror-2.0.12\\target\\debug\\build\\thiserror-dbec5d444efda067\\build_script_build.pdb"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "build-script-executed",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#proc-macro2@1.0.93",
              "linked_libs": [],
              "linked_paths": [],
              "cfgs": [
                "wrap_proc_macro"
              ],
              "env": [],
              "out_dir": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp07ec90wi\\thiserror-2.0.12\\target\\debug\\build\\proc-macro2-1a24be1f21ba5a9f\\out"
            },
            {
              "reason": "build-script-executed",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmp07ec90wi/thiserror-2.0.12#thiserror@2.0.12",
              "linked_libs": [],
              "linked_paths": [],
              "cfgs": [],
              "env": [],
              "out_dir": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp07ec90wi\\thiserror-2.0.12\\target\\debug\\build\\thiserror-1149b4951c93b101\\out"
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#proc-macro2@1.0.93",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\proc-macro2-1.0.93\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "proc_macro2",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\proc-macro2-1.0.93\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "proc-macro"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp07ec90wi\\thiserror-2.0.12\\target\\debug\\deps\\libproc_macro2-ee1e1e1138cb91b0.rlib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp07ec90wi\\thiserror-2.0.12\\target\\debug\\deps\\libproc_macro2-ee1e1e1138cb91b0.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#quote@1.0.38",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\quote-1.0.38\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "quote",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\quote-1.0.38\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "proc-macro"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp07ec90wi\\thiserror-2.0.12\\target\\debug\\deps\\libquote-1a730fe315704581.rlib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp07ec90wi\\thiserror-2.0.12\\target\\debug\\deps\\libquote-1a730fe315704581.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#syn@2.0.98",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\syn-2.0.98\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "syn",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\syn-2.0.98\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "clone-impls",
                "default",
                "derive",
                "parsing",
                "printing",
                "proc-macro"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp07ec90wi\\thiserror-2.0.12\\target\\debug\\deps\\libsyn-16c74b4dfb04f547.rlib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp07ec90wi\\thiserror-2.0.12\\target\\debug\\deps\\libsyn-16c74b4dfb04f547.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#thiserror-impl@2.0.12",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\thiserror-impl-2.0.12\\Cargo.toml",
              "target": {
                "kind": [
                  "proc-macro"
                ],
                "crate_types": [
                  "proc-macro"
                ],
                "name": "thiserror_impl",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\thiserror-impl-2.0.12\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp07ec90wi\\thiserror-2.0.12\\target\\debug\\deps\\thiserror_impl-164794beb3ac8ee6.dll",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp07ec90wi\\thiserror-2.0.12\\target\\debug\\deps\\thiserror_impl-164794beb3ac8ee6.dll.lib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp07ec90wi\\thiserror-2.0.12\\target\\debug\\deps\\thiserror_impl-164794beb3ac8ee6.dll.exp",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp07ec90wi\\thiserror-2.0.12\\target\\debug\\deps\\thiserror_impl-164794beb3ac8ee6.pdb"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmp07ec90wi/thiserror-2.0.12#thiserror@2.0.12",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp07ec90wi\\thiserror-2.0.12\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "thiserror",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp07ec90wi\\thiserror-2.0.12\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp07ec90wi\\thiserror-2.0.12\\target\\debug\\deps\\libthiserror-d601f78ed5c24741.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "build-finished",
              "success": true
            }
          ],
          "clippy": [
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#proc-macro2@1.0.93",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\proc-macro2-1.0.93\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\proc-macro2-1.0.93\\build.rs",
                "edition": "2021",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "proc-macro"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp07ec90wi\\thiserror-2.0.12\\target\\debug\\build\\proc-macro2-30ca5d38283c7f87\\build-script-build.exe",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp07ec90wi\\thiserror-2.0.12\\target\\debug\\build\\proc-macro2-30ca5d38283c7f87\\build_script_build.pdb"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "build-script-executed",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#proc-macro2@1.0.93",
              "linked_libs": [],
              "linked_paths": [],
              "cfgs": [
                "wrap_proc_macro"
              ],
              "env": [],
              "out_dir": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp07ec90wi\\thiserror-2.0.12\\target\\debug\\build\\proc-macro2-1a24be1f21ba5a9f\\out"
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#unicode-ident@1.0.17",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\unicode-ident-1.0.17\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "unicode_ident",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\unicode-ident-1.0.17\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp07ec90wi\\thiserror-2.0.12\\target\\debug\\deps\\libunicode_ident-ea9e5036135f255f.rlib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp07ec90wi\\thiserror-2.0.12\\target\\debug\\deps\\libunicode_ident-ea9e5036135f255f.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#proc-macro2@1.0.93",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\proc-macro2-1.0.93\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "proc_macro2",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\proc-macro2-1.0.93\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "proc-macro"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp07ec90wi\\thiserror-2.0.12\\target\\debug\\deps\\libproc_macro2-ee1e1e1138cb91b0.rlib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp07ec90wi\\thiserror-2.0.12\\target\\debug\\deps\\libproc_macro2-ee1e1e1138cb91b0.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#quote@1.0.38",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\quote-1.0.38\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "quote",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\quote-1.0.38\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "proc-macro"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp07ec90wi\\thiserror-2.0.12\\target\\debug\\deps\\libquote-1a730fe315704581.rlib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp07ec90wi\\thiserror-2.0.12\\target\\debug\\deps\\libquote-1a730fe315704581.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#syn@2.0.98",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\syn-2.0.98\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "syn",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\syn-2.0.98\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "clone-impls",
                "default",
                "derive",
                "parsing",
                "printing",
                "proc-macro"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp07ec90wi\\thiserror-2.0.12\\target\\debug\\deps\\libsyn-16c74b4dfb04f547.rlib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp07ec90wi\\thiserror-2.0.12\\target\\debug\\deps\\libsyn-16c74b4dfb04f547.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#thiserror-impl@2.0.12",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\thiserror-impl-2.0.12\\Cargo.toml",
              "target": {
                "kind": [
                  "proc-macro"
                ],
                "crate_types": [
                  "proc-macro"
                ],
                "name": "thiserror_impl",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\thiserror-impl-2.0.12\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp07ec90wi\\thiserror-2.0.12\\target\\debug\\deps\\thiserror_impl-164794beb3ac8ee6.dll",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp07ec90wi\\thiserror-2.0.12\\target\\debug\\deps\\thiserror_impl-164794beb3ac8ee6.dll.lib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp07ec90wi\\thiserror-2.0.12\\target\\debug\\deps\\thiserror_impl-164794beb3ac8ee6.dll.exp",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp07ec90wi\\thiserror-2.0.12\\target\\debug\\deps\\thiserror_impl-164794beb3ac8ee6.pdb"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmp07ec90wi/thiserror-2.0.12#thiserror@2.0.12",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp07ec90wi\\thiserror-2.0.12\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp07ec90wi\\thiserror-2.0.12\\build.rs",
                "edition": "2021",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp07ec90wi\\thiserror-2.0.12\\target\\debug\\build\\thiserror-fbaee2db84a12a4c\\build-script-build.exe",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp07ec90wi\\thiserror-2.0.12\\target\\debug\\build\\thiserror-fbaee2db84a12a4c\\build_script_build.pdb"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "build-script-executed",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmp07ec90wi/thiserror-2.0.12#thiserror@2.0.12",
              "linked_libs": [],
              "linked_paths": [],
              "cfgs": [],
              "env": [],
              "out_dir": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp07ec90wi\\thiserror-2.0.12\\target\\debug\\build\\thiserror-1029afa1bd0ddc1d\\out"
            },
            {
              "reason": "compiler-artifact",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmp07ec90wi/thiserror-2.0.12#thiserror@2.0.12",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp07ec90wi\\thiserror-2.0.12\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "thiserror",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp07ec90wi\\thiserror-2.0.12\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmp07ec90wi\\thiserror-2.0.12\\target\\debug\\deps\\libthiserror-ee9a3a05b391299c.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "build-finished",
              "success": true
            }
          ],
          "audit": {
            "database": {
              "advisory-count": 787,
              "last-commit": "7573f55ba337263f61167dbb0ea926cdc7c8eb5d",
              "last-updated": "2025-06-17T11:04:25+02:00"
            },
            "lockfile": {
              "dependency-count": 40
            },
            "settings": {
              "target_arch": [],
              "target_os": [],
              "severity": null,
              "ignore": [],
              "informational_warnings": [
                "unmaintained",
                "unsound",
                "notice"
              ]
            },
            "vulnerabilities": {
              "found": false,
              "count": 0,
              "list": []
            },
            "warnings": {}
          },
          "note": "Crate analysis performed with stable toolchain."
        },
        "crate_metadata": {
          "name": "thiserror",
          "version": "2.0.12",
          "description": "ALLOW: Positive community sentiment",
          "repository": "",
          "keywords": [],
          "categories": [],
          "readme": {
            "raw_markdown": "[](https://docs.rs/thiserror/latest/thiserror/all.html \"show sidebar\")\n# Crate thiserrorCopy item path\n[Settings](https://docs.rs/thiserror/latest/settings.html)\n[Help](https://docs.rs/thiserror/latest/help.html)\nSummary[Source](https://docs.rs/thiserror/latest/src/thiserror/lib.rs.html#1-303)\nExpand description\n[![github](https://img.shields.io/badge/github-8da0cb?style=for-the-badge&labelColor=555555&logo=github)](https://github.com/dtolnay/thiserror) [![crates-io](https://img.shields.io/badge/crates.io-fc8d62?style=for-the-badge&labelColor=555555&logo=rust)](https://crates.io/crates/thiserror) [![docs-rs](https://img.shields.io/badge/docs.rs-66c2a5?style=for-the-badge&labelColor=555555&logo=docs.rs)](https://docs.rs/thiserror)\nThis library provides a convenient derive macro for the standard library\u2019s [`std::error::Error`](https://doc.rust-lang.org/core/error/trait.Error.html \"trait core::error::Error\") trait.\n## [\u00a7](https://docs.rs/thiserror/latest/thiserror/#example)Example\n```\nuse thiserror::Error;\n#[derive(Error, Debug)]\npub enum DataStoreError {\n  #[error(\"data store disconnected\")]\n  Disconnect(#[from] io::Error),\n  #[error(\"the data for key `{0}` is not available\")]\n  Redaction(String),\n  #[error(\"invalid header (expected {expected:?}, found {found:?})\")]\n  InvalidHeader {\n    expected: String,\n    found: String,\n  },\n  #[error(\"unknown data store error\")]\n  Unknown,\n}\n```\n\n## [\u00a7](https://docs.rs/thiserror/latest/thiserror/#details)Details\n  * Thiserror deliberately does not appear in your public API. You get the same thing as if you had written an implementation of `std::error::Error` by hand, and switching from handwritten impls to thiserror or vice versa is not a breaking change.\n  * Errors may be enums, structs with named fields, tuple structs, or unit structs.\n  * A `Display` impl is generated for your error if you provide `#[error(\"...\")]` messages on the struct or each variant of your enum, as shown above in the example.\nThe messages support a shorthand for interpolating fields from the error.\n    * `#[error(\"{var}\")]` \u27f6 `write!(\"{}\", self.var)`\n    * `#[error(\"{0}\")]` \u27f6 `write!(\"{}\", self.0)`\n    * `#[error(\"{var:?}\")]` \u27f6 `write!(\"{:?}\", self.var)`\n    * `#[error(\"{0:?}\")]` \u27f6 `write!(\"{:?}\", self.0)`\nThese shorthands can be used together with any additional format args, which may be arbitrary expressions. For example:\n```\n#[derive(Error, Debug)]\npub enum Error {\n  #[error(\"invalid rdo_lookahead_frames {0} (expected < {max})\", max = i32::MAX)]\n  InvalidLookahead(u32),\n}\n```\n\nIf one of the additional expression arguments needs to refer to a field of the struct or enum, then refer to named fields as `.var` and tuple fields as `.0`.\n```\n#[derive(Error, Debug)]\npub enum Error {\n  #[error(\"first letter must be lowercase but was {:?}\", first_char(.0))]\n  WrongCase(String),\n  #[error(\"invalid index {idx}, expected at least {} and at most {}\", .limits.lo, .limits.hi)]\n  OutOfBounds { idx: usize, limits: Limits },\n}\n```\n\n  * A `From` impl is generated for each variant that contains a `#[from]` attribute.\nThe variant using `#[from]` must not contain any other fields beyond the source error (and possibly a backtrace \u2014 see below). Usually `#[from]` fields are unnamed, but `#[from]` is allowed on a named field too.\n```\n#[derive(Error, Debug)]\npub enum MyError {\n  Io(#[from] io::Error),\n  Glob(#[from] globset::Error),\n}\n```\n\n  * The Error trait\u2019s `source()` method is implemented to return whichever field has a `#[source]` attribute or is named `source`, if any. This is for identifying the underlying lower level error that caused your error.\nThe `#[from]` attribute always implies that the same field is `#[source]`, so you don\u2019t ever need to specify both attributes.\nAny error type that implements `std::error::Error` or dereferences to `dyn std::error::Error` will work as a source.\n```\n#[derive(Error, Debug)]\npub struct MyError {\n  msg: String,\n  #[source] // optional if field name is `source`\n  source: anyhow::Error,\n}\n```\n\n  * The Error trait\u2019s `provide()` method is implemented to provide whichever field has a type named `Backtrace`, if any, as a `std::backtrace::Backtrace`. Using `Backtrace` in errors requires a nightly compiler with Rust version 1.73 or newer.\n```\nuse std::backtrace::Backtrace;\n#[derive(Error, Debug)]\npub struct MyError {\n  msg: String,\n  backtrace: Backtrace, // automatically detected\n}\n```\n\n  * If a field is both a source (named `source`, or has `#[source]` or `#[from]` attribute) _and_ is marked `#[backtrace]`, then the Error trait\u2019s `provide()` method is forwarded to the source\u2019s `provide` so that both layers of the error share the same backtrace. The `#[backtrace]` attribute requires a nightly compiler with Rust version 1.73 or newer.\n```\n#[derive(Error, Debug)]\npub enum MyError {\n  Io {\n    #[backtrace]\n    source: io::Error,\n  },\n}\n```\n\n  * For variants that use `#[from]` and also contain a `Backtrace` field, a backtrace is captured from within the `From` impl.\n```\n#[derive(Error, Debug)]\npub enum MyError {\n  Io {\n    #[from]\n    source: io::Error,\n    backtrace: Backtrace,\n  },\n}\n```\n\n  * Errors may use `error(transparent)` to forward the source and Display methods straight through to an underlying error without adding an additional message. This would be appropriate for enums that need an \u201canything else\u201d variant.\n```\n#[derive(Error, Debug)]\npub enum MyError {\n  ...\n  #[error(transparent)]\n  Other(#[from] anyhow::Error), // source and Display delegate to anyhow::Error\n}\n```\n\nAnother use case is hiding implementation details of an error representation behind an opaque error type, so that the representation is able to evolve without breaking the crate\u2019s public API.\n```\n// PublicError is public, but opaque and easy to keep compatible.\n#[derive(Error, Debug)]\n#[error(transparent)]\npub struct PublicError(#[from] ErrorRepr);\nimpl PublicError {\n  // Accessors for anything we do want to expose publicly.\n}\n// Private and free to change across minor version of the crate.\n#[derive(Error, Debug)]\nenum ErrorRepr {\n  ...\n}\n```\n\n  * See also the [`anyhow`](https://github.com/dtolnay/anyhow) library for a convenient single error type to use in application code.\n\n\n## Derive Macros[\u00a7](https://docs.rs/thiserror/latest/thiserror/#derives)\n\n[Error](https://docs.rs/thiserror/latest/thiserror/derive.Error.html \"derive thiserror::Error\")\n\n",
            "markdown_with_citations": "[](https://docs.rs/thiserror/latest/thiserror/all.html \"show sidebar\")\n# Crate thiserrorCopy item path\nSettings\u27e81\u27e9\nHelp\u27e82\u27e9\nSummarySource\u27e83\u27e9\nExpand description\n![github\u27e84\u27e9](https://github.com/dtolnay/thiserror) ![crates-io\u27e85\u27e9](https://crates.io/crates/thiserror) ![docs-rs\u27e86\u27e9](https://docs.rs/thiserror)\nThis library provides a convenient derive macro for the standard library\u2019s `std::error::Error`\u27e87\u27e9 trait.\n## \u00a7\u27e88\u27e9Example\n```\nuse thiserror::Error;\n#[derive(Error, Debug)]\npub enum DataStoreError {\n  #[error(\"data store disconnected\")]\n  Disconnect(#[from] io::Error),\n  #[error(\"the data for key `{0}` is not available\")]\n  Redaction(String),\n  #[error(\"invalid header (expected {expected:?}, found {found:?})\")]\n  InvalidHeader {\n    expected: String,\n    found: String,\n  },\n  #[error(\"unknown data store error\")]\n  Unknown,\n}\n```\n\n## \u00a7\u27e89\u27e9Details\n  * Thiserror deliberately does not appear in your public API. You get the same thing as if you had written an implementation of `std::error::Error` by hand, and switching from handwritten impls to thiserror or vice versa is not a breaking change.\n  * Errors may be enums, structs with named fields, tuple structs, or unit structs.\n  * A `Display` impl is generated for your error if you provide `#[error(\"...\")]` messages on the struct or each variant of your enum, as shown above in the example.\nThe messages support a shorthand for interpolating fields from the error.\n    * `#[error(\"{var}\")]` \u27f6 `write!(\"{}\", self.var)`\n    * `#[error(\"{0}\")]` \u27f6 `write!(\"{}\", self.0)`\n    * `#[error(\"{var:?}\")]` \u27f6 `write!(\"{:?}\", self.var)`\n    * `#[error(\"{0:?}\")]` \u27f6 `write!(\"{:?}\", self.0)`\nThese shorthands can be used together with any additional format args, which may be arbitrary expressions. For example:\n```\n#[derive(Error, Debug)]\npub enum Error {\n  #[error(\"invalid rdo_lookahead_frames {0} (expected < {max})\", max = i32::MAX)]\n  InvalidLookahead(u32),\n}\n```\n\nIf one of the additional expression arguments needs to refer to a field of the struct or enum, then refer to named fields as `.var` and tuple fields as `.0`.\n```\n#[derive(Error, Debug)]\npub enum Error {\n  #[error(\"first letter must be lowercase but was {:?}\", first_char(.0))]\n  WrongCase(String),\n  #[error(\"invalid index {idx}, expected at least {} and at most {}\", .limits.lo, .limits.hi)]\n  OutOfBounds { idx: usize, limits: Limits },\n}\n```\n\n  * A `From` impl is generated for each variant that contains a `#[from]` attribute.\nThe variant using `#[from]` must not contain any other fields beyond the source error (and possibly a backtrace \u2014 see below). Usually `#[from]` fields are unnamed, but `#[from]` is allowed on a named field too.\n```\n#[derive(Error, Debug)]\npub enum MyError {\n  Io(#[from] io::Error),\n  Glob(#[from] globset::Error),\n}\n```\n\n  * The Error trait\u2019s `source()` method is implemented to return whichever field has a `#[source]` attribute or is named `source`, if any. This is for identifying the underlying lower level error that caused your error.\nThe `#[from]` attribute always implies that the same field is `#[source]`, so you don\u2019t ever need to specify both attributes.\nAny error type that implements `std::error::Error` or dereferences to `dyn std::error::Error` will work as a source.\n```\n#[derive(Error, Debug)]\npub struct MyError {\n  msg: String,\n  #[source] // optional if field name is `source`\n  source: anyhow::Error,\n}\n```\n\n  * The Error trait\u2019s `provide()` method is implemented to provide whichever field has a type named `Backtrace`, if any, as a `std::backtrace::Backtrace`. Using `Backtrace` in errors requires a nightly compiler with Rust version 1.73 or newer.\n```\nuse std::backtrace::Backtrace;\n#[derive(Error, Debug)]\npub struct MyError {\n  msg: String,\n  backtrace: Backtrace, // automatically detected\n}\n```\n\n  * If a field is both a source (named `source`, or has `#[source]` or `#[from]` attribute) _and_ is marked `#[backtrace]`, then the Error trait\u2019s `provide()` method is forwarded to the source\u2019s `provide` so that both layers of the error share the same backtrace. The `#[backtrace]` attribute requires a nightly compiler with Rust version 1.73 or newer.\n```\n#[derive(Error, Debug)]\npub enum MyError {\n  Io {\n    #[backtrace]\n    source: io::Error,\n  },\n}\n```\n\n  * For variants that use `#[from]` and also contain a `Backtrace` field, a backtrace is captured from within the `From` impl.\n```\n#[derive(Error, Debug)]\npub enum MyError {\n  Io {\n    #[from]\n    source: io::Error,\n    backtrace: Backtrace,\n  },\n}\n```\n\n  * Errors may use `error(transparent)` to forward the source and Display methods straight through to an underlying error without adding an additional message. This would be appropriate for enums that need an \u201canything else\u201d variant.\n```\n#[derive(Error, Debug)]\npub enum MyError {\n  ...\n  #[error(transparent)]\n  Other(#[from] anyhow::Error), // source and Display delegate to anyhow::Error\n}\n```\n\nAnother use case is hiding implementation details of an error representation behind an opaque error type, so that the representation is able to evolve without breaking the crate\u2019s public API.\n```\n// PublicError is public, but opaque and easy to keep compatible.\n#[derive(Error, Debug)]\n#[error(transparent)]\npub struct PublicError(#[from] ErrorRepr);\nimpl PublicError {\n  // Accessors for anything we do want to expose publicly.\n}\n// Private and free to change across minor version of the crate.\n#[derive(Error, Debug)]\nenum ErrorRepr {\n  ...\n}\n```\n\n  * See also the `anyhow`\u27e810\u27e9 library for a convenient single error type to use in application code.\n\n\n## Derive Macros\u00a7\u27e811\u27e9\n\nError\u27e812\u27e9\n\n",
            "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://docs.rs/thiserror/latest/settings.html: Settings\n\u27e82\u27e9 https://docs.rs/thiserror/latest/help.html: Help\n\u27e83\u27e9 https://docs.rs/thiserror/latest/src/thiserror/lib.rs.html#1-303: Source\n\u27e84\u27e9 https://img.shields.io/badge/github-8da0cb?style=for-the-badge&labelColor=555555&logo=github: ![github\n\u27e85\u27e9 https://img.shields.io/badge/crates.io-fc8d62?style=for-the-badge&labelColor=555555&logo=rust: ![crates-io\n\u27e86\u27e9 https://img.shields.io/badge/docs.rs-66c2a5?style=for-the-badge&labelColor=555555&logo=docs.rs: ![docs-rs\n\u27e87\u27e9 https://doc.rust-lang.org/core/error/trait.Error.html: trait core::error::Error - `std::error::Error`\n\u27e88\u27e9 https://docs.rs/thiserror/latest/thiserror/#example: \u00a7\n\u27e89\u27e9 https://docs.rs/thiserror/latest/thiserror/#details: \u00a7\n\u27e810\u27e9 https://github.com/dtolnay/anyhow: `anyhow`\n\u27e811\u27e9 https://docs.rs/thiserror/latest/thiserror/#derives: \u00a7\n\u27e812\u27e9 https://docs.rs/thiserror/latest/thiserror/derive.Error.html: derive thiserror::Error - Error\n",
            "fit_markdown": "",
            "fit_html": ""
          },
          "downloads": 0,
          "github_stars": 0,
          "dependencies": [],
          "features": {},
          "code_snippets": [],
          "readme_sections": {},
          "librs_downloads": null,
          "source": "crates.io",
          "enhanced_scraping": {},
          "enhanced_features": [],
          "enhanced_dependencies": []
        },
        "enriched_crate": {
          "name": "thiserror",
          "version": "2.0.12",
          "description": "ALLOW: Positive community sentiment",
          "repository": "",
          "keywords": [],
          "categories": [],
          "readme": {
            "raw_markdown": "[](https://docs.rs/thiserror/latest/thiserror/all.html \"show sidebar\")\n# Crate thiserrorCopy item path\n[Settings](https://docs.rs/thiserror/latest/settings.html)\n[Help](https://docs.rs/thiserror/latest/help.html)\nSummary[Source](https://docs.rs/thiserror/latest/src/thiserror/lib.rs.html#1-303)\nExpand description\n[![github](https://img.shields.io/badge/github-8da0cb?style=for-the-badge&labelColor=555555&logo=github)](https://github.com/dtolnay/thiserror) [![crates-io](https://img.shields.io/badge/crates.io-fc8d62?style=for-the-badge&labelColor=555555&logo=rust)](https://crates.io/crates/thiserror) [![docs-rs](https://img.shields.io/badge/docs.rs-66c2a5?style=for-the-badge&labelColor=555555&logo=docs.rs)](https://docs.rs/thiserror)\nThis library provides a convenient derive macro for the standard library\u2019s [`std::error::Error`](https://doc.rust-lang.org/core/error/trait.Error.html \"trait core::error::Error\") trait.\n## [\u00a7](https://docs.rs/thiserror/latest/thiserror/#example)Example\n```\nuse thiserror::Error;\n#[derive(Error, Debug)]\npub enum DataStoreError {\n  #[error(\"data store disconnected\")]\n  Disconnect(#[from] io::Error),\n  #[error(\"the data for key `{0}` is not available\")]\n  Redaction(String),\n  #[error(\"invalid header (expected {expected:?}, found {found:?})\")]\n  InvalidHeader {\n    expected: String,\n    found: String,\n  },\n  #[error(\"unknown data store error\")]\n  Unknown,\n}\n```\n\n## [\u00a7](https://docs.rs/thiserror/latest/thiserror/#details)Details\n  * Thiserror deliberately does not appear in your public API. You get the same thing as if you had written an implementation of `std::error::Error` by hand, and switching from handwritten impls to thiserror or vice versa is not a breaking change.\n  * Errors may be enums, structs with named fields, tuple structs, or unit structs.\n  * A `Display` impl is generated for your error if you provide `#[error(\"...\")]` messages on the struct or each variant of your enum, as shown above in the example.\nThe messages support a shorthand for interpolating fields from the error.\n    * `#[error(\"{var}\")]` \u27f6 `write!(\"{}\", self.var)`\n    * `#[error(\"{0}\")]` \u27f6 `write!(\"{}\", self.0)`\n    * `#[error(\"{var:?}\")]` \u27f6 `write!(\"{:?}\", self.var)`\n    * `#[error(\"{0:?}\")]` \u27f6 `write!(\"{:?}\", self.0)`\nThese shorthands can be used together with any additional format args, which may be arbitrary expressions. For example:\n```\n#[derive(Error, Debug)]\npub enum Error {\n  #[error(\"invalid rdo_lookahead_frames {0} (expected < {max})\", max = i32::MAX)]\n  InvalidLookahead(u32),\n}\n```\n\nIf one of the additional expression arguments needs to refer to a field of the struct or enum, then refer to named fields as `.var` and tuple fields as `.0`.\n```\n#[derive(Error, Debug)]\npub enum Error {\n  #[error(\"first letter must be lowercase but was {:?}\", first_char(.0))]\n  WrongCase(String),\n  #[error(\"invalid index {idx}, expected at least {} and at most {}\", .limits.lo, .limits.hi)]\n  OutOfBounds { idx: usize, limits: Limits },\n}\n```\n\n  * A `From` impl is generated for each variant that contains a `#[from]` attribute.\nThe variant using `#[from]` must not contain any other fields beyond the source error (and possibly a backtrace \u2014 see below). Usually `#[from]` fields are unnamed, but `#[from]` is allowed on a named field too.\n```\n#[derive(Error, Debug)]\npub enum MyError {\n  Io(#[from] io::Error),\n  Glob(#[from] globset::Error),\n}\n```\n\n  * The Error trait\u2019s `source()` method is implemented to return whichever field has a `#[source]` attribute or is named `source`, if any. This is for identifying the underlying lower level error that caused your error.\nThe `#[from]` attribute always implies that the same field is `#[source]`, so you don\u2019t ever need to specify both attributes.\nAny error type that implements `std::error::Error` or dereferences to `dyn std::error::Error` will work as a source.\n```\n#[derive(Error, Debug)]\npub struct MyError {\n  msg: String,\n  #[source] // optional if field name is `source`\n  source: anyhow::Error,\n}\n```\n\n  * The Error trait\u2019s `provide()` method is implemented to provide whichever field has a type named `Backtrace`, if any, as a `std::backtrace::Backtrace`. Using `Backtrace` in errors requires a nightly compiler with Rust version 1.73 or newer.\n```\nuse std::backtrace::Backtrace;\n#[derive(Error, Debug)]\npub struct MyError {\n  msg: String,\n  backtrace: Backtrace, // automatically detected\n}\n```\n\n  * If a field is both a source (named `source`, or has `#[source]` or `#[from]` attribute) _and_ is marked `#[backtrace]`, then the Error trait\u2019s `provide()` method is forwarded to the source\u2019s `provide` so that both layers of the error share the same backtrace. The `#[backtrace]` attribute requires a nightly compiler with Rust version 1.73 or newer.\n```\n#[derive(Error, Debug)]\npub enum MyError {\n  Io {\n    #[backtrace]\n    source: io::Error,\n  },\n}\n```\n\n  * For variants that use `#[from]` and also contain a `Backtrace` field, a backtrace is captured from within the `From` impl.\n```\n#[derive(Error, Debug)]\npub enum MyError {\n  Io {\n    #[from]\n    source: io::Error,\n    backtrace: Backtrace,\n  },\n}\n```\n\n  * Errors may use `error(transparent)` to forward the source and Display methods straight through to an underlying error without adding an additional message. This would be appropriate for enums that need an \u201canything else\u201d variant.\n```\n#[derive(Error, Debug)]\npub enum MyError {\n  ...\n  #[error(transparent)]\n  Other(#[from] anyhow::Error), // source and Display delegate to anyhow::Error\n}\n```\n\nAnother use case is hiding implementation details of an error representation behind an opaque error type, so that the representation is able to evolve without breaking the crate\u2019s public API.\n```\n// PublicError is public, but opaque and easy to keep compatible.\n#[derive(Error, Debug)]\n#[error(transparent)]\npub struct PublicError(#[from] ErrorRepr);\nimpl PublicError {\n  // Accessors for anything we do want to expose publicly.\n}\n// Private and free to change across minor version of the crate.\n#[derive(Error, Debug)]\nenum ErrorRepr {\n  ...\n}\n```\n\n  * See also the [`anyhow`](https://github.com/dtolnay/anyhow) library for a convenient single error type to use in application code.\n\n\n## Derive Macros[\u00a7](https://docs.rs/thiserror/latest/thiserror/#derives)\n\n[Error](https://docs.rs/thiserror/latest/thiserror/derive.Error.html \"derive thiserror::Error\")\n\n",
            "markdown_with_citations": "[](https://docs.rs/thiserror/latest/thiserror/all.html \"show sidebar\")\n# Crate thiserrorCopy item path\nSettings\u27e81\u27e9\nHelp\u27e82\u27e9\nSummarySource\u27e83\u27e9\nExpand description\n![github\u27e84\u27e9](https://github.com/dtolnay/thiserror) ![crates-io\u27e85\u27e9](https://crates.io/crates/thiserror) ![docs-rs\u27e86\u27e9](https://docs.rs/thiserror)\nThis library provides a convenient derive macro for the standard library\u2019s `std::error::Error`\u27e87\u27e9 trait.\n## \u00a7\u27e88\u27e9Example\n```\nuse thiserror::Error;\n#[derive(Error, Debug)]\npub enum DataStoreError {\n  #[error(\"data store disconnected\")]\n  Disconnect(#[from] io::Error),\n  #[error(\"the data for key `{0}` is not available\")]\n  Redaction(String),\n  #[error(\"invalid header (expected {expected:?}, found {found:?})\")]\n  InvalidHeader {\n    expected: String,\n    found: String,\n  },\n  #[error(\"unknown data store error\")]\n  Unknown,\n}\n```\n\n## \u00a7\u27e89\u27e9Details\n  * Thiserror deliberately does not appear in your public API. You get the same thing as if you had written an implementation of `std::error::Error` by hand, and switching from handwritten impls to thiserror or vice versa is not a breaking change.\n  * Errors may be enums, structs with named fields, tuple structs, or unit structs.\n  * A `Display` impl is generated for your error if you provide `#[error(\"...\")]` messages on the struct or each variant of your enum, as shown above in the example.\nThe messages support a shorthand for interpolating fields from the error.\n    * `#[error(\"{var}\")]` \u27f6 `write!(\"{}\", self.var)`\n    * `#[error(\"{0}\")]` \u27f6 `write!(\"{}\", self.0)`\n    * `#[error(\"{var:?}\")]` \u27f6 `write!(\"{:?}\", self.var)`\n    * `#[error(\"{0:?}\")]` \u27f6 `write!(\"{:?}\", self.0)`\nThese shorthands can be used together with any additional format args, which may be arbitrary expressions. For example:\n```\n#[derive(Error, Debug)]\npub enum Error {\n  #[error(\"invalid rdo_lookahead_frames {0} (expected < {max})\", max = i32::MAX)]\n  InvalidLookahead(u32),\n}\n```\n\nIf one of the additional expression arguments needs to refer to a field of the struct or enum, then refer to named fields as `.var` and tuple fields as `.0`.\n```\n#[derive(Error, Debug)]\npub enum Error {\n  #[error(\"first letter must be lowercase but was {:?}\", first_char(.0))]\n  WrongCase(String),\n  #[error(\"invalid index {idx}, expected at least {} and at most {}\", .limits.lo, .limits.hi)]\n  OutOfBounds { idx: usize, limits: Limits },\n}\n```\n\n  * A `From` impl is generated for each variant that contains a `#[from]` attribute.\nThe variant using `#[from]` must not contain any other fields beyond the source error (and possibly a backtrace \u2014 see below). Usually `#[from]` fields are unnamed, but `#[from]` is allowed on a named field too.\n```\n#[derive(Error, Debug)]\npub enum MyError {\n  Io(#[from] io::Error),\n  Glob(#[from] globset::Error),\n}\n```\n\n  * The Error trait\u2019s `source()` method is implemented to return whichever field has a `#[source]` attribute or is named `source`, if any. This is for identifying the underlying lower level error that caused your error.\nThe `#[from]` attribute always implies that the same field is `#[source]`, so you don\u2019t ever need to specify both attributes.\nAny error type that implements `std::error::Error` or dereferences to `dyn std::error::Error` will work as a source.\n```\n#[derive(Error, Debug)]\npub struct MyError {\n  msg: String,\n  #[source] // optional if field name is `source`\n  source: anyhow::Error,\n}\n```\n\n  * The Error trait\u2019s `provide()` method is implemented to provide whichever field has a type named `Backtrace`, if any, as a `std::backtrace::Backtrace`. Using `Backtrace` in errors requires a nightly compiler with Rust version 1.73 or newer.\n```\nuse std::backtrace::Backtrace;\n#[derive(Error, Debug)]\npub struct MyError {\n  msg: String,\n  backtrace: Backtrace, // automatically detected\n}\n```\n\n  * If a field is both a source (named `source`, or has `#[source]` or `#[from]` attribute) _and_ is marked `#[backtrace]`, then the Error trait\u2019s `provide()` method is forwarded to the source\u2019s `provide` so that both layers of the error share the same backtrace. The `#[backtrace]` attribute requires a nightly compiler with Rust version 1.73 or newer.\n```\n#[derive(Error, Debug)]\npub enum MyError {\n  Io {\n    #[backtrace]\n    source: io::Error,\n  },\n}\n```\n\n  * For variants that use `#[from]` and also contain a `Backtrace` field, a backtrace is captured from within the `From` impl.\n```\n#[derive(Error, Debug)]\npub enum MyError {\n  Io {\n    #[from]\n    source: io::Error,\n    backtrace: Backtrace,\n  },\n}\n```\n\n  * Errors may use `error(transparent)` to forward the source and Display methods straight through to an underlying error without adding an additional message. This would be appropriate for enums that need an \u201canything else\u201d variant.\n```\n#[derive(Error, Debug)]\npub enum MyError {\n  ...\n  #[error(transparent)]\n  Other(#[from] anyhow::Error), // source and Display delegate to anyhow::Error\n}\n```\n\nAnother use case is hiding implementation details of an error representation behind an opaque error type, so that the representation is able to evolve without breaking the crate\u2019s public API.\n```\n// PublicError is public, but opaque and easy to keep compatible.\n#[derive(Error, Debug)]\n#[error(transparent)]\npub struct PublicError(#[from] ErrorRepr);\nimpl PublicError {\n  // Accessors for anything we do want to expose publicly.\n}\n// Private and free to change across minor version of the crate.\n#[derive(Error, Debug)]\nenum ErrorRepr {\n  ...\n}\n```\n\n  * See also the `anyhow`\u27e810\u27e9 library for a convenient single error type to use in application code.\n\n\n## Derive Macros\u00a7\u27e811\u27e9\n\nError\u27e812\u27e9\n\n",
            "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://docs.rs/thiserror/latest/settings.html: Settings\n\u27e82\u27e9 https://docs.rs/thiserror/latest/help.html: Help\n\u27e83\u27e9 https://docs.rs/thiserror/latest/src/thiserror/lib.rs.html#1-303: Source\n\u27e84\u27e9 https://img.shields.io/badge/github-8da0cb?style=for-the-badge&labelColor=555555&logo=github: ![github\n\u27e85\u27e9 https://img.shields.io/badge/crates.io-fc8d62?style=for-the-badge&labelColor=555555&logo=rust: ![crates-io\n\u27e86\u27e9 https://img.shields.io/badge/docs.rs-66c2a5?style=for-the-badge&labelColor=555555&logo=docs.rs: ![docs-rs\n\u27e87\u27e9 https://doc.rust-lang.org/core/error/trait.Error.html: trait core::error::Error - `std::error::Error`\n\u27e88\u27e9 https://docs.rs/thiserror/latest/thiserror/#example: \u00a7\n\u27e89\u27e9 https://docs.rs/thiserror/latest/thiserror/#details: \u00a7\n\u27e810\u27e9 https://github.com/dtolnay/anyhow: `anyhow`\n\u27e811\u27e9 https://docs.rs/thiserror/latest/thiserror/#derives: \u00a7\n\u27e812\u27e9 https://docs.rs/thiserror/latest/thiserror/derive.Error.html: derive thiserror::Error - Error\n",
            "fit_markdown": "",
            "fit_html": ""
          },
          "downloads": 0,
          "github_stars": 0,
          "dependencies": [],
          "features": {},
          "code_snippets": [],
          "readme_sections": {},
          "librs_downloads": null,
          "source": "crates.io",
          "enhanced_scraping": {},
          "enhanced_features": [],
          "enhanced_dependencies": [],
          "readme_summary": "The `thiserror` crate provides a convenient derive macro for implementing the `std::error::Error` trait, allowing developers to define custom error types with minimal boilerplate. It supports enums, structs, and unit types, automatically generating `Display` implementations using `#[error]` annotations with field interpolation and formatting. Additional features include automatic `From` and `source` implementations, backtrace support (on nightly Rust), and transparent error forwarding for flexible error handling.",
          "feature_summary": null,
          "use_case": "Utilities",
          "score": 9.0,
          "factual_counterfactual": "### Pair 1: Derive Macro for Error Trait\n\u2705 Factual: The `thiserror` crate provides a derive macro for implementing the `std::error::Error` trait, allowing developers to define custom error types with minimal boilerplate code.  \n\u274c Counterfactual: The `thiserror` crate automatically generates error handling logic for runtime error recovery, including retry mechanisms and fallback strategies.\n\n---\n\n### Pair 2: `#[from]` Attribute for Source Errors\n\u2705 Factual: The `#[from]` attribute in `thiserror` automatically generates a `From` implementation for converting a source error into a custom error type, provided the variant contains no additional fields beyond the source error.  \n\u274c Counterfactual: The `#[from]` attribute in `thiserror` supports generating `From` implementations for variants with multiple fields, including unrelated fields like strings or integers.\n\n---\n\n### Pair 3: Transparent Error Forwarding\n\u2705 Factual: The `#[error(transparent)]` attribute in `thiserror` allows an error type to forward its `Display` and `source` methods directly to an underlying error, making it useful for creating \"catch-all\" variants or opaque error types.  \n\u274c Counterfactual: The `#[error(transparent)]` attribute in `thiserror` automatically generates additional error messages that are appended to the underlying error's `Display` output.",
          "source_analysis": null,
          "user_behavior": null,
          "security": null
        }
      },
      "irl_score": 8.6,
      "execution_id": "exec-122ee46b-2d423d4d-1751259512",
      "timestamp": "2025-06-30T04:58:32.513144+00:00",
      "canon_version": "1.3.0"
    },
    "rule_zero_compliant": true
  }
]