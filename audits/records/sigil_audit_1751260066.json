[
  {
    "execution_id": "exec-80a7a770-fd6c0b50-1751260054",
    "timestamp": "2025-06-30T05:07:34.440883+00:00",
    "sacred_chain": {
      "input_data": "gumdrop",
      "context_sources": [
        "crates.io",
        "github.com",
        "lib.rs",
        "docs.rs"
      ],
      "reasoning_steps": [
        "Input canonicalized: 'gumdrop' -> 'gumdrop'",
        "Context gathered from 4 validated sources",
        "Metadata extracted: 4 fields",
        "Documentation analyzed: quality 7.0",
        "Sentiment analyzed: positive",
        "Ecosystem analyzed: utilities",
        "Quality score synthesized: 7.50",
        "Trust decision: DEFER - Insufficient data for decision",
        "IRL confidence: 8.600"
      ],
      "suggestion": "ALLOW: Positive community sentiment",
      "verdict": "DEFER",
      "audit_info": {
        "metadata": {
          "name": "gumdrop",
          "type": "rust_crate",
          "source": "manual_input",
          "extraction_method": "irl_engine"
        },
        "sentiment": {
          "quality_score": 7.0,
          "completeness": 0.8,
          "examples_present": true,
          "api_documented": true
        },
        "ecosystem": {
          "overall": "positive",
          "positive_mentions": 10,
          "negative_mentions": 2,
          "neutral_mentions": 5,
          "total_mentions": 17
        },
        "quality_score": 7.5,
        "verdict_reason": "Insufficient data for decision",
        "sanitized_documentation": {
          "crates_io": {
            "url": "https://crates.io/crates/gumdrop",
            "title": "gumdrop v0.8.1",
            "content": {
              "raw_markdown": "#  gumdrop v0.8.1\nOption parser with custom derive support \n  * [ #getopts ](https://crates.io/keywords/getopts)\n  * [ #flag ](https://crates.io/keywords/flag)\n  * [ #option ](https://crates.io/keywords/option)\n  * [ #args ](https://crates.io/keywords/args)\n  * [ #command-line ](https://crates.io/keywords/command-line)\n\n\n  * [ Readme ](https://crates.io/crates/gumdrop)\n  * [ 9 Versions ](https://crates.io/crates/gumdrop/versions)\n  * [ Dependencies ](https://crates.io/crates/gumdrop/dependencies)\n  * [ Dependents ](https://crates.io/crates/gumdrop/reverse_dependencies)\n\n\n## Metadata\nover 3 years ago \n2018 edition \n[ MIT ](https://choosealicense.com/licenses/mit) OR [ Apache-2.0 ](https://choosealicense.com/licenses/apache-2.0)\n17.1 KiB \n## Install\nRun the following Cargo command in your project directory:\ncargo add gumdrop\nOr add the following line to your Cargo.toml:\ngumdrop = \"0.8.1\"\n## Documentation\n[ docs.rs/gumdrop ](https://docs.rs/gumdrop/)\n## Repository\n[ github.com/murarth/gumdrop ](https://github.com/murarth/gumdrop)\n## Owners\n[ Report crate ](https://crates.io/support?crate=gumdrop&inquire=crate-violation)\n### Stats Overview\n4,648,691 Downloads all time\n9 Versions published\n#### Downloads over the last 90 days\nDisplay as \nStacked \n  * Stacked \n  * Unstacked \n\n\nLoading\u2026\n",
              "markdown_with_citations": "#  gumdrop v0.8.1\nOption parser with custom derive support \n  *  #getopts \u27e81\u27e9\n  *  #flag \u27e82\u27e9\n  *  #option \u27e83\u27e9\n  *  #args \u27e84\u27e9\n  *  #command-line \u27e85\u27e9\n\n\n  *  Readme \u27e86\u27e9\n  *  9 Versions \u27e87\u27e9\n  *  Dependencies \u27e88\u27e9\n  *  Dependents \u27e89\u27e9\n\n\n## Metadata\nover 3 years ago \n2018 edition \n MIT \u27e810\u27e9 OR  Apache-2.0 \u27e811\u27e9\n17.1 KiB \n## Install\nRun the following Cargo command in your project directory:\ncargo add gumdrop\nOr add the following line to your Cargo.toml:\ngumdrop = \"0.8.1\"\n## Documentation\n docs.rs/gumdrop \u27e812\u27e9\n## Repository\n github.com/murarth/gumdrop \u27e813\u27e9\n## Owners\n Report crate \u27e814\u27e9\n### Stats Overview\n4,648,691 Downloads all time\n9 Versions published\n#### Downloads over the last 90 days\nDisplay as \nStacked \n  * Stacked \n  * Unstacked \n\n\nLoading\u2026\n",
              "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://crates.io/keywords/getopts:  #getopts \n\u27e82\u27e9 https://crates.io/keywords/flag:  #flag \n\u27e83\u27e9 https://crates.io/keywords/option:  #option \n\u27e84\u27e9 https://crates.io/keywords/args:  #args \n\u27e85\u27e9 https://crates.io/keywords/command-line:  #command-line \n\u27e86\u27e9 https://crates.io/crates/gumdrop:  Readme \n\u27e87\u27e9 https://crates.io/crates/gumdrop/versions:  9 Versions \n\u27e88\u27e9 https://crates.io/crates/gumdrop/dependencies:  Dependencies \n\u27e89\u27e9 https://crates.io/crates/gumdrop/reverse_dependencies:  Dependents \n\u27e810\u27e9 https://choosealicense.com/licenses/mit:  MIT \n\u27e811\u27e9 https://choosealicense.com/licenses/apache-2.0:  Apache-2.0 \n\u27e812\u27e9 https://docs.rs/gumdrop/:  docs.rs/gumdrop \n\u27e813\u27e9 https://github.com/murarth/gumdrop:  github.com/murarth/gumdrop \n\u27e814\u27e9 https://crates.io/support?crate=gumdrop&inquire=crate-violation:  Report crate \n",
              "fit_markdown": "",
              "fit_html": ""
            },
            "structured_data": {},
            "quality_score": 3.0,
            "extraction_method": "crawl4ai",
            "error": null,
            "metadata": {
              "doc_type": "docs",
              "content_length": 1301,
              "has_structured_data": false,
              "crawl_success": true
            },
            "timestamp": "113844.3816737"
          },
          "docs_rs": {
            "url": "https://docs.rs/gumdrop",
            "title": "Crate gumdropCopy item path",
            "content": {
              "raw_markdown": "[](https://docs.rs/gumdrop/latest/gumdrop/all.html \"show sidebar\")\n# Crate gumdropCopy item path\n[Settings](https://docs.rs/gumdrop/latest/settings.html)\n[Help](https://docs.rs/gumdrop/latest/help.html)\nSummary[Source](https://docs.rs/gumdrop/latest/src/gumdrop/lib.rs.html#1-774)\nExpand description\nOption parser with custom derive support\nFor full documentation on customization of `derive(Options)`, please see the crate documentation for [`gumdrop_derive`](https://docs.rs/crate/gumdrop_derive/).\n## [\u00a7](https://docs.rs/gumdrop/latest/gumdrop/#examples)Examples\n```\nuse gumdrop::Options;\n// Defines options that can be parsed from the command line.\n//\n// `derive(Options)` will generate an implementation of the trait `Options`.\n// Each field must either have a `Default` implementation or an inline\n// default value provided.\n//\n// (`Debug` is derived here only for demonstration purposes.)\n#[derive(Debug, Options)]\nstruct MyOptions {\n  // Contains \"free\" arguments -- those that are not options.\n  // If no `free` field is declared, free arguments will result in an error.\n  #[options(free)]\n  free: Vec<String>,\n  // Boolean options are treated as flags, taking no additional values.\n  // The optional `help` attribute is displayed in `usage` text.\n  //\n  // A boolean field named `help` is automatically given the `help_flag` attribute.\n  // The `parse_args_or_exit` and `parse_args_default_or_exit` functions use help flags\n  // to automatically display usage to the user.\n  #[options(help = \"print help message\")]\n  help: bool,\n  // Non-boolean fields will take a value from the command line.\n  // Wrapping the type in an `Option` is not necessary, but provides clarity.\n  #[options(help = \"give a string argument\")]\n  string: Option<String>,\n  // A field can be any type that implements `FromStr`.\n  // The optional `meta` attribute is displayed in `usage` text.\n  #[options(help = \"give a number as an argument\", meta = \"N\")]\n  number: Option<i32>,\n  // A `Vec` field will accumulate all values received from the command line.\n  #[options(help = \"give a list of string items\")]\n  item: Vec<String>,\n  // The `count` flag will treat the option as a counter.\n  // Each time the option is encountered, the field is incremented.\n  #[options(count, help = \"increase a counting value\")]\n  count: u32,\n  // Option names are automatically generated from field names, but these\n  // can be overriden. The attributes `short = \"?\"`, `long = \"...\"`,\n  // `no_short`, and `no_long` are used to control option names.\n  #[options(no_short, help = \"this option has no short form\")]\n  long_option_only: bool,\n}\nfn main() {\n  let opts = MyOptions::parse_args_default_or_exit();\n  println!(\"{:#?}\", opts);\n}\n```\n\n`derive(Options)` can also be used on `enum`s to produce a subcommand option parser.\n```\nuse gumdrop::Options;\n// Define options for the program.\n#[derive(Debug, Options)]\nstruct MyOptions {\n  // Options here can be accepted with any command (or none at all),\n  // but they must come before the command name.\n  #[options(help = \"print help message\")]\n  help: bool,\n  #[options(help = \"be verbose\")]\n  verbose: bool,\n  // The `command` option will delegate option parsing to the command type,\n  // starting at the first free argument.\n  #[options(command)]\n  command: Option<Command>,\n}\n// The set of commands and the options each one accepts.\n//\n// Each variant of a command enum should be a unary tuple variant with only\n// one field. This field must implement `Options` and is used to parse arguments\n// that are given after the command name.\n#[derive(Debug, Options)]\nenum Command {\n  // Command names are generated from variant names.\n  // By default, a CamelCase name will be converted into a lowercase,\n  // hyphen-separated name; e.g. `FooBar` becomes `foo-bar`.\n  //\n  // Names can be explicitly specified using `#[options(name = \"...\")]`\n  #[options(help = \"show help for a command\")]\n  Help(HelpOpts),\n  #[options(help = \"make stuff\")]\n  Make(MakeOpts),\n  #[options(help = \"install stuff\")]\n  Install(InstallOpts),\n}\n// Options accepted for the `help` command\n#[derive(Debug, Options)]\nstruct HelpOpts {\n  #[options(free)]\n  free: Vec<String>,\n}\n// Options accepted for the `make` command\n#[derive(Debug, Options)]\nstruct MakeOpts {\n  #[options(free)]\n  free: Vec<String>,\n  #[options(help = \"number of jobs\", meta = \"N\")]\n  jobs: Option<u32>,\n}\n// Options accepted for the `install` command\n#[derive(Debug, Options)]\nstruct InstallOpts {\n  #[options(help = \"target directory\")]\n  dir: Option<String>,\n}\nfn main() {\n  let opts = MyOptions::parse_args_default_or_exit();\n  println!(\"{:#?}\", opts);\n}\n```\n\nA custom parsing function can be supplied for each option field.\n```\nuse gumdrop::Options;\n#[derive(Debug, Options)]\nstruct MyOptions {\n  // `try_from_str = \"...\"` supplies a conversion function that may fail\n  #[options(help = \"a hexadecimal value\", parse(try_from_str = \"parse_hex\"))]\n  hex: u32,\n  // `from_str = \"...\"` supplies a conversion function that always succeeds\n  #[options(help = \"a string that becomes uppercase\", parse(from_str = \"to_upper\"))]\n  upper: String,\n}\nfn parse_hex(s: &str) -> Result<u32, std::num::ParseIntError> {\n  u32::from_str_radix(s, 16)\n}\nfn to_upper(s: &str) -> String {\n  s.to_uppercase()\n}\nfn main() {\n  let opts = MyOptions::parse_args_default_or_exit();\n  println!(\"{:#?}\", opts);\n}\n```\n\n## Structs[\u00a7](https://docs.rs/gumdrop/latest/gumdrop/#structs)\n\n[Error](https://docs.rs/gumdrop/latest/gumdrop/struct.Error.html \"struct gumdrop::Error\")\n    Represents an error encountered during argument parsing\n\n[Parser](https://docs.rs/gumdrop/latest/gumdrop/struct.Parser.html \"struct gumdrop::Parser\")\n    Parses options from a series of `&str`-like values.\n## Enums[\u00a7](https://docs.rs/gumdrop/latest/gumdrop/#enums)\n\n[Opt](https://docs.rs/gumdrop/latest/gumdrop/enum.Opt.html \"enum gumdrop::Opt\")\n    Represents an option parsed from a `Parser`\n\n[ParsingStyle](https://docs.rs/gumdrop/latest/gumdrop/enum.ParsingStyle.html \"enum gumdrop::ParsingStyle\")\n    Controls behavior of free arguments in `Parser`\n## Traits[\u00a7](https://docs.rs/gumdrop/latest/gumdrop/#traits)\n\n[Options](https://docs.rs/gumdrop/latest/gumdrop/trait.Options.html \"trait gumdrop::Options\")\n    Implements a set of options parsed from command line arguments.\n## Functions[\u00a7](https://docs.rs/gumdrop/latest/gumdrop/#functions)\n\n[parse_args](https://docs.rs/gumdrop/latest/gumdrop/fn.parse_args.html \"fn gumdrop::parse_args\")\n    Parses arguments from the command line.\n\n[parse_args_default](https://docs.rs/gumdrop/latest/gumdrop/fn.parse_args_default.html \"fn gumdrop::parse_args_default\")\n    Parses arguments from the command line using the default [parsing style](https://docs.rs/gumdrop/latest/gumdrop/enum.ParsingStyle.html).\n\n[parse_args_default_or_exit](https://docs.rs/gumdrop/latest/gumdrop/fn.parse_args_default_or_exit.html \"fn gumdrop::parse_args_default_or_exit\")\n    Parses arguments from the environment, using the default [parsing style](https://docs.rs/gumdrop/latest/gumdrop/enum.ParsingStyle.html).\n\n[parse_args_or_exit](https://docs.rs/gumdrop/latest/gumdrop/fn.parse_args_or_exit.html \"fn gumdrop::parse_args_or_exit\")\n    Parses arguments from the environment.\n## Derive Macros[\u00a7](https://docs.rs/gumdrop/latest/gumdrop/#derives)\n\n[Options](https://docs.rs/gumdrop/latest/gumdrop/derive.Options.html \"derive gumdrop::Options\")\n    Derives the `gumdrop::Options` trait for `struct` and `enum` items.\n",
              "markdown_with_citations": "[](https://docs.rs/gumdrop/latest/gumdrop/all.html \"show sidebar\")\n# Crate gumdropCopy item path\nSettings\u27e81\u27e9\nHelp\u27e82\u27e9\nSummarySource\u27e83\u27e9\nExpand description\nOption parser with custom derive support\nFor full documentation on customization of `derive(Options)`, please see the crate documentation for `gumdrop_derive`\u27e84\u27e9.\n## \u00a7\u27e85\u27e9Examples\n```\nuse gumdrop::Options;\n// Defines options that can be parsed from the command line.\n//\n// `derive(Options)` will generate an implementation of the trait `Options`.\n// Each field must either have a `Default` implementation or an inline\n// default value provided.\n//\n// (`Debug` is derived here only for demonstration purposes.)\n#[derive(Debug, Options)]\nstruct MyOptions {\n  // Contains \"free\" arguments -- those that are not options.\n  // If no `free` field is declared, free arguments will result in an error.\n  #[options(free)]\n  free: Vec<String>,\n  // Boolean options are treated as flags, taking no additional values.\n  // The optional `help` attribute is displayed in `usage` text.\n  //\n  // A boolean field named `help` is automatically given the `help_flag` attribute.\n  // The `parse_args_or_exit` and `parse_args_default_or_exit` functions use help flags\n  // to automatically display usage to the user.\n  #[options(help = \"print help message\")]\n  help: bool,\n  // Non-boolean fields will take a value from the command line.\n  // Wrapping the type in an `Option` is not necessary, but provides clarity.\n  #[options(help = \"give a string argument\")]\n  string: Option<String>,\n  // A field can be any type that implements `FromStr`.\n  // The optional `meta` attribute is displayed in `usage` text.\n  #[options(help = \"give a number as an argument\", meta = \"N\")]\n  number: Option<i32>,\n  // A `Vec` field will accumulate all values received from the command line.\n  #[options(help = \"give a list of string items\")]\n  item: Vec<String>,\n  // The `count` flag will treat the option as a counter.\n  // Each time the option is encountered, the field is incremented.\n  #[options(count, help = \"increase a counting value\")]\n  count: u32,\n  // Option names are automatically generated from field names, but these\n  // can be overriden. The attributes `short = \"?\"`, `long = \"...\"`,\n  // `no_short`, and `no_long` are used to control option names.\n  #[options(no_short, help = \"this option has no short form\")]\n  long_option_only: bool,\n}\nfn main() {\n  let opts = MyOptions::parse_args_default_or_exit();\n  println!(\"{:#?}\", opts);\n}\n```\n\n`derive(Options)` can also be used on `enum`s to produce a subcommand option parser.\n```\nuse gumdrop::Options;\n// Define options for the program.\n#[derive(Debug, Options)]\nstruct MyOptions {\n  // Options here can be accepted with any command (or none at all),\n  // but they must come before the command name.\n  #[options(help = \"print help message\")]\n  help: bool,\n  #[options(help = \"be verbose\")]\n  verbose: bool,\n  // The `command` option will delegate option parsing to the command type,\n  // starting at the first free argument.\n  #[options(command)]\n  command: Option<Command>,\n}\n// The set of commands and the options each one accepts.\n//\n// Each variant of a command enum should be a unary tuple variant with only\n// one field. This field must implement `Options` and is used to parse arguments\n// that are given after the command name.\n#[derive(Debug, Options)]\nenum Command {\n  // Command names are generated from variant names.\n  // By default, a CamelCase name will be converted into a lowercase,\n  // hyphen-separated name; e.g. `FooBar` becomes `foo-bar`.\n  //\n  // Names can be explicitly specified using `#[options(name = \"...\")]`\n  #[options(help = \"show help for a command\")]\n  Help(HelpOpts),\n  #[options(help = \"make stuff\")]\n  Make(MakeOpts),\n  #[options(help = \"install stuff\")]\n  Install(InstallOpts),\n}\n// Options accepted for the `help` command\n#[derive(Debug, Options)]\nstruct HelpOpts {\n  #[options(free)]\n  free: Vec<String>,\n}\n// Options accepted for the `make` command\n#[derive(Debug, Options)]\nstruct MakeOpts {\n  #[options(free)]\n  free: Vec<String>,\n  #[options(help = \"number of jobs\", meta = \"N\")]\n  jobs: Option<u32>,\n}\n// Options accepted for the `install` command\n#[derive(Debug, Options)]\nstruct InstallOpts {\n  #[options(help = \"target directory\")]\n  dir: Option<String>,\n}\nfn main() {\n  let opts = MyOptions::parse_args_default_or_exit();\n  println!(\"{:#?}\", opts);\n}\n```\n\nA custom parsing function can be supplied for each option field.\n```\nuse gumdrop::Options;\n#[derive(Debug, Options)]\nstruct MyOptions {\n  // `try_from_str = \"...\"` supplies a conversion function that may fail\n  #[options(help = \"a hexadecimal value\", parse(try_from_str = \"parse_hex\"))]\n  hex: u32,\n  // `from_str = \"...\"` supplies a conversion function that always succeeds\n  #[options(help = \"a string that becomes uppercase\", parse(from_str = \"to_upper\"))]\n  upper: String,\n}\nfn parse_hex(s: &str) -> Result<u32, std::num::ParseIntError> {\n  u32::from_str_radix(s, 16)\n}\nfn to_upper(s: &str) -> String {\n  s.to_uppercase()\n}\nfn main() {\n  let opts = MyOptions::parse_args_default_or_exit();\n  println!(\"{:#?}\", opts);\n}\n```\n\n## Structs\u00a7\u27e86\u27e9\n\nError\u27e87\u27e9\n    Represents an error encountered during argument parsing\n\nParser\u27e88\u27e9\n    Parses options from a series of `&str`-like values.\n## Enums\u00a7\u27e89\u27e9\n\nOpt\u27e810\u27e9\n    Represents an option parsed from a `Parser`\n\nParsingStyle\u27e811\u27e9\n    Controls behavior of free arguments in `Parser`\n## Traits\u00a7\u27e812\u27e9\n\nOptions\u27e813\u27e9\n    Implements a set of options parsed from command line arguments.\n## Functions\u00a7\u27e814\u27e9\n\nparse_args\u27e815\u27e9\n    Parses arguments from the command line.\n\nparse_args_default\u27e816\u27e9\n    Parses arguments from the command line using the default parsing style\u27e811\u27e9.\n\nparse_args_default_or_exit\u27e817\u27e9\n    Parses arguments from the environment, using the default parsing style\u27e811\u27e9.\n\nparse_args_or_exit\u27e818\u27e9\n    Parses arguments from the environment.\n## Derive Macros\u00a7\u27e819\u27e9\n\nOptions\u27e820\u27e9\n    Derives the `gumdrop::Options` trait for `struct` and `enum` items.\n",
              "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://docs.rs/gumdrop/latest/settings.html: Settings\n\u27e82\u27e9 https://docs.rs/gumdrop/latest/help.html: Help\n\u27e83\u27e9 https://docs.rs/gumdrop/latest/src/gumdrop/lib.rs.html#1-774: Source\n\u27e84\u27e9 https://docs.rs/crate/gumdrop_derive/: `gumdrop_derive`\n\u27e85\u27e9 https://docs.rs/gumdrop/latest/gumdrop/#examples: \u00a7\n\u27e86\u27e9 https://docs.rs/gumdrop/latest/gumdrop/#structs: \u00a7\n\u27e87\u27e9 https://docs.rs/gumdrop/latest/gumdrop/struct.Error.html: struct gumdrop::Error - Error\n\u27e88\u27e9 https://docs.rs/gumdrop/latest/gumdrop/struct.Parser.html: struct gumdrop::Parser - Parser\n\u27e89\u27e9 https://docs.rs/gumdrop/latest/gumdrop/#enums: \u00a7\n\u27e810\u27e9 https://docs.rs/gumdrop/latest/gumdrop/enum.Opt.html: enum gumdrop::Opt - Opt\n\u27e811\u27e9 https://docs.rs/gumdrop/latest/gumdrop/enum.ParsingStyle.html: enum gumdrop::ParsingStyle - ParsingStyle\n\u27e812\u27e9 https://docs.rs/gumdrop/latest/gumdrop/#traits: \u00a7\n\u27e813\u27e9 https://docs.rs/gumdrop/latest/gumdrop/trait.Options.html: trait gumdrop::Options - Options\n\u27e814\u27e9 https://docs.rs/gumdrop/latest/gumdrop/#functions: \u00a7\n\u27e815\u27e9 https://docs.rs/gumdrop/latest/gumdrop/fn.parse_args.html: fn gumdrop::parse_args - parse_args\n\u27e816\u27e9 https://docs.rs/gumdrop/latest/gumdrop/fn.parse_args_default.html: fn gumdrop::parse_args_default - parse_args_default\n\u27e817\u27e9 https://docs.rs/gumdrop/latest/gumdrop/fn.parse_args_default_or_exit.html: fn gumdrop::parse_args_default_or_exit - parse_args_default_or_exit\n\u27e818\u27e9 https://docs.rs/gumdrop/latest/gumdrop/fn.parse_args_or_exit.html: fn gumdrop::parse_args_or_exit - parse_args_or_exit\n\u27e819\u27e9 https://docs.rs/gumdrop/latest/gumdrop/#derives: \u00a7\n\u27e820\u27e9 https://docs.rs/gumdrop/latest/gumdrop/derive.Options.html: derive gumdrop::Options - Options\n",
              "fit_markdown": "",
              "fit_html": ""
            },
            "structured_data": {},
            "quality_score": 4.0,
            "extraction_method": "crawl4ai",
            "error": null,
            "metadata": {
              "doc_type": "docs",
              "content_length": 7447,
              "has_structured_data": false,
              "crawl_success": true
            },
            "timestamp": "113845.057395"
          },
          "lib_rs": {
            "url": "https://lib.rs/crates/gumdrop",
            "title": "Untitled",
            "content": {
              "raw_markdown": "###  [9 releases](https://lib.rs/crates/gumdrop/versions) (breaking)\n0.8.1 |  Mar 9, 2022   \n---|---  \n0.8.0 |  Apr 15, 2020   \n0.7.0 |  Oct 13, 2019   \n0.6.0 |  Jun 25, 2019   \n0.3.0 |  Jul 1, 2017   \n#**1012** in [Command-line interface](https://lib.rs/command-line-interface \"Crates to help create command line interfaces, such as argument parsers, line-editing, or output coloring and formatting.\")\nDownload history 35925/week @ 2024-12-05 33736/week @ 2024-12-12 19042/week @ 2024-12-19 14159/week @ 2024-12-26 23441/week @ 2025-01-02 29953/week @ 2025-01-09 29762/week @ 2025-01-16 32521/week @ 2025-01-23 36051/week @ 2025-01-30 42341/week @ 2025-02-06 34486/week @ 2025-02-13 30566/week @ 2025-02-20 34542/week @ 2025-02-27 42870/week @ 2025-03-06 42375/week @ 2025-03-13 35913/week @ 2025-03-20\n**160,882** downloads per month Used in [fewer than **96** crates](https://lib.rs/crates/gumdrop/rev)\n**MIT/Apache**\n36KB  489 lines\n# ``gumdrop``\nOption parser with custom derive support\n[Documentation](https://docs.rs/gumdrop/)\n## Building\nTo include ``gumdrop`` in your project, add the following to your ``Cargo.toml``:\n```\n```[``dependencies``]`\n`gumdrop ``=` ``\"`0.8`\"``\n``\n```\n\n## License\n``gumdrop`` is distributed under the terms of both the MIT license and the Apache License (Version 2.0).\nSee LICENSE-APACHE and LICENSE-MIT for details.\n###  [`lib.rs`](https://docs.rs/gumdrop): \nOption parser with custom derive support\nFor full documentation on customization of ```derive``(`Options`)```, please see the crate documentation for [``gumdrop_derive``](https://docs.rs/crate/gumdrop_derive/).\n# Examples\n```\n``use` `gumdrop`::``Options`;`\n``//` Defines options that can be parsed from the command line.`\n``//``\n``//` `derive(Options)` will generate an implementation of the trait `Options`.`\n``//` Each field must either have a `Default` implementation or an inline`\n``//` default value provided.`\n``//``\n``//` (`Debug` is derived here only for demonstration purposes.)`\n``#``[``derive```(```Debug`,` Options```)```]``\n``struct` ```MyOptions` ````{`\n  ``//` Contains \"free\" arguments -- those that are not options.`\n  ``//` If no `free` field is declared, free arguments will result in an error.`\n  ``#``[``options```(```free```)```]``\n  `free``:` ``Vec``<``String``>``,\n  ``//` Boolean options are treated as flags, taking no additional values.`\n  ``//` The optional `help` attribute is displayed in `usage` text.`\n  ``//``\n  ``//` A boolean field named `help` is automatically given the `help_flag` attribute.`\n  ``//` The `parse_args_or_exit` and `parse_args_default_or_exit` functions use help flags`\n  ``//` to automatically display usage to the user.`\n  ``#``[``options```(```help `=` ``\"`print help message`\"`````)```]``\n  `help``:` `bool`,\n  ``//` Non-boolean fields will take a value from the command line.`\n  ``//` Wrapping the type in an `Option` is not necessary, but provides clarity.`\n  ``#``[``options```(```help `=` ``\"`give a string argument`\"`````)```]``\n  `string``:` ``Option``<``String``>``,\n  ``//` A field can be any type that implements `FromStr`.`\n  ``//` The optional `meta` attribute is displayed in `usage` text.`\n  ``#``[``options```(```help `=` ``\"`give a number as an argument`\"```,` meta `=` ``\"`N`\"`````)```]``\n  `number``:` ``Option``<``i32``>``,\n  ``//` A `Vec` field will accumulate all values received from the command line.`\n  ``#``[``options```(```help `=` ``\"`give a list of string items`\"`````)```]``\n  `item``:` ``Vec``<``String``>``,\n  ``//` The `count` flag will treat the option as a counter.`\n  ``//` Each time the option is encountered, the field is incremented.`\n  ``#``[``options```(```count`,` help `=` ``\"`increase a counting value`\"`````)```]``\n  `count``:` `u32`,\n  ``//` Option names are automatically generated from field names, but these`\n  ``//` can be overriden. The attributes `short = \"?\"`, `long = \"...\"`,`\n  ``//` `no_short`, and `no_long` are used to control option names.`\n  ``#``[``options```(```no_short`,` help `=` ``\"`this option has no short form`\"`````)```]``\n  `long_option_only``:` `bool`,\n```}```\n``fn` `main`````(````)``````{`\n  `let` opts `=` `MyOptions`::``parse_args_default_or_exit`(``)``;`\n  `println!``(```\"``{:#?}``\"```,` opts`)``;`\n```}```\n`\n```\n\n```derive``(`Options`)``` can also be used on ```enum```s to produce a subcommand option parser.\n```\n``use` `gumdrop`::``Options`;`\n``//` Define options for the program.`\n``#``[``derive```(```Debug`,` Options```)```]``\n``struct` ```MyOptions` ````{`\n  ``//` Options here can be accepted with any command (or none at all),`\n  ``//` but they must come before the command name.`\n  ``#``[``options```(```help `=` ``\"`print help message`\"`````)```]``\n  `help``:` `bool`,\n  ``#``[``options```(```help `=` ``\"`be verbose`\"`````)```]``\n  `verbose``:` `bool`,\n  ``//` The `command` option will delegate option parsing to the command type,`\n  ``//` starting at the first free argument.`\n  ``#``[``options```(```command```)```]``\n  `command``:` ``Option``<`Command`>``,\n```}```\n``//` The set of commands and the options each one accepts.`\n``//``\n``//` Each variant of a command enum should be a unary tuple variant with only`\n``//` one field. This field must implement `Options` and is used to parse arguments`\n``//` that are given after the command name.`\n``#``[``derive```(```Debug`,` Options```)```]``\n``enum` `Command` ``{`\n  ``//` Command names are generated from variant names.`\n  ``//` By default, a CamelCase name will be converted into a lowercase,`\n  ``//` hyphen-separated name; e.g. `FooBar` becomes `foo-bar`.`\n  ``//``\n  ``//` Names can be explicitly specified using `#[options(name = \"...\")]``\n  ``#``[``options```(```help `=` ``\"`show help for a command`\"`````)```]``\n  Help`(`HelpOpts`)``,`\n  ``#``[``options```(```help `=` ``\"`make stuff`\"`````)```]``\n  Make`(`MakeOpts`)``,`\n  ``#``[``options```(```help `=` ``\"`install stuff`\"`````)```]``\n  Install`(`InstallOpts`)``,`\n```}```\n``//` Options accepted for the `help` command`\n``#``[``derive```(```Debug`,` Options```)```]``\n``struct` ```HelpOpts` ````{`\n  ``#``[``options```(```free```)```]``\n  `free``:` ``Vec``<``String``>``,\n```}```\n``//` Options accepted for the `make` command`\n``#``[``derive```(```Debug`,` Options```)```]``\n``struct` ```MakeOpts` ````{`\n  ``#``[``options```(```free```)```]``\n  `free``:` ``Vec``<``String``>``,\n  ``#``[``options```(```help `=` ``\"`number of jobs`\"```,` meta `=` ``\"`N`\"`````)```]``\n  `jobs``:` ``Option``<``u32``>``,\n```}```\n``//` Options accepted for the `install` command`\n``#``[``derive```(```Debug`,` Options```)```]``\n``struct` ```InstallOpts` ````{`\n  ``#``[``options```(```help `=` ``\"`target directory`\"`````)```]``\n  `dir``:` ``Option``<``String``>``,\n```}```\n``fn` `main`````(````)``````{`\n  `let` opts `=` `MyOptions`::``parse_args_default_or_exit`(``)``;`\n  `println!``(```\"``{:#?}``\"```,` opts`)``;`\n```}```\n`\n```\n\nA custom parsing function can be supplied for each option field.\n```\n``use` `gumdrop`::``Options`;`\n``#``[``derive```(```Debug`,` Options```)```]``\n``struct` ```MyOptions` ````{`\n  ``//` `try_from_str = \"...\"` supplies a conversion function that may fail`\n  ``#``[``options```(```help `=` ``\"`a hexadecimal value`\"```,` ``parse``(```try_from_str `=` ``\"`parse_hex`\"`````)`````)```]``\n  `hex``:` `u32`,\n  ``//` `from_str = \"...\"` supplies a conversion function that always succeeds`\n  ``#``[``options```(```help `=` ``\"`a string that becomes uppercase`\"```,` ``parse``(```from_str `=` ``\"`to_upper`\"`````)`````)```]``\n  `upper``:` String,\n```}```\n``fn` `parse_hex`````(``s``:` `&``str````)```` ``->` ``Result``<``u32`, `std`::```num`::``ParseIntError`>``` ````{`\n  `u32```::``from_str_radix`(`s`,` `16``)`\n```}```\n``fn` `to_upper`````(``s``:` `&``str````)```` ``->` String` ````{`\n  s`.``to_uppercase``(``)`\n```}```\n``fn` `main`````(````)``````{`\n  `let` opts `=` `MyOptions`::``parse_args_default_or_exit`(``)``;`\n  `println!``(```\"``{:#?}``\"```,` opts`)``;`\n```}```\n`\n```\n\n#### Dependencies\n~1.5MB  ~38K SLoC\n  * [gumdrop_derive](https://lib.rs/crates/gumdrop_derive \"new\") 0.8.1\n\n\n  * dev  [assert_matches](https://lib.rs/crates/assert_matches \"1.1\")\n\n\n#### [Other feature](https://lib.rs/crates/gumdrop/features)\n  * [default_expr](https://lib.rs/crates/gumdrop/features#feature-default_expr)\n\n\n  *[SLoC]: approx. additional lines of code\n",
              "markdown_with_citations": "###  9 releases\u27e81\u27e9 (breaking)\n0.8.1 |  Mar 9, 2022   \n---|---  \n0.8.0 |  Apr 15, 2020   \n0.7.0 |  Oct 13, 2019   \n0.6.0 |  Jun 25, 2019   \n0.3.0 |  Jul 1, 2017   \n#**1012** in Command-line interface\u27e82\u27e9\nDownload history 35925/week @ 2024-12-05 33736/week @ 2024-12-12 19042/week @ 2024-12-19 14159/week @ 2024-12-26 23441/week @ 2025-01-02 29953/week @ 2025-01-09 29762/week @ 2025-01-16 32521/week @ 2025-01-23 36051/week @ 2025-01-30 42341/week @ 2025-02-06 34486/week @ 2025-02-13 30566/week @ 2025-02-20 34542/week @ 2025-02-27 42870/week @ 2025-03-06 42375/week @ 2025-03-13 35913/week @ 2025-03-20\n**160,882** downloads per month Used in fewer than **96** crates\u27e83\u27e9\n**MIT/Apache**\n36KB  489 lines\n# ``gumdrop``\nOption parser with custom derive support\nDocumentation\u27e84\u27e9\n## Building\nTo include ``gumdrop`` in your project, add the following to your ``Cargo.toml``:\n```\n```[``dependencies``]`\n`gumdrop ``=` ``\"`0.8`\"``\n``\n```\n\n## License\n``gumdrop`` is distributed under the terms of both the MIT license and the Apache License (Version 2.0).\nSee LICENSE-APACHE and LICENSE-MIT for details.\n###  `lib.rs`\u27e85\u27e9: \nOption parser with custom derive support\nFor full documentation on customization of ```derive``(`Options`)```, please see the crate documentation for ``gumdrop_derive``\u27e86\u27e9.\n# Examples\n```\n``use` `gumdrop`::``Options`;`\n``//` Defines options that can be parsed from the command line.`\n``//``\n``//` `derive(Options)` will generate an implementation of the trait `Options`.`\n``//` Each field must either have a `Default` implementation or an inline`\n``//` default value provided.`\n``//``\n``//` (`Debug` is derived here only for demonstration purposes.)`\n``#``[``derive```(```Debug`,` Options```)```]``\n``struct` ```MyOptions` ````{`\n  ``//` Contains \"free\" arguments -- those that are not options.`\n  ``//` If no `free` field is declared, free arguments will result in an error.`\n  ``#``[``options```(```free```)```]``\n  `free``:` ``Vec``<``String``>``,\n  ``//` Boolean options are treated as flags, taking no additional values.`\n  ``//` The optional `help` attribute is displayed in `usage` text.`\n  ``//``\n  ``//` A boolean field named `help` is automatically given the `help_flag` attribute.`\n  ``//` The `parse_args_or_exit` and `parse_args_default_or_exit` functions use help flags`\n  ``//` to automatically display usage to the user.`\n  ``#``[``options```(```help `=` ``\"`print help message`\"`````)```]``\n  `help``:` `bool`,\n  ``//` Non-boolean fields will take a value from the command line.`\n  ``//` Wrapping the type in an `Option` is not necessary, but provides clarity.`\n  ``#``[``options```(```help `=` ``\"`give a string argument`\"`````)```]``\n  `string``:` ``Option``<``String``>``,\n  ``//` A field can be any type that implements `FromStr`.`\n  ``//` The optional `meta` attribute is displayed in `usage` text.`\n  ``#``[``options```(```help `=` ``\"`give a number as an argument`\"```,` meta `=` ``\"`N`\"`````)```]``\n  `number``:` ``Option``<``i32``>``,\n  ``//` A `Vec` field will accumulate all values received from the command line.`\n  ``#``[``options```(```help `=` ``\"`give a list of string items`\"`````)```]``\n  `item``:` ``Vec``<``String``>``,\n  ``//` The `count` flag will treat the option as a counter.`\n  ``//` Each time the option is encountered, the field is incremented.`\n  ``#``[``options```(```count`,` help `=` ``\"`increase a counting value`\"`````)```]``\n  `count``:` `u32`,\n  ``//` Option names are automatically generated from field names, but these`\n  ``//` can be overriden. The attributes `short = \"?\"`, `long = \"...\"`,`\n  ``//` `no_short`, and `no_long` are used to control option names.`\n  ``#``[``options```(```no_short`,` help `=` ``\"`this option has no short form`\"`````)```]``\n  `long_option_only``:` `bool`,\n```}```\n``fn` `main`````(````)``````{`\n  `let` opts `=` `MyOptions`::``parse_args_default_or_exit`(``)``;`\n  `println!``(```\"``{:#?}``\"```,` opts`)``;`\n```}```\n`\n```\n\n```derive``(`Options`)``` can also be used on ```enum```s to produce a subcommand option parser.\n```\n``use` `gumdrop`::``Options`;`\n``//` Define options for the program.`\n``#``[``derive```(```Debug`,` Options```)```]``\n``struct` ```MyOptions` ````{`\n  ``//` Options here can be accepted with any command (or none at all),`\n  ``//` but they must come before the command name.`\n  ``#``[``options```(```help `=` ``\"`print help message`\"`````)```]``\n  `help``:` `bool`,\n  ``#``[``options```(```help `=` ``\"`be verbose`\"`````)```]``\n  `verbose``:` `bool`,\n  ``//` The `command` option will delegate option parsing to the command type,`\n  ``//` starting at the first free argument.`\n  ``#``[``options```(```command```)```]``\n  `command``:` ``Option``<`Command`>``,\n```}```\n``//` The set of commands and the options each one accepts.`\n``//``\n``//` Each variant of a command enum should be a unary tuple variant with only`\n``//` one field. This field must implement `Options` and is used to parse arguments`\n``//` that are given after the command name.`\n``#``[``derive```(```Debug`,` Options```)```]``\n``enum` `Command` ``{`\n  ``//` Command names are generated from variant names.`\n  ``//` By default, a CamelCase name will be converted into a lowercase,`\n  ``//` hyphen-separated name; e.g. `FooBar` becomes `foo-bar`.`\n  ``//``\n  ``//` Names can be explicitly specified using `#[options(name = \"...\")]``\n  ``#``[``options```(```help `=` ``\"`show help for a command`\"`````)```]``\n  Help`(`HelpOpts`)``,`\n  ``#``[``options```(```help `=` ``\"`make stuff`\"`````)```]``\n  Make`(`MakeOpts`)``,`\n  ``#``[``options```(```help `=` ``\"`install stuff`\"`````)```]``\n  Install`(`InstallOpts`)``,`\n```}```\n``//` Options accepted for the `help` command`\n``#``[``derive```(```Debug`,` Options```)```]``\n``struct` ```HelpOpts` ````{`\n  ``#``[``options```(```free```)```]``\n  `free``:` ``Vec``<``String``>``,\n```}```\n``//` Options accepted for the `make` command`\n``#``[``derive```(```Debug`,` Options```)```]``\n``struct` ```MakeOpts` ````{`\n  ``#``[``options```(```free```)```]``\n  `free``:` ``Vec``<``String``>``,\n  ``#``[``options```(```help `=` ``\"`number of jobs`\"```,` meta `=` ``\"`N`\"`````)```]``\n  `jobs``:` ``Option``<``u32``>``,\n```}```\n``//` Options accepted for the `install` command`\n``#``[``derive```(```Debug`,` Options```)```]``\n``struct` ```InstallOpts` ````{`\n  ``#``[``options```(```help `=` ``\"`target directory`\"`````)```]``\n  `dir``:` ``Option``<``String``>``,\n```}```\n``fn` `main`````(````)``````{`\n  `let` opts `=` `MyOptions`::``parse_args_default_or_exit`(``)``;`\n  `println!``(```\"``{:#?}``\"```,` opts`)``;`\n```}```\n`\n```\n\nA custom parsing function can be supplied for each option field.\n```\n``use` `gumdrop`::``Options`;`\n``#``[``derive```(```Debug`,` Options```)```]``\n``struct` ```MyOptions` ````{`\n  ``//` `try_from_str = \"...\"` supplies a conversion function that may fail`\n  ``#``[``options```(```help `=` ``\"`a hexadecimal value`\"```,` ``parse``(```try_from_str `=` ``\"`parse_hex`\"`````)`````)```]``\n  `hex``:` `u32`,\n  ``//` `from_str = \"...\"` supplies a conversion function that always succeeds`\n  ``#``[``options```(```help `=` ``\"`a string that becomes uppercase`\"```,` ``parse``(```from_str `=` ``\"`to_upper`\"`````)`````)```]``\n  `upper``:` String,\n```}```\n``fn` `parse_hex`````(``s``:` `&``str````)```` ``->` ``Result``<``u32`, `std`::```num`::``ParseIntError`>``` ````{`\n  `u32```::``from_str_radix`(`s`,` `16``)`\n```}```\n``fn` `to_upper`````(``s``:` `&``str````)```` ``->` String` ````{`\n  s`.``to_uppercase``(``)`\n```}```\n``fn` `main`````(````)``````{`\n  `let` opts `=` `MyOptions`::``parse_args_default_or_exit`(``)``;`\n  `println!``(```\"``{:#?}``\"```,` opts`)``;`\n```}```\n`\n```\n\n#### Dependencies\n~1.5MB  ~38K SLoC\n  * gumdrop_derive\u27e87\u27e9 0.8.1\n\n\n  * dev  assert_matches\u27e88\u27e9\n\n\n#### Other feature\u27e89\u27e9\n  * default_expr\u27e810\u27e9\n\n\n  *[SLoC]: approx. additional lines of code\n",
              "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://lib.rs/crates/gumdrop/versions: 9 releases\n\u27e82\u27e9 https://lib.rs/command-line-interface: Crates to help create command line interfaces, such as argument parsers, line-editing, or output coloring and formatting. - Command-line interface\n\u27e83\u27e9 https://lib.rs/crates/gumdrop/rev: fewer than **96** crates\n\u27e84\u27e9 https://docs.rs/gumdrop/: Documentation\n\u27e85\u27e9 https://docs.rs/gumdrop: `lib.rs`\n\u27e86\u27e9 https://docs.rs/crate/gumdrop_derive/: ``gumdrop_derive``\n\u27e87\u27e9 https://lib.rs/crates/gumdrop_derive: new - gumdrop_derive\n\u27e88\u27e9 https://lib.rs/crates/assert_matches: 1.1 - assert_matches\n\u27e89\u27e9 https://lib.rs/crates/gumdrop/features: Other feature\n\u27e810\u27e9 https://lib.rs/crates/gumdrop/features#feature-default_expr: default_expr\n",
              "fit_markdown": "",
              "fit_html": ""
            },
            "structured_data": {},
            "quality_score": 3.0,
            "extraction_method": "crawl4ai",
            "error": null,
            "metadata": {
              "doc_type": "docs",
              "content_length": 8311,
              "has_structured_data": false,
              "crawl_success": true
            },
            "timestamp": "113845.5099068"
          }
        },
        "crate_analysis": {
          "status": "completed",
          "check": [
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#unicode-xid@0.2.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\unicode-xid-0.2.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "unicode_xid",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\unicode-xid-0.2.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpy98apue1\\gumdrop-0.8.1\\target\\debug\\deps\\libunicode_xid-8554e47c2a2abdc7.rlib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpy98apue1\\gumdrop-0.8.1\\target\\debug\\deps\\libunicode_xid-8554e47c2a2abdc7.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#proc-macro2@1.0.10",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\proc-macro2-1.0.10\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\proc-macro2-1.0.10\\build.rs",
                "edition": "2018",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "proc-macro"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpy98apue1\\gumdrop-0.8.1\\target\\debug\\build\\proc-macro2-83813e1c339e5dd3\\build-script-build.exe",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpy98apue1\\gumdrop-0.8.1\\target\\debug\\build\\proc-macro2-83813e1c339e5dd3\\build_script_build.pdb"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#syn@1.0.17",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\syn-1.0.17\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\syn-1.0.17\\build.rs",
                "edition": "2018",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "clone-impls",
                "default",
                "derive",
                "parsing",
                "printing",
                "proc-macro",
                "quote"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpy98apue1\\gumdrop-0.8.1\\target\\debug\\build\\syn-cabc838fc3440db5\\build-script-build.exe",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpy98apue1\\gumdrop-0.8.1\\target\\debug\\build\\syn-cabc838fc3440db5\\build_script_build.pdb"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "build-script-executed",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#proc-macro2@1.0.10",
              "linked_libs": [],
              "linked_paths": [],
              "cfgs": [
                "use_proc_macro",
                "wrap_proc_macro"
              ],
              "env": [],
              "out_dir": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpy98apue1\\gumdrop-0.8.1\\target\\debug\\build\\proc-macro2-1a5c904e676ec358\\out"
            },
            {
              "reason": "build-script-executed",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#syn@1.0.17",
              "linked_libs": [],
              "linked_paths": [],
              "cfgs": [
                "syn_disable_nightly_tests"
              ],
              "env": [],
              "out_dir": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpy98apue1\\gumdrop-0.8.1\\target\\debug\\build\\syn-b83baadb35b25520\\out"
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#proc-macro2@1.0.10",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\proc-macro2-1.0.10\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "proc_macro2",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\proc-macro2-1.0.10\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "proc-macro"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpy98apue1\\gumdrop-0.8.1\\target\\debug\\deps\\libproc_macro2-270889066aba2269.rlib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpy98apue1\\gumdrop-0.8.1\\target\\debug\\deps\\libproc_macro2-270889066aba2269.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#quote@1.0.3",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\quote-1.0.3\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "quote",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\quote-1.0.3\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "proc-macro"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpy98apue1\\gumdrop-0.8.1\\target\\debug\\deps\\libquote-63096e6e8a607521.rlib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpy98apue1\\gumdrop-0.8.1\\target\\debug\\deps\\libquote-63096e6e8a607521.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#syn@1.0.17",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\syn-1.0.17\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "syn",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\syn-1.0.17\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "clone-impls",
                "default",
                "derive",
                "parsing",
                "printing",
                "proc-macro",
                "quote"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpy98apue1\\gumdrop-0.8.1\\target\\debug\\deps\\libsyn-e540f15d1bf3b79b.rlib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpy98apue1\\gumdrop-0.8.1\\target\\debug\\deps\\libsyn-e540f15d1bf3b79b.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#gumdrop_derive@0.8.1",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\gumdrop_derive-0.8.1\\Cargo.toml",
              "target": {
                "kind": [
                  "proc-macro"
                ],
                "crate_types": [
                  "proc-macro"
                ],
                "name": "gumdrop_derive",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\gumdrop_derive-0.8.1\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpy98apue1\\gumdrop-0.8.1\\target\\debug\\deps\\gumdrop_derive-cabb171df68242ab.dll",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpy98apue1\\gumdrop-0.8.1\\target\\debug\\deps\\gumdrop_derive-cabb171df68242ab.dll.lib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpy98apue1\\gumdrop-0.8.1\\target\\debug\\deps\\gumdrop_derive-cabb171df68242ab.dll.exp",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpy98apue1\\gumdrop-0.8.1\\target\\debug\\deps\\gumdrop_derive-cabb171df68242ab.pdb"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpy98apue1/gumdrop-0.8.1#gumdrop@0.8.1",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpy98apue1\\gumdrop-0.8.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "gumdrop",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpy98apue1\\gumdrop-0.8.1\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpy98apue1\\gumdrop-0.8.1\\target\\debug\\deps\\libgumdrop-d8e5809840d116ca.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "build-finished",
              "success": true
            }
          ],
          "clippy": [
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#proc-macro2@1.0.10",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\proc-macro2-1.0.10\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\proc-macro2-1.0.10\\build.rs",
                "edition": "2018",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "proc-macro"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpy98apue1\\gumdrop-0.8.1\\target\\debug\\build\\proc-macro2-83813e1c339e5dd3\\build-script-build.exe",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpy98apue1\\gumdrop-0.8.1\\target\\debug\\build\\proc-macro2-83813e1c339e5dd3\\build_script_build.pdb"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "build-script-executed",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#proc-macro2@1.0.10",
              "linked_libs": [],
              "linked_paths": [],
              "cfgs": [
                "use_proc_macro",
                "wrap_proc_macro"
              ],
              "env": [],
              "out_dir": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpy98apue1\\gumdrop-0.8.1\\target\\debug\\build\\proc-macro2-1a5c904e676ec358\\out"
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#unicode-xid@0.2.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\unicode-xid-0.2.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "unicode_xid",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\unicode-xid-0.2.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpy98apue1\\gumdrop-0.8.1\\target\\debug\\deps\\libunicode_xid-8554e47c2a2abdc7.rlib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpy98apue1\\gumdrop-0.8.1\\target\\debug\\deps\\libunicode_xid-8554e47c2a2abdc7.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#syn@1.0.17",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\syn-1.0.17\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\syn-1.0.17\\build.rs",
                "edition": "2018",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "clone-impls",
                "default",
                "derive",
                "parsing",
                "printing",
                "proc-macro",
                "quote"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpy98apue1\\gumdrop-0.8.1\\target\\debug\\build\\syn-cabc838fc3440db5\\build-script-build.exe",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpy98apue1\\gumdrop-0.8.1\\target\\debug\\build\\syn-cabc838fc3440db5\\build_script_build.pdb"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#proc-macro2@1.0.10",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\proc-macro2-1.0.10\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "proc_macro2",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\proc-macro2-1.0.10\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "proc-macro"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpy98apue1\\gumdrop-0.8.1\\target\\debug\\deps\\libproc_macro2-270889066aba2269.rlib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpy98apue1\\gumdrop-0.8.1\\target\\debug\\deps\\libproc_macro2-270889066aba2269.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "build-script-executed",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#syn@1.0.17",
              "linked_libs": [],
              "linked_paths": [],
              "cfgs": [
                "syn_disable_nightly_tests"
              ],
              "env": [],
              "out_dir": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpy98apue1\\gumdrop-0.8.1\\target\\debug\\build\\syn-b83baadb35b25520\\out"
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#quote@1.0.3",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\quote-1.0.3\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "quote",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\quote-1.0.3\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "proc-macro"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpy98apue1\\gumdrop-0.8.1\\target\\debug\\deps\\libquote-63096e6e8a607521.rlib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpy98apue1\\gumdrop-0.8.1\\target\\debug\\deps\\libquote-63096e6e8a607521.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#syn@1.0.17",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\syn-1.0.17\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "syn",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\syn-1.0.17\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "clone-impls",
                "default",
                "derive",
                "parsing",
                "printing",
                "proc-macro",
                "quote"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpy98apue1\\gumdrop-0.8.1\\target\\debug\\deps\\libsyn-e540f15d1bf3b79b.rlib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpy98apue1\\gumdrop-0.8.1\\target\\debug\\deps\\libsyn-e540f15d1bf3b79b.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#gumdrop_derive@0.8.1",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\gumdrop_derive-0.8.1\\Cargo.toml",
              "target": {
                "kind": [
                  "proc-macro"
                ],
                "crate_types": [
                  "proc-macro"
                ],
                "name": "gumdrop_derive",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\gumdrop_derive-0.8.1\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpy98apue1\\gumdrop-0.8.1\\target\\debug\\deps\\gumdrop_derive-cabb171df68242ab.dll",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpy98apue1\\gumdrop-0.8.1\\target\\debug\\deps\\gumdrop_derive-cabb171df68242ab.dll.lib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpy98apue1\\gumdrop-0.8.1\\target\\debug\\deps\\gumdrop_derive-cabb171df68242ab.dll.exp",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpy98apue1\\gumdrop-0.8.1\\target\\debug\\deps\\gumdrop_derive-cabb171df68242ab.pdb"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpy98apue1/gumdrop-0.8.1#gumdrop@0.8.1",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpy98apue1\\gumdrop-0.8.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "gumdrop",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpy98apue1\\gumdrop-0.8.1\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: redundant field names in struct initialization\n   --> src\\lib.rs:462:13\n    |\n462 |             expected: expected,\n    |             ^^^^^^^^^^^^^^^^^^ help: replace it with: `expected`\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#redundant_field_names\n    = note: `#[warn(clippy::redundant_field_names)]` on by default\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#redundant_field_names",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "`#[warn(clippy::redundant_field_names)]` on by default",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "replace it with",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 16206,
                        "byte_start": 16188,
                        "column_end": 31,
                        "column_start": 13,
                        "expansion": null,
                        "file_name": "src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 462,
                        "line_start": 462,
                        "suggested_replacement": "expected",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 31,
                            "highlight_start": 13,
                            "text": "            expected: expected,"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::redundant_field_names",
                  "explanation": null
                },
                "level": "warning",
                "message": "redundant field names in struct initialization",
                "spans": [
                  {
                    "byte_end": 16206,
                    "byte_start": 16188,
                    "column_end": 31,
                    "column_start": 13,
                    "expansion": null,
                    "file_name": "src\\lib.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 462,
                    "line_start": 462,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 31,
                        "highlight_start": 13,
                        "text": "            expected: expected,"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpy98apue1/gumdrop-0.8.1#gumdrop@0.8.1",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpy98apue1\\gumdrop-0.8.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "gumdrop",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpy98apue1\\gumdrop-0.8.1\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: redundant field names in struct initialization\n   --> src\\lib.rs:463:13\n    |\n463 |             found: found,\n    |             ^^^^^^^^^^^^ help: replace it with: `found`\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#redundant_field_names\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#redundant_field_names",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "replace it with",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 16232,
                        "byte_start": 16220,
                        "column_end": 25,
                        "column_start": 13,
                        "expansion": null,
                        "file_name": "src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 463,
                        "line_start": 463,
                        "suggested_replacement": "found",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 25,
                            "highlight_start": 13,
                            "text": "            found: found,"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::redundant_field_names",
                  "explanation": null
                },
                "level": "warning",
                "message": "redundant field names in struct initialization",
                "spans": [
                  {
                    "byte_end": 16232,
                    "byte_start": 16220,
                    "column_end": 25,
                    "column_start": 13,
                    "expansion": null,
                    "file_name": "src\\lib.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 463,
                    "line_start": 463,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 25,
                        "highlight_start": 13,
                        "text": "            found: found,"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpy98apue1/gumdrop-0.8.1#gumdrop@0.8.1",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpy98apue1\\gumdrop-0.8.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "gumdrop",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpy98apue1\\gumdrop-0.8.1\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: redundant field names in struct initialization\n   --> src\\lib.rs:579:13\n    |\n579 |             style: style,\n    |             ^^^^^^^^^^^^ help: replace it with: `style`\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#redundant_field_names\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#redundant_field_names",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "replace it with",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 21002,
                        "byte_start": 20990,
                        "column_end": 25,
                        "column_start": 13,
                        "expansion": null,
                        "file_name": "src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 579,
                        "line_start": 579,
                        "suggested_replacement": "style",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 25,
                            "highlight_start": 13,
                            "text": "            style: style,"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::redundant_field_names",
                  "explanation": null
                },
                "level": "warning",
                "message": "redundant field names in struct initialization",
                "spans": [
                  {
                    "byte_end": 21002,
                    "byte_start": 20990,
                    "column_end": 25,
                    "column_start": 13,
                    "expansion": null,
                    "file_name": "src\\lib.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 579,
                    "line_start": 579,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 25,
                        "highlight_start": 13,
                        "text": "            style: style,"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpy98apue1/gumdrop-0.8.1#gumdrop@0.8.1",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpy98apue1\\gumdrop-0.8.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "gumdrop",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpy98apue1\\gumdrop-0.8.1\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: needless `fn main` in doctest\n  --> src\\lib.rs:9:5\n   |\n9  |   //! use gumdrop::Options;\n   |  _____^\n10 | | //!\n11 | | //! // Defines options that can be parsed from the command line.\n12 | | //! //\n...  |\n63 | | //!     println!(\"{:#?}\", opts);\n64 | | //! }\n   | |_____^\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_doctest_main\n   = note: `#[warn(clippy::needless_doctest_main)]` on by default\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_doctest_main",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "`#[warn(clippy::needless_doctest_main)]` on by default",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "clippy::needless_doctest_main",
                  "explanation": null
                },
                "level": "warning",
                "message": "needless `fn main` in doctest",
                "spans": [
                  {
                    "byte_end": 2671,
                    "byte_start": 252,
                    "column_end": 6,
                    "column_start": 5,
                    "expansion": null,
                    "file_name": "src\\lib.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 64,
                    "line_start": 9,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 26,
                        "highlight_start": 5,
                        "text": "//! use gumdrop::Options;"
                      },
                      {
                        "highlight_end": 4,
                        "highlight_start": 1,
                        "text": "//!"
                      },
                      {
                        "highlight_end": 65,
                        "highlight_start": 1,
                        "text": "//! // Defines options that can be parsed from the command line."
                      },
                      {
                        "highlight_end": 7,
                        "highlight_start": 1,
                        "text": "//! //"
                      },
                      {
                        "highlight_end": 81,
                        "highlight_start": 1,
                        "text": "//! // `derive(Options)` will generate an implementation of the trait `Options`."
                      },
                      {
                        "highlight_end": 75,
                        "highlight_start": 1,
                        "text": "//! // Each field must either have a `Default` implementation or an inline"
                      },
                      {
                        "highlight_end": 31,
                        "highlight_start": 1,
                        "text": "//! // default value provided."
                      },
                      {
                        "highlight_end": 7,
                        "highlight_start": 1,
                        "text": "//! //"
                      },
                      {
                        "highlight_end": 66,
                        "highlight_start": 1,
                        "text": "//! // (`Debug` is derived here only for demonstration purposes.)"
                      },
                      {
                        "highlight_end": 30,
                        "highlight_start": 1,
                        "text": "//! #[derive(Debug, Options)]"
                      },
                      {
                        "highlight_end": 23,
                        "highlight_start": 1,
                        "text": "//! struct MyOptions {"
                      },
                      {
                        "highlight_end": 68,
                        "highlight_start": 1,
                        "text": "//!     // Contains \"free\" arguments -- those that are not options."
                      },
                      {
                        "highlight_end": 83,
                        "highlight_start": 1,
                        "text": "//!     // If no `free` field is declared, free arguments will result in an error."
                      },
                      {
                        "highlight_end": 25,
                        "highlight_start": 1,
                        "text": "//!     #[options(free)]"
                      },
                      {
                        "highlight_end": 27,
                        "highlight_start": 1,
                        "text": "//!     free: Vec<String>,"
                      },
                      {
                        "highlight_end": 4,
                        "highlight_start": 1,
                        "text": "//!"
                      },
                      {
                        "highlight_end": 78,
                        "highlight_start": 1,
                        "text": "//!     // Boolean options are treated as flags, taking no additional values."
                      },
                      {
                        "highlight_end": 71,
                        "highlight_start": 1,
                        "text": "//!     // The optional `help` attribute is displayed in `usage` text."
                      },
                      {
                        "highlight_end": 11,
                        "highlight_start": 1,
                        "text": "//!     //"
                      },
                      {
                        "highlight_end": 90,
                        "highlight_start": 1,
                        "text": "//!     // A boolean field named `help` is automatically given the `help_flag` attribute."
                      },
                      {
                        "highlight_end": 94,
                        "highlight_start": 1,
                        "text": "//!     // The `parse_args_or_exit` and `parse_args_default_or_exit` functions use help flags"
                      },
                      {
                        "highlight_end": 55,
                        "highlight_start": 1,
                        "text": "//!     // to automatically display usage to the user."
                      },
                      {
                        "highlight_end": 48,
                        "highlight_start": 1,
                        "text": "//!     #[options(help = \"print help message\")]"
                      },
                      {
                        "highlight_end": 20,
                        "highlight_start": 1,
                        "text": "//!     help: bool,"
                      },
                      {
                        "highlight_end": 4,
                        "highlight_start": 1,
                        "text": "//!"
                      },
                      {
                        "highlight_end": 71,
                        "highlight_start": 1,
                        "text": "//!     // Non-boolean fields will take a value from the command line."
                      },
                      {
                        "highlight_end": 84,
                        "highlight_start": 1,
                        "text": "//!     // Wrapping the type in an `Option` is not necessary, but provides clarity."
                      },
                      {
                        "highlight_end": 52,
                        "highlight_start": 1,
                        "text": "//!     #[options(help = \"give a string argument\")]"
                      },
                      {
                        "highlight_end": 32,
                        "highlight_start": 1,
                        "text": "//!     string: Option<String>,"
                      },
                      {
                        "highlight_end": 4,
                        "highlight_start": 1,
                        "text": "//!"
                      },
                      {
                        "highlight_end": 62,
                        "highlight_start": 1,
                        "text": "//!     // A field can be any type that implements `FromStr`."
                      },
                      {
                        "highlight_end": 71,
                        "highlight_start": 1,
                        "text": "//!     // The optional `meta` attribute is displayed in `usage` text."
                      },
                      {
                        "highlight_end": 70,
                        "highlight_start": 1,
                        "text": "//!     #[options(help = \"give a number as an argument\", meta = \"N\")]"
                      },
                      {
                        "highlight_end": 29,
                        "highlight_start": 1,
                        "text": "//!     number: Option<i32>,"
                      },
                      {
                        "highlight_end": 4,
                        "highlight_start": 1,
                        "text": "//!"
                      },
                      {
                        "highlight_end": 84,
                        "highlight_start": 1,
                        "text": "//!     // A `Vec` field will accumulate all values received from the command line."
                      },
                      {
                        "highlight_end": 57,
                        "highlight_start": 1,
                        "text": "//!     #[options(help = \"give a list of string items\")]"
                      },
                      {
                        "highlight_end": 27,
                        "highlight_start": 1,
                        "text": "//!     item: Vec<String>,"
                      },
                      {
                        "highlight_end": 4,
                        "highlight_start": 1,
                        "text": "//!"
                      },
                      {
                        "highlight_end": 64,
                        "highlight_start": 1,
                        "text": "//!     // The `count` flag will treat the option as a counter."
                      },
                      {
                        "highlight_end": 74,
                        "highlight_start": 1,
                        "text": "//!     // Each time the option is encountered, the field is incremented."
                      },
                      {
                        "highlight_end": 62,
                        "highlight_start": 1,
                        "text": "//!     #[options(count, help = \"increase a counting value\")]"
                      },
                      {
                        "highlight_end": 20,
                        "highlight_start": 1,
                        "text": "//!     count: u32,"
                      },
                      {
                        "highlight_end": 4,
                        "highlight_start": 1,
                        "text": "//!"
                      },
                      {
                        "highlight_end": 80,
                        "highlight_start": 1,
                        "text": "//!     // Option names are automatically generated from field names, but these"
                      },
                      {
                        "highlight_end": 75,
                        "highlight_start": 1,
                        "text": "//!     // can be overriden. The attributes `short = \"?\"`, `long = \"...\"`,"
                      },
                      {
                        "highlight_end": 71,
                        "highlight_start": 1,
                        "text": "//!     // `no_short`, and `no_long` are used to control option names."
                      },
                      {
                        "highlight_end": 69,
                        "highlight_start": 1,
                        "text": "//!     #[options(no_short, help = \"this option has no short form\")]"
                      },
                      {
                        "highlight_end": 32,
                        "highlight_start": 1,
                        "text": "//!     long_option_only: bool,"
                      },
                      {
                        "highlight_end": 6,
                        "highlight_start": 1,
                        "text": "//! }"
                      },
                      {
                        "highlight_end": 4,
                        "highlight_start": 1,
                        "text": "//!"
                      },
                      {
                        "highlight_end": 16,
                        "highlight_start": 1,
                        "text": "//! fn main() {"
                      },
                      {
                        "highlight_end": 60,
                        "highlight_start": 1,
                        "text": "//!     let opts = MyOptions::parse_args_default_or_exit();"
                      },
                      {
                        "highlight_end": 4,
                        "highlight_start": 1,
                        "text": "//!"
                      },
                      {
                        "highlight_end": 33,
                        "highlight_start": 1,
                        "text": "//!     println!(\"{:#?}\", opts);"
                      },
                      {
                        "highlight_end": 6,
                        "highlight_start": 1,
                        "text": "//! }"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpy98apue1/gumdrop-0.8.1#gumdrop@0.8.1",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpy98apue1\\gumdrop-0.8.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "gumdrop",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpy98apue1\\gumdrop-0.8.1\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: needless `fn main` in doctest\n   --> src\\lib.rs:71:5\n    |\n71  |   //! use gumdrop::Options;\n    |  _____^\n72  | | //!\n73  | | //! // Define options for the program.\n74  | | //! #[derive(Debug, Options)]\n...   |\n135 | | //!     println!(\"{:#?}\", opts);\n136 | | //! }\n    | |_____^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_doctest_main\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_doctest_main",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "clippy::needless_doctest_main",
                  "explanation": null
                },
                "level": "warning",
                "message": "needless `fn main` in doctest",
                "spans": [
                  {
                    "byte_end": 4934,
                    "byte_start": 2793,
                    "column_end": 6,
                    "column_start": 5,
                    "expansion": null,
                    "file_name": "src\\lib.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 136,
                    "line_start": 71,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 26,
                        "highlight_start": 5,
                        "text": "//! use gumdrop::Options;"
                      },
                      {
                        "highlight_end": 4,
                        "highlight_start": 1,
                        "text": "//!"
                      },
                      {
                        "highlight_end": 39,
                        "highlight_start": 1,
                        "text": "//! // Define options for the program."
                      },
                      {
                        "highlight_end": 30,
                        "highlight_start": 1,
                        "text": "//! #[derive(Debug, Options)]"
                      },
                      {
                        "highlight_end": 23,
                        "highlight_start": 1,
                        "text": "//! struct MyOptions {"
                      },
                      {
                        "highlight_end": 75,
                        "highlight_start": 1,
                        "text": "//!     // Options here can be accepted with any command (or none at all),"
                      },
                      {
                        "highlight_end": 55,
                        "highlight_start": 1,
                        "text": "//!     // but they must come before the command name."
                      },
                      {
                        "highlight_end": 48,
                        "highlight_start": 1,
                        "text": "//!     #[options(help = \"print help message\")]"
                      },
                      {
                        "highlight_end": 20,
                        "highlight_start": 1,
                        "text": "//!     help: bool,"
                      },
                      {
                        "highlight_end": 40,
                        "highlight_start": 1,
                        "text": "//!     #[options(help = \"be verbose\")]"
                      },
                      {
                        "highlight_end": 23,
                        "highlight_start": 1,
                        "text": "//!     verbose: bool,"
                      },
                      {
                        "highlight_end": 4,
                        "highlight_start": 1,
                        "text": "//!"
                      },
                      {
                        "highlight_end": 82,
                        "highlight_start": 1,
                        "text": "//!     // The `command` option will delegate option parsing to the command type,"
                      },
                      {
                        "highlight_end": 48,
                        "highlight_start": 1,
                        "text": "//!     // starting at the first free argument."
                      },
                      {
                        "highlight_end": 28,
                        "highlight_start": 1,
                        "text": "//!     #[options(command)]"
                      },
                      {
                        "highlight_end": 34,
                        "highlight_start": 1,
                        "text": "//!     command: Option<Command>,"
                      },
                      {
                        "highlight_end": 6,
                        "highlight_start": 1,
                        "text": "//! }"
                      },
                      {
                        "highlight_end": 4,
                        "highlight_start": 1,
                        "text": "//!"
                      },
                      {
                        "highlight_end": 61,
                        "highlight_start": 1,
                        "text": "//! // The set of commands and the options each one accepts."
                      },
                      {
                        "highlight_end": 7,
                        "highlight_start": 1,
                        "text": "//! //"
                      },
                      {
                        "highlight_end": 80,
                        "highlight_start": 1,
                        "text": "//! // Each variant of a command enum should be a unary tuple variant with only"
                      },
                      {
                        "highlight_end": 85,
                        "highlight_start": 1,
                        "text": "//! // one field. This field must implement `Options` and is used to parse arguments"
                      },
                      {
                        "highlight_end": 46,
                        "highlight_start": 1,
                        "text": "//! // that are given after the command name."
                      },
                      {
                        "highlight_end": 30,
                        "highlight_start": 1,
                        "text": "//! #[derive(Debug, Options)]"
                      },
                      {
                        "highlight_end": 19,
                        "highlight_start": 1,
                        "text": "//! enum Command {"
                      },
                      {
                        "highlight_end": 59,
                        "highlight_start": 1,
                        "text": "//!     // Command names are generated from variant names."
                      },
                      {
                        "highlight_end": 76,
                        "highlight_start": 1,
                        "text": "//!     // By default, a CamelCase name will be converted into a lowercase,"
                      },
                      {
                        "highlight_end": 67,
                        "highlight_start": 1,
                        "text": "//!     // hyphen-separated name; e.g. `FooBar` becomes `foo-bar`."
                      },
                      {
                        "highlight_end": 11,
                        "highlight_start": 1,
                        "text": "//!     //"
                      },
                      {
                        "highlight_end": 78,
                        "highlight_start": 1,
                        "text": "//!     // Names can be explicitly specified using `#[options(name = \"...\")]`"
                      },
                      {
                        "highlight_end": 53,
                        "highlight_start": 1,
                        "text": "//!     #[options(help = \"show help for a command\")]"
                      },
                      {
                        "highlight_end": 24,
                        "highlight_start": 1,
                        "text": "//!     Help(HelpOpts),"
                      },
                      {
                        "highlight_end": 40,
                        "highlight_start": 1,
                        "text": "//!     #[options(help = \"make stuff\")]"
                      },
                      {
                        "highlight_end": 24,
                        "highlight_start": 1,
                        "text": "//!     Make(MakeOpts),"
                      },
                      {
                        "highlight_end": 43,
                        "highlight_start": 1,
                        "text": "//!     #[options(help = \"install stuff\")]"
                      },
                      {
                        "highlight_end": 30,
                        "highlight_start": 1,
                        "text": "//!     Install(InstallOpts),"
                      },
                      {
                        "highlight_end": 6,
                        "highlight_start": 1,
                        "text": "//! }"
                      },
                      {
                        "highlight_end": 4,
                        "highlight_start": 1,
                        "text": "//!"
                      },
                      {
                        "highlight_end": 47,
                        "highlight_start": 1,
                        "text": "//! // Options accepted for the `help` command"
                      },
                      {
                        "highlight_end": 30,
                        "highlight_start": 1,
                        "text": "//! #[derive(Debug, Options)]"
                      },
                      {
                        "highlight_end": 22,
                        "highlight_start": 1,
                        "text": "//! struct HelpOpts {"
                      },
                      {
                        "highlight_end": 25,
                        "highlight_start": 1,
                        "text": "//!     #[options(free)]"
                      },
                      {
                        "highlight_end": 27,
                        "highlight_start": 1,
                        "text": "//!     free: Vec<String>,"
                      },
                      {
                        "highlight_end": 6,
                        "highlight_start": 1,
                        "text": "//! }"
                      },
                      {
                        "highlight_end": 4,
                        "highlight_start": 1,
                        "text": "//!"
                      },
                      {
                        "highlight_end": 47,
                        "highlight_start": 1,
                        "text": "//! // Options accepted for the `make` command"
                      },
                      {
                        "highlight_end": 30,
                        "highlight_start": 1,
                        "text": "//! #[derive(Debug, Options)]"
                      },
                      {
                        "highlight_end": 22,
                        "highlight_start": 1,
                        "text": "//! struct MakeOpts {"
                      },
                      {
                        "highlight_end": 25,
                        "highlight_start": 1,
                        "text": "//!     #[options(free)]"
                      },
                      {
                        "highlight_end": 27,
                        "highlight_start": 1,
                        "text": "//!     free: Vec<String>,"
                      },
                      {
                        "highlight_end": 56,
                        "highlight_start": 1,
                        "text": "//!     #[options(help = \"number of jobs\", meta = \"N\")]"
                      },
                      {
                        "highlight_end": 27,
                        "highlight_start": 1,
                        "text": "//!     jobs: Option<u32>,"
                      },
                      {
                        "highlight_end": 6,
                        "highlight_start": 1,
                        "text": "//! }"
                      },
                      {
                        "highlight_end": 4,
                        "highlight_start": 1,
                        "text": "//!"
                      },
                      {
                        "highlight_end": 50,
                        "highlight_start": 1,
                        "text": "//! // Options accepted for the `install` command"
                      },
                      {
                        "highlight_end": 30,
                        "highlight_start": 1,
                        "text": "//! #[derive(Debug, Options)]"
                      },
                      {
                        "highlight_end": 25,
                        "highlight_start": 1,
                        "text": "//! struct InstallOpts {"
                      },
                      {
                        "highlight_end": 46,
                        "highlight_start": 1,
                        "text": "//!     #[options(help = \"target directory\")]"
                      },
                      {
                        "highlight_end": 29,
                        "highlight_start": 1,
                        "text": "//!     dir: Option<String>,"
                      },
                      {
                        "highlight_end": 6,
                        "highlight_start": 1,
                        "text": "//! }"
                      },
                      {
                        "highlight_end": 4,
                        "highlight_start": 1,
                        "text": "//!"
                      },
                      {
                        "highlight_end": 16,
                        "highlight_start": 1,
                        "text": "//! fn main() {"
                      },
                      {
                        "highlight_end": 60,
                        "highlight_start": 1,
                        "text": "//!     let opts = MyOptions::parse_args_default_or_exit();"
                      },
                      {
                        "highlight_end": 4,
                        "highlight_start": 1,
                        "text": "//!"
                      },
                      {
                        "highlight_end": 33,
                        "highlight_start": 1,
                        "text": "//!     println!(\"{:#?}\", opts);"
                      },
                      {
                        "highlight_end": 6,
                        "highlight_start": 1,
                        "text": "//! }"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpy98apue1/gumdrop-0.8.1#gumdrop@0.8.1",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpy98apue1\\gumdrop-0.8.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "gumdrop",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpy98apue1\\gumdrop-0.8.1\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: this loop could be written as a `while let` loop\n   --> src\\lib.rs:294:13\n    |\n294 | /             loop {\n295 | |                 if let Some(new_command) = command.command() {\n296 | |                     command = new_command;\n...   |\n305 | |             }\n    | |_____________^ help: try: `while let Some(new_command) = command.command() { .. }`\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#while_let_loop\n    = note: `#[warn(clippy::while_let_loop)]` on by default\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#while_let_loop",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "`#[warn(clippy::while_let_loop)]` on by default",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "try",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 10252,
                        "byte_start": 9865,
                        "column_end": 14,
                        "column_start": 13,
                        "expansion": null,
                        "file_name": "src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 305,
                        "line_start": 294,
                        "suggested_replacement": "while let Some(new_command) = command.command() { .. }",
                        "suggestion_applicability": "HasPlaceholders",
                        "text": [
                          {
                            "highlight_end": 19,
                            "highlight_start": 13,
                            "text": "            loop {"
                          },
                          {
                            "highlight_end": 63,
                            "highlight_start": 1,
                            "text": "                if let Some(new_command) = command.command() {"
                          },
                          {
                            "highlight_end": 43,
                            "highlight_start": 1,
                            "text": "                    command = new_command;"
                          },
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": ""
                          },
                          {
                            "highlight_end": 69,
                            "highlight_start": 1,
                            "text": "                    if let Some(name) = new_command.command_name() {"
                          },
                          {
                            "highlight_end": 47,
                            "highlight_start": 1,
                            "text": "                        command_str.push(' ');"
                          },
                          {
                            "highlight_end": 52,
                            "highlight_start": 1,
                            "text": "                        command_str.push_str(name);"
                          },
                          {
                            "highlight_end": 22,
                            "highlight_start": 1,
                            "text": "                    }"
                          },
                          {
                            "highlight_end": 25,
                            "highlight_start": 1,
                            "text": "                } else {"
                          },
                          {
                            "highlight_end": 27,
                            "highlight_start": 1,
                            "text": "                    break;"
                          },
                          {
                            "highlight_end": 18,
                            "highlight_start": 1,
                            "text": "                }"
                          },
                          {
                            "highlight_end": 14,
                            "highlight_start": 1,
                            "text": "            }"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::while_let_loop",
                  "explanation": null
                },
                "level": "warning",
                "message": "this loop could be written as a `while let` loop",
                "spans": [
                  {
                    "byte_end": 10252,
                    "byte_start": 9865,
                    "column_end": 14,
                    "column_start": 13,
                    "expansion": null,
                    "file_name": "src\\lib.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 305,
                    "line_start": 294,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 19,
                        "highlight_start": 13,
                        "text": "            loop {"
                      },
                      {
                        "highlight_end": 63,
                        "highlight_start": 1,
                        "text": "                if let Some(new_command) = command.command() {"
                      },
                      {
                        "highlight_end": 43,
                        "highlight_start": 1,
                        "text": "                    command = new_command;"
                      },
                      {
                        "highlight_end": 1,
                        "highlight_start": 1,
                        "text": ""
                      },
                      {
                        "highlight_end": 69,
                        "highlight_start": 1,
                        "text": "                    if let Some(name) = new_command.command_name() {"
                      },
                      {
                        "highlight_end": 47,
                        "highlight_start": 1,
                        "text": "                        command_str.push(' ');"
                      },
                      {
                        "highlight_end": 52,
                        "highlight_start": 1,
                        "text": "                        command_str.push_str(name);"
                      },
                      {
                        "highlight_end": 22,
                        "highlight_start": 1,
                        "text": "                    }"
                      },
                      {
                        "highlight_end": 25,
                        "highlight_start": 1,
                        "text": "                } else {"
                      },
                      {
                        "highlight_end": 27,
                        "highlight_start": 1,
                        "text": "                    break;"
                      },
                      {
                        "highlight_end": 18,
                        "highlight_start": 1,
                        "text": "                }"
                      },
                      {
                        "highlight_end": 14,
                        "highlight_start": 1,
                        "text": "            }"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpy98apue1/gumdrop-0.8.1#gumdrop@0.8.1",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpy98apue1\\gumdrop-0.8.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "gumdrop",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpy98apue1\\gumdrop-0.8.1\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: variables can be used directly in the `format!` string\n   --> src\\lib.rs:314:17\n    |\n314 |                 eprintln!(\"{}\", cmds);\n    |                 ^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args\n    = note: `#[warn(clippy::uninlined_format_args)]` on by default\nhelp: change this to\n    |\n314 -                 eprintln!(\"{}\", cmds);\n314 +                 eprintln!(\"{cmds}\");\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "`#[warn(clippy::uninlined_format_args)]` on by default",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "change this to",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 10570,
                        "byte_start": 10570,
                        "column_end": 29,
                        "column_start": 29,
                        "expansion": null,
                        "file_name": "src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 314,
                        "line_start": 314,
                        "suggested_replacement": "cmds",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 29,
                            "highlight_start": 29,
                            "text": "                eprintln!(\"{}\", cmds);"
                          }
                        ]
                      },
                      {
                        "byte_end": 10578,
                        "byte_start": 10572,
                        "column_end": 37,
                        "column_start": 31,
                        "expansion": null,
                        "file_name": "src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 314,
                        "line_start": 314,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 37,
                            "highlight_start": 31,
                            "text": "                eprintln!(\"{}\", cmds);"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::uninlined_format_args",
                  "explanation": null
                },
                "level": "warning",
                "message": "variables can be used directly in the `format!` string",
                "spans": [
                  {
                    "byte_end": 10579,
                    "byte_start": 10558,
                    "column_end": 38,
                    "column_start": 17,
                    "expansion": null,
                    "file_name": "src\\lib.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 314,
                    "line_start": 314,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 38,
                        "highlight_start": 17,
                        "text": "                eprintln!(\"{}\", cmds);"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpy98apue1/gumdrop-0.8.1#gumdrop@0.8.1",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpy98apue1\\gumdrop-0.8.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "gumdrop",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpy98apue1\\gumdrop-0.8.1\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: variables can be used directly in the `format!` string\n   --> src\\lib.rs:543:38\n    |\n543 |             FailedParse(opt, arg) => write!(f, \"invalid argument to option `{}`: {}\", opt, arg),\n    |                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args\nhelp: change this to\n    |\n543 -             FailedParse(opt, arg) => write!(f, \"invalid argument to option `{}`: {}\", opt, arg),\n543 +             FailedParse(opt, arg) => write!(f, \"invalid argument to option `{opt}`: {arg}\"),\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "change this to",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 19181,
                        "byte_start": 19181,
                        "column_end": 78,
                        "column_start": 78,
                        "expansion": null,
                        "file_name": "src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 543,
                        "line_start": 543,
                        "suggested_replacement": "opt",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 78,
                            "highlight_start": 78,
                            "text": "            FailedParse(opt, arg) => write!(f, \"invalid argument to option `{}`: {}\", opt, arg),"
                          }
                        ]
                      },
                      {
                        "byte_end": 19186,
                        "byte_start": 19186,
                        "column_end": 83,
                        "column_start": 83,
                        "expansion": null,
                        "file_name": "src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 543,
                        "line_start": 543,
                        "suggested_replacement": "arg",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 83,
                            "highlight_start": 83,
                            "text": "            FailedParse(opt, arg) => write!(f, \"invalid argument to option `{}`: {}\", opt, arg),"
                          }
                        ]
                      },
                      {
                        "byte_end": 19193,
                        "byte_start": 19188,
                        "column_end": 90,
                        "column_start": 85,
                        "expansion": null,
                        "file_name": "src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 543,
                        "line_start": 543,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 90,
                            "highlight_start": 85,
                            "text": "            FailedParse(opt, arg) => write!(f, \"invalid argument to option `{}`: {}\", opt, arg),"
                          }
                        ]
                      },
                      {
                        "byte_end": 19198,
                        "byte_start": 19193,
                        "column_end": 95,
                        "column_start": 90,
                        "expansion": null,
                        "file_name": "src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 543,
                        "line_start": 543,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 95,
                            "highlight_start": 90,
                            "text": "            FailedParse(opt, arg) => write!(f, \"invalid argument to option `{}`: {}\", opt, arg),"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::uninlined_format_args",
                  "explanation": null
                },
                "level": "warning",
                "message": "variables can be used directly in the `format!` string",
                "spans": [
                  {
                    "byte_end": 19199,
                    "byte_start": 19141,
                    "column_end": 96,
                    "column_start": 38,
                    "expansion": null,
                    "file_name": "src\\lib.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 543,
                    "line_start": 543,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 96,
                        "highlight_start": 38,
                        "text": "            FailedParse(opt, arg) => write!(f, \"invalid argument to option `{}`: {}\", opt, arg),"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpy98apue1/gumdrop-0.8.1#gumdrop@0.8.1",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpy98apue1\\gumdrop-0.8.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "gumdrop",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpy98apue1\\gumdrop-0.8.1\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: variables can be used directly in the `format!` string\n   --> src\\lib.rs:544:55\n    |\n544 |             FailedParseDefault{option, value, err} => write!(f, \"invalid default value for `{}` ({:?}): {}\", option, value, err),\n    |                                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args\nhelp: change this to\n    |\n544 -             FailedParseDefault{option, value, err} => write!(f, \"invalid default value for `{}` ({:?}): {}\", option, value, err),\n544 +             FailedParseDefault{option, value, err} => write!(f, \"invalid default value for `{option}` ({value:?}): {err}\"),\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "change this to",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 19294,
                        "byte_start": 19294,
                        "column_end": 94,
                        "column_start": 94,
                        "expansion": null,
                        "file_name": "src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 544,
                        "line_start": 544,
                        "suggested_replacement": "option",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 94,
                            "highlight_start": 94,
                            "text": "            FailedParseDefault{option, value, err} => write!(f, \"invalid default value for `{}` ({:?}): {}\", option, value, err),"
                          }
                        ]
                      },
                      {
                        "byte_end": 19299,
                        "byte_start": 19299,
                        "column_end": 99,
                        "column_start": 99,
                        "expansion": null,
                        "file_name": "src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 544,
                        "line_start": 544,
                        "suggested_replacement": "value",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 99,
                            "highlight_start": 99,
                            "text": "            FailedParseDefault{option, value, err} => write!(f, \"invalid default value for `{}` ({:?}): {}\", option, value, err),"
                          }
                        ]
                      },
                      {
                        "byte_end": 19306,
                        "byte_start": 19306,
                        "column_end": 106,
                        "column_start": 106,
                        "expansion": null,
                        "file_name": "src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 544,
                        "line_start": 544,
                        "suggested_replacement": "err",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 106,
                            "highlight_start": 106,
                            "text": "            FailedParseDefault{option, value, err} => write!(f, \"invalid default value for `{}` ({:?}): {}\", option, value, err),"
                          }
                        ]
                      },
                      {
                        "byte_end": 19316,
                        "byte_start": 19308,
                        "column_end": 116,
                        "column_start": 108,
                        "expansion": null,
                        "file_name": "src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 544,
                        "line_start": 544,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 116,
                            "highlight_start": 108,
                            "text": "            FailedParseDefault{option, value, err} => write!(f, \"invalid default value for `{}` ({:?}): {}\", option, value, err),"
                          }
                        ]
                      },
                      {
                        "byte_end": 19323,
                        "byte_start": 19316,
                        "column_end": 123,
                        "column_start": 116,
                        "expansion": null,
                        "file_name": "src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 544,
                        "line_start": 544,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 123,
                            "highlight_start": 116,
                            "text": "            FailedParseDefault{option, value, err} => write!(f, \"invalid default value for `{}` ({:?}): {}\", option, value, err),"
                          }
                        ]
                      },
                      {
                        "byte_end": 19328,
                        "byte_start": 19323,
                        "column_end": 128,
                        "column_start": 123,
                        "expansion": null,
                        "file_name": "src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 544,
                        "line_start": 544,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 128,
                            "highlight_start": 123,
                            "text": "            FailedParseDefault{option, value, err} => write!(f, \"invalid default value for `{}` ({:?}): {}\", option, value, err),"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::uninlined_format_args",
                  "explanation": null
                },
                "level": "warning",
                "message": "variables can be used directly in the `format!` string",
                "spans": [
                  {
                    "byte_end": 19329,
                    "byte_start": 19255,
                    "column_end": 129,
                    "column_start": 55,
                    "expansion": null,
                    "file_name": "src\\lib.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 544,
                    "line_start": 544,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 129,
                        "highlight_start": 55,
                        "text": "            FailedParseDefault{option, value, err} => write!(f, \"invalid default value for `{}` ({:?}): {}\", option, value, err),"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpy98apue1/gumdrop-0.8.1#gumdrop@0.8.1",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpy98apue1\\gumdrop-0.8.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "gumdrop",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpy98apue1\\gumdrop-0.8.1\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: variables can be used directly in the `format!` string\n   --> src\\lib.rs:546:17\n    |\n546 | /                 write!(f, \"insufficient arguments to option `{}`: expected {}; found {}\",\n547 | |                     option, expected, found),\n    | |____________________________________________^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "change this to",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 19455,
                        "byte_start": 19455,
                        "column_end": 63,
                        "column_start": 63,
                        "expansion": null,
                        "file_name": "src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 546,
                        "line_start": 546,
                        "suggested_replacement": "option",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 63,
                            "highlight_start": 63,
                            "text": "                write!(f, \"insufficient arguments to option `{}`: expected {}; found {}\","
                          }
                        ]
                      },
                      {
                        "byte_end": 19469,
                        "byte_start": 19469,
                        "column_end": 77,
                        "column_start": 77,
                        "expansion": null,
                        "file_name": "src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 546,
                        "line_start": 546,
                        "suggested_replacement": "expected",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 77,
                            "highlight_start": 77,
                            "text": "                write!(f, \"insufficient arguments to option `{}`: expected {}; found {}\","
                          }
                        ]
                      },
                      {
                        "byte_end": 19479,
                        "byte_start": 19479,
                        "column_end": 87,
                        "column_start": 87,
                        "expansion": null,
                        "file_name": "src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 546,
                        "line_start": 546,
                        "suggested_replacement": "found",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 87,
                            "highlight_start": 87,
                            "text": "                write!(f, \"insufficient arguments to option `{}`: expected {}; found {}\","
                          }
                        ]
                      },
                      {
                        "byte_end": 19509,
                        "byte_start": 19481,
                        "column_end": 27,
                        "column_start": 89,
                        "expansion": null,
                        "file_name": "src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 547,
                        "line_start": 546,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 90,
                            "highlight_start": 89,
                            "text": "                write!(f, \"insufficient arguments to option `{}`: expected {}; found {}\","
                          },
                          {
                            "highlight_end": 27,
                            "highlight_start": 1,
                            "text": "                    option, expected, found),"
                          }
                        ]
                      },
                      {
                        "byte_end": 19519,
                        "byte_start": 19509,
                        "column_end": 37,
                        "column_start": 27,
                        "expansion": null,
                        "file_name": "src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 547,
                        "line_start": 547,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 37,
                            "highlight_start": 27,
                            "text": "                    option, expected, found),"
                          }
                        ]
                      },
                      {
                        "byte_end": 19526,
                        "byte_start": 19519,
                        "column_end": 44,
                        "column_start": 37,
                        "expansion": null,
                        "file_name": "src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 547,
                        "line_start": 547,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 44,
                            "highlight_start": 37,
                            "text": "                    option, expected, found),"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::uninlined_format_args",
                  "explanation": null
                },
                "level": "warning",
                "message": "variables can be used directly in the `format!` string",
                "spans": [
                  {
                    "byte_end": 19527,
                    "byte_start": 19409,
                    "column_end": 45,
                    "column_start": 17,
                    "expansion": null,
                    "file_name": "src\\lib.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 547,
                    "line_start": 546,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 90,
                        "highlight_start": 17,
                        "text": "                write!(f, \"insufficient arguments to option `{}`: expected {}; found {}\","
                      },
                      {
                        "highlight_end": 45,
                        "highlight_start": 1,
                        "text": "                    option, expected, found),"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpy98apue1/gumdrop-0.8.1#gumdrop@0.8.1",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpy98apue1\\gumdrop-0.8.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "gumdrop",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpy98apue1\\gumdrop-0.8.1\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: variables can be used directly in the `format!` string\n   --> src\\lib.rs:548:37\n    |\n548 |             MissingArgument(opt) => write!(f, \"missing argument to option `{}`\", opt),\n    |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args\nhelp: change this to\n    |\n548 -             MissingArgument(opt) => write!(f, \"missing argument to option `{}`\", opt),\n548 +             MissingArgument(opt) => write!(f, \"missing argument to option `{opt}`\"),\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "change this to",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 19605,
                        "byte_start": 19605,
                        "column_end": 77,
                        "column_start": 77,
                        "expansion": null,
                        "file_name": "src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 548,
                        "line_start": 548,
                        "suggested_replacement": "opt",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 77,
                            "highlight_start": 77,
                            "text": "            MissingArgument(opt) => write!(f, \"missing argument to option `{}`\", opt),"
                          }
                        ]
                      },
                      {
                        "byte_end": 19613,
                        "byte_start": 19608,
                        "column_end": 85,
                        "column_start": 80,
                        "expansion": null,
                        "file_name": "src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 548,
                        "line_start": 548,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 85,
                            "highlight_start": 80,
                            "text": "            MissingArgument(opt) => write!(f, \"missing argument to option `{}`\", opt),"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::uninlined_format_args",
                  "explanation": null
                },
                "level": "warning",
                "message": "variables can be used directly in the `format!` string",
                "spans": [
                  {
                    "byte_end": 19614,
                    "byte_start": 19565,
                    "column_end": 86,
                    "column_start": 37,
                    "expansion": null,
                    "file_name": "src\\lib.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 548,
                    "line_start": 548,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 86,
                        "highlight_start": 37,
                        "text": "            MissingArgument(opt) => write!(f, \"missing argument to option `{}`\", opt),"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpy98apue1/gumdrop-0.8.1#gumdrop@0.8.1",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpy98apue1\\gumdrop-0.8.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "gumdrop",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpy98apue1\\gumdrop-0.8.1\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: variables can be used directly in the `format!` string\n   --> src\\lib.rs:550:37\n    |\n550 |             MissingRequired(opt) => write!(f, \"missing required option `{}`\", opt),\n    |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args\nhelp: change this to\n    |\n550 -             MissingRequired(opt) => write!(f, \"missing required option `{}`\", opt),\n550 +             MissingRequired(opt) => write!(f, \"missing required option `{opt}`\"),\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "change this to",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 19756,
                        "byte_start": 19756,
                        "column_end": 74,
                        "column_start": 74,
                        "expansion": null,
                        "file_name": "src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 550,
                        "line_start": 550,
                        "suggested_replacement": "opt",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 74,
                            "highlight_start": 74,
                            "text": "            MissingRequired(opt) => write!(f, \"missing required option `{}`\", opt),"
                          }
                        ]
                      },
                      {
                        "byte_end": 19764,
                        "byte_start": 19759,
                        "column_end": 82,
                        "column_start": 77,
                        "expansion": null,
                        "file_name": "src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 550,
                        "line_start": 550,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 82,
                            "highlight_start": 77,
                            "text": "            MissingRequired(opt) => write!(f, \"missing required option `{}`\", opt),"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::uninlined_format_args",
                  "explanation": null
                },
                "level": "warning",
                "message": "variables can be used directly in the `format!` string",
                "spans": [
                  {
                    "byte_end": 19765,
                    "byte_start": 19719,
                    "column_end": 83,
                    "column_start": 37,
                    "expansion": null,
                    "file_name": "src\\lib.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 550,
                    "line_start": 550,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 83,
                        "highlight_start": 37,
                        "text": "            MissingRequired(opt) => write!(f, \"missing required option `{}`\", opt),"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpy98apue1/gumdrop-0.8.1#gumdrop@0.8.1",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpy98apue1\\gumdrop-0.8.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "gumdrop",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpy98apue1\\gumdrop-0.8.1\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: variables can be used directly in the `format!` string\n   --> src\\lib.rs:553:40\n    |\n553 |             UnexpectedArgument(opt) => write!(f, \"option `{}` does not accept an argument\", opt),\n    |                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args\nhelp: change this to\n    |\n553 -             UnexpectedArgument(opt) => write!(f, \"option `{}` does not accept an argument\", opt),\n553 +             UnexpectedArgument(opt) => write!(f, \"option `{opt}` does not accept an argument\"),\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "change this to",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 19987,
                        "byte_start": 19987,
                        "column_end": 60,
                        "column_start": 60,
                        "expansion": null,
                        "file_name": "src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 553,
                        "line_start": 553,
                        "suggested_replacement": "opt",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 60,
                            "highlight_start": 60,
                            "text": "            UnexpectedArgument(opt) => write!(f, \"option `{}` does not accept an argument\", opt),"
                          }
                        ]
                      },
                      {
                        "byte_end": 20023,
                        "byte_start": 20018,
                        "column_end": 96,
                        "column_start": 91,
                        "expansion": null,
                        "file_name": "src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 553,
                        "line_start": 553,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 96,
                            "highlight_start": 91,
                            "text": "            UnexpectedArgument(opt) => write!(f, \"option `{}` does not accept an argument\", opt),"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::uninlined_format_args",
                  "explanation": null
                },
                "level": "warning",
                "message": "variables can be used directly in the `format!` string",
                "spans": [
                  {
                    "byte_end": 20024,
                    "byte_start": 19967,
                    "column_end": 97,
                    "column_start": 40,
                    "expansion": null,
                    "file_name": "src\\lib.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 553,
                    "line_start": 553,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 97,
                        "highlight_start": 40,
                        "text": "            UnexpectedArgument(opt) => write!(f, \"option `{}` does not accept an argument\", opt),"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpy98apue1/gumdrop-0.8.1#gumdrop@0.8.1",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpy98apue1\\gumdrop-0.8.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "gumdrop",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpy98apue1\\gumdrop-0.8.1\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: variables can be used directly in the `format!` string\n   --> src\\lib.rs:555:17\n    |\n555 |                 write!(f, \"option `{}` expects {} arguments; found 1\", opt, n),\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args\nhelp: change this to\n    |\n555 -                 write!(f, \"option `{}` expects {} arguments; found 1\", opt, n),\n555 +                 write!(f, \"option `{opt}` expects {n} arguments; found 1\"),\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "change this to",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 20110,
                        "byte_start": 20110,
                        "column_end": 37,
                        "column_start": 37,
                        "expansion": null,
                        "file_name": "src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 555,
                        "line_start": 555,
                        "suggested_replacement": "opt",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 37,
                            "highlight_start": 37,
                            "text": "                write!(f, \"option `{}` expects {} arguments; found 1\", opt, n),"
                          }
                        ]
                      },
                      {
                        "byte_end": 20122,
                        "byte_start": 20122,
                        "column_end": 49,
                        "column_start": 49,
                        "expansion": null,
                        "file_name": "src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 555,
                        "line_start": 555,
                        "suggested_replacement": "n",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 49,
                            "highlight_start": 49,
                            "text": "                write!(f, \"option `{}` expects {} arguments; found 1\", opt, n),"
                          }
                        ]
                      },
                      {
                        "byte_end": 20148,
                        "byte_start": 20143,
                        "column_end": 75,
                        "column_start": 70,
                        "expansion": null,
                        "file_name": "src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 555,
                        "line_start": 555,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 75,
                            "highlight_start": 70,
                            "text": "                write!(f, \"option `{}` expects {} arguments; found 1\", opt, n),"
                          }
                        ]
                      },
                      {
                        "byte_end": 20151,
                        "byte_start": 20148,
                        "column_end": 78,
                        "column_start": 75,
                        "expansion": null,
                        "file_name": "src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 555,
                        "line_start": 555,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 78,
                            "highlight_start": 75,
                            "text": "                write!(f, \"option `{}` expects {} arguments; found 1\", opt, n),"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::uninlined_format_args",
                  "explanation": null
                },
                "level": "warning",
                "message": "variables can be used directly in the `format!` string",
                "spans": [
                  {
                    "byte_end": 20152,
                    "byte_start": 20090,
                    "column_end": 79,
                    "column_start": 17,
                    "expansion": null,
                    "file_name": "src\\lib.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 555,
                    "line_start": 555,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 79,
                        "highlight_start": 17,
                        "text": "                write!(f, \"option `{}` expects {} arguments; found 1\", opt, n),"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpy98apue1/gumdrop-0.8.1#gumdrop@0.8.1",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpy98apue1\\gumdrop-0.8.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "gumdrop",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpy98apue1\\gumdrop-0.8.1\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: variables can be used directly in the `format!` string\n   --> src\\lib.rs:556:36\n    |\n556 |             UnexpectedFree(arg) => write!(f, \"unexpected free argument `{}`\", arg),\n    |                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args\nhelp: change this to\n    |\n556 -             UnexpectedFree(arg) => write!(f, \"unexpected free argument `{}`\", arg),\n556 +             UnexpectedFree(arg) => write!(f, \"unexpected free argument `{arg}`\"),\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "change this to",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 20227,
                        "byte_start": 20227,
                        "column_end": 74,
                        "column_start": 74,
                        "expansion": null,
                        "file_name": "src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 556,
                        "line_start": 556,
                        "suggested_replacement": "arg",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 74,
                            "highlight_start": 74,
                            "text": "            UnexpectedFree(arg) => write!(f, \"unexpected free argument `{}`\", arg),"
                          }
                        ]
                      },
                      {
                        "byte_end": 20235,
                        "byte_start": 20230,
                        "column_end": 82,
                        "column_start": 77,
                        "expansion": null,
                        "file_name": "src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 556,
                        "line_start": 556,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 82,
                            "highlight_start": 77,
                            "text": "            UnexpectedFree(arg) => write!(f, \"unexpected free argument `{}`\", arg),"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::uninlined_format_args",
                  "explanation": null
                },
                "level": "warning",
                "message": "variables can be used directly in the `format!` string",
                "spans": [
                  {
                    "byte_end": 20236,
                    "byte_start": 20189,
                    "column_end": 83,
                    "column_start": 36,
                    "expansion": null,
                    "file_name": "src\\lib.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 556,
                    "line_start": 556,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 83,
                        "highlight_start": 36,
                        "text": "            UnexpectedFree(arg) => write!(f, \"unexpected free argument `{}`\", arg),"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpy98apue1/gumdrop-0.8.1#gumdrop@0.8.1",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpy98apue1\\gumdrop-0.8.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "gumdrop",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpy98apue1\\gumdrop-0.8.1\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: variables can be used directly in the `format!` string\n   --> src\\lib.rs:557:41\n    |\n557 |             UnrecognizedCommand(cmd) => write!(f, \"unrecognized command `{}`\", cmd),\n    |                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args\nhelp: change this to\n    |\n557 -             UnrecognizedCommand(cmd) => write!(f, \"unrecognized command `{}`\", cmd),\n557 +             UnrecognizedCommand(cmd) => write!(f, \"unrecognized command `{cmd}`\"),\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "change this to",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 20312,
                        "byte_start": 20312,
                        "column_end": 75,
                        "column_start": 75,
                        "expansion": null,
                        "file_name": "src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 557,
                        "line_start": 557,
                        "suggested_replacement": "cmd",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 75,
                            "highlight_start": 75,
                            "text": "            UnrecognizedCommand(cmd) => write!(f, \"unrecognized command `{}`\", cmd),"
                          }
                        ]
                      },
                      {
                        "byte_end": 20320,
                        "byte_start": 20315,
                        "column_end": 83,
                        "column_start": 78,
                        "expansion": null,
                        "file_name": "src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 557,
                        "line_start": 557,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 83,
                            "highlight_start": 78,
                            "text": "            UnrecognizedCommand(cmd) => write!(f, \"unrecognized command `{}`\", cmd),"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::uninlined_format_args",
                  "explanation": null
                },
                "level": "warning",
                "message": "variables can be used directly in the `format!` string",
                "spans": [
                  {
                    "byte_end": 20321,
                    "byte_start": 20278,
                    "column_end": 84,
                    "column_start": 41,
                    "expansion": null,
                    "file_name": "src\\lib.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 557,
                    "line_start": 557,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 84,
                        "highlight_start": 41,
                        "text": "            UnrecognizedCommand(cmd) => write!(f, \"unrecognized command `{}`\", cmd),"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpy98apue1/gumdrop-0.8.1#gumdrop@0.8.1",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpy98apue1\\gumdrop-0.8.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "gumdrop",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpy98apue1\\gumdrop-0.8.1\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: variables can be used directly in the `format!` string\n   --> src\\lib.rs:558:44\n    |\n558 |             UnrecognizedLongOption(opt) => write!(f, \"unrecognized option `--{}`\", opt),\n    |                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args\nhelp: change this to\n    |\n558 -             UnrecognizedLongOption(opt) => write!(f, \"unrecognized option `--{}`\", opt),\n558 +             UnrecognizedLongOption(opt) => write!(f, \"unrecognized option `--{opt}`\"),\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "change this to",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 20401,
                        "byte_start": 20401,
                        "column_end": 79,
                        "column_start": 79,
                        "expansion": null,
                        "file_name": "src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 558,
                        "line_start": 558,
                        "suggested_replacement": "opt",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 79,
                            "highlight_start": 79,
                            "text": "            UnrecognizedLongOption(opt) => write!(f, \"unrecognized option `--{}`\", opt),"
                          }
                        ]
                      },
                      {
                        "byte_end": 20409,
                        "byte_start": 20404,
                        "column_end": 87,
                        "column_start": 82,
                        "expansion": null,
                        "file_name": "src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 558,
                        "line_start": 558,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 87,
                            "highlight_start": 82,
                            "text": "            UnrecognizedLongOption(opt) => write!(f, \"unrecognized option `--{}`\", opt),"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::uninlined_format_args",
                  "explanation": null
                },
                "level": "warning",
                "message": "variables can be used directly in the `format!` string",
                "spans": [
                  {
                    "byte_end": 20410,
                    "byte_start": 20366,
                    "column_end": 88,
                    "column_start": 44,
                    "expansion": null,
                    "file_name": "src\\lib.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 558,
                    "line_start": 558,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 88,
                        "highlight_start": 44,
                        "text": "            UnrecognizedLongOption(opt) => write!(f, \"unrecognized option `--{}`\", opt),"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpy98apue1/gumdrop-0.8.1#gumdrop@0.8.1",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpy98apue1\\gumdrop-0.8.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "gumdrop",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpy98apue1\\gumdrop-0.8.1\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: variables can be used directly in the `format!` string\n   --> src\\lib.rs:559:45\n    |\n559 |             UnrecognizedShortOption(opt) => write!(f, \"unrecognized option `-{}`\", opt),\n    |                                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args\nhelp: change this to\n    |\n559 -             UnrecognizedShortOption(opt) => write!(f, \"unrecognized option `-{}`\", opt),\n559 +             UnrecognizedShortOption(opt) => write!(f, \"unrecognized option `-{opt}`\"),\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "change this to",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 20490,
                        "byte_start": 20490,
                        "column_end": 79,
                        "column_start": 79,
                        "expansion": null,
                        "file_name": "src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 559,
                        "line_start": 559,
                        "suggested_replacement": "opt",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 79,
                            "highlight_start": 79,
                            "text": "            UnrecognizedShortOption(opt) => write!(f, \"unrecognized option `-{}`\", opt),"
                          }
                        ]
                      },
                      {
                        "byte_end": 20498,
                        "byte_start": 20493,
                        "column_end": 87,
                        "column_start": 82,
                        "expansion": null,
                        "file_name": "src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 559,
                        "line_start": 559,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 87,
                            "highlight_start": 82,
                            "text": "            UnrecognizedShortOption(opt) => write!(f, \"unrecognized option `-{}`\", opt),"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::uninlined_format_args",
                  "explanation": null
                },
                "level": "warning",
                "message": "variables can be used directly in the `format!` string",
                "spans": [
                  {
                    "byte_end": 20499,
                    "byte_start": 20456,
                    "column_end": 88,
                    "column_start": 45,
                    "expansion": null,
                    "file_name": "src\\lib.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 559,
                    "line_start": 559,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 88,
                        "highlight_start": 45,
                        "text": "            UnrecognizedShortOption(opt) => write!(f, \"unrecognized option `-{}`\", opt),"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpy98apue1/gumdrop-0.8.1#gumdrop@0.8.1",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpy98apue1\\gumdrop-0.8.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "gumdrop",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpy98apue1\\gumdrop-0.8.1\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: implementation of inherent method `to_string(&self) -> String` for type `Opt<'a>`\n   --> src\\lib.rs:660:5\n    |\n660 | /     pub fn to_string(&self) -> String {\n661 | |         match *self {\n662 | |             Opt::Short(ch) => format!(\"-{}\", ch),\n663 | |             Opt::Long(s) => format!(\"--{}\", s),\n...   |\n667 | |     }\n    | |_____^\n    |\n    = help: implement trait `Display` for type `Opt<'a>` instead\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#inherent_to_string\n    = note: `#[warn(clippy::inherent_to_string)]` on by default\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "implement trait `Display` for type `Opt<'a>` instead",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#inherent_to_string",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "`#[warn(clippy::inherent_to_string)]` on by default",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "clippy::inherent_to_string",
                  "explanation": null
                },
                "level": "warning",
                "message": "implementation of inherent method `to_string(&self) -> String` for type `Opt<'a>`",
                "spans": [
                  {
                    "byte_end": 23606,
                    "byte_start": 23327,
                    "column_end": 6,
                    "column_start": 5,
                    "expansion": null,
                    "file_name": "src\\lib.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 667,
                    "line_start": 660,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 40,
                        "highlight_start": 5,
                        "text": "    pub fn to_string(&self) -> String {"
                      },
                      {
                        "highlight_end": 22,
                        "highlight_start": 1,
                        "text": "        match *self {"
                      },
                      {
                        "highlight_end": 50,
                        "highlight_start": 1,
                        "text": "            Opt::Short(ch) => format!(\"-{}\", ch),"
                      },
                      {
                        "highlight_end": 48,
                        "highlight_start": 1,
                        "text": "            Opt::Long(s) => format!(\"--{}\", s),"
                      },
                      {
                        "highlight_end": 62,
                        "highlight_start": 1,
                        "text": "            Opt::LongWithArg(opt, _) => format!(\"--{}\", opt),"
                      },
                      {
                        "highlight_end": 46,
                        "highlight_start": 1,
                        "text": "            Opt::Free(_) => \"free\".to_owned()"
                      },
                      {
                        "highlight_end": 10,
                        "highlight_start": 1,
                        "text": "        }"
                      },
                      {
                        "highlight_end": 6,
                        "highlight_start": 1,
                        "text": "    }"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpy98apue1/gumdrop-0.8.1#gumdrop@0.8.1",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpy98apue1\\gumdrop-0.8.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "gumdrop",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpy98apue1\\gumdrop-0.8.1\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: variables can be used directly in the `format!` string\n   --> src\\lib.rs:662:31\n    |\n662 |             Opt::Short(ch) => format!(\"-{}\", ch),\n    |                               ^^^^^^^^^^^^^^^^^^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args\nhelp: change this to\n    |\n662 -             Opt::Short(ch) => format!(\"-{}\", ch),\n662 +             Opt::Short(ch) => format!(\"-{ch}\"),\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "change this to",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 23426,
                        "byte_start": 23426,
                        "column_end": 42,
                        "column_start": 42,
                        "expansion": null,
                        "file_name": "src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 662,
                        "line_start": 662,
                        "suggested_replacement": "ch",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 42,
                            "highlight_start": 42,
                            "text": "            Opt::Short(ch) => format!(\"-{}\", ch),"
                          }
                        ]
                      },
                      {
                        "byte_end": 23432,
                        "byte_start": 23428,
                        "column_end": 48,
                        "column_start": 44,
                        "expansion": null,
                        "file_name": "src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 662,
                        "line_start": 662,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 48,
                            "highlight_start": 44,
                            "text": "            Opt::Short(ch) => format!(\"-{}\", ch),"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::uninlined_format_args",
                  "explanation": null
                },
                "level": "warning",
                "message": "variables can be used directly in the `format!` string",
                "spans": [
                  {
                    "byte_end": 23433,
                    "byte_start": 23415,
                    "column_end": 49,
                    "column_start": 31,
                    "expansion": null,
                    "file_name": "src\\lib.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 662,
                    "line_start": 662,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 49,
                        "highlight_start": 31,
                        "text": "            Opt::Short(ch) => format!(\"-{}\", ch),"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpy98apue1/gumdrop-0.8.1#gumdrop@0.8.1",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpy98apue1\\gumdrop-0.8.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "gumdrop",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpy98apue1\\gumdrop-0.8.1\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: variables can be used directly in the `format!` string\n   --> src\\lib.rs:663:29\n    |\n663 |             Opt::Long(s) => format!(\"--{}\", s),\n    |                             ^^^^^^^^^^^^^^^^^^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args\nhelp: change this to\n    |\n663 -             Opt::Long(s) => format!(\"--{}\", s),\n663 +             Opt::Long(s) => format!(\"--{s}\"),\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "change this to",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 23475,
                        "byte_start": 23475,
                        "column_end": 41,
                        "column_start": 41,
                        "expansion": null,
                        "file_name": "src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 663,
                        "line_start": 663,
                        "suggested_replacement": "s",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 41,
                            "highlight_start": 41,
                            "text": "            Opt::Long(s) => format!(\"--{}\", s),"
                          }
                        ]
                      },
                      {
                        "byte_end": 23480,
                        "byte_start": 23477,
                        "column_end": 46,
                        "column_start": 43,
                        "expansion": null,
                        "file_name": "src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 663,
                        "line_start": 663,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 46,
                            "highlight_start": 43,
                            "text": "            Opt::Long(s) => format!(\"--{}\", s),"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::uninlined_format_args",
                  "explanation": null
                },
                "level": "warning",
                "message": "variables can be used directly in the `format!` string",
                "spans": [
                  {
                    "byte_end": 23481,
                    "byte_start": 23463,
                    "column_end": 47,
                    "column_start": 29,
                    "expansion": null,
                    "file_name": "src\\lib.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 663,
                    "line_start": 663,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 47,
                        "highlight_start": 29,
                        "text": "            Opt::Long(s) => format!(\"--{}\", s),"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpy98apue1/gumdrop-0.8.1#gumdrop@0.8.1",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpy98apue1\\gumdrop-0.8.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "gumdrop",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpy98apue1\\gumdrop-0.8.1\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: variables can be used directly in the `format!` string\n   --> src\\lib.rs:664:41\n    |\n664 |             Opt::LongWithArg(opt, _) => format!(\"--{}\", opt),\n    |                                         ^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args\nhelp: change this to\n    |\n664 -             Opt::LongWithArg(opt, _) => format!(\"--{}\", opt),\n664 +             Opt::LongWithArg(opt, _) => format!(\"--{opt}\"),\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "change this to",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 23535,
                        "byte_start": 23535,
                        "column_end": 53,
                        "column_start": 53,
                        "expansion": null,
                        "file_name": "src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 664,
                        "line_start": 664,
                        "suggested_replacement": "opt",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 53,
                            "highlight_start": 53,
                            "text": "            Opt::LongWithArg(opt, _) => format!(\"--{}\", opt),"
                          }
                        ]
                      },
                      {
                        "byte_end": 23542,
                        "byte_start": 23537,
                        "column_end": 60,
                        "column_start": 55,
                        "expansion": null,
                        "file_name": "src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 664,
                        "line_start": 664,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 60,
                            "highlight_start": 55,
                            "text": "            Opt::LongWithArg(opt, _) => format!(\"--{}\", opt),"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::uninlined_format_args",
                  "explanation": null
                },
                "level": "warning",
                "message": "variables can be used directly in the `format!` string",
                "spans": [
                  {
                    "byte_end": 23543,
                    "byte_start": 23523,
                    "column_end": 61,
                    "column_start": 41,
                    "expansion": null,
                    "file_name": "src\\lib.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 664,
                    "line_start": 664,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 61,
                        "highlight_start": 41,
                        "text": "            Opt::LongWithArg(opt, _) => format!(\"--{}\", opt),"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-artifact",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpy98apue1/gumdrop-0.8.1#gumdrop@0.8.1",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpy98apue1\\gumdrop-0.8.1\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "gumdrop",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpy98apue1\\gumdrop-0.8.1\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpy98apue1\\gumdrop-0.8.1\\target\\debug\\deps\\libgumdrop-6abd4abbb8f03590.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "build-finished",
              "success": true
            }
          ],
          "audit": {
            "database": {
              "advisory-count": 787,
              "last-commit": "7573f55ba337263f61167dbb0ea926cdc7c8eb5d",
              "last-updated": "2025-06-17T11:04:25+02:00"
            },
            "lockfile": {
              "dependency-count": 7
            },
            "settings": {
              "target_arch": [],
              "target_os": [],
              "severity": null,
              "ignore": [],
              "informational_warnings": [
                "unmaintained",
                "unsound",
                "notice"
              ]
            },
            "vulnerabilities": {
              "found": false,
              "count": 0,
              "list": []
            },
            "warnings": {}
          },
          "note": "Crate analysis performed with stable toolchain."
        },
        "crate_metadata": {
          "name": "gumdrop",
          "version": "0.8.1",
          "description": "ALLOW: Positive community sentiment",
          "repository": "",
          "keywords": [],
          "categories": [],
          "readme": {
            "raw_markdown": "[](https://docs.rs/gumdrop/latest/gumdrop/all.html \"show sidebar\")\n# Crate gumdropCopy item path\n[Settings](https://docs.rs/gumdrop/latest/settings.html)\n[Help](https://docs.rs/gumdrop/latest/help.html)\nSummary[Source](https://docs.rs/gumdrop/latest/src/gumdrop/lib.rs.html#1-774)\nExpand description\nOption parser with custom derive support\nFor full documentation on customization of `derive(Options)`, please see the crate documentation for [`gumdrop_derive`](https://docs.rs/crate/gumdrop_derive/).\n## [\u00a7](https://docs.rs/gumdrop/latest/gumdrop/#examples)Examples\n```\nuse gumdrop::Options;\n// Defines options that can be parsed from the command line.\n//\n// `derive(Options)` will generate an implementation of the trait `Options`.\n// Each field must either have a `Default` implementation or an inline\n// default value provided.\n//\n// (`Debug` is derived here only for demonstration purposes.)\n#[derive(Debug, Options)]\nstruct MyOptions {\n  // Contains \"free\" arguments -- those that are not options.\n  // If no `free` field is declared, free arguments will result in an error.\n  #[options(free)]\n  free: Vec<String>,\n  // Boolean options are treated as flags, taking no additional values.\n  // The optional `help` attribute is displayed in `usage` text.\n  //\n  // A boolean field named `help` is automatically given the `help_flag` attribute.\n  // The `parse_args_or_exit` and `parse_args_default_or_exit` functions use help flags\n  // to automatically display usage to the user.\n  #[options(help = \"print help message\")]\n  help: bool,\n  // Non-boolean fields will take a value from the command line.\n  // Wrapping the type in an `Option` is not necessary, but provides clarity.\n  #[options(help = \"give a string argument\")]\n  string: Option<String>,\n  // A field can be any type that implements `FromStr`.\n  // The optional `meta` attribute is displayed in `usage` text.\n  #[options(help = \"give a number as an argument\", meta = \"N\")]\n  number: Option<i32>,\n  // A `Vec` field will accumulate all values received from the command line.\n  #[options(help = \"give a list of string items\")]\n  item: Vec<String>,\n  // The `count` flag will treat the option as a counter.\n  // Each time the option is encountered, the field is incremented.\n  #[options(count, help = \"increase a counting value\")]\n  count: u32,\n  // Option names are automatically generated from field names, but these\n  // can be overriden. The attributes `short = \"?\"`, `long = \"...\"`,\n  // `no_short`, and `no_long` are used to control option names.\n  #[options(no_short, help = \"this option has no short form\")]\n  long_option_only: bool,\n}\nfn main() {\n  let opts = MyOptions::parse_args_default_or_exit();\n  println!(\"{:#?}\", opts);\n}\n```\n\n`derive(Options)` can also be used on `enum`s to produce a subcommand option parser.\n```\nuse gumdrop::Options;\n// Define options for the program.\n#[derive(Debug, Options)]\nstruct MyOptions {\n  // Options here can be accepted with any command (or none at all),\n  // but they must come before the command name.\n  #[options(help = \"print help message\")]\n  help: bool,\n  #[options(help = \"be verbose\")]\n  verbose: bool,\n  // The `command` option will delegate option parsing to the command type,\n  // starting at the first free argument.\n  #[options(command)]\n  command: Option<Command>,\n}\n// The set of commands and the options each one accepts.\n//\n// Each variant of a command enum should be a unary tuple variant with only\n// one field. This field must implement `Options` and is used to parse arguments\n// that are given after the command name.\n#[derive(Debug, Options)]\nenum Command {\n  // Command names are generated from variant names.\n  // By default, a CamelCase name will be converted into a lowercase,\n  // hyphen-separated name; e.g. `FooBar` becomes `foo-bar`.\n  //\n  // Names can be explicitly specified using `#[options(name = \"...\")]`\n  #[options(help = \"show help for a command\")]\n  Help(HelpOpts),\n  #[options(help = \"make stuff\")]\n  Make(MakeOpts),\n  #[options(help = \"install stuff\")]\n  Install(InstallOpts),\n}\n// Options accepted for the `help` command\n#[derive(Debug, Options)]\nstruct HelpOpts {\n  #[options(free)]\n  free: Vec<String>,\n}\n// Options accepted for the `make` command\n#[derive(Debug, Options)]\nstruct MakeOpts {\n  #[options(free)]\n  free: Vec<String>,\n  #[options(help = \"number of jobs\", meta = \"N\")]\n  jobs: Option<u32>,\n}\n// Options accepted for the `install` command\n#[derive(Debug, Options)]\nstruct InstallOpts {\n  #[options(help = \"target directory\")]\n  dir: Option<String>,\n}\nfn main() {\n  let opts = MyOptions::parse_args_default_or_exit();\n  println!(\"{:#?}\", opts);\n}\n```\n\nA custom parsing function can be supplied for each option field.\n```\nuse gumdrop::Options;\n#[derive(Debug, Options)]\nstruct MyOptions {\n  // `try_from_str = \"...\"` supplies a conversion function that may fail\n  #[options(help = \"a hexadecimal value\", parse(try_from_str = \"parse_hex\"))]\n  hex: u32,\n  // `from_str = \"...\"` supplies a conversion function that always succeeds\n  #[options(help = \"a string that becomes uppercase\", parse(from_str = \"to_upper\"))]\n  upper: String,\n}\nfn parse_hex(s: &str) -> Result<u32, std::num::ParseIntError> {\n  u32::from_str_radix(s, 16)\n}\nfn to_upper(s: &str) -> String {\n  s.to_uppercase()\n}\nfn main() {\n  let opts = MyOptions::parse_args_default_or_exit();\n  println!(\"{:#?}\", opts);\n}\n```\n\n## Structs[\u00a7](https://docs.rs/gumdrop/latest/gumdrop/#structs)\n\n[Error](https://docs.rs/gumdrop/latest/gumdrop/struct.Error.html \"struct gumdrop::Error\")\n    Represents an error encountered during argument parsing\n\n[Parser](https://docs.rs/gumdrop/latest/gumdrop/struct.Parser.html \"struct gumdrop::Parser\")\n    Parses options from a series of `&str`-like values.\n## Enums[\u00a7](https://docs.rs/gumdrop/latest/gumdrop/#enums)\n\n[Opt](https://docs.rs/gumdrop/latest/gumdrop/enum.Opt.html \"enum gumdrop::Opt\")\n    Represents an option parsed from a `Parser`\n\n[ParsingStyle](https://docs.rs/gumdrop/latest/gumdrop/enum.ParsingStyle.html \"enum gumdrop::ParsingStyle\")\n    Controls behavior of free arguments in `Parser`\n## Traits[\u00a7](https://docs.rs/gumdrop/latest/gumdrop/#traits)\n\n[Options](https://docs.rs/gumdrop/latest/gumdrop/trait.Options.html \"trait gumdrop::Options\")\n    Implements a set of options parsed from command line arguments.\n## Functions[\u00a7](https://docs.rs/gumdrop/latest/gumdrop/#functions)\n\n[parse_args](https://docs.rs/gumdrop/latest/gumdrop/fn.parse_args.html \"fn gumdrop::parse_args\")\n    Parses arguments from the command line.\n\n[parse_args_default](https://docs.rs/gumdrop/latest/gumdrop/fn.parse_args_default.html \"fn gumdrop::parse_args_default\")\n    Parses arguments from the command line using the default [parsing style](https://docs.rs/gumdrop/latest/gumdrop/enum.ParsingStyle.html).\n\n[parse_args_default_or_exit](https://docs.rs/gumdrop/latest/gumdrop/fn.parse_args_default_or_exit.html \"fn gumdrop::parse_args_default_or_exit\")\n    Parses arguments from the environment, using the default [parsing style](https://docs.rs/gumdrop/latest/gumdrop/enum.ParsingStyle.html).\n\n[parse_args_or_exit](https://docs.rs/gumdrop/latest/gumdrop/fn.parse_args_or_exit.html \"fn gumdrop::parse_args_or_exit\")\n    Parses arguments from the environment.\n## Derive Macros[\u00a7](https://docs.rs/gumdrop/latest/gumdrop/#derives)\n\n[Options](https://docs.rs/gumdrop/latest/gumdrop/derive.Options.html \"derive gumdrop::Options\")\n    Derives the `gumdrop::Options` trait for `struct` and `enum` items.\n",
            "markdown_with_citations": "[](https://docs.rs/gumdrop/latest/gumdrop/all.html \"show sidebar\")\n# Crate gumdropCopy item path\nSettings\u27e81\u27e9\nHelp\u27e82\u27e9\nSummarySource\u27e83\u27e9\nExpand description\nOption parser with custom derive support\nFor full documentation on customization of `derive(Options)`, please see the crate documentation for `gumdrop_derive`\u27e84\u27e9.\n## \u00a7\u27e85\u27e9Examples\n```\nuse gumdrop::Options;\n// Defines options that can be parsed from the command line.\n//\n// `derive(Options)` will generate an implementation of the trait `Options`.\n// Each field must either have a `Default` implementation or an inline\n// default value provided.\n//\n// (`Debug` is derived here only for demonstration purposes.)\n#[derive(Debug, Options)]\nstruct MyOptions {\n  // Contains \"free\" arguments -- those that are not options.\n  // If no `free` field is declared, free arguments will result in an error.\n  #[options(free)]\n  free: Vec<String>,\n  // Boolean options are treated as flags, taking no additional values.\n  // The optional `help` attribute is displayed in `usage` text.\n  //\n  // A boolean field named `help` is automatically given the `help_flag` attribute.\n  // The `parse_args_or_exit` and `parse_args_default_or_exit` functions use help flags\n  // to automatically display usage to the user.\n  #[options(help = \"print help message\")]\n  help: bool,\n  // Non-boolean fields will take a value from the command line.\n  // Wrapping the type in an `Option` is not necessary, but provides clarity.\n  #[options(help = \"give a string argument\")]\n  string: Option<String>,\n  // A field can be any type that implements `FromStr`.\n  // The optional `meta` attribute is displayed in `usage` text.\n  #[options(help = \"give a number as an argument\", meta = \"N\")]\n  number: Option<i32>,\n  // A `Vec` field will accumulate all values received from the command line.\n  #[options(help = \"give a list of string items\")]\n  item: Vec<String>,\n  // The `count` flag will treat the option as a counter.\n  // Each time the option is encountered, the field is incremented.\n  #[options(count, help = \"increase a counting value\")]\n  count: u32,\n  // Option names are automatically generated from field names, but these\n  // can be overriden. The attributes `short = \"?\"`, `long = \"...\"`,\n  // `no_short`, and `no_long` are used to control option names.\n  #[options(no_short, help = \"this option has no short form\")]\n  long_option_only: bool,\n}\nfn main() {\n  let opts = MyOptions::parse_args_default_or_exit();\n  println!(\"{:#?}\", opts);\n}\n```\n\n`derive(Options)` can also be used on `enum`s to produce a subcommand option parser.\n```\nuse gumdrop::Options;\n// Define options for the program.\n#[derive(Debug, Options)]\nstruct MyOptions {\n  // Options here can be accepted with any command (or none at all),\n  // but they must come before the command name.\n  #[options(help = \"print help message\")]\n  help: bool,\n  #[options(help = \"be verbose\")]\n  verbose: bool,\n  // The `command` option will delegate option parsing to the command type,\n  // starting at the first free argument.\n  #[options(command)]\n  command: Option<Command>,\n}\n// The set of commands and the options each one accepts.\n//\n// Each variant of a command enum should be a unary tuple variant with only\n// one field. This field must implement `Options` and is used to parse arguments\n// that are given after the command name.\n#[derive(Debug, Options)]\nenum Command {\n  // Command names are generated from variant names.\n  // By default, a CamelCase name will be converted into a lowercase,\n  // hyphen-separated name; e.g. `FooBar` becomes `foo-bar`.\n  //\n  // Names can be explicitly specified using `#[options(name = \"...\")]`\n  #[options(help = \"show help for a command\")]\n  Help(HelpOpts),\n  #[options(help = \"make stuff\")]\n  Make(MakeOpts),\n  #[options(help = \"install stuff\")]\n  Install(InstallOpts),\n}\n// Options accepted for the `help` command\n#[derive(Debug, Options)]\nstruct HelpOpts {\n  #[options(free)]\n  free: Vec<String>,\n}\n// Options accepted for the `make` command\n#[derive(Debug, Options)]\nstruct MakeOpts {\n  #[options(free)]\n  free: Vec<String>,\n  #[options(help = \"number of jobs\", meta = \"N\")]\n  jobs: Option<u32>,\n}\n// Options accepted for the `install` command\n#[derive(Debug, Options)]\nstruct InstallOpts {\n  #[options(help = \"target directory\")]\n  dir: Option<String>,\n}\nfn main() {\n  let opts = MyOptions::parse_args_default_or_exit();\n  println!(\"{:#?}\", opts);\n}\n```\n\nA custom parsing function can be supplied for each option field.\n```\nuse gumdrop::Options;\n#[derive(Debug, Options)]\nstruct MyOptions {\n  // `try_from_str = \"...\"` supplies a conversion function that may fail\n  #[options(help = \"a hexadecimal value\", parse(try_from_str = \"parse_hex\"))]\n  hex: u32,\n  // `from_str = \"...\"` supplies a conversion function that always succeeds\n  #[options(help = \"a string that becomes uppercase\", parse(from_str = \"to_upper\"))]\n  upper: String,\n}\nfn parse_hex(s: &str) -> Result<u32, std::num::ParseIntError> {\n  u32::from_str_radix(s, 16)\n}\nfn to_upper(s: &str) -> String {\n  s.to_uppercase()\n}\nfn main() {\n  let opts = MyOptions::parse_args_default_or_exit();\n  println!(\"{:#?}\", opts);\n}\n```\n\n## Structs\u00a7\u27e86\u27e9\n\nError\u27e87\u27e9\n    Represents an error encountered during argument parsing\n\nParser\u27e88\u27e9\n    Parses options from a series of `&str`-like values.\n## Enums\u00a7\u27e89\u27e9\n\nOpt\u27e810\u27e9\n    Represents an option parsed from a `Parser`\n\nParsingStyle\u27e811\u27e9\n    Controls behavior of free arguments in `Parser`\n## Traits\u00a7\u27e812\u27e9\n\nOptions\u27e813\u27e9\n    Implements a set of options parsed from command line arguments.\n## Functions\u00a7\u27e814\u27e9\n\nparse_args\u27e815\u27e9\n    Parses arguments from the command line.\n\nparse_args_default\u27e816\u27e9\n    Parses arguments from the command line using the default parsing style\u27e811\u27e9.\n\nparse_args_default_or_exit\u27e817\u27e9\n    Parses arguments from the environment, using the default parsing style\u27e811\u27e9.\n\nparse_args_or_exit\u27e818\u27e9\n    Parses arguments from the environment.\n## Derive Macros\u00a7\u27e819\u27e9\n\nOptions\u27e820\u27e9\n    Derives the `gumdrop::Options` trait for `struct` and `enum` items.\n",
            "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://docs.rs/gumdrop/latest/settings.html: Settings\n\u27e82\u27e9 https://docs.rs/gumdrop/latest/help.html: Help\n\u27e83\u27e9 https://docs.rs/gumdrop/latest/src/gumdrop/lib.rs.html#1-774: Source\n\u27e84\u27e9 https://docs.rs/crate/gumdrop_derive/: `gumdrop_derive`\n\u27e85\u27e9 https://docs.rs/gumdrop/latest/gumdrop/#examples: \u00a7\n\u27e86\u27e9 https://docs.rs/gumdrop/latest/gumdrop/#structs: \u00a7\n\u27e87\u27e9 https://docs.rs/gumdrop/latest/gumdrop/struct.Error.html: struct gumdrop::Error - Error\n\u27e88\u27e9 https://docs.rs/gumdrop/latest/gumdrop/struct.Parser.html: struct gumdrop::Parser - Parser\n\u27e89\u27e9 https://docs.rs/gumdrop/latest/gumdrop/#enums: \u00a7\n\u27e810\u27e9 https://docs.rs/gumdrop/latest/gumdrop/enum.Opt.html: enum gumdrop::Opt - Opt\n\u27e811\u27e9 https://docs.rs/gumdrop/latest/gumdrop/enum.ParsingStyle.html: enum gumdrop::ParsingStyle - ParsingStyle\n\u27e812\u27e9 https://docs.rs/gumdrop/latest/gumdrop/#traits: \u00a7\n\u27e813\u27e9 https://docs.rs/gumdrop/latest/gumdrop/trait.Options.html: trait gumdrop::Options - Options\n\u27e814\u27e9 https://docs.rs/gumdrop/latest/gumdrop/#functions: \u00a7\n\u27e815\u27e9 https://docs.rs/gumdrop/latest/gumdrop/fn.parse_args.html: fn gumdrop::parse_args - parse_args\n\u27e816\u27e9 https://docs.rs/gumdrop/latest/gumdrop/fn.parse_args_default.html: fn gumdrop::parse_args_default - parse_args_default\n\u27e817\u27e9 https://docs.rs/gumdrop/latest/gumdrop/fn.parse_args_default_or_exit.html: fn gumdrop::parse_args_default_or_exit - parse_args_default_or_exit\n\u27e818\u27e9 https://docs.rs/gumdrop/latest/gumdrop/fn.parse_args_or_exit.html: fn gumdrop::parse_args_or_exit - parse_args_or_exit\n\u27e819\u27e9 https://docs.rs/gumdrop/latest/gumdrop/#derives: \u00a7\n\u27e820\u27e9 https://docs.rs/gumdrop/latest/gumdrop/derive.Options.html: derive gumdrop::Options - Options\n",
            "fit_markdown": "",
            "fit_html": ""
          },
          "downloads": 0,
          "github_stars": 0,
          "dependencies": [],
          "features": {},
          "code_snippets": [],
          "readme_sections": {},
          "librs_downloads": null,
          "source": "crates.io",
          "enhanced_scraping": {},
          "enhanced_features": [],
          "enhanced_dependencies": []
        },
        "enriched_crate": {
          "name": "gumdrop",
          "version": "0.8.1",
          "description": "ALLOW: Positive community sentiment",
          "repository": "",
          "keywords": [],
          "categories": [],
          "readme": {
            "raw_markdown": "[](https://docs.rs/gumdrop/latest/gumdrop/all.html \"show sidebar\")\n# Crate gumdropCopy item path\n[Settings](https://docs.rs/gumdrop/latest/settings.html)\n[Help](https://docs.rs/gumdrop/latest/help.html)\nSummary[Source](https://docs.rs/gumdrop/latest/src/gumdrop/lib.rs.html#1-774)\nExpand description\nOption parser with custom derive support\nFor full documentation on customization of `derive(Options)`, please see the crate documentation for [`gumdrop_derive`](https://docs.rs/crate/gumdrop_derive/).\n## [\u00a7](https://docs.rs/gumdrop/latest/gumdrop/#examples)Examples\n```\nuse gumdrop::Options;\n// Defines options that can be parsed from the command line.\n//\n// `derive(Options)` will generate an implementation of the trait `Options`.\n// Each field must either have a `Default` implementation or an inline\n// default value provided.\n//\n// (`Debug` is derived here only for demonstration purposes.)\n#[derive(Debug, Options)]\nstruct MyOptions {\n  // Contains \"free\" arguments -- those that are not options.\n  // If no `free` field is declared, free arguments will result in an error.\n  #[options(free)]\n  free: Vec<String>,\n  // Boolean options are treated as flags, taking no additional values.\n  // The optional `help` attribute is displayed in `usage` text.\n  //\n  // A boolean field named `help` is automatically given the `help_flag` attribute.\n  // The `parse_args_or_exit` and `parse_args_default_or_exit` functions use help flags\n  // to automatically display usage to the user.\n  #[options(help = \"print help message\")]\n  help: bool,\n  // Non-boolean fields will take a value from the command line.\n  // Wrapping the type in an `Option` is not necessary, but provides clarity.\n  #[options(help = \"give a string argument\")]\n  string: Option<String>,\n  // A field can be any type that implements `FromStr`.\n  // The optional `meta` attribute is displayed in `usage` text.\n  #[options(help = \"give a number as an argument\", meta = \"N\")]\n  number: Option<i32>,\n  // A `Vec` field will accumulate all values received from the command line.\n  #[options(help = \"give a list of string items\")]\n  item: Vec<String>,\n  // The `count` flag will treat the option as a counter.\n  // Each time the option is encountered, the field is incremented.\n  #[options(count, help = \"increase a counting value\")]\n  count: u32,\n  // Option names are automatically generated from field names, but these\n  // can be overriden. The attributes `short = \"?\"`, `long = \"...\"`,\n  // `no_short`, and `no_long` are used to control option names.\n  #[options(no_short, help = \"this option has no short form\")]\n  long_option_only: bool,\n}\nfn main() {\n  let opts = MyOptions::parse_args_default_or_exit();\n  println!(\"{:#?}\", opts);\n}\n```\n\n`derive(Options)` can also be used on `enum`s to produce a subcommand option parser.\n```\nuse gumdrop::Options;\n// Define options for the program.\n#[derive(Debug, Options)]\nstruct MyOptions {\n  // Options here can be accepted with any command (or none at all),\n  // but they must come before the command name.\n  #[options(help = \"print help message\")]\n  help: bool,\n  #[options(help = \"be verbose\")]\n  verbose: bool,\n  // The `command` option will delegate option parsing to the command type,\n  // starting at the first free argument.\n  #[options(command)]\n  command: Option<Command>,\n}\n// The set of commands and the options each one accepts.\n//\n// Each variant of a command enum should be a unary tuple variant with only\n// one field. This field must implement `Options` and is used to parse arguments\n// that are given after the command name.\n#[derive(Debug, Options)]\nenum Command {\n  // Command names are generated from variant names.\n  // By default, a CamelCase name will be converted into a lowercase,\n  // hyphen-separated name; e.g. `FooBar` becomes `foo-bar`.\n  //\n  // Names can be explicitly specified using `#[options(name = \"...\")]`\n  #[options(help = \"show help for a command\")]\n  Help(HelpOpts),\n  #[options(help = \"make stuff\")]\n  Make(MakeOpts),\n  #[options(help = \"install stuff\")]\n  Install(InstallOpts),\n}\n// Options accepted for the `help` command\n#[derive(Debug, Options)]\nstruct HelpOpts {\n  #[options(free)]\n  free: Vec<String>,\n}\n// Options accepted for the `make` command\n#[derive(Debug, Options)]\nstruct MakeOpts {\n  #[options(free)]\n  free: Vec<String>,\n  #[options(help = \"number of jobs\", meta = \"N\")]\n  jobs: Option<u32>,\n}\n// Options accepted for the `install` command\n#[derive(Debug, Options)]\nstruct InstallOpts {\n  #[options(help = \"target directory\")]\n  dir: Option<String>,\n}\nfn main() {\n  let opts = MyOptions::parse_args_default_or_exit();\n  println!(\"{:#?}\", opts);\n}\n```\n\nA custom parsing function can be supplied for each option field.\n```\nuse gumdrop::Options;\n#[derive(Debug, Options)]\nstruct MyOptions {\n  // `try_from_str = \"...\"` supplies a conversion function that may fail\n  #[options(help = \"a hexadecimal value\", parse(try_from_str = \"parse_hex\"))]\n  hex: u32,\n  // `from_str = \"...\"` supplies a conversion function that always succeeds\n  #[options(help = \"a string that becomes uppercase\", parse(from_str = \"to_upper\"))]\n  upper: String,\n}\nfn parse_hex(s: &str) -> Result<u32, std::num::ParseIntError> {\n  u32::from_str_radix(s, 16)\n}\nfn to_upper(s: &str) -> String {\n  s.to_uppercase()\n}\nfn main() {\n  let opts = MyOptions::parse_args_default_or_exit();\n  println!(\"{:#?}\", opts);\n}\n```\n\n## Structs[\u00a7](https://docs.rs/gumdrop/latest/gumdrop/#structs)\n\n[Error](https://docs.rs/gumdrop/latest/gumdrop/struct.Error.html \"struct gumdrop::Error\")\n    Represents an error encountered during argument parsing\n\n[Parser](https://docs.rs/gumdrop/latest/gumdrop/struct.Parser.html \"struct gumdrop::Parser\")\n    Parses options from a series of `&str`-like values.\n## Enums[\u00a7](https://docs.rs/gumdrop/latest/gumdrop/#enums)\n\n[Opt](https://docs.rs/gumdrop/latest/gumdrop/enum.Opt.html \"enum gumdrop::Opt\")\n    Represents an option parsed from a `Parser`\n\n[ParsingStyle](https://docs.rs/gumdrop/latest/gumdrop/enum.ParsingStyle.html \"enum gumdrop::ParsingStyle\")\n    Controls behavior of free arguments in `Parser`\n## Traits[\u00a7](https://docs.rs/gumdrop/latest/gumdrop/#traits)\n\n[Options](https://docs.rs/gumdrop/latest/gumdrop/trait.Options.html \"trait gumdrop::Options\")\n    Implements a set of options parsed from command line arguments.\n## Functions[\u00a7](https://docs.rs/gumdrop/latest/gumdrop/#functions)\n\n[parse_args](https://docs.rs/gumdrop/latest/gumdrop/fn.parse_args.html \"fn gumdrop::parse_args\")\n    Parses arguments from the command line.\n\n[parse_args_default](https://docs.rs/gumdrop/latest/gumdrop/fn.parse_args_default.html \"fn gumdrop::parse_args_default\")\n    Parses arguments from the command line using the default [parsing style](https://docs.rs/gumdrop/latest/gumdrop/enum.ParsingStyle.html).\n\n[parse_args_default_or_exit](https://docs.rs/gumdrop/latest/gumdrop/fn.parse_args_default_or_exit.html \"fn gumdrop::parse_args_default_or_exit\")\n    Parses arguments from the environment, using the default [parsing style](https://docs.rs/gumdrop/latest/gumdrop/enum.ParsingStyle.html).\n\n[parse_args_or_exit](https://docs.rs/gumdrop/latest/gumdrop/fn.parse_args_or_exit.html \"fn gumdrop::parse_args_or_exit\")\n    Parses arguments from the environment.\n## Derive Macros[\u00a7](https://docs.rs/gumdrop/latest/gumdrop/#derives)\n\n[Options](https://docs.rs/gumdrop/latest/gumdrop/derive.Options.html \"derive gumdrop::Options\")\n    Derives the `gumdrop::Options` trait for `struct` and `enum` items.\n",
            "markdown_with_citations": "[](https://docs.rs/gumdrop/latest/gumdrop/all.html \"show sidebar\")\n# Crate gumdropCopy item path\nSettings\u27e81\u27e9\nHelp\u27e82\u27e9\nSummarySource\u27e83\u27e9\nExpand description\nOption parser with custom derive support\nFor full documentation on customization of `derive(Options)`, please see the crate documentation for `gumdrop_derive`\u27e84\u27e9.\n## \u00a7\u27e85\u27e9Examples\n```\nuse gumdrop::Options;\n// Defines options that can be parsed from the command line.\n//\n// `derive(Options)` will generate an implementation of the trait `Options`.\n// Each field must either have a `Default` implementation or an inline\n// default value provided.\n//\n// (`Debug` is derived here only for demonstration purposes.)\n#[derive(Debug, Options)]\nstruct MyOptions {\n  // Contains \"free\" arguments -- those that are not options.\n  // If no `free` field is declared, free arguments will result in an error.\n  #[options(free)]\n  free: Vec<String>,\n  // Boolean options are treated as flags, taking no additional values.\n  // The optional `help` attribute is displayed in `usage` text.\n  //\n  // A boolean field named `help` is automatically given the `help_flag` attribute.\n  // The `parse_args_or_exit` and `parse_args_default_or_exit` functions use help flags\n  // to automatically display usage to the user.\n  #[options(help = \"print help message\")]\n  help: bool,\n  // Non-boolean fields will take a value from the command line.\n  // Wrapping the type in an `Option` is not necessary, but provides clarity.\n  #[options(help = \"give a string argument\")]\n  string: Option<String>,\n  // A field can be any type that implements `FromStr`.\n  // The optional `meta` attribute is displayed in `usage` text.\n  #[options(help = \"give a number as an argument\", meta = \"N\")]\n  number: Option<i32>,\n  // A `Vec` field will accumulate all values received from the command line.\n  #[options(help = \"give a list of string items\")]\n  item: Vec<String>,\n  // The `count` flag will treat the option as a counter.\n  // Each time the option is encountered, the field is incremented.\n  #[options(count, help = \"increase a counting value\")]\n  count: u32,\n  // Option names are automatically generated from field names, but these\n  // can be overriden. The attributes `short = \"?\"`, `long = \"...\"`,\n  // `no_short`, and `no_long` are used to control option names.\n  #[options(no_short, help = \"this option has no short form\")]\n  long_option_only: bool,\n}\nfn main() {\n  let opts = MyOptions::parse_args_default_or_exit();\n  println!(\"{:#?}\", opts);\n}\n```\n\n`derive(Options)` can also be used on `enum`s to produce a subcommand option parser.\n```\nuse gumdrop::Options;\n// Define options for the program.\n#[derive(Debug, Options)]\nstruct MyOptions {\n  // Options here can be accepted with any command (or none at all),\n  // but they must come before the command name.\n  #[options(help = \"print help message\")]\n  help: bool,\n  #[options(help = \"be verbose\")]\n  verbose: bool,\n  // The `command` option will delegate option parsing to the command type,\n  // starting at the first free argument.\n  #[options(command)]\n  command: Option<Command>,\n}\n// The set of commands and the options each one accepts.\n//\n// Each variant of a command enum should be a unary tuple variant with only\n// one field. This field must implement `Options` and is used to parse arguments\n// that are given after the command name.\n#[derive(Debug, Options)]\nenum Command {\n  // Command names are generated from variant names.\n  // By default, a CamelCase name will be converted into a lowercase,\n  // hyphen-separated name; e.g. `FooBar` becomes `foo-bar`.\n  //\n  // Names can be explicitly specified using `#[options(name = \"...\")]`\n  #[options(help = \"show help for a command\")]\n  Help(HelpOpts),\n  #[options(help = \"make stuff\")]\n  Make(MakeOpts),\n  #[options(help = \"install stuff\")]\n  Install(InstallOpts),\n}\n// Options accepted for the `help` command\n#[derive(Debug, Options)]\nstruct HelpOpts {\n  #[options(free)]\n  free: Vec<String>,\n}\n// Options accepted for the `make` command\n#[derive(Debug, Options)]\nstruct MakeOpts {\n  #[options(free)]\n  free: Vec<String>,\n  #[options(help = \"number of jobs\", meta = \"N\")]\n  jobs: Option<u32>,\n}\n// Options accepted for the `install` command\n#[derive(Debug, Options)]\nstruct InstallOpts {\n  #[options(help = \"target directory\")]\n  dir: Option<String>,\n}\nfn main() {\n  let opts = MyOptions::parse_args_default_or_exit();\n  println!(\"{:#?}\", opts);\n}\n```\n\nA custom parsing function can be supplied for each option field.\n```\nuse gumdrop::Options;\n#[derive(Debug, Options)]\nstruct MyOptions {\n  // `try_from_str = \"...\"` supplies a conversion function that may fail\n  #[options(help = \"a hexadecimal value\", parse(try_from_str = \"parse_hex\"))]\n  hex: u32,\n  // `from_str = \"...\"` supplies a conversion function that always succeeds\n  #[options(help = \"a string that becomes uppercase\", parse(from_str = \"to_upper\"))]\n  upper: String,\n}\nfn parse_hex(s: &str) -> Result<u32, std::num::ParseIntError> {\n  u32::from_str_radix(s, 16)\n}\nfn to_upper(s: &str) -> String {\n  s.to_uppercase()\n}\nfn main() {\n  let opts = MyOptions::parse_args_default_or_exit();\n  println!(\"{:#?}\", opts);\n}\n```\n\n## Structs\u00a7\u27e86\u27e9\n\nError\u27e87\u27e9\n    Represents an error encountered during argument parsing\n\nParser\u27e88\u27e9\n    Parses options from a series of `&str`-like values.\n## Enums\u00a7\u27e89\u27e9\n\nOpt\u27e810\u27e9\n    Represents an option parsed from a `Parser`\n\nParsingStyle\u27e811\u27e9\n    Controls behavior of free arguments in `Parser`\n## Traits\u00a7\u27e812\u27e9\n\nOptions\u27e813\u27e9\n    Implements a set of options parsed from command line arguments.\n## Functions\u00a7\u27e814\u27e9\n\nparse_args\u27e815\u27e9\n    Parses arguments from the command line.\n\nparse_args_default\u27e816\u27e9\n    Parses arguments from the command line using the default parsing style\u27e811\u27e9.\n\nparse_args_default_or_exit\u27e817\u27e9\n    Parses arguments from the environment, using the default parsing style\u27e811\u27e9.\n\nparse_args_or_exit\u27e818\u27e9\n    Parses arguments from the environment.\n## Derive Macros\u00a7\u27e819\u27e9\n\nOptions\u27e820\u27e9\n    Derives the `gumdrop::Options` trait for `struct` and `enum` items.\n",
            "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://docs.rs/gumdrop/latest/settings.html: Settings\n\u27e82\u27e9 https://docs.rs/gumdrop/latest/help.html: Help\n\u27e83\u27e9 https://docs.rs/gumdrop/latest/src/gumdrop/lib.rs.html#1-774: Source\n\u27e84\u27e9 https://docs.rs/crate/gumdrop_derive/: `gumdrop_derive`\n\u27e85\u27e9 https://docs.rs/gumdrop/latest/gumdrop/#examples: \u00a7\n\u27e86\u27e9 https://docs.rs/gumdrop/latest/gumdrop/#structs: \u00a7\n\u27e87\u27e9 https://docs.rs/gumdrop/latest/gumdrop/struct.Error.html: struct gumdrop::Error - Error\n\u27e88\u27e9 https://docs.rs/gumdrop/latest/gumdrop/struct.Parser.html: struct gumdrop::Parser - Parser\n\u27e89\u27e9 https://docs.rs/gumdrop/latest/gumdrop/#enums: \u00a7\n\u27e810\u27e9 https://docs.rs/gumdrop/latest/gumdrop/enum.Opt.html: enum gumdrop::Opt - Opt\n\u27e811\u27e9 https://docs.rs/gumdrop/latest/gumdrop/enum.ParsingStyle.html: enum gumdrop::ParsingStyle - ParsingStyle\n\u27e812\u27e9 https://docs.rs/gumdrop/latest/gumdrop/#traits: \u00a7\n\u27e813\u27e9 https://docs.rs/gumdrop/latest/gumdrop/trait.Options.html: trait gumdrop::Options - Options\n\u27e814\u27e9 https://docs.rs/gumdrop/latest/gumdrop/#functions: \u00a7\n\u27e815\u27e9 https://docs.rs/gumdrop/latest/gumdrop/fn.parse_args.html: fn gumdrop::parse_args - parse_args\n\u27e816\u27e9 https://docs.rs/gumdrop/latest/gumdrop/fn.parse_args_default.html: fn gumdrop::parse_args_default - parse_args_default\n\u27e817\u27e9 https://docs.rs/gumdrop/latest/gumdrop/fn.parse_args_default_or_exit.html: fn gumdrop::parse_args_default_or_exit - parse_args_default_or_exit\n\u27e818\u27e9 https://docs.rs/gumdrop/latest/gumdrop/fn.parse_args_or_exit.html: fn gumdrop::parse_args_or_exit - parse_args_or_exit\n\u27e819\u27e9 https://docs.rs/gumdrop/latest/gumdrop/#derives: \u00a7\n\u27e820\u27e9 https://docs.rs/gumdrop/latest/gumdrop/derive.Options.html: derive gumdrop::Options - Options\n",
            "fit_markdown": "",
            "fit_html": ""
          },
          "downloads": 0,
          "github_stars": 0,
          "dependencies": [],
          "features": {},
          "code_snippets": [],
          "readme_sections": {},
          "librs_downloads": null,
          "source": "crates.io",
          "enhanced_scraping": {},
          "enhanced_features": [],
          "enhanced_dependencies": [],
          "readme_summary": "The `gumdrop` crate is a lightweight command-line argument parser with support for custom derive macros via `derive(Options)`. It enables easy parsing of options and free arguments, supports flags, counters, and subcommands, and allows customization of parsing behavior through attributes or custom parsing functions. Additionally, it provides automatic usage text generation and error handling for robust CLI applications.",
          "feature_summary": null,
          "use_case": "Utilities",
          "score": 6.0,
          "factual_counterfactual": "### Pair 1: Custom Derive for Option Parsing  \n\u2705 Factual: The `gumdrop` crate supports custom derive functionality through `derive(Options)`, allowing developers to define structured command-line option parsing with attributes like `help`, `free`, and `count`.  \n\u274c Counterfactual: The `gumdrop` crate requires manual implementation of the `Options` trait for each struct, as it does not support custom derive functionality.  \n\n---\n\n### Pair 2: Subcommand Parsing  \n\u2705 Factual: The `gumdrop` crate allows parsing of subcommands by using an `enum` annotated with `derive(Options)`, where each variant represents a subcommand with its own set of options.  \n\u274c Counterfactual: The `gumdrop` crate does not support subcommand parsing, and developers must implement subcommand handling manually using custom logic.  \n\n---\n\n### Pair 3: Custom Parsing Functions  \n\u2705 Factual: The `gumdrop` crate supports custom parsing functions for individual fields using attributes like `parse(try_from_str = \"...\")` or `parse(from_str = \"...\")`, enabling advanced type conversions during option parsing.  \n\u274c Counterfactual: The `gumdrop` crate only supports basic parsing for primitive types and does not allow custom parsing logic for fields.",
          "source_analysis": null,
          "user_behavior": null,
          "security": null
        }
      },
      "irl_score": 8.6,
      "execution_id": "exec-80a7a770-fd6c0b50-1751260054",
      "timestamp": "2025-06-30T05:07:34.440883+00:00",
      "canon_version": "1.3.0"
    },
    "rule_zero_compliant": true
  }
]