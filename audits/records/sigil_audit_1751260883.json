[
  {
    "execution_id": "exec-733c7664-46ffd0e0-1751260875",
    "timestamp": "2025-06-30T05:21:15.647052+00:00",
    "sacred_chain": {
      "input_data": "arrayvec",
      "context_sources": [
        "crates.io",
        "github.com",
        "lib.rs",
        "docs.rs"
      ],
      "reasoning_steps": [
        "Input canonicalized: 'arrayvec' -> 'arrayvec'",
        "Context gathered from 4 validated sources",
        "Metadata extracted: 4 fields",
        "Documentation analyzed: quality 7.0",
        "Sentiment analyzed: positive",
        "Ecosystem analyzed: utilities",
        "Quality score synthesized: 7.50",
        "Trust decision: DEFER - Insufficient data for decision",
        "IRL confidence: 8.600"
      ],
      "suggestion": "ALLOW: Positive community sentiment",
      "verdict": "DEFER",
      "audit_info": {
        "metadata": {
          "name": "arrayvec",
          "type": "rust_crate",
          "source": "manual_input",
          "extraction_method": "irl_engine"
        },
        "sentiment": {
          "quality_score": 7.0,
          "completeness": 0.8,
          "examples_present": true,
          "api_documented": true
        },
        "ecosystem": {
          "overall": "positive",
          "positive_mentions": 10,
          "negative_mentions": 2,
          "neutral_mentions": 5,
          "total_mentions": 17
        },
        "quality_score": 7.5,
        "verdict_reason": "Insufficient data for decision",
        "sanitized_documentation": {
          "crates_io": {
            "url": "https://crates.io/crates/arrayvec",
            "title": "arrayvec v0.7.6",
            "content": {
              "raw_markdown": "#  arrayvec v0.7.6\nA vector with fixed capacity, backed by an array (it can be stored on the stack too). Implements fixed capacity ArrayVec and ArrayString. \n  * [ #array ](https://crates.io/keywords/array)\n  * [ #data-structure ](https://crates.io/keywords/data-structure)\n  * [ #no_std ](https://crates.io/keywords/no_std)\n  * [ #stack ](https://crates.io/keywords/stack)\n  * [ #vector ](https://crates.io/keywords/vector)\n\n\n  * [ Readme ](https://crates.io/crates/arrayvec)\n  * [ 55 Versions ](https://crates.io/crates/arrayvec/versions)\n  * [ Dependencies ](https://crates.io/crates/arrayvec/dependencies)\n  * [ Dependents ](https://crates.io/crates/arrayvec/reverse_dependencies)\n\n\n## Metadata\n11 months ago \nv1.51.0 \n[ MIT ](https://choosealicense.com/licenses/mit) OR [ Apache-2.0 ](https://choosealicense.com/licenses/apache-2.0)\n30.5 KiB \n## Install\nRun the following Cargo command in your project directory:\ncargo add arrayvec\nOr add the following line to your Cargo.toml:\narrayvec = \"0.7.6\"\n## Documentation\n[ docs.rs/arrayvec ](https://docs.rs/arrayvec/)\n## Repository\n[ github.com/bluss/arrayvec ](https://github.com/bluss/arrayvec)\n## Owners\n## Categories\n  * [Data structures](https://crates.io/categories/data-structures)\n  * [No standard library](https://crates.io/categories/no-std)\n\n\n[ Report crate ](https://crates.io/support?crate=arrayvec&inquire=crate-violation)\n### Stats Overview\n231,787,734 Downloads all time\n55 Versions published\n#### Downloads over the last 90 days\nDisplay as \nStacked \n  * Stacked \n  * Unstacked \n\n\nLoading\u2026\n",
              "markdown_with_citations": "#  arrayvec v0.7.6\nA vector with fixed capacity, backed by an array (it can be stored on the stack too). Implements fixed capacity ArrayVec and ArrayString. \n  *  #array \u27e81\u27e9\n  *  #data-structure \u27e82\u27e9\n  *  #no_std \u27e83\u27e9\n  *  #stack \u27e84\u27e9\n  *  #vector \u27e85\u27e9\n\n\n  *  Readme \u27e86\u27e9\n  *  55 Versions \u27e87\u27e9\n  *  Dependencies \u27e88\u27e9\n  *  Dependents \u27e89\u27e9\n\n\n## Metadata\n11 months ago \nv1.51.0 \n MIT \u27e810\u27e9 OR  Apache-2.0 \u27e811\u27e9\n30.5 KiB \n## Install\nRun the following Cargo command in your project directory:\ncargo add arrayvec\nOr add the following line to your Cargo.toml:\narrayvec = \"0.7.6\"\n## Documentation\n docs.rs/arrayvec \u27e812\u27e9\n## Repository\n github.com/bluss/arrayvec \u27e813\u27e9\n## Owners\n## Categories\n  * Data structures\u27e814\u27e9\n  * No standard library\u27e815\u27e9\n\n\n Report crate \u27e816\u27e9\n### Stats Overview\n231,787,734 Downloads all time\n55 Versions published\n#### Downloads over the last 90 days\nDisplay as \nStacked \n  * Stacked \n  * Unstacked \n\n\nLoading\u2026\n",
              "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://crates.io/keywords/array:  #array \n\u27e82\u27e9 https://crates.io/keywords/data-structure:  #data-structure \n\u27e83\u27e9 https://crates.io/keywords/no_std:  #no_std \n\u27e84\u27e9 https://crates.io/keywords/stack:  #stack \n\u27e85\u27e9 https://crates.io/keywords/vector:  #vector \n\u27e86\u27e9 https://crates.io/crates/arrayvec:  Readme \n\u27e87\u27e9 https://crates.io/crates/arrayvec/versions:  55 Versions \n\u27e88\u27e9 https://crates.io/crates/arrayvec/dependencies:  Dependencies \n\u27e89\u27e9 https://crates.io/crates/arrayvec/reverse_dependencies:  Dependents \n\u27e810\u27e9 https://choosealicense.com/licenses/mit:  MIT \n\u27e811\u27e9 https://choosealicense.com/licenses/apache-2.0:  Apache-2.0 \n\u27e812\u27e9 https://docs.rs/arrayvec/:  docs.rs/arrayvec \n\u27e813\u27e9 https://github.com/bluss/arrayvec:  github.com/bluss/arrayvec \n\u27e814\u27e9 https://crates.io/categories/data-structures: Data structures\n\u27e815\u27e9 https://crates.io/categories/no-std: No standard library\n\u27e816\u27e9 https://crates.io/support?crate=arrayvec&inquire=crate-violation:  Report crate \n",
              "fit_markdown": "",
              "fit_html": ""
            },
            "structured_data": {},
            "quality_score": 3.0,
            "extraction_method": "crawl4ai",
            "error": null,
            "metadata": {
              "doc_type": "docs",
              "content_length": 1555,
              "has_structured_data": false,
              "crawl_success": true
            },
            "timestamp": "114665.4257569"
          },
          "docs_rs": {
            "url": "https://docs.rs/arrayvec",
            "title": "Crate arrayvecCopy item path",
            "content": {
              "raw_markdown": "[](https://docs.rs/arrayvec/latest/arrayvec/all.html \"show sidebar\")\n# Crate arrayvecCopy item path\n[Settings](https://docs.rs/arrayvec/latest/settings.html)\n[Help](https://docs.rs/arrayvec/latest/help.html)\nSummary[Source](https://docs.rs/arrayvec/latest/src/arrayvec/lib.rs.html#1-63)\nExpand description\n**arrayvec** provides the types [`ArrayVec`](https://docs.rs/arrayvec/latest/arrayvec/struct.ArrayVec.html \"struct arrayvec::ArrayVec\") and [`ArrayString`](https://docs.rs/arrayvec/latest/arrayvec/struct.ArrayString.html \"struct arrayvec::ArrayString\"): array-backed vector and string types, which store their contents inline.\nThe arrayvec package has the following cargo features:\n  * `std`\n    * Optional, enabled by default\n    * Use libstd; disable to use `no_std` instead.\n  * `serde`\n    * Optional\n    * Enable serialization for ArrayVec and ArrayString using serde 1.x\n  * `zeroize`\n    * Optional\n    * Implement `Zeroize` for ArrayVec and ArrayString\n\n\n### [\u00a7](https://docs.rs/arrayvec/latest/arrayvec/#rust-version)Rust Version\nThis version of arrayvec requires Rust 1.51 or later.\n## Structs[\u00a7](https://docs.rs/arrayvec/latest/arrayvec/#structs)\n\n[ArrayString](https://docs.rs/arrayvec/latest/arrayvec/struct.ArrayString.html \"struct arrayvec::ArrayString\")\n    A string with a fixed capacity.\n\n[ArrayVec](https://docs.rs/arrayvec/latest/arrayvec/struct.ArrayVec.html \"struct arrayvec::ArrayVec\")\n    A vector with a fixed capacity.\n\n[CapacityError](https://docs.rs/arrayvec/latest/arrayvec/struct.CapacityError.html \"struct arrayvec::CapacityError\")\n    Error value indicating insufficient capacity\n\n[Drain](https://docs.rs/arrayvec/latest/arrayvec/struct.Drain.html \"struct arrayvec::Drain\")\n    A draining iterator for `ArrayVec`.\n\n[IntoIter](https://docs.rs/arrayvec/latest/arrayvec/struct.IntoIter.html \"struct arrayvec::IntoIter\")\n    By-value iterator for `ArrayVec`.\n",
              "markdown_with_citations": "[](https://docs.rs/arrayvec/latest/arrayvec/all.html \"show sidebar\")\n# Crate arrayvecCopy item path\nSettings\u27e81\u27e9\nHelp\u27e82\u27e9\nSummarySource\u27e83\u27e9\nExpand description\n**arrayvec** provides the types `ArrayVec`\u27e84\u27e9 and `ArrayString`\u27e85\u27e9: array-backed vector and string types, which store their contents inline.\nThe arrayvec package has the following cargo features:\n  * `std`\n    * Optional, enabled by default\n    * Use libstd; disable to use `no_std` instead.\n  * `serde`\n    * Optional\n    * Enable serialization for ArrayVec and ArrayString using serde 1.x\n  * `zeroize`\n    * Optional\n    * Implement `Zeroize` for ArrayVec and ArrayString\n\n\n### \u00a7\u27e86\u27e9Rust Version\nThis version of arrayvec requires Rust 1.51 or later.\n## Structs\u00a7\u27e87\u27e9\n\nArrayString\u27e85\u27e9\n    A string with a fixed capacity.\n\nArrayVec\u27e84\u27e9\n    A vector with a fixed capacity.\n\nCapacityError\u27e88\u27e9\n    Error value indicating insufficient capacity\n\nDrain\u27e89\u27e9\n    A draining iterator for `ArrayVec`.\n\nIntoIter\u27e810\u27e9\n    By-value iterator for `ArrayVec`.\n",
              "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://docs.rs/arrayvec/latest/settings.html: Settings\n\u27e82\u27e9 https://docs.rs/arrayvec/latest/help.html: Help\n\u27e83\u27e9 https://docs.rs/arrayvec/latest/src/arrayvec/lib.rs.html#1-63: Source\n\u27e84\u27e9 https://docs.rs/arrayvec/latest/arrayvec/struct.ArrayVec.html: struct arrayvec::ArrayVec - `ArrayVec`\n\u27e85\u27e9 https://docs.rs/arrayvec/latest/arrayvec/struct.ArrayString.html: struct arrayvec::ArrayString - `ArrayString`\n\u27e86\u27e9 https://docs.rs/arrayvec/latest/arrayvec/#rust-version: \u00a7\n\u27e87\u27e9 https://docs.rs/arrayvec/latest/arrayvec/#structs: \u00a7\n\u27e88\u27e9 https://docs.rs/arrayvec/latest/arrayvec/struct.CapacityError.html: struct arrayvec::CapacityError - CapacityError\n\u27e89\u27e9 https://docs.rs/arrayvec/latest/arrayvec/struct.Drain.html: struct arrayvec::Drain - Drain\n\u27e810\u27e9 https://docs.rs/arrayvec/latest/arrayvec/struct.IntoIter.html: struct arrayvec::IntoIter - IntoIter\n",
              "fit_markdown": "",
              "fit_html": ""
            },
            "structured_data": {},
            "quality_score": 4.0,
            "extraction_method": "crawl4ai",
            "error": null,
            "metadata": {
              "doc_type": "docs",
              "content_length": 1893,
              "has_structured_data": false,
              "crawl_success": true
            },
            "timestamp": "114666.3320387"
          },
          "lib_rs": {
            "url": "https://lib.rs/crates/arrayvec",
            "title": "Untitled",
            "content": {
              "raw_markdown": "###  [55 releases](https://lib.rs/crates/arrayvec/versions)\n0.7.6 |  Aug 17, 2024   \n---|---  \n0.7.4 |  Jun 17, 2023   \n0.7.2 |  Oct 28, 2021   \n0.7.1 |  Jun 5, 2021   \n0.3.9 |  Jul 30, 2015   \n#**24** in [Rust patterns](https://lib.rs/rust-patterns \"Shared solutions for particular situations specific to programming in Rust.\")\nDownload history 3145226/week @ 2025-03-02 2955413/week @ 2025-03-09 2993935/week @ 2025-03-16 3043743/week @ 2025-03-23 2471211/week @ 2025-03-30 2623007/week @ 2025-04-06 2359555/week @ 2025-04-13 2323913/week @ 2025-04-20 2202750/week @ 2025-04-27 2248097/week @ 2025-05-04 2391772/week @ 2025-05-11 2451385/week @ 2025-05-18 2081551/week @ 2025-05-25 2268745/week @ 2025-06-01 2329865/week @ 2025-06-08 2418899/week @ 2025-06-15\n**9,249,531** downloads per month Used in [**16,451** crates (876 directly)](https://lib.rs/crates/arrayvec/rev)\n**MIT/Apache**\n75KB  1.5K  SLoC\n**arrayvec** provides the types [``ArrayVec``](https://lib.rs/ArrayVec \"`ArrayVec`\") and [``ArrayString``](https://lib.rs/ArrayString \"`ArrayString`\"): array-backed vector and string types, which store their contents inline.\nThe arrayvec package has the following cargo features:\n  * ``std``\n    * Optional, enabled by default\n    * Use libstd; disable to use ``no_std`` instead.\n  * ``serde``\n    * Optional\n    * Enable serialization for ArrayVec and ArrayString using serde 1.x\n  * ``zeroize``\n    * Optional\n    * Implement ``Zeroize`` for ArrayVec and ArrayString\n\n\n## Rust Version\nThis version of arrayvec requires Rust 1.51 or later.\n# arrayvec\n[![Crates.io: arrayvec](https://img.shields.io/crates/v/arrayvec.svg)](https://crates.io/crates/arrayvec) [![Documentation](https://img.gs/czjpqfbdkz/full/https://docs.rs/arrayvec/badge.svg)](https://docs.rs/arrayvec) [![Build Status](https://img.gs/czjpqfbdkz/full/https://github.com/bluss/arrayvec/workflows/Continuous%20integration/badge.svg?branch=master)](https://github.com/bluss/arrayvec/actions)\n[![License: Apache](https://img.shields.io/badge/License-Apache%202.0-red.svg)](https://github.com/bluss/arrayvec/blob/0aede877fe0bfb1ba5e3c2024df8c0958d503a83/LICENSE-APACHE) OR [![License: MIT](https://img.shields.io/badge/license-MIT-blue.svg)](https://github.com/bluss/arrayvec/blob/0aede877fe0bfb1ba5e3c2024df8c0958d503a83/LICENSE)\nA vector with fixed capacity.\nPlease read the [```API` documentation here``](https://docs.rs/arrayvec)\n# License\nDual-licensed to be compatible with the Rust project.\nLicensed under the Apache License, Version 2.0 <http://www.apache.org/licenses/LICENSE-2.0> or the MIT license <http://opensource.org/licenses/MIT>, at your option. This file may not be copied, modified, or distributed except according to those terms.\n#### Dependencies\n~195KB \n  * [ optional ](https://lib.rs/crates/arrayvec/features#feature-borsh \"borsh is optional feature\") [borsh](https://lib.rs/crates/borsh \"new\") 1.2\n  * [ optional ](https://lib.rs/crates/arrayvec/features#feature-serde \"serde is optional feature\") [serde](https://lib.rs/crates/serde \"1.0\")\n  * [ optional ](https://lib.rs/crates/arrayvec/features#feature-zeroize \"zeroize is optional feature\") [zeroize](https://lib.rs/crates/zeroize \"1.4\")\n\n\n  * dev  [bencher](https://lib.rs/crates/bencher \"0.1.4\")\n  * dev  [matches](https://lib.rs/crates/matches \"deprecated\") 0.1\n  * dev  [serde_test](https://lib.rs/crates/serde_test \"1.0\")\n\n\n#### [Other feature](https://lib.rs/crates/arrayvec/features)\n  * [std](https://lib.rs/crates/arrayvec/features#feature-std)\n\n\n  *[SLoC]: Lines of code, excluding comments\n",
              "markdown_with_citations": "###  55 releases\u27e81\u27e9\n0.7.6 |  Aug 17, 2024   \n---|---  \n0.7.4 |  Jun 17, 2023   \n0.7.2 |  Oct 28, 2021   \n0.7.1 |  Jun 5, 2021   \n0.3.9 |  Jul 30, 2015   \n#**24** in Rust patterns\u27e82\u27e9\nDownload history 3145226/week @ 2025-03-02 2955413/week @ 2025-03-09 2993935/week @ 2025-03-16 3043743/week @ 2025-03-23 2471211/week @ 2025-03-30 2623007/week @ 2025-04-06 2359555/week @ 2025-04-13 2323913/week @ 2025-04-20 2202750/week @ 2025-04-27 2248097/week @ 2025-05-04 2391772/week @ 2025-05-11 2451385/week @ 2025-05-18 2081551/week @ 2025-05-25 2268745/week @ 2025-06-01 2329865/week @ 2025-06-08 2418899/week @ 2025-06-15\n**9,249,531** downloads per month Used in **16,451** crates (876 directly)\u27e83\u27e9\n**MIT/Apache**\n75KB  1.5K  SLoC\n**arrayvec** provides the types ``ArrayVec``\u27e84\u27e9 and ``ArrayString``\u27e85\u27e9: array-backed vector and string types, which store their contents inline.\nThe arrayvec package has the following cargo features:\n  * ``std``\n    * Optional, enabled by default\n    * Use libstd; disable to use ``no_std`` instead.\n  * ``serde``\n    * Optional\n    * Enable serialization for ArrayVec and ArrayString using serde 1.x\n  * ``zeroize``\n    * Optional\n    * Implement ``Zeroize`` for ArrayVec and ArrayString\n\n\n## Rust Version\nThis version of arrayvec requires Rust 1.51 or later.\n# arrayvec\n![Crates.io: arrayvec\u27e86\u27e9](https://crates.io/crates/arrayvec) ![Documentation\u27e87\u27e9](https://docs.rs/arrayvec) ![Build Status\u27e88\u27e9](https://github.com/bluss/arrayvec/actions)\n![License: Apache\u27e89\u27e9](https://github.com/bluss/arrayvec/blob/0aede877fe0bfb1ba5e3c2024df8c0958d503a83/LICENSE-APACHE) OR ![License: MIT\u27e810\u27e9](https://github.com/bluss/arrayvec/blob/0aede877fe0bfb1ba5e3c2024df8c0958d503a83/LICENSE)\nA vector with fixed capacity.\nPlease read the ```API` documentation here``\u27e811\u27e9\n# License\nDual-licensed to be compatible with the Rust project.\nLicensed under the Apache License, Version 2.0 <http://www.apache.org/licenses/LICENSE-2.0> or the MIT license <http://opensource.org/licenses/MIT>, at your option. This file may not be copied, modified, or distributed except according to those terms.\n#### Dependencies\n~195KB \n  *  optional \u27e812\u27e9 borsh\u27e813\u27e9 1.2\n  *  optional \u27e814\u27e9 serde\u27e815\u27e9\n  *  optional \u27e816\u27e9 zeroize\u27e817\u27e9\n\n\n  * dev  bencher\u27e818\u27e9\n  * dev  matches\u27e819\u27e9 0.1\n  * dev  serde_test\u27e820\u27e9\n\n\n#### Other feature\u27e821\u27e9\n  * std\u27e822\u27e9\n\n\n  *[SLoC]: Lines of code, excluding comments\n",
              "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://lib.rs/crates/arrayvec/versions: 55 releases\n\u27e82\u27e9 https://lib.rs/rust-patterns: Shared solutions for particular situations specific to programming in Rust. - Rust patterns\n\u27e83\u27e9 https://lib.rs/crates/arrayvec/rev: **16,451** crates (876 directly)\n\u27e84\u27e9 https://lib.rs/ArrayVec: `ArrayVec` - ``ArrayVec``\n\u27e85\u27e9 https://lib.rs/ArrayString: `ArrayString` - ``ArrayString``\n\u27e86\u27e9 https://img.shields.io/crates/v/arrayvec.svg: ![Crates.io: arrayvec\n\u27e87\u27e9 https://img.gs/czjpqfbdkz/full/https://docs.rs/arrayvec/badge.svg: ![Documentation\n\u27e88\u27e9 https://img.gs/czjpqfbdkz/full/https://github.com/bluss/arrayvec/workflows/Continuous%20integration/badge.svg?branch=master: ![Build Status\n\u27e89\u27e9 https://img.shields.io/badge/License-Apache%202.0-red.svg: ![License: Apache\n\u27e810\u27e9 https://img.shields.io/badge/license-MIT-blue.svg: ![License: MIT\n\u27e811\u27e9 https://docs.rs/arrayvec: ```API` documentation here``\n\u27e812\u27e9 https://lib.rs/crates/arrayvec/features#feature-borsh: borsh is optional feature -  optional \n\u27e813\u27e9 https://lib.rs/crates/borsh: new - borsh\n\u27e814\u27e9 https://lib.rs/crates/arrayvec/features#feature-serde: serde is optional feature -  optional \n\u27e815\u27e9 https://lib.rs/crates/serde: 1.0 - serde\n\u27e816\u27e9 https://lib.rs/crates/arrayvec/features#feature-zeroize: zeroize is optional feature -  optional \n\u27e817\u27e9 https://lib.rs/crates/zeroize: 1.4 - zeroize\n\u27e818\u27e9 https://lib.rs/crates/bencher: 0.1.4 - bencher\n\u27e819\u27e9 https://lib.rs/crates/matches: deprecated - matches\n\u27e820\u27e9 https://lib.rs/crates/serde_test: 1.0 - serde_test\n\u27e821\u27e9 https://lib.rs/crates/arrayvec/features: Other feature\n\u27e822\u27e9 https://lib.rs/crates/arrayvec/features#feature-std: std\n",
              "fit_markdown": "",
              "fit_html": ""
            },
            "structured_data": {},
            "quality_score": 3.0,
            "extraction_method": "crawl4ai",
            "error": null,
            "metadata": {
              "doc_type": "docs",
              "content_length": 3549,
              "has_structured_data": false,
              "crawl_success": true
            },
            "timestamp": "114666.7249977"
          }
        },
        "crate_analysis": {
          "status": "completed",
          "check": [
            {
              "reason": "compiler-artifact",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpoo56v5t5/arrayvec-0.7.6#arrayvec@0.7.6",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpoo56v5t5\\arrayvec-0.7.6\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "arrayvec",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpoo56v5t5\\arrayvec-0.7.6\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpoo56v5t5\\arrayvec-0.7.6\\target\\debug\\deps\\libarrayvec-8c154db2cfad4067.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "build-finished",
              "success": true
            }
          ],
          "clippy": [
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpoo56v5t5/arrayvec-0.7.6#arrayvec@0.7.6",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpoo56v5t5\\arrayvec-0.7.6\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "arrayvec",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpoo56v5t5\\arrayvec-0.7.6\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: redundant field names in struct initialization\n  --> src\\errors.rs:17:13\n   |\n17 |             element: element,\n   |             ^^^^^^^^^^^^^^^^ help: replace it with: `element`\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#redundant_field_names\n   = note: `#[warn(clippy::redundant_field_names)]` on by default\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#redundant_field_names",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "`#[warn(clippy::redundant_field_names)]` on by default",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "replace it with",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 446,
                        "byte_start": 430,
                        "column_end": 29,
                        "column_start": 13,
                        "expansion": null,
                        "file_name": "src\\errors.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 17,
                        "line_start": 17,
                        "suggested_replacement": "element",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 29,
                            "highlight_start": 13,
                            "text": "            element: element,"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::redundant_field_names",
                  "explanation": null
                },
                "level": "warning",
                "message": "redundant field names in struct initialization",
                "spans": [
                  {
                    "byte_end": 446,
                    "byte_start": 430,
                    "column_end": 29,
                    "column_start": 13,
                    "expansion": null,
                    "file_name": "src\\errors.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 17,
                    "line_start": 17,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 29,
                        "highlight_start": 13,
                        "text": "            element: element,"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpoo56v5t5/arrayvec-0.7.6#arrayvec@0.7.6",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpoo56v5t5\\arrayvec-0.7.6\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "arrayvec",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpoo56v5t5\\arrayvec-0.7.6\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: constants have by default a `'static` lifetime\n  --> src\\errors.rs:32:18\n   |\n32 | const CAPERROR: &'static str = \"insufficient capacity\";\n   |                 -^^^^^^^---- help: consider removing `'static`: `&str`\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#redundant_static_lifetimes\n   = note: `#[warn(clippy::redundant_static_lifetimes)]` on by default\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#redundant_static_lifetimes",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "`#[warn(clippy::redundant_static_lifetimes)]` on by default",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider removing `'static`",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 756,
                        "byte_start": 744,
                        "column_end": 29,
                        "column_start": 17,
                        "expansion": null,
                        "file_name": "src\\errors.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 32,
                        "line_start": 32,
                        "suggested_replacement": "&str",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 29,
                            "highlight_start": 17,
                            "text": "const CAPERROR: &'static str = \"insufficient capacity\";"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::redundant_static_lifetimes",
                  "explanation": null
                },
                "level": "warning",
                "message": "constants have by default a `'static` lifetime",
                "spans": [
                  {
                    "byte_end": 752,
                    "byte_start": 745,
                    "column_end": 25,
                    "column_start": 18,
                    "expansion": null,
                    "file_name": "src\\errors.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 32,
                    "line_start": 32,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 25,
                        "highlight_start": 18,
                        "text": "const CAPERROR: &'static str = \"insufficient capacity\";"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpoo56v5t5/arrayvec-0.7.6#arrayvec@0.7.6",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpoo56v5t5\\arrayvec-0.7.6\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "arrayvec",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpoo56v5t5\\arrayvec-0.7.6\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: unsafe function's docs are missing a `# Safety` section\n   --> src\\arrayvec.rs:230:5\n    |\n230 |     pub unsafe fn push_unchecked(&mut self, element: T) {\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc\n    = note: `#[warn(clippy::missing_safety_doc)]` on by default\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "`#[warn(clippy::missing_safety_doc)]` on by default",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "clippy::missing_safety_doc",
                  "explanation": null
                },
                "level": "warning",
                "message": "unsafe function's docs are missing a `# Safety` section",
                "spans": [
                  {
                    "byte_end": 6363,
                    "byte_start": 6312,
                    "column_end": 56,
                    "column_start": 5,
                    "expansion": null,
                    "file_name": "src\\arrayvec.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 230,
                    "line_start": 230,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 56,
                        "highlight_start": 5,
                        "text": "    pub unsafe fn push_unchecked(&mut self, element: T) {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpoo56v5t5/arrayvec-0.7.6#arrayvec@0.7.6",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpoo56v5t5\\arrayvec-0.7.6\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "arrayvec",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpoo56v5t5\\arrayvec-0.7.6\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: unsafe function's docs are missing a `# Safety` section\n   --> src\\arrayvec.rs:545:5\n    |\n545 |     pub unsafe fn set_len(&mut self, length: usize) {\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "clippy::missing_safety_doc",
                  "explanation": null
                },
                "level": "warning",
                "message": "unsafe function's docs are missing a `# Safety` section",
                "spans": [
                  {
                    "byte_end": 16316,
                    "byte_start": 16269,
                    "column_end": 52,
                    "column_start": 5,
                    "expansion": null,
                    "file_name": "src\\arrayvec.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 545,
                    "line_start": 545,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 52,
                        "highlight_start": 5,
                        "text": "    pub unsafe fn set_len(&mut self, length: usize) {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpoo56v5t5/arrayvec-0.7.6#arrayvec@0.7.6",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpoo56v5t5\\arrayvec-0.7.6\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "arrayvec",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpoo56v5t5\\arrayvec-0.7.6\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: unsafe function's docs are missing a `# Safety` section\n   --> src\\arrayvec.rs:669:5\n    |\n669 |     pub unsafe fn into_inner_unchecked(self) -> [T; CAP] {\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "clippy::missing_safety_doc",
                  "explanation": null
                },
                "level": "warning",
                "message": "unsafe function's docs are missing a `# Safety` section",
                "spans": [
                  {
                    "byte_end": 20634,
                    "byte_start": 20582,
                    "column_end": 57,
                    "column_start": 5,
                    "expansion": null,
                    "file_name": "src\\arrayvec.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 669,
                    "line_start": 669,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 57,
                        "highlight_start": 5,
                        "text": "    pub unsafe fn into_inner_unchecked(self) -> [T; CAP] {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpoo56v5t5/arrayvec-0.7.6#arrayvec@0.7.6",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpoo56v5t5\\arrayvec-0.7.6\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "arrayvec",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpoo56v5t5\\arrayvec-0.7.6\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: returning the result of a `let` binding from a block\n   --> src\\arrayvec.rs:673:9\n    |\n672 |         let array = ptr::read(self_.as_ptr() as *const [T; CAP]);\n    |         --------------------------------------------------------- unnecessary `let` binding\n673 |         array\n    |         ^^^^^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return\n    = note: `#[warn(clippy::let_and_return)]` on by default\nhelp: return the expression directly\n    |\n672 ~         \n673 ~         ptr::read(self_.as_ptr() as *const [T; CAP])\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "`#[warn(clippy::let_and_return)]` on by default",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "return the expression directly",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 20802,
                        "byte_start": 20745,
                        "column_end": 66,
                        "column_start": 9,
                        "expansion": null,
                        "file_name": "src\\arrayvec.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 672,
                        "line_start": 672,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 66,
                            "highlight_start": 9,
                            "text": "        let array = ptr::read(self_.as_ptr() as *const [T; CAP]);"
                          }
                        ]
                      },
                      {
                        "byte_end": 20816,
                        "byte_start": 20811,
                        "column_end": 14,
                        "column_start": 9,
                        "expansion": null,
                        "file_name": "src\\arrayvec.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 673,
                        "line_start": 673,
                        "suggested_replacement": "ptr::read(self_.as_ptr() as *const [T; CAP])",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 14,
                            "highlight_start": 9,
                            "text": "        array"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::let_and_return",
                  "explanation": null
                },
                "level": "warning",
                "message": "returning the result of a `let` binding from a block",
                "spans": [
                  {
                    "byte_end": 20802,
                    "byte_start": 20745,
                    "column_end": 66,
                    "column_start": 9,
                    "expansion": null,
                    "file_name": "src\\arrayvec.rs",
                    "is_primary": false,
                    "label": "unnecessary `let` binding",
                    "line_end": 672,
                    "line_start": 672,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 66,
                        "highlight_start": 9,
                        "text": "        let array = ptr::read(self_.as_ptr() as *const [T; CAP]);"
                      }
                    ]
                  },
                  {
                    "byte_end": 20816,
                    "byte_start": 20811,
                    "column_end": 14,
                    "column_start": 9,
                    "expansion": null,
                    "file_name": "src\\arrayvec.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 673,
                    "line_start": 673,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 14,
                        "highlight_start": 9,
                        "text": "        array"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpoo56v5t5/arrayvec-0.7.6#arrayvec@0.7.6",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpoo56v5t5\\arrayvec-0.7.6\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "arrayvec",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpoo56v5t5\\arrayvec-0.7.6\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: replacing a value of type `T` with `T::default()` is better expressed using `std::mem::take`\n   --> src\\arrayvec.rs:686:9\n    |\n686 |         mem::replace(self, Self::new())\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `std::mem::take(self)`\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#mem_replace_with_default\n    = note: `#[warn(clippy::mem_replace_with_default)]` on by default\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#mem_replace_with_default",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "`#[warn(clippy::mem_replace_with_default)]` on by default",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider using",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 21200,
                        "byte_start": 21169,
                        "column_end": 40,
                        "column_start": 9,
                        "expansion": null,
                        "file_name": "src\\arrayvec.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 686,
                        "line_start": 686,
                        "suggested_replacement": "std::mem::take(self)",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 40,
                            "highlight_start": 9,
                            "text": "        mem::replace(self, Self::new())"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::mem_replace_with_default",
                  "explanation": null
                },
                "level": "warning",
                "message": "replacing a value of type `T` with `T::default()` is better expressed using `std::mem::take`",
                "spans": [
                  {
                    "byte_end": 21200,
                    "byte_start": 21169,
                    "column_end": 40,
                    "column_start": 9,
                    "expansion": null,
                    "file_name": "src\\arrayvec.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 686,
                    "line_start": 686,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 40,
                        "highlight_start": 9,
                        "text": "        mem::replace(self, Self::new())"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpoo56v5t5/arrayvec-0.7.6#arrayvec@0.7.6",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpoo56v5t5\\arrayvec-0.7.6\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "arrayvec",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpoo56v5t5\\arrayvec-0.7.6\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: this loop could be written as a `for` loop\n    --> src\\arrayvec.rs:1016:9\n     |\n1016 |         while let Some(_) = self.next() { }\n     |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `for _ in self.by_ref()`\n     |\n     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#while_let_on_iterator\n     = note: `#[warn(clippy::while_let_on_iterator)]` on by default\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#while_let_on_iterator",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "`#[warn(clippy::while_let_on_iterator)]` on by default",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "try",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 30006,
                        "byte_start": 29975,
                        "column_end": 40,
                        "column_start": 9,
                        "expansion": null,
                        "file_name": "src\\arrayvec.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 1016,
                        "line_start": 1016,
                        "suggested_replacement": "for _ in self.by_ref()",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 40,
                            "highlight_start": 9,
                            "text": "        while let Some(_) = self.next() { }"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::while_let_on_iterator",
                  "explanation": null
                },
                "level": "warning",
                "message": "this loop could be written as a `for` loop",
                "spans": [
                  {
                    "byte_end": 30006,
                    "byte_start": 29975,
                    "column_end": 40,
                    "column_start": 9,
                    "expansion": null,
                    "file_name": "src\\arrayvec.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 1016,
                    "line_start": 1016,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 40,
                        "highlight_start": 9,
                        "text": "        while let Some(_) = self.next() { }"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpoo56v5t5/arrayvec-0.7.6#arrayvec@0.7.6",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpoo56v5t5\\arrayvec-0.7.6\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "arrayvec",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpoo56v5t5\\arrayvec-0.7.6\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: this `match` expression can be replaced with `?`\n   --> src\\array_string.rs:314:18\n    |\n314 |           let ch = match self.chars().rev().next() {\n    |  __________________^\n315 | |             Some(ch) => ch,\n316 | |             None => return None,\n317 | |         };\n    | |_________^ help: try instead: `self.chars().rev().next()?`\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#question_mark\n    = note: `#[warn(clippy::question_mark)]` on by default\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#question_mark",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "`#[warn(clippy::question_mark)]` on by default",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "try instead",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 9422,
                        "byte_start": 9318,
                        "column_end": 10,
                        "column_start": 18,
                        "expansion": null,
                        "file_name": "src\\array_string.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 317,
                        "line_start": 314,
                        "suggested_replacement": "self.chars().rev().next()?",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 51,
                            "highlight_start": 18,
                            "text": "        let ch = match self.chars().rev().next() {"
                          },
                          {
                            "highlight_end": 28,
                            "highlight_start": 1,
                            "text": "            Some(ch) => ch,"
                          },
                          {
                            "highlight_end": 33,
                            "highlight_start": 1,
                            "text": "            None => return None,"
                          },
                          {
                            "highlight_end": 10,
                            "highlight_start": 1,
                            "text": "        };"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::question_mark",
                  "explanation": null
                },
                "level": "warning",
                "message": "this `match` expression can be replaced with `?`",
                "spans": [
                  {
                    "byte_end": 9422,
                    "byte_start": 9318,
                    "column_end": 10,
                    "column_start": 18,
                    "expansion": null,
                    "file_name": "src\\array_string.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 317,
                    "line_start": 314,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 51,
                        "highlight_start": 18,
                        "text": "        let ch = match self.chars().rev().next() {"
                      },
                      {
                        "highlight_end": 28,
                        "highlight_start": 1,
                        "text": "            Some(ch) => ch,"
                      },
                      {
                        "highlight_end": 33,
                        "highlight_start": 1,
                        "text": "            None => return None,"
                      },
                      {
                        "highlight_end": 10,
                        "highlight_start": 1,
                        "text": "        };"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpoo56v5t5/arrayvec-0.7.6#arrayvec@0.7.6",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpoo56v5t5\\arrayvec-0.7.6\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "arrayvec",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpoo56v5t5\\arrayvec-0.7.6\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: manual backwards iteration\n   --> src\\array_string.rs:314:36\n    |\n314 |         let ch = match self.chars().rev().next() {\n    |                                    ^^^^^^^^^^^^^ help: use: `.next_back()`\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#manual_next_back\n    = note: `#[warn(clippy::manual_next_back)]` on by default\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#manual_next_back",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "`#[warn(clippy::manual_next_back)]` on by default",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "use",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 9349,
                        "byte_start": 9336,
                        "column_end": 49,
                        "column_start": 36,
                        "expansion": null,
                        "file_name": "src\\array_string.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 314,
                        "line_start": 314,
                        "suggested_replacement": ".next_back()",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 49,
                            "highlight_start": 36,
                            "text": "        let ch = match self.chars().rev().next() {"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::manual_next_back",
                  "explanation": null
                },
                "level": "warning",
                "message": "manual backwards iteration",
                "spans": [
                  {
                    "byte_end": 9349,
                    "byte_start": 9336,
                    "column_end": 49,
                    "column_start": 36,
                    "expansion": null,
                    "file_name": "src\\array_string.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 314,
                    "line_start": 314,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 49,
                        "highlight_start": 36,
                        "text": "        let ch = match self.chars().rev().next() {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpoo56v5t5/arrayvec-0.7.6#arrayvec@0.7.6",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpoo56v5t5\\arrayvec-0.7.6\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "arrayvec",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpoo56v5t5\\arrayvec-0.7.6\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: unsafe function's docs are missing a `# Safety` section\n   --> src\\array_string.rs:404:5\n    |\n404 |     pub unsafe fn set_len(&mut self, length: usize) {\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "clippy::missing_safety_doc",
                  "explanation": null
                },
                "level": "warning",
                "message": "unsafe function's docs are missing a `# Safety` section",
                "spans": [
                  {
                    "byte_end": 12173,
                    "byte_start": 12126,
                    "column_end": 52,
                    "column_start": 5,
                    "expansion": null,
                    "file_name": "src\\array_string.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 404,
                    "line_start": 404,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 52,
                        "highlight_start": 5,
                        "text": "    pub unsafe fn set_len(&mut self, length: usize) {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpoo56v5t5/arrayvec-0.7.6#arrayvec@0.7.6",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpoo56v5t5\\arrayvec-0.7.6\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "arrayvec",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpoo56v5t5\\arrayvec-0.7.6\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: unnecessary implementation of `clone_from` on a `Copy` type\n   --> src\\array_string.rs:535:5\n    |\n535 | /     fn clone_from(&mut self, rhs: &Self) {\n536 | |         // guaranteed to fit due to types matching.\n537 | |         self.clear();\n538 | |         self.try_push_str(rhs).ok();\n539 | |     }\n    | |_____^ help: remove it\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#non_canonical_clone_impl\n    = note: `#[warn(clippy::non_canonical_clone_impl)]` on by default\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#non_canonical_clone_impl",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "`#[warn(clippy::non_canonical_clone_impl)]` on by default",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "remove it",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 15378,
                        "byte_start": 15223,
                        "column_end": 6,
                        "column_start": 5,
                        "expansion": null,
                        "file_name": "src\\array_string.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 539,
                        "line_start": 535,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 43,
                            "highlight_start": 5,
                            "text": "    fn clone_from(&mut self, rhs: &Self) {"
                          },
                          {
                            "highlight_end": 52,
                            "highlight_start": 1,
                            "text": "        // guaranteed to fit due to types matching."
                          },
                          {
                            "highlight_end": 22,
                            "highlight_start": 1,
                            "text": "        self.clear();"
                          },
                          {
                            "highlight_end": 37,
                            "highlight_start": 1,
                            "text": "        self.try_push_str(rhs).ok();"
                          },
                          {
                            "highlight_end": 6,
                            "highlight_start": 1,
                            "text": "    }"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::non_canonical_clone_impl",
                  "explanation": null
                },
                "level": "warning",
                "message": "unnecessary implementation of `clone_from` on a `Copy` type",
                "spans": [
                  {
                    "byte_end": 15378,
                    "byte_start": 15223,
                    "column_end": 6,
                    "column_start": 5,
                    "expansion": null,
                    "file_name": "src\\array_string.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 539,
                    "line_start": 535,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 43,
                        "highlight_start": 5,
                        "text": "    fn clone_from(&mut self, rhs: &Self) {"
                      },
                      {
                        "highlight_end": 52,
                        "highlight_start": 1,
                        "text": "        // guaranteed to fit due to types matching."
                      },
                      {
                        "highlight_end": 22,
                        "highlight_start": 1,
                        "text": "        self.clear();"
                      },
                      {
                        "highlight_end": 37,
                        "highlight_start": 1,
                        "text": "        self.try_push_str(rhs).ok();"
                      },
                      {
                        "highlight_end": 6,
                        "highlight_start": 1,
                        "text": "    }"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpoo56v5t5/arrayvec-0.7.6#arrayvec@0.7.6",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpoo56v5t5\\arrayvec-0.7.6\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "arrayvec",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpoo56v5t5\\arrayvec-0.7.6\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: non-canonical implementation of `partial_cmp` on an `Ord` type\n   --> src\\array_string.rs:542:1\n    |\n542 | /  impl<const CAP: usize> PartialOrd for ArrayString<CAP>\n543 | |  {\n544 | |      fn partial_cmp(&self, rhs: &Self) -> Option<cmp::Ordering> {\n    | | ________________________________________________________________-\n545 | ||         (**self).partial_cmp(&**rhs)\n546 | ||     }\n    | ||_____- help: change this to: `{ Some(self.cmp(rhs)) }`\n...   |\n550 | |      fn ge(&self, rhs: &Self) -> bool { **self >= **rhs }\n551 | |  }\n    | |__^\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#non_canonical_partial_ord_impl\n    = note: `#[warn(clippy::non_canonical_partial_ord_impl)]` on by default\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#non_canonical_partial_ord_impl",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "`#[warn(clippy::non_canonical_partial_ord_impl)]` on by default",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "change this to",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 15546,
                        "byte_start": 15502,
                        "column_end": 6,
                        "column_start": 64,
                        "expansion": null,
                        "file_name": "src\\array_string.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 546,
                        "line_start": 544,
                        "suggested_replacement": "{ Some(self.cmp(rhs)) }",
                        "suggestion_applicability": "Unspecified",
                        "text": [
                          {
                            "highlight_end": 65,
                            "highlight_start": 64,
                            "text": "    fn partial_cmp(&self, rhs: &Self) -> Option<cmp::Ordering> {"
                          },
                          {
                            "highlight_end": 37,
                            "highlight_start": 1,
                            "text": "        (**self).partial_cmp(&**rhs)"
                          },
                          {
                            "highlight_end": 6,
                            "highlight_start": 1,
                            "text": "    }"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::non_canonical_partial_ord_impl",
                  "explanation": null
                },
                "level": "warning",
                "message": "non-canonical implementation of `partial_cmp` on an `Ord` type",
                "spans": [
                  {
                    "byte_end": 15774,
                    "byte_start": 15382,
                    "column_end": 2,
                    "column_start": 1,
                    "expansion": null,
                    "file_name": "src\\array_string.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 551,
                    "line_start": 542,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 55,
                        "highlight_start": 1,
                        "text": "impl<const CAP: usize> PartialOrd for ArrayString<CAP>"
                      },
                      {
                        "highlight_end": 2,
                        "highlight_start": 1,
                        "text": "{"
                      },
                      {
                        "highlight_end": 65,
                        "highlight_start": 1,
                        "text": "    fn partial_cmp(&self, rhs: &Self) -> Option<cmp::Ordering> {"
                      },
                      {
                        "highlight_end": 37,
                        "highlight_start": 1,
                        "text": "        (**self).partial_cmp(&**rhs)"
                      },
                      {
                        "highlight_end": 6,
                        "highlight_start": 1,
                        "text": "    }"
                      },
                      {
                        "highlight_end": 56,
                        "highlight_start": 1,
                        "text": "    fn lt(&self, rhs: &Self) -> bool { **self < **rhs }"
                      },
                      {
                        "highlight_end": 57,
                        "highlight_start": 1,
                        "text": "    fn le(&self, rhs: &Self) -> bool { **self <= **rhs }"
                      },
                      {
                        "highlight_end": 56,
                        "highlight_start": 1,
                        "text": "    fn gt(&self, rhs: &Self) -> bool { **self > **rhs }"
                      },
                      {
                        "highlight_end": 57,
                        "highlight_start": 1,
                        "text": "    fn ge(&self, rhs: &Self) -> bool { **self >= **rhs }"
                      },
                      {
                        "highlight_end": 2,
                        "highlight_start": 1,
                        "text": "}"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpoo56v5t5/arrayvec-0.7.6#arrayvec@0.7.6",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpoo56v5t5\\arrayvec-0.7.6\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "arrayvec",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpoo56v5t5\\arrayvec-0.7.6\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: redundant closure\n   --> src\\array_string.rs:689:32\n    |\n689 |         v.write_fmt(f).map_err(|e| CapacityError::new(e))?;\n    |                                ^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace the closure with the function itself: `CapacityError::new`\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#redundant_closure\n    = note: `#[warn(clippy::redundant_closure)]` on by default\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#redundant_closure",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "`#[warn(clippy::redundant_closure)]` on by default",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "replace the closure with the function itself",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 20239,
                        "byte_start": 20214,
                        "column_end": 57,
                        "column_start": 32,
                        "expansion": null,
                        "file_name": "src\\array_string.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 689,
                        "line_start": 689,
                        "suggested_replacement": "CapacityError::new",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 57,
                            "highlight_start": 32,
                            "text": "        v.write_fmt(f).map_err(|e| CapacityError::new(e))?;"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::redundant_closure",
                  "explanation": null
                },
                "level": "warning",
                "message": "redundant closure",
                "spans": [
                  {
                    "byte_end": 20239,
                    "byte_start": 20214,
                    "column_end": 57,
                    "column_start": 32,
                    "expansion": null,
                    "file_name": "src\\array_string.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 689,
                    "line_start": 689,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 57,
                        "highlight_start": 32,
                        "text": "        v.write_fmt(f).map_err(|e| CapacityError::new(e))?;"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpoo56v5t5/arrayvec-0.7.6#arrayvec@0.7.6",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpoo56v5t5\\arrayvec-0.7.6\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "arrayvec",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpoo56v5t5\\arrayvec-0.7.6\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: literal with an empty format string\n  --> src\\errors.rs:46:29\n   |\n46 |         write!(f, \"{}: {}\", \"CapacityError\", CAPERROR)\n   |                             ^^^^^^^^^^^^^^^\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#write_literal\n   = note: `#[warn(clippy::write_literal)]` on by default\nhelp: try\n   |\n46 -         write!(f, \"{}: {}\", \"CapacityError\", CAPERROR)\n46 +         write!(f, \"CapacityError: {}\", CAPERROR)\n   |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#write_literal",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "`#[warn(clippy::write_literal)]` on by default",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "try",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 1150,
                        "byte_start": 1148,
                        "column_end": 22,
                        "column_start": 20,
                        "expansion": null,
                        "file_name": "src\\errors.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 46,
                        "line_start": 46,
                        "suggested_replacement": "CapacityError",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 22,
                            "highlight_start": 20,
                            "text": "        write!(f, \"{}: {}\", \"CapacityError\", CAPERROR)"
                          }
                        ]
                      },
                      {
                        "byte_end": 1172,
                        "byte_start": 1155,
                        "column_end": 44,
                        "column_start": 27,
                        "expansion": null,
                        "file_name": "src\\errors.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 46,
                        "line_start": 46,
                        "suggested_replacement": "",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 44,
                            "highlight_start": 27,
                            "text": "        write!(f, \"{}: {}\", \"CapacityError\", CAPERROR)"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::write_literal",
                  "explanation": null
                },
                "level": "warning",
                "message": "literal with an empty format string",
                "spans": [
                  {
                    "byte_end": 1172,
                    "byte_start": 1157,
                    "column_end": 44,
                    "column_start": 29,
                    "expansion": null,
                    "file_name": "src\\errors.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 46,
                    "line_start": 46,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 44,
                        "highlight_start": 29,
                        "text": "        write!(f, \"{}: {}\", \"CapacityError\", CAPERROR)"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-artifact",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmpoo56v5t5/arrayvec-0.7.6#arrayvec@0.7.6",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpoo56v5t5\\arrayvec-0.7.6\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "arrayvec",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpoo56v5t5\\arrayvec-0.7.6\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpoo56v5t5\\arrayvec-0.7.6\\target\\debug\\deps\\libarrayvec-e3cbae411b7da836.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "build-finished",
              "success": true
            }
          ],
          "audit": {
            "database": {
              "advisory-count": 787,
              "last-commit": "7573f55ba337263f61167dbb0ea926cdc7c8eb5d",
              "last-updated": "2025-06-17T11:04:25+02:00"
            },
            "lockfile": {
              "dependency-count": 13
            },
            "settings": {
              "target_arch": [],
              "target_os": [],
              "severity": null,
              "ignore": [],
              "informational_warnings": [
                "unmaintained",
                "unsound",
                "notice"
              ]
            },
            "vulnerabilities": {
              "found": false,
              "count": 0,
              "list": []
            },
            "warnings": {}
          },
          "note": "Crate analysis performed with stable toolchain."
        },
        "crate_metadata": {
          "name": "arrayvec",
          "version": "0.7.6",
          "description": "ALLOW: Positive community sentiment",
          "repository": "",
          "keywords": [],
          "categories": [],
          "readme": {
            "raw_markdown": "[](https://docs.rs/arrayvec/latest/arrayvec/all.html \"show sidebar\")\n# Crate arrayvecCopy item path\n[Settings](https://docs.rs/arrayvec/latest/settings.html)\n[Help](https://docs.rs/arrayvec/latest/help.html)\nSummary[Source](https://docs.rs/arrayvec/latest/src/arrayvec/lib.rs.html#1-63)\nExpand description\n**arrayvec** provides the types [`ArrayVec`](https://docs.rs/arrayvec/latest/arrayvec/struct.ArrayVec.html \"struct arrayvec::ArrayVec\") and [`ArrayString`](https://docs.rs/arrayvec/latest/arrayvec/struct.ArrayString.html \"struct arrayvec::ArrayString\"): array-backed vector and string types, which store their contents inline.\nThe arrayvec package has the following cargo features:\n  * `std`\n    * Optional, enabled by default\n    * Use libstd; disable to use `no_std` instead.\n  * `serde`\n    * Optional\n    * Enable serialization for ArrayVec and ArrayString using serde 1.x\n  * `zeroize`\n    * Optional\n    * Implement `Zeroize` for ArrayVec and ArrayString\n\n\n### [\u00a7](https://docs.rs/arrayvec/latest/arrayvec/#rust-version)Rust Version\nThis version of arrayvec requires Rust 1.51 or later.\n## Structs[\u00a7](https://docs.rs/arrayvec/latest/arrayvec/#structs)\n\n[ArrayString](https://docs.rs/arrayvec/latest/arrayvec/struct.ArrayString.html \"struct arrayvec::ArrayString\")\n    A string with a fixed capacity.\n\n[ArrayVec](https://docs.rs/arrayvec/latest/arrayvec/struct.ArrayVec.html \"struct arrayvec::ArrayVec\")\n    A vector with a fixed capacity.\n\n[CapacityError](https://docs.rs/arrayvec/latest/arrayvec/struct.CapacityError.html \"struct arrayvec::CapacityError\")\n    Error value indicating insufficient capacity\n\n[Drain](https://docs.rs/arrayvec/latest/arrayvec/struct.Drain.html \"struct arrayvec::Drain\")\n    A draining iterator for `ArrayVec`.\n\n[IntoIter](https://docs.rs/arrayvec/latest/arrayvec/struct.IntoIter.html \"struct arrayvec::IntoIter\")\n    By-value iterator for `ArrayVec`.\n",
            "markdown_with_citations": "[](https://docs.rs/arrayvec/latest/arrayvec/all.html \"show sidebar\")\n# Crate arrayvecCopy item path\nSettings\u27e81\u27e9\nHelp\u27e82\u27e9\nSummarySource\u27e83\u27e9\nExpand description\n**arrayvec** provides the types `ArrayVec`\u27e84\u27e9 and `ArrayString`\u27e85\u27e9: array-backed vector and string types, which store their contents inline.\nThe arrayvec package has the following cargo features:\n  * `std`\n    * Optional, enabled by default\n    * Use libstd; disable to use `no_std` instead.\n  * `serde`\n    * Optional\n    * Enable serialization for ArrayVec and ArrayString using serde 1.x\n  * `zeroize`\n    * Optional\n    * Implement `Zeroize` for ArrayVec and ArrayString\n\n\n### \u00a7\u27e86\u27e9Rust Version\nThis version of arrayvec requires Rust 1.51 or later.\n## Structs\u00a7\u27e87\u27e9\n\nArrayString\u27e85\u27e9\n    A string with a fixed capacity.\n\nArrayVec\u27e84\u27e9\n    A vector with a fixed capacity.\n\nCapacityError\u27e88\u27e9\n    Error value indicating insufficient capacity\n\nDrain\u27e89\u27e9\n    A draining iterator for `ArrayVec`.\n\nIntoIter\u27e810\u27e9\n    By-value iterator for `ArrayVec`.\n",
            "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://docs.rs/arrayvec/latest/settings.html: Settings\n\u27e82\u27e9 https://docs.rs/arrayvec/latest/help.html: Help\n\u27e83\u27e9 https://docs.rs/arrayvec/latest/src/arrayvec/lib.rs.html#1-63: Source\n\u27e84\u27e9 https://docs.rs/arrayvec/latest/arrayvec/struct.ArrayVec.html: struct arrayvec::ArrayVec - `ArrayVec`\n\u27e85\u27e9 https://docs.rs/arrayvec/latest/arrayvec/struct.ArrayString.html: struct arrayvec::ArrayString - `ArrayString`\n\u27e86\u27e9 https://docs.rs/arrayvec/latest/arrayvec/#rust-version: \u00a7\n\u27e87\u27e9 https://docs.rs/arrayvec/latest/arrayvec/#structs: \u00a7\n\u27e88\u27e9 https://docs.rs/arrayvec/latest/arrayvec/struct.CapacityError.html: struct arrayvec::CapacityError - CapacityError\n\u27e89\u27e9 https://docs.rs/arrayvec/latest/arrayvec/struct.Drain.html: struct arrayvec::Drain - Drain\n\u27e810\u27e9 https://docs.rs/arrayvec/latest/arrayvec/struct.IntoIter.html: struct arrayvec::IntoIter - IntoIter\n",
            "fit_markdown": "",
            "fit_html": ""
          },
          "downloads": 0,
          "github_stars": 0,
          "dependencies": [],
          "features": {},
          "code_snippets": [],
          "readme_sections": {},
          "librs_downloads": null,
          "source": "crates.io",
          "enhanced_scraping": {},
          "enhanced_features": [],
          "enhanced_dependencies": []
        },
        "enriched_crate": {
          "name": "arrayvec",
          "version": "0.7.6",
          "description": "ALLOW: Positive community sentiment",
          "repository": "",
          "keywords": [],
          "categories": [],
          "readme": {
            "raw_markdown": "[](https://docs.rs/arrayvec/latest/arrayvec/all.html \"show sidebar\")\n# Crate arrayvecCopy item path\n[Settings](https://docs.rs/arrayvec/latest/settings.html)\n[Help](https://docs.rs/arrayvec/latest/help.html)\nSummary[Source](https://docs.rs/arrayvec/latest/src/arrayvec/lib.rs.html#1-63)\nExpand description\n**arrayvec** provides the types [`ArrayVec`](https://docs.rs/arrayvec/latest/arrayvec/struct.ArrayVec.html \"struct arrayvec::ArrayVec\") and [`ArrayString`](https://docs.rs/arrayvec/latest/arrayvec/struct.ArrayString.html \"struct arrayvec::ArrayString\"): array-backed vector and string types, which store their contents inline.\nThe arrayvec package has the following cargo features:\n  * `std`\n    * Optional, enabled by default\n    * Use libstd; disable to use `no_std` instead.\n  * `serde`\n    * Optional\n    * Enable serialization for ArrayVec and ArrayString using serde 1.x\n  * `zeroize`\n    * Optional\n    * Implement `Zeroize` for ArrayVec and ArrayString\n\n\n### [\u00a7](https://docs.rs/arrayvec/latest/arrayvec/#rust-version)Rust Version\nThis version of arrayvec requires Rust 1.51 or later.\n## Structs[\u00a7](https://docs.rs/arrayvec/latest/arrayvec/#structs)\n\n[ArrayString](https://docs.rs/arrayvec/latest/arrayvec/struct.ArrayString.html \"struct arrayvec::ArrayString\")\n    A string with a fixed capacity.\n\n[ArrayVec](https://docs.rs/arrayvec/latest/arrayvec/struct.ArrayVec.html \"struct arrayvec::ArrayVec\")\n    A vector with a fixed capacity.\n\n[CapacityError](https://docs.rs/arrayvec/latest/arrayvec/struct.CapacityError.html \"struct arrayvec::CapacityError\")\n    Error value indicating insufficient capacity\n\n[Drain](https://docs.rs/arrayvec/latest/arrayvec/struct.Drain.html \"struct arrayvec::Drain\")\n    A draining iterator for `ArrayVec`.\n\n[IntoIter](https://docs.rs/arrayvec/latest/arrayvec/struct.IntoIter.html \"struct arrayvec::IntoIter\")\n    By-value iterator for `ArrayVec`.\n",
            "markdown_with_citations": "[](https://docs.rs/arrayvec/latest/arrayvec/all.html \"show sidebar\")\n# Crate arrayvecCopy item path\nSettings\u27e81\u27e9\nHelp\u27e82\u27e9\nSummarySource\u27e83\u27e9\nExpand description\n**arrayvec** provides the types `ArrayVec`\u27e84\u27e9 and `ArrayString`\u27e85\u27e9: array-backed vector and string types, which store their contents inline.\nThe arrayvec package has the following cargo features:\n  * `std`\n    * Optional, enabled by default\n    * Use libstd; disable to use `no_std` instead.\n  * `serde`\n    * Optional\n    * Enable serialization for ArrayVec and ArrayString using serde 1.x\n  * `zeroize`\n    * Optional\n    * Implement `Zeroize` for ArrayVec and ArrayString\n\n\n### \u00a7\u27e86\u27e9Rust Version\nThis version of arrayvec requires Rust 1.51 or later.\n## Structs\u00a7\u27e87\u27e9\n\nArrayString\u27e85\u27e9\n    A string with a fixed capacity.\n\nArrayVec\u27e84\u27e9\n    A vector with a fixed capacity.\n\nCapacityError\u27e88\u27e9\n    Error value indicating insufficient capacity\n\nDrain\u27e89\u27e9\n    A draining iterator for `ArrayVec`.\n\nIntoIter\u27e810\u27e9\n    By-value iterator for `ArrayVec`.\n",
            "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://docs.rs/arrayvec/latest/settings.html: Settings\n\u27e82\u27e9 https://docs.rs/arrayvec/latest/help.html: Help\n\u27e83\u27e9 https://docs.rs/arrayvec/latest/src/arrayvec/lib.rs.html#1-63: Source\n\u27e84\u27e9 https://docs.rs/arrayvec/latest/arrayvec/struct.ArrayVec.html: struct arrayvec::ArrayVec - `ArrayVec`\n\u27e85\u27e9 https://docs.rs/arrayvec/latest/arrayvec/struct.ArrayString.html: struct arrayvec::ArrayString - `ArrayString`\n\u27e86\u27e9 https://docs.rs/arrayvec/latest/arrayvec/#rust-version: \u00a7\n\u27e87\u27e9 https://docs.rs/arrayvec/latest/arrayvec/#structs: \u00a7\n\u27e88\u27e9 https://docs.rs/arrayvec/latest/arrayvec/struct.CapacityError.html: struct arrayvec::CapacityError - CapacityError\n\u27e89\u27e9 https://docs.rs/arrayvec/latest/arrayvec/struct.Drain.html: struct arrayvec::Drain - Drain\n\u27e810\u27e9 https://docs.rs/arrayvec/latest/arrayvec/struct.IntoIter.html: struct arrayvec::IntoIter - IntoIter\n",
            "fit_markdown": "",
            "fit_html": ""
          },
          "downloads": 0,
          "github_stars": 0,
          "dependencies": [],
          "features": {},
          "code_snippets": [],
          "readme_sections": {},
          "librs_downloads": null,
          "source": "crates.io",
          "enhanced_scraping": {},
          "enhanced_features": [],
          "enhanced_dependencies": [],
          "readme_summary": "The `arrayvec` crate provides `ArrayVec` and `ArrayString`, which are fixed-capacity, array-backed vector and string types that store their contents inline, offering predictable memory usage and improved performance. It supports optional features like `serde` for serialization, `zeroize` for secure memory clearing, and can operate in `no_std` environments. The crate requires Rust 1.51 or later and includes utility types like `CapacityError`, `Drain`, and `IntoIter` for enhanced functionality.",
          "feature_summary": null,
          "use_case": "Utilities",
          "score": 8.0,
          "factual_counterfactual": "### Pair 1: Structs and Features  \n\u2705 Factual: The `ArrayVec` struct in the `arrayvec` crate provides a fixed-capacity vector that stores its elements inline, avoiding heap allocation.  \n\u274c Counterfactual: The `ArrayVec` struct dynamically allocates memory on the heap when its fixed capacity is exceeded.  \n\n---\n\n### Pair 2: Serialization Support  \n\u2705 Factual: The `serde` feature in the `arrayvec` crate enables serialization and deserialization of `ArrayVec` and `ArrayString` types using Serde 1.x.  \n\u274c Counterfactual: The `arrayvec` crate provides built-in serialization and deserialization for `ArrayVec` and `ArrayString` without requiring any optional features.  \n\n---\n\n### Pair 3: Compatibility with `no_std`  \n\u2705 Factual: The `arrayvec` crate supports `no_std` environments by disabling the default `std` feature.  \n\u274c Counterfactual: The `arrayvec` crate requires the `std` feature to function and does not support `no_std` environments.",
          "source_analysis": null,
          "user_behavior": null,
          "security": null
        }
      },
      "irl_score": 8.6,
      "execution_id": "exec-733c7664-46ffd0e0-1751260875",
      "timestamp": "2025-06-30T05:21:15.647052+00:00",
      "canon_version": "1.3.0"
    },
    "rule_zero_compliant": true
  }
]