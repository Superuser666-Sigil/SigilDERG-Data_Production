[
  {
    "execution_id": "exec-af048a49-68d25049-1751263867",
    "timestamp": "2025-06-30T06:11:07.928810+00:00",
    "sacred_chain": {
      "input_data": "proc-macro-error",
      "context_sources": [
        "crates.io",
        "github.com",
        "lib.rs",
        "docs.rs"
      ],
      "reasoning_steps": [
        "Input canonicalized: 'proc-macro-error' -> 'proc-macro-error'",
        "Context gathered from 4 validated sources",
        "Metadata extracted: 4 fields",
        "Documentation analyzed: quality 7.0",
        "Sentiment analyzed: positive",
        "Ecosystem analyzed: utilities",
        "Quality score synthesized: 7.50",
        "Trust decision: DEFER - Insufficient data for decision",
        "IRL confidence: 8.600"
      ],
      "suggestion": "ALLOW: Positive community sentiment",
      "verdict": "DEFER",
      "audit_info": {
        "metadata": {
          "name": "proc-macro-error",
          "type": "rust_crate",
          "source": "manual_input",
          "extraction_method": "irl_engine"
        },
        "sentiment": {
          "quality_score": 7.0,
          "completeness": 0.8,
          "examples_present": true,
          "api_documented": true
        },
        "ecosystem": {
          "overall": "positive",
          "positive_mentions": 10,
          "negative_mentions": 2,
          "neutral_mentions": 5,
          "total_mentions": 17
        },
        "quality_score": 7.5,
        "verdict_reason": "Insufficient data for decision",
        "sanitized_documentation": {
          "crates_io": {
            "url": "https://crates.io/crates/proc-macro-error",
            "title": "proc-macro-error v1.0.4",
            "content": {
              "raw_markdown": "#  proc-macro-error v1.0.4\nAlmost drop-in replacement to panics in proc-macros \n  * [ #proc-macro ](https://crates.io/keywords/proc-macro)\n  * [ #errors ](https://crates.io/keywords/errors)\n  * [ #error ](https://crates.io/keywords/error)\n\n\n  * [ Readme ](https://crates.io/crates/proc-macro-error)\n  * [ 38 Versions ](https://crates.io/crates/proc-macro-error/versions)\n  * [ Dependencies ](https://crates.io/crates/proc-macro-error/dependencies)\n  * [ Dependents ](https://crates.io/crates/proc-macro-error/reverse_dependencies)\n\n\n## Metadata\nalmost 5 years ago \n2018 edition \n[ MIT ](https://choosealicense.com/licenses/mit) OR [ Apache-2.0 ](https://choosealicense.com/licenses/apache-2.0)\n24.7 KiB \n## Install\nRun the following Cargo command in your project directory:\ncargo add proc-macro-error\nOr add the following line to your Cargo.toml:\nproc-macro-error = \"1.0.4\"\n## Repository\n[ gitlab.com/CreepySkeleton/proc-macro-error ](https://gitlab.com/CreepySkeleton/proc-macro-error)\n## Owners\n## Categories\n  * [Procedural macro helpers](https://crates.io/categories/development-tools::procedural-macro-helpers)\n\n\n[ Report crate ](https://crates.io/support?crate=proc-macro-error&inquire=crate-violation)\n### Stats Overview\n183,111,444 Downloads all time\n38 Versions published\n#### Downloads over the last 90 days\nDisplay as \nStacked \n  * Stacked \n  * Unstacked \n\n\nLoading\u2026\n",
              "markdown_with_citations": "#  proc-macro-error v1.0.4\nAlmost drop-in replacement to panics in proc-macros \n  *  #proc-macro \u27e81\u27e9\n  *  #errors \u27e82\u27e9\n  *  #error \u27e83\u27e9\n\n\n  *  Readme \u27e84\u27e9\n  *  38 Versions \u27e85\u27e9\n  *  Dependencies \u27e86\u27e9\n  *  Dependents \u27e87\u27e9\n\n\n## Metadata\nalmost 5 years ago \n2018 edition \n MIT \u27e88\u27e9 OR  Apache-2.0 \u27e89\u27e9\n24.7 KiB \n## Install\nRun the following Cargo command in your project directory:\ncargo add proc-macro-error\nOr add the following line to your Cargo.toml:\nproc-macro-error = \"1.0.4\"\n## Repository\n gitlab.com/CreepySkeleton/proc-macro-error \u27e810\u27e9\n## Owners\n## Categories\n  * Procedural macro helpers\u27e811\u27e9\n\n\n Report crate \u27e812\u27e9\n### Stats Overview\n183,111,444 Downloads all time\n38 Versions published\n#### Downloads over the last 90 days\nDisplay as \nStacked \n  * Stacked \n  * Unstacked \n\n\nLoading\u2026\n",
              "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://crates.io/keywords/proc-macro:  #proc-macro \n\u27e82\u27e9 https://crates.io/keywords/errors:  #errors \n\u27e83\u27e9 https://crates.io/keywords/error:  #error \n\u27e84\u27e9 https://crates.io/crates/proc-macro-error:  Readme \n\u27e85\u27e9 https://crates.io/crates/proc-macro-error/versions:  38 Versions \n\u27e86\u27e9 https://crates.io/crates/proc-macro-error/dependencies:  Dependencies \n\u27e87\u27e9 https://crates.io/crates/proc-macro-error/reverse_dependencies:  Dependents \n\u27e88\u27e9 https://choosealicense.com/licenses/mit:  MIT \n\u27e89\u27e9 https://choosealicense.com/licenses/apache-2.0:  Apache-2.0 \n\u27e810\u27e9 https://gitlab.com/CreepySkeleton/proc-macro-error:  gitlab.com/CreepySkeleton/proc-macro-error \n\u27e811\u27e9 https://crates.io/categories/development-tools::procedural-macro-helpers: Procedural macro helpers\n\u27e812\u27e9 https://crates.io/support?crate=proc-macro-error&inquire=crate-violation:  Report crate \n",
              "fit_markdown": "",
              "fit_html": ""
            },
            "structured_data": {},
            "quality_score": 3.0,
            "extraction_method": "crawl4ai",
            "error": null,
            "metadata": {
              "doc_type": "docs",
              "content_length": 1378,
              "has_structured_data": false,
              "crawl_success": true
            },
            "timestamp": "117657.7432162"
          },
          "docs_rs": {
            "url": "https://docs.rs/proc-macro-error",
            "title": "Crate proc_macro_errorCopy item path",
            "content": {
              "raw_markdown": "[](https://docs.rs/proc-macro-error/latest/proc_macro_error/all.html \"show sidebar\")\n# Crate proc_macro_errorCopy item path\n[Settings](https://docs.rs/proc-macro-error/latest/settings.html)\n[Help](https://docs.rs/proc-macro-error/latest/help.html)\nSummary[Source](https://docs.rs/proc-macro-error/latest/src/proc_macro_error/lib.rs.html#1-560)\nExpand description\n## [\u00a7](https://docs.rs/proc-macro-error/latest/proc_macro_error/#proc-macro-error)proc-macro-error\nThis crate aims to make error reporting in proc-macros simple and easy to use. Migrate from `panic!`-based errors for as little effort as possible!\n(Also, you can explicitly [append a dummy token stream](https://docs.rs/proc-macro-error/latest/proc_macro_error/dummy/index.html) to your errors).\nTo achieve his, this crate serves as a tiny shim around `proc_macro::Diagnostic` and `compile_error!`. It detects the best way of emitting available based on compiler\u2019s version. When the underlying diagnostic type is finally stabilized, this crate will simply be delegating to it requiring no changes in your code!\nSo you can just use this crate and have _both_ some of `proc_macro::Diagnostic` functionality available on stable ahead of time _and_ your error-reporting code future-proof.\n### [\u00a7](https://docs.rs/proc-macro-error/latest/proc_macro_error/#cargo-features)Cargo features\nThis crate provides _enabled by default_ `syn-error` feature that gates `impl From<syn::Error> for Diagnostic` conversion. If you don\u2019t use `syn` and want to cut off some of compilation time, you can disable it via\n```\n[dependencies]\nproc-macro-error = { version = \"1\", default-features = false }\n```\n\n* **Please note that disabling this feature makes sense only if you don\u2019t depend on`syn` directly or indirectly, and you very likely do.**\n### [\u00a7](https://docs.rs/proc-macro-error/latest/proc_macro_error/#real-world-examples)Real world examples\n  * [`structopt-derive`](https://github.com/TeXitoi/structopt/tree/master/structopt-derive) (abort-like usage)\n  * [`auto-impl`](https://github.com/auto-impl-rs/auto_impl/) (emit-like usage)\n\n\n### [\u00a7](https://docs.rs/proc-macro-error/latest/proc_macro_error/#limitations)Limitations\n  * Warnings are emitted only on nightly, they are ignored on stable.\n  * \u201chelp\u201d suggestions can\u2019t have their own span info on stable, (essentially inheriting the parent span).\n  * If a panic occurs somewhere in your macro no errors will be displayed. This is not a technical limitation but rather intentional design. `panic` is not for error reporting.\n\n\n#### [\u00a7](https://docs.rs/proc-macro-error/latest/proc_macro_error/#proc_macro_error-attribute)`#[proc_macro_error]` attribute\n**This attribute MUST be present on the top level of your macro** (the function annotated with any of `#[proc_macro]`, `#[proc_macro_derive]`, `#[proc_macro_attribute]`).\nThis attribute performs the setup and cleanup necessary to make things work.\nIn most cases you\u2019ll need the simple `#[proc_macro_error]` form without any additional settings. Feel free to [skip the \u201cSyntax\u201d section](https://docs.rs/proc-macro-error/latest/proc_macro_error/#macros).\n##### [\u00a7](https://docs.rs/proc-macro-error/latest/proc_macro_error/#syntax)Syntax\n`#[proc_macro_error]` or `#[proc_macro_error(settings...)]`, where `settings...` is a comma-separated list of:\n  * `proc_macro_hack`:\nIn order to correctly cooperate with `#[proc_macro_hack]`, `#[proc_macro_error]` attribute must be placed _before_ (above) it, like this:\n```\n#[proc_macro_error]\n#[proc_macro_hack]\n#[proc_macro]\nfn my_macro(input: TokenStream) -> TokenStream {\n  unimplemented!()\n}\n```\n\nIf, for some reason, you can\u2019t place it like that you can use `#[proc_macro_error(proc_macro_hack)]` instead.\n## [\u00a7](https://docs.rs/proc-macro-error/latest/proc_macro_error/#note)Note\nIf `proc-macro-hack` was detected (by any means) `allow_not_macro` and `assert_unwind_safe` will be applied automatically.\n  * `allow_not_macro`:\nBy default, the attribute checks that it\u2019s applied to a proc-macro. If none of `#[proc_macro]`, `#[proc_macro_derive]` nor `#[proc_macro_attribute]` are present it will panic. It\u2019s the intention - this crate is supposed to be used only with proc-macros.\nThis setting is made to bypass the check, useful in certain circumstances.\nPay attention: the function this attribute is applied to must return `proc_macro::TokenStream`.\nThis setting is implied if `proc-macro-hack` was detected.\n  * `assert_unwind_safe`:\nBy default, your code must be [unwind safe](https://doc.rust-lang.org/std/panic/trait.UnwindSafe.html#what-is-unwind-safety). If your code is not unwind safe, but you believe it\u2019s correct, you can use this setting to bypass the check. You would need this for code that uses `lazy_static` or `thread_local` with `Cell/RefCell` inside (and the like).\nThis setting is implied if `#[proc_macro_error]` is applied to a function marked as `#[proc_macro]`, `#[proc_macro_derive]` or `#[proc_macro_attribute]`.\nThis setting is also implied if `proc-macro-hack` was detected.\n\n\n### [\u00a7](https://docs.rs/proc-macro-error/latest/proc_macro_error/#macros)Macros\nMost of the time you want to use the macros. Syntax is described in the next section below.\nYou\u2019ll need to decide how you want to emit errors:\n  * Emit the error and abort. Very much panic-like usage. Served by [`abort!`](https://docs.rs/proc-macro-error/latest/proc_macro_error/macro.abort.html) and [`abort_call_site!`](https://docs.rs/proc-macro-error/latest/proc_macro_error/macro.abort_call_site.html).\n  * Emit the error but do not abort right away, looking for other errors to report. Served by [`emit_error!`](https://docs.rs/proc-macro-error/latest/proc_macro_error/macro.emit_error.html) and [`emit_call_site_error!`](https://docs.rs/proc-macro-error/latest/proc_macro_error/macro.emit_call_site_warning.html).\n\n\nYou **can** mix these usages.\n`abort` and `emit_error` take a \u201csource span\u201d as the first argument. This source will be used to highlight the place the error originates from. It must be one of:\n  * _Something_ that implements [`ToTokens`](https://docs.rs/quote/1.0.3/quote/trait.ToTokens.html) (most types in `syn` and `proc-macro2` do). This source is the preferable one since it doesn\u2019t lose span information on multi-token spans, see [this issue](https://gitlab.com/CreepySkeleton/proc-macro-error/-/issues/6) for details.\n  * [`proc_macro::Span`](https://doc.rust-lang.org/proc_macro/struct.Span.html)\n  * [`proc-macro2::Span`](https://docs.rs/proc-macro2/1.0.10/proc_macro2/struct.Span.html)\n\n\nThe rest is your message in format-like style.\nSee [the next section](https://docs.rs/proc-macro-error/latest/proc_macro_error/#syntax-1) for detailed syntax.\n  * [`abort!`](https://docs.rs/proc-macro-error/latest/proc_macro_error/macro.abort.html):\nVery much panic-like usage - abort right away and show the error. Expands to [`!`](https://doc.rust-lang.org/std/primitive.never.html) (never type).\n  * [`abort_call_site!`](https://docs.rs/proc-macro-error/latest/proc_macro_error/macro.abort_call_site.html):\nShortcut for `abort!(Span::call_site(), ...)`. Expands to [`!`](https://doc.rust-lang.org/std/primitive.never.html) (never type).\n  * [`emit_error!`](https://docs.rs/proc-macro-error/latest/proc_macro_error/macro.emit_error.html):\n[`proc_macro::Diagnostic`](https://doc.rust-lang.org/proc_macro/struct.Diagnostic.html)-like usage - emit the error but keep going, looking for other errors to report. The compilation will fail nonetheless. Expands to [`()`](https://doc.rust-lang.org/std/primitive.unit.html) (unit type).\n  * [`emit_call_site_error!`](https://docs.rs/proc-macro-error/latest/proc_macro_error/macro.emit_call_site_warning.html):\nShortcut for `emit_error!(Span::call_site(), ...)`. Expands to [`()`](https://doc.rust-lang.org/std/primitive.unit.html) (unit type).\n  * [`emit_warning!`](https://docs.rs/proc-macro-error/latest/proc_macro_error/macro.emit_warning.html):\nLike `emit_error!` but emit a warning instead of error. The compilation won\u2019t fail because of warnings. Expands to [`()`](https://doc.rust-lang.org/std/primitive.unit.html) (unit type).\n**Beware** : warnings are nightly only, they are completely ignored on stable.\n  * [`emit_call_site_warning!`](https://docs.rs/proc-macro-error/latest/proc_macro_error/macro.emit_call_site_error.html):\nShortcut for `emit_warning!(Span::call_site(), ...)`. Expands to [`()`](https://doc.rust-lang.org/std/primitive.unit.html) (unit type).\n  * [`diagnostic`](https://docs.rs/proc-macro-error/latest/proc_macro_error/struct.Diagnostic.html):\nBuild an instance of `Diagnostic` in format-like style.\n\n\n##### [\u00a7](https://docs.rs/proc-macro-error/latest/proc_macro_error/#syntax-1)Syntax\nAll the macros have pretty much the same syntax:\n  1. [\u24d8](https://docs.rs/proc-macro-error/latest/proc_macro_error/ \"This example is not tested\")```\nabort!(single_expr)\n```\n\nShortcut for `Diagnostic::from(expr).abort()`.\n  2. [\u24d8](https://docs.rs/proc-macro-error/latest/proc_macro_error/ \"This example is not tested\")```\nabort!(span, message)\n```\n\nThe first argument is an expression the span info should be taken from.\nThe second argument is the error message, it must implement [`ToString`](https://doc.rust-lang.org/std/string/trait.ToString.html).\n  3. [\u24d8](https://docs.rs/proc-macro-error/latest/proc_macro_error/ \"This example is not tested\")```\nabort!(span, format_literal, format_args...)\n```\n\nThis form is pretty much the same as 2, except `format!(format_literal, format_args...)` will be used to for the message instead of [`ToString`](https://doc.rust-lang.org/std/string/trait.ToString.html).\n\n\nThat\u2019s it. `abort!`, `emit_warning`, `emit_error` share this exact syntax.\n`abort_call_site!`, `emit_call_site_warning`, `emit_call_site_error` lack 1 form and do not take span in 2\u2019th and 3\u2019th forms. Those are essentially shortcuts for `macro!(Span::call_site(), args...)`.\n`diagnostic!` requires a [`Level`](https://docs.rs/proc-macro-error/latest/proc_macro_error/enum.Level.html \"enum proc_macro_error::Level\") instance between `span` and second argument (1\u2019th form is the same).\n> **Important!**\n> If you have some type from `proc_macro` or `syn` to point to, do not call `.span()` on it but rather use it directly:\n> ```\nlet ty: syn::Type = syn::parse2(input).unwrap();\nabort!(ty, \"BOOM\");\n//   ^^ <-- avoid .span()\n```\n\n> `.span()` calls work too, but you may experience regressions in message quality.\n##### [\u00a7](https://docs.rs/proc-macro-error/latest/proc_macro_error/#note-attachments)Note attachments\n  1. Every macro can have \u201cnote\u201d attachments (only 2 and 3 form).\n\n\n[\u24d8](https://docs.rs/proc-macro-error/latest/proc_macro_error/ \"This example is not tested\")```\nlet opt_help = if have_some_info { Some(\"did you mean `this`?\") } else { None };\nabort!(\n  span, message; // <--- attachments start with `;` (semicolon)\n  help = \"format {} {}\", \"arg1\", \"arg2\"; // <--- every attachment ends with `;`,\n                      //   maybe except the last one\n  note = \"to_string\"; // <--- one arg uses `.to_string()` instead of `format!()`\n  yay = \"I see what {} did here\", \"you\"; // <--- \"help =\" and \"hint =\" are mapped\n                      // to Diagnostic::help,\n                      // anything else is Diagnostic::note\n  wow = note_span => \"custom span\"; // <--- attachments can have their own span\n                   //   it takes effect only on nightly though\n  hint =? opt_help; // <-- \"optional\" attachment, get displayed only if `Some`\n           //   must be single `Option` expression\n  note =? note_span => opt_help // <-- optional attachments can have custom spans too\n);\n```\n\n#### [\u00a7](https://docs.rs/proc-macro-error/latest/proc_macro_error/#diagnostic-type)Diagnostic type\n[`Diagnostic`](https://docs.rs/proc-macro-error/latest/proc_macro_error/struct.Diagnostic.html) type is intentionally designed to be API compatible with [`proc_macro::Diagnostic`](https://doc.rust-lang.org/proc_macro/struct.Diagnostic.html). Not all API is implemented, only the part that can be reasonably implemented on stable.\n## Re-exports[\u00a7](https://docs.rs/proc-macro-error/latest/proc_macro_error/#reexports)\n\n`pub use crate::dummy::append_dummy[](https://docs.rs/proc-macro-error/latest/proc_macro_error/dummy/fn.append_dummy.html \"fn proc_macro_error::dummy::append_dummy\");`\n\n\n`pub use crate::dummy::set_dummy[](https://docs.rs/proc-macro-error/latest/proc_macro_error/dummy/fn.set_dummy.html \"fn proc_macro_error::dummy::set_dummy\");`\n\n## Modules[\u00a7](https://docs.rs/proc-macro-error/latest/proc_macro_error/#modules)\n\n[dummy](https://docs.rs/proc-macro-error/latest/proc_macro_error/dummy/index.html \"mod proc_macro_error::dummy\")\n    Facility to emit dummy implementations (or whatever) in case an error happen.\n## Macros[\u00a7](https://docs.rs/proc-macro-error/latest/proc_macro_error/#macros-1)\n\n[abort](https://docs.rs/proc-macro-error/latest/proc_macro_error/macro.abort.html \"macro proc_macro_error::abort\")\n    Abort proc-macro execution right now and display the error.\n\n[abort_call_site](https://docs.rs/proc-macro-error/latest/proc_macro_error/macro.abort_call_site.html \"macro proc_macro_error::abort_call_site\")\n    Shortcut for `abort!(Span::call_site(), msg...)`. This macro is still preferable over plain panic, panics are not for error reporting.\n\n[diagnostic](https://docs.rs/proc-macro-error/latest/proc_macro_error/macro.diagnostic.html \"macro proc_macro_error::diagnostic\")\n    Build [`Diagnostic`](https://docs.rs/proc-macro-error/latest/proc_macro_error/struct.Diagnostic.html) instance from provided arguments.\n\n[emit_call_site_error](https://docs.rs/proc-macro-error/latest/proc_macro_error/macro.emit_call_site_error.html \"macro proc_macro_error::emit_call_site_error\")\n    Shortcut for `emit_error!(Span::call_site(), ...)`. This macro is still preferable over plain panic, panics are not for error reporting..\n\n[emit_call_site_warning](https://docs.rs/proc-macro-error/latest/proc_macro_error/macro.emit_call_site_warning.html \"macro proc_macro_error::emit_call_site_warning\")\n    Shortcut for `emit_warning!(Span::call_site(), ...)`.\n\n[emit_error](https://docs.rs/proc-macro-error/latest/proc_macro_error/macro.emit_error.html \"macro proc_macro_error::emit_error\")\n    Emit an error while not aborting the proc-macro right away.\n\n[emit_warning](https://docs.rs/proc-macro-error/latest/proc_macro_error/macro.emit_warning.html \"macro proc_macro_error::emit_warning\")\n    Emit a warning. Warnings are not errors and compilation won\u2019t fail because of them.\n## Structs[\u00a7](https://docs.rs/proc-macro-error/latest/proc_macro_error/#structs)\n\n[Diagnostic](https://docs.rs/proc-macro-error/latest/proc_macro_error/struct.Diagnostic.html \"struct proc_macro_error::Diagnostic\")\n    Represents a single diagnostic message\n\n[SpanRange](https://docs.rs/proc-macro-error/latest/proc_macro_error/struct.SpanRange.html \"struct proc_macro_error::SpanRange\")\n\n## Enums[\u00a7](https://docs.rs/proc-macro-error/latest/proc_macro_error/#enums)\n\n[Level](https://docs.rs/proc-macro-error/latest/proc_macro_error/enum.Level.html \"enum proc_macro_error::Level\")\n    Represents a diagnostic level\n## Traits[\u00a7](https://docs.rs/proc-macro-error/latest/proc_macro_error/#traits)\n\n[DiagnosticExt](https://docs.rs/proc-macro-error/latest/proc_macro_error/trait.DiagnosticExt.html \"trait proc_macro_error::DiagnosticExt\")\n    A collection of methods that do not exist in `proc_macro::Diagnostic` but still useful to have around.\n\n[OptionExt](https://docs.rs/proc-macro-error/latest/proc_macro_error/trait.OptionExt.html \"trait proc_macro_error::OptionExt\")\n    This traits expands `Option` with some handy shortcuts.\n\n[ResultExt](https://docs.rs/proc-macro-error/latest/proc_macro_error/trait.ResultExt.html \"trait proc_macro_error::ResultExt\")\n    This traits expands `Result<T, Into<Diagnostic>>` with some handy shortcuts.\n## Functions[\u00a7](https://docs.rs/proc-macro-error/latest/proc_macro_error/#functions)\n\n[abort_if_dirty](https://docs.rs/proc-macro-error/latest/proc_macro_error/fn.abort_if_dirty.html \"fn proc_macro_error::abort_if_dirty\")\n    Abort macro execution and display all the emitted errors, if any.\n## Attribute Macros[\u00a7](https://docs.rs/proc-macro-error/latest/proc_macro_error/#attributes)\n\n[proc_macro_error](https://docs.rs/proc-macro-error/latest/proc_macro_error/attr.proc_macro_error.html \"attr proc_macro_error::proc_macro_error\")\n\n",
              "markdown_with_citations": "[](https://docs.rs/proc-macro-error/latest/proc_macro_error/all.html \"show sidebar\")\n# Crate proc_macro_errorCopy item path\nSettings\u27e81\u27e9\nHelp\u27e82\u27e9\nSummarySource\u27e83\u27e9\nExpand description\n## \u00a7\u27e84\u27e9proc-macro-error\nThis crate aims to make error reporting in proc-macros simple and easy to use. Migrate from `panic!`-based errors for as little effort as possible!\n(Also, you can explicitly append a dummy token stream\u27e85\u27e9 to your errors).\nTo achieve his, this crate serves as a tiny shim around `proc_macro::Diagnostic` and `compile_error!`. It detects the best way of emitting available based on compiler\u2019s version. When the underlying diagnostic type is finally stabilized, this crate will simply be delegating to it requiring no changes in your code!\nSo you can just use this crate and have _both_ some of `proc_macro::Diagnostic` functionality available on stable ahead of time _and_ your error-reporting code future-proof.\n### \u00a7\u27e86\u27e9Cargo features\nThis crate provides _enabled by default_ `syn-error` feature that gates `impl From<syn::Error> for Diagnostic` conversion. If you don\u2019t use `syn` and want to cut off some of compilation time, you can disable it via\n```\n[dependencies]\nproc-macro-error = { version = \"1\", default-features = false }\n```\n\n* **Please note that disabling this feature makes sense only if you don\u2019t depend on`syn` directly or indirectly, and you very likely do.**\n### \u00a7\u27e87\u27e9Real world examples\n  * `structopt-derive`\u27e88\u27e9 (abort-like usage)\n  * `auto-impl`\u27e89\u27e9 (emit-like usage)\n\n\n### \u00a7\u27e810\u27e9Limitations\n  * Warnings are emitted only on nightly, they are ignored on stable.\n  * \u201chelp\u201d suggestions can\u2019t have their own span info on stable, (essentially inheriting the parent span).\n  * If a panic occurs somewhere in your macro no errors will be displayed. This is not a technical limitation but rather intentional design. `panic` is not for error reporting.\n\n\n#### \u00a7\u27e811\u27e9`#[proc_macro_error]` attribute\n**This attribute MUST be present on the top level of your macro** (the function annotated with any of `#[proc_macro]`, `#[proc_macro_derive]`, `#[proc_macro_attribute]`).\nThis attribute performs the setup and cleanup necessary to make things work.\nIn most cases you\u2019ll need the simple `#[proc_macro_error]` form without any additional settings. Feel free to skip the \u201cSyntax\u201d section\u27e812\u27e9.\n##### \u00a7\u27e813\u27e9Syntax\n`#[proc_macro_error]` or `#[proc_macro_error(settings...)]`, where `settings...` is a comma-separated list of:\n  * `proc_macro_hack`:\nIn order to correctly cooperate with `#[proc_macro_hack]`, `#[proc_macro_error]` attribute must be placed _before_ (above) it, like this:\n```\n#[proc_macro_error]\n#[proc_macro_hack]\n#[proc_macro]\nfn my_macro(input: TokenStream) -> TokenStream {\n  unimplemented!()\n}\n```\n\nIf, for some reason, you can\u2019t place it like that you can use `#[proc_macro_error(proc_macro_hack)]` instead.\n## \u00a7\u27e814\u27e9Note\nIf `proc-macro-hack` was detected (by any means) `allow_not_macro` and `assert_unwind_safe` will be applied automatically.\n  * `allow_not_macro`:\nBy default, the attribute checks that it\u2019s applied to a proc-macro. If none of `#[proc_macro]`, `#[proc_macro_derive]` nor `#[proc_macro_attribute]` are present it will panic. It\u2019s the intention - this crate is supposed to be used only with proc-macros.\nThis setting is made to bypass the check, useful in certain circumstances.\nPay attention: the function this attribute is applied to must return `proc_macro::TokenStream`.\nThis setting is implied if `proc-macro-hack` was detected.\n  * `assert_unwind_safe`:\nBy default, your code must be unwind safe\u27e815\u27e9. If your code is not unwind safe, but you believe it\u2019s correct, you can use this setting to bypass the check. You would need this for code that uses `lazy_static` or `thread_local` with `Cell/RefCell` inside (and the like).\nThis setting is implied if `#[proc_macro_error]` is applied to a function marked as `#[proc_macro]`, `#[proc_macro_derive]` or `#[proc_macro_attribute]`.\nThis setting is also implied if `proc-macro-hack` was detected.\n\n\n### \u00a7\u27e812\u27e9Macros\nMost of the time you want to use the macros. Syntax is described in the next section below.\nYou\u2019ll need to decide how you want to emit errors:\n  * Emit the error and abort. Very much panic-like usage. Served by `abort!`\u27e816\u27e9 and `abort_call_site!`\u27e817\u27e9.\n  * Emit the error but do not abort right away, looking for other errors to report. Served by `emit_error!`\u27e818\u27e9 and `emit_call_site_error!`\u27e819\u27e9.\n\n\nYou **can** mix these usages.\n`abort` and `emit_error` take a \u201csource span\u201d as the first argument. This source will be used to highlight the place the error originates from. It must be one of:\n  * _Something_ that implements `ToTokens`\u27e820\u27e9 (most types in `syn` and `proc-macro2` do). This source is the preferable one since it doesn\u2019t lose span information on multi-token spans, see this issue\u27e821\u27e9 for details.\n  * `proc_macro::Span`\u27e822\u27e9\n  * `proc-macro2::Span`\u27e823\u27e9\n\n\nThe rest is your message in format-like style.\nSee the next section\u27e824\u27e9 for detailed syntax.\n  * `abort!`\u27e816\u27e9:\nVery much panic-like usage - abort right away and show the error. Expands to `!`\u27e825\u27e9 (never type).\n  * `abort_call_site!`\u27e817\u27e9:\nShortcut for `abort!(Span::call_site(), ...)`. Expands to `!`\u27e825\u27e9 (never type).\n  * `emit_error!`\u27e818\u27e9:\n`proc_macro::Diagnostic`\u27e826\u27e9-like usage - emit the error but keep going, looking for other errors to report. The compilation will fail nonetheless. Expands to `()`\u27e827\u27e9 (unit type).\n  * `emit_call_site_error!`\u27e819\u27e9:\nShortcut for `emit_error!(Span::call_site(), ...)`. Expands to `()`\u27e827\u27e9 (unit type).\n  * `emit_warning!`\u27e828\u27e9:\nLike `emit_error!` but emit a warning instead of error. The compilation won\u2019t fail because of warnings. Expands to `()`\u27e827\u27e9 (unit type).\n**Beware** : warnings are nightly only, they are completely ignored on stable.\n  * `emit_call_site_warning!`\u27e829\u27e9:\nShortcut for `emit_warning!(Span::call_site(), ...)`. Expands to `()`\u27e827\u27e9 (unit type).\n  * `diagnostic`\u27e830\u27e9:\nBuild an instance of `Diagnostic` in format-like style.\n\n\n##### \u00a7\u27e824\u27e9Syntax\nAll the macros have pretty much the same syntax:\n  1. \u24d8\u27e831\u27e9```\nabort!(single_expr)\n```\n\nShortcut for `Diagnostic::from(expr).abort()`.\n  2. \u24d8\u27e831\u27e9```\nabort!(span, message)\n```\n\nThe first argument is an expression the span info should be taken from.\nThe second argument is the error message, it must implement `ToString`\u27e832\u27e9.\n  3. \u24d8\u27e831\u27e9```\nabort!(span, format_literal, format_args...)\n```\n\nThis form is pretty much the same as 2, except `format!(format_literal, format_args...)` will be used to for the message instead of `ToString`\u27e832\u27e9.\n\n\nThat\u2019s it. `abort!`, `emit_warning`, `emit_error` share this exact syntax.\n`abort_call_site!`, `emit_call_site_warning`, `emit_call_site_error` lack 1 form and do not take span in 2\u2019th and 3\u2019th forms. Those are essentially shortcuts for `macro!(Span::call_site(), args...)`.\n`diagnostic!` requires a `Level`\u27e833\u27e9 instance between `span` and second argument (1\u2019th form is the same).\n> **Important!**\n> If you have some type from `proc_macro` or `syn` to point to, do not call `.span()` on it but rather use it directly:\n> ```\nlet ty: syn::Type = syn::parse2(input).unwrap();\nabort!(ty, \"BOOM\");\n//   ^^ <-- avoid .span()\n```\n\n> `.span()` calls work too, but you may experience regressions in message quality.\n##### \u00a7\u27e834\u27e9Note attachments\n  1. Every macro can have \u201cnote\u201d attachments (only 2 and 3 form).\n\n\n\u24d8\u27e831\u27e9```\nlet opt_help = if have_some_info { Some(\"did you mean `this`?\") } else { None };\nabort!(\n  span, message; // <--- attachments start with `;` (semicolon)\n  help = \"format {} {}\", \"arg1\", \"arg2\"; // <--- every attachment ends with `;`,\n                      //   maybe except the last one\n  note = \"to_string\"; // <--- one arg uses `.to_string()` instead of `format!()`\n  yay = \"I see what {} did here\", \"you\"; // <--- \"help =\" and \"hint =\" are mapped\n                      // to Diagnostic::help,\n                      // anything else is Diagnostic::note\n  wow = note_span => \"custom span\"; // <--- attachments can have their own span\n                   //   it takes effect only on nightly though\n  hint =? opt_help; // <-- \"optional\" attachment, get displayed only if `Some`\n           //   must be single `Option` expression\n  note =? note_span => opt_help // <-- optional attachments can have custom spans too\n);\n```\n\n#### \u00a7\u27e835\u27e9Diagnostic type\n`Diagnostic`\u27e830\u27e9 type is intentionally designed to be API compatible with `proc_macro::Diagnostic`\u27e826\u27e9. Not all API is implemented, only the part that can be reasonably implemented on stable.\n## Re-exports\u00a7\u27e836\u27e9\n\n`pub use crate::dummy::append_dummy[](https://docs.rs/proc-macro-error/latest/proc_macro_error/dummy/fn.append_dummy.html \"fn proc_macro_error::dummy::append_dummy\");`\n\n\n`pub use crate::dummy::set_dummy[](https://docs.rs/proc-macro-error/latest/proc_macro_error/dummy/fn.set_dummy.html \"fn proc_macro_error::dummy::set_dummy\");`\n\n## Modules\u00a7\u27e837\u27e9\n\ndummy\u27e85\u27e9\n    Facility to emit dummy implementations (or whatever) in case an error happen.\n## Macros\u00a7\u27e838\u27e9\n\nabort\u27e816\u27e9\n    Abort proc-macro execution right now and display the error.\n\nabort_call_site\u27e817\u27e9\n    Shortcut for `abort!(Span::call_site(), msg...)`. This macro is still preferable over plain panic, panics are not for error reporting.\n\ndiagnostic\u27e839\u27e9\n    Build `Diagnostic`\u27e830\u27e9 instance from provided arguments.\n\nemit_call_site_error\u27e829\u27e9\n    Shortcut for `emit_error!(Span::call_site(), ...)`. This macro is still preferable over plain panic, panics are not for error reporting..\n\nemit_call_site_warning\u27e819\u27e9\n    Shortcut for `emit_warning!(Span::call_site(), ...)`.\n\nemit_error\u27e818\u27e9\n    Emit an error while not aborting the proc-macro right away.\n\nemit_warning\u27e828\u27e9\n    Emit a warning. Warnings are not errors and compilation won\u2019t fail because of them.\n## Structs\u00a7\u27e840\u27e9\n\nDiagnostic\u27e830\u27e9\n    Represents a single diagnostic message\n\nSpanRange\u27e841\u27e9\n\n## Enums\u00a7\u27e842\u27e9\n\nLevel\u27e833\u27e9\n    Represents a diagnostic level\n## Traits\u00a7\u27e843\u27e9\n\nDiagnosticExt\u27e844\u27e9\n    A collection of methods that do not exist in `proc_macro::Diagnostic` but still useful to have around.\n\nOptionExt\u27e845\u27e9\n    This traits expands `Option` with some handy shortcuts.\n\nResultExt\u27e846\u27e9\n    This traits expands `Result<T, Into<Diagnostic>>` with some handy shortcuts.\n## Functions\u00a7\u27e847\u27e9\n\nabort_if_dirty\u27e848\u27e9\n    Abort macro execution and display all the emitted errors, if any.\n## Attribute Macros\u00a7\u27e849\u27e9\n\nproc_macro_error\u27e850\u27e9\n\n",
              "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://docs.rs/proc-macro-error/latest/settings.html: Settings\n\u27e82\u27e9 https://docs.rs/proc-macro-error/latest/help.html: Help\n\u27e83\u27e9 https://docs.rs/proc-macro-error/latest/src/proc_macro_error/lib.rs.html#1-560: Source\n\u27e84\u27e9 https://docs.rs/proc-macro-error/latest/proc_macro_error/#proc-macro-error: \u00a7\n\u27e85\u27e9 https://docs.rs/proc-macro-error/latest/proc_macro_error/dummy/index.html: append a dummy token stream\n\u27e86\u27e9 https://docs.rs/proc-macro-error/latest/proc_macro_error/#cargo-features: \u00a7\n\u27e87\u27e9 https://docs.rs/proc-macro-error/latest/proc_macro_error/#real-world-examples: \u00a7\n\u27e88\u27e9 https://github.com/TeXitoi/structopt/tree/master/structopt-derive: `structopt-derive`\n\u27e89\u27e9 https://github.com/auto-impl-rs/auto_impl/: `auto-impl`\n\u27e810\u27e9 https://docs.rs/proc-macro-error/latest/proc_macro_error/#limitations: \u00a7\n\u27e811\u27e9 https://docs.rs/proc-macro-error/latest/proc_macro_error/#proc_macro_error-attribute: \u00a7\n\u27e812\u27e9 https://docs.rs/proc-macro-error/latest/proc_macro_error/#macros: skip the \u201cSyntax\u201d section\n\u27e813\u27e9 https://docs.rs/proc-macro-error/latest/proc_macro_error/#syntax: \u00a7\n\u27e814\u27e9 https://docs.rs/proc-macro-error/latest/proc_macro_error/#note: \u00a7\n\u27e815\u27e9 https://doc.rust-lang.org/std/panic/trait.UnwindSafe.html#what-is-unwind-safety: unwind safe\n\u27e816\u27e9 https://docs.rs/proc-macro-error/latest/proc_macro_error/macro.abort.html: `abort!`\n\u27e817\u27e9 https://docs.rs/proc-macro-error/latest/proc_macro_error/macro.abort_call_site.html: `abort_call_site!`\n\u27e818\u27e9 https://docs.rs/proc-macro-error/latest/proc_macro_error/macro.emit_error.html: `emit_error!`\n\u27e819\u27e9 https://docs.rs/proc-macro-error/latest/proc_macro_error/macro.emit_call_site_warning.html: `emit_call_site_error!`\n\u27e820\u27e9 https://docs.rs/quote/1.0.3/quote/trait.ToTokens.html: `ToTokens`\n\u27e821\u27e9 https://gitlab.com/CreepySkeleton/proc-macro-error/-/issues/6: this issue\n\u27e822\u27e9 https://doc.rust-lang.org/proc_macro/struct.Span.html: `proc_macro::Span`\n\u27e823\u27e9 https://docs.rs/proc-macro2/1.0.10/proc_macro2/struct.Span.html: `proc-macro2::Span`\n\u27e824\u27e9 https://docs.rs/proc-macro-error/latest/proc_macro_error/#syntax-1: the next section\n\u27e825\u27e9 https://doc.rust-lang.org/std/primitive.never.html: `!`\n\u27e826\u27e9 https://doc.rust-lang.org/proc_macro/struct.Diagnostic.html: `proc_macro::Diagnostic`\n\u27e827\u27e9 https://doc.rust-lang.org/std/primitive.unit.html: `()`\n\u27e828\u27e9 https://docs.rs/proc-macro-error/latest/proc_macro_error/macro.emit_warning.html: `emit_warning!`\n\u27e829\u27e9 https://docs.rs/proc-macro-error/latest/proc_macro_error/macro.emit_call_site_error.html: `emit_call_site_warning!`\n\u27e830\u27e9 https://docs.rs/proc-macro-error/latest/proc_macro_error/struct.Diagnostic.html: `diagnostic`\n\u27e831\u27e9 https://docs.rs/proc-macro-error/latest/proc_macro_error/: This example is not tested - \u24d8\n\u27e832\u27e9 https://doc.rust-lang.org/std/string/trait.ToString.html: `ToString`\n\u27e833\u27e9 https://docs.rs/proc-macro-error/latest/proc_macro_error/enum.Level.html: enum proc_macro_error::Level - `Level`\n\u27e834\u27e9 https://docs.rs/proc-macro-error/latest/proc_macro_error/#note-attachments: \u00a7\n\u27e835\u27e9 https://docs.rs/proc-macro-error/latest/proc_macro_error/#diagnostic-type: \u00a7\n\u27e836\u27e9 https://docs.rs/proc-macro-error/latest/proc_macro_error/#reexports: \u00a7\n\u27e837\u27e9 https://docs.rs/proc-macro-error/latest/proc_macro_error/#modules: \u00a7\n\u27e838\u27e9 https://docs.rs/proc-macro-error/latest/proc_macro_error/#macros-1: \u00a7\n\u27e839\u27e9 https://docs.rs/proc-macro-error/latest/proc_macro_error/macro.diagnostic.html: macro proc_macro_error::diagnostic - diagnostic\n\u27e840\u27e9 https://docs.rs/proc-macro-error/latest/proc_macro_error/#structs: \u00a7\n\u27e841\u27e9 https://docs.rs/proc-macro-error/latest/proc_macro_error/struct.SpanRange.html: struct proc_macro_error::SpanRange - SpanRange\n\u27e842\u27e9 https://docs.rs/proc-macro-error/latest/proc_macro_error/#enums: \u00a7\n\u27e843\u27e9 https://docs.rs/proc-macro-error/latest/proc_macro_error/#traits: \u00a7\n\u27e844\u27e9 https://docs.rs/proc-macro-error/latest/proc_macro_error/trait.DiagnosticExt.html: trait proc_macro_error::DiagnosticExt - DiagnosticExt\n\u27e845\u27e9 https://docs.rs/proc-macro-error/latest/proc_macro_error/trait.OptionExt.html: trait proc_macro_error::OptionExt - OptionExt\n\u27e846\u27e9 https://docs.rs/proc-macro-error/latest/proc_macro_error/trait.ResultExt.html: trait proc_macro_error::ResultExt - ResultExt\n\u27e847\u27e9 https://docs.rs/proc-macro-error/latest/proc_macro_error/#functions: \u00a7\n\u27e848\u27e9 https://docs.rs/proc-macro-error/latest/proc_macro_error/fn.abort_if_dirty.html: fn proc_macro_error::abort_if_dirty - abort_if_dirty\n\u27e849\u27e9 https://docs.rs/proc-macro-error/latest/proc_macro_error/#attributes: \u00a7\n\u27e850\u27e9 https://docs.rs/proc-macro-error/latest/proc_macro_error/attr.proc_macro_error.html: attr proc_macro_error::proc_macro_error - proc_macro_error\n",
              "fit_markdown": "",
              "fit_html": ""
            },
            "structured_data": {},
            "quality_score": 4.0,
            "extraction_method": "crawl4ai",
            "error": null,
            "metadata": {
              "doc_type": "docs",
              "content_length": 16326,
              "has_structured_data": false,
              "crawl_success": true
            },
            "timestamp": "117658.5821536"
          },
          "lib_rs": {
            "url": "https://lib.rs/crates/proc-macro-error",
            "title": "Untitled",
            "content": {
              "raw_markdown": "###  [34 releases](https://lib.rs/crates/proc-macro-error/versions) (5 stable)\n1.0.4 |  Jul 31, 2020   \n---|---  \n1.0.2 |  Apr 9, 2020   \n1.0.0 |  Mar 25, 2020   \n0.4.12 |  Mar 23, 2020   \n0.1.5 |  Jul 19, 2019   \n#**1020** in [Procedural macros](https://lib.rs/development-tools/procedural-macro-helpers \"Crates to help you write procedural macros in Rust.\n\")\nDownload history 1117163/week @ 2024-12-14 498457/week @ 2024-12-21 612629/week @ 2024-12-28 1113195/week @ 2025-01-04 1230853/week @ 2025-01-11 1139137/week @ 2025-01-18 1235524/week @ 2025-01-25 1302695/week @ 2025-02-01 1431336/week @ 2025-02-08 1273014/week @ 2025-02-15 1394081/week @ 2025-02-22 1704102/week @ 2025-03-01 1691938/week @ 2025-03-08 1898216/week @ 2025-03-15 2196116/week @ 2025-03-22 1393440/week @ 2025-03-29\n**7,487,972** downloads per month Used in [**12,557** crates (574 directly)](https://lib.rs/crates/proc-macro-error/rev)\n**MIT/Apache**\n60KB  776 lines\n# Makes error reporting in procedural macros nice and easy\n[![travis ci](https://img.gs/czjpqfbdkz/full/https://travis-ci.org/CreepySkeleton/proc-macro-error.svg?branch=master)](https://travis-ci.org/CreepySkeleton/proc-macro-error) [![docs.rs](https://img.gs/czjpqfbdkz/full/https://docs.rs/proc-macro-error/badge.svg)](https://docs.rs/proc-macro-error) [![unsafe forbidden](https://img.shields.io/badge/unsafe-forbidden-success.svg)](https://github.com/rust-secure-code/safety-dance/)\nThis crate aims to make error reporting in proc-macros simple and easy to use. Migrate from ``panic!``-based errors for as little effort as possible!\nAlso, you can explicitly [append a dummy token stream](https://docs.rs/proc-macro-error/1/proc_macro_error/dummy/index.html) to your errors.\nTo achieve his, this crate serves as a tiny shim around ```proc_macro`::``Diagnostic`` and ``compile_error!``. It detects the most preferable way to emit errors based on compiler's version. When the underlying diagnostic type is finally stabilized, this crate will be simply delegating to it, requiring no changes in your code!\nSo you can just use this crate and have _both_ some of ```proc_macro`::``Diagnostic`` functionality available on stable ahead of time and your error-reporting code future-proof.\n```\n```[``dependencies``]`\n`proc-macro-error ``=` ``\"`1.0`\"``\n``\n```\n\n_Supports rustc 1.31 and up_\n[Documentation and guide](https://docs.rs/proc-macro-error)\n## Quick example\nCode:\n```\n```#``[``proc_macro``]``\n``#``[``proc_macro_error``]``\n``pub` `fn` `make_fn`````(``input``:` TokenStream```)```` ``->` TokenStream` ````{`\n  `let` `mut` input `=` `TokenStream2`::``from`(`input`)``.``into_iter``(``)``;`\n  `let` name `=` input`.``next``(``)``.``unwrap``(``)``;`\n  `if` `let` `Some``(`second`)` `=` input`.``next``(``)` `{`\n    `abort!` `{` second`,`\n      ``\"`I don't like this part!`\"```;`\n        note `=` ``\"`I see what you did there...`\"```;`\n        help `=` ``\"`I need only one part, you know?`\"```;`\n    `}`\n  `}`\n  `quote!``(` `fn` `#``name``(``)` `{``}` `)``.``into``(``)`\n```}```\n`\n```\n\nThis is how the error is rendered in a terminal:\n![](https://img.gs/czjpqfbdkz/full/https://user-images.githubusercontent.com/50968528/78830016-d3b46a80-79d6-11ea-9de2-972e8d7904ef.png)\nAnd this is what your users will see in their IDE:\n![](https://img.gs/czjpqfbdkz/full/https://user-images.githubusercontent.com/50968528/78830547-a9af7800-79d7-11ea-822e-59e29bda335c.png)\n## Examples\n### Panic-like usage\n```\n``use` `proc_macro_error`::````{`\n  proc_macro_error`,`\n  abort`,`\n  abort_call_site`,`\n  ResultExt`,`\n  OptionExt`,`\n```}```;`\n`use` `proc_macro`::``TokenStream`;`\n`use` `syn`::````{`DeriveInput`,` parse_macro_input```}```;`\n`use` `quote`::``quote`;`\n``//` This is your main entry point`\n``#``[``proc_macro``]``\n``//` This attribute *MUST* be placed on top of the #[proc_macro] function`\n``#``[``proc_macro_error``]``\n``pub` `fn` `make_answer`````(``input``:` TokenStream```)```` ``->` TokenStream` ````{`\n  `let` input `=` `parse_macro_input!``(`input `as` DeriveInput`)``;`\n  `if` `let` `Err``(`err`)` `=` `some_logic``(``&`input`)` `{`\n    ``//` we've got a span to blame, let's use it`\n    ``//` This immediately aborts the proc-macro and shows the error`\n    ``//``\n    ``//` You can use `proc_macro::Span`, `proc_macro2::Span`, and`\n    ``//` anything that implements `quote::ToTokens` (almost every type from`\n    ``//` `syn` and `proc_macro2`)`\n    `abort!``(`err`,` ``\"`You made an error, go fix it: {}`\"```,` err`.`msg`)``;`\n  `}`\n  ``//` `Result` has some handy shortcuts if your error type implements`\n  ``//` `Into<Diagnostic>`. `Option` has one unconditionally.`\n  `more_logic``(``&`input`)``.``expect_or_abort``(```\"`What a careless user, behave!`\"```)``;`\n  `if` `!``more_logic_for_logic_god``(``&`input`)` `{`\n    ``//` We don't have an exact location this time,`\n    ``//` so just highlight the proc-macro invocation itself`\n    `abort_call_site!``(`\n      ``\"`Bad, bad user! Now go stand in the corner and think about what you did!`\"```)``;`\n  `}`\n  ``//` Now all the processing is done, return `proc_macro::TokenStream``\n  `quote!``(```/*` stuff `*/```)``.``into``(``)`\n```}```\n`\n```\n\n### ```proc_macro`::``Diagnostic``-like usage\n```\n``use` `proc_macro_error`::```*``;`\n`use` `proc_macro`::``TokenStream`;`\n`use` `syn`::````{``spanned`::``Spanned`,` DeriveInput`,` ItemStruct`,` Fields`,` Attribute `,` parse_macro_input```}```;`\n`use` `quote`::``quote`;`\n``fn` `process_attrs`````(``attrs``:` `&`[Attribute]```)```` ``->` ``Vec``<`Attribute`>``` ````{`\n  attrs\n    `.``iter``(``)`\n    `.``filter_map``(````|``````attr``|`` ```match` `process_attr``(`attr`)` `{`\n      `Ok``(`res`)` `=>` `Some``(`res`)``,`\n      `Err``(`msg`)` `=>` `{`\n        `emit_error!``(`attr`,` ``\"`Invalid attribute: {}`\"```,` msg`)``;`\n        `None`\n      `}`\n    `}```)`\n    `.``collect``(``)`\n```}```\n``fn` `process_fields`````(``_attrs``:` `&`Fields```)```` ``->` ``Vec``<`TokenStream`>``` ````{`\n  ``//` processing fields in pretty much the same way as attributes`\n  `unimplemented!``(``)`\n```}```\n``#``[``proc_macro``]``\n``#``[``proc_macro_error``]``\n``pub` `fn` `make_answer`````(``input``:` TokenStream```)```` ``->` TokenStream` ````{`\n  `let` input `=` `parse_macro_input!``(`input `as` ItemStruct`)``;`\n  `let` attrs `=` `process_attrs``(``&`input`.`attrs`)``;`\n  ``//` abort right now if some errors were encountered`\n  ``//` at the attributes processing stage`\n  `abort_if_dirty``(``)``;`\n  `let` fields `=` `process_fields``(``&`input`.`fields`)``;`\n  ``//` no need to think about emitted errors`\n  ``//` #[proc_macro_error] will handle them for you`\n  ``//``\n  ``//` just return a TokenStream as you normally would`\n  `quote!``(```/*` stuff `*/```)``.``into``(``)`\n```}```\n`\n```\n\n## Real world examples\n  * [``structopt-derive``](https://github.com/TeXitoi/structopt/tree/master/structopt-derive) (abort-like usage)\n  * [``auto-impl``](https://github.com/auto-impl-rs/auto_impl/) (emit-like usage)\n\n\n## Limitations\n  * Warnings are emitted only on nightly, they are ignored on stable.\n  * \"help\" suggestions can't have their own span info on stable, (essentially inheriting the parent span).\n  * If your macro happens to trigger a panic, no errors will be displayed. This is not a technical limitation but rather intentional design. ``panic`` is not for error reporting.\n\n\n## MSRV policy\n``proc_macro_error`` will always be compatible with proc-macro Holy Trinity: ``proc_macro2``, ``syn``, ``quote`` crates. In other words, if the Trinity is available to you - ``proc_macro_error`` is available too.\n> **Important!**\n> If you want to use ````#``[``proc_macro_error``]```` with ``synstructure``, you're going to have to put the attribute inside the ``decl_derive!`` invocation. Unfortunately, due to some bug in pre-1.34 rustc, putting proc-macro attributes inside macro invocations doesn't work, so your MSRV is effectively 1.34.\n## Motivation\nError handling in proc-macros sucks. There's not much of a choice today: you either \"bubble up\" the error up to the top-level of the macro and convert it to a [``compile_error!``](https://doc.rust-lang.org/std/macro.compile_error.html) invocation or just use a good old panic. Both these ways suck:\n  * Former sucks because it's quite redundant to unroll a proper error handling just for critical errors that will crash the macro anyway; so people mostly choose not to bother with it at all and use panic. Simple ```.`expect`` is too tempting.\nAlso, if you do decide to implement this ```Result```-based architecture in your macro you're going to have to rewrite it entirely once [```proc_macro`::``Diagnostic``](https://doc.rust-lang.org/proc_macro/struct.Diagnostic.html) is finally stable. Not cool.\n  * Later sucks because there's no way to carry out the span info via ``panic!``. ``rustc`` will highlight the invocation itself but not some specific token inside it.\nFurthermore, panics aren't for error-reporting at all; panics are for bug-detecting (like unwrapping on ```None``` or out-of-range indexing) or for early development stages when you need a prototype ASAP so error handling can wait. Mixing these usages only messes things up.\n  * There is [```proc_macro`::``Diagnostic``](https://doc.rust-lang.org/proc_macro/struct.Diagnostic.html) which is awesome but it has been experimental for more than a year and is unlikely to be stabilized any time soon.\nThis crate's API is intentionally designed to be compatible with ```proc_macro`::``Diagnostic`` and delegates to it whenever possible. Once ``Diagnostics`` is stable this crate will **always** delegate to it, no code changes will be required on user side.\n\n\nThat said, we need a solution, but this solution must meet these conditions:\n  * It must be better than ``panic!``. The main point: it must offer a way to carry the span information over to user.\n  * It must take as little effort as possible to migrate from ``panic!``. Ideally, a new macro with similar semantics plus ability to carry out span info.\n  * It must maintain compatibility with [```proc_macro`::``Diagnostic``](https://doc.rust-lang.org/proc_macro/struct.Diagnostic.html) .\n  * **It must be usable on stable**.\n\n\nThis crate aims to provide such a mechanism. All you have to do is annotate your top-level ````#``[``proc_macro``]```` function with ````#``[``proc_macro_error``]```` attribute and change panics to [``abort!``](https://docs.rs/proc-macro-error/1/proc_macro_error/macro.abort.html)/[``abort_call_site!``](https://docs.rs/proc-macro-error/1/proc_macro_error/macro.abort_call_site.html) where appropriate, see [the Guide](https://docs.rs/proc-macro-error).\n## Disclaimer\nPlease note that **this crate is not intended to be used in any way other than error reporting in procedural macros** , use ```Result``` and ```?``` (possibly along with one of the many helpers out there) for anything else.\n#### License\nLicensed under either of [Apache License, Version 2.0](https://gitlab.com/creepyskeleton/proc-macro-error/blob/HEAD/LICENSE-APACHE) or [MIT license](https://gitlab.com/creepyskeleton/proc-macro-error/blob/HEAD/LICENSE-MIT) at your option.  Unless you explicitly state otherwise, any contribution intentionally submitted for inclusion in this crate by you, as defined in the Apache-2.0 license, shall be dual licensed as above, without any additional terms or conditions. \n#### Dependencies\n~14\u2013445KB  ~10K SLoC\n  * [proc-macro-error-attr](https://lib.rs/crates/proc-macro-error-attr \"=1.0.4\")\n  * [proc-macro2](https://lib.rs/crates/proc-macro2 \"1\")\n  * [quote](https://lib.rs/crates/quote \"1\")\n  * [syn-error](https://lib.rs/crates/proc-macro-error/features#feature-syn-error \"default feature\") [syn](https://lib.rs/crates/syn \"obsolete\") 1.0\n\n\n  * build `build.rs`\n  * build  [version_check](https://lib.rs/crates/version_check \"0.9\")\n  * dev  [serde_derive](https://lib.rs/crates/serde_derive \"obsolete\") =1.0.107\n  * dev  [toml](https://lib.rs/crates/toml \"obsolete\") =0.5.2\n  * dev  [trybuild](https://lib.rs/crates/trybuild \"1.0.19\")[+diff](https://lib.rs/crates/trybuild/features#feature-diff)\n\n\n  *[SLoC]: approx. additional lines of code\n",
              "markdown_with_citations": "###  34 releases\u27e81\u27e9 (5 stable)\n1.0.4 |  Jul 31, 2020   \n---|---  \n1.0.2 |  Apr 9, 2020   \n1.0.0 |  Mar 25, 2020   \n0.4.12 |  Mar 23, 2020   \n0.1.5 |  Jul 19, 2019   \n#**1020** in Procedural macros\u27e82\u27e9\nDownload history 1117163/week @ 2024-12-14 498457/week @ 2024-12-21 612629/week @ 2024-12-28 1113195/week @ 2025-01-04 1230853/week @ 2025-01-11 1139137/week @ 2025-01-18 1235524/week @ 2025-01-25 1302695/week @ 2025-02-01 1431336/week @ 2025-02-08 1273014/week @ 2025-02-15 1394081/week @ 2025-02-22 1704102/week @ 2025-03-01 1691938/week @ 2025-03-08 1898216/week @ 2025-03-15 2196116/week @ 2025-03-22 1393440/week @ 2025-03-29\n**7,487,972** downloads per month Used in **12,557** crates (574 directly)\u27e83\u27e9\n**MIT/Apache**\n60KB  776 lines\n# Makes error reporting in procedural macros nice and easy\n![travis ci\u27e84\u27e9](https://travis-ci.org/CreepySkeleton/proc-macro-error) ![docs.rs\u27e85\u27e9](https://docs.rs/proc-macro-error) ![unsafe forbidden\u27e86\u27e9](https://github.com/rust-secure-code/safety-dance/)\nThis crate aims to make error reporting in proc-macros simple and easy to use. Migrate from ``panic!``-based errors for as little effort as possible!\nAlso, you can explicitly append a dummy token stream\u27e87\u27e9 to your errors.\nTo achieve his, this crate serves as a tiny shim around ```proc_macro`::``Diagnostic`` and ``compile_error!``. It detects the most preferable way to emit errors based on compiler's version. When the underlying diagnostic type is finally stabilized, this crate will be simply delegating to it, requiring no changes in your code!\nSo you can just use this crate and have _both_ some of ```proc_macro`::``Diagnostic`` functionality available on stable ahead of time and your error-reporting code future-proof.\n```\n```[``dependencies``]`\n`proc-macro-error ``=` ``\"`1.0`\"``\n``\n```\n\n_Supports rustc 1.31 and up_\nDocumentation and guide\u27e88\u27e9\n## Quick example\nCode:\n```\n```#``[``proc_macro``]``\n``#``[``proc_macro_error``]``\n``pub` `fn` `make_fn`````(``input``:` TokenStream```)```` ``->` TokenStream` ````{`\n  `let` `mut` input `=` `TokenStream2`::``from`(`input`)``.``into_iter``(``)``;`\n  `let` name `=` input`.``next``(``)``.``unwrap``(``)``;`\n  `if` `let` `Some``(`second`)` `=` input`.``next``(``)` `{`\n    `abort!` `{` second`,`\n      ``\"`I don't like this part!`\"```;`\n        note `=` ``\"`I see what you did there...`\"```;`\n        help `=` ``\"`I need only one part, you know?`\"```;`\n    `}`\n  `}`\n  `quote!``(` `fn` `#``name``(``)` `{``}` `)``.``into``(``)`\n```}```\n`\n```\n\nThis is how the error is rendered in a terminal:\n![](https://img.gs/czjpqfbdkz/full/https://user-images.githubusercontent.com/50968528/78830016-d3b46a80-79d6-11ea-9de2-972e8d7904ef.png)\nAnd this is what your users will see in their IDE:\n![](https://img.gs/czjpqfbdkz/full/https://user-images.githubusercontent.com/50968528/78830547-a9af7800-79d7-11ea-822e-59e29bda335c.png)\n## Examples\n### Panic-like usage\n```\n``use` `proc_macro_error`::````{`\n  proc_macro_error`,`\n  abort`,`\n  abort_call_site`,`\n  ResultExt`,`\n  OptionExt`,`\n```}```;`\n`use` `proc_macro`::``TokenStream`;`\n`use` `syn`::````{`DeriveInput`,` parse_macro_input```}```;`\n`use` `quote`::``quote`;`\n``//` This is your main entry point`\n``#``[``proc_macro``]``\n``//` This attribute *MUST* be placed on top of the #[proc_macro] function`\n``#``[``proc_macro_error``]``\n``pub` `fn` `make_answer`````(``input``:` TokenStream```)```` ``->` TokenStream` ````{`\n  `let` input `=` `parse_macro_input!``(`input `as` DeriveInput`)``;`\n  `if` `let` `Err``(`err`)` `=` `some_logic``(``&`input`)` `{`\n    ``//` we've got a span to blame, let's use it`\n    ``//` This immediately aborts the proc-macro and shows the error`\n    ``//``\n    ``//` You can use `proc_macro::Span`, `proc_macro2::Span`, and`\n    ``//` anything that implements `quote::ToTokens` (almost every type from`\n    ``//` `syn` and `proc_macro2`)`\n    `abort!``(`err`,` ``\"`You made an error, go fix it: {}`\"```,` err`.`msg`)``;`\n  `}`\n  ``//` `Result` has some handy shortcuts if your error type implements`\n  ``//` `Into<Diagnostic>`. `Option` has one unconditionally.`\n  `more_logic``(``&`input`)``.``expect_or_abort``(```\"`What a careless user, behave!`\"```)``;`\n  `if` `!``more_logic_for_logic_god``(``&`input`)` `{`\n    ``//` We don't have an exact location this time,`\n    ``//` so just highlight the proc-macro invocation itself`\n    `abort_call_site!``(`\n      ``\"`Bad, bad user! Now go stand in the corner and think about what you did!`\"```)``;`\n  `}`\n  ``//` Now all the processing is done, return `proc_macro::TokenStream``\n  `quote!``(```/*` stuff `*/```)``.``into``(``)`\n```}```\n`\n```\n\n### ```proc_macro`::``Diagnostic``-like usage\n```\n``use` `proc_macro_error`::```*``;`\n`use` `proc_macro`::``TokenStream`;`\n`use` `syn`::````{``spanned`::``Spanned`,` DeriveInput`,` ItemStruct`,` Fields`,` Attribute `,` parse_macro_input```}```;`\n`use` `quote`::``quote`;`\n``fn` `process_attrs`````(``attrs``:` `&`[Attribute]```)```` ``->` ``Vec``<`Attribute`>``` ````{`\n  attrs\n    `.``iter``(``)`\n    `.``filter_map``(````|``````attr``|`` ```match` `process_attr``(`attr`)` `{`\n      `Ok``(`res`)` `=>` `Some``(`res`)``,`\n      `Err``(`msg`)` `=>` `{`\n        `emit_error!``(`attr`,` ``\"`Invalid attribute: {}`\"```,` msg`)``;`\n        `None`\n      `}`\n    `}```)`\n    `.``collect``(``)`\n```}```\n``fn` `process_fields`````(``_attrs``:` `&`Fields```)```` ``->` ``Vec``<`TokenStream`>``` ````{`\n  ``//` processing fields in pretty much the same way as attributes`\n  `unimplemented!``(``)`\n```}```\n``#``[``proc_macro``]``\n``#``[``proc_macro_error``]``\n``pub` `fn` `make_answer`````(``input``:` TokenStream```)```` ``->` TokenStream` ````{`\n  `let` input `=` `parse_macro_input!``(`input `as` ItemStruct`)``;`\n  `let` attrs `=` `process_attrs``(``&`input`.`attrs`)``;`\n  ``//` abort right now if some errors were encountered`\n  ``//` at the attributes processing stage`\n  `abort_if_dirty``(``)``;`\n  `let` fields `=` `process_fields``(``&`input`.`fields`)``;`\n  ``//` no need to think about emitted errors`\n  ``//` #[proc_macro_error] will handle them for you`\n  ``//``\n  ``//` just return a TokenStream as you normally would`\n  `quote!``(```/*` stuff `*/```)``.``into``(``)`\n```}```\n`\n```\n\n## Real world examples\n  * ``structopt-derive``\u27e89\u27e9 (abort-like usage)\n  * ``auto-impl``\u27e810\u27e9 (emit-like usage)\n\n\n## Limitations\n  * Warnings are emitted only on nightly, they are ignored on stable.\n  * \"help\" suggestions can't have their own span info on stable, (essentially inheriting the parent span).\n  * If your macro happens to trigger a panic, no errors will be displayed. This is not a technical limitation but rather intentional design. ``panic`` is not for error reporting.\n\n\n## MSRV policy\n``proc_macro_error`` will always be compatible with proc-macro Holy Trinity: ``proc_macro2``, ``syn``, ``quote`` crates. In other words, if the Trinity is available to you - ``proc_macro_error`` is available too.\n> **Important!**\n> If you want to use ````#``[``proc_macro_error``]```` with ``synstructure``, you're going to have to put the attribute inside the ``decl_derive!`` invocation. Unfortunately, due to some bug in pre-1.34 rustc, putting proc-macro attributes inside macro invocations doesn't work, so your MSRV is effectively 1.34.\n## Motivation\nError handling in proc-macros sucks. There's not much of a choice today: you either \"bubble up\" the error up to the top-level of the macro and convert it to a ``compile_error!``\u27e811\u27e9 invocation or just use a good old panic. Both these ways suck:\n  * Former sucks because it's quite redundant to unroll a proper error handling just for critical errors that will crash the macro anyway; so people mostly choose not to bother with it at all and use panic. Simple ```.`expect`` is too tempting.\nAlso, if you do decide to implement this ```Result```-based architecture in your macro you're going to have to rewrite it entirely once ```proc_macro`::``Diagnostic``\u27e812\u27e9 is finally stable. Not cool.\n  * Later sucks because there's no way to carry out the span info via ``panic!``. ``rustc`` will highlight the invocation itself but not some specific token inside it.\nFurthermore, panics aren't for error-reporting at all; panics are for bug-detecting (like unwrapping on ```None``` or out-of-range indexing) or for early development stages when you need a prototype ASAP so error handling can wait. Mixing these usages only messes things up.\n  * There is ```proc_macro`::``Diagnostic``\u27e812\u27e9 which is awesome but it has been experimental for more than a year and is unlikely to be stabilized any time soon.\nThis crate's API is intentionally designed to be compatible with ```proc_macro`::``Diagnostic`` and delegates to it whenever possible. Once ``Diagnostics`` is stable this crate will **always** delegate to it, no code changes will be required on user side.\n\n\nThat said, we need a solution, but this solution must meet these conditions:\n  * It must be better than ``panic!``. The main point: it must offer a way to carry the span information over to user.\n  * It must take as little effort as possible to migrate from ``panic!``. Ideally, a new macro with similar semantics plus ability to carry out span info.\n  * It must maintain compatibility with ```proc_macro`::``Diagnostic``\u27e812\u27e9 .\n  * **It must be usable on stable**.\n\n\nThis crate aims to provide such a mechanism. All you have to do is annotate your top-level ````#``[``proc_macro``]```` function with ````#``[``proc_macro_error``]```` attribute and change panics to ``abort!``\u27e813\u27e9/``abort_call_site!``\u27e814\u27e9 where appropriate, see the Guide\u27e88\u27e9.\n## Disclaimer\nPlease note that **this crate is not intended to be used in any way other than error reporting in procedural macros** , use ```Result``` and ```?``` (possibly along with one of the many helpers out there) for anything else.\n#### License\nLicensed under either of Apache License, Version 2.0\u27e815\u27e9 or MIT license\u27e816\u27e9 at your option.  Unless you explicitly state otherwise, any contribution intentionally submitted for inclusion in this crate by you, as defined in the Apache-2.0 license, shall be dual licensed as above, without any additional terms or conditions. \n#### Dependencies\n~14\u2013445KB  ~10K SLoC\n  * proc-macro-error-attr\u27e817\u27e9\n  * proc-macro2\u27e818\u27e9\n  * quote\u27e819\u27e9\n  * syn-error\u27e820\u27e9 syn\u27e821\u27e9 1.0\n\n\n  * build `build.rs`\n  * build  version_check\u27e822\u27e9\n  * dev  serde_derive\u27e823\u27e9 =1.0.107\n  * dev  toml\u27e824\u27e9 =0.5.2\n  * dev  trybuild\u27e825\u27e9+diff\u27e826\u27e9\n\n\n  *[SLoC]: approx. additional lines of code\n",
              "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://lib.rs/crates/proc-macro-error/versions: 34 releases\n\u27e82\u27e9 https://lib.rs/development-tools/procedural-macro-helpers: Crates to help you write procedural macros in Rust.\n - Procedural macros\n\u27e83\u27e9 https://lib.rs/crates/proc-macro-error/rev: **12,557** crates (574 directly)\n\u27e84\u27e9 https://img.gs/czjpqfbdkz/full/https://travis-ci.org/CreepySkeleton/proc-macro-error.svg?branch=master: ![travis ci\n\u27e85\u27e9 https://img.gs/czjpqfbdkz/full/https://docs.rs/proc-macro-error/badge.svg: ![docs.rs\n\u27e86\u27e9 https://img.shields.io/badge/unsafe-forbidden-success.svg: ![unsafe forbidden\n\u27e87\u27e9 https://docs.rs/proc-macro-error/1/proc_macro_error/dummy/index.html: append a dummy token stream\n\u27e88\u27e9 https://docs.rs/proc-macro-error: Documentation and guide\n\u27e89\u27e9 https://github.com/TeXitoi/structopt/tree/master/structopt-derive: ``structopt-derive``\n\u27e810\u27e9 https://github.com/auto-impl-rs/auto_impl/: ``auto-impl``\n\u27e811\u27e9 https://doc.rust-lang.org/std/macro.compile_error.html: ``compile_error!``\n\u27e812\u27e9 https://doc.rust-lang.org/proc_macro/struct.Diagnostic.html: ```proc_macro`::``Diagnostic``\n\u27e813\u27e9 https://docs.rs/proc-macro-error/1/proc_macro_error/macro.abort.html: ``abort!``\n\u27e814\u27e9 https://docs.rs/proc-macro-error/1/proc_macro_error/macro.abort_call_site.html: ``abort_call_site!``\n\u27e815\u27e9 https://gitlab.com/creepyskeleton/proc-macro-error/blob/HEAD/LICENSE-APACHE: Apache License, Version 2.0\n\u27e816\u27e9 https://gitlab.com/creepyskeleton/proc-macro-error/blob/HEAD/LICENSE-MIT: MIT license\n\u27e817\u27e9 https://lib.rs/crates/proc-macro-error-attr: =1.0.4 - proc-macro-error-attr\n\u27e818\u27e9 https://lib.rs/crates/proc-macro2: 1 - proc-macro2\n\u27e819\u27e9 https://lib.rs/crates/quote: 1 - quote\n\u27e820\u27e9 https://lib.rs/crates/proc-macro-error/features#feature-syn-error: default feature - syn-error\n\u27e821\u27e9 https://lib.rs/crates/syn: obsolete - syn\n\u27e822\u27e9 https://lib.rs/crates/version_check: 0.9 - version_check\n\u27e823\u27e9 https://lib.rs/crates/serde_derive: obsolete - serde_derive\n\u27e824\u27e9 https://lib.rs/crates/toml: obsolete - toml\n\u27e825\u27e9 https://lib.rs/crates/trybuild: 1.0.19 - trybuild\n\u27e826\u27e9 https://lib.rs/crates/trybuild/features#feature-diff: +diff\n",
              "fit_markdown": "",
              "fit_html": ""
            },
            "structured_data": {},
            "quality_score": 3.0,
            "extraction_method": "crawl4ai",
            "error": null,
            "metadata": {
              "doc_type": "docs",
              "content_length": 12100,
              "has_structured_data": false,
              "crawl_success": true
            },
            "timestamp": "117659.0379463"
          }
        },
        "crate_analysis": {
          "status": "completed",
          "check": [
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#unicode-ident@1.0.18",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\unicode-ident-1.0.18\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "unicode_ident",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\unicode-ident-1.0.18\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmppv41qy4k\\proc-macro-error-1.0.4\\target\\debug\\deps\\libunicode_ident-0ff2238d530c1ee1.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#unicode-ident@1.0.18",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\unicode-ident-1.0.18\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "unicode_ident",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\unicode-ident-1.0.18\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmppv41qy4k\\proc-macro-error-1.0.4\\target\\debug\\deps\\libunicode_ident-f7db65657b8daa2b.rlib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmppv41qy4k\\proc-macro-error-1.0.4\\target\\debug\\deps\\libunicode_ident-f7db65657b8daa2b.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#version_check@0.9.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.9.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "version_check",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.9.5\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmppv41qy4k\\proc-macro-error-1.0.4\\target\\debug\\deps\\libversion_check-8a7cb6ed787a6dad.rlib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmppv41qy4k\\proc-macro-error-1.0.4\\target\\debug\\deps\\libversion_check-8a7cb6ed787a6dad.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#proc-macro2@1.0.95",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\proc-macro2-1.0.95\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\proc-macro2-1.0.95\\build.rs",
                "edition": "2021",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "proc-macro"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmppv41qy4k\\proc-macro-error-1.0.4\\target\\debug\\build\\proc-macro2-ff1a34852a360a33\\build-script-build.exe",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmppv41qy4k\\proc-macro-error-1.0.4\\target\\debug\\build\\proc-macro2-ff1a34852a360a33\\build_script_build.pdb"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#syn@1.0.109",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\syn-1.0.109\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\syn-1.0.109\\build.rs",
                "edition": "2018",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "clone-impls",
                "default",
                "derive",
                "parsing",
                "printing",
                "proc-macro",
                "quote",
                "visit"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmppv41qy4k\\proc-macro-error-1.0.4\\target\\debug\\build\\syn-e1ad847596093d8d\\build-script-build.exe",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmppv41qy4k\\proc-macro-error-1.0.4\\target\\debug\\build\\syn-e1ad847596093d8d\\build_script_build.pdb"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "build-script-executed",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#syn@1.0.109",
              "linked_libs": [],
              "linked_paths": [],
              "cfgs": [
                "syn_disable_nightly_tests"
              ],
              "env": [],
              "out_dir": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmppv41qy4k\\proc-macro-error-1.0.4\\target\\debug\\build\\syn-e5c3ecda09ccb8bf\\out"
            },
            {
              "reason": "build-script-executed",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#proc-macro2@1.0.95",
              "linked_libs": [],
              "linked_paths": [],
              "cfgs": [
                "wrap_proc_macro"
              ],
              "env": [],
              "out_dir": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmppv41qy4k\\proc-macro-error-1.0.4\\target\\debug\\build\\proc-macro2-c291383498d6111e\\out"
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#proc-macro-error-attr@1.0.4",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\proc-macro-error-attr-1.0.4\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\proc-macro-error-attr-1.0.4\\build.rs",
                "edition": "2018",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmppv41qy4k\\proc-macro-error-1.0.4\\target\\debug\\build\\proc-macro-error-attr-fae62112b7144294\\build-script-build.exe",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmppv41qy4k\\proc-macro-error-1.0.4\\target\\debug\\build\\proc-macro-error-attr-fae62112b7144294\\build_script_build.pdb"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmppv41qy4k/proc-macro-error-1.0.4#proc-macro-error@1.0.4",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmppv41qy4k\\proc-macro-error-1.0.4\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmppv41qy4k\\proc-macro-error-1.0.4\\build.rs",
                "edition": "2018",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "syn",
                "syn-error"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmppv41qy4k\\proc-macro-error-1.0.4\\target\\debug\\build\\proc-macro-error-4c737cb05f5e97d7\\build-script-build.exe",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmppv41qy4k\\proc-macro-error-1.0.4\\target\\debug\\build\\proc-macro-error-4c737cb05f5e97d7\\build_script_build.pdb"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "build-script-executed",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#proc-macro-error-attr@1.0.4",
              "linked_libs": [],
              "linked_paths": [],
              "cfgs": [],
              "env": [],
              "out_dir": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmppv41qy4k\\proc-macro-error-1.0.4\\target\\debug\\build\\proc-macro-error-attr-4fa80d5734264161\\out"
            },
            {
              "reason": "build-script-executed",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmppv41qy4k/proc-macro-error-1.0.4#proc-macro-error@1.0.4",
              "linked_libs": [],
              "linked_paths": [],
              "cfgs": [
                "use_fallback"
              ],
              "env": [],
              "out_dir": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmppv41qy4k\\proc-macro-error-1.0.4\\target\\debug\\build\\proc-macro-error-8eb7b8254823ca29\\out"
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#proc-macro2@1.0.95",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\proc-macro2-1.0.95\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "proc_macro2",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\proc-macro2-1.0.95\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "proc-macro"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmppv41qy4k\\proc-macro-error-1.0.4\\target\\debug\\deps\\libproc_macro2-4ab91139fc2ba9db.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#quote@1.0.40",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\quote-1.0.40\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "quote",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\quote-1.0.40\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "proc-macro"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmppv41qy4k\\proc-macro-error-1.0.4\\target\\debug\\deps\\libquote-2cf06bdb5319f834.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#proc-macro2@1.0.95",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\proc-macro2-1.0.95\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "proc_macro2",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\proc-macro2-1.0.95\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "proc-macro"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmppv41qy4k\\proc-macro-error-1.0.4\\target\\debug\\deps\\libproc_macro2-5fa31185a70010c1.rlib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmppv41qy4k\\proc-macro-error-1.0.4\\target\\debug\\deps\\libproc_macro2-5fa31185a70010c1.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#quote@1.0.40",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\quote-1.0.40\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "quote",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\quote-1.0.40\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "proc-macro"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmppv41qy4k\\proc-macro-error-1.0.4\\target\\debug\\deps\\libquote-2ad5b58bdd25544c.rlib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmppv41qy4k\\proc-macro-error-1.0.4\\target\\debug\\deps\\libquote-2ad5b58bdd25544c.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#proc-macro-error-attr@1.0.4",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\proc-macro-error-attr-1.0.4\\Cargo.toml",
              "target": {
                "kind": [
                  "proc-macro"
                ],
                "crate_types": [
                  "proc-macro"
                ],
                "name": "proc_macro_error_attr",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\proc-macro-error-attr-1.0.4\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmppv41qy4k\\proc-macro-error-1.0.4\\target\\debug\\deps\\proc_macro_error_attr-be0b8438488bbca5.dll",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmppv41qy4k\\proc-macro-error-1.0.4\\target\\debug\\deps\\proc_macro_error_attr-be0b8438488bbca5.dll.lib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmppv41qy4k\\proc-macro-error-1.0.4\\target\\debug\\deps\\proc_macro_error_attr-be0b8438488bbca5.dll.exp",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmppv41qy4k\\proc-macro-error-1.0.4\\target\\debug\\deps\\proc_macro_error_attr-be0b8438488bbca5.pdb"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#syn@1.0.109",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\syn-1.0.109\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "syn",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\syn-1.0.109\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "clone-impls",
                "default",
                "derive",
                "parsing",
                "printing",
                "proc-macro",
                "quote",
                "visit"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmppv41qy4k\\proc-macro-error-1.0.4\\target\\debug\\deps\\libsyn-4bb38e08e9e942b2.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmppv41qy4k/proc-macro-error-1.0.4#proc-macro-error@1.0.4",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmppv41qy4k\\proc-macro-error-1.0.4\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "proc_macro_error",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmppv41qy4k\\proc-macro-error-1.0.4\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: unexpected `cfg` condition name: `use_fallback`\n   --> src\\lib.rs:274:17\n    |\n274 | #![cfg_attr(not(use_fallback), feature(proc_macro_diagnostic))]\n    |                 ^^^^^^^^^^^^\n    |\n    = help: expected names are: `docsrs`, `feature`, and `test` and 31 more\n    = help: consider using a Cargo feature instead\n    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n             [lints.rust]\n             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(use_fallback)'] }\n    = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(use_fallback)\");` to the top of the `build.rs`\n    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n    = note: `#[warn(unexpected_cfgs)]` on by default\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "expected names are: `docsrs`, `feature`, and `test` and 31 more",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider using a Cargo feature instead",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(use_fallback)'] }",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "or consider adding `println!(\"cargo::rustc-check-cfg=cfg(use_fallback)\");` to the top of the `build.rs`",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "`#[warn(unexpected_cfgs)]` on by default",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "unexpected_cfgs",
                  "explanation": null
                },
                "level": "warning",
                "message": "unexpected `cfg` condition name: `use_fallback`",
                "spans": [
                  {
                    "byte_end": 10952,
                    "byte_start": 10940,
                    "column_end": 29,
                    "column_start": 17,
                    "expansion": null,
                    "file_name": "src\\lib.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 274,
                    "line_start": 274,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 29,
                        "highlight_start": 17,
                        "text": "#![cfg_attr(not(use_fallback), feature(proc_macro_diagnostic))]"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmppv41qy4k/proc-macro-error-1.0.4#proc-macro-error@1.0.4",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmppv41qy4k\\proc-macro-error-1.0.4\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "proc_macro_error",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmppv41qy4k\\proc-macro-error-1.0.4\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: unexpected `cfg` condition name: `use_fallback`\n   --> src\\lib.rs:298:7\n    |\n298 | #[cfg(use_fallback)]\n    |       ^^^^^^^^^^^^\n    |\n    = help: consider using a Cargo feature instead\n    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n             [lints.rust]\n             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(use_fallback)'] }\n    = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(use_fallback)\");` to the top of the `build.rs`\n    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider using a Cargo feature instead",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(use_fallback)'] }",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "or consider adding `println!(\"cargo::rustc-check-cfg=cfg(use_fallback)\");` to the top of the `build.rs`",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "unexpected_cfgs",
                  "explanation": null
                },
                "level": "warning",
                "message": "unexpected `cfg` condition name: `use_fallback`",
                "spans": [
                  {
                    "byte_end": 11450,
                    "byte_start": 11438,
                    "column_end": 19,
                    "column_start": 7,
                    "expansion": null,
                    "file_name": "src\\lib.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 298,
                    "line_start": 298,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 19,
                        "highlight_start": 7,
                        "text": "#[cfg(use_fallback)]"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmppv41qy4k/proc-macro-error-1.0.4#proc-macro-error@1.0.4",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmppv41qy4k\\proc-macro-error-1.0.4\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "proc_macro_error",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmppv41qy4k\\proc-macro-error-1.0.4\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: unexpected `cfg` condition name: `use_fallback`\n   --> src\\lib.rs:302:11\n    |\n302 | #[cfg(not(use_fallback))]\n    |           ^^^^^^^^^^^^\n    |\n    = help: consider using a Cargo feature instead\n    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n             [lints.rust]\n             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(use_fallback)'] }\n    = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(use_fallback)\");` to the top of the `build.rs`\n    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider using a Cargo feature instead",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(use_fallback)'] }",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "or consider adding `println!(\"cargo::rustc-check-cfg=cfg(use_fallback)\");` to the top of the `build.rs`",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "unexpected_cfgs",
                  "explanation": null
                },
                "level": "warning",
                "message": "unexpected `cfg` condition name: `use_fallback`",
                "spans": [
                  {
                    "byte_end": 11513,
                    "byte_start": 11501,
                    "column_end": 23,
                    "column_start": 11,
                    "expansion": null,
                    "file_name": "src\\lib.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 302,
                    "line_start": 302,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 23,
                        "highlight_start": 11,
                        "text": "#[cfg(not(use_fallback))]"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmppv41qy4k/proc-macro-error-1.0.4#proc-macro-error@1.0.4",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmppv41qy4k\\proc-macro-error-1.0.4\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "proc_macro_error",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmppv41qy4k\\proc-macro-error-1.0.4\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: panic message is not a string literal\n   --> src\\lib.rs:472:12\n    |\n472 |     panic!(AbortNow)\n    |     ------ ^^^^^^^^\n    |     |\n    |     help: use std::panic::panic_any instead: `std::panic::panic_any`\n    |\n    = note: this usage of `panic!()` is deprecated; it will be a hard error in Rust 2021\n    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/panic-macro-consistency.html>\n    = note: `#[warn(non_fmt_panics)]` on by default\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "this usage of `panic!()` is deprecated; it will be a hard error in Rust 2021",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/panic-macro-consistency.html>",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "`#[warn(non_fmt_panics)]` on by default",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "use std::panic::panic_any instead",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 16366,
                        "byte_start": 16360,
                        "column_end": 11,
                        "column_start": 5,
                        "expansion": null,
                        "file_name": "src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 472,
                        "line_start": 472,
                        "suggested_replacement": "std::panic::panic_any",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 11,
                            "highlight_start": 5,
                            "text": "    panic!(AbortNow)"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "non_fmt_panics",
                  "explanation": null
                },
                "level": "warning",
                "message": "panic message is not a string literal",
                "spans": [
                  {
                    "byte_end": 16375,
                    "byte_start": 16367,
                    "column_end": 20,
                    "column_start": 12,
                    "expansion": null,
                    "file_name": "src\\lib.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 472,
                    "line_start": 472,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 20,
                        "highlight_start": 12,
                        "text": "    panic!(AbortNow)"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-artifact",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmppv41qy4k/proc-macro-error-1.0.4#proc-macro-error@1.0.4",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmppv41qy4k\\proc-macro-error-1.0.4\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "proc_macro_error",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmppv41qy4k\\proc-macro-error-1.0.4\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "syn",
                "syn-error"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmppv41qy4k\\proc-macro-error-1.0.4\\target\\debug\\deps\\libproc_macro_error-fc4755477b24c7ad.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "build-finished",
              "success": true
            }
          ],
          "clippy": [
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#proc-macro2@1.0.95",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\proc-macro2-1.0.95\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\proc-macro2-1.0.95\\build.rs",
                "edition": "2021",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "proc-macro"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmppv41qy4k\\proc-macro-error-1.0.4\\target\\debug\\build\\proc-macro2-ff1a34852a360a33\\build-script-build.exe",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmppv41qy4k\\proc-macro-error-1.0.4\\target\\debug\\build\\proc-macro2-ff1a34852a360a33\\build_script_build.pdb"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "build-script-executed",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#proc-macro2@1.0.95",
              "linked_libs": [],
              "linked_paths": [],
              "cfgs": [
                "wrap_proc_macro"
              ],
              "env": [],
              "out_dir": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmppv41qy4k\\proc-macro-error-1.0.4\\target\\debug\\build\\proc-macro2-c291383498d6111e\\out"
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#version_check@0.9.5",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.9.5\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "version_check",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.9.5\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmppv41qy4k\\proc-macro-error-1.0.4\\target\\debug\\deps\\libversion_check-8a7cb6ed787a6dad.rlib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmppv41qy4k\\proc-macro-error-1.0.4\\target\\debug\\deps\\libversion_check-8a7cb6ed787a6dad.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#unicode-ident@1.0.18",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\unicode-ident-1.0.18\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "unicode_ident",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\unicode-ident-1.0.18\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmppv41qy4k\\proc-macro-error-1.0.4\\target\\debug\\deps\\libunicode_ident-f7db65657b8daa2b.rlib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmppv41qy4k\\proc-macro-error-1.0.4\\target\\debug\\deps\\libunicode_ident-f7db65657b8daa2b.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#unicode-ident@1.0.18",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\unicode-ident-1.0.18\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "unicode_ident",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\unicode-ident-1.0.18\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmppv41qy4k\\proc-macro-error-1.0.4\\target\\debug\\deps\\libunicode_ident-0ff2238d530c1ee1.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#syn@1.0.109",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\syn-1.0.109\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\syn-1.0.109\\build.rs",
                "edition": "2018",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "clone-impls",
                "default",
                "derive",
                "parsing",
                "printing",
                "proc-macro",
                "quote",
                "visit"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmppv41qy4k\\proc-macro-error-1.0.4\\target\\debug\\build\\syn-e1ad847596093d8d\\build-script-build.exe",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmppv41qy4k\\proc-macro-error-1.0.4\\target\\debug\\build\\syn-e1ad847596093d8d\\build_script_build.pdb"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#proc-macro-error-attr@1.0.4",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\proc-macro-error-attr-1.0.4\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\proc-macro-error-attr-1.0.4\\build.rs",
                "edition": "2018",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmppv41qy4k\\proc-macro-error-1.0.4\\target\\debug\\build\\proc-macro-error-attr-fae62112b7144294\\build-script-build.exe",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmppv41qy4k\\proc-macro-error-1.0.4\\target\\debug\\build\\proc-macro-error-attr-fae62112b7144294\\build_script_build.pdb"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#proc-macro2@1.0.95",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\proc-macro2-1.0.95\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "proc_macro2",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\proc-macro2-1.0.95\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "proc-macro"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmppv41qy4k\\proc-macro-error-1.0.4\\target\\debug\\deps\\libproc_macro2-4ab91139fc2ba9db.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#proc-macro2@1.0.95",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\proc-macro2-1.0.95\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "proc_macro2",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\proc-macro2-1.0.95\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "proc-macro"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmppv41qy4k\\proc-macro-error-1.0.4\\target\\debug\\deps\\libproc_macro2-5fa31185a70010c1.rlib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmppv41qy4k\\proc-macro-error-1.0.4\\target\\debug\\deps\\libproc_macro2-5fa31185a70010c1.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "build-script-executed",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#syn@1.0.109",
              "linked_libs": [],
              "linked_paths": [],
              "cfgs": [
                "syn_disable_nightly_tests"
              ],
              "env": [],
              "out_dir": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmppv41qy4k\\proc-macro-error-1.0.4\\target\\debug\\build\\syn-e5c3ecda09ccb8bf\\out"
            },
            {
              "reason": "build-script-executed",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#proc-macro-error-attr@1.0.4",
              "linked_libs": [],
              "linked_paths": [],
              "cfgs": [],
              "env": [],
              "out_dir": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmppv41qy4k\\proc-macro-error-1.0.4\\target\\debug\\build\\proc-macro-error-attr-4fa80d5734264161\\out"
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#quote@1.0.40",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\quote-1.0.40\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "quote",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\quote-1.0.40\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "proc-macro"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmppv41qy4k\\proc-macro-error-1.0.4\\target\\debug\\deps\\libquote-2cf06bdb5319f834.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#quote@1.0.40",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\quote-1.0.40\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "quote",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\quote-1.0.40\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "proc-macro"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmppv41qy4k\\proc-macro-error-1.0.4\\target\\debug\\deps\\libquote-2ad5b58bdd25544c.rlib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmppv41qy4k\\proc-macro-error-1.0.4\\target\\debug\\deps\\libquote-2ad5b58bdd25544c.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#syn@1.0.109",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\syn-1.0.109\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "syn",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\syn-1.0.109\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "clone-impls",
                "default",
                "derive",
                "parsing",
                "printing",
                "proc-macro",
                "quote",
                "visit"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmppv41qy4k\\proc-macro-error-1.0.4\\target\\debug\\deps\\libsyn-4bb38e08e9e942b2.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#proc-macro-error-attr@1.0.4",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\proc-macro-error-attr-1.0.4\\Cargo.toml",
              "target": {
                "kind": [
                  "proc-macro"
                ],
                "crate_types": [
                  "proc-macro"
                ],
                "name": "proc_macro_error_attr",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\proc-macro-error-attr-1.0.4\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmppv41qy4k\\proc-macro-error-1.0.4\\target\\debug\\deps\\proc_macro_error_attr-be0b8438488bbca5.dll",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmppv41qy4k\\proc-macro-error-1.0.4\\target\\debug\\deps\\proc_macro_error_attr-be0b8438488bbca5.dll.lib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmppv41qy4k\\proc-macro-error-1.0.4\\target\\debug\\deps\\proc_macro_error_attr-be0b8438488bbca5.dll.exp",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmppv41qy4k\\proc-macro-error-1.0.4\\target\\debug\\deps\\proc_macro_error_attr-be0b8438488bbca5.pdb"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmppv41qy4k/proc-macro-error-1.0.4#proc-macro-error@1.0.4",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmppv41qy4k\\proc-macro-error-1.0.4\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmppv41qy4k\\proc-macro-error-1.0.4\\build.rs",
                "edition": "2018",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "syn",
                "syn-error"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmppv41qy4k\\proc-macro-error-1.0.4\\target\\debug\\build\\proc-macro-error-531dce30252ff81e\\build-script-build.exe",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmppv41qy4k\\proc-macro-error-1.0.4\\target\\debug\\build\\proc-macro-error-531dce30252ff81e\\build_script_build.pdb"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "build-script-executed",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmppv41qy4k/proc-macro-error-1.0.4#proc-macro-error@1.0.4",
              "linked_libs": [],
              "linked_paths": [],
              "cfgs": [
                "use_fallback"
              ],
              "env": [],
              "out_dir": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmppv41qy4k\\proc-macro-error-1.0.4\\target\\debug\\build\\proc-macro-error-74388686be4817d5\\out"
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmppv41qy4k/proc-macro-error-1.0.4#proc-macro-error@1.0.4",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmppv41qy4k\\proc-macro-error-1.0.4\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "proc_macro_error",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmppv41qy4k\\proc-macro-error-1.0.4\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: unexpected `cfg` condition name: `use_fallback`\n   --> src\\lib.rs:274:17\n    |\n274 | #![cfg_attr(not(use_fallback), feature(proc_macro_diagnostic))]\n    |                 ^^^^^^^^^^^^\n    |\n    = help: expected names are: `docsrs`, `feature`, and `test` and 31 more\n    = help: consider using a Cargo feature instead\n    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n             [lints.rust]\n             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(use_fallback)'] }\n    = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(use_fallback)\");` to the top of the `build.rs`\n    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n    = note: `#[warn(unexpected_cfgs)]` on by default\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "expected names are: `docsrs`, `feature`, and `test` and 31 more",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider using a Cargo feature instead",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(use_fallback)'] }",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "or consider adding `println!(\"cargo::rustc-check-cfg=cfg(use_fallback)\");` to the top of the `build.rs`",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "`#[warn(unexpected_cfgs)]` on by default",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "unexpected_cfgs",
                  "explanation": null
                },
                "level": "warning",
                "message": "unexpected `cfg` condition name: `use_fallback`",
                "spans": [
                  {
                    "byte_end": 10952,
                    "byte_start": 10940,
                    "column_end": 29,
                    "column_start": 17,
                    "expansion": null,
                    "file_name": "src\\lib.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 274,
                    "line_start": 274,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 29,
                        "highlight_start": 17,
                        "text": "#![cfg_attr(not(use_fallback), feature(proc_macro_diagnostic))]"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmppv41qy4k/proc-macro-error-1.0.4#proc-macro-error@1.0.4",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmppv41qy4k\\proc-macro-error-1.0.4\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "proc_macro_error",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmppv41qy4k\\proc-macro-error-1.0.4\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: unexpected `cfg` condition name: `use_fallback`\n   --> src\\lib.rs:298:7\n    |\n298 | #[cfg(use_fallback)]\n    |       ^^^^^^^^^^^^\n    |\n    = help: consider using a Cargo feature instead\n    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n             [lints.rust]\n             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(use_fallback)'] }\n    = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(use_fallback)\");` to the top of the `build.rs`\n    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider using a Cargo feature instead",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(use_fallback)'] }",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "or consider adding `println!(\"cargo::rustc-check-cfg=cfg(use_fallback)\");` to the top of the `build.rs`",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "unexpected_cfgs",
                  "explanation": null
                },
                "level": "warning",
                "message": "unexpected `cfg` condition name: `use_fallback`",
                "spans": [
                  {
                    "byte_end": 11450,
                    "byte_start": 11438,
                    "column_end": 19,
                    "column_start": 7,
                    "expansion": null,
                    "file_name": "src\\lib.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 298,
                    "line_start": 298,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 19,
                        "highlight_start": 7,
                        "text": "#[cfg(use_fallback)]"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmppv41qy4k/proc-macro-error-1.0.4#proc-macro-error@1.0.4",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmppv41qy4k\\proc-macro-error-1.0.4\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "proc_macro_error",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmppv41qy4k\\proc-macro-error-1.0.4\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: unexpected `cfg` condition name: `use_fallback`\n   --> src\\lib.rs:302:11\n    |\n302 | #[cfg(not(use_fallback))]\n    |           ^^^^^^^^^^^^\n    |\n    = help: consider using a Cargo feature instead\n    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n             [lints.rust]\n             unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(use_fallback)'] }\n    = help: or consider adding `println!(\"cargo::rustc-check-cfg=cfg(use_fallback)\");` to the top of the `build.rs`\n    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider using a Cargo feature instead",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:\n [lints.rust]\n unexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(use_fallback)'] }",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "or consider adding `println!(\"cargo::rustc-check-cfg=cfg(use_fallback)\");` to the top of the `build.rs`",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "unexpected_cfgs",
                  "explanation": null
                },
                "level": "warning",
                "message": "unexpected `cfg` condition name: `use_fallback`",
                "spans": [
                  {
                    "byte_end": 11513,
                    "byte_start": 11501,
                    "column_end": 23,
                    "column_start": 11,
                    "expansion": null,
                    "file_name": "src\\lib.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 302,
                    "line_start": 302,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 23,
                        "highlight_start": 11,
                        "text": "#[cfg(not(use_fallback))]"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmppv41qy4k/proc-macro-error-1.0.4#proc-macro-error@1.0.4",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmppv41qy4k\\proc-macro-error-1.0.4\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "proc_macro_error",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmppv41qy4k\\proc-macro-error-1.0.4\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: doc list item overindented\n  --> src\\lib.rs:62:5\n   |\n62 | //!     attribute must be placed *before* (above) it, like this:\n   |     ^^^^ help: try using `  ` (2 spaces)\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#doc_overindented_list_items\n   = note: `#[warn(clippy::doc_overindented_list_items)]` on by default\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#doc_overindented_list_items",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "`#[warn(clippy::doc_overindented_list_items)]` on by default",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "try using `  ` (2 spaces)",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 2701,
                        "byte_start": 2697,
                        "column_end": 9,
                        "column_start": 5,
                        "expansion": null,
                        "file_name": "src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 62,
                        "line_start": 62,
                        "suggested_replacement": "  ",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 9,
                            "highlight_start": 5,
                            "text": "//!     attribute must be placed *before* (above) it, like this:"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::doc_overindented_list_items",
                  "explanation": null
                },
                "level": "warning",
                "message": "doc list item overindented",
                "spans": [
                  {
                    "byte_end": 2701,
                    "byte_start": 2697,
                    "column_end": 9,
                    "column_start": 5,
                    "expansion": null,
                    "file_name": "src\\lib.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 62,
                    "line_start": 62,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 9,
                        "highlight_start": 5,
                        "text": "//!     attribute must be placed *before* (above) it, like this:"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmppv41qy4k/proc-macro-error-1.0.4#proc-macro-error@1.0.4",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmppv41qy4k\\proc-macro-error-1.0.4\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "proc_macro_error",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmppv41qy4k\\proc-macro-error-1.0.4\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: doc list item overindented\n  --> src\\lib.rs:77:5\n   |\n77 | //!     `#[proc_macro_error(proc_macro_hack)]` instead.\n   |     ^^^^ help: try using `  ` (2 spaces)\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#doc_overindented_list_items\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#doc_overindented_list_items",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "try using `  ` (2 spaces)",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 3133,
                        "byte_start": 3129,
                        "column_end": 9,
                        "column_start": 5,
                        "expansion": null,
                        "file_name": "src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 77,
                        "line_start": 77,
                        "suggested_replacement": "  ",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 9,
                            "highlight_start": 5,
                            "text": "//!     `#[proc_macro_error(proc_macro_hack)]` instead."
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::doc_overindented_list_items",
                  "explanation": null
                },
                "level": "warning",
                "message": "doc list item overindented",
                "spans": [
                  {
                    "byte_end": 3133,
                    "byte_start": 3129,
                    "column_end": 9,
                    "column_start": 5,
                    "expansion": null,
                    "file_name": "src\\lib.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 77,
                    "line_start": 77,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 9,
                        "highlight_start": 5,
                        "text": "//!     `#[proc_macro_error(proc_macro_hack)]` instead."
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmppv41qy4k/proc-macro-error-1.0.4#proc-macro-error@1.0.4",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmppv41qy4k\\proc-macro-error-1.0.4\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "proc_macro_error",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmppv41qy4k\\proc-macro-error-1.0.4\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: doc list item overindented\n  --> src\\lib.rs:82:5\n   |\n82 | //!     and `assert_unwind_safe` will be applied automatically.\n   |     ^^^^ help: try using `  ` (2 spaces)\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#doc_overindented_list_items\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#doc_overindented_list_items",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "try using `  ` (2 spaces)",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 3287,
                        "byte_start": 3283,
                        "column_end": 9,
                        "column_start": 5,
                        "expansion": null,
                        "file_name": "src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 82,
                        "line_start": 82,
                        "suggested_replacement": "  ",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 9,
                            "highlight_start": 5,
                            "text": "//!     and `assert_unwind_safe` will be applied automatically."
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::doc_overindented_list_items",
                  "explanation": null
                },
                "level": "warning",
                "message": "doc list item overindented",
                "spans": [
                  {
                    "byte_end": 3287,
                    "byte_start": 3283,
                    "column_end": 9,
                    "column_start": 5,
                    "expansion": null,
                    "file_name": "src\\lib.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 82,
                    "line_start": 82,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 9,
                        "highlight_start": 5,
                        "text": "//!     and `assert_unwind_safe` will be applied automatically."
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmppv41qy4k/proc-macro-error-1.0.4#proc-macro-error@1.0.4",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmppv41qy4k\\proc-macro-error-1.0.4\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "proc_macro_error",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmppv41qy4k\\proc-macro-error-1.0.4\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: doc list item overindented\n  --> src\\lib.rs:87:5\n   |\n87 | //!     If none of `#[proc_macro]`, `#[proc_macro_derive]` nor `#[proc_macro_attribute]` are\n   |     ^^^^ help: try using `  ` (2 spaces)\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#doc_overindented_list_items\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#doc_overindented_list_items",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "try using `  ` (2 spaces)",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 3460,
                        "byte_start": 3456,
                        "column_end": 9,
                        "column_start": 5,
                        "expansion": null,
                        "file_name": "src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 87,
                        "line_start": 87,
                        "suggested_replacement": "  ",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 9,
                            "highlight_start": 5,
                            "text": "//!     If none of `#[proc_macro]`, `#[proc_macro_derive]` nor `#[proc_macro_attribute]` are"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::doc_overindented_list_items",
                  "explanation": null
                },
                "level": "warning",
                "message": "doc list item overindented",
                "spans": [
                  {
                    "byte_end": 3460,
                    "byte_start": 3456,
                    "column_end": 9,
                    "column_start": 5,
                    "expansion": null,
                    "file_name": "src\\lib.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 87,
                    "line_start": 87,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 9,
                        "highlight_start": 5,
                        "text": "//!     If none of `#[proc_macro]`, `#[proc_macro_derive]` nor `#[proc_macro_attribute]` are"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmppv41qy4k/proc-macro-error-1.0.4#proc-macro-error@1.0.4",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmppv41qy4k\\proc-macro-error-1.0.4\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "proc_macro_error",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmppv41qy4k\\proc-macro-error-1.0.4\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: doc list item overindented\n  --> src\\lib.rs:88:5\n   |\n88 | //!     present it will panic. It's the intention - this crate is supposed to be used only with\n   |     ^^^^ help: try using `  ` (2 spaces)\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#doc_overindented_list_items\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#doc_overindented_list_items",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "try using `  ` (2 spaces)",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 3553,
                        "byte_start": 3549,
                        "column_end": 9,
                        "column_start": 5,
                        "expansion": null,
                        "file_name": "src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 88,
                        "line_start": 88,
                        "suggested_replacement": "  ",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 9,
                            "highlight_start": 5,
                            "text": "//!     present it will panic. It's the intention - this crate is supposed to be used only with"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::doc_overindented_list_items",
                  "explanation": null
                },
                "level": "warning",
                "message": "doc list item overindented",
                "spans": [
                  {
                    "byte_end": 3553,
                    "byte_start": 3549,
                    "column_end": 9,
                    "column_start": 5,
                    "expansion": null,
                    "file_name": "src\\lib.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 88,
                    "line_start": 88,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 9,
                        "highlight_start": 5,
                        "text": "//!     present it will panic. It's the intention - this crate is supposed to be used only with"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmppv41qy4k/proc-macro-error-1.0.4#proc-macro-error@1.0.4",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmppv41qy4k\\proc-macro-error-1.0.4\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "proc_macro_error",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmppv41qy4k\\proc-macro-error-1.0.4\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: doc list item overindented\n  --> src\\lib.rs:89:5\n   |\n89 | //!     proc-macros.\n   |     ^^^^ help: try using `  ` (2 spaces)\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#doc_overindented_list_items\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#doc_overindented_list_items",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "try using `  ` (2 spaces)",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 3649,
                        "byte_start": 3645,
                        "column_end": 9,
                        "column_start": 5,
                        "expansion": null,
                        "file_name": "src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 89,
                        "line_start": 89,
                        "suggested_replacement": "  ",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 9,
                            "highlight_start": 5,
                            "text": "//!     proc-macros."
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::doc_overindented_list_items",
                  "explanation": null
                },
                "level": "warning",
                "message": "doc list item overindented",
                "spans": [
                  {
                    "byte_end": 3649,
                    "byte_start": 3645,
                    "column_end": 9,
                    "column_start": 5,
                    "expansion": null,
                    "file_name": "src\\lib.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 89,
                    "line_start": 89,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 9,
                        "highlight_start": 5,
                        "text": "//!     proc-macros."
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmppv41qy4k/proc-macro-error-1.0.4#proc-macro-error@1.0.4",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmppv41qy4k\\proc-macro-error-1.0.4\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "proc_macro_error",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmppv41qy4k\\proc-macro-error-1.0.4\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: doc list item overindented\n  --> src\\lib.rs:94:5\n   |\n94 | //!     `proc_macro::TokenStream`.\n   |     ^^^^ help: try using `  ` (2 spaces)\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#doc_overindented_list_items\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#doc_overindented_list_items",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "try using `  ` (2 spaces)",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 3838,
                        "byte_start": 3834,
                        "column_end": 9,
                        "column_start": 5,
                        "expansion": null,
                        "file_name": "src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 94,
                        "line_start": 94,
                        "suggested_replacement": "  ",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 9,
                            "highlight_start": 5,
                            "text": "//!     `proc_macro::TokenStream`."
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::doc_overindented_list_items",
                  "explanation": null
                },
                "level": "warning",
                "message": "doc list item overindented",
                "spans": [
                  {
                    "byte_end": 3838,
                    "byte_start": 3834,
                    "column_end": 9,
                    "column_start": 5,
                    "expansion": null,
                    "file_name": "src\\lib.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 94,
                    "line_start": 94,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 9,
                        "highlight_start": 5,
                        "text": "//!     `proc_macro::TokenStream`."
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmppv41qy4k/proc-macro-error-1.0.4#proc-macro-error@1.0.4",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmppv41qy4k\\proc-macro-error-1.0.4\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "proc_macro_error",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmppv41qy4k\\proc-macro-error-1.0.4\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: doc list item overindented\n   --> src\\lib.rs:101:5\n    |\n101 | //!     but you believe it's correct, you can use this setting to bypass the check.\n    |     ^^^^ help: try using `  ` (2 spaces)\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#doc_overindented_list_items\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#doc_overindented_list_items",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "try using `  ` (2 spaces)",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 4066,
                        "byte_start": 4062,
                        "column_end": 9,
                        "column_start": 5,
                        "expansion": null,
                        "file_name": "src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 101,
                        "line_start": 101,
                        "suggested_replacement": "  ",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 9,
                            "highlight_start": 5,
                            "text": "//!     but you believe it's correct, you can use this setting to bypass the check."
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::doc_overindented_list_items",
                  "explanation": null
                },
                "level": "warning",
                "message": "doc list item overindented",
                "spans": [
                  {
                    "byte_end": 4066,
                    "byte_start": 4062,
                    "column_end": 9,
                    "column_start": 5,
                    "expansion": null,
                    "file_name": "src\\lib.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 101,
                    "line_start": 101,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 9,
                        "highlight_start": 5,
                        "text": "//!     but you believe it's correct, you can use this setting to bypass the check."
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmppv41qy4k/proc-macro-error-1.0.4#proc-macro-error@1.0.4",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmppv41qy4k\\proc-macro-error-1.0.4\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "proc_macro_error",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmppv41qy4k\\proc-macro-error-1.0.4\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: doc list item overindented\n   --> src\\lib.rs:102:5\n    |\n102 | //!     You would need this for code that uses `lazy_static` or `thread_local` with\n    |     ^^^^ help: try using `  ` (2 spaces)\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#doc_overindented_list_items\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#doc_overindented_list_items",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "try using `  ` (2 spaces)",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 4150,
                        "byte_start": 4146,
                        "column_end": 9,
                        "column_start": 5,
                        "expansion": null,
                        "file_name": "src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 102,
                        "line_start": 102,
                        "suggested_replacement": "  ",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 9,
                            "highlight_start": 5,
                            "text": "//!     You would need this for code that uses `lazy_static` or `thread_local` with"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::doc_overindented_list_items",
                  "explanation": null
                },
                "level": "warning",
                "message": "doc list item overindented",
                "spans": [
                  {
                    "byte_end": 4150,
                    "byte_start": 4146,
                    "column_end": 9,
                    "column_start": 5,
                    "expansion": null,
                    "file_name": "src\\lib.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 102,
                    "line_start": 102,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 9,
                        "highlight_start": 5,
                        "text": "//!     You would need this for code that uses `lazy_static` or `thread_local` with"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmppv41qy4k/proc-macro-error-1.0.4#proc-macro-error@1.0.4",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmppv41qy4k\\proc-macro-error-1.0.4\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "proc_macro_error",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmppv41qy4k\\proc-macro-error-1.0.4\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: doc list item overindented\n   --> src\\lib.rs:103:5\n    |\n103 | //!     `Cell/RefCell` inside (and the like).\n    |     ^^^^ help: try using `  ` (2 spaces)\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#doc_overindented_list_items\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#doc_overindented_list_items",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "try using `  ` (2 spaces)",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 4234,
                        "byte_start": 4230,
                        "column_end": 9,
                        "column_start": 5,
                        "expansion": null,
                        "file_name": "src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 103,
                        "line_start": 103,
                        "suggested_replacement": "  ",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 9,
                            "highlight_start": 5,
                            "text": "//!     `Cell/RefCell` inside (and the like)."
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::doc_overindented_list_items",
                  "explanation": null
                },
                "level": "warning",
                "message": "doc list item overindented",
                "spans": [
                  {
                    "byte_end": 4234,
                    "byte_start": 4230,
                    "column_end": 9,
                    "column_start": 5,
                    "expansion": null,
                    "file_name": "src\\lib.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 103,
                    "line_start": 103,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 9,
                        "highlight_start": 5,
                        "text": "//!     `Cell/RefCell` inside (and the like)."
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmppv41qy4k/proc-macro-error-1.0.4#proc-macro-error@1.0.4",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmppv41qy4k\\proc-macro-error-1.0.4\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "proc_macro_error",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmppv41qy4k\\proc-macro-error-1.0.4\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: doc list item overindented\n   --> src\\lib.rs:106:5\n    |\n106 | //!     marked as `#[proc_macro]`, `#[proc_macro_derive]` or `#[proc_macro_attribute]`.\n    |     ^^^^ help: try using `  ` (2 spaces)\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#doc_overindented_list_items\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#doc_overindented_list_items",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "try using `  ` (2 spaces)",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 4366,
                        "byte_start": 4362,
                        "column_end": 9,
                        "column_start": 5,
                        "expansion": null,
                        "file_name": "src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 106,
                        "line_start": 106,
                        "suggested_replacement": "  ",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 9,
                            "highlight_start": 5,
                            "text": "//!     marked as `#[proc_macro]`, `#[proc_macro_derive]` or `#[proc_macro_attribute]`."
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::doc_overindented_list_items",
                  "explanation": null
                },
                "level": "warning",
                "message": "doc list item overindented",
                "spans": [
                  {
                    "byte_end": 4366,
                    "byte_start": 4362,
                    "column_end": 9,
                    "column_start": 5,
                    "expansion": null,
                    "file_name": "src\\lib.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 106,
                    "line_start": 106,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 9,
                        "highlight_start": 5,
                        "text": "//!     marked as `#[proc_macro]`, `#[proc_macro_derive]` or `#[proc_macro_attribute]`."
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmppv41qy4k/proc-macro-error-1.0.4#proc-macro-error@1.0.4",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmppv41qy4k\\proc-macro-error-1.0.4\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "proc_macro_error",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmppv41qy4k\\proc-macro-error-1.0.4\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: doc list item overindented\n   --> src\\lib.rs:140:5\n    |\n140 | //!     Expands to [`!`] (never type).\n    |     ^^^^ help: try using `  ` (2 spaces)\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#doc_overindented_list_items\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#doc_overindented_list_items",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "try using `  ` (2 spaces)",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 5760,
                        "byte_start": 5756,
                        "column_end": 9,
                        "column_start": 5,
                        "expansion": null,
                        "file_name": "src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 140,
                        "line_start": 140,
                        "suggested_replacement": "  ",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 9,
                            "highlight_start": 5,
                            "text": "//!     Expands to [`!`] (never type)."
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::doc_overindented_list_items",
                  "explanation": null
                },
                "level": "warning",
                "message": "doc list item overindented",
                "spans": [
                  {
                    "byte_end": 5760,
                    "byte_start": 5756,
                    "column_end": 9,
                    "column_start": 5,
                    "expansion": null,
                    "file_name": "src\\lib.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 140,
                    "line_start": 140,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 9,
                        "highlight_start": 5,
                        "text": "//!     Expands to [`!`] (never type)."
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmppv41qy4k/proc-macro-error-1.0.4#proc-macro-error@1.0.4",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmppv41qy4k\\proc-macro-error-1.0.4\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "proc_macro_error",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmppv41qy4k\\proc-macro-error-1.0.4\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: doc list item overindented\n   --> src\\lib.rs:149:5\n    |\n149 | //!     looking for other errors to report.\n    |     ^^^^ help: try using `  ` (2 spaces)\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#doc_overindented_list_items\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#doc_overindented_list_items",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "try using `  ` (2 spaces)",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 6031,
                        "byte_start": 6027,
                        "column_end": 9,
                        "column_start": 5,
                        "expansion": null,
                        "file_name": "src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 149,
                        "line_start": 149,
                        "suggested_replacement": "  ",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 9,
                            "highlight_start": 5,
                            "text": "//!     looking for other errors to report."
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::doc_overindented_list_items",
                  "explanation": null
                },
                "level": "warning",
                "message": "doc list item overindented",
                "spans": [
                  {
                    "byte_end": 6031,
                    "byte_start": 6027,
                    "column_end": 9,
                    "column_start": 5,
                    "expansion": null,
                    "file_name": "src\\lib.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 149,
                    "line_start": 149,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 9,
                        "highlight_start": 5,
                        "text": "//!     looking for other errors to report."
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmppv41qy4k/proc-macro-error-1.0.4#proc-macro-error@1.0.4",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmppv41qy4k\\proc-macro-error-1.0.4\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "proc_macro_error",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmppv41qy4k\\proc-macro-error-1.0.4\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: doc list item overindented\n   --> src\\lib.rs:150:5\n    |\n150 | //!     The compilation will fail nonetheless. Expands to [`()`] (unit type).\n    |     ^^^^ help: try using `  ` (2 spaces)\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#doc_overindented_list_items\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#doc_overindented_list_items",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "try using `  ` (2 spaces)",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 6075,
                        "byte_start": 6071,
                        "column_end": 9,
                        "column_start": 5,
                        "expansion": null,
                        "file_name": "src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 150,
                        "line_start": 150,
                        "suggested_replacement": "  ",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 9,
                            "highlight_start": 5,
                            "text": "//!     The compilation will fail nonetheless. Expands to [`()`] (unit type)."
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::doc_overindented_list_items",
                  "explanation": null
                },
                "level": "warning",
                "message": "doc list item overindented",
                "spans": [
                  {
                    "byte_end": 6075,
                    "byte_start": 6071,
                    "column_end": 9,
                    "column_start": 5,
                    "expansion": null,
                    "file_name": "src\\lib.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 150,
                    "line_start": 150,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 9,
                        "highlight_start": 5,
                        "text": "//!     The compilation will fail nonetheless. Expands to [`()`] (unit type)."
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmppv41qy4k/proc-macro-error-1.0.4#proc-macro-error@1.0.4",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmppv41qy4k\\proc-macro-error-1.0.4\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "proc_macro_error",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmppv41qy4k\\proc-macro-error-1.0.4\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: doc list item overindented\n   --> src\\lib.rs:159:5\n    |\n159 | //!     because of warnings.\n    |     ^^^^ help: try using `  ` (2 spaces)\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#doc_overindented_list_items\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#doc_overindented_list_items",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "try using `  ` (2 spaces)",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 6409,
                        "byte_start": 6405,
                        "column_end": 9,
                        "column_start": 5,
                        "expansion": null,
                        "file_name": "src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 159,
                        "line_start": 159,
                        "suggested_replacement": "  ",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 9,
                            "highlight_start": 5,
                            "text": "//!     because of warnings."
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::doc_overindented_list_items",
                  "explanation": null
                },
                "level": "warning",
                "message": "doc list item overindented",
                "spans": [
                  {
                    "byte_end": 6409,
                    "byte_start": 6405,
                    "column_end": 9,
                    "column_start": 5,
                    "expansion": null,
                    "file_name": "src\\lib.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 159,
                    "line_start": 159,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 9,
                        "highlight_start": 5,
                        "text": "//!     because of warnings."
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmppv41qy4k/proc-macro-error-1.0.4#proc-macro-error@1.0.4",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmppv41qy4k\\proc-macro-error-1.0.4\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "proc_macro_error",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmppv41qy4k\\proc-macro-error-1.0.4\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: doc list item overindented\n   --> src\\lib.rs:160:5\n    |\n160 | //!     Expands to [`()`] (unit type).\n    |     ^^^^ help: try using `  ` (2 spaces)\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#doc_overindented_list_items\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#doc_overindented_list_items",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "try using `  ` (2 spaces)",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 6438,
                        "byte_start": 6434,
                        "column_end": 9,
                        "column_start": 5,
                        "expansion": null,
                        "file_name": "src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 160,
                        "line_start": 160,
                        "suggested_replacement": "  ",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 9,
                            "highlight_start": 5,
                            "text": "//!     Expands to [`()`] (unit type)."
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::doc_overindented_list_items",
                  "explanation": null
                },
                "level": "warning",
                "message": "doc list item overindented",
                "spans": [
                  {
                    "byte_end": 6438,
                    "byte_start": 6434,
                    "column_end": 9,
                    "column_start": 5,
                    "expansion": null,
                    "file_name": "src\\lib.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 160,
                    "line_start": 160,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 9,
                        "highlight_start": 5,
                        "text": "//!     Expands to [`()`] (unit type)."
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmppv41qy4k/proc-macro-error-1.0.4#proc-macro-error@1.0.4",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmppv41qy4k\\proc-macro-error-1.0.4\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "proc_macro_error",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmppv41qy4k\\proc-macro-error-1.0.4\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: initializer for `thread_local` value can be made `const`\n   --> src\\dummy.rs:122:55\n    |\n122 |     static DUMMY_IMPL: RefCell<Option<TokenStream>> = RefCell::new(None);\n    |                                                       ^^^^^^^^^^^^^^^^^^ help: replace with: `const { RefCell::new(None) }`\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_const_for_thread_local\n    = note: `#[warn(clippy::missing_const_for_thread_local)]` on by default\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_const_for_thread_local",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "`#[warn(clippy::missing_const_for_thread_local)]` on by default",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "replace with",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 3434,
                        "byte_start": 3416,
                        "column_end": 73,
                        "column_start": 55,
                        "expansion": null,
                        "file_name": "src\\dummy.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 122,
                        "line_start": 122,
                        "suggested_replacement": "const { RefCell::new(None) }",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 73,
                            "highlight_start": 55,
                            "text": "    static DUMMY_IMPL: RefCell<Option<TokenStream>> = RefCell::new(None);"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::missing_const_for_thread_local",
                  "explanation": null
                },
                "level": "warning",
                "message": "initializer for `thread_local` value can be made `const`",
                "spans": [
                  {
                    "byte_end": 3434,
                    "byte_start": 3416,
                    "column_end": 73,
                    "column_start": 55,
                    "expansion": null,
                    "file_name": "src\\dummy.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 122,
                    "line_start": 122,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 73,
                        "highlight_start": 55,
                        "text": "    static DUMMY_IMPL: RefCell<Option<TokenStream>> = RefCell::new(None);"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmppv41qy4k/proc-macro-error-1.0.4#proc-macro-error@1.0.4",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmppv41qy4k\\proc-macro-error-1.0.4\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "proc_macro_error",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmppv41qy4k\\proc-macro-error-1.0.4\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: this expression creates a reference which is immediately dereferenced by the compiler\n   --> src\\diagnostic.rs:270:85\n    |\n270 |                 .map(|(span_range, msg)| diag_to_tokens(*span_range, &Level::Error, &msg, &[])),\n    |                                                                                     ^^^^ help: change this to: `msg`\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_borrow\n    = note: `#[warn(clippy::needless_borrow)]` on by default\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_borrow",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "`#[warn(clippy::needless_borrow)]` on by default",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "change this to",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 8416,
                        "byte_start": 8412,
                        "column_end": 89,
                        "column_start": 85,
                        "expansion": null,
                        "file_name": "src\\diagnostic.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 270,
                        "line_start": 270,
                        "suggested_replacement": "msg",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 89,
                            "highlight_start": 85,
                            "text": "                .map(|(span_range, msg)| diag_to_tokens(*span_range, &Level::Error, &msg, &[])),"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::needless_borrow",
                  "explanation": null
                },
                "level": "warning",
                "message": "this expression creates a reference which is immediately dereferenced by the compiler",
                "spans": [
                  {
                    "byte_end": 8416,
                    "byte_start": 8412,
                    "column_end": 89,
                    "column_start": 85,
                    "expansion": null,
                    "file_name": "src\\diagnostic.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 270,
                    "line_start": 270,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 89,
                        "highlight_start": 85,
                        "text": "                .map(|(span_range, msg)| diag_to_tokens(*span_range, &Level::Error, &msg, &[])),"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmppv41qy4k/proc-macro-error-1.0.4#proc-macro-error@1.0.4",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmppv41qy4k\\proc-macro-error-1.0.4\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "proc_macro_error",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmppv41qy4k\\proc-macro-error-1.0.4\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: initializer for `thread_local` value can be made `const`\n  --> src\\imp\\fallback.rs:29:52\n   |\n29 |     static ERR_STORAGE: RefCell<Vec<Diagnostic>> = RefCell::new(Vec::new());\n   |                                                    ^^^^^^^^^^^^^^^^^^^^^^^^ help: replace with: `const { RefCell::new(Vec::new()) }`\n   |\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_const_for_thread_local\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_const_for_thread_local",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "replace with",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 708,
                        "byte_start": 684,
                        "column_end": 76,
                        "column_start": 52,
                        "expansion": null,
                        "file_name": "src\\imp\\fallback.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 29,
                        "line_start": 29,
                        "suggested_replacement": "const { RefCell::new(Vec::new()) }",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 76,
                            "highlight_start": 52,
                            "text": "    static ERR_STORAGE: RefCell<Vec<Diagnostic>> = RefCell::new(Vec::new());"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::missing_const_for_thread_local",
                  "explanation": null
                },
                "level": "warning",
                "message": "initializer for `thread_local` value can be made `const`",
                "spans": [
                  {
                    "byte_end": 708,
                    "byte_start": 684,
                    "column_end": 76,
                    "column_start": 52,
                    "expansion": null,
                    "file_name": "src\\imp\\fallback.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 29,
                    "line_start": 29,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 76,
                        "highlight_start": 52,
                        "text": "    static ERR_STORAGE: RefCell<Vec<Diagnostic>> = RefCell::new(Vec::new());"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmppv41qy4k/proc-macro-error-1.0.4#proc-macro-error@1.0.4",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmppv41qy4k\\proc-macro-error-1.0.4\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "proc_macro_error",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmppv41qy4k\\proc-macro-error-1.0.4\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: redundant closure\n   --> src\\lib.rs:336:49\n    |\n336 |         let first = spans.next().unwrap_or_else(|| Span::call_site());\n    |                                                 ^^^^^^^^^^^^^^^^^^^^ help: replace the closure with the function itself: `Span::call_site`\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#redundant_closure\n    = note: `#[warn(clippy::redundant_closure)]` on by default\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#redundant_closure",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "`#[warn(clippy::redundant_closure)]` on by default",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "replace the closure with the function itself",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 12564,
                        "byte_start": 12544,
                        "column_end": 69,
                        "column_start": 49,
                        "expansion": null,
                        "file_name": "src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 336,
                        "line_start": 336,
                        "suggested_replacement": "Span::call_site",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 69,
                            "highlight_start": 49,
                            "text": "        let first = spans.next().unwrap_or_else(|| Span::call_site());"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::redundant_closure",
                  "explanation": null
                },
                "level": "warning",
                "message": "redundant closure",
                "spans": [
                  {
                    "byte_end": 12564,
                    "byte_start": 12544,
                    "column_end": 69,
                    "column_start": 49,
                    "expansion": null,
                    "file_name": "src\\lib.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 336,
                    "line_start": 336,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 69,
                        "highlight_start": 49,
                        "text": "        let first = spans.next().unwrap_or_else(|| Span::call_site());"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmppv41qy4k/proc-macro-error-1.0.4#proc-macro-error@1.0.4",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmppv41qy4k\\proc-macro-error-1.0.4\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "proc_macro_error",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmppv41qy4k\\proc-macro-error-1.0.4\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: initializer for `thread_local` value can be made `const`\n   --> src\\lib.rs:476:47\n    |\n476 |     static ENTERED_ENTRY_POINT: Cell<usize> = Cell::new(0);\n    |                                               ^^^^^^^^^^^^ help: replace with: `const { Cell::new(0) }`\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_const_for_thread_local\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_const_for_thread_local",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "replace with",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 16454,
                        "byte_start": 16442,
                        "column_end": 59,
                        "column_start": 47,
                        "expansion": null,
                        "file_name": "src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 476,
                        "line_start": 476,
                        "suggested_replacement": "const { Cell::new(0) }",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 59,
                            "highlight_start": 47,
                            "text": "    static ENTERED_ENTRY_POINT: Cell<usize> = Cell::new(0);"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::missing_const_for_thread_local",
                  "explanation": null
                },
                "level": "warning",
                "message": "initializer for `thread_local` value can be made `const`",
                "spans": [
                  {
                    "byte_end": 16454,
                    "byte_start": 16442,
                    "column_end": 59,
                    "column_start": 47,
                    "expansion": null,
                    "file_name": "src\\lib.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 476,
                    "line_start": 476,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 59,
                        "highlight_start": 47,
                        "text": "    static ENTERED_ENTRY_POINT: Cell<usize> = Cell::new(0);"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmppv41qy4k/proc-macro-error-1.0.4#proc-macro-error@1.0.4",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmppv41qy4k\\proc-macro-error-1.0.4\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "proc_macro_error",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmppv41qy4k\\proc-macro-error-1.0.4\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: using `clone` on type `Span` which implements the `Copy` trait\n   --> src\\lib.rs:549:24\n    |\n549 |                 first: self.clone().into(),\n    |                        ^^^^^^^^^^^^ help: try dereferencing it: `(*self)`\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#clone_on_copy\n    = note: `#[warn(clippy::clone_on_copy)]` on by default\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#clone_on_copy",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "`#[warn(clippy::clone_on_copy)]` on by default",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "try dereferencing it",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 18816,
                        "byte_start": 18804,
                        "column_end": 36,
                        "column_start": 24,
                        "expansion": null,
                        "file_name": "src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 549,
                        "line_start": 549,
                        "suggested_replacement": "(*self)",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 36,
                            "highlight_start": 24,
                            "text": "                first: self.clone().into(),"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::clone_on_copy",
                  "explanation": null
                },
                "level": "warning",
                "message": "using `clone` on type `Span` which implements the `Copy` trait",
                "spans": [
                  {
                    "byte_end": 18816,
                    "byte_start": 18804,
                    "column_end": 36,
                    "column_start": 24,
                    "expansion": null,
                    "file_name": "src\\lib.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 549,
                    "line_start": 549,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 36,
                        "highlight_start": 24,
                        "text": "                first: self.clone().into(),"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmppv41qy4k/proc-macro-error-1.0.4#proc-macro-error@1.0.4",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmppv41qy4k\\proc-macro-error-1.0.4\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "proc_macro_error",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmppv41qy4k\\proc-macro-error-1.0.4\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: using `clone` on type `Span` which implements the `Copy` trait\n   --> src\\lib.rs:550:23\n    |\n550 |                 last: self.clone().into(),\n    |                       ^^^^^^^^^^^^ help: try dereferencing it: `(*self)`\n    |\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#clone_on_copy\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#clone_on_copy",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "try dereferencing it",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 18859,
                        "byte_start": 18847,
                        "column_end": 35,
                        "column_start": 23,
                        "expansion": null,
                        "file_name": "src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 550,
                        "line_start": 550,
                        "suggested_replacement": "(*self)",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 35,
                            "highlight_start": 23,
                            "text": "                last: self.clone().into(),"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::clone_on_copy",
                  "explanation": null
                },
                "level": "warning",
                "message": "using `clone` on type `Span` which implements the `Copy` trait",
                "spans": [
                  {
                    "byte_end": 18859,
                    "byte_start": 18847,
                    "column_end": 35,
                    "column_start": 23,
                    "expansion": null,
                    "file_name": "src\\lib.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 550,
                    "line_start": 550,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 35,
                        "highlight_start": 23,
                        "text": "                last: self.clone().into(),"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmppv41qy4k/proc-macro-error-1.0.4#proc-macro-error@1.0.4",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmppv41qy4k\\proc-macro-error-1.0.4\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "proc_macro_error",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmppv41qy4k\\proc-macro-error-1.0.4\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: this seems like a manual implementation of the non-exhaustive pattern\n  --> src\\diagnostic.rs:13:1\n   |\n13 | / pub enum Level {\n14 | |     Error,\n15 | |     Warning,\n16 | |     #[doc(hidden)]\n17 | |     NonExhaustive,\n18 | | }\n   | |_^\n   |\nhelp: remove this variant\n  --> src\\diagnostic.rs:17:5\n   |\n17 |     NonExhaustive,\n   |     ^^^^^^^^^^^^^\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#manual_non_exhaustive\n   = note: `#[warn(clippy::manual_non_exhaustive)]` on by default\nhelp: use the `#[non_exhaustive]` attribute instead\n   |\n13 + #[non_exhaustive]\n14 | pub enum Level {\n   |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "remove this variant",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 365,
                        "byte_start": 352,
                        "column_end": 18,
                        "column_start": 5,
                        "expansion": null,
                        "file_name": "src\\diagnostic.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 17,
                        "line_start": 17,
                        "suggested_replacement": null,
                        "suggestion_applicability": null,
                        "text": [
                          {
                            "highlight_end": 18,
                            "highlight_start": 5,
                            "text": "    NonExhaustive,"
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#manual_non_exhaustive",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "`#[warn(clippy::manual_non_exhaustive)]` on by default",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "use the `#[non_exhaustive]` attribute instead",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 288,
                        "byte_start": 288,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "src\\diagnostic.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 13,
                        "line_start": 13,
                        "suggested_replacement": "#[non_exhaustive]\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "pub enum Level {"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "clippy::manual_non_exhaustive",
                  "explanation": null
                },
                "level": "warning",
                "message": "this seems like a manual implementation of the non-exhaustive pattern",
                "spans": [
                  {
                    "byte_end": 368,
                    "byte_start": 288,
                    "column_end": 2,
                    "column_start": 1,
                    "expansion": null,
                    "file_name": "src\\diagnostic.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 18,
                    "line_start": 13,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 17,
                        "highlight_start": 1,
                        "text": "pub enum Level {"
                      },
                      {
                        "highlight_end": 11,
                        "highlight_start": 1,
                        "text": "    Error,"
                      },
                      {
                        "highlight_end": 13,
                        "highlight_start": 1,
                        "text": "    Warning,"
                      },
                      {
                        "highlight_end": 19,
                        "highlight_start": 1,
                        "text": "    #[doc(hidden)]"
                      },
                      {
                        "highlight_end": 19,
                        "highlight_start": 1,
                        "text": "    NonExhaustive,"
                      },
                      {
                        "highlight_end": 2,
                        "highlight_start": 1,
                        "text": "}"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmppv41qy4k/proc-macro-error-1.0.4#proc-macro-error@1.0.4",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmppv41qy4k\\proc-macro-error-1.0.4\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "proc_macro_error",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmppv41qy4k\\proc-macro-error-1.0.4\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "warning: panic message is not a string literal\n   --> src\\lib.rs:472:12\n    |\n472 |     panic!(AbortNow)\n    |     ------ ^^^^^^^^\n    |     |\n    |     help: use std::panic::panic_any instead: `std::panic::panic_any`\n    |\n    = note: this usage of `panic!()` is deprecated; it will be a hard error in Rust 2021\n    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/panic-macro-consistency.html>\n    = note: `#[warn(non_fmt_panics)]` on by default\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "this usage of `panic!()` is deprecated; it will be a hard error in Rust 2021",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/panic-macro-consistency.html>",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "`#[warn(non_fmt_panics)]` on by default",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "use std::panic::panic_any instead",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 16366,
                        "byte_start": 16360,
                        "column_end": 11,
                        "column_start": 5,
                        "expansion": null,
                        "file_name": "src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 472,
                        "line_start": 472,
                        "suggested_replacement": "std::panic::panic_any",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 11,
                            "highlight_start": 5,
                            "text": "    panic!(AbortNow)"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "non_fmt_panics",
                  "explanation": null
                },
                "level": "warning",
                "message": "panic message is not a string literal",
                "spans": [
                  {
                    "byte_end": 16375,
                    "byte_start": 16367,
                    "column_end": 20,
                    "column_start": 12,
                    "expansion": null,
                    "file_name": "src\\lib.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 472,
                    "line_start": 472,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 20,
                        "highlight_start": 12,
                        "text": "    panic!(AbortNow)"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-artifact",
              "package_id": "path+file:///C:/Users/davet/AppData/Local/Temp/tmppv41qy4k/proc-macro-error-1.0.4#proc-macro-error@1.0.4",
              "manifest_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmppv41qy4k\\proc-macro-error-1.0.4\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "proc_macro_error",
                "src_path": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmppv41qy4k\\proc-macro-error-1.0.4\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "syn",
                "syn-error"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmppv41qy4k\\proc-macro-error-1.0.4\\target\\debug\\deps\\libproc_macro_error-8daefede43fb10f0.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "build-finished",
              "success": true
            }
          ],
          "audit": {
            "database": {
              "advisory-count": 787,
              "last-commit": "7573f55ba337263f61167dbb0ea926cdc7c8eb5d",
              "last-updated": "2025-06-17T11:04:25+02:00"
            },
            "lockfile": {
              "dependency-count": 29
            },
            "settings": {
              "target_arch": [],
              "target_os": [],
              "severity": null,
              "ignore": [],
              "informational_warnings": [
                "unmaintained",
                "unsound",
                "notice"
              ]
            },
            "vulnerabilities": {
              "found": false,
              "count": 0,
              "list": []
            },
            "warnings": {
              "unmaintained": [
                {
                  "kind": "unmaintained",
                  "package": {
                    "name": "proc-macro-error",
                    "version": "1.0.4",
                    "source": null,
                    "checksum": null,
                    "dependencies": [
                      {
                        "name": "proc-macro-error-attr",
                        "version": "1.0.4",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "proc-macro2",
                        "version": "1.0.95",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "quote",
                        "version": "1.0.40",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "serde_derive",
                        "version": "1.0.107",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "syn",
                        "version": "1.0.109",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "toml",
                        "version": "0.5.2",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "trybuild",
                        "version": "1.0.64",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "version_check",
                        "version": "0.9.5",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      }
                    ],
                    "replace": null
                  },
                  "advisory": {
                    "id": "RUSTSEC-2024-0370",
                    "package": "proc-macro-error",
                    "title": "proc-macro-error is unmaintained",
                    "description": "proc-macro-error's maintainer seems to be unreachable, with no commits for 2 years, no releases pushed for 4 years, and no activity on the GitLab repo or response to email.\n\nproc-macro-error also depends on `syn 1.x`, which may be bringing duplicate dependencies into dependant build trees.\n\n## Possible Alternative(s)\n\n- [manyhow](https://crates.io/crates/manyhow)\n- [proc-macro-error2](https://crates.io/crates/proc-macro-error2)\n- [proc-macro2-diagnostics](https://github.com/SergioBenitez/proc-macro2-diagnostics)",
                    "date": "2024-09-01",
                    "aliases": [],
                    "related": [],
                    "collection": "crates",
                    "categories": [],
                    "keywords": [],
                    "cvss": null,
                    "informational": "unmaintained",
                    "references": [],
                    "source": null,
                    "url": "https://gitlab.com/CreepySkeleton/proc-macro-error/-/issues/20",
                    "withdrawn": null,
                    "license": "CC0-1.0"
                  },
                  "affected": null,
                  "versions": {
                    "patched": [],
                    "unaffected": []
                  }
                }
              ]
            }
          },
          "note": "Crate analysis performed with stable toolchain."
        },
        "crate_metadata": {
          "name": "proc-macro-error",
          "version": "1.0.4",
          "description": "ALLOW: Positive community sentiment",
          "repository": "",
          "keywords": [],
          "categories": [],
          "readme": {
            "raw_markdown": "[](https://docs.rs/proc-macro-error/latest/proc_macro_error/all.html \"show sidebar\")\n# Crate proc_macro_errorCopy item path\n[Settings](https://docs.rs/proc-macro-error/latest/settings.html)\n[Help](https://docs.rs/proc-macro-error/latest/help.html)\nSummary[Source](https://docs.rs/proc-macro-error/latest/src/proc_macro_error/lib.rs.html#1-560)\nExpand description\n## [\u00a7](https://docs.rs/proc-macro-error/latest/proc_macro_error/#proc-macro-error)proc-macro-error\nThis crate aims to make error reporting in proc-macros simple and easy to use. Migrate from `panic!`-based errors for as little effort as possible!\n(Also, you can explicitly [append a dummy token stream](https://docs.rs/proc-macro-error/latest/proc_macro_error/dummy/index.html) to your errors).\nTo achieve his, this crate serves as a tiny shim around `proc_macro::Diagnostic` and `compile_error!`. It detects the best way of emitting available based on compiler\u2019s version. When the underlying diagnostic type is finally stabilized, this crate will simply be delegating to it requiring no changes in your code!\nSo you can just use this crate and have _both_ some of `proc_macro::Diagnostic` functionality available on stable ahead of time _and_ your error-reporting code future-proof.\n### [\u00a7](https://docs.rs/proc-macro-error/latest/proc_macro_error/#cargo-features)Cargo features\nThis crate provides _enabled by default_ `syn-error` feature that gates `impl From<syn::Error> for Diagnostic` conversion. If you don\u2019t use `syn` and want to cut off some of compilation time, you can disable it via\n```\n[dependencies]\nproc-macro-error = { version = \"1\", default-features = false }\n```\n\n* **Please note that disabling this feature makes sense only if you don\u2019t depend on`syn` directly or indirectly, and you very likely do.**\n### [\u00a7](https://docs.rs/proc-macro-error/latest/proc_macro_error/#real-world-examples)Real world examples\n  * [`structopt-derive`](https://github.com/TeXitoi/structopt/tree/master/structopt-derive) (abort-like usage)\n  * [`auto-impl`](https://github.com/auto-impl-rs/auto_impl/) (emit-like usage)\n\n\n### [\u00a7](https://docs.rs/proc-macro-error/latest/proc_macro_error/#limitations)Limitations\n  * Warnings are emitted only on nightly, they are ignored on stable.\n  * \u201chelp\u201d suggestions can\u2019t have their own span info on stable, (essentially inheriting the parent span).\n  * If a panic occurs somewhere in your macro no errors will be displayed. This is not a technical limitation but rather intentional design. `panic` is not for error reporting.\n\n\n#### [\u00a7](https://docs.rs/proc-macro-error/latest/proc_macro_error/#proc_macro_error-attribute)`#[proc_macro_error]` attribute\n**This attribute MUST be present on the top level of your macro** (the function annotated with any of `#[proc_macro]`, `#[proc_macro_derive]`, `#[proc_macro_attribute]`).\nThis attribute performs the setup and cleanup necessary to make things work.\nIn most cases you\u2019ll need the simple `#[proc_macro_error]` form without any additional settings. Feel free to [skip the \u201cSyntax\u201d section](https://docs.rs/proc-macro-error/latest/proc_macro_error/#macros).\n##### [\u00a7](https://docs.rs/proc-macro-error/latest/proc_macro_error/#syntax)Syntax\n`#[proc_macro_error]` or `#[proc_macro_error(settings...)]`, where `settings...` is a comma-separated list of:\n  * `proc_macro_hack`:\nIn order to correctly cooperate with `#[proc_macro_hack]`, `#[proc_macro_error]` attribute must be placed _before_ (above) it, like this:\n```\n#[proc_macro_error]\n#[proc_macro_hack]\n#[proc_macro]\nfn my_macro(input: TokenStream) -> TokenStream {\n  unimplemented!()\n}\n```\n\nIf, for some reason, you can\u2019t place it like that you can use `#[proc_macro_error(proc_macro_hack)]` instead.\n## [\u00a7](https://docs.rs/proc-macro-error/latest/proc_macro_error/#note)Note\nIf `proc-macro-hack` was detected (by any means) `allow_not_macro` and `assert_unwind_safe` will be applied automatically.\n  * `allow_not_macro`:\nBy default, the attribute checks that it\u2019s applied to a proc-macro. If none of `#[proc_macro]`, `#[proc_macro_derive]` nor `#[proc_macro_attribute]` are present it will panic. It\u2019s the intention - this crate is supposed to be used only with proc-macros.\nThis setting is made to bypass the check, useful in certain circumstances.\nPay attention: the function this attribute is applied to must return `proc_macro::TokenStream`.\nThis setting is implied if `proc-macro-hack` was detected.\n  * `assert_unwind_safe`:\nBy default, your code must be [unwind safe](https://doc.rust-lang.org/std/panic/trait.UnwindSafe.html#what-is-unwind-safety). If your code is not unwind safe, but you believe it\u2019s correct, you can use this setting to bypass the check. You would need this for code that uses `lazy_static` or `thread_local` with `Cell/RefCell` inside (and the like).\nThis setting is implied if `#[proc_macro_error]` is applied to a function marked as `#[proc_macro]`, `#[proc_macro_derive]` or `#[proc_macro_attribute]`.\nThis setting is also implied if `proc-macro-hack` was detected.\n\n\n### [\u00a7](https://docs.rs/proc-macro-error/latest/proc_macro_error/#macros)Macros\nMost of the time you want to use the macros. Syntax is described in the next section below.\nYou\u2019ll need to decide how you want to emit errors:\n  * Emit the error and abort. Very much panic-like usage. Served by [`abort!`](https://docs.rs/proc-macro-error/latest/proc_macro_error/macro.abort.html) and [`abort_call_site!`](https://docs.rs/proc-macro-error/latest/proc_macro_error/macro.abort_call_site.html).\n  * Emit the error but do not abort right away, looking for other errors to report. Served by [`emit_error!`](https://docs.rs/proc-macro-error/latest/proc_macro_error/macro.emit_error.html) and [`emit_call_site_error!`](https://docs.rs/proc-macro-error/latest/proc_macro_error/macro.emit_call_site_warning.html).\n\n\nYou **can** mix these usages.\n`abort` and `emit_error` take a \u201csource span\u201d as the first argument. This source will be used to highlight the place the error originates from. It must be one of:\n  * _Something_ that implements [`ToTokens`](https://docs.rs/quote/1.0.3/quote/trait.ToTokens.html) (most types in `syn` and `proc-macro2` do). This source is the preferable one since it doesn\u2019t lose span information on multi-token spans, see [this issue](https://gitlab.com/CreepySkeleton/proc-macro-error/-/issues/6) for details.\n  * [`proc_macro::Span`](https://doc.rust-lang.org/proc_macro/struct.Span.html)\n  * [`proc-macro2::Span`](https://docs.rs/proc-macro2/1.0.10/proc_macro2/struct.Span.html)\n\n\nThe rest is your message in format-like style.\nSee [the next section](https://docs.rs/proc-macro-error/latest/proc_macro_error/#syntax-1) for detailed syntax.\n  * [`abort!`](https://docs.rs/proc-macro-error/latest/proc_macro_error/macro.abort.html):\nVery much panic-like usage - abort right away and show the error. Expands to [`!`](https://doc.rust-lang.org/std/primitive.never.html) (never type).\n  * [`abort_call_site!`](https://docs.rs/proc-macro-error/latest/proc_macro_error/macro.abort_call_site.html):\nShortcut for `abort!(Span::call_site(), ...)`. Expands to [`!`](https://doc.rust-lang.org/std/primitive.never.html) (never type).\n  * [`emit_error!`](https://docs.rs/proc-macro-error/latest/proc_macro_error/macro.emit_error.html):\n[`proc_macro::Diagnostic`](https://doc.rust-lang.org/proc_macro/struct.Diagnostic.html)-like usage - emit the error but keep going, looking for other errors to report. The compilation will fail nonetheless. Expands to [`()`](https://doc.rust-lang.org/std/primitive.unit.html) (unit type).\n  * [`emit_call_site_error!`](https://docs.rs/proc-macro-error/latest/proc_macro_error/macro.emit_call_site_warning.html):\nShortcut for `emit_error!(Span::call_site(), ...)`. Expands to [`()`](https://doc.rust-lang.org/std/primitive.unit.html) (unit type).\n  * [`emit_warning!`](https://docs.rs/proc-macro-error/latest/proc_macro_error/macro.emit_warning.html):\nLike `emit_error!` but emit a warning instead of error. The compilation won\u2019t fail because of warnings. Expands to [`()`](https://doc.rust-lang.org/std/primitive.unit.html) (unit type).\n**Beware** : warnings are nightly only, they are completely ignored on stable.\n  * [`emit_call_site_warning!`](https://docs.rs/proc-macro-error/latest/proc_macro_error/macro.emit_call_site_error.html):\nShortcut for `emit_warning!(Span::call_site(), ...)`. Expands to [`()`](https://doc.rust-lang.org/std/primitive.unit.html) (unit type).\n  * [`diagnostic`](https://docs.rs/proc-macro-error/latest/proc_macro_error/struct.Diagnostic.html):\nBuild an instance of `Diagnostic` in format-like style.\n\n\n##### [\u00a7](https://docs.rs/proc-macro-error/latest/proc_macro_error/#syntax-1)Syntax\nAll the macros have pretty much the same syntax:\n  1. [\u24d8](https://docs.rs/proc-macro-error/latest/proc_macro_error/ \"This example is not tested\")```\nabort!(single_expr)\n```\n\nShortcut for `Diagnostic::from(expr).abort()`.\n  2. [\u24d8](https://docs.rs/proc-macro-error/latest/proc_macro_error/ \"This example is not tested\")```\nabort!(span, message)\n```\n\nThe first argument is an expression the span info should be taken from.\nThe second argument is the error message, it must implement [`ToString`](https://doc.rust-lang.org/std/string/trait.ToString.html).\n  3. [\u24d8](https://docs.rs/proc-macro-error/latest/proc_macro_error/ \"This example is not tested\")```\nabort!(span, format_literal, format_args...)\n```\n\nThis form is pretty much the same as 2, except `format!(format_literal, format_args...)` will be used to for the message instead of [`ToString`](https://doc.rust-lang.org/std/string/trait.ToString.html).\n\n\nThat\u2019s it. `abort!`, `emit_warning`, `emit_error` share this exact syntax.\n`abort_call_site!`, `emit_call_site_warning`, `emit_call_site_error` lack 1 form and do not take span in 2\u2019th and 3\u2019th forms. Those are essentially shortcuts for `macro!(Span::call_site(), args...)`.\n`diagnostic!` requires a [`Level`](https://docs.rs/proc-macro-error/latest/proc_macro_error/enum.Level.html \"enum proc_macro_error::Level\") instance between `span` and second argument (1\u2019th form is the same).\n> **Important!**\n> If you have some type from `proc_macro` or `syn` to point to, do not call `.span()` on it but rather use it directly:\n> ```\nlet ty: syn::Type = syn::parse2(input).unwrap();\nabort!(ty, \"BOOM\");\n//   ^^ <-- avoid .span()\n```\n\n> `.span()` calls work too, but you may experience regressions in message quality.\n##### [\u00a7](https://docs.rs/proc-macro-error/latest/proc_macro_error/#note-attachments)Note attachments\n  1. Every macro can have \u201cnote\u201d attachments (only 2 and 3 form).\n\n\n[\u24d8](https://docs.rs/proc-macro-error/latest/proc_macro_error/ \"This example is not tested\")```\nlet opt_help = if have_some_info { Some(\"did you mean `this`?\") } else { None };\nabort!(\n  span, message; // <--- attachments start with `;` (semicolon)\n  help = \"format {} {}\", \"arg1\", \"arg2\"; // <--- every attachment ends with `;`,\n                      //   maybe except the last one\n  note = \"to_string\"; // <--- one arg uses `.to_string()` instead of `format!()`\n  yay = \"I see what {} did here\", \"you\"; // <--- \"help =\" and \"hint =\" are mapped\n                      // to Diagnostic::help,\n                      // anything else is Diagnostic::note\n  wow = note_span => \"custom span\"; // <--- attachments can have their own span\n                   //   it takes effect only on nightly though\n  hint =? opt_help; // <-- \"optional\" attachment, get displayed only if `Some`\n           //   must be single `Option` expression\n  note =? note_span => opt_help // <-- optional attachments can have custom spans too\n);\n```\n\n#### [\u00a7](https://docs.rs/proc-macro-error/latest/proc_macro_error/#diagnostic-type)Diagnostic type\n[`Diagnostic`](https://docs.rs/proc-macro-error/latest/proc_macro_error/struct.Diagnostic.html) type is intentionally designed to be API compatible with [`proc_macro::Diagnostic`](https://doc.rust-lang.org/proc_macro/struct.Diagnostic.html). Not all API is implemented, only the part that can be reasonably implemented on stable.\n## Re-exports[\u00a7](https://docs.rs/proc-macro-error/latest/proc_macro_error/#reexports)\n\n`pub use crate::dummy::append_dummy[](https://docs.rs/proc-macro-error/latest/proc_macro_error/dummy/fn.append_dummy.html \"fn proc_macro_error::dummy::append_dummy\");`\n\n\n`pub use crate::dummy::set_dummy[](https://docs.rs/proc-macro-error/latest/proc_macro_error/dummy/fn.set_dummy.html \"fn proc_macro_error::dummy::set_dummy\");`\n\n## Modules[\u00a7](https://docs.rs/proc-macro-error/latest/proc_macro_error/#modules)\n\n[dummy](https://docs.rs/proc-macro-error/latest/proc_macro_error/dummy/index.html \"mod proc_macro_error::dummy\")\n    Facility to emit dummy implementations (or whatever) in case an error happen.\n## Macros[\u00a7](https://docs.rs/proc-macro-error/latest/proc_macro_error/#macros-1)\n\n[abort](https://docs.rs/proc-macro-error/latest/proc_macro_error/macro.abort.html \"macro proc_macro_error::abort\")\n    Abort proc-macro execution right now and display the error.\n\n[abort_call_site](https://docs.rs/proc-macro-error/latest/proc_macro_error/macro.abort_call_site.html \"macro proc_macro_error::abort_call_site\")\n    Shortcut for `abort!(Span::call_site(), msg...)`. This macro is still preferable over plain panic, panics are not for error reporting.\n\n[diagnostic](https://docs.rs/proc-macro-error/latest/proc_macro_error/macro.diagnostic.html \"macro proc_macro_error::diagnostic\")\n    Build [`Diagnostic`](https://docs.rs/proc-macro-error/latest/proc_macro_error/struct.Diagnostic.html) instance from provided arguments.\n\n[emit_call_site_error](https://docs.rs/proc-macro-error/latest/proc_macro_error/macro.emit_call_site_error.html \"macro proc_macro_error::emit_call_site_error\")\n    Shortcut for `emit_error!(Span::call_site(), ...)`. This macro is still preferable over plain panic, panics are not for error reporting..\n\n[emit_call_site_warning](https://docs.rs/proc-macro-error/latest/proc_macro_error/macro.emit_call_site_warning.html \"macro proc_macro_error::emit_call_site_warning\")\n    Shortcut for `emit_warning!(Span::call_site(), ...)`.\n\n[emit_error](https://docs.rs/proc-macro-error/latest/proc_macro_error/macro.emit_error.html \"macro proc_macro_error::emit_error\")\n    Emit an error while not aborting the proc-macro right away.\n\n[emit_warning](https://docs.rs/proc-macro-error/latest/proc_macro_error/macro.emit_warning.html \"macro proc_macro_error::emit_warning\")\n    Emit a warning. Warnings are not errors and compilation won\u2019t fail because of them.\n## Structs[\u00a7](https://docs.rs/proc-macro-error/latest/proc_macro_error/#structs)\n\n[Diagnostic](https://docs.rs/proc-macro-error/latest/proc_macro_error/struct.Diagnostic.html \"struct proc_macro_error::Diagnostic\")\n    Represents a single diagnostic message\n\n[SpanRange](https://docs.rs/proc-macro-error/latest/proc_macro_error/struct.SpanRange.html \"struct proc_macro_error::SpanRange\")\n\n## Enums[\u00a7](https://docs.rs/proc-macro-error/latest/proc_macro_error/#enums)\n\n[Level](https://docs.rs/proc-macro-error/latest/proc_macro_error/enum.Level.html \"enum proc_macro_error::Level\")\n    Represents a diagnostic level\n## Traits[\u00a7](https://docs.rs/proc-macro-error/latest/proc_macro_error/#traits)\n\n[DiagnosticExt](https://docs.rs/proc-macro-error/latest/proc_macro_error/trait.DiagnosticExt.html \"trait proc_macro_error::DiagnosticExt\")\n    A collection of methods that do not exist in `proc_macro::Diagnostic` but still useful to have around.\n\n[OptionExt](https://docs.rs/proc-macro-error/latest/proc_macro_error/trait.OptionExt.html \"trait proc_macro_error::OptionExt\")\n    This traits expands `Option` with some handy shortcuts.\n\n[ResultExt](https://docs.rs/proc-macro-error/latest/proc_macro_error/trait.ResultExt.html \"trait proc_macro_error::ResultExt\")\n    This traits expands `Result<T, Into<Diagnostic>>` with some handy shortcuts.\n## Functions[\u00a7](https://docs.rs/proc-macro-error/latest/proc_macro_error/#functions)\n\n[abort_if_dirty](https://docs.rs/proc-macro-error/latest/proc_macro_error/fn.abort_if_dirty.html \"fn proc_macro_error::abort_if_dirty\")\n    Abort macro execution and display all the emitted errors, if any.\n## Attribute Macros[\u00a7](https://docs.rs/proc-macro-error/latest/proc_macro_error/#attributes)\n\n[proc_macro_error](https://docs.rs/proc-macro-error/latest/proc_macro_error/attr.proc_macro_error.html \"attr proc_macro_error::proc_macro_error\")\n\n",
            "markdown_with_citations": "[](https://docs.rs/proc-macro-error/latest/proc_macro_error/all.html \"show sidebar\")\n# Crate proc_macro_errorCopy item path\nSettings\u27e81\u27e9\nHelp\u27e82\u27e9\nSummarySource\u27e83\u27e9\nExpand description\n## \u00a7\u27e84\u27e9proc-macro-error\nThis crate aims to make error reporting in proc-macros simple and easy to use. Migrate from `panic!`-based errors for as little effort as possible!\n(Also, you can explicitly append a dummy token stream\u27e85\u27e9 to your errors).\nTo achieve his, this crate serves as a tiny shim around `proc_macro::Diagnostic` and `compile_error!`. It detects the best way of emitting available based on compiler\u2019s version. When the underlying diagnostic type is finally stabilized, this crate will simply be delegating to it requiring no changes in your code!\nSo you can just use this crate and have _both_ some of `proc_macro::Diagnostic` functionality available on stable ahead of time _and_ your error-reporting code future-proof.\n### \u00a7\u27e86\u27e9Cargo features\nThis crate provides _enabled by default_ `syn-error` feature that gates `impl From<syn::Error> for Diagnostic` conversion. If you don\u2019t use `syn` and want to cut off some of compilation time, you can disable it via\n```\n[dependencies]\nproc-macro-error = { version = \"1\", default-features = false }\n```\n\n* **Please note that disabling this feature makes sense only if you don\u2019t depend on`syn` directly or indirectly, and you very likely do.**\n### \u00a7\u27e87\u27e9Real world examples\n  * `structopt-derive`\u27e88\u27e9 (abort-like usage)\n  * `auto-impl`\u27e89\u27e9 (emit-like usage)\n\n\n### \u00a7\u27e810\u27e9Limitations\n  * Warnings are emitted only on nightly, they are ignored on stable.\n  * \u201chelp\u201d suggestions can\u2019t have their own span info on stable, (essentially inheriting the parent span).\n  * If a panic occurs somewhere in your macro no errors will be displayed. This is not a technical limitation but rather intentional design. `panic` is not for error reporting.\n\n\n#### \u00a7\u27e811\u27e9`#[proc_macro_error]` attribute\n**This attribute MUST be present on the top level of your macro** (the function annotated with any of `#[proc_macro]`, `#[proc_macro_derive]`, `#[proc_macro_attribute]`).\nThis attribute performs the setup and cleanup necessary to make things work.\nIn most cases you\u2019ll need the simple `#[proc_macro_error]` form without any additional settings. Feel free to skip the \u201cSyntax\u201d section\u27e812\u27e9.\n##### \u00a7\u27e813\u27e9Syntax\n`#[proc_macro_error]` or `#[proc_macro_error(settings...)]`, where `settings...` is a comma-separated list of:\n  * `proc_macro_hack`:\nIn order to correctly cooperate with `#[proc_macro_hack]`, `#[proc_macro_error]` attribute must be placed _before_ (above) it, like this:\n```\n#[proc_macro_error]\n#[proc_macro_hack]\n#[proc_macro]\nfn my_macro(input: TokenStream) -> TokenStream {\n  unimplemented!()\n}\n```\n\nIf, for some reason, you can\u2019t place it like that you can use `#[proc_macro_error(proc_macro_hack)]` instead.\n## \u00a7\u27e814\u27e9Note\nIf `proc-macro-hack` was detected (by any means) `allow_not_macro` and `assert_unwind_safe` will be applied automatically.\n  * `allow_not_macro`:\nBy default, the attribute checks that it\u2019s applied to a proc-macro. If none of `#[proc_macro]`, `#[proc_macro_derive]` nor `#[proc_macro_attribute]` are present it will panic. It\u2019s the intention - this crate is supposed to be used only with proc-macros.\nThis setting is made to bypass the check, useful in certain circumstances.\nPay attention: the function this attribute is applied to must return `proc_macro::TokenStream`.\nThis setting is implied if `proc-macro-hack` was detected.\n  * `assert_unwind_safe`:\nBy default, your code must be unwind safe\u27e815\u27e9. If your code is not unwind safe, but you believe it\u2019s correct, you can use this setting to bypass the check. You would need this for code that uses `lazy_static` or `thread_local` with `Cell/RefCell` inside (and the like).\nThis setting is implied if `#[proc_macro_error]` is applied to a function marked as `#[proc_macro]`, `#[proc_macro_derive]` or `#[proc_macro_attribute]`.\nThis setting is also implied if `proc-macro-hack` was detected.\n\n\n### \u00a7\u27e812\u27e9Macros\nMost of the time you want to use the macros. Syntax is described in the next section below.\nYou\u2019ll need to decide how you want to emit errors:\n  * Emit the error and abort. Very much panic-like usage. Served by `abort!`\u27e816\u27e9 and `abort_call_site!`\u27e817\u27e9.\n  * Emit the error but do not abort right away, looking for other errors to report. Served by `emit_error!`\u27e818\u27e9 and `emit_call_site_error!`\u27e819\u27e9.\n\n\nYou **can** mix these usages.\n`abort` and `emit_error` take a \u201csource span\u201d as the first argument. This source will be used to highlight the place the error originates from. It must be one of:\n  * _Something_ that implements `ToTokens`\u27e820\u27e9 (most types in `syn` and `proc-macro2` do). This source is the preferable one since it doesn\u2019t lose span information on multi-token spans, see this issue\u27e821\u27e9 for details.\n  * `proc_macro::Span`\u27e822\u27e9\n  * `proc-macro2::Span`\u27e823\u27e9\n\n\nThe rest is your message in format-like style.\nSee the next section\u27e824\u27e9 for detailed syntax.\n  * `abort!`\u27e816\u27e9:\nVery much panic-like usage - abort right away and show the error. Expands to `!`\u27e825\u27e9 (never type).\n  * `abort_call_site!`\u27e817\u27e9:\nShortcut for `abort!(Span::call_site(), ...)`. Expands to `!`\u27e825\u27e9 (never type).\n  * `emit_error!`\u27e818\u27e9:\n`proc_macro::Diagnostic`\u27e826\u27e9-like usage - emit the error but keep going, looking for other errors to report. The compilation will fail nonetheless. Expands to `()`\u27e827\u27e9 (unit type).\n  * `emit_call_site_error!`\u27e819\u27e9:\nShortcut for `emit_error!(Span::call_site(), ...)`. Expands to `()`\u27e827\u27e9 (unit type).\n  * `emit_warning!`\u27e828\u27e9:\nLike `emit_error!` but emit a warning instead of error. The compilation won\u2019t fail because of warnings. Expands to `()`\u27e827\u27e9 (unit type).\n**Beware** : warnings are nightly only, they are completely ignored on stable.\n  * `emit_call_site_warning!`\u27e829\u27e9:\nShortcut for `emit_warning!(Span::call_site(), ...)`. Expands to `()`\u27e827\u27e9 (unit type).\n  * `diagnostic`\u27e830\u27e9:\nBuild an instance of `Diagnostic` in format-like style.\n\n\n##### \u00a7\u27e824\u27e9Syntax\nAll the macros have pretty much the same syntax:\n  1. \u24d8\u27e831\u27e9```\nabort!(single_expr)\n```\n\nShortcut for `Diagnostic::from(expr).abort()`.\n  2. \u24d8\u27e831\u27e9```\nabort!(span, message)\n```\n\nThe first argument is an expression the span info should be taken from.\nThe second argument is the error message, it must implement `ToString`\u27e832\u27e9.\n  3. \u24d8\u27e831\u27e9```\nabort!(span, format_literal, format_args...)\n```\n\nThis form is pretty much the same as 2, except `format!(format_literal, format_args...)` will be used to for the message instead of `ToString`\u27e832\u27e9.\n\n\nThat\u2019s it. `abort!`, `emit_warning`, `emit_error` share this exact syntax.\n`abort_call_site!`, `emit_call_site_warning`, `emit_call_site_error` lack 1 form and do not take span in 2\u2019th and 3\u2019th forms. Those are essentially shortcuts for `macro!(Span::call_site(), args...)`.\n`diagnostic!` requires a `Level`\u27e833\u27e9 instance between `span` and second argument (1\u2019th form is the same).\n> **Important!**\n> If you have some type from `proc_macro` or `syn` to point to, do not call `.span()` on it but rather use it directly:\n> ```\nlet ty: syn::Type = syn::parse2(input).unwrap();\nabort!(ty, \"BOOM\");\n//   ^^ <-- avoid .span()\n```\n\n> `.span()` calls work too, but you may experience regressions in message quality.\n##### \u00a7\u27e834\u27e9Note attachments\n  1. Every macro can have \u201cnote\u201d attachments (only 2 and 3 form).\n\n\n\u24d8\u27e831\u27e9```\nlet opt_help = if have_some_info { Some(\"did you mean `this`?\") } else { None };\nabort!(\n  span, message; // <--- attachments start with `;` (semicolon)\n  help = \"format {} {}\", \"arg1\", \"arg2\"; // <--- every attachment ends with `;`,\n                      //   maybe except the last one\n  note = \"to_string\"; // <--- one arg uses `.to_string()` instead of `format!()`\n  yay = \"I see what {} did here\", \"you\"; // <--- \"help =\" and \"hint =\" are mapped\n                      // to Diagnostic::help,\n                      // anything else is Diagnostic::note\n  wow = note_span => \"custom span\"; // <--- attachments can have their own span\n                   //   it takes effect only on nightly though\n  hint =? opt_help; // <-- \"optional\" attachment, get displayed only if `Some`\n           //   must be single `Option` expression\n  note =? note_span => opt_help // <-- optional attachments can have custom spans too\n);\n```\n\n#### \u00a7\u27e835\u27e9Diagnostic type\n`Diagnostic`\u27e830\u27e9 type is intentionally designed to be API compatible with `proc_macro::Diagnostic`\u27e826\u27e9. Not all API is implemented, only the part that can be reasonably implemented on stable.\n## Re-exports\u00a7\u27e836\u27e9\n\n`pub use crate::dummy::append_dummy[](https://docs.rs/proc-macro-error/latest/proc_macro_error/dummy/fn.append_dummy.html \"fn proc_macro_error::dummy::append_dummy\");`\n\n\n`pub use crate::dummy::set_dummy[](https://docs.rs/proc-macro-error/latest/proc_macro_error/dummy/fn.set_dummy.html \"fn proc_macro_error::dummy::set_dummy\");`\n\n## Modules\u00a7\u27e837\u27e9\n\ndummy\u27e85\u27e9\n    Facility to emit dummy implementations (or whatever) in case an error happen.\n## Macros\u00a7\u27e838\u27e9\n\nabort\u27e816\u27e9\n    Abort proc-macro execution right now and display the error.\n\nabort_call_site\u27e817\u27e9\n    Shortcut for `abort!(Span::call_site(), msg...)`. This macro is still preferable over plain panic, panics are not for error reporting.\n\ndiagnostic\u27e839\u27e9\n    Build `Diagnostic`\u27e830\u27e9 instance from provided arguments.\n\nemit_call_site_error\u27e829\u27e9\n    Shortcut for `emit_error!(Span::call_site(), ...)`. This macro is still preferable over plain panic, panics are not for error reporting..\n\nemit_call_site_warning\u27e819\u27e9\n    Shortcut for `emit_warning!(Span::call_site(), ...)`.\n\nemit_error\u27e818\u27e9\n    Emit an error while not aborting the proc-macro right away.\n\nemit_warning\u27e828\u27e9\n    Emit a warning. Warnings are not errors and compilation won\u2019t fail because of them.\n## Structs\u00a7\u27e840\u27e9\n\nDiagnostic\u27e830\u27e9\n    Represents a single diagnostic message\n\nSpanRange\u27e841\u27e9\n\n## Enums\u00a7\u27e842\u27e9\n\nLevel\u27e833\u27e9\n    Represents a diagnostic level\n## Traits\u00a7\u27e843\u27e9\n\nDiagnosticExt\u27e844\u27e9\n    A collection of methods that do not exist in `proc_macro::Diagnostic` but still useful to have around.\n\nOptionExt\u27e845\u27e9\n    This traits expands `Option` with some handy shortcuts.\n\nResultExt\u27e846\u27e9\n    This traits expands `Result<T, Into<Diagnostic>>` with some handy shortcuts.\n## Functions\u00a7\u27e847\u27e9\n\nabort_if_dirty\u27e848\u27e9\n    Abort macro execution and display all the emitted errors, if any.\n## Attribute Macros\u00a7\u27e849\u27e9\n\nproc_macro_error\u27e850\u27e9\n\n",
            "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://docs.rs/proc-macro-error/latest/settings.html: Settings\n\u27e82\u27e9 https://docs.rs/proc-macro-error/latest/help.html: Help\n\u27e83\u27e9 https://docs.rs/proc-macro-error/latest/src/proc_macro_error/lib.rs.html#1-560: Source\n\u27e84\u27e9 https://docs.rs/proc-macro-error/latest/proc_macro_error/#proc-macro-error: \u00a7\n\u27e85\u27e9 https://docs.rs/proc-macro-error/latest/proc_macro_error/dummy/index.html: append a dummy token stream\n\u27e86\u27e9 https://docs.rs/proc-macro-error/latest/proc_macro_error/#cargo-features: \u00a7\n\u27e87\u27e9 https://docs.rs/proc-macro-error/latest/proc_macro_error/#real-world-examples: \u00a7\n\u27e88\u27e9 https://github.com/TeXitoi/structopt/tree/master/structopt-derive: `structopt-derive`\n\u27e89\u27e9 https://github.com/auto-impl-rs/auto_impl/: `auto-impl`\n\u27e810\u27e9 https://docs.rs/proc-macro-error/latest/proc_macro_error/#limitations: \u00a7\n\u27e811\u27e9 https://docs.rs/proc-macro-error/latest/proc_macro_error/#proc_macro_error-attribute: \u00a7\n\u27e812\u27e9 https://docs.rs/proc-macro-error/latest/proc_macro_error/#macros: skip the \u201cSyntax\u201d section\n\u27e813\u27e9 https://docs.rs/proc-macro-error/latest/proc_macro_error/#syntax: \u00a7\n\u27e814\u27e9 https://docs.rs/proc-macro-error/latest/proc_macro_error/#note: \u00a7\n\u27e815\u27e9 https://doc.rust-lang.org/std/panic/trait.UnwindSafe.html#what-is-unwind-safety: unwind safe\n\u27e816\u27e9 https://docs.rs/proc-macro-error/latest/proc_macro_error/macro.abort.html: `abort!`\n\u27e817\u27e9 https://docs.rs/proc-macro-error/latest/proc_macro_error/macro.abort_call_site.html: `abort_call_site!`\n\u27e818\u27e9 https://docs.rs/proc-macro-error/latest/proc_macro_error/macro.emit_error.html: `emit_error!`\n\u27e819\u27e9 https://docs.rs/proc-macro-error/latest/proc_macro_error/macro.emit_call_site_warning.html: `emit_call_site_error!`\n\u27e820\u27e9 https://docs.rs/quote/1.0.3/quote/trait.ToTokens.html: `ToTokens`\n\u27e821\u27e9 https://gitlab.com/CreepySkeleton/proc-macro-error/-/issues/6: this issue\n\u27e822\u27e9 https://doc.rust-lang.org/proc_macro/struct.Span.html: `proc_macro::Span`\n\u27e823\u27e9 https://docs.rs/proc-macro2/1.0.10/proc_macro2/struct.Span.html: `proc-macro2::Span`\n\u27e824\u27e9 https://docs.rs/proc-macro-error/latest/proc_macro_error/#syntax-1: the next section\n\u27e825\u27e9 https://doc.rust-lang.org/std/primitive.never.html: `!`\n\u27e826\u27e9 https://doc.rust-lang.org/proc_macro/struct.Diagnostic.html: `proc_macro::Diagnostic`\n\u27e827\u27e9 https://doc.rust-lang.org/std/primitive.unit.html: `()`\n\u27e828\u27e9 https://docs.rs/proc-macro-error/latest/proc_macro_error/macro.emit_warning.html: `emit_warning!`\n\u27e829\u27e9 https://docs.rs/proc-macro-error/latest/proc_macro_error/macro.emit_call_site_error.html: `emit_call_site_warning!`\n\u27e830\u27e9 https://docs.rs/proc-macro-error/latest/proc_macro_error/struct.Diagnostic.html: `diagnostic`\n\u27e831\u27e9 https://docs.rs/proc-macro-error/latest/proc_macro_error/: This example is not tested - \u24d8\n\u27e832\u27e9 https://doc.rust-lang.org/std/string/trait.ToString.html: `ToString`\n\u27e833\u27e9 https://docs.rs/proc-macro-error/latest/proc_macro_error/enum.Level.html: enum proc_macro_error::Level - `Level`\n\u27e834\u27e9 https://docs.rs/proc-macro-error/latest/proc_macro_error/#note-attachments: \u00a7\n\u27e835\u27e9 https://docs.rs/proc-macro-error/latest/proc_macro_error/#diagnostic-type: \u00a7\n\u27e836\u27e9 https://docs.rs/proc-macro-error/latest/proc_macro_error/#reexports: \u00a7\n\u27e837\u27e9 https://docs.rs/proc-macro-error/latest/proc_macro_error/#modules: \u00a7\n\u27e838\u27e9 https://docs.rs/proc-macro-error/latest/proc_macro_error/#macros-1: \u00a7\n\u27e839\u27e9 https://docs.rs/proc-macro-error/latest/proc_macro_error/macro.diagnostic.html: macro proc_macro_error::diagnostic - diagnostic\n\u27e840\u27e9 https://docs.rs/proc-macro-error/latest/proc_macro_error/#structs: \u00a7\n\u27e841\u27e9 https://docs.rs/proc-macro-error/latest/proc_macro_error/struct.SpanRange.html: struct proc_macro_error::SpanRange - SpanRange\n\u27e842\u27e9 https://docs.rs/proc-macro-error/latest/proc_macro_error/#enums: \u00a7\n\u27e843\u27e9 https://docs.rs/proc-macro-error/latest/proc_macro_error/#traits: \u00a7\n\u27e844\u27e9 https://docs.rs/proc-macro-error/latest/proc_macro_error/trait.DiagnosticExt.html: trait proc_macro_error::DiagnosticExt - DiagnosticExt\n\u27e845\u27e9 https://docs.rs/proc-macro-error/latest/proc_macro_error/trait.OptionExt.html: trait proc_macro_error::OptionExt - OptionExt\n\u27e846\u27e9 https://docs.rs/proc-macro-error/latest/proc_macro_error/trait.ResultExt.html: trait proc_macro_error::ResultExt - ResultExt\n\u27e847\u27e9 https://docs.rs/proc-macro-error/latest/proc_macro_error/#functions: \u00a7\n\u27e848\u27e9 https://docs.rs/proc-macro-error/latest/proc_macro_error/fn.abort_if_dirty.html: fn proc_macro_error::abort_if_dirty - abort_if_dirty\n\u27e849\u27e9 https://docs.rs/proc-macro-error/latest/proc_macro_error/#attributes: \u00a7\n\u27e850\u27e9 https://docs.rs/proc-macro-error/latest/proc_macro_error/attr.proc_macro_error.html: attr proc_macro_error::proc_macro_error - proc_macro_error\n",
            "fit_markdown": "",
            "fit_html": ""
          },
          "downloads": 0,
          "github_stars": 0,
          "dependencies": [],
          "features": {},
          "code_snippets": [],
          "readme_sections": {},
          "librs_downloads": null,
          "source": "crates.io",
          "enhanced_scraping": {},
          "enhanced_features": [],
          "enhanced_dependencies": []
        },
        "enriched_crate": {
          "name": "proc-macro-error",
          "version": "1.0.4",
          "description": "ALLOW: Positive community sentiment",
          "repository": "",
          "keywords": [],
          "categories": [],
          "readme": {
            "raw_markdown": "[](https://docs.rs/proc-macro-error/latest/proc_macro_error/all.html \"show sidebar\")\n# Crate proc_macro_errorCopy item path\n[Settings](https://docs.rs/proc-macro-error/latest/settings.html)\n[Help](https://docs.rs/proc-macro-error/latest/help.html)\nSummary[Source](https://docs.rs/proc-macro-error/latest/src/proc_macro_error/lib.rs.html#1-560)\nExpand description\n## [\u00a7](https://docs.rs/proc-macro-error/latest/proc_macro_error/#proc-macro-error)proc-macro-error\nThis crate aims to make error reporting in proc-macros simple and easy to use. Migrate from `panic!`-based errors for as little effort as possible!\n(Also, you can explicitly [append a dummy token stream](https://docs.rs/proc-macro-error/latest/proc_macro_error/dummy/index.html) to your errors).\nTo achieve his, this crate serves as a tiny shim around `proc_macro::Diagnostic` and `compile_error!`. It detects the best way of emitting available based on compiler\u2019s version. When the underlying diagnostic type is finally stabilized, this crate will simply be delegating to it requiring no changes in your code!\nSo you can just use this crate and have _both_ some of `proc_macro::Diagnostic` functionality available on stable ahead of time _and_ your error-reporting code future-proof.\n### [\u00a7](https://docs.rs/proc-macro-error/latest/proc_macro_error/#cargo-features)Cargo features\nThis crate provides _enabled by default_ `syn-error` feature that gates `impl From<syn::Error> for Diagnostic` conversion. If you don\u2019t use `syn` and want to cut off some of compilation time, you can disable it via\n```\n[dependencies]\nproc-macro-error = { version = \"1\", default-features = false }\n```\n\n* **Please note that disabling this feature makes sense only if you don\u2019t depend on`syn` directly or indirectly, and you very likely do.**\n### [\u00a7](https://docs.rs/proc-macro-error/latest/proc_macro_error/#real-world-examples)Real world examples\n  * [`structopt-derive`](https://github.com/TeXitoi/structopt/tree/master/structopt-derive) (abort-like usage)\n  * [`auto-impl`](https://github.com/auto-impl-rs/auto_impl/) (emit-like usage)\n\n\n### [\u00a7](https://docs.rs/proc-macro-error/latest/proc_macro_error/#limitations)Limitations\n  * Warnings are emitted only on nightly, they are ignored on stable.\n  * \u201chelp\u201d suggestions can\u2019t have their own span info on stable, (essentially inheriting the parent span).\n  * If a panic occurs somewhere in your macro no errors will be displayed. This is not a technical limitation but rather intentional design. `panic` is not for error reporting.\n\n\n#### [\u00a7](https://docs.rs/proc-macro-error/latest/proc_macro_error/#proc_macro_error-attribute)`#[proc_macro_error]` attribute\n**This attribute MUST be present on the top level of your macro** (the function annotated with any of `#[proc_macro]`, `#[proc_macro_derive]`, `#[proc_macro_attribute]`).\nThis attribute performs the setup and cleanup necessary to make things work.\nIn most cases you\u2019ll need the simple `#[proc_macro_error]` form without any additional settings. Feel free to [skip the \u201cSyntax\u201d section](https://docs.rs/proc-macro-error/latest/proc_macro_error/#macros).\n##### [\u00a7](https://docs.rs/proc-macro-error/latest/proc_macro_error/#syntax)Syntax\n`#[proc_macro_error]` or `#[proc_macro_error(settings...)]`, where `settings...` is a comma-separated list of:\n  * `proc_macro_hack`:\nIn order to correctly cooperate with `#[proc_macro_hack]`, `#[proc_macro_error]` attribute must be placed _before_ (above) it, like this:\n```\n#[proc_macro_error]\n#[proc_macro_hack]\n#[proc_macro]\nfn my_macro(input: TokenStream) -> TokenStream {\n  unimplemented!()\n}\n```\n\nIf, for some reason, you can\u2019t place it like that you can use `#[proc_macro_error(proc_macro_hack)]` instead.\n## [\u00a7](https://docs.rs/proc-macro-error/latest/proc_macro_error/#note)Note\nIf `proc-macro-hack` was detected (by any means) `allow_not_macro` and `assert_unwind_safe` will be applied automatically.\n  * `allow_not_macro`:\nBy default, the attribute checks that it\u2019s applied to a proc-macro. If none of `#[proc_macro]`, `#[proc_macro_derive]` nor `#[proc_macro_attribute]` are present it will panic. It\u2019s the intention - this crate is supposed to be used only with proc-macros.\nThis setting is made to bypass the check, useful in certain circumstances.\nPay attention: the function this attribute is applied to must return `proc_macro::TokenStream`.\nThis setting is implied if `proc-macro-hack` was detected.\n  * `assert_unwind_safe`:\nBy default, your code must be [unwind safe](https://doc.rust-lang.org/std/panic/trait.UnwindSafe.html#what-is-unwind-safety). If your code is not unwind safe, but you believe it\u2019s correct, you can use this setting to bypass the check. You would need this for code that uses `lazy_static` or `thread_local` with `Cell/RefCell` inside (and the like).\nThis setting is implied if `#[proc_macro_error]` is applied to a function marked as `#[proc_macro]`, `#[proc_macro_derive]` or `#[proc_macro_attribute]`.\nThis setting is also implied if `proc-macro-hack` was detected.\n\n\n### [\u00a7](https://docs.rs/proc-macro-error/latest/proc_macro_error/#macros)Macros\nMost of the time you want to use the macros. Syntax is described in the next section below.\nYou\u2019ll need to decide how you want to emit errors:\n  * Emit the error and abort. Very much panic-like usage. Served by [`abort!`](https://docs.rs/proc-macro-error/latest/proc_macro_error/macro.abort.html) and [`abort_call_site!`](https://docs.rs/proc-macro-error/latest/proc_macro_error/macro.abort_call_site.html).\n  * Emit the error but do not abort right away, looking for other errors to report. Served by [`emit_error!`](https://docs.rs/proc-macro-error/latest/proc_macro_error/macro.emit_error.html) and [`emit_call_site_error!`](https://docs.rs/proc-macro-error/latest/proc_macro_error/macro.emit_call_site_warning.html).\n\n\nYou **can** mix these usages.\n`abort` and `emit_error` take a \u201csource span\u201d as the first argument. This source will be used to highlight the place the error originates from. It must be one of:\n  * _Something_ that implements [`ToTokens`](https://docs.rs/quote/1.0.3/quote/trait.ToTokens.html) (most types in `syn` and `proc-macro2` do). This source is the preferable one since it doesn\u2019t lose span information on multi-token spans, see [this issue](https://gitlab.com/CreepySkeleton/proc-macro-error/-/issues/6) for details.\n  * [`proc_macro::Span`](https://doc.rust-lang.org/proc_macro/struct.Span.html)\n  * [`proc-macro2::Span`](https://docs.rs/proc-macro2/1.0.10/proc_macro2/struct.Span.html)\n\n\nThe rest is your message in format-like style.\nSee [the next section](https://docs.rs/proc-macro-error/latest/proc_macro_error/#syntax-1) for detailed syntax.\n  * [`abort!`](https://docs.rs/proc-macro-error/latest/proc_macro_error/macro.abort.html):\nVery much panic-like usage - abort right away and show the error. Expands to [`!`](https://doc.rust-lang.org/std/primitive.never.html) (never type).\n  * [`abort_call_site!`](https://docs.rs/proc-macro-error/latest/proc_macro_error/macro.abort_call_site.html):\nShortcut for `abort!(Span::call_site(), ...)`. Expands to [`!`](https://doc.rust-lang.org/std/primitive.never.html) (never type).\n  * [`emit_error!`](https://docs.rs/proc-macro-error/latest/proc_macro_error/macro.emit_error.html):\n[`proc_macro::Diagnostic`](https://doc.rust-lang.org/proc_macro/struct.Diagnostic.html)-like usage - emit the error but keep going, looking for other errors to report. The compilation will fail nonetheless. Expands to [`()`](https://doc.rust-lang.org/std/primitive.unit.html) (unit type).\n  * [`emit_call_site_error!`](https://docs.rs/proc-macro-error/latest/proc_macro_error/macro.emit_call_site_warning.html):\nShortcut for `emit_error!(Span::call_site(), ...)`. Expands to [`()`](https://doc.rust-lang.org/std/primitive.unit.html) (unit type).\n  * [`emit_warning!`](https://docs.rs/proc-macro-error/latest/proc_macro_error/macro.emit_warning.html):\nLike `emit_error!` but emit a warning instead of error. The compilation won\u2019t fail because of warnings. Expands to [`()`](https://doc.rust-lang.org/std/primitive.unit.html) (unit type).\n**Beware** : warnings are nightly only, they are completely ignored on stable.\n  * [`emit_call_site_warning!`](https://docs.rs/proc-macro-error/latest/proc_macro_error/macro.emit_call_site_error.html):\nShortcut for `emit_warning!(Span::call_site(), ...)`. Expands to [`()`](https://doc.rust-lang.org/std/primitive.unit.html) (unit type).\n  * [`diagnostic`](https://docs.rs/proc-macro-error/latest/proc_macro_error/struct.Diagnostic.html):\nBuild an instance of `Diagnostic` in format-like style.\n\n\n##### [\u00a7](https://docs.rs/proc-macro-error/latest/proc_macro_error/#syntax-1)Syntax\nAll the macros have pretty much the same syntax:\n  1. [\u24d8](https://docs.rs/proc-macro-error/latest/proc_macro_error/ \"This example is not tested\")```\nabort!(single_expr)\n```\n\nShortcut for `Diagnostic::from(expr).abort()`.\n  2. [\u24d8](https://docs.rs/proc-macro-error/latest/proc_macro_error/ \"This example is not tested\")```\nabort!(span, message)\n```\n\nThe first argument is an expression the span info should be taken from.\nThe second argument is the error message, it must implement [`ToString`](https://doc.rust-lang.org/std/string/trait.ToString.html).\n  3. [\u24d8](https://docs.rs/proc-macro-error/latest/proc_macro_error/ \"This example is not tested\")```\nabort!(span, format_literal, format_args...)\n```\n\nThis form is pretty much the same as 2, except `format!(format_literal, format_args...)` will be used to for the message instead of [`ToString`](https://doc.rust-lang.org/std/string/trait.ToString.html).\n\n\nThat\u2019s it. `abort!`, `emit_warning`, `emit_error` share this exact syntax.\n`abort_call_site!`, `emit_call_site_warning`, `emit_call_site_error` lack 1 form and do not take span in 2\u2019th and 3\u2019th forms. Those are essentially shortcuts for `macro!(Span::call_site(), args...)`.\n`diagnostic!` requires a [`Level`](https://docs.rs/proc-macro-error/latest/proc_macro_error/enum.Level.html \"enum proc_macro_error::Level\") instance between `span` and second argument (1\u2019th form is the same).\n> **Important!**\n> If you have some type from `proc_macro` or `syn` to point to, do not call `.span()` on it but rather use it directly:\n> ```\nlet ty: syn::Type = syn::parse2(input).unwrap();\nabort!(ty, \"BOOM\");\n//   ^^ <-- avoid .span()\n```\n\n> `.span()` calls work too, but you may experience regressions in message quality.\n##### [\u00a7](https://docs.rs/proc-macro-error/latest/proc_macro_error/#note-attachments)Note attachments\n  1. Every macro can have \u201cnote\u201d attachments (only 2 and 3 form).\n\n\n[\u24d8](https://docs.rs/proc-macro-error/latest/proc_macro_error/ \"This example is not tested\")```\nlet opt_help = if have_some_info { Some(\"did you mean `this`?\") } else { None };\nabort!(\n  span, message; // <--- attachments start with `;` (semicolon)\n  help = \"format {} {}\", \"arg1\", \"arg2\"; // <--- every attachment ends with `;`,\n                      //   maybe except the last one\n  note = \"to_string\"; // <--- one arg uses `.to_string()` instead of `format!()`\n  yay = \"I see what {} did here\", \"you\"; // <--- \"help =\" and \"hint =\" are mapped\n                      // to Diagnostic::help,\n                      // anything else is Diagnostic::note\n  wow = note_span => \"custom span\"; // <--- attachments can have their own span\n                   //   it takes effect only on nightly though\n  hint =? opt_help; // <-- \"optional\" attachment, get displayed only if `Some`\n           //   must be single `Option` expression\n  note =? note_span => opt_help // <-- optional attachments can have custom spans too\n);\n```\n\n#### [\u00a7](https://docs.rs/proc-macro-error/latest/proc_macro_error/#diagnostic-type)Diagnostic type\n[`Diagnostic`](https://docs.rs/proc-macro-error/latest/proc_macro_error/struct.Diagnostic.html) type is intentionally designed to be API compatible with [`proc_macro::Diagnostic`](https://doc.rust-lang.org/proc_macro/struct.Diagnostic.html). Not all API is implemented, only the part that can be reasonably implemented on stable.\n## Re-exports[\u00a7](https://docs.rs/proc-macro-error/latest/proc_macro_error/#reexports)\n\n`pub use crate::dummy::append_dummy[](https://docs.rs/proc-macro-error/latest/proc_macro_error/dummy/fn.append_dummy.html \"fn proc_macro_error::dummy::append_dummy\");`\n\n\n`pub use crate::dummy::set_dummy[](https://docs.rs/proc-macro-error/latest/proc_macro_error/dummy/fn.set_dummy.html \"fn proc_macro_error::dummy::set_dummy\");`\n\n## Modules[\u00a7](https://docs.rs/proc-macro-error/latest/proc_macro_error/#modules)\n\n[dummy](https://docs.rs/proc-macro-error/latest/proc_macro_error/dummy/index.html \"mod proc_macro_error::dummy\")\n    Facility to emit dummy implementations (or whatever) in case an error happen.\n## Macros[\u00a7](https://docs.rs/proc-macro-error/latest/proc_macro_error/#macros-1)\n\n[abort](https://docs.rs/proc-macro-error/latest/proc_macro_error/macro.abort.html \"macro proc_macro_error::abort\")\n    Abort proc-macro execution right now and display the error.\n\n[abort_call_site](https://docs.rs/proc-macro-error/latest/proc_macro_error/macro.abort_call_site.html \"macro proc_macro_error::abort_call_site\")\n    Shortcut for `abort!(Span::call_site(), msg...)`. This macro is still preferable over plain panic, panics are not for error reporting.\n\n[diagnostic](https://docs.rs/proc-macro-error/latest/proc_macro_error/macro.diagnostic.html \"macro proc_macro_error::diagnostic\")\n    Build [`Diagnostic`](https://docs.rs/proc-macro-error/latest/proc_macro_error/struct.Diagnostic.html) instance from provided arguments.\n\n[emit_call_site_error](https://docs.rs/proc-macro-error/latest/proc_macro_error/macro.emit_call_site_error.html \"macro proc_macro_error::emit_call_site_error\")\n    Shortcut for `emit_error!(Span::call_site(), ...)`. This macro is still preferable over plain panic, panics are not for error reporting..\n\n[emit_call_site_warning](https://docs.rs/proc-macro-error/latest/proc_macro_error/macro.emit_call_site_warning.html \"macro proc_macro_error::emit_call_site_warning\")\n    Shortcut for `emit_warning!(Span::call_site(), ...)`.\n\n[emit_error](https://docs.rs/proc-macro-error/latest/proc_macro_error/macro.emit_error.html \"macro proc_macro_error::emit_error\")\n    Emit an error while not aborting the proc-macro right away.\n\n[emit_warning](https://docs.rs/proc-macro-error/latest/proc_macro_error/macro.emit_warning.html \"macro proc_macro_error::emit_warning\")\n    Emit a warning. Warnings are not errors and compilation won\u2019t fail because of them.\n## Structs[\u00a7](https://docs.rs/proc-macro-error/latest/proc_macro_error/#structs)\n\n[Diagnostic](https://docs.rs/proc-macro-error/latest/proc_macro_error/struct.Diagnostic.html \"struct proc_macro_error::Diagnostic\")\n    Represents a single diagnostic message\n\n[SpanRange](https://docs.rs/proc-macro-error/latest/proc_macro_error/struct.SpanRange.html \"struct proc_macro_error::SpanRange\")\n\n## Enums[\u00a7](https://docs.rs/proc-macro-error/latest/proc_macro_error/#enums)\n\n[Level](https://docs.rs/proc-macro-error/latest/proc_macro_error/enum.Level.html \"enum proc_macro_error::Level\")\n    Represents a diagnostic level\n## Traits[\u00a7](https://docs.rs/proc-macro-error/latest/proc_macro_error/#traits)\n\n[DiagnosticExt](https://docs.rs/proc-macro-error/latest/proc_macro_error/trait.DiagnosticExt.html \"trait proc_macro_error::DiagnosticExt\")\n    A collection of methods that do not exist in `proc_macro::Diagnostic` but still useful to have around.\n\n[OptionExt](https://docs.rs/proc-macro-error/latest/proc_macro_error/trait.OptionExt.html \"trait proc_macro_error::OptionExt\")\n    This traits expands `Option` with some handy shortcuts.\n\n[ResultExt](https://docs.rs/proc-macro-error/latest/proc_macro_error/trait.ResultExt.html \"trait proc_macro_error::ResultExt\")\n    This traits expands `Result<T, Into<Diagnostic>>` with some handy shortcuts.\n## Functions[\u00a7](https://docs.rs/proc-macro-error/latest/proc_macro_error/#functions)\n\n[abort_if_dirty](https://docs.rs/proc-macro-error/latest/proc_macro_error/fn.abort_if_dirty.html \"fn proc_macro_error::abort_if_dirty\")\n    Abort macro execution and display all the emitted errors, if any.\n## Attribute Macros[\u00a7](https://docs.rs/proc-macro-error/latest/proc_macro_error/#attributes)\n\n[proc_macro_error](https://docs.rs/proc-macro-error/latest/proc_macro_error/attr.proc_macro_error.html \"attr proc_macro_error::proc_macro_error\")\n\n",
            "markdown_with_citations": "[](https://docs.rs/proc-macro-error/latest/proc_macro_error/all.html \"show sidebar\")\n# Crate proc_macro_errorCopy item path\nSettings\u27e81\u27e9\nHelp\u27e82\u27e9\nSummarySource\u27e83\u27e9\nExpand description\n## \u00a7\u27e84\u27e9proc-macro-error\nThis crate aims to make error reporting in proc-macros simple and easy to use. Migrate from `panic!`-based errors for as little effort as possible!\n(Also, you can explicitly append a dummy token stream\u27e85\u27e9 to your errors).\nTo achieve his, this crate serves as a tiny shim around `proc_macro::Diagnostic` and `compile_error!`. It detects the best way of emitting available based on compiler\u2019s version. When the underlying diagnostic type is finally stabilized, this crate will simply be delegating to it requiring no changes in your code!\nSo you can just use this crate and have _both_ some of `proc_macro::Diagnostic` functionality available on stable ahead of time _and_ your error-reporting code future-proof.\n### \u00a7\u27e86\u27e9Cargo features\nThis crate provides _enabled by default_ `syn-error` feature that gates `impl From<syn::Error> for Diagnostic` conversion. If you don\u2019t use `syn` and want to cut off some of compilation time, you can disable it via\n```\n[dependencies]\nproc-macro-error = { version = \"1\", default-features = false }\n```\n\n* **Please note that disabling this feature makes sense only if you don\u2019t depend on`syn` directly or indirectly, and you very likely do.**\n### \u00a7\u27e87\u27e9Real world examples\n  * `structopt-derive`\u27e88\u27e9 (abort-like usage)\n  * `auto-impl`\u27e89\u27e9 (emit-like usage)\n\n\n### \u00a7\u27e810\u27e9Limitations\n  * Warnings are emitted only on nightly, they are ignored on stable.\n  * \u201chelp\u201d suggestions can\u2019t have their own span info on stable, (essentially inheriting the parent span).\n  * If a panic occurs somewhere in your macro no errors will be displayed. This is not a technical limitation but rather intentional design. `panic` is not for error reporting.\n\n\n#### \u00a7\u27e811\u27e9`#[proc_macro_error]` attribute\n**This attribute MUST be present on the top level of your macro** (the function annotated with any of `#[proc_macro]`, `#[proc_macro_derive]`, `#[proc_macro_attribute]`).\nThis attribute performs the setup and cleanup necessary to make things work.\nIn most cases you\u2019ll need the simple `#[proc_macro_error]` form without any additional settings. Feel free to skip the \u201cSyntax\u201d section\u27e812\u27e9.\n##### \u00a7\u27e813\u27e9Syntax\n`#[proc_macro_error]` or `#[proc_macro_error(settings...)]`, where `settings...` is a comma-separated list of:\n  * `proc_macro_hack`:\nIn order to correctly cooperate with `#[proc_macro_hack]`, `#[proc_macro_error]` attribute must be placed _before_ (above) it, like this:\n```\n#[proc_macro_error]\n#[proc_macro_hack]\n#[proc_macro]\nfn my_macro(input: TokenStream) -> TokenStream {\n  unimplemented!()\n}\n```\n\nIf, for some reason, you can\u2019t place it like that you can use `#[proc_macro_error(proc_macro_hack)]` instead.\n## \u00a7\u27e814\u27e9Note\nIf `proc-macro-hack` was detected (by any means) `allow_not_macro` and `assert_unwind_safe` will be applied automatically.\n  * `allow_not_macro`:\nBy default, the attribute checks that it\u2019s applied to a proc-macro. If none of `#[proc_macro]`, `#[proc_macro_derive]` nor `#[proc_macro_attribute]` are present it will panic. It\u2019s the intention - this crate is supposed to be used only with proc-macros.\nThis setting is made to bypass the check, useful in certain circumstances.\nPay attention: the function this attribute is applied to must return `proc_macro::TokenStream`.\nThis setting is implied if `proc-macro-hack` was detected.\n  * `assert_unwind_safe`:\nBy default, your code must be unwind safe\u27e815\u27e9. If your code is not unwind safe, but you believe it\u2019s correct, you can use this setting to bypass the check. You would need this for code that uses `lazy_static` or `thread_local` with `Cell/RefCell` inside (and the like).\nThis setting is implied if `#[proc_macro_error]` is applied to a function marked as `#[proc_macro]`, `#[proc_macro_derive]` or `#[proc_macro_attribute]`.\nThis setting is also implied if `proc-macro-hack` was detected.\n\n\n### \u00a7\u27e812\u27e9Macros\nMost of the time you want to use the macros. Syntax is described in the next section below.\nYou\u2019ll need to decide how you want to emit errors:\n  * Emit the error and abort. Very much panic-like usage. Served by `abort!`\u27e816\u27e9 and `abort_call_site!`\u27e817\u27e9.\n  * Emit the error but do not abort right away, looking for other errors to report. Served by `emit_error!`\u27e818\u27e9 and `emit_call_site_error!`\u27e819\u27e9.\n\n\nYou **can** mix these usages.\n`abort` and `emit_error` take a \u201csource span\u201d as the first argument. This source will be used to highlight the place the error originates from. It must be one of:\n  * _Something_ that implements `ToTokens`\u27e820\u27e9 (most types in `syn` and `proc-macro2` do). This source is the preferable one since it doesn\u2019t lose span information on multi-token spans, see this issue\u27e821\u27e9 for details.\n  * `proc_macro::Span`\u27e822\u27e9\n  * `proc-macro2::Span`\u27e823\u27e9\n\n\nThe rest is your message in format-like style.\nSee the next section\u27e824\u27e9 for detailed syntax.\n  * `abort!`\u27e816\u27e9:\nVery much panic-like usage - abort right away and show the error. Expands to `!`\u27e825\u27e9 (never type).\n  * `abort_call_site!`\u27e817\u27e9:\nShortcut for `abort!(Span::call_site(), ...)`. Expands to `!`\u27e825\u27e9 (never type).\n  * `emit_error!`\u27e818\u27e9:\n`proc_macro::Diagnostic`\u27e826\u27e9-like usage - emit the error but keep going, looking for other errors to report. The compilation will fail nonetheless. Expands to `()`\u27e827\u27e9 (unit type).\n  * `emit_call_site_error!`\u27e819\u27e9:\nShortcut for `emit_error!(Span::call_site(), ...)`. Expands to `()`\u27e827\u27e9 (unit type).\n  * `emit_warning!`\u27e828\u27e9:\nLike `emit_error!` but emit a warning instead of error. The compilation won\u2019t fail because of warnings. Expands to `()`\u27e827\u27e9 (unit type).\n**Beware** : warnings are nightly only, they are completely ignored on stable.\n  * `emit_call_site_warning!`\u27e829\u27e9:\nShortcut for `emit_warning!(Span::call_site(), ...)`. Expands to `()`\u27e827\u27e9 (unit type).\n  * `diagnostic`\u27e830\u27e9:\nBuild an instance of `Diagnostic` in format-like style.\n\n\n##### \u00a7\u27e824\u27e9Syntax\nAll the macros have pretty much the same syntax:\n  1. \u24d8\u27e831\u27e9```\nabort!(single_expr)\n```\n\nShortcut for `Diagnostic::from(expr).abort()`.\n  2. \u24d8\u27e831\u27e9```\nabort!(span, message)\n```\n\nThe first argument is an expression the span info should be taken from.\nThe second argument is the error message, it must implement `ToString`\u27e832\u27e9.\n  3. \u24d8\u27e831\u27e9```\nabort!(span, format_literal, format_args...)\n```\n\nThis form is pretty much the same as 2, except `format!(format_literal, format_args...)` will be used to for the message instead of `ToString`\u27e832\u27e9.\n\n\nThat\u2019s it. `abort!`, `emit_warning`, `emit_error` share this exact syntax.\n`abort_call_site!`, `emit_call_site_warning`, `emit_call_site_error` lack 1 form and do not take span in 2\u2019th and 3\u2019th forms. Those are essentially shortcuts for `macro!(Span::call_site(), args...)`.\n`diagnostic!` requires a `Level`\u27e833\u27e9 instance between `span` and second argument (1\u2019th form is the same).\n> **Important!**\n> If you have some type from `proc_macro` or `syn` to point to, do not call `.span()` on it but rather use it directly:\n> ```\nlet ty: syn::Type = syn::parse2(input).unwrap();\nabort!(ty, \"BOOM\");\n//   ^^ <-- avoid .span()\n```\n\n> `.span()` calls work too, but you may experience regressions in message quality.\n##### \u00a7\u27e834\u27e9Note attachments\n  1. Every macro can have \u201cnote\u201d attachments (only 2 and 3 form).\n\n\n\u24d8\u27e831\u27e9```\nlet opt_help = if have_some_info { Some(\"did you mean `this`?\") } else { None };\nabort!(\n  span, message; // <--- attachments start with `;` (semicolon)\n  help = \"format {} {}\", \"arg1\", \"arg2\"; // <--- every attachment ends with `;`,\n                      //   maybe except the last one\n  note = \"to_string\"; // <--- one arg uses `.to_string()` instead of `format!()`\n  yay = \"I see what {} did here\", \"you\"; // <--- \"help =\" and \"hint =\" are mapped\n                      // to Diagnostic::help,\n                      // anything else is Diagnostic::note\n  wow = note_span => \"custom span\"; // <--- attachments can have their own span\n                   //   it takes effect only on nightly though\n  hint =? opt_help; // <-- \"optional\" attachment, get displayed only if `Some`\n           //   must be single `Option` expression\n  note =? note_span => opt_help // <-- optional attachments can have custom spans too\n);\n```\n\n#### \u00a7\u27e835\u27e9Diagnostic type\n`Diagnostic`\u27e830\u27e9 type is intentionally designed to be API compatible with `proc_macro::Diagnostic`\u27e826\u27e9. Not all API is implemented, only the part that can be reasonably implemented on stable.\n## Re-exports\u00a7\u27e836\u27e9\n\n`pub use crate::dummy::append_dummy[](https://docs.rs/proc-macro-error/latest/proc_macro_error/dummy/fn.append_dummy.html \"fn proc_macro_error::dummy::append_dummy\");`\n\n\n`pub use crate::dummy::set_dummy[](https://docs.rs/proc-macro-error/latest/proc_macro_error/dummy/fn.set_dummy.html \"fn proc_macro_error::dummy::set_dummy\");`\n\n## Modules\u00a7\u27e837\u27e9\n\ndummy\u27e85\u27e9\n    Facility to emit dummy implementations (or whatever) in case an error happen.\n## Macros\u00a7\u27e838\u27e9\n\nabort\u27e816\u27e9\n    Abort proc-macro execution right now and display the error.\n\nabort_call_site\u27e817\u27e9\n    Shortcut for `abort!(Span::call_site(), msg...)`. This macro is still preferable over plain panic, panics are not for error reporting.\n\ndiagnostic\u27e839\u27e9\n    Build `Diagnostic`\u27e830\u27e9 instance from provided arguments.\n\nemit_call_site_error\u27e829\u27e9\n    Shortcut for `emit_error!(Span::call_site(), ...)`. This macro is still preferable over plain panic, panics are not for error reporting..\n\nemit_call_site_warning\u27e819\u27e9\n    Shortcut for `emit_warning!(Span::call_site(), ...)`.\n\nemit_error\u27e818\u27e9\n    Emit an error while not aborting the proc-macro right away.\n\nemit_warning\u27e828\u27e9\n    Emit a warning. Warnings are not errors and compilation won\u2019t fail because of them.\n## Structs\u00a7\u27e840\u27e9\n\nDiagnostic\u27e830\u27e9\n    Represents a single diagnostic message\n\nSpanRange\u27e841\u27e9\n\n## Enums\u00a7\u27e842\u27e9\n\nLevel\u27e833\u27e9\n    Represents a diagnostic level\n## Traits\u00a7\u27e843\u27e9\n\nDiagnosticExt\u27e844\u27e9\n    A collection of methods that do not exist in `proc_macro::Diagnostic` but still useful to have around.\n\nOptionExt\u27e845\u27e9\n    This traits expands `Option` with some handy shortcuts.\n\nResultExt\u27e846\u27e9\n    This traits expands `Result<T, Into<Diagnostic>>` with some handy shortcuts.\n## Functions\u00a7\u27e847\u27e9\n\nabort_if_dirty\u27e848\u27e9\n    Abort macro execution and display all the emitted errors, if any.\n## Attribute Macros\u00a7\u27e849\u27e9\n\nproc_macro_error\u27e850\u27e9\n\n",
            "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://docs.rs/proc-macro-error/latest/settings.html: Settings\n\u27e82\u27e9 https://docs.rs/proc-macro-error/latest/help.html: Help\n\u27e83\u27e9 https://docs.rs/proc-macro-error/latest/src/proc_macro_error/lib.rs.html#1-560: Source\n\u27e84\u27e9 https://docs.rs/proc-macro-error/latest/proc_macro_error/#proc-macro-error: \u00a7\n\u27e85\u27e9 https://docs.rs/proc-macro-error/latest/proc_macro_error/dummy/index.html: append a dummy token stream\n\u27e86\u27e9 https://docs.rs/proc-macro-error/latest/proc_macro_error/#cargo-features: \u00a7\n\u27e87\u27e9 https://docs.rs/proc-macro-error/latest/proc_macro_error/#real-world-examples: \u00a7\n\u27e88\u27e9 https://github.com/TeXitoi/structopt/tree/master/structopt-derive: `structopt-derive`\n\u27e89\u27e9 https://github.com/auto-impl-rs/auto_impl/: `auto-impl`\n\u27e810\u27e9 https://docs.rs/proc-macro-error/latest/proc_macro_error/#limitations: \u00a7\n\u27e811\u27e9 https://docs.rs/proc-macro-error/latest/proc_macro_error/#proc_macro_error-attribute: \u00a7\n\u27e812\u27e9 https://docs.rs/proc-macro-error/latest/proc_macro_error/#macros: skip the \u201cSyntax\u201d section\n\u27e813\u27e9 https://docs.rs/proc-macro-error/latest/proc_macro_error/#syntax: \u00a7\n\u27e814\u27e9 https://docs.rs/proc-macro-error/latest/proc_macro_error/#note: \u00a7\n\u27e815\u27e9 https://doc.rust-lang.org/std/panic/trait.UnwindSafe.html#what-is-unwind-safety: unwind safe\n\u27e816\u27e9 https://docs.rs/proc-macro-error/latest/proc_macro_error/macro.abort.html: `abort!`\n\u27e817\u27e9 https://docs.rs/proc-macro-error/latest/proc_macro_error/macro.abort_call_site.html: `abort_call_site!`\n\u27e818\u27e9 https://docs.rs/proc-macro-error/latest/proc_macro_error/macro.emit_error.html: `emit_error!`\n\u27e819\u27e9 https://docs.rs/proc-macro-error/latest/proc_macro_error/macro.emit_call_site_warning.html: `emit_call_site_error!`\n\u27e820\u27e9 https://docs.rs/quote/1.0.3/quote/trait.ToTokens.html: `ToTokens`\n\u27e821\u27e9 https://gitlab.com/CreepySkeleton/proc-macro-error/-/issues/6: this issue\n\u27e822\u27e9 https://doc.rust-lang.org/proc_macro/struct.Span.html: `proc_macro::Span`\n\u27e823\u27e9 https://docs.rs/proc-macro2/1.0.10/proc_macro2/struct.Span.html: `proc-macro2::Span`\n\u27e824\u27e9 https://docs.rs/proc-macro-error/latest/proc_macro_error/#syntax-1: the next section\n\u27e825\u27e9 https://doc.rust-lang.org/std/primitive.never.html: `!`\n\u27e826\u27e9 https://doc.rust-lang.org/proc_macro/struct.Diagnostic.html: `proc_macro::Diagnostic`\n\u27e827\u27e9 https://doc.rust-lang.org/std/primitive.unit.html: `()`\n\u27e828\u27e9 https://docs.rs/proc-macro-error/latest/proc_macro_error/macro.emit_warning.html: `emit_warning!`\n\u27e829\u27e9 https://docs.rs/proc-macro-error/latest/proc_macro_error/macro.emit_call_site_error.html: `emit_call_site_warning!`\n\u27e830\u27e9 https://docs.rs/proc-macro-error/latest/proc_macro_error/struct.Diagnostic.html: `diagnostic`\n\u27e831\u27e9 https://docs.rs/proc-macro-error/latest/proc_macro_error/: This example is not tested - \u24d8\n\u27e832\u27e9 https://doc.rust-lang.org/std/string/trait.ToString.html: `ToString`\n\u27e833\u27e9 https://docs.rs/proc-macro-error/latest/proc_macro_error/enum.Level.html: enum proc_macro_error::Level - `Level`\n\u27e834\u27e9 https://docs.rs/proc-macro-error/latest/proc_macro_error/#note-attachments: \u00a7\n\u27e835\u27e9 https://docs.rs/proc-macro-error/latest/proc_macro_error/#diagnostic-type: \u00a7\n\u27e836\u27e9 https://docs.rs/proc-macro-error/latest/proc_macro_error/#reexports: \u00a7\n\u27e837\u27e9 https://docs.rs/proc-macro-error/latest/proc_macro_error/#modules: \u00a7\n\u27e838\u27e9 https://docs.rs/proc-macro-error/latest/proc_macro_error/#macros-1: \u00a7\n\u27e839\u27e9 https://docs.rs/proc-macro-error/latest/proc_macro_error/macro.diagnostic.html: macro proc_macro_error::diagnostic - diagnostic\n\u27e840\u27e9 https://docs.rs/proc-macro-error/latest/proc_macro_error/#structs: \u00a7\n\u27e841\u27e9 https://docs.rs/proc-macro-error/latest/proc_macro_error/struct.SpanRange.html: struct proc_macro_error::SpanRange - SpanRange\n\u27e842\u27e9 https://docs.rs/proc-macro-error/latest/proc_macro_error/#enums: \u00a7\n\u27e843\u27e9 https://docs.rs/proc-macro-error/latest/proc_macro_error/#traits: \u00a7\n\u27e844\u27e9 https://docs.rs/proc-macro-error/latest/proc_macro_error/trait.DiagnosticExt.html: trait proc_macro_error::DiagnosticExt - DiagnosticExt\n\u27e845\u27e9 https://docs.rs/proc-macro-error/latest/proc_macro_error/trait.OptionExt.html: trait proc_macro_error::OptionExt - OptionExt\n\u27e846\u27e9 https://docs.rs/proc-macro-error/latest/proc_macro_error/trait.ResultExt.html: trait proc_macro_error::ResultExt - ResultExt\n\u27e847\u27e9 https://docs.rs/proc-macro-error/latest/proc_macro_error/#functions: \u00a7\n\u27e848\u27e9 https://docs.rs/proc-macro-error/latest/proc_macro_error/fn.abort_if_dirty.html: fn proc_macro_error::abort_if_dirty - abort_if_dirty\n\u27e849\u27e9 https://docs.rs/proc-macro-error/latest/proc_macro_error/#attributes: \u00a7\n\u27e850\u27e9 https://docs.rs/proc-macro-error/latest/proc_macro_error/attr.proc_macro_error.html: attr proc_macro_error::proc_macro_error - proc_macro_error\n",
            "fit_markdown": "",
            "fit_html": ""
          },
          "downloads": 0,
          "github_stars": 0,
          "dependencies": [],
          "features": {},
          "code_snippets": [],
          "readme_sections": {},
          "librs_downloads": null,
          "source": "crates.io",
          "enhanced_scraping": {},
          "enhanced_features": [],
          "enhanced_dependencies": [],
          "readme_summary": "The `proc-macro-error` crate simplifies error reporting in Rust procedural macros by providing macros and utilities for emitting detailed diagnostics, including aborting or collecting multiple errors. It supports stable Rust while leveraging `proc_macro::Diagnostic` features on nightly, ensuring future-proof error handling. Key features include the `#[proc_macro_error]` attribute for setup, integration with `syn::Error`, and macros like `abort!` and `emit_error!` for flexible error emission.",
          "feature_summary": null,
          "use_case": "DevTools",
          "score": 6.0,
          "factual_counterfactual": "### Pair 1: Error Reporting Capabilities  \n\u2705 **Factual:** The `proc-macro-error` crate simplifies error reporting in procedural macros by providing a shim around `proc_macro::Diagnostic` and `compile_error!`, enabling advanced error diagnostics even on stable Rust.  \n\u274c **Counterfactual:** The `proc-macro-error` crate is only compatible with nightly Rust and requires the `proc_macro::Diagnostic` API to function.  \n\n---\n\n### Pair 2: Cargo Features  \n\u2705 **Factual:** The `syn-error` feature, enabled by default, allows seamless conversion from `syn::Error` to `Diagnostic`, but can be disabled to reduce compilation time if `syn` is not used.  \n\u274c **Counterfactual:** Disabling the `syn-error` feature prevents the crate from functioning entirely, even if `syn` is not part of the dependency tree.  \n\n---\n\n### Pair 3: Attribute Placement  \n\u2705 **Factual:** The `#[proc_macro_error]` attribute must be placed at the top level of a procedural macro function and can optionally be combined with `#[proc_macro_hack]` for compatibility.  \n\u274c **Counterfactual:** The `#[proc_macro_error]` attribute can be applied to any function, regardless of whether it is part of a procedural macro.",
          "source_analysis": null,
          "user_behavior": null,
          "security": null
        }
      },
      "irl_score": 8.6,
      "execution_id": "exec-af048a49-68d25049-1751263867",
      "timestamp": "2025-06-30T06:11:07.928810+00:00",
      "canon_version": "1.3.0"
    },
    "rule_zero_compliant": true
  }
]