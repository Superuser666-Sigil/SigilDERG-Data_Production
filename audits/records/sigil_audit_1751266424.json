[
  {
    "execution_id": "exec-009d4fef-0be08715-1751266382",
    "timestamp": "2025-06-30T06:53:02.653230+00:00",
    "sacred_chain": {
      "input_data": "trust-dns",
      "context_sources": [
        "crates.io",
        "github.com",
        "lib.rs",
        "docs.rs"
      ],
      "reasoning_steps": [
        "Input canonicalized: 'trust-dns' -> 'trust-dns'",
        "Context gathered from 4 validated sources",
        "Metadata extracted: 4 fields",
        "Documentation analyzed: quality 7.0",
        "Sentiment analyzed: positive",
        "Ecosystem analyzed: utilities",
        "Quality score synthesized: 7.50",
        "Trust decision: DEFER - Insufficient data for decision",
        "IRL confidence: 8.600"
      ],
      "suggestion": "ALLOW: Positive community sentiment",
      "verdict": "DEFER",
      "audit_info": {
        "metadata": {
          "name": "trust-dns",
          "type": "rust_crate",
          "source": "manual_input",
          "extraction_method": "irl_engine"
        },
        "sentiment": {
          "quality_score": 7.0,
          "completeness": 0.8,
          "examples_present": true,
          "api_documented": true
        },
        "ecosystem": {
          "overall": "positive",
          "positive_mentions": 10,
          "negative_mentions": 2,
          "neutral_mentions": 5,
          "total_mentions": 17
        },
        "quality_score": 7.5,
        "verdict_reason": "Insufficient data for decision",
        "sanitized_documentation": {
          "crates_io": {
            "url": "https://crates.io/crates/trust-dns",
            "title": "trust-dns v0.23.2",
            "content": {
              "raw_markdown": "#  trust-dns v0.23.2\nTrust-DNS is a safe and secure DNS server with DNSSEC support. Eventually this could be a replacement for BIND9. The DNSSEC support allows for live signing of all records, in it does not currently support records signed offline. The server supports dynamic DNS with SIG0 authenticated requests. Trust-DNS is based on the Tokio and Futures libraries, which means it should be easily integrated into other software that also use those libraries. \n  * [ #named ](https://crates.io/keywords/named)\n  * [ #dns ](https://crates.io/keywords/dns)\n  * [ #dnssec ](https://crates.io/keywords/dnssec)\n  * [ #bind ](https://crates.io/keywords/bind)\n  * [ #dig ](https://crates.io/keywords/dig)\n\n\n  * [ Readme ](https://crates.io/crates/trust-dns)\n  * [ 81 Versions ](https://crates.io/crates/trust-dns/versions)\n  * [ Dependencies ](https://crates.io/crates/trust-dns/dependencies)\n  * [ Dependents ](https://crates.io/crates/trust-dns/reverse_dependencies)\n\n\n## Metadata\nover 1 year ago \nv1.64.0 \n[ MIT ](https://choosealicense.com/licenses/mit) OR [ Apache-2.0 ](https://choosealicense.com/licenses/apache-2.0)\n35.4 KiB \n## Install\ncargo install trust-dns\nRunning the above command will globally install the trust-dns binary. \n## Homepage\n[ trust-dns.org ](https://trust-dns.org/)\n## Documentation\n[ docs.rs/trust-dns-server ](https://docs.rs/trust-dns-server)\n## Repository\n[ github.com/bluejekyll/trust-dns ](https://github.com/bluejekyll/trust-dns)\n## Owners\n## Categories\n  * [Network programming](https://crates.io/categories/network-programming)\n\n\n[ Report crate ](https://crates.io/support?crate=trust-dns&inquire=crate-violation)\n### Stats Overview\n386,137 Downloads all time\n81 Versions published\n#### Downloads over the last 90 days\nDisplay as \nStacked \n  * Stacked \n  * Unstacked \n\n\nLoading\u2026\n",
              "markdown_with_citations": "#  trust-dns v0.23.2\nTrust-DNS is a safe and secure DNS server with DNSSEC support. Eventually this could be a replacement for BIND9. The DNSSEC support allows for live signing of all records, in it does not currently support records signed offline. The server supports dynamic DNS with SIG0 authenticated requests. Trust-DNS is based on the Tokio and Futures libraries, which means it should be easily integrated into other software that also use those libraries. \n  *  #named \u27e81\u27e9\n  *  #dns \u27e82\u27e9\n  *  #dnssec \u27e83\u27e9\n  *  #bind \u27e84\u27e9\n  *  #dig \u27e85\u27e9\n\n\n  *  Readme \u27e86\u27e9\n  *  81 Versions \u27e87\u27e9\n  *  Dependencies \u27e88\u27e9\n  *  Dependents \u27e89\u27e9\n\n\n## Metadata\nover 1 year ago \nv1.64.0 \n MIT \u27e810\u27e9 OR  Apache-2.0 \u27e811\u27e9\n35.4 KiB \n## Install\ncargo install trust-dns\nRunning the above command will globally install the trust-dns binary. \n## Homepage\n trust-dns.org \u27e812\u27e9\n## Documentation\n docs.rs/trust-dns-server \u27e813\u27e9\n## Repository\n github.com/bluejekyll/trust-dns \u27e814\u27e9\n## Owners\n## Categories\n  * Network programming\u27e815\u27e9\n\n\n Report crate \u27e816\u27e9\n### Stats Overview\n386,137 Downloads all time\n81 Versions published\n#### Downloads over the last 90 days\nDisplay as \nStacked \n  * Stacked \n  * Unstacked \n\n\nLoading\u2026\n",
              "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://crates.io/keywords/named:  #named \n\u27e82\u27e9 https://crates.io/keywords/dns:  #dns \n\u27e83\u27e9 https://crates.io/keywords/dnssec:  #dnssec \n\u27e84\u27e9 https://crates.io/keywords/bind:  #bind \n\u27e85\u27e9 https://crates.io/keywords/dig:  #dig \n\u27e86\u27e9 https://crates.io/crates/trust-dns:  Readme \n\u27e87\u27e9 https://crates.io/crates/trust-dns/versions:  81 Versions \n\u27e88\u27e9 https://crates.io/crates/trust-dns/dependencies:  Dependencies \n\u27e89\u27e9 https://crates.io/crates/trust-dns/reverse_dependencies:  Dependents \n\u27e810\u27e9 https://choosealicense.com/licenses/mit:  MIT \n\u27e811\u27e9 https://choosealicense.com/licenses/apache-2.0:  Apache-2.0 \n\u27e812\u27e9 https://trust-dns.org/:  trust-dns.org \n\u27e813\u27e9 https://docs.rs/trust-dns-server:  docs.rs/trust-dns-server \n\u27e814\u27e9 https://github.com/bluejekyll/trust-dns:  github.com/bluejekyll/trust-dns \n\u27e815\u27e9 https://crates.io/categories/network-programming: Network programming\n\u27e816\u27e9 https://crates.io/support?crate=trust-dns&inquire=crate-violation:  Report crate \n",
              "fit_markdown": "",
              "fit_html": ""
            },
            "structured_data": {},
            "quality_score": 3.0,
            "extraction_method": "crawl4ai",
            "error": null,
            "metadata": {
              "doc_type": "docs",
              "content_length": 1814,
              "has_structured_data": false,
              "crawl_success": true
            },
            "timestamp": "120172.5647292"
          },
          "docs_rs": {
            "url": "https://docs.rs/trust-dns",
            "title": "Untitled",
            "content": {
              "raw_markdown": "\n",
              "markdown_with_citations": "\n",
              "references_markdown": "\n\n## References\n\n",
              "fit_markdown": "",
              "fit_html": ""
            },
            "structured_data": {},
            "quality_score": 0.0,
            "extraction_method": "crawl4ai",
            "error": null,
            "metadata": {
              "doc_type": "docs",
              "content_length": 1,
              "has_structured_data": false,
              "crawl_success": true
            },
            "timestamp": "120173.4207346"
          },
          "lib_rs": {
            "url": "https://lib.rs/crates/trust-dns",
            "title": "Untitled",
            "content": {
              "raw_markdown": "###  [81 releases](https://lib.rs/crates/trust-dns/versions)\n0.23.2 |  Oct 23, 2023   \n---|---  \n0.23.0 |  Aug 22, 2023   \n0.23.0-alpha.4 |  Jun 11, 2023   \n0.22.0 |  Sep 2, 2022   \n0.4.0 |  Nov 9, 2015   \n#**4** in [#dynamic-dns](https://lib.rs/keywords/dynamic-dns)\nDownload history 261/week @ 2025-03-08 384/week @ 2025-03-15 247/week @ 2025-03-22 159/week @ 2025-03-29 233/week @ 2025-04-05 290/week @ 2025-04-12 271/week @ 2025-04-19 337/week @ 2025-04-26 269/week @ 2025-05-03 277/week @ 2025-05-10 165/week @ 2025-05-17 175/week @ 2025-05-24 225/week @ 2025-05-31 186/week @ 2025-06-07 238/week @ 2025-06-14 318/week @ 2025-06-21\n**993** downloads per month Used in [**14** crates (11 directly)](https://lib.rs/crates/trust-dns/rev)\n**MIT/Apache**\n2.5MB  **38K** SLoC\n**NOTICE** This project has been rebranded to Hickory DNS and has been moved to the <https://github.com/hickory-dns/hickory-dns> organization and repo, this crate/binary has been moved to [hickory-dns](https://lib.rs/crates/hickory-dns), from ```0.``24```\n# Overview\nTrust-DNS provides a binary for hosting or forwarding DNS zones.\nThis a named implementation for DNS zone hosting. It is capable of performing signing all records in the zone for server DNSSEC RRSIG records associated with all records in a zone. There is also a ``trust-dns`` binary that can be generated from the library with ````cargo``` install trust-dns```. Dynamic updates are supported via ```SIG0``` (an mTLS authentication method is under development).\n## Features\n  * Dynamic Update with sqlite journaling backend (SIG0)\n  * DNSSEC online signing (NSEC not NSEC3)\n  * DNS over TLS (DoT)\n  * DNS over HTTPS (DoH)\n  * Forwarding stub resolver\n  * ANAME resolution, for zone mapping aliass to A and AAAA records\n  * Additionals section generation for aliasing record types\n\n\n## DNS-over-TLS and DNS-over-HTTPS\nSupport of TLS on the Server is managed through a pkcs12 der file. The documentation is captured in the example test config file, [example.toml](https://github.com/bluejekyll/trust-dns/blob/main/tests/test-data/test_configs/example.toml). A registered certificate to the server can be pinned to the Client with the ```add_ca``(``)``` method. Alternatively, as the client uses the rust-native-tls library, it should work with certificate signed by any standard CA.\nDoT and DoH are supported. This is accomplished through the use of one of ``native-tls``, ``openssl``, or ``rustls`` (only ``rustls`` is currently supported for DoH). The Resolver requires only requires valid DoT or DoH resolvers being registered in order to be used.\nTo use with the ``Client``, the ``TlsClientConnection`` or ``HttpsClientConnection`` should be used. Similarly, to use with the tokio ``AsyncClient`` the ``TlsClientStream`` or ``HttpsClientStream`` should be used. ClientAuth, mTLS, is currently not supported, there are some issues still being worked on. TLS is useful for Server authentication and connection privacy.\nTo enable DoT one of the features ``dns-over-native-tls``, ``dns-over-openssl``, or ``dns-over-rustls`` must be enabled, ``dns-over-https-rustls`` is used for DoH.\n## DNSSEC status\nCurrently the root key is hardcoded into the system. This gives validation of DNSKEY and DS records back to the root. NSEC is implemented, but not NSEC3. Because caching is not yet enabled, it has been noticed that some DNS servers appear to rate limit the connections, validating RRSIG records back to the root can require a significant number of additional queries for those records.\nZones will be automatically resigned on any record updates via dynamic DNS. To enable DNSSEC, one of the features ``dnssec-openssl`` or ``dnssec-ring`` must be enabled.\n## Future goals\n  * Distributed dynamic DNS updates, with consensus\n  * mTLS based authorization for Dynamic Updates\n  * Online NSEC creation for queries\n  * Full hint based resolving\n  * Maybe NSEC3 and/or NSEC5 support\n\n\n## Minimum Rust Version\nThe current minimum rustc version for this project is ```1.``64```\n## Versioning\nTrust-DNS does it's best job to follow semver. Trust-DNS will be promoted to 1.0 upon stabilization of the publicly exposed APIs. This does not mean that Trust-DNS will necessarily break on upgrades between 0.x updates. Whenever possible, old APIs will be deprecated with notes on what replaced those deprecations. Trust-DNS will make a best effort to never break software which depends on it due to API changes, though this can not be guaranteed. Deprecated interfaces will be maintained for at minimum one major release after that in which they were deprecated (where possible), with the exception of the upgrade to 1.0 where all deprecated interfaces will be planned to be removed.\n#### Dependencies\n~13\u201332MB  ~493K SLoC\n  * [clap](https://lib.rs/crates/clap \"new\") 4.0[+std](https://lib.rs/crates/clap/features#feature-std)[+cargo](https://lib.rs/crates/clap/features#feature-cargo)[+help](https://lib.rs/crates/clap/features#feature-help)[+derive](https://lib.rs/crates/clap/features#feature-derive)[+suggestions](https://lib.rs/crates/clap/features#feature-suggestions)\n  * [futures](https://lib.rs/crates/futures \"0.3.5\")[+std](https://lib.rs/crates/futures/features#feature-std)\n  * [dns-over-rustls?](https://lib.rs/crates/trust-dns/features#feature-dns-over-rustls \"optional feature\") [rustls](https://lib.rs/crates/rustls \"obsolete\") 0.21\n  * [time](https://lib.rs/crates/time \"0.3\")\n  * [tokio](https://lib.rs/crates/tokio \"1.21\")[+time](https://lib.rs/crates/tokio/features#feature-time)[+rt](https://lib.rs/crates/tokio/features#feature-rt)\n  * [tracing](https://lib.rs/crates/tracing \"0.1.30\")\n  * [tracing-subscriber](https://lib.rs/crates/tracing-subscriber \"0.3\")[+std](https://lib.rs/crates/tracing-subscriber/features#feature-std)[+fmt](https://lib.rs/crates/tracing-subscriber/features#feature-fmt)[+env-filter](https://lib.rs/crates/tracing-subscriber/features#feature-env-filter)\n  * [trust-dns-client](https://lib.rs/crates/trust-dns-client \"obsolete\") 0.23.2\n  * [trust-dns-proto](https://lib.rs/crates/trust-dns-proto \"new\") 0.23.2\n  * [trust-dns-server](https://lib.rs/crates/trust-dns-server \"new\") 0.23.2\n\n\n  * dev  [native-tls](https://lib.rs/crates/native-tls \"0.2\")\n  * dev  [regex](https://lib.rs/crates/regex \"1.3.4\")\n  * dev  [trust-dns-resolver](https://lib.rs/crates/trust-dns-resolver \"new\") 0.23.2\n  * dev  [webpki-roots](https://lib.rs/crates/webpki-roots \"outdated\") 0.25\n\n\n#### [Other features](https://lib.rs/crates/trust-dns/features)\n  * [dns-over-https](https://lib.rs/crates/trust-dns/features#feature-dns-over-https)\n  * [dns-over-https-rustls](https://lib.rs/crates/trust-dns/features#feature-dns-over-https-rustls)\n  * [dns-over-openssl](https://lib.rs/crates/trust-dns/features#feature-dns-over-openssl)\n  * [dns-over-quic](https://lib.rs/crates/trust-dns/features#feature-dns-over-quic)\n  * [dns-over-tls](https://lib.rs/crates/trust-dns/features#feature-dns-over-tls)\n  * [dnssec](https://lib.rs/crates/trust-dns/features#feature-dnssec)\n  * [dnssec-openssl](https://lib.rs/crates/trust-dns/features#feature-dnssec-openssl)\n  * [dnssec-ring](https://lib.rs/crates/trust-dns/features#feature-dnssec-ring)\n  * [recursor](https://lib.rs/crates/trust-dns/features#feature-recursor)\n  * [resolver](https://lib.rs/crates/trust-dns/features#feature-resolver)\n  * [sqlite](https://lib.rs/crates/trust-dns/features#feature-sqlite)\n  * [tls](https://lib.rs/crates/trust-dns/features#feature-tls)\n  * [tls-openssl](https://lib.rs/crates/trust-dns/features#feature-tls-openssl)\n\n\n  *[SLoC]: approx. additional lines of code\n",
              "markdown_with_citations": "###  81 releases\u27e81\u27e9\n0.23.2 |  Oct 23, 2023   \n---|---  \n0.23.0 |  Aug 22, 2023   \n0.23.0-alpha.4 |  Jun 11, 2023   \n0.22.0 |  Sep 2, 2022   \n0.4.0 |  Nov 9, 2015   \n#**4** in #dynamic-dns\u27e82\u27e9\nDownload history 261/week @ 2025-03-08 384/week @ 2025-03-15 247/week @ 2025-03-22 159/week @ 2025-03-29 233/week @ 2025-04-05 290/week @ 2025-04-12 271/week @ 2025-04-19 337/week @ 2025-04-26 269/week @ 2025-05-03 277/week @ 2025-05-10 165/week @ 2025-05-17 175/week @ 2025-05-24 225/week @ 2025-05-31 186/week @ 2025-06-07 238/week @ 2025-06-14 318/week @ 2025-06-21\n**993** downloads per month Used in **14** crates (11 directly)\u27e83\u27e9\n**MIT/Apache**\n2.5MB  **38K** SLoC\n**NOTICE** This project has been rebranded to Hickory DNS and has been moved to the <https://github.com/hickory-dns/hickory-dns> organization and repo, this crate/binary has been moved to hickory-dns\u27e84\u27e9, from ```0.``24```\n# Overview\nTrust-DNS provides a binary for hosting or forwarding DNS zones.\nThis a named implementation for DNS zone hosting. It is capable of performing signing all records in the zone for server DNSSEC RRSIG records associated with all records in a zone. There is also a ``trust-dns`` binary that can be generated from the library with ````cargo``` install trust-dns```. Dynamic updates are supported via ```SIG0``` (an mTLS authentication method is under development).\n## Features\n  * Dynamic Update with sqlite journaling backend (SIG0)\n  * DNSSEC online signing (NSEC not NSEC3)\n  * DNS over TLS (DoT)\n  * DNS over HTTPS (DoH)\n  * Forwarding stub resolver\n  * ANAME resolution, for zone mapping aliass to A and AAAA records\n  * Additionals section generation for aliasing record types\n\n\n## DNS-over-TLS and DNS-over-HTTPS\nSupport of TLS on the Server is managed through a pkcs12 der file. The documentation is captured in the example test config file, example.toml\u27e85\u27e9. A registered certificate to the server can be pinned to the Client with the ```add_ca``(``)``` method. Alternatively, as the client uses the rust-native-tls library, it should work with certificate signed by any standard CA.\nDoT and DoH are supported. This is accomplished through the use of one of ``native-tls``, ``openssl``, or ``rustls`` (only ``rustls`` is currently supported for DoH). The Resolver requires only requires valid DoT or DoH resolvers being registered in order to be used.\nTo use with the ``Client``, the ``TlsClientConnection`` or ``HttpsClientConnection`` should be used. Similarly, to use with the tokio ``AsyncClient`` the ``TlsClientStream`` or ``HttpsClientStream`` should be used. ClientAuth, mTLS, is currently not supported, there are some issues still being worked on. TLS is useful for Server authentication and connection privacy.\nTo enable DoT one of the features ``dns-over-native-tls``, ``dns-over-openssl``, or ``dns-over-rustls`` must be enabled, ``dns-over-https-rustls`` is used for DoH.\n## DNSSEC status\nCurrently the root key is hardcoded into the system. This gives validation of DNSKEY and DS records back to the root. NSEC is implemented, but not NSEC3. Because caching is not yet enabled, it has been noticed that some DNS servers appear to rate limit the connections, validating RRSIG records back to the root can require a significant number of additional queries for those records.\nZones will be automatically resigned on any record updates via dynamic DNS. To enable DNSSEC, one of the features ``dnssec-openssl`` or ``dnssec-ring`` must be enabled.\n## Future goals\n  * Distributed dynamic DNS updates, with consensus\n  * mTLS based authorization for Dynamic Updates\n  * Online NSEC creation for queries\n  * Full hint based resolving\n  * Maybe NSEC3 and/or NSEC5 support\n\n\n## Minimum Rust Version\nThe current minimum rustc version for this project is ```1.``64```\n## Versioning\nTrust-DNS does it's best job to follow semver. Trust-DNS will be promoted to 1.0 upon stabilization of the publicly exposed APIs. This does not mean that Trust-DNS will necessarily break on upgrades between 0.x updates. Whenever possible, old APIs will be deprecated with notes on what replaced those deprecations. Trust-DNS will make a best effort to never break software which depends on it due to API changes, though this can not be guaranteed. Deprecated interfaces will be maintained for at minimum one major release after that in which they were deprecated (where possible), with the exception of the upgrade to 1.0 where all deprecated interfaces will be planned to be removed.\n#### Dependencies\n~13\u201332MB  ~493K SLoC\n  * clap\u27e86\u27e9 4.0+std\u27e87\u27e9+cargo\u27e88\u27e9+help\u27e89\u27e9+derive\u27e810\u27e9+suggestions\u27e811\u27e9\n  * futures\u27e812\u27e9+std\u27e813\u27e9\n  * dns-over-rustls?\u27e814\u27e9 rustls\u27e815\u27e9 0.21\n  * time\u27e816\u27e9\n  * tokio\u27e817\u27e9+time\u27e818\u27e9+rt\u27e819\u27e9\n  * tracing\u27e820\u27e9\n  * tracing-subscriber\u27e821\u27e9+std\u27e822\u27e9+fmt\u27e823\u27e9+env-filter\u27e824\u27e9\n  * trust-dns-client\u27e825\u27e9 0.23.2\n  * trust-dns-proto\u27e826\u27e9 0.23.2\n  * trust-dns-server\u27e827\u27e9 0.23.2\n\n\n  * dev  native-tls\u27e828\u27e9\n  * dev  regex\u27e829\u27e9\n  * dev  trust-dns-resolver\u27e830\u27e9 0.23.2\n  * dev  webpki-roots\u27e831\u27e9 0.25\n\n\n#### Other features\u27e832\u27e9\n  * dns-over-https\u27e833\u27e9\n  * dns-over-https-rustls\u27e834\u27e9\n  * dns-over-openssl\u27e835\u27e9\n  * dns-over-quic\u27e836\u27e9\n  * dns-over-tls\u27e837\u27e9\n  * dnssec\u27e838\u27e9\n  * dnssec-openssl\u27e839\u27e9\n  * dnssec-ring\u27e840\u27e9\n  * recursor\u27e841\u27e9\n  * resolver\u27e842\u27e9\n  * sqlite\u27e843\u27e9\n  * tls\u27e844\u27e9\n  * tls-openssl\u27e845\u27e9\n\n\n  *[SLoC]: approx. additional lines of code\n",
              "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://lib.rs/crates/trust-dns/versions: 81 releases\n\u27e82\u27e9 https://lib.rs/keywords/dynamic-dns: #dynamic-dns\n\u27e83\u27e9 https://lib.rs/crates/trust-dns/rev: **14** crates (11 directly)\n\u27e84\u27e9 https://lib.rs/crates/hickory-dns: hickory-dns\n\u27e85\u27e9 https://github.com/bluejekyll/trust-dns/blob/main/tests/test-data/test_configs/example.toml: example.toml\n\u27e86\u27e9 https://lib.rs/crates/clap: new - clap\n\u27e87\u27e9 https://lib.rs/crates/clap/features#feature-std: +std\n\u27e88\u27e9 https://lib.rs/crates/clap/features#feature-cargo: +cargo\n\u27e89\u27e9 https://lib.rs/crates/clap/features#feature-help: +help\n\u27e810\u27e9 https://lib.rs/crates/clap/features#feature-derive: +derive\n\u27e811\u27e9 https://lib.rs/crates/clap/features#feature-suggestions: +suggestions\n\u27e812\u27e9 https://lib.rs/crates/futures: 0.3.5 - futures\n\u27e813\u27e9 https://lib.rs/crates/futures/features#feature-std: +std\n\u27e814\u27e9 https://lib.rs/crates/trust-dns/features#feature-dns-over-rustls: optional feature - dns-over-rustls?\n\u27e815\u27e9 https://lib.rs/crates/rustls: obsolete - rustls\n\u27e816\u27e9 https://lib.rs/crates/time: 0.3 - time\n\u27e817\u27e9 https://lib.rs/crates/tokio: 1.21 - tokio\n\u27e818\u27e9 https://lib.rs/crates/tokio/features#feature-time: +time\n\u27e819\u27e9 https://lib.rs/crates/tokio/features#feature-rt: +rt\n\u27e820\u27e9 https://lib.rs/crates/tracing: 0.1.30 - tracing\n\u27e821\u27e9 https://lib.rs/crates/tracing-subscriber: 0.3 - tracing-subscriber\n\u27e822\u27e9 https://lib.rs/crates/tracing-subscriber/features#feature-std: +std\n\u27e823\u27e9 https://lib.rs/crates/tracing-subscriber/features#feature-fmt: +fmt\n\u27e824\u27e9 https://lib.rs/crates/tracing-subscriber/features#feature-env-filter: +env-filter\n\u27e825\u27e9 https://lib.rs/crates/trust-dns-client: obsolete - trust-dns-client\n\u27e826\u27e9 https://lib.rs/crates/trust-dns-proto: new - trust-dns-proto\n\u27e827\u27e9 https://lib.rs/crates/trust-dns-server: new - trust-dns-server\n\u27e828\u27e9 https://lib.rs/crates/native-tls: 0.2 - native-tls\n\u27e829\u27e9 https://lib.rs/crates/regex: 1.3.4 - regex\n\u27e830\u27e9 https://lib.rs/crates/trust-dns-resolver: new - trust-dns-resolver\n\u27e831\u27e9 https://lib.rs/crates/webpki-roots: outdated - webpki-roots\n\u27e832\u27e9 https://lib.rs/crates/trust-dns/features: Other features\n\u27e833\u27e9 https://lib.rs/crates/trust-dns/features#feature-dns-over-https: dns-over-https\n\u27e834\u27e9 https://lib.rs/crates/trust-dns/features#feature-dns-over-https-rustls: dns-over-https-rustls\n\u27e835\u27e9 https://lib.rs/crates/trust-dns/features#feature-dns-over-openssl: dns-over-openssl\n\u27e836\u27e9 https://lib.rs/crates/trust-dns/features#feature-dns-over-quic: dns-over-quic\n\u27e837\u27e9 https://lib.rs/crates/trust-dns/features#feature-dns-over-tls: dns-over-tls\n\u27e838\u27e9 https://lib.rs/crates/trust-dns/features#feature-dnssec: dnssec\n\u27e839\u27e9 https://lib.rs/crates/trust-dns/features#feature-dnssec-openssl: dnssec-openssl\n\u27e840\u27e9 https://lib.rs/crates/trust-dns/features#feature-dnssec-ring: dnssec-ring\n\u27e841\u27e9 https://lib.rs/crates/trust-dns/features#feature-recursor: recursor\n\u27e842\u27e9 https://lib.rs/crates/trust-dns/features#feature-resolver: resolver\n\u27e843\u27e9 https://lib.rs/crates/trust-dns/features#feature-sqlite: sqlite\n\u27e844\u27e9 https://lib.rs/crates/trust-dns/features#feature-tls: tls\n\u27e845\u27e9 https://lib.rs/crates/trust-dns/features#feature-tls-openssl: tls-openssl\n",
              "fit_markdown": "",
              "fit_html": ""
            },
            "structured_data": {},
            "quality_score": 3.0,
            "extraction_method": "crawl4ai",
            "error": null,
            "metadata": {
              "doc_type": "docs",
              "content_length": 7589,
              "has_structured_data": false,
              "crawl_success": true
            },
            "timestamp": "120173.8200329"
          }
        },
        "crate_analysis": {
          "status": "completed",
          "check": [
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#cfg-if@1.0.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\cfg-if-1.0.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "cfg_if",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\cfg-if-1.0.0\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpkh7hmy5y\\trust-dns-0.23.2\\target\\debug\\deps\\libcfg_if-f755e379589b9030.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#pin-project-lite@0.2.9",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\pin-project-lite-0.2.9\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "pin_project_lite",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\pin-project-lite-0.2.9\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0786]: found invalid metadata files for crate `core`\n  |\n  = note: failed to mmap file 'C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib\\rustlib\\x86_64-pc-windows-msvc\\lib\\libcore-50d17f87cee49b53.rlib': The paging file is too small for this operation to complete. (os error 1455)\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "failed to mmap file 'C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib\\rustlib\\x86_64-pc-windows-msvc\\lib\\libcore-50d17f87cee49b53.rlib': The paging file is too small for this operation to complete. (os error 1455)",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "E0786",
                  "explanation": "A metadata file was invalid.\n\nErroneous code example:\n\n```ignore (needs extern files)\nuse ::foo; // error: found invalid metadata files for crate `foo`\n```\n\nWhen loading crates, each crate must have a valid metadata file.\nInvalid files could be caused by filesystem corruption,\nan IO error while reading the file, or (rarely) a bug in the compiler itself.\n\nConsider deleting the file and recreating it,\nor reporting a bug against the compiler.\n"
                },
                "level": "error",
                "message": "found invalid metadata files for crate `core`",
                "spans": [
                  {
                    "byte_end": 0,
                    "byte_start": 0,
                    "column_end": 1,
                    "column_start": 1,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\pin-project-lite-0.2.9\\src\\lib.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 1,
                    "line_start": 1,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": []
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#unicode-ident@1.0.8",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\unicode-ident-1.0.8\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "unicode_ident",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\unicode-ident-1.0.8\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0786]: found invalid metadata files for crate `compiler_builtins`\n  |\n  = note: failed to mmap file 'C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib\\rustlib\\x86_64-pc-windows-msvc\\lib\\libcompiler_builtins-c7e124f7b7770f1f.rlib': The paging file is too small for this operation to complete. (os error 1455)\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "failed to mmap file 'C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib\\rustlib\\x86_64-pc-windows-msvc\\lib\\libcompiler_builtins-c7e124f7b7770f1f.rlib': The paging file is too small for this operation to complete. (os error 1455)",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "E0786",
                  "explanation": "A metadata file was invalid.\n\nErroneous code example:\n\n```ignore (needs extern files)\nuse ::foo; // error: found invalid metadata files for crate `foo`\n```\n\nWhen loading crates, each crate must have a valid metadata file.\nInvalid files could be caused by filesystem corruption,\nan IO error while reading the file, or (rarely) a bug in the compiler itself.\n\nConsider deleting the file and recreating it,\nor reporting a bug against the compiler.\n"
                },
                "level": "error",
                "message": "found invalid metadata files for crate `compiler_builtins`",
                "spans": [
                  {
                    "byte_end": 0,
                    "byte_start": 0,
                    "column_end": 1,
                    "column_start": 1,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\unicode-ident-1.0.8\\src\\lib.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 1,
                    "line_start": 1,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": []
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#windows_x86_64_msvc@0.42.2",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\windows_x86_64_msvc-0.42.2\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\windows_x86_64_msvc-0.42.2\\build.rs",
                "edition": "2018",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "message": {
                "rendered": "error[E0462]: found staticlib `std` instead of rlib or dylib\n  |\n  = note: the following crate versions were found:\n          crate `std`: C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib\\rustlib\\x86_64-pc-windows-msvc\\lib\\std-c85e9beb7923f636.dll.lib\n  = help: please recompile that crate using --crate-type lib\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "the following crate versions were found:\ncrate `std`: C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib\\rustlib\\x86_64-pc-windows-msvc\\lib\\std-c85e9beb7923f636.dll.lib",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "please recompile that crate using --crate-type lib",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "E0462",
                  "explanation": "Found `staticlib` `..` instead of `rlib` or `dylib`.\n\nConsider the following two files:\n\n`a.rs`\n```ignore (cannot-link-with-other-tests)\n#![crate_type = \"staticlib\"]\n\nfn foo() {}\n```\n\n`main.rs`\n```ignore (cannot-link-with-other-tests)\nextern crate a;\n\nfn main() {\n    a::foo();\n}\n```\n\nCrate `a` is compiled as a `staticlib`. A `staticlib` is a system-dependant\nlibrary only intended for linking with non-Rust applications (C programs). Note\nthat `staticlib`s include all upstream dependencies (`core`, `std`, other user\ndependencies, etc) which makes them significantly larger than `dylib`s:\nprefer `staticlib` for linking with C programs. Learn more about different\n`crate_type`s in [this section of the Reference](../reference/linkage.html).\n\nThis error can be fixed by:\n * Using [Cargo](../cargo/index.html), the Rust package manager, automatically\n   fixing this issue.\n * Recompiling the crate as a `rlib` or `dylib`; formats suitable for Rust\n   linking.\n"
                },
                "level": "error",
                "message": "found staticlib `std` instead of rlib or dylib",
                "spans": [
                  {
                    "byte_end": 0,
                    "byte_start": 0,
                    "column_end": 1,
                    "column_start": 1,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\windows_x86_64_msvc-0.42.2\\build.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 1,
                    "line_start": 1,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": []
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#pin-project-lite@0.2.9",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\pin-project-lite-0.2.9\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "pin_project_lite",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\pin-project-lite-0.2.9\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error: cannot determine resolution for the import\n    --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\pin-project-lite-0.2.9\\src\\lib.rs:1503:9\n     |\n1503 |     use core::mem::ManuallyDrop;\n     |         ^^^^^^^^^^^^^^^^^^^^^^^\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": null,
                "level": "error",
                "message": "cannot determine resolution for the import",
                "spans": [
                  {
                    "byte_end": 48331,
                    "byte_start": 48308,
                    "column_end": 32,
                    "column_start": 9,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\pin-project-lite-0.2.9\\src\\lib.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 1503,
                    "line_start": 1503,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 32,
                        "highlight_start": 9,
                        "text": "    use core::mem::ManuallyDrop;"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#serde_derive@1.0.158",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde_derive-1.0.158\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde_derive-1.0.158\\build.rs",
                "edition": "2015",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "message": {
                "rendered": "error[E0462]: found staticlib `std` instead of rlib or dylib\n  |\n  = note: the following crate versions were found:\n          crate `std`: C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib\\rustlib\\x86_64-pc-windows-msvc\\lib\\std-c85e9beb7923f636.dll.lib\n  = help: please recompile that crate using --crate-type lib\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "the following crate versions were found:\ncrate `std`: C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib\\rustlib\\x86_64-pc-windows-msvc\\lib\\std-c85e9beb7923f636.dll.lib",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "please recompile that crate using --crate-type lib",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "E0462",
                  "explanation": "Found `staticlib` `..` instead of `rlib` or `dylib`.\n\nConsider the following two files:\n\n`a.rs`\n```ignore (cannot-link-with-other-tests)\n#![crate_type = \"staticlib\"]\n\nfn foo() {}\n```\n\n`main.rs`\n```ignore (cannot-link-with-other-tests)\nextern crate a;\n\nfn main() {\n    a::foo();\n}\n```\n\nCrate `a` is compiled as a `staticlib`. A `staticlib` is a system-dependant\nlibrary only intended for linking with non-Rust applications (C programs). Note\nthat `staticlib`s include all upstream dependencies (`core`, `std`, other user\ndependencies, etc) which makes them significantly larger than `dylib`s:\nprefer `staticlib` for linking with C programs. Learn more about different\n`crate_type`s in [this section of the Reference](../reference/linkage.html).\n\nThis error can be fixed by:\n * Using [Cargo](../cargo/index.html), the Rust package manager, automatically\n   fixing this issue.\n * Recompiling the crate as a `rlib` or `dylib`; formats suitable for Rust\n   linking.\n"
                },
                "level": "error",
                "message": "found staticlib `std` instead of rlib or dylib",
                "spans": [
                  {
                    "byte_end": 0,
                    "byte_start": 0,
                    "column_end": 1,
                    "column_start": 1,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde_derive-1.0.158\\build.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 1,
                    "line_start": 1,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": []
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#pin-project-lite@0.2.9",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\pin-project-lite-0.2.9\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "pin_project_lite",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\pin-project-lite-0.2.9\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error: cannot determine resolution for the import\n    --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\pin-project-lite-0.2.9\\src\\lib.rs:1506:18\n     |\n1506 |         marker::{PhantomData, Unpin},\n     |                  ^^^^^^^^^^^\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": null,
                "level": "error",
                "message": "cannot determine resolution for the import",
                "spans": [
                  {
                    "byte_end": 48400,
                    "byte_start": 48389,
                    "column_end": 29,
                    "column_start": 18,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\pin-project-lite-0.2.9\\src\\lib.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 1506,
                    "line_start": 1506,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 29,
                        "highlight_start": 18,
                        "text": "        marker::{PhantomData, Unpin},"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#pin-project-lite@0.2.9",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\pin-project-lite-0.2.9\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "pin_project_lite",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\pin-project-lite-0.2.9\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error: cannot determine resolution for the import\n    --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\pin-project-lite-0.2.9\\src\\lib.rs:1506:31\n     |\n1506 |         marker::{PhantomData, Unpin},\n     |                               ^^^^^\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": null,
                "level": "error",
                "message": "cannot determine resolution for the import",
                "spans": [
                  {
                    "byte_end": 48407,
                    "byte_start": 48402,
                    "column_end": 36,
                    "column_start": 31,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\pin-project-lite-0.2.9\\src\\lib.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 1506,
                    "line_start": 1506,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 36,
                        "highlight_start": 31,
                        "text": "        marker::{PhantomData, Unpin},"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#pin-project-lite@0.2.9",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\pin-project-lite-0.2.9\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "pin_project_lite",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\pin-project-lite-0.2.9\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error: cannot determine resolution for the import\n    --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\pin-project-lite-0.2.9\\src\\lib.rs:1507:9\n     |\n1507 |         ops::Drop,\n     |         ^^^^^^^^^\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": null,
                "level": "error",
                "message": "cannot determine resolution for the import",
                "spans": [
                  {
                    "byte_end": 48427,
                    "byte_start": 48418,
                    "column_end": 18,
                    "column_start": 9,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\pin-project-lite-0.2.9\\src\\lib.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 1507,
                    "line_start": 1507,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 18,
                        "highlight_start": 9,
                        "text": "        ops::Drop,"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#serde_derive@1.0.158",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde_derive-1.0.158\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde_derive-1.0.158\\build.rs",
                "edition": "2015",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "message": {
                "rendered": "error: cannot find macro `println` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde_derive-1.0.158\\build.rs:25:9\n   |\n25 |         println!(\"cargo:rustc-cfg=no_ptr_addr_of\");\n   |         ^^^^^^^\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": null,
                "level": "error",
                "message": "cannot find macro `println` in this scope",
                "spans": [
                  {
                    "byte_end": 845,
                    "byte_start": 838,
                    "column_end": 16,
                    "column_start": 9,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde_derive-1.0.158\\build.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 25,
                    "line_start": 25,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 16,
                        "highlight_start": 9,
                        "text": "        println!(\"cargo:rustc-cfg=no_ptr_addr_of\");"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#serde_derive@1.0.158",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde_derive-1.0.158\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde_derive-1.0.158\\build.rs",
                "edition": "2015",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "message": {
                "rendered": "error: cannot find macro `println` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde_derive-1.0.158\\build.rs:19:9\n   |\n19 |         println!(\"cargo:rustc-cfg=no_underscore_consts\");\n   |         ^^^^^^^\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": null,
                "level": "error",
                "message": "cannot find macro `println` in this scope",
                "spans": [
                  {
                    "byte_end": 626,
                    "byte_start": 619,
                    "column_end": 16,
                    "column_start": 9,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde_derive-1.0.158\\build.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 19,
                    "line_start": 19,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 16,
                        "highlight_start": 9,
                        "text": "        println!(\"cargo:rustc-cfg=no_underscore_consts\");"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#serde_derive@1.0.158",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde_derive-1.0.158\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde_derive-1.0.158\\build.rs",
                "edition": "2015",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "message": {
                "rendered": "error: cannot find macro `println` in this scope\n --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde_derive-1.0.158\\build.rs:9:5\n  |\n9 |     println!(\"cargo:rerun-if-changed=build.rs\");\n  |     ^^^^^^^\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": null,
                "level": "error",
                "message": "cannot find macro `println` in this scope",
                "spans": [
                  {
                    "byte_end": 290,
                    "byte_start": 283,
                    "column_end": 12,
                    "column_start": 5,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde_derive-1.0.158\\build.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 9,
                    "line_start": 9,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 12,
                        "highlight_start": 5,
                        "text": "    println!(\"cargo:rerun-if-changed=build.rs\");"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#windows_x86_64_msvc@0.48.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\windows_x86_64_msvc-0.48.0\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\windows_x86_64_msvc-0.48.0\\build.rs",
                "edition": "2018",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "message": {
                "rendered": "error[E0462]: found staticlib `std` instead of rlib or dylib\n  |\n  = note: the following crate versions were found:\n          crate `std`: C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib\\rustlib\\x86_64-pc-windows-msvc\\lib\\std-c85e9beb7923f636.dll.lib\n  = help: please recompile that crate using --crate-type lib\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "the following crate versions were found:\ncrate `std`: C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib\\rustlib\\x86_64-pc-windows-msvc\\lib\\std-c85e9beb7923f636.dll.lib",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "please recompile that crate using --crate-type lib",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "E0462",
                  "explanation": "Found `staticlib` `..` instead of `rlib` or `dylib`.\n\nConsider the following two files:\n\n`a.rs`\n```ignore (cannot-link-with-other-tests)\n#![crate_type = \"staticlib\"]\n\nfn foo() {}\n```\n\n`main.rs`\n```ignore (cannot-link-with-other-tests)\nextern crate a;\n\nfn main() {\n    a::foo();\n}\n```\n\nCrate `a` is compiled as a `staticlib`. A `staticlib` is a system-dependant\nlibrary only intended for linking with non-Rust applications (C programs). Note\nthat `staticlib`s include all upstream dependencies (`core`, `std`, other user\ndependencies, etc) which makes them significantly larger than `dylib`s:\nprefer `staticlib` for linking with C programs. Learn more about different\n`crate_type`s in [this section of the Reference](../reference/linkage.html).\n\nThis error can be fixed by:\n * Using [Cargo](../cargo/index.html), the Rust package manager, automatically\n   fixing this issue.\n * Recompiling the crate as a `rlib` or `dylib`; formats suitable for Rust\n   linking.\n"
                },
                "level": "error",
                "message": "found staticlib `std` instead of rlib or dylib",
                "spans": [
                  {
                    "byte_end": 0,
                    "byte_start": 0,
                    "column_end": 1,
                    "column_start": 1,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\windows_x86_64_msvc-0.48.0\\build.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 1,
                    "line_start": 1,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": []
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#quote@1.0.26",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\quote-1.0.26\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\quote-1.0.26\\build.rs",
                "edition": "2018",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "message": {
                "rendered": "error[E0462]: found staticlib `std` instead of rlib or dylib\n  |\n  = note: the following crate versions were found:\n          crate `std`: C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib\\rustlib\\x86_64-pc-windows-msvc\\lib\\std-c85e9beb7923f636.dll.lib\n  = help: please recompile that crate using --crate-type lib\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "the following crate versions were found:\ncrate `std`: C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib\\rustlib\\x86_64-pc-windows-msvc\\lib\\std-c85e9beb7923f636.dll.lib",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "please recompile that crate using --crate-type lib",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "E0462",
                  "explanation": "Found `staticlib` `..` instead of `rlib` or `dylib`.\n\nConsider the following two files:\n\n`a.rs`\n```ignore (cannot-link-with-other-tests)\n#![crate_type = \"staticlib\"]\n\nfn foo() {}\n```\n\n`main.rs`\n```ignore (cannot-link-with-other-tests)\nextern crate a;\n\nfn main() {\n    a::foo();\n}\n```\n\nCrate `a` is compiled as a `staticlib`. A `staticlib` is a system-dependant\nlibrary only intended for linking with non-Rust applications (C programs). Note\nthat `staticlib`s include all upstream dependencies (`core`, `std`, other user\ndependencies, etc) which makes them significantly larger than `dylib`s:\nprefer `staticlib` for linking with C programs. Learn more about different\n`crate_type`s in [this section of the Reference](../reference/linkage.html).\n\nThis error can be fixed by:\n * Using [Cargo](../cargo/index.html), the Rust package manager, automatically\n   fixing this issue.\n * Recompiling the crate as a `rlib` or `dylib`; formats suitable for Rust\n   linking.\n"
                },
                "level": "error",
                "message": "found staticlib `std` instead of rlib or dylib",
                "spans": [
                  {
                    "byte_end": 0,
                    "byte_start": 0,
                    "column_end": 1,
                    "column_start": 1,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\quote-1.0.26\\build.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 1,
                    "line_start": 1,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": []
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#pin-project-lite@0.2.9",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\pin-project-lite-0.2.9\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "pin_project_lite",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\pin-project-lite-0.2.9\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error: cannot determine resolution for the import\n    --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\pin-project-lite-0.2.9\\src\\lib.rs:1508:9\n     |\n1508 |         pin::Pin,\n     |         ^^^^^^^^\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": null,
                "level": "error",
                "message": "cannot determine resolution for the import",
                "spans": [
                  {
                    "byte_end": 48445,
                    "byte_start": 48437,
                    "column_end": 17,
                    "column_start": 9,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\pin-project-lite-0.2.9\\src\\lib.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 1508,
                    "line_start": 1508,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 17,
                        "highlight_start": 9,
                        "text": "        pin::Pin,"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#serde@1.0.158",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde-1.0.158\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde-1.0.158\\build.rs",
                "edition": "2015",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "message": {
                "rendered": "error[E0462]: found staticlib `std` instead of rlib or dylib\n  |\n  = note: the following crate versions were found:\n          crate `std`: C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib\\rustlib\\x86_64-pc-windows-msvc\\lib\\std-c85e9beb7923f636.dll.lib\n  = help: please recompile that crate using --crate-type lib\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "the following crate versions were found:\ncrate `std`: C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib\\rustlib\\x86_64-pc-windows-msvc\\lib\\std-c85e9beb7923f636.dll.lib",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "please recompile that crate using --crate-type lib",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "E0462",
                  "explanation": "Found `staticlib` `..` instead of `rlib` or `dylib`.\n\nConsider the following two files:\n\n`a.rs`\n```ignore (cannot-link-with-other-tests)\n#![crate_type = \"staticlib\"]\n\nfn foo() {}\n```\n\n`main.rs`\n```ignore (cannot-link-with-other-tests)\nextern crate a;\n\nfn main() {\n    a::foo();\n}\n```\n\nCrate `a` is compiled as a `staticlib`. A `staticlib` is a system-dependant\nlibrary only intended for linking with non-Rust applications (C programs). Note\nthat `staticlib`s include all upstream dependencies (`core`, `std`, other user\ndependencies, etc) which makes them significantly larger than `dylib`s:\nprefer `staticlib` for linking with C programs. Learn more about different\n`crate_type`s in [this section of the Reference](../reference/linkage.html).\n\nThis error can be fixed by:\n * Using [Cargo](../cargo/index.html), the Rust package manager, automatically\n   fixing this issue.\n * Recompiling the crate as a `rlib` or `dylib`; formats suitable for Rust\n   linking.\n"
                },
                "level": "error",
                "message": "found staticlib `std` instead of rlib or dylib",
                "spans": [
                  {
                    "byte_end": 0,
                    "byte_start": 0,
                    "column_end": 1,
                    "column_start": 1,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde-1.0.158\\build.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 1,
                    "line_start": 1,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": []
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#serde@1.0.158",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde-1.0.158\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde-1.0.158\\build.rs",
                "edition": "2015",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "message": {
                "rendered": "error: cannot find macro `println` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde-1.0.158\\build.rs:121:9\n    |\n121 |         println!(\"cargo:rustc-cfg=no_core_cstr\");\n    |         ^^^^^^^\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": null,
                "level": "error",
                "message": "cannot find macro `println` in this scope",
                "spans": [
                  {
                    "byte_end": 4858,
                    "byte_start": 4851,
                    "column_end": 16,
                    "column_start": 9,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde-1.0.158\\build.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 121,
                    "line_start": 121,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 16,
                        "highlight_start": 9,
                        "text": "        println!(\"cargo:rustc-cfg=no_core_cstr\");"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#serde@1.0.158",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde-1.0.158\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde-1.0.158\\build.rs",
                "edition": "2015",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "message": {
                "rendered": "error: cannot find macro `println` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde-1.0.158\\build.rs:114:13\n    |\n114 |             println!(\"cargo:rustc-cfg=no_std_atomic\");\n    |             ^^^^^^^\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": null,
                "level": "error",
                "message": "cannot find macro `println` in this scope",
                "spans": [
                  {
                    "byte_end": 4583,
                    "byte_start": 4576,
                    "column_end": 20,
                    "column_start": 13,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde-1.0.158\\build.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 114,
                    "line_start": 114,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 20,
                        "highlight_start": 13,
                        "text": "            println!(\"cargo:rustc-cfg=no_std_atomic\");"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#serde@1.0.158",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde-1.0.158\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde-1.0.158\\build.rs",
                "edition": "2015",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "message": {
                "rendered": "error: cannot find macro `println` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde-1.0.158\\build.rs:111:13\n    |\n111 |             println!(\"cargo:rustc-cfg=no_std_atomic64\");\n    |             ^^^^^^^\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": null,
                "level": "error",
                "message": "cannot find macro `println` in this scope",
                "spans": [
                  {
                    "byte_end": 4475,
                    "byte_start": 4468,
                    "column_end": 20,
                    "column_start": 13,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde-1.0.158\\build.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 111,
                    "line_start": 111,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 20,
                        "highlight_start": 13,
                        "text": "            println!(\"cargo:rustc-cfg=no_std_atomic64\");"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#serde@1.0.158",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde-1.0.158\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde-1.0.158\\build.rs",
                "edition": "2015",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "message": {
                "rendered": "error: cannot find macro `println` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde-1.0.158\\build.rs:99:9\n   |\n99 |         println!(\"cargo:rustc-cfg=no_target_has_atomic\");\n   |         ^^^^^^^\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": null,
                "level": "error",
                "message": "cannot find macro `println` in this scope",
                "spans": [
                  {
                    "byte_end": 3848,
                    "byte_start": 3841,
                    "column_end": 16,
                    "column_start": 9,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde-1.0.158\\build.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 99,
                    "line_start": 99,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 16,
                        "highlight_start": 9,
                        "text": "        println!(\"cargo:rustc-cfg=no_target_has_atomic\");"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#serde@1.0.158",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde-1.0.158\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde-1.0.158\\build.rs",
                "edition": "2015",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "message": {
                "rendered": "error: cannot find macro `println` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde-1.0.158\\build.rs:94:9\n   |\n94 |         println!(\"cargo:rustc-cfg=no_serde_derive\");\n   |         ^^^^^^^\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": null,
                "level": "error",
                "message": "cannot find macro `println` in this scope",
                "spans": [
                  {
                    "byte_end": 3690,
                    "byte_start": 3683,
                    "column_end": 16,
                    "column_start": 9,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde-1.0.158\\build.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 94,
                    "line_start": 94,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 16,
                        "highlight_start": 9,
                        "text": "        println!(\"cargo:rustc-cfg=no_serde_derive\");"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#serde@1.0.158",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde-1.0.158\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde-1.0.158\\build.rs",
                "edition": "2015",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "message": {
                "rendered": "error: cannot find macro `println` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde-1.0.158\\build.rs:89:9\n   |\n89 |         println!(\"cargo:rustc-cfg=no_relaxed_trait_bounds\");\n   |         ^^^^^^^\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": null,
                "level": "error",
                "message": "cannot find macro `println` in this scope",
                "spans": [
                  {
                    "byte_end": 3525,
                    "byte_start": 3518,
                    "column_end": 16,
                    "column_start": 9,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde-1.0.158\\build.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 89,
                    "line_start": 89,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 16,
                        "highlight_start": 9,
                        "text": "        println!(\"cargo:rustc-cfg=no_relaxed_trait_bounds\");"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#serde@1.0.158",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde-1.0.158\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde-1.0.158\\build.rs",
                "edition": "2015",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "message": {
                "rendered": "error: cannot find macro `println` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde-1.0.158\\build.rs:88:9\n   |\n88 |         println!(\"cargo:rustc-cfg=no_systemtime_checked_add\");\n   |         ^^^^^^^\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": null,
                "level": "error",
                "message": "cannot find macro `println` in this scope",
                "spans": [
                  {
                    "byte_end": 3462,
                    "byte_start": 3455,
                    "column_end": 16,
                    "column_start": 9,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde-1.0.158\\build.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 88,
                    "line_start": 88,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 16,
                        "highlight_start": 9,
                        "text": "        println!(\"cargo:rustc-cfg=no_systemtime_checked_add\");"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#serde@1.0.158",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde-1.0.158\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde-1.0.158\\build.rs",
                "edition": "2015",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "message": {
                "rendered": "error: cannot find macro `println` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde-1.0.158\\build.rs:87:9\n   |\n87 |         println!(\"cargo:rustc-cfg=no_num_nonzero_signed\");\n   |         ^^^^^^^\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": null,
                "level": "error",
                "message": "cannot find macro `println` in this scope",
                "spans": [
                  {
                    "byte_end": 3403,
                    "byte_start": 3396,
                    "column_end": 16,
                    "column_start": 9,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde-1.0.158\\build.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 87,
                    "line_start": 87,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 16,
                        "highlight_start": 9,
                        "text": "        println!(\"cargo:rustc-cfg=no_num_nonzero_signed\");"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#serde@1.0.158",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde-1.0.158\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde-1.0.158\\build.rs",
                "edition": "2015",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "message": {
                "rendered": "error: cannot find macro `println` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde-1.0.158\\build.rs:86:9\n   |\n86 |         println!(\"cargo:rustc-cfg=no_core_try_from\");\n   |         ^^^^^^^\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": null,
                "level": "error",
                "message": "cannot find macro `println` in this scope",
                "spans": [
                  {
                    "byte_end": 3349,
                    "byte_start": 3342,
                    "column_end": 16,
                    "column_start": 9,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde-1.0.158\\build.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 86,
                    "line_start": 86,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 16,
                        "highlight_start": 9,
                        "text": "        println!(\"cargo:rustc-cfg=no_core_try_from\");"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#serde@1.0.158",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde-1.0.158\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde-1.0.158\\build.rs",
                "edition": "2015",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "message": {
                "rendered": "error: cannot find macro `println` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde-1.0.158\\build.rs:78:9\n   |\n78 |         println!(\"cargo:rustc-cfg=no_num_nonzero\");\n   |         ^^^^^^^\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": null,
                "level": "error",
                "message": "cannot find macro `println` in this scope",
                "spans": [
                  {
                    "byte_end": 2987,
                    "byte_start": 2980,
                    "column_end": 16,
                    "column_start": 9,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde-1.0.158\\build.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 78,
                    "line_start": 78,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 16,
                        "highlight_start": 9,
                        "text": "        println!(\"cargo:rustc-cfg=no_num_nonzero\");"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#serde@1.0.158",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde-1.0.158\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde-1.0.158\\build.rs",
                "edition": "2015",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "message": {
                "rendered": "error: cannot find macro `println` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde-1.0.158\\build.rs:72:9\n   |\n72 |         println!(\"cargo:rustc-cfg=no_iterator_try_fold\");\n   |         ^^^^^^^\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": null,
                "level": "error",
                "message": "cannot find macro `println` in this scope",
                "spans": [
                  {
                    "byte_end": 2769,
                    "byte_start": 2762,
                    "column_end": 16,
                    "column_start": 9,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde-1.0.158\\build.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 72,
                    "line_start": 72,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 16,
                        "highlight_start": 9,
                        "text": "        println!(\"cargo:rustc-cfg=no_iterator_try_fold\");"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#serde@1.0.158",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde-1.0.158\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde-1.0.158\\build.rs",
                "edition": "2015",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "message": {
                "rendered": "error: cannot find macro `println` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde-1.0.158\\build.rs:71:9\n   |\n71 |         println!(\"cargo:rustc-cfg=no_range_inclusive\");\n   |         ^^^^^^^\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": null,
                "level": "error",
                "message": "cannot find macro `println` in this scope",
                "spans": [
                  {
                    "byte_end": 2713,
                    "byte_start": 2706,
                    "column_end": 16,
                    "column_start": 9,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde-1.0.158\\build.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 71,
                    "line_start": 71,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 16,
                        "highlight_start": 9,
                        "text": "        println!(\"cargo:rustc-cfg=no_range_inclusive\");"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#serde@1.0.158",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde-1.0.158\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde-1.0.158\\build.rs",
                "edition": "2015",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "message": {
                "rendered": "error: cannot find macro `println` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde-1.0.158\\build.rs:63:9\n   |\n63 |         println!(\"cargo:rustc-cfg=no_integer128\");\n   |         ^^^^^^^\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": null,
                "level": "error",
                "message": "cannot find macro `println` in this scope",
                "spans": [
                  {
                    "byte_end": 2407,
                    "byte_start": 2400,
                    "column_end": 16,
                    "column_start": 9,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde-1.0.158\\build.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 63,
                    "line_start": 63,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 16,
                        "highlight_start": 9,
                        "text": "        println!(\"cargo:rustc-cfg=no_integer128\");"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#serde@1.0.158",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde-1.0.158\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde-1.0.158\\build.rs",
                "edition": "2015",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "message": {
                "rendered": "error: cannot find macro `println` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde-1.0.158\\build.rs:53:9\n   |\n53 |         println!(\"cargo:rustc-cfg=no_core_duration\");\n   |         ^^^^^^^\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": null,
                "level": "error",
                "message": "cannot find macro `println` in this scope",
                "spans": [
                  {
                    "byte_end": 2000,
                    "byte_start": 1993,
                    "column_end": 16,
                    "column_start": 9,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde-1.0.158\\build.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 53,
                    "line_start": 53,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 16,
                        "highlight_start": 9,
                        "text": "        println!(\"cargo:rustc-cfg=no_core_duration\");"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#serde@1.0.158",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde-1.0.158\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde-1.0.158\\build.rs",
                "edition": "2015",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "message": {
                "rendered": "error: cannot find macro `println` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde-1.0.158\\build.rs:47:9\n   |\n47 |         println!(\"cargo:rustc-cfg=no_de_rc_dst\");\n   |         ^^^^^^^\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": null,
                "level": "error",
                "message": "cannot find macro `println` in this scope",
                "spans": [
                  {
                    "byte_end": 1789,
                    "byte_start": 1782,
                    "column_end": 16,
                    "column_start": 9,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde-1.0.158\\build.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 47,
                    "line_start": 47,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 16,
                        "highlight_start": 9,
                        "text": "        println!(\"cargo:rustc-cfg=no_de_rc_dst\");"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#serde@1.0.158",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde-1.0.158\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde-1.0.158\\build.rs",
                "edition": "2015",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "message": {
                "rendered": "error: cannot find macro `println` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde-1.0.158\\build.rs:40:9\n   |\n40 |         println!(\"cargo:rustc-cfg=no_de_boxed_path\");\n   |         ^^^^^^^\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": null,
                "level": "error",
                "message": "cannot find macro `println` in this scope",
                "spans": [
                  {
                    "byte_end": 1495,
                    "byte_start": 1488,
                    "column_end": 16,
                    "column_start": 9,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde-1.0.158\\build.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 40,
                    "line_start": 40,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 16,
                        "highlight_start": 9,
                        "text": "        println!(\"cargo:rustc-cfg=no_de_boxed_path\");"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#serde@1.0.158",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde-1.0.158\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde-1.0.158\\build.rs",
                "edition": "2015",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "message": {
                "rendered": "error: cannot find macro `println` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde-1.0.158\\build.rs:39:9\n   |\n39 |         println!(\"cargo:rustc-cfg=no_de_boxed_c_str\");\n   |         ^^^^^^^\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": null,
                "level": "error",
                "message": "cannot find macro `println` in this scope",
                "spans": [
                  {
                    "byte_end": 1440,
                    "byte_start": 1433,
                    "column_end": 16,
                    "column_start": 9,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde-1.0.158\\build.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 39,
                    "line_start": 39,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 16,
                        "highlight_start": 9,
                        "text": "        println!(\"cargo:rustc-cfg=no_de_boxed_c_str\");"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#serde@1.0.158",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde-1.0.158\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde-1.0.158\\build.rs",
                "edition": "2015",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "message": {
                "rendered": "error: cannot find macro `println` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde-1.0.158\\build.rs:32:9\n   |\n32 |         println!(\"cargo:rustc-cfg=no_core_reverse\");\n   |         ^^^^^^^\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": null,
                "level": "error",
                "message": "cannot find macro `println` in this scope",
                "spans": [
                  {
                    "byte_end": 1103,
                    "byte_start": 1096,
                    "column_end": 16,
                    "column_start": 9,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde-1.0.158\\build.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 32,
                    "line_start": 32,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 16,
                        "highlight_start": 9,
                        "text": "        println!(\"cargo:rustc-cfg=no_core_reverse\");"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#serde@1.0.158",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde-1.0.158\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde-1.0.158\\build.rs",
                "edition": "2015",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "message": {
                "rendered": "error: cannot find macro `println` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde-1.0.158\\build.rs:25:13\n   |\n25 |             println!(\"cargo:rustc-cfg=no_collections_bound\");\n   |             ^^^^^^^\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": null,
                "level": "error",
                "message": "cannot find macro `println` in this scope",
                "spans": [
                  {
                    "byte_end": 888,
                    "byte_start": 881,
                    "column_end": 20,
                    "column_start": 13,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde-1.0.158\\build.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 25,
                    "line_start": 25,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 20,
                        "highlight_start": 13,
                        "text": "            println!(\"cargo:rustc-cfg=no_collections_bound\");"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#serde@1.0.158",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde-1.0.158\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde-1.0.158\\build.rs",
                "edition": "2015",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "message": {
                "rendered": "error: cannot find macro `println` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde-1.0.158\\build.rs:23:9\n   |\n23 |         println!(\"cargo:rustc-cfg=no_ops_bound\");\n   |         ^^^^^^^\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": null,
                "level": "error",
                "message": "cannot find macro `println` in this scope",
                "spans": [
                  {
                    "byte_end": 810,
                    "byte_start": 803,
                    "column_end": 16,
                    "column_start": 9,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde-1.0.158\\build.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 23,
                    "line_start": 23,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 16,
                        "highlight_start": 9,
                        "text": "        println!(\"cargo:rustc-cfg=no_ops_bound\");"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#serde@1.0.158",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde-1.0.158\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde-1.0.158\\build.rs",
                "edition": "2015",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "message": {
                "rendered": "error: cannot find macro `println` in this scope\n --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde-1.0.158\\build.rs:9:5\n  |\n9 |     println!(\"cargo:rerun-if-changed=build.rs\");\n  |     ^^^^^^^\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": null,
                "level": "error",
                "message": "cannot find macro `println` in this scope",
                "spans": [
                  {
                    "byte_end": 307,
                    "byte_start": 300,
                    "column_end": 12,
                    "column_start": 5,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde-1.0.158\\build.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 9,
                    "line_start": 9,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 12,
                        "highlight_start": 5,
                        "text": "    println!(\"cargo:rerun-if-changed=build.rs\");"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#memchr@2.5.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\memchr-2.5.0\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\memchr-2.5.0\\build.rs",
                "edition": "2018",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "message": {
                "rendered": "error[E0462]: found staticlib `std` instead of rlib or dylib\n  |\n  = note: the following crate versions were found:\n          crate `std`: C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib\\rustlib\\x86_64-pc-windows-msvc\\lib\\std-c85e9beb7923f636.dll.lib\n  = help: please recompile that crate using --crate-type lib\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "the following crate versions were found:\ncrate `std`: C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib\\rustlib\\x86_64-pc-windows-msvc\\lib\\std-c85e9beb7923f636.dll.lib",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "please recompile that crate using --crate-type lib",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "E0462",
                  "explanation": "Found `staticlib` `..` instead of `rlib` or `dylib`.\n\nConsider the following two files:\n\n`a.rs`\n```ignore (cannot-link-with-other-tests)\n#![crate_type = \"staticlib\"]\n\nfn foo() {}\n```\n\n`main.rs`\n```ignore (cannot-link-with-other-tests)\nextern crate a;\n\nfn main() {\n    a::foo();\n}\n```\n\nCrate `a` is compiled as a `staticlib`. A `staticlib` is a system-dependant\nlibrary only intended for linking with non-Rust applications (C programs). Note\nthat `staticlib`s include all upstream dependencies (`core`, `std`, other user\ndependencies, etc) which makes them significantly larger than `dylib`s:\nprefer `staticlib` for linking with C programs. Learn more about different\n`crate_type`s in [this section of the Reference](../reference/linkage.html).\n\nThis error can be fixed by:\n * Using [Cargo](../cargo/index.html), the Rust package manager, automatically\n   fixing this issue.\n * Recompiling the crate as a `rlib` or `dylib`; formats suitable for Rust\n   linking.\n"
                },
                "level": "error",
                "message": "found staticlib `std` instead of rlib or dylib",
                "spans": [
                  {
                    "byte_end": 0,
                    "byte_start": 0,
                    "column_end": 1,
                    "column_start": 1,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\memchr-2.5.0\\build.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 1,
                    "line_start": 1,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": []
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#once_cell@1.18.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "once_cell",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0462]: found staticlib `std` instead of rlib or dylib\n  |\n  = note: the following crate versions were found:\n          crate `std`: C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib\\rustlib\\x86_64-pc-windows-msvc\\lib\\std-c85e9beb7923f636.dll.lib\n  = help: please recompile that crate using --crate-type lib\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "the following crate versions were found:\ncrate `std`: C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib\\rustlib\\x86_64-pc-windows-msvc\\lib\\std-c85e9beb7923f636.dll.lib",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "please recompile that crate using --crate-type lib",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "E0462",
                  "explanation": "Found `staticlib` `..` instead of `rlib` or `dylib`.\n\nConsider the following two files:\n\n`a.rs`\n```ignore (cannot-link-with-other-tests)\n#![crate_type = \"staticlib\"]\n\nfn foo() {}\n```\n\n`main.rs`\n```ignore (cannot-link-with-other-tests)\nextern crate a;\n\nfn main() {\n    a::foo();\n}\n```\n\nCrate `a` is compiled as a `staticlib`. A `staticlib` is a system-dependant\nlibrary only intended for linking with non-Rust applications (C programs). Note\nthat `staticlib`s include all upstream dependencies (`core`, `std`, other user\ndependencies, etc) which makes them significantly larger than `dylib`s:\nprefer `staticlib` for linking with C programs. Learn more about different\n`crate_type`s in [this section of the Reference](../reference/linkage.html).\n\nThis error can be fixed by:\n * Using [Cargo](../cargo/index.html), the Rust package manager, automatically\n   fixing this issue.\n * Recompiling the crate as a `rlib` or `dylib`; formats suitable for Rust\n   linking.\n"
                },
                "level": "error",
                "message": "found staticlib `std` instead of rlib or dylib",
                "spans": [
                  {
                    "byte_end": 0,
                    "byte_start": 0,
                    "column_end": 1,
                    "column_start": 1,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 1,
                    "line_start": 1,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": []
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#serde_derive@1.0.158",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde_derive-1.0.158\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde_derive-1.0.158\\build.rs",
                "edition": "2015",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "message": {
                "rendered": "error[E0531]: cannot find tuple struct or tuple variant `Some` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde_derive-1.0.158\\build.rs:12:9\n   |\n12 |         Some(minor) => minor,\n   |         ^^^^ not found in this scope\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0531",
                  "explanation": "An unknown tuple struct/variant has been used.\n\nErroneous code example:\n\n```compile_fail,E0531\nlet Type(x) = Type(12); // error!\nmatch Bar(12) {\n    Bar(x) => {} // error!\n    _ => {}\n}\n```\n\nIn most cases, it's either a forgotten import or a typo. However, let's look at\nhow you can have such a type:\n\n```edition2018\nstruct Type(u32); // this is a tuple struct\n\nenum Foo {\n    Bar(u32), // this is a tuple variant\n}\n\nuse Foo::*; // To use Foo's variant directly, we need to import them in\n            // the scope.\n```\n\nEither way, it should work fine with our previous code:\n\n```edition2018\nstruct Type(u32);\n\nenum Foo {\n    Bar(u32),\n}\nuse Foo::*;\n\nlet Type(x) = Type(12); // ok!\nmatch Type(12) {\n    Type(x) => {} // ok!\n    _ => {}\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find tuple struct or tuple variant `Some` in this scope",
                "spans": [
                  {
                    "byte_end": 387,
                    "byte_start": 383,
                    "column_end": 13,
                    "column_start": 9,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde_derive-1.0.158\\build.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 12,
                    "line_start": 12,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 13,
                        "highlight_start": 9,
                        "text": "        Some(minor) => minor,"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#serde_derive@1.0.158",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde_derive-1.0.158\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde_derive-1.0.158\\build.rs",
                "edition": "2015",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "message": {
                "rendered": "error[E0412]: cannot find type `Option` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde_derive-1.0.158\\build.rs:29:29\n   |\n29 | fn rustc_minor_version() -> Option<u32> {\n   |                             ^^^^^^ not found in this scope\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0412",
                  "explanation": "A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"
                },
                "level": "error",
                "message": "cannot find type `Option` in this scope",
                "spans": [
                  {
                    "byte_end": 925,
                    "byte_start": 919,
                    "column_end": 35,
                    "column_start": 29,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde_derive-1.0.158\\build.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 29,
                    "line_start": 29,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 35,
                        "highlight_start": 29,
                        "text": "fn rustc_minor_version() -> Option<u32> {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#serde_derive@1.0.158",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde_derive-1.0.158\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde_derive-1.0.158\\build.rs",
                "edition": "2015",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "message": {
                "rendered": "error[E0425]: cannot find value `None` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde_derive-1.0.158\\build.rs:35:16\n   |\n35 |         return None;\n   |                ^^^^ not found in this scope\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0425",
                  "explanation": "An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"
                },
                "level": "error",
                "message": "cannot find value `None` in this scope",
                "spans": [
                  {
                    "byte_end": 1200,
                    "byte_start": 1196,
                    "column_end": 20,
                    "column_start": 16,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde_derive-1.0.158\\build.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 35,
                    "line_start": 35,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 20,
                        "highlight_start": 16,
                        "text": "        return None;"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#serde_derive@1.0.158",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde_derive-1.0.158\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde_derive-1.0.158\\build.rs",
                "edition": "2015",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "message": {
                "rendered": "error: `#[panic_handler]` function required, but not found\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": null,
                "level": "error",
                "message": "`#[panic_handler]` function required, but not found",
                "spans": []
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#serde_derive@1.0.158",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde_derive-1.0.158\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde_derive-1.0.158\\build.rs",
                "edition": "2015",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "message": {
                "rendered": "error: unwinding panics are not supported without std\n  |\n  = help: using nightly cargo, use -Zbuild-std with panic=\"abort\" to avoid unwinding\n  = note: since the core library is usually precompiled with panic=\"unwind\", rebuilding your crate with panic=\"abort\" may not be enough to fix the problem\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "using nightly cargo, use -Zbuild-std with panic=\"abort\" to avoid unwinding",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "since the core library is usually precompiled with panic=\"unwind\", rebuilding your crate with panic=\"abort\" may not be enough to fix the problem",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": null,
                "level": "error",
                "message": "unwinding panics are not supported without std",
                "spans": []
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#pin-project-lite@0.2.9",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\pin-project-lite-0.2.9\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "pin_project_lite",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\pin-project-lite-0.2.9\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0405]: cannot find trait `Sized` in this scope\n    --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\pin-project-lite-0.2.9\\src\\lib.rs:1514:32\n     |\n1514 |     pub struct AlwaysUnpin<T: ?Sized>(PhantomData<T>);\n     |                                ^^^^^ not found in this scope\n     |\nhelp: consider importing this trait\n     |\n1503 +     use core::marker::Sized;\n     |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this trait",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 48304,
                        "byte_start": 48304,
                        "column_end": 5,
                        "column_start": 5,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\pin-project-lite-0.2.9\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 1503,
                        "line_start": 1503,
                        "suggested_replacement": "use core::marker::Sized;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 5,
                            "highlight_start": 5,
                            "text": "    use core::mem::ManuallyDrop;"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0405",
                  "explanation": "The code refers to a trait that is not in scope.\n\nErroneous code example:\n\n```compile_fail,E0405\nstruct Foo;\n\nimpl SomeTrait for Foo {} // error: trait `SomeTrait` is not in scope\n```\n\nPlease verify that the name of the trait wasn't misspelled and ensure that it\nwas imported. Example:\n\n```\n# #[cfg(for_demonstration_only)]\n// solution 1:\nuse some_file::SomeTrait;\n\n// solution 2:\ntrait SomeTrait {\n    // some functions\n}\n\nstruct Foo;\n\nimpl SomeTrait for Foo { // ok!\n    // implements functions\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find trait `Sized` in this scope",
                "spans": [
                  {
                    "byte_end": 48588,
                    "byte_start": 48583,
                    "column_end": 37,
                    "column_start": 32,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\pin-project-lite-0.2.9\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 1514,
                    "line_start": 1514,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 37,
                        "highlight_start": 32,
                        "text": "    pub struct AlwaysUnpin<T: ?Sized>(PhantomData<T>);"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#pin-project-lite@0.2.9",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\pin-project-lite-0.2.9\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "pin_project_lite",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\pin-project-lite-0.2.9\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0405]: cannot find trait `Sized` in this scope\n    --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\pin-project-lite-0.2.9\\src\\lib.rs:1516:14\n     |\n1516 |     impl<T: ?Sized> Unpin for AlwaysUnpin<T> {}\n     |              ^^^^^ not found in this scope\n     |\nhelp: consider importing this trait\n     |\n1503 +     use core::marker::Sized;\n     |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this trait",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 48304,
                        "byte_start": 48304,
                        "column_end": 5,
                        "column_start": 5,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\pin-project-lite-0.2.9\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 1503,
                        "line_start": 1503,
                        "suggested_replacement": "use core::marker::Sized;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 5,
                            "highlight_start": 5,
                            "text": "    use core::mem::ManuallyDrop;"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0405",
                  "explanation": "The code refers to a trait that is not in scope.\n\nErroneous code example:\n\n```compile_fail,E0405\nstruct Foo;\n\nimpl SomeTrait for Foo {} // error: trait `SomeTrait` is not in scope\n```\n\nPlease verify that the name of the trait wasn't misspelled and ensure that it\nwas imported. Example:\n\n```\n# #[cfg(for_demonstration_only)]\n// solution 1:\nuse some_file::SomeTrait;\n\n// solution 2:\ntrait SomeTrait {\n    // some functions\n}\n\nstruct Foo;\n\nimpl SomeTrait for Foo { // ok!\n    // implements functions\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find trait `Sized` in this scope",
                "spans": [
                  {
                    "byte_end": 48626,
                    "byte_start": 48621,
                    "column_end": 19,
                    "column_start": 14,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\pin-project-lite-0.2.9\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 1516,
                    "line_start": 1516,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 19,
                        "highlight_start": 14,
                        "text": "    impl<T: ?Sized> Unpin for AlwaysUnpin<T> {}"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#pin-project-lite@0.2.9",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\pin-project-lite-0.2.9\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "pin_project_lite",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\pin-project-lite-0.2.9\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0405]: cannot find trait `Sized` in this scope\n    --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\pin-project-lite-0.2.9\\src\\lib.rs:1520:43\n     |\n1520 |     pub struct UnsafeDropInPlaceGuard<T: ?Sized>(*mut T);\n     |                                           ^^^^^ not found in this scope\n     |\nhelp: consider importing this trait\n     |\n1503 +     use core::marker::Sized;\n     |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this trait",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 48304,
                        "byte_start": 48304,
                        "column_end": 5,
                        "column_start": 5,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\pin-project-lite-0.2.9\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 1503,
                        "line_start": 1503,
                        "suggested_replacement": "use core::marker::Sized;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 5,
                            "highlight_start": 5,
                            "text": "    use core::mem::ManuallyDrop;"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0405",
                  "explanation": "The code refers to a trait that is not in scope.\n\nErroneous code example:\n\n```compile_fail,E0405\nstruct Foo;\n\nimpl SomeTrait for Foo {} // error: trait `SomeTrait` is not in scope\n```\n\nPlease verify that the name of the trait wasn't misspelled and ensure that it\nwas imported. Example:\n\n```\n# #[cfg(for_demonstration_only)]\n// solution 1:\nuse some_file::SomeTrait;\n\n// solution 2:\ntrait SomeTrait {\n    // some functions\n}\n\nstruct Foo;\n\nimpl SomeTrait for Foo { // ok!\n    // implements functions\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find trait `Sized` in this scope",
                "spans": [
                  {
                    "byte_end": 48792,
                    "byte_start": 48787,
                    "column_end": 48,
                    "column_start": 43,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\pin-project-lite-0.2.9\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 1520,
                    "line_start": 1520,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 48,
                        "highlight_start": 43,
                        "text": "    pub struct UnsafeDropInPlaceGuard<T: ?Sized>(*mut T);"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#pin-project-lite@0.2.9",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\pin-project-lite-0.2.9\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "pin_project_lite",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\pin-project-lite-0.2.9\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0405]: cannot find trait `Sized` in this scope\n    --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\pin-project-lite-0.2.9\\src\\lib.rs:1522:14\n     |\n1522 |     impl<T: ?Sized> UnsafeDropInPlaceGuard<T> {\n     |              ^^^^^ not found in this scope\n     |\nhelp: consider importing this trait\n     |\n1503 +     use core::marker::Sized;\n     |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this trait",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 48304,
                        "byte_start": 48304,
                        "column_end": 5,
                        "column_start": 5,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\pin-project-lite-0.2.9\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 1503,
                        "line_start": 1503,
                        "suggested_replacement": "use core::marker::Sized;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 5,
                            "highlight_start": 5,
                            "text": "    use core::mem::ManuallyDrop;"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0405",
                  "explanation": "The code refers to a trait that is not in scope.\n\nErroneous code example:\n\n```compile_fail,E0405\nstruct Foo;\n\nimpl SomeTrait for Foo {} // error: trait `SomeTrait` is not in scope\n```\n\nPlease verify that the name of the trait wasn't misspelled and ensure that it\nwas imported. Example:\n\n```\n# #[cfg(for_demonstration_only)]\n// solution 1:\nuse some_file::SomeTrait;\n\n// solution 2:\ntrait SomeTrait {\n    // some functions\n}\n\nstruct Foo;\n\nimpl SomeTrait for Foo { // ok!\n    // implements functions\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find trait `Sized` in this scope",
                "spans": [
                  {
                    "byte_end": 48822,
                    "byte_start": 48817,
                    "column_end": 19,
                    "column_start": 14,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\pin-project-lite-0.2.9\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 1522,
                    "line_start": 1522,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 19,
                        "highlight_start": 14,
                        "text": "    impl<T: ?Sized> UnsafeDropInPlaceGuard<T> {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#pin-project-lite@0.2.9",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\pin-project-lite-0.2.9\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "pin_project_lite",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\pin-project-lite-0.2.9\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0405]: cannot find trait `Sized` in this scope\n    --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\pin-project-lite-0.2.9\\src\\lib.rs:1529:14\n     |\n1529 |     impl<T: ?Sized> Drop for UnsafeDropInPlaceGuard<T> {\n     |              ^^^^^ not found in this scope\n     |\nhelp: consider importing this trait\n     |\n1503 +     use core::marker::Sized;\n     |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this trait",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 48304,
                        "byte_start": 48304,
                        "column_end": 5,
                        "column_start": 5,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\pin-project-lite-0.2.9\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 1503,
                        "line_start": 1503,
                        "suggested_replacement": "use core::marker::Sized;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 5,
                            "highlight_start": 5,
                            "text": "    use core::mem::ManuallyDrop;"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0405",
                  "explanation": "The code refers to a trait that is not in scope.\n\nErroneous code example:\n\n```compile_fail,E0405\nstruct Foo;\n\nimpl SomeTrait for Foo {} // error: trait `SomeTrait` is not in scope\n```\n\nPlease verify that the name of the trait wasn't misspelled and ensure that it\nwas imported. Example:\n\n```\n# #[cfg(for_demonstration_only)]\n// solution 1:\nuse some_file::SomeTrait;\n\n// solution 2:\ntrait SomeTrait {\n    // some functions\n}\n\nstruct Foo;\n\nimpl SomeTrait for Foo { // ok!\n    // implements functions\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find trait `Sized` in this scope",
                "spans": [
                  {
                    "byte_end": 48981,
                    "byte_start": 48976,
                    "column_end": 19,
                    "column_start": 14,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\pin-project-lite-0.2.9\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 1529,
                    "line_start": 1529,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 19,
                        "highlight_start": 14,
                        "text": "    impl<T: ?Sized> Drop for UnsafeDropInPlaceGuard<T> {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#pin-project-lite@0.2.9",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\pin-project-lite-0.2.9\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "pin_project_lite",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\pin-project-lite-0.2.9\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error: relaxing a default bound only does something for `?Sized`; all other traits are not bound by default\n    --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\pin-project-lite-0.2.9\\src\\lib.rs:1514:31\n     |\n1514 |     pub struct AlwaysUnpin<T: ?Sized>(PhantomData<T>);\n     |                               ^^^^^^\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": null,
                "level": "error",
                "message": "relaxing a default bound only does something for `?Sized`; all other traits are not bound by default",
                "spans": [
                  {
                    "byte_end": 48588,
                    "byte_start": 48582,
                    "column_end": 37,
                    "column_start": 31,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\pin-project-lite-0.2.9\\src\\lib.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 1514,
                    "line_start": 1514,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 37,
                        "highlight_start": 31,
                        "text": "    pub struct AlwaysUnpin<T: ?Sized>(PhantomData<T>);"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#pin-project-lite@0.2.9",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\pin-project-lite-0.2.9\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "pin_project_lite",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\pin-project-lite-0.2.9\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error: relaxing a default bound only does something for `?Sized`; all other traits are not bound by default\n    --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\pin-project-lite-0.2.9\\src\\lib.rs:1520:42\n     |\n1520 |     pub struct UnsafeDropInPlaceGuard<T: ?Sized>(*mut T);\n     |                                          ^^^^^^\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": null,
                "level": "error",
                "message": "relaxing a default bound only does something for `?Sized`; all other traits are not bound by default",
                "spans": [
                  {
                    "byte_end": 48792,
                    "byte_start": 48786,
                    "column_end": 48,
                    "column_start": 42,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\pin-project-lite-0.2.9\\src\\lib.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 1520,
                    "line_start": 1520,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 48,
                        "highlight_start": 42,
                        "text": "    pub struct UnsafeDropInPlaceGuard<T: ?Sized>(*mut T);"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#pin-project-lite@0.2.9",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\pin-project-lite-0.2.9\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "pin_project_lite",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\pin-project-lite-0.2.9\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error: relaxing a default bound only does something for `?Sized`; all other traits are not bound by default\n    --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\pin-project-lite-0.2.9\\src\\lib.rs:1522:13\n     |\n1522 |     impl<T: ?Sized> UnsafeDropInPlaceGuard<T> {\n     |             ^^^^^^\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": null,
                "level": "error",
                "message": "relaxing a default bound only does something for `?Sized`; all other traits are not bound by default",
                "spans": [
                  {
                    "byte_end": 48822,
                    "byte_start": 48816,
                    "column_end": 19,
                    "column_start": 13,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\pin-project-lite-0.2.9\\src\\lib.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 1522,
                    "line_start": 1522,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 19,
                        "highlight_start": 13,
                        "text": "    impl<T: ?Sized> UnsafeDropInPlaceGuard<T> {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#pin-project-lite@0.2.9",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\pin-project-lite-0.2.9\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "pin_project_lite",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\pin-project-lite-0.2.9\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "Some errors have detailed explanations: E0405, E0786.\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": null,
                "level": "failure-note",
                "message": "Some errors have detailed explanations: E0405, E0786.",
                "spans": []
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#pin-project-lite@0.2.9",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\pin-project-lite-0.2.9\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "pin_project_lite",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\pin-project-lite-0.2.9\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "For more information about an error, try `rustc --explain E0405`.\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": null,
                "level": "failure-note",
                "message": "For more information about an error, try `rustc --explain E0405`.",
                "spans": []
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#windows_x86_64_msvc@0.42.2",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\windows_x86_64_msvc-0.42.2\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\windows_x86_64_msvc-0.42.2\\build.rs",
                "edition": "2018",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "message": {
                "rendered": "error: cannot find macro `println` in this scope\n --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\windows_x86_64_msvc-0.42.2\\build.rs:9:5\n  |\n9 |     println!(\"cargo:rustc-link-search=native={}\", std::path::Path::new(&dir).join(\"lib\").display());\n  |     ^^^^^^^\n  |\nhelp: consider importing this macro\n  |\n1 + use std::println;\n  |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this macro",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 0,
                        "byte_start": 0,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\windows_x86_64_msvc-0.42.2\\build.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 1,
                        "line_start": 1,
                        "suggested_replacement": "use std::println;\n\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": []
                      }
                    ]
                  }
                ],
                "code": null,
                "level": "error",
                "message": "cannot find macro `println` in this scope",
                "spans": [
                  {
                    "byte_end": 241,
                    "byte_start": 234,
                    "column_end": 12,
                    "column_start": 5,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\windows_x86_64_msvc-0.42.2\\build.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 9,
                    "line_start": 9,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 12,
                        "highlight_start": 5,
                        "text": "    println!(\"cargo:rustc-link-search=native={}\", std::path::Path::new(&dir).join(\"lib\").display());"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#windows_x86_64_msvc@0.42.2",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\windows_x86_64_msvc-0.42.2\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\windows_x86_64_msvc-0.42.2\\build.rs",
                "edition": "2018",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "message": {
                "rendered": "For more information about this error, try `rustc --explain E0462`.\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": null,
                "level": "failure-note",
                "message": "For more information about this error, try `rustc --explain E0462`.",
                "spans": []
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#serde_derive@1.0.158",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde_derive-1.0.158\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde_derive-1.0.158\\build.rs",
                "edition": "2015",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "message": {
                "rendered": "error[E0425]: cannot find function, tuple struct or tuple variant `Some` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde_derive-1.0.158\\build.rs:34:25\n   |\n34 |     if pieces.next() != Some(\"rustc 1\") {\n   |                         ^^^^ not found in this scope\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0425",
                  "explanation": "An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"
                },
                "level": "error",
                "message": "cannot find function, tuple struct or tuple variant `Some` in this scope",
                "spans": [
                  {
                    "byte_end": 1167,
                    "byte_start": 1163,
                    "column_end": 29,
                    "column_start": 25,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde_derive-1.0.158\\build.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 34,
                    "line_start": 34,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 29,
                        "highlight_start": 25,
                        "text": "    if pieces.next() != Some(\"rustc 1\") {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#serde_derive@1.0.158",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde_derive-1.0.158\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde_derive-1.0.158\\build.rs",
                "edition": "2015",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "message": {
                "rendered": "Some errors have detailed explanations: E0412, E0425, E0462, E0531.\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": null,
                "level": "failure-note",
                "message": "Some errors have detailed explanations: E0412, E0425, E0462, E0531.",
                "spans": []
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#serde_derive@1.0.158",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde_derive-1.0.158\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde_derive-1.0.158\\build.rs",
                "edition": "2015",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "message": {
                "rendered": "For more information about an error, try `rustc --explain E0412`.\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": null,
                "level": "failure-note",
                "message": "For more information about an error, try `rustc --explain E0412`.",
                "spans": []
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#once_cell@1.18.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "once_cell",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0786]: found invalid metadata files for crate `core` which `alloc` depends on\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs:370:1\n    |\n370 | extern crate alloc;\n    | ^^^^^^^^^^^^^^^^^^^\n    |\n    = note: failed to mmap file 'C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib\\rustlib\\x86_64-pc-windows-msvc\\lib\\libcore-50d17f87cee49b53.rlib': The paging file is too small for this operation to complete. (os error 1455)\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "failed to mmap file 'C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib\\rustlib\\x86_64-pc-windows-msvc\\lib\\libcore-50d17f87cee49b53.rlib': The paging file is too small for this operation to complete. (os error 1455)",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "E0786",
                  "explanation": "A metadata file was invalid.\n\nErroneous code example:\n\n```ignore (needs extern files)\nuse ::foo; // error: found invalid metadata files for crate `foo`\n```\n\nWhen loading crates, each crate must have a valid metadata file.\nInvalid files could be caused by filesystem corruption,\nan IO error while reading the file, or (rarely) a bug in the compiler itself.\n\nConsider deleting the file and recreating it,\nor reporting a bug against the compiler.\n"
                },
                "level": "error",
                "message": "found invalid metadata files for crate `core` which `alloc` depends on",
                "spans": [
                  {
                    "byte_end": 12513,
                    "byte_start": 12494,
                    "column_end": 20,
                    "column_start": 1,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 370,
                    "line_start": 370,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 20,
                        "highlight_start": 1,
                        "text": "extern crate alloc;"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#memchr@2.5.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\memchr-2.5.0\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\memchr-2.5.0\\build.rs",
                "edition": "2018",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "message": {
                "rendered": "error[E0463]: can't find crate for `std`\n --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\memchr-2.5.0\\build.rs:1:5\n  |\n1 | use std::env;\n  |     ^^^ can't find crate\n  |\n  = note: the `x86_64-pc-windows-msvc` target may not support the standard library\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "the `x86_64-pc-windows-msvc` target may not support the standard library",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "E0463",
                  "explanation": "A crate was declared but cannot be found.\n\nErroneous code example:\n\n```compile_fail,E0463\nextern crate foo; // error: can't find crate\n```\n\nYou need to link your code to the relevant crate in order to be able to use it\n(through Cargo or the `-L` option of rustc, for example).\n\n## Common causes\n\n- The crate is not present at all. If using Cargo, add it to `[dependencies]`\n  in Cargo.toml.\n- The crate is present, but under a different name. If using Cargo, look for\n  `package = ` under `[dependencies]` in Cargo.toml.\n\n## Common causes for missing `std` or `core`\n\n- You are cross-compiling for a target which doesn't have `std` prepackaged.\n  Consider one of the following:\n  + Adding a pre-compiled version of std with `rustup target add`\n  + Building std from source with `cargo build -Z build-std`\n  + Using `#![no_std]` at the crate root, so you won't need `std` in the first\n    place.\n- You are developing the compiler itself and haven't built libstd from source.\n  You can usually build it with `x.py build library/std`. More information\n  about x.py is available in the [rustc-dev-guide].\n\n[rustc-dev-guide]: https://rustc-dev-guide.rust-lang.org/building/how-to-build-and-run.html#building-the-compiler\n"
                },
                "level": "error",
                "message": "can't find crate for `std`",
                "spans": [
                  {
                    "byte_end": 7,
                    "byte_start": 4,
                    "column_end": 8,
                    "column_start": 5,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\memchr-2.5.0\\build.rs",
                    "is_primary": true,
                    "label": "can't find crate",
                    "line_end": 1,
                    "line_start": 1,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 8,
                        "highlight_start": 5,
                        "text": "use std::env;"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#serde@1.0.158",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde-1.0.158\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde-1.0.158\\build.rs",
                "edition": "2015",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "message": {
                "rendered": "error[E0531]: cannot find tuple struct or tuple variant `Some` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde-1.0.158\\build.rs:12:9\n   |\n12 |         Some(minor) => minor,\n   |         ^^^^ not found in this scope\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0531",
                  "explanation": "An unknown tuple struct/variant has been used.\n\nErroneous code example:\n\n```compile_fail,E0531\nlet Type(x) = Type(12); // error!\nmatch Bar(12) {\n    Bar(x) => {} // error!\n    _ => {}\n}\n```\n\nIn most cases, it's either a forgotten import or a typo. However, let's look at\nhow you can have such a type:\n\n```edition2018\nstruct Type(u32); // this is a tuple struct\n\nenum Foo {\n    Bar(u32), // this is a tuple variant\n}\n\nuse Foo::*; // To use Foo's variant directly, we need to import them in\n            // the scope.\n```\n\nEither way, it should work fine with our previous code:\n\n```edition2018\nstruct Type(u32);\n\nenum Foo {\n    Bar(u32),\n}\nuse Foo::*;\n\nlet Type(x) = Type(12); // ok!\nmatch Type(12) {\n    Type(x) => {} // ok!\n    _ => {}\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find tuple struct or tuple variant `Some` in this scope",
                "spans": [
                  {
                    "byte_end": 404,
                    "byte_start": 400,
                    "column_end": 13,
                    "column_start": 9,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde-1.0.158\\build.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 12,
                    "line_start": 12,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 13,
                        "highlight_start": 9,
                        "text": "        Some(minor) => minor,"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#serde@1.0.158",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde-1.0.158\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde-1.0.158\\build.rs",
                "edition": "2015",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "message": {
                "rendered": "error[E0412]: cannot find type `Option` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde-1.0.158\\build.rs:125:29\n    |\n125 | fn rustc_minor_version() -> Option<u32> {\n    |                             ^^^^^^ not found in this scope\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0412",
                  "explanation": "A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"
                },
                "level": "error",
                "message": "cannot find type `Option` in this scope",
                "spans": [
                  {
                    "byte_end": 4936,
                    "byte_start": 4930,
                    "column_end": 35,
                    "column_start": 29,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde-1.0.158\\build.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 125,
                    "line_start": 125,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 35,
                        "highlight_start": 29,
                        "text": "fn rustc_minor_version() -> Option<u32> {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#serde@1.0.158",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde-1.0.158\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde-1.0.158\\build.rs",
                "edition": "2015",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "message": {
                "rendered": "error[E0531]: cannot find tuple struct or tuple variant `Some` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde-1.0.158\\build.rs:127:9\n    |\n127 |         Some(rustc) => rustc,\n    |         ^^^^ not found in this scope\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0531",
                  "explanation": "An unknown tuple struct/variant has been used.\n\nErroneous code example:\n\n```compile_fail,E0531\nlet Type(x) = Type(12); // error!\nmatch Bar(12) {\n    Bar(x) => {} // error!\n    _ => {}\n}\n```\n\nIn most cases, it's either a forgotten import or a typo. However, let's look at\nhow you can have such a type:\n\n```edition2018\nstruct Type(u32); // this is a tuple struct\n\nenum Foo {\n    Bar(u32), // this is a tuple variant\n}\n\nuse Foo::*; // To use Foo's variant directly, we need to import them in\n            // the scope.\n```\n\nEither way, it should work fine with our previous code:\n\n```edition2018\nstruct Type(u32);\n\nenum Foo {\n    Bar(u32),\n}\nuse Foo::*;\n\nlet Type(x) = Type(12); // ok!\nmatch Type(12) {\n    Type(x) => {} // ok!\n    _ => {}\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find tuple struct or tuple variant `Some` in this scope",
                "spans": [
                  {
                    "byte_end": 5001,
                    "byte_start": 4997,
                    "column_end": 13,
                    "column_start": 9,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde-1.0.158\\build.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 127,
                    "line_start": 127,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 13,
                        "highlight_start": 9,
                        "text": "        Some(rustc) => rustc,"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#serde@1.0.158",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde-1.0.158\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde-1.0.158\\build.rs",
                "edition": "2015",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "message": {
                "rendered": "error[E0531]: cannot find tuple struct or tuple variant `Ok` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde-1.0.158\\build.rs:132:9\n    |\n132 |         Ok(output) => output,\n    |         ^^ not found in this scope\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0531",
                  "explanation": "An unknown tuple struct/variant has been used.\n\nErroneous code example:\n\n```compile_fail,E0531\nlet Type(x) = Type(12); // error!\nmatch Bar(12) {\n    Bar(x) => {} // error!\n    _ => {}\n}\n```\n\nIn most cases, it's either a forgotten import or a typo. However, let's look at\nhow you can have such a type:\n\n```edition2018\nstruct Type(u32); // this is a tuple struct\n\nenum Foo {\n    Bar(u32), // this is a tuple variant\n}\n\nuse Foo::*; // To use Foo's variant directly, we need to import them in\n            // the scope.\n```\n\nEither way, it should work fine with our previous code:\n\n```edition2018\nstruct Type(u32);\n\nenum Foo {\n    Bar(u32),\n}\nuse Foo::*;\n\nlet Type(x) = Type(12); // ok!\nmatch Type(12) {\n    Type(x) => {} // ok!\n    _ => {}\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find tuple struct or tuple variant `Ok` in this scope",
                "spans": [
                  {
                    "byte_end": 5137,
                    "byte_start": 5135,
                    "column_end": 11,
                    "column_start": 9,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde-1.0.158\\build.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 132,
                    "line_start": 132,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 11,
                        "highlight_start": 9,
                        "text": "        Ok(output) => output,"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#serde@1.0.158",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde-1.0.158\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde-1.0.158\\build.rs",
                "edition": "2015",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "message": {
                "rendered": "error[E0531]: cannot find tuple struct or tuple variant `Err` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde-1.0.158\\build.rs:133:9\n    |\n133 |         Err(_) => return None,\n    |         ^^^ not found in this scope\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0531",
                  "explanation": "An unknown tuple struct/variant has been used.\n\nErroneous code example:\n\n```compile_fail,E0531\nlet Type(x) = Type(12); // error!\nmatch Bar(12) {\n    Bar(x) => {} // error!\n    _ => {}\n}\n```\n\nIn most cases, it's either a forgotten import or a typo. However, let's look at\nhow you can have such a type:\n\n```edition2018\nstruct Type(u32); // this is a tuple struct\n\nenum Foo {\n    Bar(u32), // this is a tuple variant\n}\n\nuse Foo::*; // To use Foo's variant directly, we need to import them in\n            // the scope.\n```\n\nEither way, it should work fine with our previous code:\n\n```edition2018\nstruct Type(u32);\n\nenum Foo {\n    Bar(u32),\n}\nuse Foo::*;\n\nlet Type(x) = Type(12); // ok!\nmatch Type(12) {\n    Type(x) => {} // ok!\n    _ => {}\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find tuple struct or tuple variant `Err` in this scope",
                "spans": [
                  {
                    "byte_end": 5168,
                    "byte_start": 5165,
                    "column_end": 12,
                    "column_start": 9,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde-1.0.158\\build.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 133,
                    "line_start": 133,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 12,
                        "highlight_start": 9,
                        "text": "        Err(_) => return None,"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#serde@1.0.158",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde-1.0.158\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde-1.0.158\\build.rs",
                "edition": "2015",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "message": {
                "rendered": "error[E0425]: cannot find value `None` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde-1.0.158\\build.rs:133:26\n    |\n133 |         Err(_) => return None,\n    |                          ^^^^ not found in this scope\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0425",
                  "explanation": "An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"
                },
                "level": "error",
                "message": "cannot find value `None` in this scope",
                "spans": [
                  {
                    "byte_end": 5186,
                    "byte_start": 5182,
                    "column_end": 30,
                    "column_start": 26,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde-1.0.158\\build.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 133,
                    "line_start": 133,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 30,
                        "highlight_start": 26,
                        "text": "        Err(_) => return None,"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#serde@1.0.158",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde-1.0.158\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde-1.0.158\\build.rs",
                "edition": "2015",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "message": {
                "rendered": "error[E0531]: cannot find tuple struct or tuple variant `Ok` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde-1.0.158\\build.rs:137:9\n    |\n137 |         Ok(version) => version,\n    |         ^^ not found in this scope\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0531",
                  "explanation": "An unknown tuple struct/variant has been used.\n\nErroneous code example:\n\n```compile_fail,E0531\nlet Type(x) = Type(12); // error!\nmatch Bar(12) {\n    Bar(x) => {} // error!\n    _ => {}\n}\n```\n\nIn most cases, it's either a forgotten import or a typo. However, let's look at\nhow you can have such a type:\n\n```edition2018\nstruct Type(u32); // this is a tuple struct\n\nenum Foo {\n    Bar(u32), // this is a tuple variant\n}\n\nuse Foo::*; // To use Foo's variant directly, we need to import them in\n            // the scope.\n```\n\nEither way, it should work fine with our previous code:\n\n```edition2018\nstruct Type(u32);\n\nenum Foo {\n    Bar(u32),\n}\nuse Foo::*;\n\nlet Type(x) = Type(12); // ok!\nmatch Type(12) {\n    Type(x) => {} // ok!\n    _ => {}\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find tuple struct or tuple variant `Ok` in this scope",
                "spans": [
                  {
                    "byte_end": 5263,
                    "byte_start": 5261,
                    "column_end": 11,
                    "column_start": 9,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde-1.0.158\\build.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 137,
                    "line_start": 137,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 11,
                        "highlight_start": 9,
                        "text": "        Ok(version) => version,"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#serde@1.0.158",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde-1.0.158\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde-1.0.158\\build.rs",
                "edition": "2015",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "message": {
                "rendered": "error[E0531]: cannot find tuple struct or tuple variant `Err` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde-1.0.158\\build.rs:138:9\n    |\n138 |         Err(_) => return None,\n    |         ^^^ not found in this scope\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0531",
                  "explanation": "An unknown tuple struct/variant has been used.\n\nErroneous code example:\n\n```compile_fail,E0531\nlet Type(x) = Type(12); // error!\nmatch Bar(12) {\n    Bar(x) => {} // error!\n    _ => {}\n}\n```\n\nIn most cases, it's either a forgotten import or a typo. However, let's look at\nhow you can have such a type:\n\n```edition2018\nstruct Type(u32); // this is a tuple struct\n\nenum Foo {\n    Bar(u32), // this is a tuple variant\n}\n\nuse Foo::*; // To use Foo's variant directly, we need to import them in\n            // the scope.\n```\n\nEither way, it should work fine with our previous code:\n\n```edition2018\nstruct Type(u32);\n\nenum Foo {\n    Bar(u32),\n}\nuse Foo::*;\n\nlet Type(x) = Type(12); // ok!\nmatch Type(12) {\n    Type(x) => {} // ok!\n    _ => {}\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find tuple struct or tuple variant `Err` in this scope",
                "spans": [
                  {
                    "byte_end": 5296,
                    "byte_start": 5293,
                    "column_end": 12,
                    "column_start": 9,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde-1.0.158\\build.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 138,
                    "line_start": 138,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 12,
                        "highlight_start": 9,
                        "text": "        Err(_) => return None,"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#serde@1.0.158",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde-1.0.158\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde-1.0.158\\build.rs",
                "edition": "2015",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "message": {
                "rendered": "error[E0425]: cannot find value `None` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde-1.0.158\\build.rs:138:26\n    |\n138 |         Err(_) => return None,\n    |                          ^^^^ not found in this scope\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0425",
                  "explanation": "An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"
                },
                "level": "error",
                "message": "cannot find value `None` in this scope",
                "spans": [
                  {
                    "byte_end": 5314,
                    "byte_start": 5310,
                    "column_end": 30,
                    "column_start": 26,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde-1.0.158\\build.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 138,
                    "line_start": 138,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 30,
                        "highlight_start": 26,
                        "text": "        Err(_) => return None,"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#serde@1.0.158",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde-1.0.158\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde-1.0.158\\build.rs",
                "edition": "2015",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "message": {
                "rendered": "error[E0425]: cannot find value `None` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde-1.0.158\\build.rs:143:16\n    |\n143 |         return None;\n    |                ^^^^ not found in this scope\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0425",
                  "explanation": "An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"
                },
                "level": "error",
                "message": "cannot find value `None` in this scope",
                "spans": [
                  {
                    "byte_end": 5426,
                    "byte_start": 5422,
                    "column_end": 20,
                    "column_start": 16,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde-1.0.158\\build.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 143,
                    "line_start": 143,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 20,
                        "highlight_start": 16,
                        "text": "        return None;"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#serde@1.0.158",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde-1.0.158\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde-1.0.158\\build.rs",
                "edition": "2015",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "message": {
                "rendered": "error[E0531]: cannot find tuple struct or tuple variant `Some` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde-1.0.158\\build.rs:147:9\n    |\n147 |         Some(next) => next,\n    |         ^^^^ not found in this scope\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0531",
                  "explanation": "An unknown tuple struct/variant has been used.\n\nErroneous code example:\n\n```compile_fail,E0531\nlet Type(x) = Type(12); // error!\nmatch Bar(12) {\n    Bar(x) => {} // error!\n    _ => {}\n}\n```\n\nIn most cases, it's either a forgotten import or a typo. However, let's look at\nhow you can have such a type:\n\n```edition2018\nstruct Type(u32); // this is a tuple struct\n\nenum Foo {\n    Bar(u32), // this is a tuple variant\n}\n\nuse Foo::*; // To use Foo's variant directly, we need to import them in\n            // the scope.\n```\n\nEither way, it should work fine with our previous code:\n\n```edition2018\nstruct Type(u32);\n\nenum Foo {\n    Bar(u32),\n}\nuse Foo::*;\n\nlet Type(x) = Type(12); // ok!\nmatch Type(12) {\n    Type(x) => {} // ok!\n    _ => {}\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find tuple struct or tuple variant `Some` in this scope",
                "spans": [
                  {
                    "byte_end": 5484,
                    "byte_start": 5480,
                    "column_end": 13,
                    "column_start": 9,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde-1.0.158\\build.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 147,
                    "line_start": 147,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 13,
                        "highlight_start": 9,
                        "text": "        Some(next) => next,"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#serde@1.0.158",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde-1.0.158\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde-1.0.158\\build.rs",
                "edition": "2015",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "message": {
                "rendered": "error: `#[panic_handler]` function required, but not found\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": null,
                "level": "error",
                "message": "`#[panic_handler]` function required, but not found",
                "spans": []
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#serde@1.0.158",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde-1.0.158\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde-1.0.158\\build.rs",
                "edition": "2015",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "message": {
                "rendered": "error: unwinding panics are not supported without std\n  |\n  = help: using nightly cargo, use -Zbuild-std with panic=\"abort\" to avoid unwinding\n  = note: since the core library is usually precompiled with panic=\"unwind\", rebuilding your crate with panic=\"abort\" may not be enough to fix the problem\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "using nightly cargo, use -Zbuild-std with panic=\"abort\" to avoid unwinding",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "since the core library is usually precompiled with panic=\"unwind\", rebuilding your crate with panic=\"abort\" may not be enough to fix the problem",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": null,
                "level": "error",
                "message": "unwinding panics are not supported without std",
                "spans": []
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#serde@1.0.158",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde-1.0.158\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde-1.0.158\\build.rs",
                "edition": "2015",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "message": {
                "rendered": "error[E0425]: cannot find function, tuple struct or tuple variant `Some` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde-1.0.158\\build.rs:142:25\n    |\n142 |     if pieces.next() != Some(\"rustc 1\") {\n    |                         ^^^^ not found in this scope\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0425",
                  "explanation": "An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"
                },
                "level": "error",
                "message": "cannot find function, tuple struct or tuple variant `Some` in this scope",
                "spans": [
                  {
                    "byte_end": 5393,
                    "byte_start": 5389,
                    "column_end": 29,
                    "column_start": 25,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde-1.0.158\\build.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 142,
                    "line_start": 142,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 29,
                        "highlight_start": 25,
                        "text": "    if pieces.next() != Some(\"rustc 1\") {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#memchr@2.5.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\memchr-2.5.0\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\memchr-2.5.0\\build.rs",
                "edition": "2018",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "message": {
                "rendered": "error: cannot find macro `format` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\memchr-2.5.0\\build.rs:77:17\n   |\n77 |     is_env_set(&format!(\"CARGO_FEATURE_{}\", name))\n   |                 ^^^^^^\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": null,
                "level": "error",
                "message": "cannot find macro `format` in this scope",
                "spans": [
                  {
                    "byte_end": 2458,
                    "byte_start": 2452,
                    "column_end": 23,
                    "column_start": 17,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\memchr-2.5.0\\build.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 77,
                    "line_start": 77,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 23,
                        "highlight_start": 17,
                        "text": "    is_env_set(&format!(\"CARGO_FEATURE_{}\", name))"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#memchr@2.5.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\memchr-2.5.0\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\memchr-2.5.0\\build.rs",
                "edition": "2018",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "message": {
                "rendered": "error: cannot find macro `println` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\memchr-2.5.0\\build.rs:27:13\n   |\n27 |             println!(\"cargo:rustc-cfg=memchr_runtime_simd\");\n   |             ^^^^^^^\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": null,
                "level": "error",
                "message": "cannot find macro `println` in this scope",
                "spans": [
                  {
                    "byte_end": 845,
                    "byte_start": 838,
                    "column_end": 20,
                    "column_start": 13,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\memchr-2.5.0\\build.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 27,
                    "line_start": 27,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 20,
                        "highlight_start": 13,
                        "text": "            println!(\"cargo:rustc-cfg=memchr_runtime_simd\");"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#memchr@2.5.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\memchr-2.5.0\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\memchr-2.5.0\\build.rs",
                "edition": "2018",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "message": {
                "rendered": "error: cannot find macro `println` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\memchr-2.5.0\\build.rs:28:13\n   |\n28 |             println!(\"cargo:rustc-cfg=memchr_runtime_sse2\");\n   |             ^^^^^^^\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": null,
                "level": "error",
                "message": "cannot find macro `println` in this scope",
                "spans": [
                  {
                    "byte_end": 906,
                    "byte_start": 899,
                    "column_end": 20,
                    "column_start": 13,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\memchr-2.5.0\\build.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 28,
                    "line_start": 28,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 20,
                        "highlight_start": 13,
                        "text": "            println!(\"cargo:rustc-cfg=memchr_runtime_sse2\");"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#once_cell@1.18.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "once_cell",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0463]: can't find crate for `std`\n --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\imp_std.rs:6:5\n  |\n6 | use std::{\n  |     ^^^ can't find crate\n  |\n  = note: the `x86_64-pc-windows-msvc` target may not support the standard library\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "the `x86_64-pc-windows-msvc` target may not support the standard library",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "E0463",
                  "explanation": "A crate was declared but cannot be found.\n\nErroneous code example:\n\n```compile_fail,E0463\nextern crate foo; // error: can't find crate\n```\n\nYou need to link your code to the relevant crate in order to be able to use it\n(through Cargo or the `-L` option of rustc, for example).\n\n## Common causes\n\n- The crate is not present at all. If using Cargo, add it to `[dependencies]`\n  in Cargo.toml.\n- The crate is present, but under a different name. If using Cargo, look for\n  `package = ` under `[dependencies]` in Cargo.toml.\n\n## Common causes for missing `std` or `core`\n\n- You are cross-compiling for a target which doesn't have `std` prepackaged.\n  Consider one of the following:\n  + Adding a pre-compiled version of std with `rustup target add`\n  + Building std from source with `cargo build -Z build-std`\n  + Using `#![no_std]` at the crate root, so you won't need `std` in the first\n    place.\n- You are developing the compiler itself and haven't built libstd from source.\n  You can usually build it with `x.py build library/std`. More information\n  about x.py is available in the [rustc-dev-guide].\n\n[rustc-dev-guide]: https://rustc-dev-guide.rust-lang.org/building/how-to-build-and-run.html#building-the-compiler\n"
                },
                "level": "error",
                "message": "can't find crate for `std`",
                "spans": [
                  {
                    "byte_end": 177,
                    "byte_start": 174,
                    "column_end": 8,
                    "column_start": 5,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\imp_std.rs",
                    "is_primary": true,
                    "label": "can't find crate",
                    "line_end": 6,
                    "line_start": 6,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 8,
                        "highlight_start": 5,
                        "text": "use std::{"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#serde@1.0.158",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde-1.0.158\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde-1.0.158\\build.rs",
                "edition": "2015",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "message": {
                "rendered": "error[E0599]: no function or associated item named `from_str` found for type `u32` in the current scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde-1.0.158\\build.rs:151:10\n    |\n151 |     u32::from_str(next).ok()\n    |          ^^^^^^^^ function or associated item not found in `u32`\n    |\n    = help: items from traits can only be used if the trait is in scope\nhelp: you are looking for the module in `std`, not the primitive type\n    |\n151 |     std::u32::from_str(next).ok()\n    |     +++++\nhelp: trait `FromStr` which provides `from_str` is implemented but not in scope; perhaps you want to import it\n    |\n1   + use core::str::FromStr;\n    |\nhelp: there is an associated function `from` with a similar name\n    |\n151 -     u32::from_str(next).ok()\n151 +     u32::from(next).ok()\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "items from traits can only be used if the trait is in scope",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "you are looking for the module in `std`, not the primitive type",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 5541,
                        "byte_start": 5541,
                        "column_end": 5,
                        "column_start": 5,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde-1.0.158\\build.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 151,
                        "line_start": 151,
                        "suggested_replacement": "std::",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 5,
                            "highlight_start": 5,
                            "text": "    u32::from_str(next).ok()"
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "trait `FromStr` which provides `from_str` is implemented but not in scope; perhaps you want to import it",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 0,
                        "byte_start": 0,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde-1.0.158\\build.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 1,
                        "line_start": 1,
                        "suggested_replacement": "use core::str::FromStr;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": []
                      }
                    ]
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "there is an associated function `from` with a similar name",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 5554,
                        "byte_start": 5546,
                        "column_end": 18,
                        "column_start": 10,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde-1.0.158\\build.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 151,
                        "line_start": 151,
                        "suggested_replacement": "from",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 18,
                            "highlight_start": 10,
                            "text": "    u32::from_str(next).ok()"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0599",
                  "explanation": "This error occurs when a method is used on a type which doesn't implement it:\n\nErroneous code example:\n\n```compile_fail,E0599\nstruct Mouth;\n\nlet x = Mouth;\nx.chocolate(); // error: no method named `chocolate` found for type `Mouth`\n               //        in the current scope\n```\n\nIn this case, you need to implement the `chocolate` method to fix the error:\n\n```\nstruct Mouth;\n\nimpl Mouth {\n    fn chocolate(&self) { // We implement the `chocolate` method here.\n        println!(\"Hmmm! I love chocolate!\");\n    }\n}\n\nlet x = Mouth;\nx.chocolate(); // ok!\n```\n"
                },
                "level": "error",
                "message": "no function or associated item named `from_str` found for type `u32` in the current scope",
                "spans": [
                  {
                    "byte_end": 5554,
                    "byte_start": 5546,
                    "column_end": 18,
                    "column_start": 10,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde-1.0.158\\build.rs",
                    "is_primary": true,
                    "label": "function or associated item not found in `u32`",
                    "line_end": 151,
                    "line_start": 151,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 18,
                        "highlight_start": 10,
                        "text": "    u32::from_str(next).ok()"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#once_cell@1.18.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "once_cell",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error: cannot find macro `panic` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs:755:47\n    |\n755 |                 init.take().unwrap_or_else(|| panic!(\"Lazy instance has previously been poisoned\"))\n    |                                               ^^^^^\n    |\nhelp: consider importing this macro\n    |\n386 +     use core::panic;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this macro",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 12853,
                        "byte_start": 12853,
                        "column_end": 5,
                        "column_start": 5,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 386,
                        "line_start": 386,
                        "suggested_replacement": "use core::panic;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 5,
                            "highlight_start": 5,
                            "text": "    use core::{"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": null,
                "level": "error",
                "message": "cannot find macro `panic` in this scope",
                "spans": [
                  {
                    "byte_end": 25425,
                    "byte_start": 25420,
                    "column_end": 52,
                    "column_start": 47,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 755,
                    "line_start": 755,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 52,
                        "highlight_start": 47,
                        "text": "                init.take().unwrap_or_else(|| panic!(\"Lazy instance has previously been poisoned\"))"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#once_cell@1.18.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "once_cell",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error: cannot find macro `panic` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs:778:25\n    |\n778 |                 None => panic!(\"Lazy instance has previously been poisoned\"),\n    |                         ^^^^^\n    |\nhelp: consider importing this macro\n    |\n386 +     use core::panic;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this macro",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 12853,
                        "byte_start": 12853,
                        "column_end": 5,
                        "column_start": 5,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 386,
                        "line_start": 386,
                        "suggested_replacement": "use core::panic;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 5,
                            "highlight_start": 5,
                            "text": "    use core::{"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": null,
                "level": "error",
                "message": "cannot find macro `panic` in this scope",
                "spans": [
                  {
                    "byte_end": 26163,
                    "byte_start": 26158,
                    "column_end": 30,
                    "column_start": 25,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 778,
                    "line_start": 778,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 30,
                        "highlight_start": 25,
                        "text": "                None => panic!(\"Lazy instance has previously been poisoned\"),"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#serde@1.0.158",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde-1.0.158\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde-1.0.158\\build.rs",
                "edition": "2015",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "message": {
                "rendered": "Some errors have detailed explanations: E0412, E0425, E0462, E0531, E0599.\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": null,
                "level": "failure-note",
                "message": "Some errors have detailed explanations: E0412, E0425, E0462, E0531, E0599.",
                "spans": []
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#serde@1.0.158",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde-1.0.158\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde-1.0.158\\build.rs",
                "edition": "2015",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "message": {
                "rendered": "For more information about an error, try `rustc --explain E0412`.\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": null,
                "level": "failure-note",
                "message": "For more information about an error, try `rustc --explain E0412`.",
                "spans": []
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#once_cell@1.18.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "once_cell",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error: cannot find macro `panic` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs:800:29\n    |\n800 |                     None => panic!(\"Lazy instance has previously been poisoned\"),\n    |                             ^^^^^\n    |\nhelp: consider importing this macro\n    |\n386 +     use core::panic;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this macro",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 12853,
                        "byte_start": 12853,
                        "column_end": 5,
                        "column_start": 5,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 386,
                        "line_start": 386,
                        "suggested_replacement": "use core::panic;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 5,
                            "highlight_start": 5,
                            "text": "    use core::{"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": null,
                "level": "error",
                "message": "cannot find macro `panic` in this scope",
                "spans": [
                  {
                    "byte_end": 26941,
                    "byte_start": 26936,
                    "column_end": 34,
                    "column_start": 29,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 800,
                    "line_start": 800,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 34,
                        "highlight_start": 29,
                        "text": "                    None => panic!(\"Lazy instance has previously been poisoned\"),"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#once_cell@1.18.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "once_cell",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error: cannot find macro `unreachable` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs:804:51\n    |\n804 |             this.cell.get_mut().unwrap_or_else(|| unreachable!())\n    |                                                   ^^^^^^^^^^^\n    |\nhelp: consider importing this macro\n    |\n386 +     use core::unreachable;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this macro",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 12853,
                        "byte_start": 12853,
                        "column_end": 5,
                        "column_start": 5,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 386,
                        "line_start": 386,
                        "suggested_replacement": "use core::unreachable;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 5,
                            "highlight_start": 5,
                            "text": "    use core::{"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": null,
                "level": "error",
                "message": "cannot find macro `unreachable` in this scope",
                "spans": [
                  {
                    "byte_end": 27141,
                    "byte_start": 27130,
                    "column_end": 62,
                    "column_start": 51,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 804,
                    "line_start": 804,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 62,
                        "highlight_start": 51,
                        "text": "            this.cell.get_mut().unwrap_or_else(|| unreachable!())"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#once_cell@1.18.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "once_cell",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error: cannot find macro `panic` in this scope\n    --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs:1291:47\n     |\n1291 |                 init.take().unwrap_or_else(|| panic!(\"Lazy instance has previously been poisoned\"))\n     |                                               ^^^^^\n     |\nhelp: consider importing this macro\n     |\n866  +     use core::panic;\n     |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this macro",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 28913,
                        "byte_start": 28913,
                        "column_end": 5,
                        "column_start": 5,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 866,
                        "line_start": 866,
                        "suggested_replacement": "use core::panic;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 5,
                            "highlight_start": 5,
                            "text": "    use core::{"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": null,
                "level": "error",
                "message": "cannot find macro `panic` in this scope",
                "spans": [
                  {
                    "byte_end": 43193,
                    "byte_start": 43188,
                    "column_end": 52,
                    "column_start": 47,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 1291,
                    "line_start": 1291,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 52,
                        "highlight_start": 47,
                        "text": "                init.take().unwrap_or_else(|| panic!(\"Lazy instance has previously been poisoned\"))"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#once_cell@1.18.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "once_cell",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error: cannot find macro `panic` in this scope\n    --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs:1313:25\n     |\n1313 |                 None => panic!(\"Lazy instance has previously been poisoned\"),\n     |                         ^^^^^\n     |\nhelp: consider importing this macro\n     |\n866  +     use core::panic;\n     |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this macro",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 28913,
                        "byte_start": 28913,
                        "column_end": 5,
                        "column_start": 5,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 866,
                        "line_start": 866,
                        "suggested_replacement": "use core::panic;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 5,
                            "highlight_start": 5,
                            "text": "    use core::{"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": null,
                "level": "error",
                "message": "cannot find macro `panic` in this scope",
                "spans": [
                  {
                    "byte_end": 43917,
                    "byte_start": 43912,
                    "column_end": 30,
                    "column_start": 25,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 1313,
                    "line_start": 1313,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 30,
                        "highlight_start": 25,
                        "text": "                None => panic!(\"Lazy instance has previously been poisoned\"),"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#once_cell@1.18.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "once_cell",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error: cannot find macro `panic` in this scope\n    --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs:1333:29\n     |\n1333 |                     None => panic!(\"Lazy instance has previously been poisoned\"),\n     |                             ^^^^^\n     |\nhelp: consider importing this macro\n     |\n866  +     use core::panic;\n     |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this macro",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 28913,
                        "byte_start": 28913,
                        "column_end": 5,
                        "column_start": 5,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 866,
                        "line_start": 866,
                        "suggested_replacement": "use core::panic;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 5,
                            "highlight_start": 5,
                            "text": "    use core::{"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": null,
                "level": "error",
                "message": "cannot find macro `panic` in this scope",
                "spans": [
                  {
                    "byte_end": 44647,
                    "byte_start": 44642,
                    "column_end": 34,
                    "column_start": 29,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 1333,
                    "line_start": 1333,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 34,
                        "highlight_start": 29,
                        "text": "                    None => panic!(\"Lazy instance has previously been poisoned\"),"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#once_cell@1.18.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "once_cell",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error: cannot find macro `unreachable` in this scope\n    --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs:1337:51\n     |\n1337 |             this.cell.get_mut().unwrap_or_else(|| unreachable!())\n     |                                                   ^^^^^^^^^^^\n     |\nhelp: consider importing this macro\n     |\n866  +     use core::unreachable;\n     |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this macro",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 28913,
                        "byte_start": 28913,
                        "column_end": 5,
                        "column_start": 5,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 866,
                        "line_start": 866,
                        "suggested_replacement": "use core::unreachable;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 5,
                            "highlight_start": 5,
                            "text": "    use core::{"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": null,
                "level": "error",
                "message": "cannot find macro `unreachable` in this scope",
                "spans": [
                  {
                    "byte_end": 44847,
                    "byte_start": 44836,
                    "column_end": 62,
                    "column_start": 51,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 1337,
                    "line_start": 1337,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 62,
                        "highlight_start": 51,
                        "text": "            this.cell.get_mut().unwrap_or_else(|| unreachable!())"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#once_cell@1.18.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "once_cell",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error: cannot find attribute `derive` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\imp_std.rs:13:3\n   |\n13 | #[derive(Debug)]\n   |   ^^^^^^\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": null,
                "level": "error",
                "message": "cannot find attribute `derive` in this scope",
                "spans": [
                  {
                    "byte_end": 344,
                    "byte_start": 338,
                    "column_end": 9,
                    "column_start": 3,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\imp_std.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 13,
                    "line_start": 13,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 9,
                        "highlight_start": 3,
                        "text": "#[derive(Debug)]"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#once_cell@1.18.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "once_cell",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error: cannot find macro `debug_assert` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\imp_std.rs:100:9\n    |\n100 |         debug_assert!(self.is_initialized());\n    |         ^^^^^^^^^^^^\n    |\nhelp: consider importing this macro\n    |\n6   + use core::debug_assert;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this macro",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 170,
                        "byte_start": 170,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\imp_std.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 6,
                        "line_start": 6,
                        "suggested_replacement": "use core::debug_assert;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use std::{"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": null,
                "level": "error",
                "message": "cannot find macro `debug_assert` in this scope",
                "spans": [
                  {
                    "byte_end": 3446,
                    "byte_start": 3434,
                    "column_end": 21,
                    "column_start": 9,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\imp_std.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 100,
                    "line_start": 100,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 21,
                        "highlight_start": 9,
                        "text": "        debug_assert!(self.is_initialized());"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#once_cell@1.18.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "once_cell",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error: cannot find macro `assert_eq` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\imp_std.rs:155:9\n    |\n155 |         assert_eq!(state, RUNNING);\n    |         ^^^^^^^^^\n    |\nhelp: consider importing this macro\n    |\n6   + use core::assert_eq;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this macro",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 170,
                        "byte_start": 170,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\imp_std.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 6,
                        "line_start": 6,
                        "suggested_replacement": "use core::assert_eq;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use std::{"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": null,
                "level": "error",
                "message": "cannot find macro `assert_eq` in this scope",
                "spans": [
                  {
                    "byte_end": 5342,
                    "byte_start": 5333,
                    "column_end": 18,
                    "column_start": 9,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\imp_std.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 155,
                    "line_start": 155,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 18,
                        "highlight_start": 9,
                        "text": "        assert_eq!(state, RUNNING);"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#once_cell@1.18.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "once_cell",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error: cannot find macro `debug_assert` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\imp_std.rs:205:18\n    |\n205 |             _ => debug_assert!(false),\n    |                  ^^^^^^^^^^^^\n    |\nhelp: consider importing this macro\n    |\n6   + use core::debug_assert;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this macro",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 170,
                        "byte_start": 170,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\imp_std.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 6,
                        "line_start": 6,
                        "suggested_replacement": "use core::debug_assert;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use std::{"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": null,
                "level": "error",
                "message": "cannot find macro `debug_assert` in this scope",
                "spans": [
                  {
                    "byte_end": 7134,
                    "byte_start": 7122,
                    "column_end": 30,
                    "column_start": 18,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\imp_std.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 205,
                    "line_start": 205,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 30,
                        "highlight_start": 18,
                        "text": "            _ => debug_assert!(false),"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#once_cell@1.18.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "once_cell",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error: cannot find macro `assert` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs:636:13\n    |\n636 |             assert!(self.set(val).is_ok(), \"reentrant init\");\n    |             ^^^^^^\n    |\nhelp: consider importing this macro\n    |\n386 +     use core::assert;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this macro",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 12853,
                        "byte_start": 12853,
                        "column_end": 5,
                        "column_start": 5,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 386,
                        "line_start": 386,
                        "suggested_replacement": "use core::assert;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 5,
                            "highlight_start": 5,
                            "text": "    use core::{"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": null,
                "level": "error",
                "message": "cannot find macro `assert` in this scope",
                "spans": [
                  {
                    "byte_end": 21403,
                    "byte_start": 21397,
                    "column_end": 19,
                    "column_start": 13,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 636,
                    "line_start": 636,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 19,
                        "highlight_start": 13,
                        "text": "            assert!(self.set(val).is_ok(), \"reentrant init\");"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#once_cell@1.18.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "once_cell",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error: cannot find macro `debug_assert` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs:999:13\n    |\n999 |             debug_assert!(self.0.is_initialized());\n    |             ^^^^^^^^^^^^\n    |\nhelp: consider importing this macro\n    |\n866 +     use core::debug_assert;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this macro",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 28913,
                        "byte_start": 28913,
                        "column_end": 5,
                        "column_start": 5,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 866,
                        "line_start": 866,
                        "suggested_replacement": "use core::debug_assert;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 5,
                            "highlight_start": 5,
                            "text": "    use core::{"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": null,
                "level": "error",
                "message": "cannot find macro `debug_assert` in this scope",
                "spans": [
                  {
                    "byte_end": 33087,
                    "byte_start": 33075,
                    "column_end": 25,
                    "column_start": 13,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 999,
                    "line_start": 999,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 25,
                        "highlight_start": 13,
                        "text": "            debug_assert!(self.0.is_initialized());"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#once_cell@1.18.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "once_cell",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error: cannot find macro `debug_assert` in this scope\n    --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs:1166:13\n     |\n1166 |             debug_assert!(self.0.is_initialized());\n     |             ^^^^^^^^^^^^\n     |\nhelp: consider importing this macro\n     |\n866  +     use core::debug_assert;\n     |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this macro",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 28913,
                        "byte_start": 28913,
                        "column_end": 5,
                        "column_start": 5,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 866,
                        "line_start": 866,
                        "suggested_replacement": "use core::debug_assert;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 5,
                            "highlight_start": 5,
                            "text": "    use core::{"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": null,
                "level": "error",
                "message": "cannot find macro `debug_assert` in this scope",
                "spans": [
                  {
                    "byte_end": 38874,
                    "byte_start": 38862,
                    "column_end": 25,
                    "column_start": 13,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 1166,
                    "line_start": 1166,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 25,
                        "highlight_start": 13,
                        "text": "            debug_assert!(self.0.is_initialized());"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#once_cell@1.18.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "once_cell",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error: cannot find attribute `derive` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\race.rs:34:3\n   |\n34 | #[derive(Default, Debug)]\n   |   ^^^^^^\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": null,
                "level": "error",
                "message": "cannot find attribute `derive` in this scope",
                "spans": [
                  {
                    "byte_end": 1404,
                    "byte_start": 1398,
                    "column_end": 9,
                    "column_start": 3,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\race.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 34,
                    "line_start": 34,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 9,
                        "highlight_start": 3,
                        "text": "#[derive(Default, Debug)]"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#once_cell@1.18.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "once_cell",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error: cannot find attribute `derive` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\race.rs:113:3\n    |\n113 | #[derive(Default, Debug)]\n    |   ^^^^^^\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": null,
                "level": "error",
                "message": "cannot find attribute `derive` in this scope",
                "spans": [
                  {
                    "byte_end": 3932,
                    "byte_start": 3926,
                    "column_end": 9,
                    "column_start": 3,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\race.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 113,
                    "line_start": 113,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 9,
                        "highlight_start": 3,
                        "text": "#[derive(Default, Debug)]"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#once_cell@1.18.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "once_cell",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error: cannot find macro `write` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\race.rs:189:9\n    |\n189 |         write!(f, \"OnceRef({:?})\", self.inner)\n    |         ^^^^^\n    |\nhelp: consider importing this macro\n    |\n24  + use core::write;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this macro",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 1119,
                        "byte_start": 1119,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\race.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 24,
                        "line_start": 24,
                        "suggested_replacement": "use core::write;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "#[cfg(not(feature = \"critical-section\"))]"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": null,
                "level": "error",
                "message": "cannot find macro `write` in this scope",
                "spans": [
                  {
                    "byte_end": 6265,
                    "byte_start": 6260,
                    "column_end": 14,
                    "column_start": 9,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\race.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 189,
                    "line_start": 189,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 14,
                        "highlight_start": 9,
                        "text": "        write!(f, \"OnceRef({:?})\", self.inner)"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#once_cell@1.18.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "once_cell",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error: cannot find macro `write` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\race.rs:308:13\n    |\n308 |             write!(f, \"OnceBox({:?})\", self.inner.load(Ordering::Relaxed))\n    |             ^^^^^\n    |\nhelp: consider importing this macro\n    |\n295 +     use core::write;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this macro",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 9336,
                        "byte_start": 9336,
                        "column_end": 5,
                        "column_start": 5,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\race.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 295,
                        "line_start": 295,
                        "suggested_replacement": "use core::write;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 5,
                            "highlight_start": 5,
                            "text": "    use super::atomic::{AtomicPtr, Ordering};"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": null,
                "level": "error",
                "message": "cannot find macro `write` in this scope",
                "spans": [
                  {
                    "byte_end": 9761,
                    "byte_start": 9756,
                    "column_end": 18,
                    "column_start": 13,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\race.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 308,
                    "line_start": 308,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 18,
                        "highlight_start": 13,
                        "text": "            write!(f, \"OnceBox({:?})\", self.inner.load(Ordering::Relaxed))"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#once_cell@1.18.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "once_cell",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0408]: variable `None` is not bound in all patterns\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\imp_std.rs:201:34\n    |\n201 |             (INCOMPLETE, None) | (RUNNING, _) => {\n    |                          ----    ^^^^^^^^^^^^ pattern doesn't bind `None`\n    |                          |\n    |                          variable not in all patterns\n    |\nhelp: if you meant to match on unit variant `core::option::Option::None`, use the full path in the pattern\n    |\n201 |             (INCOMPLETE, core::option::Option::None) | (RUNNING, _) => {\n    |                          ++++++++++++++++++++++\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "if you meant to match on unit variant `core::option::Option::None`, use the full path in the pattern",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 6968,
                        "byte_start": 6964,
                        "column_end": 30,
                        "column_start": 26,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\imp_std.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 201,
                        "line_start": 201,
                        "suggested_replacement": "core::option::Option::None",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 30,
                            "highlight_start": 26,
                            "text": "            (INCOMPLETE, None) | (RUNNING, _) => {"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0408",
                  "explanation": "An \"or\" pattern was used where the variable bindings are not consistently bound\nacross patterns.\n\nErroneous code example:\n\n```compile_fail,E0408\nmatch x {\n    Some(y) | None => { /* use y */ } // error: variable `y` from pattern #1 is\n                                      //        not bound in pattern #2\n    _ => ()\n}\n```\n\nHere, `y` is bound to the contents of the `Some` and can be used within the\nblock corresponding to the match arm. However, in case `x` is `None`, we have\nnot specified what `y` is, and the block will use a nonexistent variable.\n\nTo fix this error, either split into multiple match arms:\n\n```\nlet x = Some(1);\nmatch x {\n    Some(y) => { /* use y */ }\n    None => { /* ... */ }\n}\n```\n\nor, bind the variable to a field of the same type in all sub-patterns of the\nor pattern:\n\n```\nlet x = (0, 2);\nmatch x {\n    (0, y) | (y, 0) => { /* use y */}\n    _ => {}\n}\n```\n\nIn this example, if `x` matches the pattern `(0, _)`, the second field is set\nto `y`. If it matches `(_, 0)`, the first field is set to `y`; so in all\ncases `y` is set to some value.\n"
                },
                "level": "error",
                "message": "variable `None` is not bound in all patterns",
                "spans": [
                  {
                    "byte_end": 6984,
                    "byte_start": 6972,
                    "column_end": 46,
                    "column_start": 34,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\imp_std.rs",
                    "is_primary": true,
                    "label": "pattern doesn't bind `None`",
                    "line_end": 201,
                    "line_start": 201,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 46,
                        "highlight_start": 34,
                        "text": "            (INCOMPLETE, None) | (RUNNING, _) => {"
                      }
                    ]
                  },
                  {
                    "byte_end": 6968,
                    "byte_start": 6964,
                    "column_end": 30,
                    "column_start": 26,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\imp_std.rs",
                    "is_primary": false,
                    "label": "variable not in all patterns",
                    "line_end": 201,
                    "line_start": 201,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 30,
                        "highlight_start": 26,
                        "text": "            (INCOMPLETE, None) | (RUNNING, _) => {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#quote@1.0.26",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\quote-1.0.26\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\quote-1.0.26\\build.rs",
                "edition": "2018",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "message": {
                "rendered": "error[E0463]: can't find crate for `std`\n --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\quote-1.0.26\\build.rs:1:5\n  |\n1 | use std::env;\n  |     ^^^ can't find crate\n  |\n  = note: the `x86_64-pc-windows-msvc` target may not support the standard library\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "the `x86_64-pc-windows-msvc` target may not support the standard library",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "E0463",
                  "explanation": "A crate was declared but cannot be found.\n\nErroneous code example:\n\n```compile_fail,E0463\nextern crate foo; // error: can't find crate\n```\n\nYou need to link your code to the relevant crate in order to be able to use it\n(through Cargo or the `-L` option of rustc, for example).\n\n## Common causes\n\n- The crate is not present at all. If using Cargo, add it to `[dependencies]`\n  in Cargo.toml.\n- The crate is present, but under a different name. If using Cargo, look for\n  `package = ` under `[dependencies]` in Cargo.toml.\n\n## Common causes for missing `std` or `core`\n\n- You are cross-compiling for a target which doesn't have `std` prepackaged.\n  Consider one of the following:\n  + Adding a pre-compiled version of std with `rustup target add`\n  + Building std from source with `cargo build -Z build-std`\n  + Using `#![no_std]` at the crate root, so you won't need `std` in the first\n    place.\n- You are developing the compiler itself and haven't built libstd from source.\n  You can usually build it with `x.py build library/std`. More information\n  about x.py is available in the [rustc-dev-guide].\n\n[rustc-dev-guide]: https://rustc-dev-guide.rust-lang.org/building/how-to-build-and-run.html#building-the-compiler\n"
                },
                "level": "error",
                "message": "can't find crate for `std`",
                "spans": [
                  {
                    "byte_end": 7,
                    "byte_start": 4,
                    "column_end": 8,
                    "column_start": 5,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\quote-1.0.26\\build.rs",
                    "is_primary": true,
                    "label": "can't find crate",
                    "line_end": 1,
                    "line_start": 1,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 8,
                        "highlight_start": 5,
                        "text": "use std::env;"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#windows_x86_64_msvc@0.48.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\windows_x86_64_msvc-0.48.0\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\windows_x86_64_msvc-0.48.0\\build.rs",
                "edition": "2018",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "message": {
                "rendered": "error: cannot find macro `println` in this scope\n --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\windows_x86_64_msvc-0.48.0\\build.rs:9:5\n  |\n9 |     println!(\"cargo:rustc-link-search=native={}\", std::path::Path::new(&dir).join(\"lib\").display());\n  |     ^^^^^^^\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": null,
                "level": "error",
                "message": "cannot find macro `println` in this scope",
                "spans": [
                  {
                    "byte_end": 241,
                    "byte_start": 234,
                    "column_end": 12,
                    "column_start": 5,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\windows_x86_64_msvc-0.48.0\\build.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 9,
                    "line_start": 9,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 12,
                        "highlight_start": 5,
                        "text": "    println!(\"cargo:rustc-link-search=native={}\", std::path::Path::new(&dir).join(\"lib\").display());"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#quote@1.0.26",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\quote-1.0.26\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\quote-1.0.26\\build.rs",
                "edition": "2018",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "message": {
                "rendered": "error[E0463]: can't find crate for `std`\n --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\quote-1.0.26\\build.rs:2:5\n  |\n2 | use std::process::{self, Command};\n  |     ^^^ can't find crate\n  |\n  = note: the `x86_64-pc-windows-msvc` target may not support the standard library\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "the `x86_64-pc-windows-msvc` target may not support the standard library",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "E0463",
                  "explanation": "A crate was declared but cannot be found.\n\nErroneous code example:\n\n```compile_fail,E0463\nextern crate foo; // error: can't find crate\n```\n\nYou need to link your code to the relevant crate in order to be able to use it\n(through Cargo or the `-L` option of rustc, for example).\n\n## Common causes\n\n- The crate is not present at all. If using Cargo, add it to `[dependencies]`\n  in Cargo.toml.\n- The crate is present, but under a different name. If using Cargo, look for\n  `package = ` under `[dependencies]` in Cargo.toml.\n\n## Common causes for missing `std` or `core`\n\n- You are cross-compiling for a target which doesn't have `std` prepackaged.\n  Consider one of the following:\n  + Adding a pre-compiled version of std with `rustup target add`\n  + Building std from source with `cargo build -Z build-std`\n  + Using `#![no_std]` at the crate root, so you won't need `std` in the first\n    place.\n- You are developing the compiler itself and haven't built libstd from source.\n  You can usually build it with `x.py build library/std`. More information\n  about x.py is available in the [rustc-dev-guide].\n\n[rustc-dev-guide]: https://rustc-dev-guide.rust-lang.org/building/how-to-build-and-run.html#building-the-compiler\n"
                },
                "level": "error",
                "message": "can't find crate for `std`",
                "spans": [
                  {
                    "byte_end": 21,
                    "byte_start": 18,
                    "column_end": 8,
                    "column_start": 5,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\quote-1.0.26\\build.rs",
                    "is_primary": true,
                    "label": "can't find crate",
                    "line_end": 2,
                    "line_start": 2,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 8,
                        "highlight_start": 5,
                        "text": "use std::process::{self, Command};"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#windows_x86_64_msvc@0.48.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\windows_x86_64_msvc-0.48.0\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\windows_x86_64_msvc-0.48.0\\build.rs",
                "edition": "2018",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "message": {
                "rendered": "error[E0463]: can't find crate for `std`\n --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\windows_x86_64_msvc-0.48.0\\build.rs:2:18\n  |\n2 |     let target = std::env::var(\"TARGET\").unwrap();\n  |                  ^^^ can't find crate\n  |\n  = note: the `x86_64-pc-windows-msvc` target may not support the standard library\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "the `x86_64-pc-windows-msvc` target may not support the standard library",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "E0463",
                  "explanation": "A crate was declared but cannot be found.\n\nErroneous code example:\n\n```compile_fail,E0463\nextern crate foo; // error: can't find crate\n```\n\nYou need to link your code to the relevant crate in order to be able to use it\n(through Cargo or the `-L` option of rustc, for example).\n\n## Common causes\n\n- The crate is not present at all. If using Cargo, add it to `[dependencies]`\n  in Cargo.toml.\n- The crate is present, but under a different name. If using Cargo, look for\n  `package = ` under `[dependencies]` in Cargo.toml.\n\n## Common causes for missing `std` or `core`\n\n- You are cross-compiling for a target which doesn't have `std` prepackaged.\n  Consider one of the following:\n  + Adding a pre-compiled version of std with `rustup target add`\n  + Building std from source with `cargo build -Z build-std`\n  + Using `#![no_std]` at the crate root, so you won't need `std` in the first\n    place.\n- You are developing the compiler itself and haven't built libstd from source.\n  You can usually build it with `x.py build library/std`. More information\n  about x.py is available in the [rustc-dev-guide].\n\n[rustc-dev-guide]: https://rustc-dev-guide.rust-lang.org/building/how-to-build-and-run.html#building-the-compiler\n"
                },
                "level": "error",
                "message": "can't find crate for `std`",
                "spans": [
                  {
                    "byte_end": 32,
                    "byte_start": 29,
                    "column_end": 21,
                    "column_start": 18,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\windows_x86_64_msvc-0.48.0\\build.rs",
                    "is_primary": true,
                    "label": "can't find crate",
                    "line_end": 2,
                    "line_start": 2,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 21,
                        "highlight_start": 18,
                        "text": "    let target = std::env::var(\"TARGET\").unwrap();"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#windows_x86_64_msvc@0.48.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\windows_x86_64_msvc-0.48.0\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\windows_x86_64_msvc-0.48.0\\build.rs",
                "edition": "2018",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "message": {
                "rendered": "error[E0463]: can't find crate for `std`\n --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\windows_x86_64_msvc-0.48.0\\build.rs:7:15\n  |\n7 |     let dir = std::env::var(\"CARGO_MANIFEST_DIR\").unwrap();\n  |               ^^^ can't find crate\n  |\n  = note: the `x86_64-pc-windows-msvc` target may not support the standard library\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "the `x86_64-pc-windows-msvc` target may not support the standard library",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "E0463",
                  "explanation": "A crate was declared but cannot be found.\n\nErroneous code example:\n\n```compile_fail,E0463\nextern crate foo; // error: can't find crate\n```\n\nYou need to link your code to the relevant crate in order to be able to use it\n(through Cargo or the `-L` option of rustc, for example).\n\n## Common causes\n\n- The crate is not present at all. If using Cargo, add it to `[dependencies]`\n  in Cargo.toml.\n- The crate is present, but under a different name. If using Cargo, look for\n  `package = ` under `[dependencies]` in Cargo.toml.\n\n## Common causes for missing `std` or `core`\n\n- You are cross-compiling for a target which doesn't have `std` prepackaged.\n  Consider one of the following:\n  + Adding a pre-compiled version of std with `rustup target add`\n  + Building std from source with `cargo build -Z build-std`\n  + Using `#![no_std]` at the crate root, so you won't need `std` in the first\n    place.\n- You are developing the compiler itself and haven't built libstd from source.\n  You can usually build it with `x.py build library/std`. More information\n  about x.py is available in the [rustc-dev-guide].\n\n[rustc-dev-guide]: https://rustc-dev-guide.rust-lang.org/building/how-to-build-and-run.html#building-the-compiler\n"
                },
                "level": "error",
                "message": "can't find crate for `std`",
                "spans": [
                  {
                    "byte_end": 186,
                    "byte_start": 183,
                    "column_end": 18,
                    "column_start": 15,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\windows_x86_64_msvc-0.48.0\\build.rs",
                    "is_primary": true,
                    "label": "can't find crate",
                    "line_end": 7,
                    "line_start": 7,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 18,
                        "highlight_start": 15,
                        "text": "    let dir = std::env::var(\"CARGO_MANIFEST_DIR\").unwrap();"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#quote@1.0.26",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\quote-1.0.26\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\quote-1.0.26\\build.rs",
                "edition": "2018",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "message": {
                "rendered": "error[E0463]: can't find crate for `std`\n --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\quote-1.0.26\\build.rs:3:5\n  |\n3 | use std::str;\n  |     ^^^ can't find crate\n  |\n  = note: the `x86_64-pc-windows-msvc` target may not support the standard library\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "the `x86_64-pc-windows-msvc` target may not support the standard library",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "E0463",
                  "explanation": "A crate was declared but cannot be found.\n\nErroneous code example:\n\n```compile_fail,E0463\nextern crate foo; // error: can't find crate\n```\n\nYou need to link your code to the relevant crate in order to be able to use it\n(through Cargo or the `-L` option of rustc, for example).\n\n## Common causes\n\n- The crate is not present at all. If using Cargo, add it to `[dependencies]`\n  in Cargo.toml.\n- The crate is present, but under a different name. If using Cargo, look for\n  `package = ` under `[dependencies]` in Cargo.toml.\n\n## Common causes for missing `std` or `core`\n\n- You are cross-compiling for a target which doesn't have `std` prepackaged.\n  Consider one of the following:\n  + Adding a pre-compiled version of std with `rustup target add`\n  + Building std from source with `cargo build -Z build-std`\n  + Using `#![no_std]` at the crate root, so you won't need `std` in the first\n    place.\n- You are developing the compiler itself and haven't built libstd from source.\n  You can usually build it with `x.py build library/std`. More information\n  about x.py is available in the [rustc-dev-guide].\n\n[rustc-dev-guide]: https://rustc-dev-guide.rust-lang.org/building/how-to-build-and-run.html#building-the-compiler\n"
                },
                "level": "error",
                "message": "can't find crate for `std`",
                "spans": [
                  {
                    "byte_end": 56,
                    "byte_start": 53,
                    "column_end": 8,
                    "column_start": 5,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\quote-1.0.26\\build.rs",
                    "is_primary": true,
                    "label": "can't find crate",
                    "line_end": 3,
                    "line_start": 3,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 8,
                        "highlight_start": 5,
                        "text": "use std::str;"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#windows_x86_64_msvc@0.48.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\windows_x86_64_msvc-0.48.0\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\windows_x86_64_msvc-0.48.0\\build.rs",
                "edition": "2018",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "message": {
                "rendered": "error: `#[panic_handler]` function required, but not found\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": null,
                "level": "error",
                "message": "`#[panic_handler]` function required, but not found",
                "spans": []
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#windows_x86_64_msvc@0.48.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\windows_x86_64_msvc-0.48.0\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\windows_x86_64_msvc-0.48.0\\build.rs",
                "edition": "2018",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "message": {
                "rendered": "error: unwinding panics are not supported without std\n  |\n  = help: using nightly cargo, use -Zbuild-std with panic=\"abort\" to avoid unwinding\n  = note: since the core library is usually precompiled with panic=\"unwind\", rebuilding your crate with panic=\"abort\" may not be enough to fix the problem\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "using nightly cargo, use -Zbuild-std with panic=\"abort\" to avoid unwinding",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "since the core library is usually precompiled with panic=\"unwind\", rebuilding your crate with panic=\"abort\" may not be enough to fix the problem",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": null,
                "level": "error",
                "message": "unwinding panics are not supported without std",
                "spans": []
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#memchr@2.5.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\memchr-2.5.0\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\memchr-2.5.0\\build.rs",
                "edition": "2018",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "message": {
                "rendered": "error: cannot find macro `println` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\memchr-2.5.0\\build.rs:29:13\n   |\n29 |             println!(\"cargo:rustc-cfg=memchr_runtime_sse42\");\n   |             ^^^^^^^\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": null,
                "level": "error",
                "message": "cannot find macro `println` in this scope",
                "spans": [
                  {
                    "byte_end": 967,
                    "byte_start": 960,
                    "column_end": 20,
                    "column_start": 13,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\memchr-2.5.0\\build.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 29,
                    "line_start": 29,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 20,
                        "highlight_start": 13,
                        "text": "            println!(\"cargo:rustc-cfg=memchr_runtime_sse42\");"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#memchr@2.5.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\memchr-2.5.0\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\memchr-2.5.0\\build.rs",
                "edition": "2018",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "message": {
                "rendered": "error: cannot find macro `println` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\memchr-2.5.0\\build.rs:30:13\n   |\n30 |             println!(\"cargo:rustc-cfg=memchr_runtime_avx\");\n   |             ^^^^^^^\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": null,
                "level": "error",
                "message": "cannot find macro `println` in this scope",
                "spans": [
                  {
                    "byte_end": 1029,
                    "byte_start": 1022,
                    "column_end": 20,
                    "column_start": 13,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\memchr-2.5.0\\build.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 30,
                    "line_start": 30,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 20,
                        "highlight_start": 13,
                        "text": "            println!(\"cargo:rustc-cfg=memchr_runtime_avx\");"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#windows_x86_64_msvc@0.48.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\windows_x86_64_msvc-0.48.0\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\windows_x86_64_msvc-0.48.0\\build.rs",
                "edition": "2018",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "message": {
                "rendered": "Some errors have detailed explanations: E0462, E0463.\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": null,
                "level": "failure-note",
                "message": "Some errors have detailed explanations: E0462, E0463.",
                "spans": []
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#windows_x86_64_msvc@0.48.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\windows_x86_64_msvc-0.48.0\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\windows_x86_64_msvc-0.48.0\\build.rs",
                "edition": "2018",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "message": {
                "rendered": "For more information about an error, try `rustc --explain E0462`.\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": null,
                "level": "failure-note",
                "message": "For more information about an error, try `rustc --explain E0462`.",
                "spans": []
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#memchr@2.5.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\memchr-2.5.0\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\memchr-2.5.0\\build.rs",
                "edition": "2018",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "message": {
                "rendered": "error: cannot find macro `println` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\memchr-2.5.0\\build.rs:36:13\n   |\n36 |             println!(\"cargo:rustc-cfg=memchr_runtime_simd\");\n   |             ^^^^^^^\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": null,
                "level": "error",
                "message": "cannot find macro `println` in this scope",
                "spans": [
                  {
                    "byte_end": 1218,
                    "byte_start": 1211,
                    "column_end": 20,
                    "column_start": 13,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\memchr-2.5.0\\build.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 36,
                    "line_start": 36,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 20,
                        "highlight_start": 13,
                        "text": "            println!(\"cargo:rustc-cfg=memchr_runtime_simd\");"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#memchr@2.5.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\memchr-2.5.0\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\memchr-2.5.0\\build.rs",
                "edition": "2018",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "message": {
                "rendered": "error: cannot find macro `println` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\memchr-2.5.0\\build.rs:37:13\n   |\n37 |             println!(\"cargo:rustc-cfg=memchr_runtime_wasm128\");\n   |             ^^^^^^^\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": null,
                "level": "error",
                "message": "cannot find macro `println` in this scope",
                "spans": [
                  {
                    "byte_end": 1279,
                    "byte_start": 1272,
                    "column_end": 20,
                    "column_start": 13,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\memchr-2.5.0\\build.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 37,
                    "line_start": 37,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 20,
                        "highlight_start": 13,
                        "text": "            println!(\"cargo:rustc-cfg=memchr_runtime_wasm128\");"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#memchr@2.5.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\memchr-2.5.0\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\memchr-2.5.0\\build.rs",
                "edition": "2018",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "message": {
                "rendered": "error: cannot find macro `println` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\memchr-2.5.0\\build.rs:73:5\n   |\n73 |     println!(\"cargo:rustc-cfg=memchr_libc\");\n   |     ^^^^^^^\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": null,
                "level": "error",
                "message": "cannot find macro `println` in this scope",
                "spans": [
                  {
                    "byte_end": 2359,
                    "byte_start": 2352,
                    "column_end": 12,
                    "column_start": 5,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\memchr-2.5.0\\build.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 73,
                    "line_start": 73,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 12,
                        "highlight_start": 5,
                        "text": "    println!(\"cargo:rustc-cfg=memchr_libc\");"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#quote@1.0.26",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\quote-1.0.26\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\quote-1.0.26\\build.rs",
                "edition": "2018",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "message": {
                "rendered": "error: cannot find macro `println` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\quote-1.0.26\\build.rs:20:9\n   |\n20 |         println!(\"cargo:rustc-cfg=needs_invalid_span_workaround\");\n   |         ^^^^^^^\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": null,
                "level": "error",
                "message": "cannot find macro `println` in this scope",
                "spans": [
                  {
                    "byte_end": 458,
                    "byte_start": 451,
                    "column_end": 16,
                    "column_start": 9,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\quote-1.0.26\\build.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 20,
                    "line_start": 20,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 16,
                        "highlight_start": 9,
                        "text": "        println!(\"cargo:rustc-cfg=needs_invalid_span_workaround\");"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#quote@1.0.26",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\quote-1.0.26\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\quote-1.0.26\\build.rs",
                "edition": "2018",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "message": {
                "rendered": "error: cannot find macro `eprintln` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\quote-1.0.26\\build.rs:14:9\n   |\n14 |         eprintln!(\"Minimum supported rustc version is 1.31\");\n   |         ^^^^^^^^\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": null,
                "level": "error",
                "message": "cannot find macro `eprintln` in this scope",
                "spans": [
                  {
                    "byte_end": 278,
                    "byte_start": 270,
                    "column_end": 17,
                    "column_start": 9,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\quote-1.0.26\\build.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 14,
                    "line_start": 14,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 17,
                        "highlight_start": 9,
                        "text": "        eprintln!(\"Minimum supported rustc version is 1.31\");"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#quote@1.0.26",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\quote-1.0.26\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\quote-1.0.26\\build.rs",
                "edition": "2018",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "message": {
                "rendered": "error: cannot find macro `println` in this scope\n --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\quote-1.0.26\\build.rs:6:5\n  |\n6 |     println!(\"cargo:rerun-if-changed=build.rs\");\n  |     ^^^^^^^\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": null,
                "level": "error",
                "message": "cannot find macro `println` in this scope",
                "spans": [
                  {
                    "byte_end": 87,
                    "byte_start": 80,
                    "column_end": 12,
                    "column_start": 5,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\quote-1.0.26\\build.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 6,
                    "line_start": 6,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 12,
                        "highlight_start": 5,
                        "text": "    println!(\"cargo:rerun-if-changed=build.rs\");"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#memchr@2.5.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\memchr-2.5.0\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\memchr-2.5.0\\build.rs",
                "edition": "2018",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "message": {
                "rendered": "error[E0531]: cannot find tuple struct or tuple variant `Err` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\memchr-2.5.0\\build.rs:62:9\n   |\n62 |         Err(_) => return,\n   |         ^^^ not found in this scope\n   |\nhelp: consider importing this tuple variant\n   |\n1  + use core::result::Result::Err;\n   |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this tuple variant",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 0,
                        "byte_start": 0,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\memchr-2.5.0\\build.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 1,
                        "line_start": 1,
                        "suggested_replacement": "use core::result::Result::Err;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": []
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0531",
                  "explanation": "An unknown tuple struct/variant has been used.\n\nErroneous code example:\n\n```compile_fail,E0531\nlet Type(x) = Type(12); // error!\nmatch Bar(12) {\n    Bar(x) => {} // error!\n    _ => {}\n}\n```\n\nIn most cases, it's either a forgotten import or a typo. However, let's look at\nhow you can have such a type:\n\n```edition2018\nstruct Type(u32); // this is a tuple struct\n\nenum Foo {\n    Bar(u32), // this is a tuple variant\n}\n\nuse Foo::*; // To use Foo's variant directly, we need to import them in\n            // the scope.\n```\n\nEither way, it should work fine with our previous code:\n\n```edition2018\nstruct Type(u32);\n\nenum Foo {\n    Bar(u32),\n}\nuse Foo::*;\n\nlet Type(x) = Type(12); // ok!\nmatch Type(12) {\n    Type(x) => {} // ok!\n    _ => {}\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find tuple struct or tuple variant `Err` in this scope",
                "spans": [
                  {
                    "byte_end": 2103,
                    "byte_start": 2100,
                    "column_end": 12,
                    "column_start": 9,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\memchr-2.5.0\\build.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 62,
                    "line_start": 62,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 12,
                        "highlight_start": 9,
                        "text": "        Err(_) => return,"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#memchr@2.5.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\memchr-2.5.0\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\memchr-2.5.0\\build.rs",
                "edition": "2018",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "message": {
                "rendered": "error[E0531]: cannot find tuple struct or tuple variant `Ok` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\memchr-2.5.0\\build.rs:63:9\n   |\n63 |         Ok(arch) => arch,\n   |         ^^ not found in this scope\n   |\nhelp: consider importing this tuple variant\n   |\n1  + use core::result::Result::Ok;\n   |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this tuple variant",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 0,
                        "byte_start": 0,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\memchr-2.5.0\\build.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 1,
                        "line_start": 1,
                        "suggested_replacement": "use core::result::Result::Ok;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": []
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0531",
                  "explanation": "An unknown tuple struct/variant has been used.\n\nErroneous code example:\n\n```compile_fail,E0531\nlet Type(x) = Type(12); // error!\nmatch Bar(12) {\n    Bar(x) => {} // error!\n    _ => {}\n}\n```\n\nIn most cases, it's either a forgotten import or a typo. However, let's look at\nhow you can have such a type:\n\n```edition2018\nstruct Type(u32); // this is a tuple struct\n\nenum Foo {\n    Bar(u32), // this is a tuple variant\n}\n\nuse Foo::*; // To use Foo's variant directly, we need to import them in\n            // the scope.\n```\n\nEither way, it should work fine with our previous code:\n\n```edition2018\nstruct Type(u32);\n\nenum Foo {\n    Bar(u32),\n}\nuse Foo::*;\n\nlet Type(x) = Type(12); // ok!\nmatch Type(12) {\n    Type(x) => {} // ok!\n    _ => {}\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find tuple struct or tuple variant `Ok` in this scope",
                "spans": [
                  {
                    "byte_end": 2128,
                    "byte_start": 2126,
                    "column_end": 11,
                    "column_start": 9,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\memchr-2.5.0\\build.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 63,
                    "line_start": 63,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 11,
                        "highlight_start": 9,
                        "text": "        Ok(arch) => arch,"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#memchr@2.5.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\memchr-2.5.0\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\memchr-2.5.0\\build.rs",
                "edition": "2018",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "message": {
                "rendered": "error[E0531]: cannot find tuple struct or tuple variant `Err` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\memchr-2.5.0\\build.rs:66:9\n   |\n66 |         Err(_) => return,\n   |         ^^^ not found in this scope\n   |\nhelp: consider importing this tuple variant\n   |\n1  + use core::result::Result::Err;\n   |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this tuple variant",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 0,
                        "byte_start": 0,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\memchr-2.5.0\\build.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 1,
                        "line_start": 1,
                        "suggested_replacement": "use core::result::Result::Err;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": []
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0531",
                  "explanation": "An unknown tuple struct/variant has been used.\n\nErroneous code example:\n\n```compile_fail,E0531\nlet Type(x) = Type(12); // error!\nmatch Bar(12) {\n    Bar(x) => {} // error!\n    _ => {}\n}\n```\n\nIn most cases, it's either a forgotten import or a typo. However, let's look at\nhow you can have such a type:\n\n```edition2018\nstruct Type(u32); // this is a tuple struct\n\nenum Foo {\n    Bar(u32), // this is a tuple variant\n}\n\nuse Foo::*; // To use Foo's variant directly, we need to import them in\n            // the scope.\n```\n\nEither way, it should work fine with our previous code:\n\n```edition2018\nstruct Type(u32);\n\nenum Foo {\n    Bar(u32),\n}\nuse Foo::*;\n\nlet Type(x) = Type(12); // ok!\nmatch Type(12) {\n    Type(x) => {} // ok!\n    _ => {}\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find tuple struct or tuple variant `Err` in this scope",
                "spans": [
                  {
                    "byte_end": 2217,
                    "byte_start": 2214,
                    "column_end": 12,
                    "column_start": 9,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\memchr-2.5.0\\build.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 66,
                    "line_start": 66,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 12,
                        "highlight_start": 9,
                        "text": "        Err(_) => return,"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#memchr@2.5.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\memchr-2.5.0\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\memchr-2.5.0\\build.rs",
                "edition": "2018",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "message": {
                "rendered": "error[E0531]: cannot find tuple struct or tuple variant `Ok` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\memchr-2.5.0\\build.rs:67:9\n   |\n67 |         Ok(env) => env,\n   |         ^^ not found in this scope\n   |\nhelp: consider importing this tuple variant\n   |\n1  + use core::result::Result::Ok;\n   |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this tuple variant",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 0,
                        "byte_start": 0,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\memchr-2.5.0\\build.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 1,
                        "line_start": 1,
                        "suggested_replacement": "use core::result::Result::Ok;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": []
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0531",
                  "explanation": "An unknown tuple struct/variant has been used.\n\nErroneous code example:\n\n```compile_fail,E0531\nlet Type(x) = Type(12); // error!\nmatch Bar(12) {\n    Bar(x) => {} // error!\n    _ => {}\n}\n```\n\nIn most cases, it's either a forgotten import or a typo. However, let's look at\nhow you can have such a type:\n\n```edition2018\nstruct Type(u32); // this is a tuple struct\n\nenum Foo {\n    Bar(u32), // this is a tuple variant\n}\n\nuse Foo::*; // To use Foo's variant directly, we need to import them in\n            // the scope.\n```\n\nEither way, it should work fine with our previous code:\n\n```edition2018\nstruct Type(u32);\n\nenum Foo {\n    Bar(u32),\n}\nuse Foo::*;\n\nlet Type(x) = Type(12); // ok!\nmatch Type(12) {\n    Type(x) => {} // ok!\n    _ => {}\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find tuple struct or tuple variant `Ok` in this scope",
                "spans": [
                  {
                    "byte_end": 2242,
                    "byte_start": 2240,
                    "column_end": 11,
                    "column_start": 9,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\memchr-2.5.0\\build.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 67,
                    "line_start": 67,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 11,
                        "highlight_start": 9,
                        "text": "        Ok(env) => env,"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#memchr@2.5.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\memchr-2.5.0\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\memchr-2.5.0\\build.rs",
                "edition": "2018",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "message": {
                "rendered": "error: `#[panic_handler]` function required, but not found\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": null,
                "level": "error",
                "message": "`#[panic_handler]` function required, but not found",
                "spans": []
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#memchr@2.5.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\memchr-2.5.0\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\memchr-2.5.0\\build.rs",
                "edition": "2018",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "message": {
                "rendered": "error: unwinding panics are not supported without std\n  |\n  = help: using nightly cargo, use -Zbuild-std with panic=\"abort\" to avoid unwinding\n  = note: since the core library is usually precompiled with panic=\"unwind\", rebuilding your crate with panic=\"abort\" may not be enough to fix the problem\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "using nightly cargo, use -Zbuild-std with panic=\"abort\" to avoid unwinding",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "since the core library is usually precompiled with panic=\"unwind\", rebuilding your crate with panic=\"abort\" may not be enough to fix the problem",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": null,
                "level": "error",
                "message": "unwinding panics are not supported without std",
                "spans": []
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#quote@1.0.26",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\quote-1.0.26\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\quote-1.0.26\\build.rs",
                "edition": "2018",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "message": {
                "rendered": "error[E0531]: cannot find tuple struct or tuple variant `Some` in this scope\n --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\quote-1.0.26\\build.rs:9:9\n  |\n9 |         Some(version) => version,\n  |         ^^^^ not found in this scope\n  |\nhelp: consider importing this tuple variant\n  |\n1 + use core::option::Option::Some;\n  |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this tuple variant",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 0,
                        "byte_start": 0,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\quote-1.0.26\\build.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 1,
                        "line_start": 1,
                        "suggested_replacement": "use core::option::Option::Some;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": []
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0531",
                  "explanation": "An unknown tuple struct/variant has been used.\n\nErroneous code example:\n\n```compile_fail,E0531\nlet Type(x) = Type(12); // error!\nmatch Bar(12) {\n    Bar(x) => {} // error!\n    _ => {}\n}\n```\n\nIn most cases, it's either a forgotten import or a typo. However, let's look at\nhow you can have such a type:\n\n```edition2018\nstruct Type(u32); // this is a tuple struct\n\nenum Foo {\n    Bar(u32), // this is a tuple variant\n}\n\nuse Foo::*; // To use Foo's variant directly, we need to import them in\n            // the scope.\n```\n\nEither way, it should work fine with our previous code:\n\n```edition2018\nstruct Type(u32);\n\nenum Foo {\n    Bar(u32),\n}\nuse Foo::*;\n\nlet Type(x) = Type(12); // ok!\nmatch Type(12) {\n    Type(x) => {} // ok!\n    _ => {}\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find tuple struct or tuple variant `Some` in this scope",
                "spans": [
                  {
                    "byte_end": 180,
                    "byte_start": 176,
                    "column_end": 13,
                    "column_start": 9,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\quote-1.0.26\\build.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 9,
                    "line_start": 9,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 13,
                        "highlight_start": 9,
                        "text": "        Some(version) => version,"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#quote@1.0.26",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\quote-1.0.26\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\quote-1.0.26\\build.rs",
                "edition": "2018",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "message": {
                "rendered": "error[E0412]: cannot find type `Option` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\quote-1.0.26\\build.rs:28:23\n   |\n28 | fn rustc_version() -> Option<RustcVersion> {\n   |                       ^^^^^^ not found in this scope\n   |\nhelp: consider importing this enum\n   |\n1  + use core::option::Option;\n   |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this enum",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 0,
                        "byte_start": 0,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\quote-1.0.26\\build.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 1,
                        "line_start": 1,
                        "suggested_replacement": "use core::option::Option;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": []
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0412",
                  "explanation": "A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"
                },
                "level": "error",
                "message": "cannot find type `Option` in this scope",
                "spans": [
                  {
                    "byte_end": 588,
                    "byte_start": 582,
                    "column_end": 29,
                    "column_start": 23,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\quote-1.0.26\\build.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 28,
                    "line_start": 28,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 29,
                        "highlight_start": 23,
                        "text": "fn rustc_version() -> Option<RustcVersion> {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#quote@1.0.26",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\quote-1.0.26\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\quote-1.0.26\\build.rs",
                "edition": "2018",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "message": {
                "rendered": "error[E0425]: cannot find function, tuple struct or tuple variant `Some` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\quote-1.0.26\\build.rs:33:25\n   |\n33 |     if pieces.next() != Some(\"rustc 1\") {\n   |                         ^^^^ not found in this scope\n   |\nhelp: consider importing this tuple variant\n   |\n1  + use core::option::Option::Some;\n   |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this tuple variant",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 0,
                        "byte_start": 0,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\quote-1.0.26\\build.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 1,
                        "line_start": 1,
                        "suggested_replacement": "use core::option::Option::Some;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": []
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0425",
                  "explanation": "An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"
                },
                "level": "error",
                "message": "cannot find function, tuple struct or tuple variant `Some` in this scope",
                "spans": [
                  {
                    "byte_end": 839,
                    "byte_start": 835,
                    "column_end": 29,
                    "column_start": 25,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\quote-1.0.26\\build.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 33,
                    "line_start": 33,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 29,
                        "highlight_start": 25,
                        "text": "    if pieces.next() != Some(\"rustc 1\") {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#quote@1.0.26",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\quote-1.0.26\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\quote-1.0.26\\build.rs",
                "edition": "2018",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "message": {
                "rendered": "error[E0425]: cannot find value `None` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\quote-1.0.26\\build.rs:34:16\n   |\n34 |         return None;\n   |                ^^^^ not found in this scope\n   |\nhelp: consider importing this unit variant\n   |\n1  + use core::option::Option::None;\n   |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this unit variant",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 0,
                        "byte_start": 0,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\quote-1.0.26\\build.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 1,
                        "line_start": 1,
                        "suggested_replacement": "use core::option::Option::None;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": []
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0425",
                  "explanation": "An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"
                },
                "level": "error",
                "message": "cannot find value `None` in this scope",
                "spans": [
                  {
                    "byte_end": 872,
                    "byte_start": 868,
                    "column_end": 20,
                    "column_start": 16,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\quote-1.0.26\\build.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 34,
                    "line_start": 34,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 20,
                        "highlight_start": 16,
                        "text": "        return None;"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#quote@1.0.26",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\quote-1.0.26\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\quote-1.0.26\\build.rs",
                "edition": "2018",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "message": {
                "rendered": "error[E0425]: cannot find function, tuple struct or tuple variant `Some` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\quote-1.0.26\\build.rs:37:5\n   |\n37 |     Some(RustcVersion { minor })\n   |     ^^^^ not found in this scope\n   |\nhelp: consider importing this tuple variant\n   |\n1  + use core::option::Option::Some;\n   |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this tuple variant",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 0,
                        "byte_start": 0,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\quote-1.0.26\\build.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 1,
                        "line_start": 1,
                        "suggested_replacement": "use core::option::Option::Some;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": []
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0425",
                  "explanation": "An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"
                },
                "level": "error",
                "message": "cannot find function, tuple struct or tuple variant `Some` in this scope",
                "spans": [
                  {
                    "byte_end": 934,
                    "byte_start": 930,
                    "column_end": 9,
                    "column_start": 5,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\quote-1.0.26\\build.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 37,
                    "line_start": 37,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 9,
                        "highlight_start": 5,
                        "text": "    Some(RustcVersion { minor })"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#quote@1.0.26",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\quote-1.0.26\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\quote-1.0.26\\build.rs",
                "edition": "2018",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "message": {
                "rendered": "error: `#[panic_handler]` function required, but not found\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": null,
                "level": "error",
                "message": "`#[panic_handler]` function required, but not found",
                "spans": []
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#quote@1.0.26",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\quote-1.0.26\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\quote-1.0.26\\build.rs",
                "edition": "2018",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "message": {
                "rendered": "error: unwinding panics are not supported without std\n  |\n  = help: using nightly cargo, use -Zbuild-std with panic=\"abort\" to avoid unwinding\n  = note: since the core library is usually precompiled with panic=\"unwind\", rebuilding your crate with panic=\"abort\" may not be enough to fix the problem\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "using nightly cargo, use -Zbuild-std with panic=\"abort\" to avoid unwinding",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "since the core library is usually precompiled with panic=\"unwind\", rebuilding your crate with panic=\"abort\" may not be enough to fix the problem",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": null,
                "level": "error",
                "message": "unwinding panics are not supported without std",
                "spans": []
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#memchr@2.5.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\memchr-2.5.0\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\memchr-2.5.0\\build.rs",
                "edition": "2018",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "message": {
                "rendered": "Some errors have detailed explanations: E0462, E0463, E0531.\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": null,
                "level": "failure-note",
                "message": "Some errors have detailed explanations: E0462, E0463, E0531.",
                "spans": []
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#quote@1.0.26",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\quote-1.0.26\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\quote-1.0.26\\build.rs",
                "edition": "2018",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "message": {
                "rendered": "Some errors have detailed explanations: E0412, E0425, E0462, E0463, E0531.\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": null,
                "level": "failure-note",
                "message": "Some errors have detailed explanations: E0412, E0425, E0462, E0463, E0531.",
                "spans": []
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#memchr@2.5.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\memchr-2.5.0\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\memchr-2.5.0\\build.rs",
                "edition": "2018",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "message": {
                "rendered": "For more information about an error, try `rustc --explain E0462`.\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": null,
                "level": "failure-note",
                "message": "For more information about an error, try `rustc --explain E0462`.",
                "spans": []
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#quote@1.0.26",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\quote-1.0.26\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\quote-1.0.26\\build.rs",
                "edition": "2018",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "message": {
                "rendered": "For more information about an error, try `rustc --explain E0412`.\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": null,
                "level": "failure-note",
                "message": "For more information about an error, try `rustc --explain E0412`.",
                "spans": []
              }
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#proc-macro2@1.0.63",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\proc-macro2-1.0.63\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\proc-macro2-1.0.63\\build.rs",
                "edition": "2018",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "proc-macro"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpkh7hmy5y\\trust-dns-0.23.2\\target\\debug\\build\\proc-macro2-4bc91f68a1a9ec42\\build-script-build.exe",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpkh7hmy5y\\trust-dns-0.23.2\\target\\debug\\build\\proc-macro2-4bc91f68a1a9ec42\\build_script_build.pdb"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#once_cell@1.18.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "once_cell",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0412]: cannot find type `Option` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\imp_std.rs:24:23\n   |\n24 |     value: UnsafeCell<Option<T>>,\n   |                       ^^^^^^ not found in this scope\n   |\nhelp: consider importing this enum\n   |\n6  + use core::option::Option;\n   |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this enum",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 170,
                        "byte_start": 170,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\imp_std.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 6,
                        "line_start": 6,
                        "suggested_replacement": "use core::option::Option;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use std::{"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0412",
                  "explanation": "A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"
                },
                "level": "error",
                "message": "cannot find type `Option` in this scope",
                "spans": [
                  {
                    "byte_end": 804,
                    "byte_start": 798,
                    "column_end": 29,
                    "column_start": 23,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\imp_std.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 24,
                    "line_start": 24,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 29,
                        "highlight_start": 23,
                        "text": "    value: UnsafeCell<Option<T>>,"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#once_cell@1.18.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "once_cell",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0405]: cannot find trait `Sync` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\imp_std.rs:32:29\n   |\n32 | unsafe impl<T: Sync + Send> Sync for OnceCell<T> {}\n   |                             ^^^^ not found in this scope\n   |\nhelp: consider importing this trait\n   |\n6  + use core::marker::Sync;\n   |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this trait",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 170,
                        "byte_start": 170,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\imp_std.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 6,
                        "line_start": 6,
                        "suggested_replacement": "use core::marker::Sync;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use std::{"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0405",
                  "explanation": "The code refers to a trait that is not in scope.\n\nErroneous code example:\n\n```compile_fail,E0405\nstruct Foo;\n\nimpl SomeTrait for Foo {} // error: trait `SomeTrait` is not in scope\n```\n\nPlease verify that the name of the trait wasn't misspelled and ensure that it\nwas imported. Example:\n\n```\n# #[cfg(for_demonstration_only)]\n// solution 1:\nuse some_file::SomeTrait;\n\n// solution 2:\ntrait SomeTrait {\n    // some functions\n}\n\nstruct Foo;\n\nimpl SomeTrait for Foo { // ok!\n    // implements functions\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find trait `Sync` in this scope",
                "spans": [
                  {
                    "byte_end": 1047,
                    "byte_start": 1043,
                    "column_end": 33,
                    "column_start": 29,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\imp_std.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 32,
                    "line_start": 32,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 33,
                        "highlight_start": 29,
                        "text": "unsafe impl<T: Sync + Send> Sync for OnceCell<T> {}"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#once_cell@1.18.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "once_cell",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0405]: cannot find trait `Sync` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\imp_std.rs:32:16\n   |\n32 | unsafe impl<T: Sync + Send> Sync for OnceCell<T> {}\n   |                ^^^^ not found in this scope\n   |\nhelp: consider importing this trait\n   |\n6  + use core::marker::Sync;\n   |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this trait",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 170,
                        "byte_start": 170,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\imp_std.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 6,
                        "line_start": 6,
                        "suggested_replacement": "use core::marker::Sync;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use std::{"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0405",
                  "explanation": "The code refers to a trait that is not in scope.\n\nErroneous code example:\n\n```compile_fail,E0405\nstruct Foo;\n\nimpl SomeTrait for Foo {} // error: trait `SomeTrait` is not in scope\n```\n\nPlease verify that the name of the trait wasn't misspelled and ensure that it\nwas imported. Example:\n\n```\n# #[cfg(for_demonstration_only)]\n// solution 1:\nuse some_file::SomeTrait;\n\n// solution 2:\ntrait SomeTrait {\n    // some functions\n}\n\nstruct Foo;\n\nimpl SomeTrait for Foo { // ok!\n    // implements functions\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find trait `Sync` in this scope",
                "spans": [
                  {
                    "byte_end": 1034,
                    "byte_start": 1030,
                    "column_end": 20,
                    "column_start": 16,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\imp_std.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 32,
                    "line_start": 32,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 20,
                        "highlight_start": 16,
                        "text": "unsafe impl<T: Sync + Send> Sync for OnceCell<T> {}"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#once_cell@1.18.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "once_cell",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0405]: cannot find trait `Send` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\imp_std.rs:32:23\n   |\n32 | unsafe impl<T: Sync + Send> Sync for OnceCell<T> {}\n   |                       ^^^^ not found in this scope\n   |\nhelp: consider importing this trait\n   |\n6  + use core::marker::Send;\n   |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this trait",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 170,
                        "byte_start": 170,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\imp_std.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 6,
                        "line_start": 6,
                        "suggested_replacement": "use core::marker::Send;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use std::{"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0405",
                  "explanation": "The code refers to a trait that is not in scope.\n\nErroneous code example:\n\n```compile_fail,E0405\nstruct Foo;\n\nimpl SomeTrait for Foo {} // error: trait `SomeTrait` is not in scope\n```\n\nPlease verify that the name of the trait wasn't misspelled and ensure that it\nwas imported. Example:\n\n```\n# #[cfg(for_demonstration_only)]\n// solution 1:\nuse some_file::SomeTrait;\n\n// solution 2:\ntrait SomeTrait {\n    // some functions\n}\n\nstruct Foo;\n\nimpl SomeTrait for Foo { // ok!\n    // implements functions\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find trait `Send` in this scope",
                "spans": [
                  {
                    "byte_end": 1041,
                    "byte_start": 1037,
                    "column_end": 27,
                    "column_start": 23,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\imp_std.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 32,
                    "line_start": 32,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 27,
                        "highlight_start": 23,
                        "text": "unsafe impl<T: Sync + Send> Sync for OnceCell<T> {}"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#once_cell@1.18.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "once_cell",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0405]: cannot find trait `Send` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\imp_std.rs:33:22\n   |\n33 | unsafe impl<T: Send> Send for OnceCell<T> {}\n   |                      ^^^^ not found in this scope\n   |\nhelp: consider importing this trait\n   |\n6  + use core::marker::Send;\n   |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this trait",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 170,
                        "byte_start": 170,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\imp_std.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 6,
                        "line_start": 6,
                        "suggested_replacement": "use core::marker::Send;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use std::{"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0405",
                  "explanation": "The code refers to a trait that is not in scope.\n\nErroneous code example:\n\n```compile_fail,E0405\nstruct Foo;\n\nimpl SomeTrait for Foo {} // error: trait `SomeTrait` is not in scope\n```\n\nPlease verify that the name of the trait wasn't misspelled and ensure that it\nwas imported. Example:\n\n```\n# #[cfg(for_demonstration_only)]\n// solution 1:\nuse some_file::SomeTrait;\n\n// solution 2:\ntrait SomeTrait {\n    // some functions\n}\n\nstruct Foo;\n\nimpl SomeTrait for Foo { // ok!\n    // implements functions\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find trait `Send` in this scope",
                "spans": [
                  {
                    "byte_end": 1092,
                    "byte_start": 1088,
                    "column_end": 26,
                    "column_start": 22,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\imp_std.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 33,
                    "line_start": 33,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 26,
                        "highlight_start": 22,
                        "text": "unsafe impl<T: Send> Send for OnceCell<T> {}"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#once_cell@1.18.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "once_cell",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0405]: cannot find trait `Send` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\imp_std.rs:33:16\n   |\n33 | unsafe impl<T: Send> Send for OnceCell<T> {}\n   |                ^^^^ not found in this scope\n   |\nhelp: consider importing this trait\n   |\n6  + use core::marker::Send;\n   |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this trait",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 170,
                        "byte_start": 170,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\imp_std.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 6,
                        "line_start": 6,
                        "suggested_replacement": "use core::marker::Send;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use std::{"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0405",
                  "explanation": "The code refers to a trait that is not in scope.\n\nErroneous code example:\n\n```compile_fail,E0405\nstruct Foo;\n\nimpl SomeTrait for Foo {} // error: trait `SomeTrait` is not in scope\n```\n\nPlease verify that the name of the trait wasn't misspelled and ensure that it\nwas imported. Example:\n\n```\n# #[cfg(for_demonstration_only)]\n// solution 1:\nuse some_file::SomeTrait;\n\n// solution 2:\ntrait SomeTrait {\n    // some functions\n}\n\nstruct Foo;\n\nimpl SomeTrait for Foo { // ok!\n    // implements functions\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find trait `Send` in this scope",
                "spans": [
                  {
                    "byte_end": 1086,
                    "byte_start": 1082,
                    "column_end": 20,
                    "column_start": 16,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\imp_std.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 33,
                    "line_start": 33,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 20,
                        "highlight_start": 16,
                        "text": "unsafe impl<T: Send> Send for OnceCell<T> {}"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#once_cell@1.18.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "once_cell",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0425]: cannot find value `None` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\imp_std.rs:40:82\n   |\n40 |         OnceCell { queue: AtomicPtr::new(INCOMPLETE_PTR), value: UnsafeCell::new(None) }\n   |                                                                                  ^^^^ not found in this scope\n   |\nhelp: consider importing this unit variant\n   |\n6  + use core::option::Option::None;\n   |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this unit variant",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 170,
                        "byte_start": 170,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\imp_std.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 6,
                        "line_start": 6,
                        "suggested_replacement": "use core::option::Option::None;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use std::{"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0425",
                  "explanation": "An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"
                },
                "level": "error",
                "message": "cannot find value `None` in this scope",
                "spans": [
                  {
                    "byte_end": 1387,
                    "byte_start": 1383,
                    "column_end": 86,
                    "column_start": 82,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\imp_std.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 40,
                    "line_start": 40,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 86,
                        "highlight_start": 82,
                        "text": "        OnceCell { queue: AtomicPtr::new(INCOMPLETE_PTR), value: UnsafeCell::new(None) }"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#once_cell@1.18.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "once_cell",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0425]: cannot find function, tuple struct or tuple variant `Some` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\imp_std.rs:44:80\n   |\n44 |         OnceCell { queue: AtomicPtr::new(COMPLETE_PTR), value: UnsafeCell::new(Some(value)) }\n   |                                                                                ^^^^ not found in this scope\n   |\nhelp: consider importing this tuple variant\n   |\n6  + use core::option::Option::Some;\n   |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this tuple variant",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 170,
                        "byte_start": 170,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\imp_std.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 6,
                        "line_start": 6,
                        "suggested_replacement": "use core::option::Option::Some;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use std::{"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0425",
                  "explanation": "An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"
                },
                "level": "error",
                "message": "cannot find function, tuple struct or tuple variant `Some` in this scope",
                "spans": [
                  {
                    "byte_end": 1543,
                    "byte_start": 1539,
                    "column_end": 84,
                    "column_start": 80,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\imp_std.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 44,
                    "line_start": 44,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 84,
                        "highlight_start": 80,
                        "text": "        OnceCell { queue: AtomicPtr::new(COMPLETE_PTR), value: UnsafeCell::new(Some(value)) }"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#once_cell@1.18.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "once_cell",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0405]: cannot find trait `FnOnce` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\imp_std.rs:63:12\n   |\n63 |         F: FnOnce() -> Result<T, E>,\n   |            ^^^^^^ not found in this scope\n   |\nhelp: consider importing this trait\n   |\n6  + use core::ops::FnOnce;\n   |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this trait",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 170,
                        "byte_start": 170,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\imp_std.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 6,
                        "line_start": 6,
                        "suggested_replacement": "use core::ops::FnOnce;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use std::{"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0405",
                  "explanation": "The code refers to a trait that is not in scope.\n\nErroneous code example:\n\n```compile_fail,E0405\nstruct Foo;\n\nimpl SomeTrait for Foo {} // error: trait `SomeTrait` is not in scope\n```\n\nPlease verify that the name of the trait wasn't misspelled and ensure that it\nwas imported. Example:\n\n```\n# #[cfg(for_demonstration_only)]\n// solution 1:\nuse some_file::SomeTrait;\n\n// solution 2:\ntrait SomeTrait {\n    // some functions\n}\n\nstruct Foo;\n\nimpl SomeTrait for Foo { // ok!\n    // implements functions\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find trait `FnOnce` in this scope",
                "spans": [
                  {
                    "byte_end": 2337,
                    "byte_start": 2331,
                    "column_end": 18,
                    "column_start": 12,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\imp_std.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 63,
                    "line_start": 63,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 18,
                        "highlight_start": 12,
                        "text": "        F: FnOnce() -> Result<T, E>,"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#once_cell@1.18.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "once_cell",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0412]: cannot find type `Result` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\imp_std.rs:63:24\n   |\n63 |         F: FnOnce() -> Result<T, E>,\n   |                        ^^^^^^ not found in this scope\n   |\nhelp: consider importing one of these items\n   |\n6  + use core::fmt::Result;\n   |\n6  + use core::result::Result;\n   |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing one of these items",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 170,
                        "byte_start": 170,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\imp_std.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 6,
                        "line_start": 6,
                        "suggested_replacement": "use core::fmt::Result;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use std::{"
                          }
                        ]
                      },
                      {
                        "byte_end": 170,
                        "byte_start": 170,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\imp_std.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 6,
                        "line_start": 6,
                        "suggested_replacement": "use core::result::Result;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use std::{"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0412",
                  "explanation": "A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"
                },
                "level": "error",
                "message": "cannot find type `Result` in this scope",
                "spans": [
                  {
                    "byte_end": 2349,
                    "byte_start": 2343,
                    "column_end": 30,
                    "column_start": 24,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\imp_std.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 63,
                    "line_start": 63,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 30,
                        "highlight_start": 24,
                        "text": "        F: FnOnce() -> Result<T, E>,"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#once_cell@1.18.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "once_cell",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0412]: cannot find type `Result` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\imp_std.rs:61:52\n   |\n61 |     pub(crate) fn initialize<F, E>(&self, f: F) -> Result<(), E>\n   |                                                    ^^^^^^ not found in this scope\n   |\nhelp: consider importing one of these items\n   |\n6  + use core::fmt::Result;\n   |\n6  + use core::result::Result;\n   |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing one of these items",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 170,
                        "byte_start": 170,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\imp_std.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 6,
                        "line_start": 6,
                        "suggested_replacement": "use core::fmt::Result;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use std::{"
                          }
                        ]
                      },
                      {
                        "byte_end": 170,
                        "byte_start": 170,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\imp_std.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 6,
                        "line_start": 6,
                        "suggested_replacement": "use core::result::Result;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use std::{"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0412",
                  "explanation": "A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"
                },
                "level": "error",
                "message": "cannot find type `Result` in this scope",
                "spans": [
                  {
                    "byte_end": 2302,
                    "byte_start": 2296,
                    "column_end": 58,
                    "column_start": 52,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\imp_std.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 61,
                    "line_start": 61,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 58,
                        "highlight_start": 52,
                        "text": "    pub(crate) fn initialize<F, E>(&self, f: F) -> Result<(), E>"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#once_cell@1.18.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "once_cell",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0425]: cannot find function, tuple struct or tuple variant `Some` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\imp_std.rs:65:21\n   |\n65 |         let mut f = Some(f);\n   |                     ^^^^ not found in this scope\n   |\nhelp: consider importing this tuple variant\n   |\n6  + use core::option::Option::Some;\n   |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this tuple variant",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 170,
                        "byte_start": 170,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\imp_std.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 6,
                        "line_start": 6,
                        "suggested_replacement": "use core::option::Option::Some;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use std::{"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0425",
                  "explanation": "An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"
                },
                "level": "error",
                "message": "cannot find function, tuple struct or tuple variant `Some` in this scope",
                "spans": [
                  {
                    "byte_end": 2387,
                    "byte_start": 2383,
                    "column_end": 25,
                    "column_start": 21,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\imp_std.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 65,
                    "line_start": 65,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 25,
                        "highlight_start": 21,
                        "text": "        let mut f = Some(f);"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#once_cell@1.18.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "once_cell",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0412]: cannot find type `Result` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\imp_std.rs:66:22\n   |\n66 |         let mut res: Result<(), E> = Ok(());\n   |                      ^^^^^^ not found in this scope\n   |\nhelp: consider importing one of these items\n   |\n6  + use core::fmt::Result;\n   |\n6  + use core::result::Result;\n   |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing one of these items",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 170,
                        "byte_start": 170,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\imp_std.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 6,
                        "line_start": 6,
                        "suggested_replacement": "use core::fmt::Result;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use std::{"
                          }
                        ]
                      },
                      {
                        "byte_end": 170,
                        "byte_start": 170,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\imp_std.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 6,
                        "line_start": 6,
                        "suggested_replacement": "use core::result::Result;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use std::{"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0412",
                  "explanation": "A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"
                },
                "level": "error",
                "message": "cannot find type `Result` in this scope",
                "spans": [
                  {
                    "byte_end": 2419,
                    "byte_start": 2413,
                    "column_end": 28,
                    "column_start": 22,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\imp_std.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 66,
                    "line_start": 66,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 28,
                        "highlight_start": 22,
                        "text": "        let mut res: Result<(), E> = Ok(());"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#once_cell@1.18.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "once_cell",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0425]: cannot find function, tuple struct or tuple variant `Ok` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\imp_std.rs:66:38\n   |\n66 |         let mut res: Result<(), E> = Ok(());\n   |                                      ^^ not found in this scope\n   |\nhelp: consider importing this tuple variant\n   |\n6  + use core::result::Result::Ok;\n   |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this tuple variant",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 170,
                        "byte_start": 170,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\imp_std.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 6,
                        "line_start": 6,
                        "suggested_replacement": "use core::result::Result::Ok;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use std::{"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0425",
                  "explanation": "An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"
                },
                "level": "error",
                "message": "cannot find function, tuple struct or tuple variant `Ok` in this scope",
                "spans": [
                  {
                    "byte_end": 2431,
                    "byte_start": 2429,
                    "column_end": 40,
                    "column_start": 38,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\imp_std.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 66,
                    "line_start": 66,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 40,
                        "highlight_start": 38,
                        "text": "        let mut res: Result<(), E> = Ok(());"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#once_cell@1.18.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "once_cell",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0412]: cannot find type `Option` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\imp_std.rs:67:24\n   |\n67 |         let slot: *mut Option<T> = self.value.get();\n   |                        ^^^^^^ not found in this scope\n   |\nhelp: consider importing this enum\n   |\n6  + use core::option::Option;\n   |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this enum",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 170,
                        "byte_start": 170,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\imp_std.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 6,
                        "line_start": 6,
                        "suggested_replacement": "use core::option::Option;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use std::{"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0412",
                  "explanation": "A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"
                },
                "level": "error",
                "message": "cannot find type `Option` in this scope",
                "spans": [
                  {
                    "byte_end": 2466,
                    "byte_start": 2460,
                    "column_end": 30,
                    "column_start": 24,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\imp_std.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 67,
                    "line_start": 67,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 30,
                        "highlight_start": 24,
                        "text": "        let slot: *mut Option<T> = self.value.get();"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#once_cell@1.18.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "once_cell",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0425]: cannot find function, tuple struct or tuple variant `Some` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\imp_std.rs:70:13\n   |\n70 |             Some(&mut || {\n   |             ^^^^ not found in this scope\n   |\nhelp: consider importing this tuple variant\n   |\n6  + use core::option::Option::Some;\n   |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this tuple variant",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 170,
                        "byte_start": 170,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\imp_std.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 6,
                        "line_start": 6,
                        "suggested_replacement": "use core::option::Option::Some;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use std::{"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0425",
                  "explanation": "An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"
                },
                "level": "error",
                "message": "cannot find function, tuple struct or tuple variant `Some` in this scope",
                "spans": [
                  {
                    "byte_end": 2559,
                    "byte_start": 2555,
                    "column_end": 17,
                    "column_start": 13,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\imp_std.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 70,
                    "line_start": 70,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 17,
                        "highlight_start": 13,
                        "text": "            Some(&mut || {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#once_cell@1.18.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "once_cell",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0531]: cannot find tuple struct or tuple variant `Ok` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\imp_std.rs:73:21\n   |\n73 |                     Ok(value) => {\n   |                     ^^ not found in this scope\n   |\nhelp: consider importing this tuple variant\n   |\n6  + use core::result::Result::Ok;\n   |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this tuple variant",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 170,
                        "byte_start": 170,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\imp_std.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 6,
                        "line_start": 6,
                        "suggested_replacement": "use core::result::Result::Ok;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use std::{"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0531",
                  "explanation": "An unknown tuple struct/variant has been used.\n\nErroneous code example:\n\n```compile_fail,E0531\nlet Type(x) = Type(12); // error!\nmatch Bar(12) {\n    Bar(x) => {} // error!\n    _ => {}\n}\n```\n\nIn most cases, it's either a forgotten import or a typo. However, let's look at\nhow you can have such a type:\n\n```edition2018\nstruct Type(u32); // this is a tuple struct\n\nenum Foo {\n    Bar(u32), // this is a tuple variant\n}\n\nuse Foo::*; // To use Foo's variant directly, we need to import them in\n            // the scope.\n```\n\nEither way, it should work fine with our previous code:\n\n```edition2018\nstruct Type(u32);\n\nenum Foo {\n    Bar(u32),\n}\nuse Foo::*;\n\nlet Type(x) = Type(12); // ok!\nmatch Type(12) {\n    Type(x) => {} // ok!\n    _ => {}\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find tuple struct or tuple variant `Ok` in this scope",
                "spans": [
                  {
                    "byte_end": 2684,
                    "byte_start": 2682,
                    "column_end": 23,
                    "column_start": 21,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\imp_std.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 73,
                    "line_start": 73,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 23,
                        "highlight_start": 21,
                        "text": "                    Ok(value) => {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#once_cell@1.18.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "once_cell",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0425]: cannot find function, tuple struct or tuple variant `Some` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\imp_std.rs:74:42\n   |\n74 |                         unsafe { *slot = Some(value) };\n   |                                          ^^^^ not found in this scope\n   |\nhelp: consider importing this tuple variant\n   |\n6  + use core::option::Option::Some;\n   |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this tuple variant",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 170,
                        "byte_start": 170,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\imp_std.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 6,
                        "line_start": 6,
                        "suggested_replacement": "use core::option::Option::Some;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use std::{"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0425",
                  "explanation": "An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"
                },
                "level": "error",
                "message": "cannot find function, tuple struct or tuple variant `Some` in this scope",
                "spans": [
                  {
                    "byte_end": 2742,
                    "byte_start": 2738,
                    "column_end": 46,
                    "column_start": 42,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\imp_std.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 74,
                    "line_start": 74,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 46,
                        "highlight_start": 42,
                        "text": "                        unsafe { *slot = Some(value) };"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#once_cell@1.18.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "once_cell",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0531]: cannot find tuple struct or tuple variant `Err` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\imp_std.rs:77:21\n   |\n77 |                     Err(err) => {\n   |                     ^^^ not found in this scope\n   |\nhelp: consider importing this tuple variant\n   |\n6  + use core::result::Result::Err;\n   |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this tuple variant",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 170,
                        "byte_start": 170,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\imp_std.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 6,
                        "line_start": 6,
                        "suggested_replacement": "use core::result::Result::Err;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use std::{"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0531",
                  "explanation": "An unknown tuple struct/variant has been used.\n\nErroneous code example:\n\n```compile_fail,E0531\nlet Type(x) = Type(12); // error!\nmatch Bar(12) {\n    Bar(x) => {} // error!\n    _ => {}\n}\n```\n\nIn most cases, it's either a forgotten import or a typo. However, let's look at\nhow you can have such a type:\n\n```edition2018\nstruct Type(u32); // this is a tuple struct\n\nenum Foo {\n    Bar(u32), // this is a tuple variant\n}\n\nuse Foo::*; // To use Foo's variant directly, we need to import them in\n            // the scope.\n```\n\nEither way, it should work fine with our previous code:\n\n```edition2018\nstruct Type(u32);\n\nenum Foo {\n    Bar(u32),\n}\nuse Foo::*;\n\nlet Type(x) = Type(12); // ok!\nmatch Type(12) {\n    Type(x) => {} // ok!\n    _ => {}\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find tuple struct or tuple variant `Err` in this scope",
                "spans": [
                  {
                    "byte_end": 2827,
                    "byte_start": 2824,
                    "column_end": 24,
                    "column_start": 21,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\imp_std.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 77,
                    "line_start": 77,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 24,
                        "highlight_start": 21,
                        "text": "                    Err(err) => {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#once_cell@1.18.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "once_cell",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0425]: cannot find function, tuple struct or tuple variant `Err` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\imp_std.rs:78:31\n   |\n78 |                         res = Err(err);\n   |                               ^^^\n   |\nhelp: a local variable with a similar name exists\n   |\n78 -                         res = Err(err);\n78 +                         res = err(err);\n   |\nhelp: consider importing this tuple variant\n   |\n6  + use core::result::Result::Err;\n   |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "a local variable with a similar name exists",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 2871,
                        "byte_start": 2868,
                        "column_end": 34,
                        "column_start": 31,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\imp_std.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 78,
                        "line_start": 78,
                        "suggested_replacement": "err",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 34,
                            "highlight_start": 31,
                            "text": "                        res = Err(err);"
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this tuple variant",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 170,
                        "byte_start": 170,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\imp_std.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 6,
                        "line_start": 6,
                        "suggested_replacement": "use core::result::Result::Err;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use std::{"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0425",
                  "explanation": "An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"
                },
                "level": "error",
                "message": "cannot find function, tuple struct or tuple variant `Err` in this scope",
                "spans": [
                  {
                    "byte_end": 2871,
                    "byte_start": 2868,
                    "column_end": 34,
                    "column_start": 31,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\imp_std.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 78,
                    "line_start": 78,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 34,
                        "highlight_start": 31,
                        "text": "                        res = Err(err);"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#once_cell@1.18.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "once_cell",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0425]: cannot find value `None` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\imp_std.rs:89:41\n   |\n89 |         initialize_or_wait(&self.queue, None);\n   |                                         ^^^^ not found in this scope\n   |\nhelp: consider importing this unit variant\n   |\n6  + use core::option::Option::None;\n   |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this unit variant",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 170,
                        "byte_start": 170,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\imp_std.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 6,
                        "line_start": 6,
                        "suggested_replacement": "use core::option::Option::None;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use std::{"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0425",
                  "explanation": "An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"
                },
                "level": "error",
                "message": "cannot find value `None` in this scope",
                "spans": [
                  {
                    "byte_end": 3082,
                    "byte_start": 3078,
                    "column_end": 45,
                    "column_start": 41,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\imp_std.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 89,
                    "line_start": 89,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 45,
                        "highlight_start": 41,
                        "text": "        initialize_or_wait(&self.queue, None);"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#once_cell@1.18.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "once_cell",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0412]: cannot find type `Option` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\imp_std.rs:107:41\n    |\n107 |     pub(crate) fn get_mut(&mut self) -> Option<&mut T> {\n    |                                         ^^^^^^ not found in this scope\n    |\nhelp: consider importing this enum\n    |\n6   + use core::option::Option;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this enum",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 170,
                        "byte_start": 170,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\imp_std.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 6,
                        "line_start": 6,
                        "suggested_replacement": "use core::option::Option;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use std::{"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0412",
                  "explanation": "A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"
                },
                "level": "error",
                "message": "cannot find type `Option` in this scope",
                "spans": [
                  {
                    "byte_end": 3710,
                    "byte_start": 3704,
                    "column_end": 47,
                    "column_start": 41,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\imp_std.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 107,
                    "line_start": 107,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 47,
                        "highlight_start": 41,
                        "text": "    pub(crate) fn get_mut(&mut self) -> Option<&mut T> {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#once_cell@1.18.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "once_cell",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0412]: cannot find type `Option` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\imp_std.rs:115:39\n    |\n115 |     pub(crate) fn into_inner(self) -> Option<T> {\n    |                                       ^^^^^^ not found in this scope\n    |\nhelp: consider importing this enum\n    |\n6   + use core::option::Option;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this enum",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 170,
                        "byte_start": 170,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\imp_std.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 6,
                        "line_start": 6,
                        "suggested_replacement": "use core::option::Option;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use std::{"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0412",
                  "explanation": "A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"
                },
                "level": "error",
                "message": "cannot find type `Option` in this scope",
                "spans": [
                  {
                    "byte_end": 3991,
                    "byte_start": 3985,
                    "column_end": 45,
                    "column_start": 39,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\imp_std.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 115,
                    "line_start": 115,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 45,
                        "highlight_start": 39,
                        "text": "    pub(crate) fn into_inner(self) -> Option<T> {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#once_cell@1.18.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "once_cell",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0412]: cannot find type `Option` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\imp_std.rs:139:18\n    |\n139 |     thread: Cell<Option<Thread>>,\n    |                  ^^^^^^ not found in this scope\n    |\nhelp: consider importing this enum\n    |\n6   + use core::option::Option;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this enum",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 170,
                        "byte_start": 170,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\imp_std.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 6,
                        "line_start": 6,
                        "suggested_replacement": "use core::option::Option;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use std::{"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0412",
                  "explanation": "A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"
                },
                "level": "error",
                "message": "cannot find type `Option` in this scope",
                "spans": [
                  {
                    "byte_end": 4947,
                    "byte_start": 4941,
                    "column_end": 24,
                    "column_start": 18,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\imp_std.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 139,
                    "line_start": 139,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 24,
                        "highlight_start": 18,
                        "text": "    thread: Cell<Option<Thread>>,"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#once_cell@1.18.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "once_cell",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0405]: cannot find trait `Drop` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\imp_std.rs:150:6\n    |\n150 | impl Drop for Guard<'_> {\n    |      ^^^^ not found in this scope\n    |\nhelp: consider importing this trait\n    |\n6   + use core::ops::Drop;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this trait",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 170,
                        "byte_start": 170,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\imp_std.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 6,
                        "line_start": 6,
                        "suggested_replacement": "use core::ops::Drop;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use std::{"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0405",
                  "explanation": "The code refers to a trait that is not in scope.\n\nErroneous code example:\n\n```compile_fail,E0405\nstruct Foo;\n\nimpl SomeTrait for Foo {} // error: trait `SomeTrait` is not in scope\n```\n\nPlease verify that the name of the trait wasn't misspelled and ensure that it\nwas imported. Example:\n\n```\n# #[cfg(for_demonstration_only)]\n// solution 1:\nuse some_file::SomeTrait;\n\n// solution 2:\ntrait SomeTrait {\n    // some functions\n}\n\nstruct Foo;\n\nimpl SomeTrait for Foo { // ok!\n    // implements functions\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find trait `Drop` in this scope",
                "spans": [
                  {
                    "byte_end": 5157,
                    "byte_start": 5153,
                    "column_end": 10,
                    "column_start": 6,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\imp_std.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 150,
                    "line_start": 150,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 10,
                        "highlight_start": 6,
                        "text": "impl Drop for Guard<'_> {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#once_cell@1.18.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "once_cell",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0412]: cannot find type `Option` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\imp_std.rs:177:60\n    |\n177 | fn initialize_or_wait(queue: &AtomicPtr<Waiter>, mut init: Option<&mut dyn FnMut() -> bool>) {\n    |                                                            ^^^^^^ not found in this scope\n    |\nhelp: consider importing this enum\n    |\n6   + use core::option::Option;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this enum",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 170,
                        "byte_start": 170,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\imp_std.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 6,
                        "line_start": 6,
                        "suggested_replacement": "use core::option::Option;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use std::{"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0412",
                  "explanation": "A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"
                },
                "level": "error",
                "message": "cannot find type `Option` in this scope",
                "spans": [
                  {
                    "byte_end": 6036,
                    "byte_start": 6030,
                    "column_end": 66,
                    "column_start": 60,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\imp_std.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 177,
                    "line_start": 177,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 66,
                        "highlight_start": 60,
                        "text": "fn initialize_or_wait(queue: &AtomicPtr<Waiter>, mut init: Option<&mut dyn FnMut() -> bool>) {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#once_cell@1.18.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "once_cell",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0405]: cannot find trait `FnMut` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\imp_std.rs:177:76\n    |\n177 | fn initialize_or_wait(queue: &AtomicPtr<Waiter>, mut init: Option<&mut dyn FnMut() -> bool>) {\n    |                                                                            ^^^^^ not found in this scope\n    |\nhelp: consider importing this trait\n    |\n6   + use core::ops::FnMut;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this trait",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 170,
                        "byte_start": 170,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\imp_std.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 6,
                        "line_start": 6,
                        "suggested_replacement": "use core::ops::FnMut;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use std::{"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0405",
                  "explanation": "The code refers to a trait that is not in scope.\n\nErroneous code example:\n\n```compile_fail,E0405\nstruct Foo;\n\nimpl SomeTrait for Foo {} // error: trait `SomeTrait` is not in scope\n```\n\nPlease verify that the name of the trait wasn't misspelled and ensure that it\nwas imported. Example:\n\n```\n# #[cfg(for_demonstration_only)]\n// solution 1:\nuse some_file::SomeTrait;\n\n// solution 2:\ntrait SomeTrait {\n    // some functions\n}\n\nstruct Foo;\n\nimpl SomeTrait for Foo { // ok!\n    // implements functions\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find trait `FnMut` in this scope",
                "spans": [
                  {
                    "byte_end": 6051,
                    "byte_start": 6046,
                    "column_end": 81,
                    "column_start": 76,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\imp_std.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 177,
                    "line_start": 177,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 81,
                        "highlight_start": 76,
                        "text": "fn initialize_or_wait(queue: &AtomicPtr<Waiter>, mut init: Option<&mut dyn FnMut() -> bool>) {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#once_cell@1.18.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "once_cell",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0531]: cannot find tuple struct or tuple variant `Some` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\imp_std.rs:184:26\n    |\n184 |             (INCOMPLETE, Some(init)) => {\n    |                          ^^^^ not found in this scope\n    |\nhelp: consider importing this tuple variant\n    |\n6   + use core::option::Option::Some;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this tuple variant",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 170,
                        "byte_start": 170,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\imp_std.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 6,
                        "line_start": 6,
                        "suggested_replacement": "use core::option::Option::Some;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use std::{"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0531",
                  "explanation": "An unknown tuple struct/variant has been used.\n\nErroneous code example:\n\n```compile_fail,E0531\nlet Type(x) = Type(12); // error!\nmatch Bar(12) {\n    Bar(x) => {} // error!\n    _ => {}\n}\n```\n\nIn most cases, it's either a forgotten import or a typo. However, let's look at\nhow you can have such a type:\n\n```edition2018\nstruct Type(u32); // this is a tuple struct\n\nenum Foo {\n    Bar(u32), // this is a tuple variant\n}\n\nuse Foo::*; // To use Foo's variant directly, we need to import them in\n            // the scope.\n```\n\nEither way, it should work fine with our previous code:\n\n```edition2018\nstruct Type(u32);\n\nenum Foo {\n    Bar(u32),\n}\nuse Foo::*;\n\nlet Type(x) = Type(12); // ok!\nmatch Type(12) {\n    Type(x) => {} // ok!\n    _ => {}\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find tuple struct or tuple variant `Some` in this scope",
                "spans": [
                  {
                    "byte_end": 6304,
                    "byte_start": 6300,
                    "column_end": 30,
                    "column_start": 26,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\imp_std.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 184,
                    "line_start": 184,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 30,
                        "highlight_start": 26,
                        "text": "            (INCOMPLETE, Some(init)) => {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#once_cell@1.18.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "once_cell",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0531]: cannot find tuple struct or tuple variant `Err` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\imp_std.rs:191:24\n    |\n191 |                 if let Err(new_queue) = exchange {\n    |                        ^^^ not found in this scope\n    |\nhelp: consider importing this tuple variant\n    |\n6   + use core::result::Result::Err;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this tuple variant",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 170,
                        "byte_start": 170,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\imp_std.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 6,
                        "line_start": 6,
                        "suggested_replacement": "use core::result::Result::Err;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use std::{"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0531",
                  "explanation": "An unknown tuple struct/variant has been used.\n\nErroneous code example:\n\n```compile_fail,E0531\nlet Type(x) = Type(12); // error!\nmatch Bar(12) {\n    Bar(x) => {} // error!\n    _ => {}\n}\n```\n\nIn most cases, it's either a forgotten import or a typo. However, let's look at\nhow you can have such a type:\n\n```edition2018\nstruct Type(u32); // this is a tuple struct\n\nenum Foo {\n    Bar(u32), // this is a tuple variant\n}\n\nuse Foo::*; // To use Foo's variant directly, we need to import them in\n            // the scope.\n```\n\nEither way, it should work fine with our previous code:\n\n```edition2018\nstruct Type(u32);\n\nenum Foo {\n    Bar(u32),\n}\nuse Foo::*;\n\nlet Type(x) = Type(12); // ok!\nmatch Type(12) {\n    Type(x) => {} // ok!\n    _ => {}\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find tuple struct or tuple variant `Err` in this scope",
                "spans": [
                  {
                    "byte_end": 6610,
                    "byte_start": 6607,
                    "column_end": 27,
                    "column_start": 24,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\imp_std.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 191,
                    "line_start": 191,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 27,
                        "highlight_start": 24,
                        "text": "                if let Err(new_queue) = exchange {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#once_cell@1.18.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "once_cell",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0425]: cannot find function, tuple struct or tuple variant `Some` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\imp_std.rs:214:31\n    |\n214 |             thread: Cell::new(Some(thread::current())),\n    |                               ^^^^ not found in this scope\n    |\nhelp: consider importing this tuple variant\n    |\n6   + use core::option::Option::Some;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this tuple variant",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 170,
                        "byte_start": 170,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\imp_std.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 6,
                        "line_start": 6,
                        "suggested_replacement": "use core::option::Option::Some;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use std::{"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0425",
                  "explanation": "An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"
                },
                "level": "error",
                "message": "cannot find function, tuple struct or tuple variant `Some` in this scope",
                "spans": [
                  {
                    "byte_end": 7362,
                    "byte_start": 7358,
                    "column_end": 35,
                    "column_start": 31,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\imp_std.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 214,
                    "line_start": 214,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 35,
                        "highlight_start": 31,
                        "text": "            thread: Cell::new(Some(thread::current())),"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#once_cell@1.18.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "once_cell",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0531]: cannot find tuple struct or tuple variant `Err` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\imp_std.rs:226:16\n    |\n226 |         if let Err(new_queue) = exchange {\n    |                ^^^ not found in this scope\n    |\nhelp: consider importing this tuple variant\n    |\n6   + use core::result::Result::Err;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this tuple variant",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 170,
                        "byte_start": 170,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\imp_std.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 6,
                        "line_start": 6,
                        "suggested_replacement": "use core::result::Result::Err;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use std::{"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0531",
                  "explanation": "An unknown tuple struct/variant has been used.\n\nErroneous code example:\n\n```compile_fail,E0531\nlet Type(x) = Type(12); // error!\nmatch Bar(12) {\n    Bar(x) => {} // error!\n    _ => {}\n}\n```\n\nIn most cases, it's either a forgotten import or a typo. However, let's look at\nhow you can have such a type:\n\n```edition2018\nstruct Type(u32); // this is a tuple struct\n\nenum Foo {\n    Bar(u32), // this is a tuple variant\n}\n\nuse Foo::*; // To use Foo's variant directly, we need to import them in\n            // the scope.\n```\n\nEither way, it should work fine with our previous code:\n\n```edition2018\nstruct Type(u32);\n\nenum Foo {\n    Bar(u32),\n}\nuse Foo::*;\n\nlet Type(x) = Type(12); // ok!\nmatch Type(12) {\n    Type(x) => {} // ok!\n    _ => {}\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find tuple struct or tuple variant `Err` in this scope",
                "spans": [
                  {
                    "byte_end": 7783,
                    "byte_start": 7780,
                    "column_end": 19,
                    "column_start": 16,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\imp_std.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 226,
                    "line_start": 226,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 19,
                        "highlight_start": 16,
                        "text": "        if let Err(new_queue) = exchange {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#once_cell@1.18.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "once_cell",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0405]: cannot find trait `Sized` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\imp_std.rs:250:12\n    |\n250 |         T: Sized,\n    |            ^^^^^ not found in this scope\n    |\nhelp: consider importing this trait\n    |\n246 +     use core::marker::Sized;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this trait",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 8327,
                        "byte_start": 8327,
                        "column_end": 5,
                        "column_start": 5,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\imp_std.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 246,
                        "line_start": 246,
                        "suggested_replacement": "use core::marker::Sized;\n\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 5,
                            "highlight_start": 5,
                            "text": "    #[must_use]"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0405",
                  "explanation": "The code refers to a trait that is not in scope.\n\nErroneous code example:\n\n```compile_fail,E0405\nstruct Foo;\n\nimpl SomeTrait for Foo {} // error: trait `SomeTrait` is not in scope\n```\n\nPlease verify that the name of the trait wasn't misspelled and ensure that it\nwas imported. Example:\n\n```\n# #[cfg(for_demonstration_only)]\n// solution 1:\nuse some_file::SomeTrait;\n\n// solution 2:\ntrait SomeTrait {\n    // some functions\n}\n\nstruct Foo;\n\nimpl SomeTrait for Foo { // ok!\n    // implements functions\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find trait `Sized` in this scope",
                "spans": [
                  {
                    "byte_end": 8427,
                    "byte_start": 8422,
                    "column_end": 17,
                    "column_start": 12,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\imp_std.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 250,
                    "line_start": 250,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 17,
                        "highlight_start": 12,
                        "text": "        T: Sized,"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#once_cell@1.18.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "once_cell",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0405]: cannot find trait `Sized` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\imp_std.rs:262:12\n    |\n262 |         T: Sized,\n    |            ^^^^^ not found in this scope\n    |\nhelp: consider importing this trait\n    |\n246 +     use core::marker::Sized;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this trait",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 8327,
                        "byte_start": 8327,
                        "column_end": 5,
                        "column_start": 5,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\imp_std.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 246,
                        "line_start": 246,
                        "suggested_replacement": "use core::marker::Sized;\n\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 5,
                            "highlight_start": 5,
                            "text": "    #[must_use]"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0405",
                  "explanation": "The code refers to a trait that is not in scope.\n\nErroneous code example:\n\n```compile_fail,E0405\nstruct Foo;\n\nimpl SomeTrait for Foo {} // error: trait `SomeTrait` is not in scope\n```\n\nPlease verify that the name of the trait wasn't misspelled and ensure that it\nwas imported. Example:\n\n```\n# #[cfg(for_demonstration_only)]\n// solution 1:\nuse some_file::SomeTrait;\n\n// solution 2:\ntrait SomeTrait {\n    // some functions\n}\n\nstruct Foo;\n\nimpl SomeTrait for Foo { // ok!\n    // implements functions\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find trait `Sized` in this scope",
                "spans": [
                  {
                    "byte_end": 8816,
                    "byte_start": 8811,
                    "column_end": 17,
                    "column_start": 12,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\imp_std.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 262,
                    "line_start": 262,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 17,
                        "highlight_start": 12,
                        "text": "        T: Sized,"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#once_cell@1.18.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "once_cell",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0405]: cannot find trait `Sized` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\imp_std.rs:283:12\n    |\n283 |         T: Sized,\n    |            ^^^^^ not found in this scope\n    |\nhelp: consider importing this trait\n    |\n246 +     use core::marker::Sized;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this trait",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 8327,
                        "byte_start": 8327,
                        "column_end": 5,
                        "column_start": 5,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\imp_std.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 246,
                        "line_start": 246,
                        "suggested_replacement": "use core::marker::Sized;\n\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 5,
                            "highlight_start": 5,
                            "text": "    #[must_use]"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0405",
                  "explanation": "The code refers to a trait that is not in scope.\n\nErroneous code example:\n\n```compile_fail,E0405\nstruct Foo;\n\nimpl SomeTrait for Foo {} // error: trait `SomeTrait` is not in scope\n```\n\nPlease verify that the name of the trait wasn't misspelled and ensure that it\nwas imported. Example:\n\n```\n# #[cfg(for_demonstration_only)]\n// solution 1:\nuse some_file::SomeTrait;\n\n// solution 2:\ntrait SomeTrait {\n    // some functions\n}\n\nstruct Foo;\n\nimpl SomeTrait for Foo { // ok!\n    // implements functions\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find trait `Sized` in this scope",
                "spans": [
                  {
                    "byte_end": 9691,
                    "byte_start": 9686,
                    "column_end": 17,
                    "column_start": 12,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\imp_std.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 283,
                    "line_start": 283,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 17,
                        "highlight_start": 12,
                        "text": "        T: Sized,"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#once_cell@1.18.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "once_cell",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0405]: cannot find trait `FnOnce` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\imp_std.rs:281:52\n    |\n281 |     pub(crate) fn map_addr<T>(ptr: *mut T, f: impl FnOnce(usize) -> usize) -> *mut T\n    |                                                    ^^^^^^ not found in this scope\n    |\nhelp: consider importing this trait\n    |\n246 +     use core::ops::FnOnce;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this trait",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 8327,
                        "byte_start": 8327,
                        "column_end": 5,
                        "column_start": 5,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\imp_std.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 246,
                        "line_start": 246,
                        "suggested_replacement": "use core::ops::FnOnce;\n\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 5,
                            "highlight_start": 5,
                            "text": "    #[must_use]"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0405",
                  "explanation": "The code refers to a trait that is not in scope.\n\nErroneous code example:\n\n```compile_fail,E0405\nstruct Foo;\n\nimpl SomeTrait for Foo {} // error: trait `SomeTrait` is not in scope\n```\n\nPlease verify that the name of the trait wasn't misspelled and ensure that it\nwas imported. Example:\n\n```\n# #[cfg(for_demonstration_only)]\n// solution 1:\nuse some_file::SomeTrait;\n\n// solution 2:\ntrait SomeTrait {\n    // some functions\n}\n\nstruct Foo;\n\nimpl SomeTrait for Foo { // ok!\n    // implements functions\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find trait `FnOnce` in this scope",
                "spans": [
                  {
                    "byte_end": 9637,
                    "byte_start": 9631,
                    "column_end": 58,
                    "column_start": 52,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\imp_std.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 281,
                    "line_start": 281,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 58,
                        "highlight_start": 52,
                        "text": "    pub(crate) fn map_addr<T>(ptr: *mut T, f: impl FnOnce(usize) -> usize) -> *mut T"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#once_cell@1.18.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "once_cell",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0412]: cannot find type `Option` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs:415:27\n    |\n415 |         inner: UnsafeCell<Option<T>>,\n    |                           ^^^^^^ not found in this scope\n    |\nhelp: consider importing this enum\n    |\n386 +     use core::option::Option;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this enum",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 12853,
                        "byte_start": 12853,
                        "column_end": 5,
                        "column_start": 5,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 386,
                        "line_start": 386,
                        "suggested_replacement": "use core::option::Option;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 5,
                            "highlight_start": 5,
                            "text": "    use core::{"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0412",
                  "explanation": "A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"
                },
                "level": "error",
                "message": "cannot find type `Option` in this scope",
                "spans": [
                  {
                    "byte_end": 13761,
                    "byte_start": 13755,
                    "column_end": 33,
                    "column_start": 27,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 415,
                    "line_start": 415,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 33,
                        "highlight_start": 27,
                        "text": "        inner: UnsafeCell<Option<T>>,"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#once_cell@1.18.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "once_cell",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0405]: cannot find trait `Default` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs:425:13\n    |\n425 |     impl<T> Default for OnceCell<T> {\n    |             ^^^^^^^ not found in this scope\n    |\nhelp: consider importing this trait\n    |\n386 +     use core::default::Default;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this trait",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 12853,
                        "byte_start": 12853,
                        "column_end": 5,
                        "column_start": 5,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 386,
                        "line_start": 386,
                        "suggested_replacement": "use core::default::Default;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 5,
                            "highlight_start": 5,
                            "text": "    use core::{"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0405",
                  "explanation": "The code refers to a trait that is not in scope.\n\nErroneous code example:\n\n```compile_fail,E0405\nstruct Foo;\n\nimpl SomeTrait for Foo {} // error: trait `SomeTrait` is not in scope\n```\n\nPlease verify that the name of the trait wasn't misspelled and ensure that it\nwas imported. Example:\n\n```\n# #[cfg(for_demonstration_only)]\n// solution 1:\nuse some_file::SomeTrait;\n\n// solution 2:\ntrait SomeTrait {\n    // some functions\n}\n\nstruct Foo;\n\nimpl SomeTrait for Foo { // ok!\n    // implements functions\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find trait `Default` in this scope",
                "spans": [
                  {
                    "byte_end": 14144,
                    "byte_start": 14137,
                    "column_end": 20,
                    "column_start": 13,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 425,
                    "line_start": 425,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 20,
                        "highlight_start": 13,
                        "text": "    impl<T> Default for OnceCell<T> {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#once_cell@1.18.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "once_cell",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0531]: cannot find tuple struct or tuple variant `Some` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs:434:17\n    |\n434 |                 Some(v) => f.debug_tuple(\"OnceCell\").field(v).finish(),\n    |                 ^^^^ not found in this scope\n    |\nhelp: consider importing this tuple variant\n    |\n386 +     use core::option::Option::Some;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this tuple variant",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 12853,
                        "byte_start": 12853,
                        "column_end": 5,
                        "column_start": 5,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 386,
                        "line_start": 386,
                        "suggested_replacement": "use core::option::Option::Some;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 5,
                            "highlight_start": 5,
                            "text": "    use core::{"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0531",
                  "explanation": "An unknown tuple struct/variant has been used.\n\nErroneous code example:\n\n```compile_fail,E0531\nlet Type(x) = Type(12); // error!\nmatch Bar(12) {\n    Bar(x) => {} // error!\n    _ => {}\n}\n```\n\nIn most cases, it's either a forgotten import or a typo. However, let's look at\nhow you can have such a type:\n\n```edition2018\nstruct Type(u32); // this is a tuple struct\n\nenum Foo {\n    Bar(u32), // this is a tuple variant\n}\n\nuse Foo::*; // To use Foo's variant directly, we need to import them in\n            // the scope.\n```\n\nEither way, it should work fine with our previous code:\n\n```edition2018\nstruct Type(u32);\n\nenum Foo {\n    Bar(u32),\n}\nuse Foo::*;\n\nlet Type(x) = Type(12); // ok!\nmatch Type(12) {\n    Type(x) => {} // ok!\n    _ => {}\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find tuple struct or tuple variant `Some` in this scope",
                "spans": [
                  {
                    "byte_end": 14402,
                    "byte_start": 14398,
                    "column_end": 21,
                    "column_start": 17,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 434,
                    "line_start": 434,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 21,
                        "highlight_start": 17,
                        "text": "                Some(v) => f.debug_tuple(\"OnceCell\").field(v).finish(),"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#once_cell@1.18.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "once_cell",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0405]: cannot find trait `Clone` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs:440:20\n    |\n440 |     impl<T: Clone> Clone for OnceCell<T> {\n    |                    ^^^^^ not found in this scope\n    |\nhelp: consider importing this trait\n    |\n386 +     use core::clone::Clone;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this trait",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 12853,
                        "byte_start": 12853,
                        "column_end": 5,
                        "column_start": 5,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 386,
                        "line_start": 386,
                        "suggested_replacement": "use core::clone::Clone;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 5,
                            "highlight_start": 5,
                            "text": "    use core::{"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0405",
                  "explanation": "The code refers to a trait that is not in scope.\n\nErroneous code example:\n\n```compile_fail,E0405\nstruct Foo;\n\nimpl SomeTrait for Foo {} // error: trait `SomeTrait` is not in scope\n```\n\nPlease verify that the name of the trait wasn't misspelled and ensure that it\nwas imported. Example:\n\n```\n# #[cfg(for_demonstration_only)]\n// solution 1:\nuse some_file::SomeTrait;\n\n// solution 2:\ntrait SomeTrait {\n    // some functions\n}\n\nstruct Foo;\n\nimpl SomeTrait for Foo { // ok!\n    // implements functions\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find trait `Clone` in this scope",
                "spans": [
                  {
                    "byte_end": 14566,
                    "byte_start": 14561,
                    "column_end": 25,
                    "column_start": 20,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 440,
                    "line_start": 440,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 25,
                        "highlight_start": 20,
                        "text": "    impl<T: Clone> Clone for OnceCell<T> {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#once_cell@1.18.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "once_cell",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0405]: cannot find trait `Clone` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs:440:13\n    |\n440 |     impl<T: Clone> Clone for OnceCell<T> {\n    |             ^^^^^ not found in this scope\n    |\nhelp: consider importing this trait\n    |\n386 +     use core::clone::Clone;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this trait",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 12853,
                        "byte_start": 12853,
                        "column_end": 5,
                        "column_start": 5,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 386,
                        "line_start": 386,
                        "suggested_replacement": "use core::clone::Clone;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 5,
                            "highlight_start": 5,
                            "text": "    use core::{"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0405",
                  "explanation": "The code refers to a trait that is not in scope.\n\nErroneous code example:\n\n```compile_fail,E0405\nstruct Foo;\n\nimpl SomeTrait for Foo {} // error: trait `SomeTrait` is not in scope\n```\n\nPlease verify that the name of the trait wasn't misspelled and ensure that it\nwas imported. Example:\n\n```\n# #[cfg(for_demonstration_only)]\n// solution 1:\nuse some_file::SomeTrait;\n\n// solution 2:\ntrait SomeTrait {\n    // some functions\n}\n\nstruct Foo;\n\nimpl SomeTrait for Foo { // ok!\n    // implements functions\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find trait `Clone` in this scope",
                "spans": [
                  {
                    "byte_end": 14559,
                    "byte_start": 14554,
                    "column_end": 18,
                    "column_start": 13,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 440,
                    "line_start": 440,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 18,
                        "highlight_start": 13,
                        "text": "    impl<T: Clone> Clone for OnceCell<T> {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#once_cell@1.18.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "once_cell",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0531]: cannot find tuple struct or tuple variant `Some` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs:443:17\n    |\n443 |                 Some(value) => OnceCell::with_value(value.clone()),\n    |                 ^^^^ not found in this scope\n    |\nhelp: consider importing this tuple variant\n    |\n386 +     use core::option::Option::Some;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this tuple variant",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 12853,
                        "byte_start": 12853,
                        "column_end": 5,
                        "column_start": 5,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 386,
                        "line_start": 386,
                        "suggested_replacement": "use core::option::Option::Some;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 5,
                            "highlight_start": 5,
                            "text": "    use core::{"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0531",
                  "explanation": "An unknown tuple struct/variant has been used.\n\nErroneous code example:\n\n```compile_fail,E0531\nlet Type(x) = Type(12); // error!\nmatch Bar(12) {\n    Bar(x) => {} // error!\n    _ => {}\n}\n```\n\nIn most cases, it's either a forgotten import or a typo. However, let's look at\nhow you can have such a type:\n\n```edition2018\nstruct Type(u32); // this is a tuple struct\n\nenum Foo {\n    Bar(u32), // this is a tuple variant\n}\n\nuse Foo::*; // To use Foo's variant directly, we need to import them in\n            // the scope.\n```\n\nEither way, it should work fine with our previous code:\n\n```edition2018\nstruct Type(u32);\n\nenum Foo {\n    Bar(u32),\n}\nuse Foo::*;\n\nlet Type(x) = Type(12); // ok!\nmatch Type(12) {\n    Type(x) => {} // ok!\n    _ => {}\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find tuple struct or tuple variant `Some` in this scope",
                "spans": [
                  {
                    "byte_end": 14677,
                    "byte_start": 14673,
                    "column_end": 21,
                    "column_start": 17,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 443,
                    "line_start": 443,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 21,
                        "highlight_start": 17,
                        "text": "                Some(value) => OnceCell::with_value(value.clone()),"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#once_cell@1.18.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "once_cell",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0531]: cannot find tuple struct or tuple variant `Some` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs:450:18\n    |\n450 |                 (Some(this), Some(source)) => this.clone_from(source),\n    |                  ^^^^ not found in this scope\n    |\nhelp: consider importing this tuple variant\n    |\n386 +     use core::option::Option::Some;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this tuple variant",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 12853,
                        "byte_start": 12853,
                        "column_end": 5,
                        "column_start": 5,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 386,
                        "line_start": 386,
                        "suggested_replacement": "use core::option::Option::Some;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 5,
                            "highlight_start": 5,
                            "text": "    use core::{"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0531",
                  "explanation": "An unknown tuple struct/variant has been used.\n\nErroneous code example:\n\n```compile_fail,E0531\nlet Type(x) = Type(12); // error!\nmatch Bar(12) {\n    Bar(x) => {} // error!\n    _ => {}\n}\n```\n\nIn most cases, it's either a forgotten import or a typo. However, let's look at\nhow you can have such a type:\n\n```edition2018\nstruct Type(u32); // this is a tuple struct\n\nenum Foo {\n    Bar(u32), // this is a tuple variant\n}\n\nuse Foo::*; // To use Foo's variant directly, we need to import them in\n            // the scope.\n```\n\nEither way, it should work fine with our previous code:\n\n```edition2018\nstruct Type(u32);\n\nenum Foo {\n    Bar(u32),\n}\nuse Foo::*;\n\nlet Type(x) = Type(12); // ok!\nmatch Type(12) {\n    Type(x) => {} // ok!\n    _ => {}\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find tuple struct or tuple variant `Some` in this scope",
                "spans": [
                  {
                    "byte_end": 14913,
                    "byte_start": 14909,
                    "column_end": 22,
                    "column_start": 18,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 450,
                    "line_start": 450,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 22,
                        "highlight_start": 18,
                        "text": "                (Some(this), Some(source)) => this.clone_from(source),"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#once_cell@1.18.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "once_cell",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0531]: cannot find tuple struct or tuple variant `Some` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs:450:30\n    |\n450 |                 (Some(this), Some(source)) => this.clone_from(source),\n    |                              ^^^^ not found in this scope\n    |\nhelp: consider importing this tuple variant\n    |\n386 +     use core::option::Option::Some;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this tuple variant",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 12853,
                        "byte_start": 12853,
                        "column_end": 5,
                        "column_start": 5,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 386,
                        "line_start": 386,
                        "suggested_replacement": "use core::option::Option::Some;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 5,
                            "highlight_start": 5,
                            "text": "    use core::{"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0531",
                  "explanation": "An unknown tuple struct/variant has been used.\n\nErroneous code example:\n\n```compile_fail,E0531\nlet Type(x) = Type(12); // error!\nmatch Bar(12) {\n    Bar(x) => {} // error!\n    _ => {}\n}\n```\n\nIn most cases, it's either a forgotten import or a typo. However, let's look at\nhow you can have such a type:\n\n```edition2018\nstruct Type(u32); // this is a tuple struct\n\nenum Foo {\n    Bar(u32), // this is a tuple variant\n}\n\nuse Foo::*; // To use Foo's variant directly, we need to import them in\n            // the scope.\n```\n\nEither way, it should work fine with our previous code:\n\n```edition2018\nstruct Type(u32);\n\nenum Foo {\n    Bar(u32),\n}\nuse Foo::*;\n\nlet Type(x) = Type(12); // ok!\nmatch Type(12) {\n    Type(x) => {} // ok!\n    _ => {}\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find tuple struct or tuple variant `Some` in this scope",
                "spans": [
                  {
                    "byte_end": 14925,
                    "byte_start": 14921,
                    "column_end": 34,
                    "column_start": 30,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 450,
                    "line_start": 450,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 34,
                        "highlight_start": 30,
                        "text": "                (Some(this), Some(source)) => this.clone_from(source),"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#once_cell@1.18.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "once_cell",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0405]: cannot find trait `PartialEq` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs:456:24\n    |\n456 |     impl<T: PartialEq> PartialEq for OnceCell<T> {\n    |                        ^^^^^^^^^ not found in this scope\n    |\nhelp: consider importing this trait\n    |\n386 +     use core::cmp::PartialEq;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this trait",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 12853,
                        "byte_start": 12853,
                        "column_end": 5,
                        "column_start": 5,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 386,
                        "line_start": 386,
                        "suggested_replacement": "use core::cmp::PartialEq;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 5,
                            "highlight_start": 5,
                            "text": "    use core::{"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0405",
                  "explanation": "The code refers to a trait that is not in scope.\n\nErroneous code example:\n\n```compile_fail,E0405\nstruct Foo;\n\nimpl SomeTrait for Foo {} // error: trait `SomeTrait` is not in scope\n```\n\nPlease verify that the name of the trait wasn't misspelled and ensure that it\nwas imported. Example:\n\n```\n# #[cfg(for_demonstration_only)]\n// solution 1:\nuse some_file::SomeTrait;\n\n// solution 2:\ntrait SomeTrait {\n    // some functions\n}\n\nstruct Foo;\n\nimpl SomeTrait for Foo { // ok!\n    // implements functions\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find trait `PartialEq` in this scope",
                "spans": [
                  {
                    "byte_end": 15071,
                    "byte_start": 15062,
                    "column_end": 33,
                    "column_start": 24,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 456,
                    "line_start": 456,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 33,
                        "highlight_start": 24,
                        "text": "    impl<T: PartialEq> PartialEq for OnceCell<T> {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#once_cell@1.18.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "once_cell",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0405]: cannot find trait `PartialEq` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs:456:13\n    |\n456 |     impl<T: PartialEq> PartialEq for OnceCell<T> {\n    |             ^^^^^^^^^ not found in this scope\n    |\nhelp: consider importing this trait\n    |\n386 +     use core::cmp::PartialEq;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this trait",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 12853,
                        "byte_start": 12853,
                        "column_end": 5,
                        "column_start": 5,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 386,
                        "line_start": 386,
                        "suggested_replacement": "use core::cmp::PartialEq;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 5,
                            "highlight_start": 5,
                            "text": "    use core::{"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0405",
                  "explanation": "The code refers to a trait that is not in scope.\n\nErroneous code example:\n\n```compile_fail,E0405\nstruct Foo;\n\nimpl SomeTrait for Foo {} // error: trait `SomeTrait` is not in scope\n```\n\nPlease verify that the name of the trait wasn't misspelled and ensure that it\nwas imported. Example:\n\n```\n# #[cfg(for_demonstration_only)]\n// solution 1:\nuse some_file::SomeTrait;\n\n// solution 2:\ntrait SomeTrait {\n    // some functions\n}\n\nstruct Foo;\n\nimpl SomeTrait for Foo { // ok!\n    // implements functions\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find trait `PartialEq` in this scope",
                "spans": [
                  {
                    "byte_end": 15060,
                    "byte_start": 15051,
                    "column_end": 22,
                    "column_start": 13,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 456,
                    "line_start": 456,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 22,
                        "highlight_start": 13,
                        "text": "    impl<T: PartialEq> PartialEq for OnceCell<T> {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#once_cell@1.18.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "once_cell",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0405]: cannot find trait `Eq` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs:462:17\n    |\n462 |     impl<T: Eq> Eq for OnceCell<T> {}\n    |                 ^^ not found in this scope\n    |\nhelp: consider importing this trait\n    |\n386 +     use core::cmp::Eq;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this trait",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 12853,
                        "byte_start": 12853,
                        "column_end": 5,
                        "column_start": 5,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 386,
                        "line_start": 386,
                        "suggested_replacement": "use core::cmp::Eq;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 5,
                            "highlight_start": 5,
                            "text": "    use core::{"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0405",
                  "explanation": "The code refers to a trait that is not in scope.\n\nErroneous code example:\n\n```compile_fail,E0405\nstruct Foo;\n\nimpl SomeTrait for Foo {} // error: trait `SomeTrait` is not in scope\n```\n\nPlease verify that the name of the trait wasn't misspelled and ensure that it\nwas imported. Example:\n\n```\n# #[cfg(for_demonstration_only)]\n// solution 1:\nuse some_file::SomeTrait;\n\n// solution 2:\ntrait SomeTrait {\n    // some functions\n}\n\nstruct Foo;\n\nimpl SomeTrait for Foo { // ok!\n    // implements functions\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find trait `Eq` in this scope",
                "spans": [
                  {
                    "byte_end": 15208,
                    "byte_start": 15206,
                    "column_end": 19,
                    "column_start": 17,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 462,
                    "line_start": 462,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 19,
                        "highlight_start": 17,
                        "text": "    impl<T: Eq> Eq for OnceCell<T> {}"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#once_cell@1.18.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "once_cell",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0405]: cannot find trait `Eq` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs:462:13\n    |\n462 |     impl<T: Eq> Eq for OnceCell<T> {}\n    |             ^^ not found in this scope\n    |\nhelp: consider importing this trait\n    |\n386 +     use core::cmp::Eq;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this trait",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 12853,
                        "byte_start": 12853,
                        "column_end": 5,
                        "column_start": 5,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 386,
                        "line_start": 386,
                        "suggested_replacement": "use core::cmp::Eq;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 5,
                            "highlight_start": 5,
                            "text": "    use core::{"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0405",
                  "explanation": "The code refers to a trait that is not in scope.\n\nErroneous code example:\n\n```compile_fail,E0405\nstruct Foo;\n\nimpl SomeTrait for Foo {} // error: trait `SomeTrait` is not in scope\n```\n\nPlease verify that the name of the trait wasn't misspelled and ensure that it\nwas imported. Example:\n\n```\n# #[cfg(for_demonstration_only)]\n// solution 1:\nuse some_file::SomeTrait;\n\n// solution 2:\ntrait SomeTrait {\n    // some functions\n}\n\nstruct Foo;\n\nimpl SomeTrait for Foo { // ok!\n    // implements functions\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find trait `Eq` in this scope",
                "spans": [
                  {
                    "byte_end": 15204,
                    "byte_start": 15202,
                    "column_end": 15,
                    "column_start": 13,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 462,
                    "line_start": 462,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 15,
                        "highlight_start": 13,
                        "text": "    impl<T: Eq> Eq for OnceCell<T> {}"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#once_cell@1.18.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "once_cell",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0405]: cannot find trait `From` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs:464:13\n    |\n464 |     impl<T> From<T> for OnceCell<T> {\n    |             ^^^^ not found in this scope\n    |\nhelp: consider importing this trait\n    |\n386 +     use core::convert::From;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this trait",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 12853,
                        "byte_start": 12853,
                        "column_end": 5,
                        "column_start": 5,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 386,
                        "line_start": 386,
                        "suggested_replacement": "use core::convert::From;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 5,
                            "highlight_start": 5,
                            "text": "    use core::{"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0405",
                  "explanation": "The code refers to a trait that is not in scope.\n\nErroneous code example:\n\n```compile_fail,E0405\nstruct Foo;\n\nimpl SomeTrait for Foo {} // error: trait `SomeTrait` is not in scope\n```\n\nPlease verify that the name of the trait wasn't misspelled and ensure that it\nwas imported. Example:\n\n```\n# #[cfg(for_demonstration_only)]\n// solution 1:\nuse some_file::SomeTrait;\n\n// solution 2:\ntrait SomeTrait {\n    // some functions\n}\n\nstruct Foo;\n\nimpl SomeTrait for Foo { // ok!\n    // implements functions\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find trait `From` in this scope",
                "spans": [
                  {
                    "byte_end": 15245,
                    "byte_start": 15241,
                    "column_end": 17,
                    "column_start": 13,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 464,
                    "line_start": 464,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 17,
                        "highlight_start": 13,
                        "text": "    impl<T> From<T> for OnceCell<T> {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#once_cell@1.18.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "once_cell",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0425]: cannot find value `None` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs:473:47\n    |\n473 |             OnceCell { inner: UnsafeCell::new(None) }\n    |                                               ^^^^ not found in this scope\n    |\nhelp: consider importing this unit variant\n    |\n386 +     use core::option::Option::None;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this unit variant",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 12853,
                        "byte_start": 12853,
                        "column_end": 5,
                        "column_start": 5,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 386,
                        "line_start": 386,
                        "suggested_replacement": "use core::option::Option::None;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 5,
                            "highlight_start": 5,
                            "text": "    use core::{"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0425",
                  "explanation": "An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"
                },
                "level": "error",
                "message": "cannot find value `None` in this scope",
                "spans": [
                  {
                    "byte_end": 15518,
                    "byte_start": 15514,
                    "column_end": 51,
                    "column_start": 47,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 473,
                    "line_start": 473,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 51,
                        "highlight_start": 47,
                        "text": "            OnceCell { inner: UnsafeCell::new(None) }"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#once_cell@1.18.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "once_cell",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0425]: cannot find function, tuple struct or tuple variant `Some` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs:478:47\n    |\n478 |             OnceCell { inner: UnsafeCell::new(Some(value)) }\n    |                                               ^^^^ not found in this scope\n    |\nhelp: consider importing this tuple variant\n    |\n386 +     use core::option::Option::Some;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this tuple variant",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 12853,
                        "byte_start": 12853,
                        "column_end": 5,
                        "column_start": 5,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 386,
                        "line_start": 386,
                        "suggested_replacement": "use core::option::Option::Some;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 5,
                            "highlight_start": 5,
                            "text": "    use core::{"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0425",
                  "explanation": "An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"
                },
                "level": "error",
                "message": "cannot find function, tuple struct or tuple variant `Some` in this scope",
                "spans": [
                  {
                    "byte_end": 15686,
                    "byte_start": 15682,
                    "column_end": 51,
                    "column_start": 47,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 478,
                    "line_start": 478,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 51,
                        "highlight_start": 47,
                        "text": "            OnceCell { inner: UnsafeCell::new(Some(value)) }"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#once_cell@1.18.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "once_cell",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0412]: cannot find type `Option` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs:485:30\n    |\n485 |         pub fn get(&self) -> Option<&T> {\n    |                              ^^^^^^ not found in this scope\n    |\nhelp: consider importing this enum\n    |\n386 +     use core::option::Option;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this enum",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 12853,
                        "byte_start": 12853,
                        "column_end": 5,
                        "column_start": 5,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 386,
                        "line_start": 386,
                        "suggested_replacement": "use core::option::Option;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 5,
                            "highlight_start": 5,
                            "text": "    use core::{"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0412",
                  "explanation": "A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"
                },
                "level": "error",
                "message": "cannot find type `Option` in this scope",
                "spans": [
                  {
                    "byte_end": 15876,
                    "byte_start": 15870,
                    "column_end": 36,
                    "column_start": 30,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 485,
                    "line_start": 485,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 36,
                        "highlight_start": 30,
                        "text": "        pub fn get(&self) -> Option<&T> {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#once_cell@1.18.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "once_cell",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0412]: cannot find type `Option` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs:510:38\n    |\n510 |         pub fn get_mut(&mut self) -> Option<&mut T> {\n    |                                      ^^^^^^ not found in this scope\n    |\nhelp: consider importing this enum\n    |\n386 +     use core::option::Option;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this enum",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 12853,
                        "byte_start": 12853,
                        "column_end": 5,
                        "column_start": 5,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 386,
                        "line_start": 386,
                        "suggested_replacement": "use core::option::Option;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 5,
                            "highlight_start": 5,
                            "text": "    use core::{"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0412",
                  "explanation": "A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"
                },
                "level": "error",
                "message": "cannot find type `Option` in this scope",
                "spans": [
                  {
                    "byte_end": 16945,
                    "byte_start": 16939,
                    "column_end": 44,
                    "column_start": 38,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 510,
                    "line_start": 510,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 44,
                        "highlight_start": 38,
                        "text": "        pub fn get_mut(&mut self) -> Option<&mut T> {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#once_cell@1.18.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "once_cell",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0412]: cannot find type `Result` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs:532:40\n    |\n532 |         pub fn set(&self, value: T) -> Result<(), T> {\n    |                                        ^^^^^^ not found in this scope\n    |\nhelp: consider importing one of these items\n    |\n386 +     use crate::unsync::fmt::Result;\n    |\n386 +     use core::fmt::Result;\n    |\n386 +     use core::result::Result;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing one of these items",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 12853,
                        "byte_start": 12853,
                        "column_end": 5,
                        "column_start": 5,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 386,
                        "line_start": 386,
                        "suggested_replacement": "use crate::unsync::fmt::Result;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 5,
                            "highlight_start": 5,
                            "text": "    use core::{"
                          }
                        ]
                      },
                      {
                        "byte_end": 12853,
                        "byte_start": 12853,
                        "column_end": 5,
                        "column_start": 5,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 386,
                        "line_start": 386,
                        "suggested_replacement": "use core::fmt::Result;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 5,
                            "highlight_start": 5,
                            "text": "    use core::{"
                          }
                        ]
                      },
                      {
                        "byte_end": 12853,
                        "byte_start": 12853,
                        "column_end": 5,
                        "column_start": 5,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 386,
                        "line_start": 386,
                        "suggested_replacement": "use core::result::Result;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 5,
                            "highlight_start": 5,
                            "text": "    use core::{"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0412",
                  "explanation": "A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"
                },
                "level": "error",
                "message": "cannot find type `Result` in this scope",
                "spans": [
                  {
                    "byte_end": 17646,
                    "byte_start": 17640,
                    "column_end": 46,
                    "column_start": 40,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 532,
                    "line_start": 532,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 46,
                        "highlight_start": 40,
                        "text": "        pub fn set(&self, value: T) -> Result<(), T> {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#once_cell@1.18.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "once_cell",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0531]: cannot find tuple struct or tuple variant `Ok` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs:534:17\n    |\n534 |                 Ok(_) => Ok(()),\n    |                 ^^ not found in this scope\n    |\nhelp: consider importing this tuple variant\n    |\n386 +     use core::result::Result::Ok;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this tuple variant",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 12853,
                        "byte_start": 12853,
                        "column_end": 5,
                        "column_start": 5,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 386,
                        "line_start": 386,
                        "suggested_replacement": "use core::result::Result::Ok;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 5,
                            "highlight_start": 5,
                            "text": "    use core::{"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0531",
                  "explanation": "An unknown tuple struct/variant has been used.\n\nErroneous code example:\n\n```compile_fail,E0531\nlet Type(x) = Type(12); // error!\nmatch Bar(12) {\n    Bar(x) => {} // error!\n    _ => {}\n}\n```\n\nIn most cases, it's either a forgotten import or a typo. However, let's look at\nhow you can have such a type:\n\n```edition2018\nstruct Type(u32); // this is a tuple struct\n\nenum Foo {\n    Bar(u32), // this is a tuple variant\n}\n\nuse Foo::*; // To use Foo's variant directly, we need to import them in\n            // the scope.\n```\n\nEither way, it should work fine with our previous code:\n\n```edition2018\nstruct Type(u32);\n\nenum Foo {\n    Bar(u32),\n}\nuse Foo::*;\n\nlet Type(x) = Type(12); // ok!\nmatch Type(12) {\n    Type(x) => {} // ok!\n    _ => {}\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find tuple struct or tuple variant `Ok` in this scope",
                "spans": [
                  {
                    "byte_end": 17717,
                    "byte_start": 17715,
                    "column_end": 19,
                    "column_start": 17,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 534,
                    "line_start": 534,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 19,
                        "highlight_start": 17,
                        "text": "                Ok(_) => Ok(()),"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#once_cell@1.18.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "once_cell",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0425]: cannot find function, tuple struct or tuple variant `Ok` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs:534:26\n    |\n534 |                 Ok(_) => Ok(()),\n    |                          ^^ not found in this scope\n    |\nhelp: consider importing this tuple variant\n    |\n386 +     use core::result::Result::Ok;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this tuple variant",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 12853,
                        "byte_start": 12853,
                        "column_end": 5,
                        "column_start": 5,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 386,
                        "line_start": 386,
                        "suggested_replacement": "use core::result::Result::Ok;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 5,
                            "highlight_start": 5,
                            "text": "    use core::{"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0425",
                  "explanation": "An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"
                },
                "level": "error",
                "message": "cannot find function, tuple struct or tuple variant `Ok` in this scope",
                "spans": [
                  {
                    "byte_end": 17726,
                    "byte_start": 17724,
                    "column_end": 28,
                    "column_start": 26,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 534,
                    "line_start": 534,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 28,
                        "highlight_start": 26,
                        "text": "                Ok(_) => Ok(()),"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#once_cell@1.18.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "once_cell",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0531]: cannot find tuple struct or tuple variant `Err` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs:535:17\n    |\n535 |                 Err((_, value)) => Err(value),\n    |                 ^^^ not found in this scope\n    |\nhelp: consider importing this tuple variant\n    |\n386 +     use core::result::Result::Err;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this tuple variant",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 12853,
                        "byte_start": 12853,
                        "column_end": 5,
                        "column_start": 5,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 386,
                        "line_start": 386,
                        "suggested_replacement": "use core::result::Result::Err;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 5,
                            "highlight_start": 5,
                            "text": "    use core::{"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0531",
                  "explanation": "An unknown tuple struct/variant has been used.\n\nErroneous code example:\n\n```compile_fail,E0531\nlet Type(x) = Type(12); // error!\nmatch Bar(12) {\n    Bar(x) => {} // error!\n    _ => {}\n}\n```\n\nIn most cases, it's either a forgotten import or a typo. However, let's look at\nhow you can have such a type:\n\n```edition2018\nstruct Type(u32); // this is a tuple struct\n\nenum Foo {\n    Bar(u32), // this is a tuple variant\n}\n\nuse Foo::*; // To use Foo's variant directly, we need to import them in\n            // the scope.\n```\n\nEither way, it should work fine with our previous code:\n\n```edition2018\nstruct Type(u32);\n\nenum Foo {\n    Bar(u32),\n}\nuse Foo::*;\n\nlet Type(x) = Type(12); // ok!\nmatch Type(12) {\n    Type(x) => {} // ok!\n    _ => {}\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find tuple struct or tuple variant `Err` in this scope",
                "spans": [
                  {
                    "byte_end": 17751,
                    "byte_start": 17748,
                    "column_end": 20,
                    "column_start": 17,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 535,
                    "line_start": 535,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 20,
                        "highlight_start": 17,
                        "text": "                Err((_, value)) => Err(value),"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#once_cell@1.18.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "once_cell",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0425]: cannot find function, tuple struct or tuple variant `Err` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs:535:36\n    |\n535 |                 Err((_, value)) => Err(value),\n    |                                    ^^^ not found in this scope\n    |\nhelp: consider importing this tuple variant\n    |\n386 +     use core::result::Result::Err;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this tuple variant",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 12853,
                        "byte_start": 12853,
                        "column_end": 5,
                        "column_start": 5,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 386,
                        "line_start": 386,
                        "suggested_replacement": "use core::result::Result::Err;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 5,
                            "highlight_start": 5,
                            "text": "    use core::{"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0425",
                  "explanation": "An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"
                },
                "level": "error",
                "message": "cannot find function, tuple struct or tuple variant `Err` in this scope",
                "spans": [
                  {
                    "byte_end": 17770,
                    "byte_start": 17767,
                    "column_end": 39,
                    "column_start": 36,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 535,
                    "line_start": 535,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 39,
                        "highlight_start": 36,
                        "text": "                Err((_, value)) => Err(value),"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#once_cell@1.18.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "once_cell",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0412]: cannot find type `Result` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs:553:47\n    |\n553 |         pub fn try_insert(&self, value: T) -> Result<&T, (&T, T)> {\n    |                                               ^^^^^^ not found in this scope\n    |\nhelp: consider importing one of these items\n    |\n386 +     use crate::unsync::fmt::Result;\n    |\n386 +     use core::fmt::Result;\n    |\n386 +     use core::result::Result;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing one of these items",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 12853,
                        "byte_start": 12853,
                        "column_end": 5,
                        "column_start": 5,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 386,
                        "line_start": 386,
                        "suggested_replacement": "use crate::unsync::fmt::Result;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 5,
                            "highlight_start": 5,
                            "text": "    use core::{"
                          }
                        ]
                      },
                      {
                        "byte_end": 12853,
                        "byte_start": 12853,
                        "column_end": 5,
                        "column_start": 5,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 386,
                        "line_start": 386,
                        "suggested_replacement": "use core::fmt::Result;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 5,
                            "highlight_start": 5,
                            "text": "    use core::{"
                          }
                        ]
                      },
                      {
                        "byte_end": 12853,
                        "byte_start": 12853,
                        "column_end": 5,
                        "column_start": 5,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 386,
                        "line_start": 386,
                        "suggested_replacement": "use core::result::Result;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 5,
                            "highlight_start": 5,
                            "text": "    use core::{"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0412",
                  "explanation": "A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"
                },
                "level": "error",
                "message": "cannot find type `Result` in this scope",
                "spans": [
                  {
                    "byte_end": 18335,
                    "byte_start": 18329,
                    "column_end": 53,
                    "column_start": 47,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 553,
                    "line_start": 553,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 53,
                        "highlight_start": 47,
                        "text": "        pub fn try_insert(&self, value: T) -> Result<&T, (&T, T)> {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#once_cell@1.18.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "once_cell",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0531]: cannot find tuple struct or tuple variant `Some` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs:554:20\n    |\n554 |             if let Some(old) = self.get() {\n    |                    ^^^^ not found in this scope\n    |\nhelp: consider importing this tuple variant\n    |\n386 +     use core::option::Option::Some;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this tuple variant",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 12853,
                        "byte_start": 12853,
                        "column_end": 5,
                        "column_start": 5,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 386,
                        "line_start": 386,
                        "suggested_replacement": "use core::option::Option::Some;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 5,
                            "highlight_start": 5,
                            "text": "    use core::{"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0531",
                  "explanation": "An unknown tuple struct/variant has been used.\n\nErroneous code example:\n\n```compile_fail,E0531\nlet Type(x) = Type(12); // error!\nmatch Bar(12) {\n    Bar(x) => {} // error!\n    _ => {}\n}\n```\n\nIn most cases, it's either a forgotten import or a typo. However, let's look at\nhow you can have such a type:\n\n```edition2018\nstruct Type(u32); // this is a tuple struct\n\nenum Foo {\n    Bar(u32), // this is a tuple variant\n}\n\nuse Foo::*; // To use Foo's variant directly, we need to import them in\n            // the scope.\n```\n\nEither way, it should work fine with our previous code:\n\n```edition2018\nstruct Type(u32);\n\nenum Foo {\n    Bar(u32),\n}\nuse Foo::*;\n\nlet Type(x) = Type(12); // ok!\nmatch Type(12) {\n    Type(x) => {} // ok!\n    _ => {}\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find tuple struct or tuple variant `Some` in this scope",
                "spans": [
                  {
                    "byte_end": 18374,
                    "byte_start": 18370,
                    "column_end": 24,
                    "column_start": 20,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 554,
                    "line_start": 554,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 24,
                        "highlight_start": 20,
                        "text": "            if let Some(old) = self.get() {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#once_cell@1.18.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "once_cell",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0425]: cannot find function, tuple struct or tuple variant `Err` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs:555:24\n    |\n555 |                 return Err((old, value));\n    |                        ^^^ not found in this scope\n    |\nhelp: consider importing this tuple variant\n    |\n386 +     use core::result::Result::Err;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this tuple variant",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 12853,
                        "byte_start": 12853,
                        "column_end": 5,
                        "column_start": 5,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 386,
                        "line_start": 386,
                        "suggested_replacement": "use core::result::Result::Err;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 5,
                            "highlight_start": 5,
                            "text": "    use core::{"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0425",
                  "explanation": "An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"
                },
                "level": "error",
                "message": "cannot find function, tuple struct or tuple variant `Err` in this scope",
                "spans": [
                  {
                    "byte_end": 18421,
                    "byte_start": 18418,
                    "column_end": 27,
                    "column_start": 24,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 555,
                    "line_start": 555,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 27,
                        "highlight_start": 24,
                        "text": "                return Err((old, value));"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#once_cell@1.18.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "once_cell",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0425]: cannot find function, tuple struct or tuple variant `Some` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs:563:21\n    |\n563 |             *slot = Some(value);\n    |                     ^^^^ not found in this scope\n    |\nhelp: consider importing this tuple variant\n    |\n386 +     use core::option::Option::Some;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this tuple variant",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 12853,
                        "byte_start": 12853,
                        "column_end": 5,
                        "column_start": 5,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 386,
                        "line_start": 386,
                        "suggested_replacement": "use core::option::Option::Some;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 5,
                            "highlight_start": 5,
                            "text": "    use core::{"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0425",
                  "explanation": "An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"
                },
                "level": "error",
                "message": "cannot find function, tuple struct or tuple variant `Some` in this scope",
                "spans": [
                  {
                    "byte_end": 18791,
                    "byte_start": 18787,
                    "column_end": 25,
                    "column_start": 21,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 563,
                    "line_start": 563,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 25,
                        "highlight_start": 21,
                        "text": "            *slot = Some(value);"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#once_cell@1.18.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "once_cell",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0425]: cannot find function, tuple struct or tuple variant `Ok` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs:564:13\n    |\n564 |             Ok(unsafe { slot.as_ref().unwrap_unchecked() })\n    |             ^^ not found in this scope\n    |\nhelp: consider importing this tuple variant\n    |\n386 +     use core::result::Result::Ok;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this tuple variant",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 12853,
                        "byte_start": 12853,
                        "column_end": 5,
                        "column_start": 5,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 386,
                        "line_start": 386,
                        "suggested_replacement": "use core::result::Result::Ok;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 5,
                            "highlight_start": 5,
                            "text": "    use core::{"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0425",
                  "explanation": "An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"
                },
                "level": "error",
                "message": "cannot find function, tuple struct or tuple variant `Ok` in this scope",
                "spans": [
                  {
                    "byte_end": 18814,
                    "byte_start": 18812,
                    "column_end": 15,
                    "column_start": 13,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 564,
                    "line_start": 564,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 15,
                        "highlight_start": 13,
                        "text": "            Ok(unsafe { slot.as_ref().unwrap_unchecked() })"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#once_cell@1.18.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "once_cell",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0405]: cannot find trait `FnOnce` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs:590:16\n    |\n590 |             F: FnOnce() -> T,\n    |                ^^^^^^ not found in this scope\n    |\nhelp: consider importing this trait\n    |\n386 +     use core::ops::FnOnce;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this trait",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 12853,
                        "byte_start": 12853,
                        "column_end": 5,
                        "column_start": 5,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 386,
                        "line_start": 386,
                        "suggested_replacement": "use core::ops::FnOnce;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 5,
                            "highlight_start": 5,
                            "text": "    use core::{"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0405",
                  "explanation": "The code refers to a trait that is not in scope.\n\nErroneous code example:\n\n```compile_fail,E0405\nstruct Foo;\n\nimpl SomeTrait for Foo {} // error: trait `SomeTrait` is not in scope\n```\n\nPlease verify that the name of the trait wasn't misspelled and ensure that it\nwas imported. Example:\n\n```\n# #[cfg(for_demonstration_only)]\n// solution 1:\nuse some_file::SomeTrait;\n\n// solution 2:\ntrait SomeTrait {\n    // some functions\n}\n\nstruct Foo;\n\nimpl SomeTrait for Foo { // ok!\n    // implements functions\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find trait `FnOnce` in this scope",
                "spans": [
                  {
                    "byte_end": 19687,
                    "byte_start": 19681,
                    "column_end": 22,
                    "column_start": 16,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 590,
                    "line_start": 590,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 22,
                        "highlight_start": 16,
                        "text": "            F: FnOnce() -> T,"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#once_cell@1.18.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "once_cell",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0425]: cannot find function, tuple struct or tuple variant `Ok` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs:593:43\n    |\n593 |             match self.get_or_try_init(|| Ok::<T, Void>(f())) {\n    |                                           ^^ not found in this scope\n    |\nhelp: consider importing this tuple variant\n    |\n386 +     use core::result::Result::Ok;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this tuple variant",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 12853,
                        "byte_start": 12853,
                        "column_end": 5,
                        "column_start": 5,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 386,
                        "line_start": 386,
                        "suggested_replacement": "use core::result::Result::Ok;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 5,
                            "highlight_start": 5,
                            "text": "    use core::{"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0425",
                  "explanation": "An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"
                },
                "level": "error",
                "message": "cannot find function, tuple struct or tuple variant `Ok` in this scope",
                "spans": [
                  {
                    "byte_end": 19775,
                    "byte_start": 19773,
                    "column_end": 45,
                    "column_start": 43,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 593,
                    "line_start": 593,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 45,
                        "highlight_start": 43,
                        "text": "            match self.get_or_try_init(|| Ok::<T, Void>(f())) {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#once_cell@1.18.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "once_cell",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0531]: cannot find tuple struct or tuple variant `Ok` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs:594:17\n    |\n594 |                 Ok(val) => val,\n    |                 ^^ not found in this scope\n    |\nhelp: consider importing this tuple variant\n    |\n386 +     use core::result::Result::Ok;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this tuple variant",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 12853,
                        "byte_start": 12853,
                        "column_end": 5,
                        "column_start": 5,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 386,
                        "line_start": 386,
                        "suggested_replacement": "use core::result::Result::Ok;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 5,
                            "highlight_start": 5,
                            "text": "    use core::{"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0531",
                  "explanation": "An unknown tuple struct/variant has been used.\n\nErroneous code example:\n\n```compile_fail,E0531\nlet Type(x) = Type(12); // error!\nmatch Bar(12) {\n    Bar(x) => {} // error!\n    _ => {}\n}\n```\n\nIn most cases, it's either a forgotten import or a typo. However, let's look at\nhow you can have such a type:\n\n```edition2018\nstruct Type(u32); // this is a tuple struct\n\nenum Foo {\n    Bar(u32), // this is a tuple variant\n}\n\nuse Foo::*; // To use Foo's variant directly, we need to import them in\n            // the scope.\n```\n\nEither way, it should work fine with our previous code:\n\n```edition2018\nstruct Type(u32);\n\nenum Foo {\n    Bar(u32),\n}\nuse Foo::*;\n\nlet Type(x) = Type(12); // ok!\nmatch Type(12) {\n    Type(x) => {} // ok!\n    _ => {}\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find tuple struct or tuple variant `Ok` in this scope",
                "spans": [
                  {
                    "byte_end": 19813,
                    "byte_start": 19811,
                    "column_end": 19,
                    "column_start": 17,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 594,
                    "line_start": 594,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 19,
                        "highlight_start": 17,
                        "text": "                Ok(val) => val,"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#once_cell@1.18.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "once_cell",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0531]: cannot find tuple struct or tuple variant `Err` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs:595:17\n    |\n595 |                 Err(void) => match void {},\n    |                 ^^^ not found in this scope\n    |\nhelp: consider importing this tuple variant\n    |\n386 +     use core::result::Result::Err;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this tuple variant",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 12853,
                        "byte_start": 12853,
                        "column_end": 5,
                        "column_start": 5,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 386,
                        "line_start": 386,
                        "suggested_replacement": "use core::result::Result::Err;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 5,
                            "highlight_start": 5,
                            "text": "    use core::{"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0531",
                  "explanation": "An unknown tuple struct/variant has been used.\n\nErroneous code example:\n\n```compile_fail,E0531\nlet Type(x) = Type(12); // error!\nmatch Bar(12) {\n    Bar(x) => {} // error!\n    _ => {}\n}\n```\n\nIn most cases, it's either a forgotten import or a typo. However, let's look at\nhow you can have such a type:\n\n```edition2018\nstruct Type(u32); // this is a tuple struct\n\nenum Foo {\n    Bar(u32), // this is a tuple variant\n}\n\nuse Foo::*; // To use Foo's variant directly, we need to import them in\n            // the scope.\n```\n\nEither way, it should work fine with our previous code:\n\n```edition2018\nstruct Type(u32);\n\nenum Foo {\n    Bar(u32),\n}\nuse Foo::*;\n\nlet Type(x) = Type(12); // ok!\nmatch Type(12) {\n    Type(x) => {} // ok!\n    _ => {}\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find tuple struct or tuple variant `Err` in this scope",
                "spans": [
                  {
                    "byte_end": 19846,
                    "byte_start": 19843,
                    "column_end": 20,
                    "column_start": 17,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 595,
                    "line_start": 595,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 20,
                        "highlight_start": 17,
                        "text": "                Err(void) => match void {},"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#once_cell@1.18.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "once_cell",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0405]: cannot find trait `FnOnce` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs:626:16\n    |\n626 |             F: FnOnce() -> Result<T, E>,\n    |                ^^^^^^ not found in this scope\n    |\nhelp: consider importing this trait\n    |\n386 +     use core::ops::FnOnce;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this trait",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 12853,
                        "byte_start": 12853,
                        "column_end": 5,
                        "column_start": 5,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 386,
                        "line_start": 386,
                        "suggested_replacement": "use core::ops::FnOnce;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 5,
                            "highlight_start": 5,
                            "text": "    use core::{"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0405",
                  "explanation": "The code refers to a trait that is not in scope.\n\nErroneous code example:\n\n```compile_fail,E0405\nstruct Foo;\n\nimpl SomeTrait for Foo {} // error: trait `SomeTrait` is not in scope\n```\n\nPlease verify that the name of the trait wasn't misspelled and ensure that it\nwas imported. Example:\n\n```\n# #[cfg(for_demonstration_only)]\n// solution 1:\nuse some_file::SomeTrait;\n\n// solution 2:\ntrait SomeTrait {\n    // some functions\n}\n\nstruct Foo;\n\nimpl SomeTrait for Foo { // ok!\n    // implements functions\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find trait `FnOnce` in this scope",
                "spans": [
                  {
                    "byte_end": 20924,
                    "byte_start": 20918,
                    "column_end": 22,
                    "column_start": 16,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 626,
                    "line_start": 626,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 22,
                        "highlight_start": 16,
                        "text": "            F: FnOnce() -> Result<T, E>,"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#once_cell@1.18.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "once_cell",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0412]: cannot find type `Result` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs:626:28\n    |\n626 |             F: FnOnce() -> Result<T, E>,\n    |                            ^^^^^^ not found in this scope\n    |\nhelp: consider importing one of these items\n    |\n386 +     use crate::unsync::fmt::Result;\n    |\n386 +     use core::fmt::Result;\n    |\n386 +     use core::result::Result;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing one of these items",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 12853,
                        "byte_start": 12853,
                        "column_end": 5,
                        "column_start": 5,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 386,
                        "line_start": 386,
                        "suggested_replacement": "use crate::unsync::fmt::Result;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 5,
                            "highlight_start": 5,
                            "text": "    use core::{"
                          }
                        ]
                      },
                      {
                        "byte_end": 12853,
                        "byte_start": 12853,
                        "column_end": 5,
                        "column_start": 5,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 386,
                        "line_start": 386,
                        "suggested_replacement": "use core::fmt::Result;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 5,
                            "highlight_start": 5,
                            "text": "    use core::{"
                          }
                        ]
                      },
                      {
                        "byte_end": 12853,
                        "byte_start": 12853,
                        "column_end": 5,
                        "column_start": 5,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 386,
                        "line_start": 386,
                        "suggested_replacement": "use core::result::Result;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 5,
                            "highlight_start": 5,
                            "text": "    use core::{"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0412",
                  "explanation": "A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"
                },
                "level": "error",
                "message": "cannot find type `Result` in this scope",
                "spans": [
                  {
                    "byte_end": 20936,
                    "byte_start": 20930,
                    "column_end": 34,
                    "column_start": 28,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 626,
                    "line_start": 626,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 34,
                        "highlight_start": 28,
                        "text": "            F: FnOnce() -> Result<T, E>,"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#once_cell@1.18.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "once_cell",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0412]: cannot find type `Result` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs:624:54\n    |\n624 |         pub fn get_or_try_init<F, E>(&self, f: F) -> Result<&T, E>\n    |                                                      ^^^^^^ not found in this scope\n    |\nhelp: consider importing one of these items\n    |\n386 +     use crate::unsync::fmt::Result;\n    |\n386 +     use core::fmt::Result;\n    |\n386 +     use core::result::Result;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing one of these items",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 12853,
                        "byte_start": 12853,
                        "column_end": 5,
                        "column_start": 5,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 386,
                        "line_start": 386,
                        "suggested_replacement": "use crate::unsync::fmt::Result;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 5,
                            "highlight_start": 5,
                            "text": "    use core::{"
                          }
                        ]
                      },
                      {
                        "byte_end": 12853,
                        "byte_start": 12853,
                        "column_end": 5,
                        "column_start": 5,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 386,
                        "line_start": 386,
                        "suggested_replacement": "use core::fmt::Result;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 5,
                            "highlight_start": 5,
                            "text": "    use core::{"
                          }
                        ]
                      },
                      {
                        "byte_end": 12853,
                        "byte_start": 12853,
                        "column_end": 5,
                        "column_start": 5,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 386,
                        "line_start": 386,
                        "suggested_replacement": "use core::result::Result;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 5,
                            "highlight_start": 5,
                            "text": "    use core::{"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0412",
                  "explanation": "A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"
                },
                "level": "error",
                "message": "cannot find type `Result` in this scope",
                "spans": [
                  {
                    "byte_end": 20881,
                    "byte_start": 20875,
                    "column_end": 60,
                    "column_start": 54,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 624,
                    "line_start": 624,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 60,
                        "highlight_start": 54,
                        "text": "        pub fn get_or_try_init<F, E>(&self, f: F) -> Result<&T, E>"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#once_cell@1.18.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "once_cell",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0531]: cannot find tuple struct or tuple variant `Some` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs:628:20\n    |\n628 |             if let Some(val) = self.get() {\n    |                    ^^^^ not found in this scope\n    |\nhelp: consider importing this tuple variant\n    |\n386 +     use core::option::Option::Some;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this tuple variant",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 12853,
                        "byte_start": 12853,
                        "column_end": 5,
                        "column_start": 5,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 386,
                        "line_start": 386,
                        "suggested_replacement": "use core::option::Option::Some;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 5,
                            "highlight_start": 5,
                            "text": "    use core::{"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0531",
                  "explanation": "An unknown tuple struct/variant has been used.\n\nErroneous code example:\n\n```compile_fail,E0531\nlet Type(x) = Type(12); // error!\nmatch Bar(12) {\n    Bar(x) => {} // error!\n    _ => {}\n}\n```\n\nIn most cases, it's either a forgotten import or a typo. However, let's look at\nhow you can have such a type:\n\n```edition2018\nstruct Type(u32); // this is a tuple struct\n\nenum Foo {\n    Bar(u32), // this is a tuple variant\n}\n\nuse Foo::*; // To use Foo's variant directly, we need to import them in\n            // the scope.\n```\n\nEither way, it should work fine with our previous code:\n\n```edition2018\nstruct Type(u32);\n\nenum Foo {\n    Bar(u32),\n}\nuse Foo::*;\n\nlet Type(x) = Type(12); // ok!\nmatch Type(12) {\n    Type(x) => {} // ok!\n    _ => {}\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find tuple struct or tuple variant `Some` in this scope",
                "spans": [
                  {
                    "byte_end": 20977,
                    "byte_start": 20973,
                    "column_end": 24,
                    "column_start": 20,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 628,
                    "line_start": 628,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 24,
                        "highlight_start": 20,
                        "text": "            if let Some(val) = self.get() {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#once_cell@1.18.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "once_cell",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0425]: cannot find function, tuple struct or tuple variant `Ok` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs:629:24\n    |\n629 |                 return Ok(val);\n    |                        ^^ not found in this scope\n    |\nhelp: consider importing this tuple variant\n    |\n386 +     use core::result::Result::Ok;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this tuple variant",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 12853,
                        "byte_start": 12853,
                        "column_end": 5,
                        "column_start": 5,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 386,
                        "line_start": 386,
                        "suggested_replacement": "use core::result::Result::Ok;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 5,
                            "highlight_start": 5,
                            "text": "    use core::{"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0425",
                  "explanation": "An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"
                },
                "level": "error",
                "message": "cannot find function, tuple struct or tuple variant `Ok` in this scope",
                "spans": [
                  {
                    "byte_end": 21023,
                    "byte_start": 21021,
                    "column_end": 26,
                    "column_start": 24,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 629,
                    "line_start": 629,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 26,
                        "highlight_start": 24,
                        "text": "                return Ok(val);"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#once_cell@1.18.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "once_cell",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0425]: cannot find function, tuple struct or tuple variant `Ok` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs:637:13\n    |\n637 |             Ok(unsafe { self.get().unwrap_unchecked() })\n    |             ^^ not found in this scope\n    |\nhelp: consider importing this tuple variant\n    |\n386 +     use core::result::Result::Ok;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this tuple variant",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 12853,
                        "byte_start": 12853,
                        "column_end": 5,
                        "column_start": 5,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 386,
                        "line_start": 386,
                        "suggested_replacement": "use core::result::Result::Ok;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 5,
                            "highlight_start": 5,
                            "text": "    use core::{"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0425",
                  "explanation": "An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"
                },
                "level": "error",
                "message": "cannot find function, tuple struct or tuple variant `Ok` in this scope",
                "spans": [
                  {
                    "byte_end": 21461,
                    "byte_start": 21459,
                    "column_end": 15,
                    "column_start": 13,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 637,
                    "line_start": 637,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 15,
                        "highlight_start": 13,
                        "text": "            Ok(unsafe { self.get().unwrap_unchecked() })"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#once_cell@1.18.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "once_cell",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0412]: cannot find type `Option` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs:669:35\n    |\n669 |         pub fn take(&mut self) -> Option<T> {\n    |                                   ^^^^^^ not found in this scope\n    |\nhelp: consider importing this enum\n    |\n386 +     use core::option::Option;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this enum",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 12853,
                        "byte_start": 12853,
                        "column_end": 5,
                        "column_start": 5,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 386,
                        "line_start": 386,
                        "suggested_replacement": "use core::option::Option;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 5,
                            "highlight_start": 5,
                            "text": "    use core::{"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0412",
                  "explanation": "A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"
                },
                "level": "error",
                "message": "cannot find type `Option` in this scope",
                "spans": [
                  {
                    "byte_end": 22695,
                    "byte_start": 22689,
                    "column_end": 41,
                    "column_start": 35,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 669,
                    "line_start": 669,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 41,
                        "highlight_start": 35,
                        "text": "        pub fn take(&mut self) -> Option<T> {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#once_cell@1.18.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "once_cell",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0412]: cannot find type `Option` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs:689:36\n    |\n689 |         pub fn into_inner(self) -> Option<T> {\n    |                                    ^^^^^^ not found in this scope\n    |\nhelp: consider importing this enum\n    |\n386 +     use core::option::Option;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this enum",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 12853,
                        "byte_start": 12853,
                        "column_end": 5,
                        "column_start": 5,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 386,
                        "line_start": 386,
                        "suggested_replacement": "use core::option::Option;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 5,
                            "highlight_start": 5,
                            "text": "    use core::{"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0412",
                  "explanation": "A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"
                },
                "level": "error",
                "message": "cannot find type `Option` in this scope",
                "spans": [
                  {
                    "byte_end": 23339,
                    "byte_start": 23333,
                    "column_end": 42,
                    "column_start": 36,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 689,
                    "line_start": 689,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 42,
                        "highlight_start": 36,
                        "text": "        pub fn into_inner(self) -> Option<T> {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#once_cell@1.18.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "once_cell",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0412]: cannot find type `Option` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs:718:20\n    |\n718 |         init: Cell<Option<F>>,\n    |                    ^^^^^^ not found in this scope\n    |\nhelp: consider importing this enum\n    |\n386 +     use core::option::Option;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this enum",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 12853,
                        "byte_start": 12853,
                        "column_end": 5,
                        "column_start": 5,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 386,
                        "line_start": 386,
                        "suggested_replacement": "use core::option::Option;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 5,
                            "highlight_start": 5,
                            "text": "    use core::{"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0412",
                  "explanation": "A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"
                },
                "level": "error",
                "message": "cannot find type `Option` in this scope",
                "spans": [
                  {
                    "byte_end": 24127,
                    "byte_start": 24121,
                    "column_end": 26,
                    "column_start": 20,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 718,
                    "line_start": 718,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 26,
                        "highlight_start": 20,
                        "text": "        init: Cell<Option<F>>,"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#once_cell@1.18.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "once_cell",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0425]: cannot find function, tuple struct or tuple variant `Some` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs:745:59\n    |\n745 |             Lazy { cell: OnceCell::new(), init: Cell::new(Some(init)) }\n    |                                                           ^^^^ not found in this scope\n    |\nhelp: consider importing this tuple variant\n    |\n386 +     use core::option::Option::Some;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this tuple variant",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 12853,
                        "byte_start": 12853,
                        "column_end": 5,
                        "column_start": 5,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 386,
                        "line_start": 386,
                        "suggested_replacement": "use core::option::Option::Some;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 5,
                            "highlight_start": 5,
                            "text": "    use core::{"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0425",
                  "explanation": "An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"
                },
                "level": "error",
                "message": "cannot find function, tuple struct or tuple variant `Some` in this scope",
                "spans": [
                  {
                    "byte_end": 25023,
                    "byte_start": 25019,
                    "column_end": 63,
                    "column_start": 59,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 745,
                    "line_start": 745,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 63,
                        "highlight_start": 59,
                        "text": "            Lazy { cell: OnceCell::new(), init: Cell::new(Some(init)) }"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#once_cell@1.18.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "once_cell",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0412]: cannot find type `Result` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs:751:48\n    |\n751 |         pub fn into_value(this: Lazy<T, F>) -> Result<T, F> {\n    |                                                ^^^^^^ not found in this scope\n    |\nhelp: consider importing one of these items\n    |\n386 +     use crate::unsync::fmt::Result;\n    |\n386 +     use core::fmt::Result;\n    |\n386 +     use core::result::Result;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing one of these items",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 12853,
                        "byte_start": 12853,
                        "column_end": 5,
                        "column_start": 5,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 386,
                        "line_start": 386,
                        "suggested_replacement": "use crate::unsync::fmt::Result;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 5,
                            "highlight_start": 5,
                            "text": "    use core::{"
                          }
                        ]
                      },
                      {
                        "byte_end": 12853,
                        "byte_start": 12853,
                        "column_end": 5,
                        "column_start": 5,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 386,
                        "line_start": 386,
                        "suggested_replacement": "use core::fmt::Result;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 5,
                            "highlight_start": 5,
                            "text": "    use core::{"
                          }
                        ]
                      },
                      {
                        "byte_end": 12853,
                        "byte_start": 12853,
                        "column_end": 5,
                        "column_start": 5,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 386,
                        "line_start": 386,
                        "suggested_replacement": "use core::result::Result;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 5,
                            "highlight_start": 5,
                            "text": "    use core::{"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0412",
                  "explanation": "A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"
                },
                "level": "error",
                "message": "cannot find type `Result` in this scope",
                "spans": [
                  {
                    "byte_end": 25251,
                    "byte_start": 25245,
                    "column_end": 54,
                    "column_start": 48,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 751,
                    "line_start": 751,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 54,
                        "highlight_start": 48,
                        "text": "        pub fn into_value(this: Lazy<T, F>) -> Result<T, F> {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#once_cell@1.18.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "once_cell",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0405]: cannot find trait `FnOnce` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs:760:16\n    |\n760 |     impl<T, F: FnOnce() -> T> Lazy<T, F> {\n    |                ^^^^^^ not found in this scope\n    |\nhelp: consider importing this trait\n    |\n386 +     use core::ops::FnOnce;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this trait",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 12853,
                        "byte_start": 12853,
                        "column_end": 5,
                        "column_start": 5,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 386,
                        "line_start": 386,
                        "suggested_replacement": "use core::ops::FnOnce;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 5,
                            "highlight_start": 5,
                            "text": "    use core::{"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0405",
                  "explanation": "The code refers to a trait that is not in scope.\n\nErroneous code example:\n\n```compile_fail,E0405\nstruct Foo;\n\nimpl SomeTrait for Foo {} // error: trait `SomeTrait` is not in scope\n```\n\nPlease verify that the name of the trait wasn't misspelled and ensure that it\nwas imported. Example:\n\n```\n# #[cfg(for_demonstration_only)]\n// solution 1:\nuse some_file::SomeTrait;\n\n// solution 2:\ntrait SomeTrait {\n    // some functions\n}\n\nstruct Foo;\n\nimpl SomeTrait for Foo { // ok!\n    // implements functions\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find trait `FnOnce` in this scope",
                "spans": [
                  {
                    "byte_end": 25527,
                    "byte_start": 25521,
                    "column_end": 22,
                    "column_start": 16,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 760,
                    "line_start": 760,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 22,
                        "highlight_start": 16,
                        "text": "    impl<T, F: FnOnce() -> T> Lazy<T, F> {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#once_cell@1.18.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "once_cell",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0531]: cannot find tuple struct or tuple variant `Some` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs:777:17\n    |\n777 |                 Some(f) => f(),\n    |                 ^^^^ not found in this scope\n    |\nhelp: consider importing this tuple variant\n    |\n386 +     use core::option::Option::Some;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this tuple variant",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 12853,
                        "byte_start": 12853,
                        "column_end": 5,
                        "column_start": 5,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 386,
                        "line_start": 386,
                        "suggested_replacement": "use core::option::Option::Some;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 5,
                            "highlight_start": 5,
                            "text": "    use core::{"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0531",
                  "explanation": "An unknown tuple struct/variant has been used.\n\nErroneous code example:\n\n```compile_fail,E0531\nlet Type(x) = Type(12); // error!\nmatch Bar(12) {\n    Bar(x) => {} // error!\n    _ => {}\n}\n```\n\nIn most cases, it's either a forgotten import or a typo. However, let's look at\nhow you can have such a type:\n\n```edition2018\nstruct Type(u32); // this is a tuple struct\n\nenum Foo {\n    Bar(u32), // this is a tuple variant\n}\n\nuse Foo::*; // To use Foo's variant directly, we need to import them in\n            // the scope.\n```\n\nEither way, it should work fine with our previous code:\n\n```edition2018\nstruct Type(u32);\n\nenum Foo {\n    Bar(u32),\n}\nuse Foo::*;\n\nlet Type(x) = Type(12); // ok!\nmatch Type(12) {\n    Type(x) => {} // ok!\n    _ => {}\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find tuple struct or tuple variant `Some` in this scope",
                "spans": [
                  {
                    "byte_end": 26122,
                    "byte_start": 26118,
                    "column_end": 21,
                    "column_start": 17,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 777,
                    "line_start": 777,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 21,
                        "highlight_start": 17,
                        "text": "                Some(f) => f(),"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#once_cell@1.18.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "once_cell",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0531]: cannot find tuple struct or tuple variant `Some` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs:799:21\n    |\n799 |                     Some(f) => f(),\n    |                     ^^^^ not found in this scope\n    |\nhelp: consider importing this tuple variant\n    |\n386 +     use core::option::Option::Some;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this tuple variant",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 12853,
                        "byte_start": 12853,
                        "column_end": 5,
                        "column_start": 5,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 386,
                        "line_start": 386,
                        "suggested_replacement": "use core::option::Option::Some;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 5,
                            "highlight_start": 5,
                            "text": "    use core::{"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0531",
                  "explanation": "An unknown tuple struct/variant has been used.\n\nErroneous code example:\n\n```compile_fail,E0531\nlet Type(x) = Type(12); // error!\nmatch Bar(12) {\n    Bar(x) => {} // error!\n    _ => {}\n}\n```\n\nIn most cases, it's either a forgotten import or a typo. However, let's look at\nhow you can have such a type:\n\n```edition2018\nstruct Type(u32); // this is a tuple struct\n\nenum Foo {\n    Bar(u32), // this is a tuple variant\n}\n\nuse Foo::*; // To use Foo's variant directly, we need to import them in\n            // the scope.\n```\n\nEither way, it should work fine with our previous code:\n\n```edition2018\nstruct Type(u32);\n\nenum Foo {\n    Bar(u32),\n}\nuse Foo::*;\n\nlet Type(x) = Type(12); // ok!\nmatch Type(12) {\n    Type(x) => {} // ok!\n    _ => {}\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find tuple struct or tuple variant `Some` in this scope",
                "spans": [
                  {
                    "byte_end": 26896,
                    "byte_start": 26892,
                    "column_end": 25,
                    "column_start": 21,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 799,
                    "line_start": 799,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 25,
                        "highlight_start": 21,
                        "text": "                    Some(f) => f(),"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#once_cell@1.18.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "once_cell",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0412]: cannot find type `Option` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs:820:42\n    |\n820 |         pub fn get(this: &Lazy<T, F>) -> Option<&T> {\n    |                                          ^^^^^^ not found in this scope\n    |\nhelp: consider importing this enum\n    |\n386 +     use core::option::Option;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this enum",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 12853,
                        "byte_start": 12853,
                        "column_end": 5,
                        "column_start": 5,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 386,
                        "line_start": 386,
                        "suggested_replacement": "use core::option::Option;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 5,
                            "highlight_start": 5,
                            "text": "    use core::{"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0412",
                  "explanation": "A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"
                },
                "level": "error",
                "message": "cannot find type `Option` in this scope",
                "spans": [
                  {
                    "byte_end": 27639,
                    "byte_start": 27633,
                    "column_end": 48,
                    "column_start": 42,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 820,
                    "line_start": 820,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 48,
                        "highlight_start": 42,
                        "text": "        pub fn get(this: &Lazy<T, F>) -> Option<&T> {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#once_cell@1.18.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "once_cell",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0412]: cannot find type `Option` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs:837:50\n    |\n837 |         pub fn get_mut(this: &mut Lazy<T, F>) -> Option<&mut T> {\n    |                                                  ^^^^^^ not found in this scope\n    |\nhelp: consider importing this enum\n    |\n386 +     use core::option::Option;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this enum",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 12853,
                        "byte_start": 12853,
                        "column_end": 5,
                        "column_start": 5,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 386,
                        "line_start": 386,
                        "suggested_replacement": "use core::option::Option;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 5,
                            "highlight_start": 5,
                            "text": "    use core::{"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0412",
                  "explanation": "A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"
                },
                "level": "error",
                "message": "cannot find type `Option` in this scope",
                "spans": [
                  {
                    "byte_end": 28205,
                    "byte_start": 28199,
                    "column_end": 56,
                    "column_start": 50,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 837,
                    "line_start": 837,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 56,
                        "highlight_start": 50,
                        "text": "        pub fn get_mut(this: &mut Lazy<T, F>) -> Option<&mut T> {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#once_cell@1.18.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "once_cell",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0405]: cannot find trait `FnOnce` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs:842:16\n    |\n842 |     impl<T, F: FnOnce() -> T> Deref for Lazy<T, F> {\n    |                ^^^^^^ not found in this scope\n    |\nhelp: consider importing this trait\n    |\n386 +     use core::ops::FnOnce;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this trait",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 12853,
                        "byte_start": 12853,
                        "column_end": 5,
                        "column_start": 5,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 386,
                        "line_start": 386,
                        "suggested_replacement": "use core::ops::FnOnce;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 5,
                            "highlight_start": 5,
                            "text": "    use core::{"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0405",
                  "explanation": "The code refers to a trait that is not in scope.\n\nErroneous code example:\n\n```compile_fail,E0405\nstruct Foo;\n\nimpl SomeTrait for Foo {} // error: trait `SomeTrait` is not in scope\n```\n\nPlease verify that the name of the trait wasn't misspelled and ensure that it\nwas imported. Example:\n\n```\n# #[cfg(for_demonstration_only)]\n// solution 1:\nuse some_file::SomeTrait;\n\n// solution 2:\ntrait SomeTrait {\n    // some functions\n}\n\nstruct Foo;\n\nimpl SomeTrait for Foo { // ok!\n    // implements functions\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find trait `FnOnce` in this scope",
                "spans": [
                  {
                    "byte_end": 28286,
                    "byte_start": 28280,
                    "column_end": 22,
                    "column_start": 16,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 842,
                    "line_start": 842,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 22,
                        "highlight_start": 16,
                        "text": "    impl<T, F: FnOnce() -> T> Deref for Lazy<T, F> {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#once_cell@1.18.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "once_cell",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0405]: cannot find trait `FnOnce` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs:849:16\n    |\n849 |     impl<T, F: FnOnce() -> T> DerefMut for Lazy<T, F> {\n    |                ^^^^^^ not found in this scope\n    |\nhelp: consider importing this trait\n    |\n386 +     use core::ops::FnOnce;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this trait",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 12853,
                        "byte_start": 12853,
                        "column_end": 5,
                        "column_start": 5,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 386,
                        "line_start": 386,
                        "suggested_replacement": "use core::ops::FnOnce;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 5,
                            "highlight_start": 5,
                            "text": "    use core::{"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0405",
                  "explanation": "The code refers to a trait that is not in scope.\n\nErroneous code example:\n\n```compile_fail,E0405\nstruct Foo;\n\nimpl SomeTrait for Foo {} // error: trait `SomeTrait` is not in scope\n```\n\nPlease verify that the name of the trait wasn't misspelled and ensure that it\nwas imported. Example:\n\n```\n# #[cfg(for_demonstration_only)]\n// solution 1:\nuse some_file::SomeTrait;\n\n// solution 2:\ntrait SomeTrait {\n    // some functions\n}\n\nstruct Foo;\n\nimpl SomeTrait for Foo { // ok!\n    // implements functions\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find trait `FnOnce` in this scope",
                "spans": [
                  {
                    "byte_end": 28443,
                    "byte_start": 28437,
                    "column_end": 22,
                    "column_start": 16,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 849,
                    "line_start": 849,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 22,
                        "highlight_start": 16,
                        "text": "    impl<T, F: FnOnce() -> T> DerefMut for Lazy<T, F> {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#once_cell@1.18.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "once_cell",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0405]: cannot find trait `Default` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs:855:22\n    |\n855 |     impl<T: Default> Default for Lazy<T> {\n    |                      ^^^^^^^ not found in this scope\n    |\nhelp: consider importing this trait\n    |\n386 +     use core::default::Default;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this trait",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 12853,
                        "byte_start": 12853,
                        "column_end": 5,
                        "column_start": 5,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 386,
                        "line_start": 386,
                        "suggested_replacement": "use core::default::Default;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 5,
                            "highlight_start": 5,
                            "text": "    use core::{"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0405",
                  "explanation": "The code refers to a trait that is not in scope.\n\nErroneous code example:\n\n```compile_fail,E0405\nstruct Foo;\n\nimpl SomeTrait for Foo {} // error: trait `SomeTrait` is not in scope\n```\n\nPlease verify that the name of the trait wasn't misspelled and ensure that it\nwas imported. Example:\n\n```\n# #[cfg(for_demonstration_only)]\n// solution 1:\nuse some_file::SomeTrait;\n\n// solution 2:\ntrait SomeTrait {\n    // some functions\n}\n\nstruct Foo;\n\nimpl SomeTrait for Foo { // ok!\n    // implements functions\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find trait `Default` in this scope",
                "spans": [
                  {
                    "byte_end": 28601,
                    "byte_start": 28594,
                    "column_end": 29,
                    "column_start": 22,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 855,
                    "line_start": 855,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 29,
                        "highlight_start": 22,
                        "text": "    impl<T: Default> Default for Lazy<T> {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#once_cell@1.18.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "once_cell",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0405]: cannot find trait `Default` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs:855:13\n    |\n855 |     impl<T: Default> Default for Lazy<T> {\n    |             ^^^^^^^ not found in this scope\n    |\nhelp: consider importing this trait\n    |\n386 +     use core::default::Default;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this trait",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 12853,
                        "byte_start": 12853,
                        "column_end": 5,
                        "column_start": 5,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 386,
                        "line_start": 386,
                        "suggested_replacement": "use core::default::Default;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 5,
                            "highlight_start": 5,
                            "text": "    use core::{"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0405",
                  "explanation": "The code refers to a trait that is not in scope.\n\nErroneous code example:\n\n```compile_fail,E0405\nstruct Foo;\n\nimpl SomeTrait for Foo {} // error: trait `SomeTrait` is not in scope\n```\n\nPlease verify that the name of the trait wasn't misspelled and ensure that it\nwas imported. Example:\n\n```\n# #[cfg(for_demonstration_only)]\n// solution 1:\nuse some_file::SomeTrait;\n\n// solution 2:\ntrait SomeTrait {\n    // some functions\n}\n\nstruct Foo;\n\nimpl SomeTrait for Foo { // ok!\n    // implements functions\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find trait `Default` in this scope",
                "spans": [
                  {
                    "byte_end": 28592,
                    "byte_start": 28585,
                    "column_end": 20,
                    "column_start": 13,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 855,
                    "line_start": 855,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 20,
                        "highlight_start": 13,
                        "text": "    impl<T: Default> Default for Lazy<T> {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#once_cell@1.18.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "once_cell",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0405]: cannot find trait `Default` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs:905:13\n    |\n905 |     impl<T> Default for OnceCell<T> {\n    |             ^^^^^^^ not found in this scope\n    |\nhelp: consider importing this trait\n    |\n866 +     use core::default::Default;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this trait",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 28913,
                        "byte_start": 28913,
                        "column_end": 5,
                        "column_start": 5,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 866,
                        "line_start": 866,
                        "suggested_replacement": "use core::default::Default;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 5,
                            "highlight_start": 5,
                            "text": "    use core::{"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0405",
                  "explanation": "The code refers to a trait that is not in scope.\n\nErroneous code example:\n\n```compile_fail,E0405\nstruct Foo;\n\nimpl SomeTrait for Foo {} // error: trait `SomeTrait` is not in scope\n```\n\nPlease verify that the name of the trait wasn't misspelled and ensure that it\nwas imported. Example:\n\n```\n# #[cfg(for_demonstration_only)]\n// solution 1:\nuse some_file::SomeTrait;\n\n// solution 2:\ntrait SomeTrait {\n    // some functions\n}\n\nstruct Foo;\n\nimpl SomeTrait for Foo { // ok!\n    // implements functions\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find trait `Default` in this scope",
                "spans": [
                  {
                    "byte_end": 30188,
                    "byte_start": 30181,
                    "column_end": 20,
                    "column_start": 13,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 905,
                    "line_start": 905,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 20,
                        "highlight_start": 13,
                        "text": "    impl<T> Default for OnceCell<T> {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#once_cell@1.18.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "once_cell",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0531]: cannot find tuple struct or tuple variant `Some` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs:914:17\n    |\n914 |                 Some(v) => f.debug_tuple(\"OnceCell\").field(v).finish(),\n    |                 ^^^^ not found in this scope\n    |\nhelp: consider importing this tuple variant\n    |\n866 +     use core::option::Option::Some;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this tuple variant",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 28913,
                        "byte_start": 28913,
                        "column_end": 5,
                        "column_start": 5,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 866,
                        "line_start": 866,
                        "suggested_replacement": "use core::option::Option::Some;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 5,
                            "highlight_start": 5,
                            "text": "    use core::{"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0531",
                  "explanation": "An unknown tuple struct/variant has been used.\n\nErroneous code example:\n\n```compile_fail,E0531\nlet Type(x) = Type(12); // error!\nmatch Bar(12) {\n    Bar(x) => {} // error!\n    _ => {}\n}\n```\n\nIn most cases, it's either a forgotten import or a typo. However, let's look at\nhow you can have such a type:\n\n```edition2018\nstruct Type(u32); // this is a tuple struct\n\nenum Foo {\n    Bar(u32), // this is a tuple variant\n}\n\nuse Foo::*; // To use Foo's variant directly, we need to import them in\n            // the scope.\n```\n\nEither way, it should work fine with our previous code:\n\n```edition2018\nstruct Type(u32);\n\nenum Foo {\n    Bar(u32),\n}\nuse Foo::*;\n\nlet Type(x) = Type(12); // ok!\nmatch Type(12) {\n    Type(x) => {} // ok!\n    _ => {}\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find tuple struct or tuple variant `Some` in this scope",
                "spans": [
                  {
                    "byte_end": 30457,
                    "byte_start": 30453,
                    "column_end": 21,
                    "column_start": 17,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 914,
                    "line_start": 914,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 21,
                        "highlight_start": 17,
                        "text": "                Some(v) => f.debug_tuple(\"OnceCell\").field(v).finish(),"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#once_cell@1.18.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "once_cell",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0405]: cannot find trait `Clone` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs:920:20\n    |\n920 |     impl<T: Clone> Clone for OnceCell<T> {\n    |                    ^^^^^ not found in this scope\n    |\nhelp: consider importing this trait\n    |\n866 +     use core::clone::Clone;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this trait",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 28913,
                        "byte_start": 28913,
                        "column_end": 5,
                        "column_start": 5,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 866,
                        "line_start": 866,
                        "suggested_replacement": "use core::clone::Clone;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 5,
                            "highlight_start": 5,
                            "text": "    use core::{"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0405",
                  "explanation": "The code refers to a trait that is not in scope.\n\nErroneous code example:\n\n```compile_fail,E0405\nstruct Foo;\n\nimpl SomeTrait for Foo {} // error: trait `SomeTrait` is not in scope\n```\n\nPlease verify that the name of the trait wasn't misspelled and ensure that it\nwas imported. Example:\n\n```\n# #[cfg(for_demonstration_only)]\n// solution 1:\nuse some_file::SomeTrait;\n\n// solution 2:\ntrait SomeTrait {\n    // some functions\n}\n\nstruct Foo;\n\nimpl SomeTrait for Foo { // ok!\n    // implements functions\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find trait `Clone` in this scope",
                "spans": [
                  {
                    "byte_end": 30621,
                    "byte_start": 30616,
                    "column_end": 25,
                    "column_start": 20,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 920,
                    "line_start": 920,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 25,
                        "highlight_start": 20,
                        "text": "    impl<T: Clone> Clone for OnceCell<T> {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#once_cell@1.18.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "once_cell",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0405]: cannot find trait `Clone` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs:920:13\n    |\n920 |     impl<T: Clone> Clone for OnceCell<T> {\n    |             ^^^^^ not found in this scope\n    |\nhelp: consider importing this trait\n    |\n866 +     use core::clone::Clone;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this trait",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 28913,
                        "byte_start": 28913,
                        "column_end": 5,
                        "column_start": 5,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 866,
                        "line_start": 866,
                        "suggested_replacement": "use core::clone::Clone;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 5,
                            "highlight_start": 5,
                            "text": "    use core::{"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0405",
                  "explanation": "The code refers to a trait that is not in scope.\n\nErroneous code example:\n\n```compile_fail,E0405\nstruct Foo;\n\nimpl SomeTrait for Foo {} // error: trait `SomeTrait` is not in scope\n```\n\nPlease verify that the name of the trait wasn't misspelled and ensure that it\nwas imported. Example:\n\n```\n# #[cfg(for_demonstration_only)]\n// solution 1:\nuse some_file::SomeTrait;\n\n// solution 2:\ntrait SomeTrait {\n    // some functions\n}\n\nstruct Foo;\n\nimpl SomeTrait for Foo { // ok!\n    // implements functions\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find trait `Clone` in this scope",
                "spans": [
                  {
                    "byte_end": 30614,
                    "byte_start": 30609,
                    "column_end": 18,
                    "column_start": 13,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 920,
                    "line_start": 920,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 18,
                        "highlight_start": 13,
                        "text": "    impl<T: Clone> Clone for OnceCell<T> {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#once_cell@1.18.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "once_cell",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0531]: cannot find tuple struct or tuple variant `Some` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs:923:17\n    |\n923 |                 Some(value) => Self::with_value(value.clone()),\n    |                 ^^^^ not found in this scope\n    |\nhelp: consider importing this tuple variant\n    |\n866 +     use core::option::Option::Some;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this tuple variant",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 28913,
                        "byte_start": 28913,
                        "column_end": 5,
                        "column_start": 5,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 866,
                        "line_start": 866,
                        "suggested_replacement": "use core::option::Option::Some;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 5,
                            "highlight_start": 5,
                            "text": "    use core::{"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0531",
                  "explanation": "An unknown tuple struct/variant has been used.\n\nErroneous code example:\n\n```compile_fail,E0531\nlet Type(x) = Type(12); // error!\nmatch Bar(12) {\n    Bar(x) => {} // error!\n    _ => {}\n}\n```\n\nIn most cases, it's either a forgotten import or a typo. However, let's look at\nhow you can have such a type:\n\n```edition2018\nstruct Type(u32); // this is a tuple struct\n\nenum Foo {\n    Bar(u32), // this is a tuple variant\n}\n\nuse Foo::*; // To use Foo's variant directly, we need to import them in\n            // the scope.\n```\n\nEither way, it should work fine with our previous code:\n\n```edition2018\nstruct Type(u32);\n\nenum Foo {\n    Bar(u32),\n}\nuse Foo::*;\n\nlet Type(x) = Type(12); // ok!\nmatch Type(12) {\n    Type(x) => {} // ok!\n    _ => {}\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find tuple struct or tuple variant `Some` in this scope",
                "spans": [
                  {
                    "byte_end": 30732,
                    "byte_start": 30728,
                    "column_end": 21,
                    "column_start": 17,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 923,
                    "line_start": 923,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 21,
                        "highlight_start": 17,
                        "text": "                Some(value) => Self::with_value(value.clone()),"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#once_cell@1.18.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "once_cell",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0531]: cannot find tuple struct or tuple variant `Some` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs:930:18\n    |\n930 |                 (Some(this), Some(source)) => this.clone_from(source),\n    |                  ^^^^ not found in this scope\n    |\nhelp: consider importing this tuple variant\n    |\n866 +     use core::option::Option::Some;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this tuple variant",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 28913,
                        "byte_start": 28913,
                        "column_end": 5,
                        "column_start": 5,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 866,
                        "line_start": 866,
                        "suggested_replacement": "use core::option::Option::Some;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 5,
                            "highlight_start": 5,
                            "text": "    use core::{"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0531",
                  "explanation": "An unknown tuple struct/variant has been used.\n\nErroneous code example:\n\n```compile_fail,E0531\nlet Type(x) = Type(12); // error!\nmatch Bar(12) {\n    Bar(x) => {} // error!\n    _ => {}\n}\n```\n\nIn most cases, it's either a forgotten import or a typo. However, let's look at\nhow you can have such a type:\n\n```edition2018\nstruct Type(u32); // this is a tuple struct\n\nenum Foo {\n    Bar(u32), // this is a tuple variant\n}\n\nuse Foo::*; // To use Foo's variant directly, we need to import them in\n            // the scope.\n```\n\nEither way, it should work fine with our previous code:\n\n```edition2018\nstruct Type(u32);\n\nenum Foo {\n    Bar(u32),\n}\nuse Foo::*;\n\nlet Type(x) = Type(12); // ok!\nmatch Type(12) {\n    Type(x) => {} // ok!\n    _ => {}\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find tuple struct or tuple variant `Some` in this scope",
                "spans": [
                  {
                    "byte_end": 30960,
                    "byte_start": 30956,
                    "column_end": 22,
                    "column_start": 18,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 930,
                    "line_start": 930,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 22,
                        "highlight_start": 18,
                        "text": "                (Some(this), Some(source)) => this.clone_from(source),"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#once_cell@1.18.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "once_cell",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0531]: cannot find tuple struct or tuple variant `Some` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs:930:30\n    |\n930 |                 (Some(this), Some(source)) => this.clone_from(source),\n    |                              ^^^^ not found in this scope\n    |\nhelp: consider importing this tuple variant\n    |\n866 +     use core::option::Option::Some;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this tuple variant",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 28913,
                        "byte_start": 28913,
                        "column_end": 5,
                        "column_start": 5,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 866,
                        "line_start": 866,
                        "suggested_replacement": "use core::option::Option::Some;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 5,
                            "highlight_start": 5,
                            "text": "    use core::{"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0531",
                  "explanation": "An unknown tuple struct/variant has been used.\n\nErroneous code example:\n\n```compile_fail,E0531\nlet Type(x) = Type(12); // error!\nmatch Bar(12) {\n    Bar(x) => {} // error!\n    _ => {}\n}\n```\n\nIn most cases, it's either a forgotten import or a typo. However, let's look at\nhow you can have such a type:\n\n```edition2018\nstruct Type(u32); // this is a tuple struct\n\nenum Foo {\n    Bar(u32), // this is a tuple variant\n}\n\nuse Foo::*; // To use Foo's variant directly, we need to import them in\n            // the scope.\n```\n\nEither way, it should work fine with our previous code:\n\n```edition2018\nstruct Type(u32);\n\nenum Foo {\n    Bar(u32),\n}\nuse Foo::*;\n\nlet Type(x) = Type(12); // ok!\nmatch Type(12) {\n    Type(x) => {} // ok!\n    _ => {}\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find tuple struct or tuple variant `Some` in this scope",
                "spans": [
                  {
                    "byte_end": 30972,
                    "byte_start": 30968,
                    "column_end": 34,
                    "column_start": 30,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 930,
                    "line_start": 930,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 34,
                        "highlight_start": 30,
                        "text": "                (Some(this), Some(source)) => this.clone_from(source),"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#once_cell@1.18.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "once_cell",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0405]: cannot find trait `From` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs:936:13\n    |\n936 |     impl<T> From<T> for OnceCell<T> {\n    |             ^^^^ not found in this scope\n    |\nhelp: consider importing this trait\n    |\n866 +     use core::convert::From;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this trait",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 28913,
                        "byte_start": 28913,
                        "column_end": 5,
                        "column_start": 5,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 866,
                        "line_start": 866,
                        "suggested_replacement": "use core::convert::From;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 5,
                            "highlight_start": 5,
                            "text": "    use core::{"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0405",
                  "explanation": "The code refers to a trait that is not in scope.\n\nErroneous code example:\n\n```compile_fail,E0405\nstruct Foo;\n\nimpl SomeTrait for Foo {} // error: trait `SomeTrait` is not in scope\n```\n\nPlease verify that the name of the trait wasn't misspelled and ensure that it\nwas imported. Example:\n\n```\n# #[cfg(for_demonstration_only)]\n// solution 1:\nuse some_file::SomeTrait;\n\n// solution 2:\ntrait SomeTrait {\n    // some functions\n}\n\nstruct Foo;\n\nimpl SomeTrait for Foo { // ok!\n    // implements functions\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find trait `From` in this scope",
                "spans": [
                  {
                    "byte_end": 31102,
                    "byte_start": 31098,
                    "column_end": 17,
                    "column_start": 13,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 936,
                    "line_start": 936,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 17,
                        "highlight_start": 13,
                        "text": "    impl<T> From<T> for OnceCell<T> {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#once_cell@1.18.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "once_cell",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0405]: cannot find trait `PartialEq` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs:942:24\n    |\n942 |     impl<T: PartialEq> PartialEq for OnceCell<T> {\n    |                        ^^^^^^^^^ not found in this scope\n    |\nhelp: consider importing this trait\n    |\n866 +     use core::cmp::PartialEq;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this trait",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 28913,
                        "byte_start": 28913,
                        "column_end": 5,
                        "column_start": 5,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 866,
                        "line_start": 866,
                        "suggested_replacement": "use core::cmp::PartialEq;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 5,
                            "highlight_start": 5,
                            "text": "    use core::{"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0405",
                  "explanation": "The code refers to a trait that is not in scope.\n\nErroneous code example:\n\n```compile_fail,E0405\nstruct Foo;\n\nimpl SomeTrait for Foo {} // error: trait `SomeTrait` is not in scope\n```\n\nPlease verify that the name of the trait wasn't misspelled and ensure that it\nwas imported. Example:\n\n```\n# #[cfg(for_demonstration_only)]\n// solution 1:\nuse some_file::SomeTrait;\n\n// solution 2:\ntrait SomeTrait {\n    // some functions\n}\n\nstruct Foo;\n\nimpl SomeTrait for Foo { // ok!\n    // implements functions\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find trait `PartialEq` in this scope",
                "spans": [
                  {
                    "byte_end": 31245,
                    "byte_start": 31236,
                    "column_end": 33,
                    "column_start": 24,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 942,
                    "line_start": 942,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 33,
                        "highlight_start": 24,
                        "text": "    impl<T: PartialEq> PartialEq for OnceCell<T> {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#once_cell@1.18.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "once_cell",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0405]: cannot find trait `PartialEq` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs:942:13\n    |\n942 |     impl<T: PartialEq> PartialEq for OnceCell<T> {\n    |             ^^^^^^^^^ not found in this scope\n    |\nhelp: consider importing this trait\n    |\n866 +     use core::cmp::PartialEq;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this trait",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 28913,
                        "byte_start": 28913,
                        "column_end": 5,
                        "column_start": 5,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 866,
                        "line_start": 866,
                        "suggested_replacement": "use core::cmp::PartialEq;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 5,
                            "highlight_start": 5,
                            "text": "    use core::{"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0405",
                  "explanation": "The code refers to a trait that is not in scope.\n\nErroneous code example:\n\n```compile_fail,E0405\nstruct Foo;\n\nimpl SomeTrait for Foo {} // error: trait `SomeTrait` is not in scope\n```\n\nPlease verify that the name of the trait wasn't misspelled and ensure that it\nwas imported. Example:\n\n```\n# #[cfg(for_demonstration_only)]\n// solution 1:\nuse some_file::SomeTrait;\n\n// solution 2:\ntrait SomeTrait {\n    // some functions\n}\n\nstruct Foo;\n\nimpl SomeTrait for Foo { // ok!\n    // implements functions\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find trait `PartialEq` in this scope",
                "spans": [
                  {
                    "byte_end": 31234,
                    "byte_start": 31225,
                    "column_end": 22,
                    "column_start": 13,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 942,
                    "line_start": 942,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 22,
                        "highlight_start": 13,
                        "text": "    impl<T: PartialEq> PartialEq for OnceCell<T> {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#once_cell@1.18.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "once_cell",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0405]: cannot find trait `Eq` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs:948:17\n    |\n948 |     impl<T: Eq> Eq for OnceCell<T> {}\n    |                 ^^ not found in this scope\n    |\nhelp: consider importing this trait\n    |\n866 +     use core::cmp::Eq;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this trait",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 28913,
                        "byte_start": 28913,
                        "column_end": 5,
                        "column_start": 5,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 866,
                        "line_start": 866,
                        "suggested_replacement": "use core::cmp::Eq;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 5,
                            "highlight_start": 5,
                            "text": "    use core::{"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0405",
                  "explanation": "The code refers to a trait that is not in scope.\n\nErroneous code example:\n\n```compile_fail,E0405\nstruct Foo;\n\nimpl SomeTrait for Foo {} // error: trait `SomeTrait` is not in scope\n```\n\nPlease verify that the name of the trait wasn't misspelled and ensure that it\nwas imported. Example:\n\n```\n# #[cfg(for_demonstration_only)]\n// solution 1:\nuse some_file::SomeTrait;\n\n// solution 2:\ntrait SomeTrait {\n    // some functions\n}\n\nstruct Foo;\n\nimpl SomeTrait for Foo { // ok!\n    // implements functions\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find trait `Eq` in this scope",
                "spans": [
                  {
                    "byte_end": 31389,
                    "byte_start": 31387,
                    "column_end": 19,
                    "column_start": 17,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 948,
                    "line_start": 948,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 19,
                        "highlight_start": 17,
                        "text": "    impl<T: Eq> Eq for OnceCell<T> {}"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#once_cell@1.18.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "once_cell",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0405]: cannot find trait `Eq` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs:948:13\n    |\n948 |     impl<T: Eq> Eq for OnceCell<T> {}\n    |             ^^ not found in this scope\n    |\nhelp: consider importing this trait\n    |\n866 +     use core::cmp::Eq;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this trait",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 28913,
                        "byte_start": 28913,
                        "column_end": 5,
                        "column_start": 5,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 866,
                        "line_start": 866,
                        "suggested_replacement": "use core::cmp::Eq;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 5,
                            "highlight_start": 5,
                            "text": "    use core::{"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0405",
                  "explanation": "The code refers to a trait that is not in scope.\n\nErroneous code example:\n\n```compile_fail,E0405\nstruct Foo;\n\nimpl SomeTrait for Foo {} // error: trait `SomeTrait` is not in scope\n```\n\nPlease verify that the name of the trait wasn't misspelled and ensure that it\nwas imported. Example:\n\n```\n# #[cfg(for_demonstration_only)]\n// solution 1:\nuse some_file::SomeTrait;\n\n// solution 2:\ntrait SomeTrait {\n    // some functions\n}\n\nstruct Foo;\n\nimpl SomeTrait for Foo { // ok!\n    // implements functions\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find trait `Eq` in this scope",
                "spans": [
                  {
                    "byte_end": 31385,
                    "byte_start": 31383,
                    "column_end": 15,
                    "column_start": 13,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 948,
                    "line_start": 948,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 15,
                        "highlight_start": 13,
                        "text": "    impl<T: Eq> Eq for OnceCell<T> {}"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#once_cell@1.18.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "once_cell",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0412]: cannot find type `Option` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs:965:30\n    |\n965 |         pub fn get(&self) -> Option<&T> {\n    |                              ^^^^^^ not found in this scope\n    |\nhelp: consider importing this enum\n    |\n866 +     use core::option::Option;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this enum",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 28913,
                        "byte_start": 28913,
                        "column_end": 5,
                        "column_start": 5,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 866,
                        "line_start": 866,
                        "suggested_replacement": "use core::option::Option;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 5,
                            "highlight_start": 5,
                            "text": "    use core::{"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0412",
                  "explanation": "A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"
                },
                "level": "error",
                "message": "cannot find type `Option` in this scope",
                "spans": [
                  {
                    "byte_end": 31933,
                    "byte_start": 31927,
                    "column_end": 36,
                    "column_start": 30,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 965,
                    "line_start": 965,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 36,
                        "highlight_start": 30,
                        "text": "        pub fn get(&self) -> Option<&T> {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#once_cell@1.18.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "once_cell",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0425]: cannot find function, tuple struct or tuple variant `Some` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs:968:17\n    |\n968 |                 Some(unsafe { self.get_unchecked() })\n    |                 ^^^^ not found in this scope\n    |\nhelp: consider importing this tuple variant\n    |\n866 +     use core::option::Option::Some;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this tuple variant",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 28913,
                        "byte_start": 28913,
                        "column_end": 5,
                        "column_start": 5,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 866,
                        "line_start": 866,
                        "suggested_replacement": "use core::option::Option::Some;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 5,
                            "highlight_start": 5,
                            "text": "    use core::{"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0425",
                  "explanation": "An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"
                },
                "level": "error",
                "message": "cannot find function, tuple struct or tuple variant `Some` in this scope",
                "spans": [
                  {
                    "byte_end": 32051,
                    "byte_start": 32047,
                    "column_end": 21,
                    "column_start": 17,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 968,
                    "line_start": 968,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 21,
                        "highlight_start": 17,
                        "text": "                Some(unsafe { self.get_unchecked() })"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#once_cell@1.18.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "once_cell",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0425]: cannot find value `None` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs:970:17\n    |\n970 |                 None\n    |                 ^^^^ not found in this scope\n    |\nhelp: consider importing this unit variant\n    |\n866 +     use core::option::Option::None;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this unit variant",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 28913,
                        "byte_start": 28913,
                        "column_end": 5,
                        "column_start": 5,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 866,
                        "line_start": 866,
                        "suggested_replacement": "use core::option::Option::None;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 5,
                            "highlight_start": 5,
                            "text": "    use core::{"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0425",
                  "explanation": "An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"
                },
                "level": "error",
                "message": "cannot find value `None` in this scope",
                "spans": [
                  {
                    "byte_end": 32126,
                    "byte_start": 32122,
                    "column_end": 21,
                    "column_start": 17,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 970,
                    "line_start": 970,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 21,
                        "highlight_start": 17,
                        "text": "                None"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#once_cell@1.18.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "once_cell",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0412]: cannot find type `Option` in this scope\n    --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs:1021:38\n     |\n1021 |         pub fn get_mut(&mut self) -> Option<&mut T> {\n     |                                      ^^^^^^ not found in this scope\n     |\nhelp: consider importing this enum\n     |\n866  +     use core::option::Option;\n     |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this enum",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 28913,
                        "byte_start": 28913,
                        "column_end": 5,
                        "column_start": 5,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 866,
                        "line_start": 866,
                        "suggested_replacement": "use core::option::Option;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 5,
                            "highlight_start": 5,
                            "text": "    use core::{"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0412",
                  "explanation": "A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"
                },
                "level": "error",
                "message": "cannot find type `Option` in this scope",
                "spans": [
                  {
                    "byte_end": 33958,
                    "byte_start": 33952,
                    "column_end": 44,
                    "column_start": 38,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 1021,
                    "line_start": 1021,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 44,
                        "highlight_start": 38,
                        "text": "        pub fn get_mut(&mut self) -> Option<&mut T> {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#once_cell@1.18.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "once_cell",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0412]: cannot find type `Result` in this scope\n    --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs:1060:40\n     |\n1060 |         pub fn set(&self, value: T) -> Result<(), T> {\n     |                                        ^^^^^^ not found in this scope\n     |\nhelp: consider importing one of these items\n     |\n866  +     use crate::sync::fmt::Result;\n     |\n866  +     use core::fmt::Result;\n     |\n866  +     use core::result::Result;\n     |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing one of these items",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 28913,
                        "byte_start": 28913,
                        "column_end": 5,
                        "column_start": 5,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 866,
                        "line_start": 866,
                        "suggested_replacement": "use crate::sync::fmt::Result;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 5,
                            "highlight_start": 5,
                            "text": "    use core::{"
                          }
                        ]
                      },
                      {
                        "byte_end": 28913,
                        "byte_start": 28913,
                        "column_end": 5,
                        "column_start": 5,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 866,
                        "line_start": 866,
                        "suggested_replacement": "use core::fmt::Result;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 5,
                            "highlight_start": 5,
                            "text": "    use core::{"
                          }
                        ]
                      },
                      {
                        "byte_end": 28913,
                        "byte_start": 28913,
                        "column_end": 5,
                        "column_start": 5,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 866,
                        "line_start": 866,
                        "suggested_replacement": "use core::result::Result;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 5,
                            "highlight_start": 5,
                            "text": "    use core::{"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0412",
                  "explanation": "A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"
                },
                "level": "error",
                "message": "cannot find type `Result` in this scope",
                "spans": [
                  {
                    "byte_end": 35184,
                    "byte_start": 35178,
                    "column_end": 46,
                    "column_start": 40,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 1060,
                    "line_start": 1060,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 46,
                        "highlight_start": 40,
                        "text": "        pub fn set(&self, value: T) -> Result<(), T> {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#once_cell@1.18.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "once_cell",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0531]: cannot find tuple struct or tuple variant `Ok` in this scope\n    --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs:1062:17\n     |\n1062 |                 Ok(_) => Ok(()),\n     |                 ^^ not found in this scope\n     |\nhelp: consider importing this tuple variant\n     |\n866  +     use core::result::Result::Ok;\n     |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this tuple variant",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 28913,
                        "byte_start": 28913,
                        "column_end": 5,
                        "column_start": 5,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 866,
                        "line_start": 866,
                        "suggested_replacement": "use core::result::Result::Ok;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 5,
                            "highlight_start": 5,
                            "text": "    use core::{"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0531",
                  "explanation": "An unknown tuple struct/variant has been used.\n\nErroneous code example:\n\n```compile_fail,E0531\nlet Type(x) = Type(12); // error!\nmatch Bar(12) {\n    Bar(x) => {} // error!\n    _ => {}\n}\n```\n\nIn most cases, it's either a forgotten import or a typo. However, let's look at\nhow you can have such a type:\n\n```edition2018\nstruct Type(u32); // this is a tuple struct\n\nenum Foo {\n    Bar(u32), // this is a tuple variant\n}\n\nuse Foo::*; // To use Foo's variant directly, we need to import them in\n            // the scope.\n```\n\nEither way, it should work fine with our previous code:\n\n```edition2018\nstruct Type(u32);\n\nenum Foo {\n    Bar(u32),\n}\nuse Foo::*;\n\nlet Type(x) = Type(12); // ok!\nmatch Type(12) {\n    Type(x) => {} // ok!\n    _ => {}\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find tuple struct or tuple variant `Ok` in this scope",
                "spans": [
                  {
                    "byte_end": 35255,
                    "byte_start": 35253,
                    "column_end": 19,
                    "column_start": 17,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 1062,
                    "line_start": 1062,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 19,
                        "highlight_start": 17,
                        "text": "                Ok(_) => Ok(()),"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#once_cell@1.18.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "once_cell",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0425]: cannot find function, tuple struct or tuple variant `Ok` in this scope\n    --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs:1062:26\n     |\n1062 |                 Ok(_) => Ok(()),\n     |                          ^^ not found in this scope\n     |\nhelp: consider importing this tuple variant\n     |\n866  +     use core::result::Result::Ok;\n     |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this tuple variant",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 28913,
                        "byte_start": 28913,
                        "column_end": 5,
                        "column_start": 5,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 866,
                        "line_start": 866,
                        "suggested_replacement": "use core::result::Result::Ok;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 5,
                            "highlight_start": 5,
                            "text": "    use core::{"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0425",
                  "explanation": "An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"
                },
                "level": "error",
                "message": "cannot find function, tuple struct or tuple variant `Ok` in this scope",
                "spans": [
                  {
                    "byte_end": 35264,
                    "byte_start": 35262,
                    "column_end": 28,
                    "column_start": 26,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 1062,
                    "line_start": 1062,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 28,
                        "highlight_start": 26,
                        "text": "                Ok(_) => Ok(()),"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#once_cell@1.18.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "once_cell",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0531]: cannot find tuple struct or tuple variant `Err` in this scope\n    --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs:1063:17\n     |\n1063 |                 Err((_, value)) => Err(value),\n     |                 ^^^ not found in this scope\n     |\nhelp: consider importing this tuple variant\n     |\n866  +     use core::result::Result::Err;\n     |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this tuple variant",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 28913,
                        "byte_start": 28913,
                        "column_end": 5,
                        "column_start": 5,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 866,
                        "line_start": 866,
                        "suggested_replacement": "use core::result::Result::Err;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 5,
                            "highlight_start": 5,
                            "text": "    use core::{"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0531",
                  "explanation": "An unknown tuple struct/variant has been used.\n\nErroneous code example:\n\n```compile_fail,E0531\nlet Type(x) = Type(12); // error!\nmatch Bar(12) {\n    Bar(x) => {} // error!\n    _ => {}\n}\n```\n\nIn most cases, it's either a forgotten import or a typo. However, let's look at\nhow you can have such a type:\n\n```edition2018\nstruct Type(u32); // this is a tuple struct\n\nenum Foo {\n    Bar(u32), // this is a tuple variant\n}\n\nuse Foo::*; // To use Foo's variant directly, we need to import them in\n            // the scope.\n```\n\nEither way, it should work fine with our previous code:\n\n```edition2018\nstruct Type(u32);\n\nenum Foo {\n    Bar(u32),\n}\nuse Foo::*;\n\nlet Type(x) = Type(12); // ok!\nmatch Type(12) {\n    Type(x) => {} // ok!\n    _ => {}\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find tuple struct or tuple variant `Err` in this scope",
                "spans": [
                  {
                    "byte_end": 35289,
                    "byte_start": 35286,
                    "column_end": 20,
                    "column_start": 17,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 1063,
                    "line_start": 1063,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 20,
                        "highlight_start": 17,
                        "text": "                Err((_, value)) => Err(value),"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#once_cell@1.18.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "once_cell",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0425]: cannot find function, tuple struct or tuple variant `Err` in this scope\n    --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs:1063:36\n     |\n1063 |                 Err((_, value)) => Err(value),\n     |                                    ^^^ not found in this scope\n     |\nhelp: consider importing this tuple variant\n     |\n866  +     use core::result::Result::Err;\n     |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this tuple variant",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 28913,
                        "byte_start": 28913,
                        "column_end": 5,
                        "column_start": 5,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 866,
                        "line_start": 866,
                        "suggested_replacement": "use core::result::Result::Err;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 5,
                            "highlight_start": 5,
                            "text": "    use core::{"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0425",
                  "explanation": "An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"
                },
                "level": "error",
                "message": "cannot find function, tuple struct or tuple variant `Err` in this scope",
                "spans": [
                  {
                    "byte_end": 35308,
                    "byte_start": 35305,
                    "column_end": 39,
                    "column_start": 36,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 1063,
                    "line_start": 1063,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 39,
                        "highlight_start": 36,
                        "text": "                Err((_, value)) => Err(value),"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#once_cell@1.18.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "once_cell",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0412]: cannot find type `Result` in this scope\n    --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs:1082:47\n     |\n1082 |         pub fn try_insert(&self, value: T) -> Result<&T, (&T, T)> {\n     |                                               ^^^^^^ not found in this scope\n     |\nhelp: consider importing one of these items\n     |\n866  +     use crate::sync::fmt::Result;\n     |\n866  +     use core::fmt::Result;\n     |\n866  +     use core::result::Result;\n     |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing one of these items",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 28913,
                        "byte_start": 28913,
                        "column_end": 5,
                        "column_start": 5,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 866,
                        "line_start": 866,
                        "suggested_replacement": "use crate::sync::fmt::Result;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 5,
                            "highlight_start": 5,
                            "text": "    use core::{"
                          }
                        ]
                      },
                      {
                        "byte_end": 28913,
                        "byte_start": 28913,
                        "column_end": 5,
                        "column_start": 5,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 866,
                        "line_start": 866,
                        "suggested_replacement": "use core::fmt::Result;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 5,
                            "highlight_start": 5,
                            "text": "    use core::{"
                          }
                        ]
                      },
                      {
                        "byte_end": 28913,
                        "byte_start": 28913,
                        "column_end": 5,
                        "column_start": 5,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 866,
                        "line_start": 866,
                        "suggested_replacement": "use core::result::Result;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 5,
                            "highlight_start": 5,
                            "text": "    use core::{"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0412",
                  "explanation": "A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"
                },
                "level": "error",
                "message": "cannot find type `Result` in this scope",
                "spans": [
                  {
                    "byte_end": 35885,
                    "byte_start": 35879,
                    "column_end": 53,
                    "column_start": 47,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 1082,
                    "line_start": 1082,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 53,
                        "highlight_start": 47,
                        "text": "        pub fn try_insert(&self, value: T) -> Result<&T, (&T, T)> {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#once_cell@1.18.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "once_cell",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0425]: cannot find function, tuple struct or tuple variant `Some` in this scope\n    --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs:1083:29\n     |\n1083 |             let mut value = Some(value);\n     |                             ^^^^ not found in this scope\n     |\nhelp: consider importing this tuple variant\n     |\n866  +     use core::option::Option::Some;\n     |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this tuple variant",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 28913,
                        "byte_start": 28913,
                        "column_end": 5,
                        "column_start": 5,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 866,
                        "line_start": 866,
                        "suggested_replacement": "use core::option::Option::Some;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 5,
                            "highlight_start": 5,
                            "text": "    use core::{"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0425",
                  "explanation": "An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"
                },
                "level": "error",
                "message": "cannot find function, tuple struct or tuple variant `Some` in this scope",
                "spans": [
                  {
                    "byte_end": 35933,
                    "byte_start": 35929,
                    "column_end": 33,
                    "column_start": 29,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 1083,
                    "line_start": 1083,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 33,
                        "highlight_start": 29,
                        "text": "            let mut value = Some(value);"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#once_cell@1.18.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "once_cell",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0425]: cannot find function, tuple struct or tuple variant `Ok` in this scope\n    --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs:1086:25\n     |\n1086 |                 None => Ok(res),\n     |                         ^^ not found in this scope\n     |\nhelp: consider importing this tuple variant\n     |\n866  +     use core::result::Result::Ok;\n     |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this tuple variant",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 28913,
                        "byte_start": 28913,
                        "column_end": 5,
                        "column_start": 5,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 866,
                        "line_start": 866,
                        "suggested_replacement": "use core::result::Result::Ok;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 5,
                            "highlight_start": 5,
                            "text": "    use core::{"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0425",
                  "explanation": "An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"
                },
                "level": "error",
                "message": "cannot find function, tuple struct or tuple variant `Ok` in this scope",
                "spans": [
                  {
                    "byte_end": 36081,
                    "byte_start": 36079,
                    "column_end": 27,
                    "column_start": 25,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 1086,
                    "line_start": 1086,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 27,
                        "highlight_start": 25,
                        "text": "                None => Ok(res),"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#once_cell@1.18.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "once_cell",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0531]: cannot find tuple struct or tuple variant `Some` in this scope\n    --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs:1087:17\n     |\n1087 |                 Some(value) => Err((res, value)),\n     |                 ^^^^ not found in this scope\n     |\nhelp: consider importing this tuple variant\n     |\n866  +     use core::option::Option::Some;\n     |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this tuple variant",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 28913,
                        "byte_start": 28913,
                        "column_end": 5,
                        "column_start": 5,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 866,
                        "line_start": 866,
                        "suggested_replacement": "use core::option::Option::Some;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 5,
                            "highlight_start": 5,
                            "text": "    use core::{"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0531",
                  "explanation": "An unknown tuple struct/variant has been used.\n\nErroneous code example:\n\n```compile_fail,E0531\nlet Type(x) = Type(12); // error!\nmatch Bar(12) {\n    Bar(x) => {} // error!\n    _ => {}\n}\n```\n\nIn most cases, it's either a forgotten import or a typo. However, let's look at\nhow you can have such a type:\n\n```edition2018\nstruct Type(u32); // this is a tuple struct\n\nenum Foo {\n    Bar(u32), // this is a tuple variant\n}\n\nuse Foo::*; // To use Foo's variant directly, we need to import them in\n            // the scope.\n```\n\nEither way, it should work fine with our previous code:\n\n```edition2018\nstruct Type(u32);\n\nenum Foo {\n    Bar(u32),\n}\nuse Foo::*;\n\nlet Type(x) = Type(12); // ok!\nmatch Type(12) {\n    Type(x) => {} // ok!\n    _ => {}\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find tuple struct or tuple variant `Some` in this scope",
                "spans": [
                  {
                    "byte_end": 36108,
                    "byte_start": 36104,
                    "column_end": 21,
                    "column_start": 17,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 1087,
                    "line_start": 1087,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 21,
                        "highlight_start": 17,
                        "text": "                Some(value) => Err((res, value)),"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#once_cell@1.18.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "once_cell",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0425]: cannot find function, tuple struct or tuple variant `Err` in this scope\n    --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs:1087:32\n     |\n1087 |                 Some(value) => Err((res, value)),\n     |                                ^^^ not found in this scope\n     |\nhelp: consider importing this tuple variant\n     |\n866  +     use core::result::Result::Err;\n     |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this tuple variant",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 28913,
                        "byte_start": 28913,
                        "column_end": 5,
                        "column_start": 5,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 866,
                        "line_start": 866,
                        "suggested_replacement": "use core::result::Result::Err;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 5,
                            "highlight_start": 5,
                            "text": "    use core::{"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0425",
                  "explanation": "An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"
                },
                "level": "error",
                "message": "cannot find function, tuple struct or tuple variant `Err` in this scope",
                "spans": [
                  {
                    "byte_end": 36122,
                    "byte_start": 36119,
                    "column_end": 35,
                    "column_start": 32,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 1087,
                    "line_start": 1087,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 35,
                        "highlight_start": 32,
                        "text": "                Some(value) => Err((res, value)),"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#once_cell@1.18.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "once_cell",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0405]: cannot find trait `FnOnce` in this scope\n    --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs:1119:16\n     |\n1119 |             F: FnOnce() -> T,\n     |                ^^^^^^ not found in this scope\n     |\nhelp: consider importing this trait\n     |\n866  +     use core::ops::FnOnce;\n     |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this trait",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 28913,
                        "byte_start": 28913,
                        "column_end": 5,
                        "column_start": 5,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 866,
                        "line_start": 866,
                        "suggested_replacement": "use core::ops::FnOnce;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 5,
                            "highlight_start": 5,
                            "text": "    use core::{"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0405",
                  "explanation": "The code refers to a trait that is not in scope.\n\nErroneous code example:\n\n```compile_fail,E0405\nstruct Foo;\n\nimpl SomeTrait for Foo {} // error: trait `SomeTrait` is not in scope\n```\n\nPlease verify that the name of the trait wasn't misspelled and ensure that it\nwas imported. Example:\n\n```\n# #[cfg(for_demonstration_only)]\n// solution 1:\nuse some_file::SomeTrait;\n\n// solution 2:\ntrait SomeTrait {\n    // some functions\n}\n\nstruct Foo;\n\nimpl SomeTrait for Foo { // ok!\n    // implements functions\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find trait `FnOnce` in this scope",
                "spans": [
                  {
                    "byte_end": 37276,
                    "byte_start": 37270,
                    "column_end": 22,
                    "column_start": 16,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 1119,
                    "line_start": 1119,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 22,
                        "highlight_start": 16,
                        "text": "            F: FnOnce() -> T,"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#once_cell@1.18.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "once_cell",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0425]: cannot find function, tuple struct or tuple variant `Ok` in this scope\n    --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs:1122:43\n     |\n1122 |             match self.get_or_try_init(|| Ok::<T, Void>(f())) {\n     |                                           ^^ not found in this scope\n     |\nhelp: consider importing this tuple variant\n     |\n866  +     use core::result::Result::Ok;\n     |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this tuple variant",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 28913,
                        "byte_start": 28913,
                        "column_end": 5,
                        "column_start": 5,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 866,
                        "line_start": 866,
                        "suggested_replacement": "use core::result::Result::Ok;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 5,
                            "highlight_start": 5,
                            "text": "    use core::{"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0425",
                  "explanation": "An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"
                },
                "level": "error",
                "message": "cannot find function, tuple struct or tuple variant `Ok` in this scope",
                "spans": [
                  {
                    "byte_end": 37364,
                    "byte_start": 37362,
                    "column_end": 45,
                    "column_start": 43,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 1122,
                    "line_start": 1122,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 45,
                        "highlight_start": 43,
                        "text": "            match self.get_or_try_init(|| Ok::<T, Void>(f())) {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#once_cell@1.18.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "once_cell",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0531]: cannot find tuple struct or tuple variant `Ok` in this scope\n    --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs:1123:17\n     |\n1123 |                 Ok(val) => val,\n     |                 ^^ not found in this scope\n     |\nhelp: consider importing this tuple variant\n     |\n866  +     use core::result::Result::Ok;\n     |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this tuple variant",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 28913,
                        "byte_start": 28913,
                        "column_end": 5,
                        "column_start": 5,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 866,
                        "line_start": 866,
                        "suggested_replacement": "use core::result::Result::Ok;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 5,
                            "highlight_start": 5,
                            "text": "    use core::{"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0531",
                  "explanation": "An unknown tuple struct/variant has been used.\n\nErroneous code example:\n\n```compile_fail,E0531\nlet Type(x) = Type(12); // error!\nmatch Bar(12) {\n    Bar(x) => {} // error!\n    _ => {}\n}\n```\n\nIn most cases, it's either a forgotten import or a typo. However, let's look at\nhow you can have such a type:\n\n```edition2018\nstruct Type(u32); // this is a tuple struct\n\nenum Foo {\n    Bar(u32), // this is a tuple variant\n}\n\nuse Foo::*; // To use Foo's variant directly, we need to import them in\n            // the scope.\n```\n\nEither way, it should work fine with our previous code:\n\n```edition2018\nstruct Type(u32);\n\nenum Foo {\n    Bar(u32),\n}\nuse Foo::*;\n\nlet Type(x) = Type(12); // ok!\nmatch Type(12) {\n    Type(x) => {} // ok!\n    _ => {}\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find tuple struct or tuple variant `Ok` in this scope",
                "spans": [
                  {
                    "byte_end": 37402,
                    "byte_start": 37400,
                    "column_end": 19,
                    "column_start": 17,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 1123,
                    "line_start": 1123,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 19,
                        "highlight_start": 17,
                        "text": "                Ok(val) => val,"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#once_cell@1.18.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "once_cell",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0531]: cannot find tuple struct or tuple variant `Err` in this scope\n    --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs:1124:17\n     |\n1124 |                 Err(void) => match void {},\n     |                 ^^^ not found in this scope\n     |\nhelp: consider importing this tuple variant\n     |\n866  +     use core::result::Result::Err;\n     |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this tuple variant",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 28913,
                        "byte_start": 28913,
                        "column_end": 5,
                        "column_start": 5,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 866,
                        "line_start": 866,
                        "suggested_replacement": "use core::result::Result::Err;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 5,
                            "highlight_start": 5,
                            "text": "    use core::{"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0531",
                  "explanation": "An unknown tuple struct/variant has been used.\n\nErroneous code example:\n\n```compile_fail,E0531\nlet Type(x) = Type(12); // error!\nmatch Bar(12) {\n    Bar(x) => {} // error!\n    _ => {}\n}\n```\n\nIn most cases, it's either a forgotten import or a typo. However, let's look at\nhow you can have such a type:\n\n```edition2018\nstruct Type(u32); // this is a tuple struct\n\nenum Foo {\n    Bar(u32), // this is a tuple variant\n}\n\nuse Foo::*; // To use Foo's variant directly, we need to import them in\n            // the scope.\n```\n\nEither way, it should work fine with our previous code:\n\n```edition2018\nstruct Type(u32);\n\nenum Foo {\n    Bar(u32),\n}\nuse Foo::*;\n\nlet Type(x) = Type(12); // ok!\nmatch Type(12) {\n    Type(x) => {} // ok!\n    _ => {}\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find tuple struct or tuple variant `Err` in this scope",
                "spans": [
                  {
                    "byte_end": 37435,
                    "byte_start": 37432,
                    "column_end": 20,
                    "column_start": 17,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 1124,
                    "line_start": 1124,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 20,
                        "highlight_start": 17,
                        "text": "                Err(void) => match void {},"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#once_cell@1.18.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "once_cell",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0405]: cannot find trait `FnOnce` in this scope\n    --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs:1156:16\n     |\n1156 |             F: FnOnce() -> Result<T, E>,\n     |                ^^^^^^ not found in this scope\n     |\nhelp: consider importing this trait\n     |\n866  +     use core::ops::FnOnce;\n     |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this trait",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 28913,
                        "byte_start": 28913,
                        "column_end": 5,
                        "column_start": 5,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 866,
                        "line_start": 866,
                        "suggested_replacement": "use core::ops::FnOnce;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 5,
                            "highlight_start": 5,
                            "text": "    use core::{"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0405",
                  "explanation": "The code refers to a trait that is not in scope.\n\nErroneous code example:\n\n```compile_fail,E0405\nstruct Foo;\n\nimpl SomeTrait for Foo {} // error: trait `SomeTrait` is not in scope\n```\n\nPlease verify that the name of the trait wasn't misspelled and ensure that it\nwas imported. Example:\n\n```\n# #[cfg(for_demonstration_only)]\n// solution 1:\nuse some_file::SomeTrait;\n\n// solution 2:\ntrait SomeTrait {\n    // some functions\n}\n\nstruct Foo;\n\nimpl SomeTrait for Foo { // ok!\n    // implements functions\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find trait `FnOnce` in this scope",
                "spans": [
                  {
                    "byte_end": 38612,
                    "byte_start": 38606,
                    "column_end": 22,
                    "column_start": 16,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 1156,
                    "line_start": 1156,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 22,
                        "highlight_start": 16,
                        "text": "            F: FnOnce() -> Result<T, E>,"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#once_cell@1.18.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "once_cell",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0412]: cannot find type `Result` in this scope\n    --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs:1156:28\n     |\n1156 |             F: FnOnce() -> Result<T, E>,\n     |                            ^^^^^^ not found in this scope\n     |\nhelp: consider importing one of these items\n     |\n866  +     use crate::sync::fmt::Result;\n     |\n866  +     use core::fmt::Result;\n     |\n866  +     use core::result::Result;\n     |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing one of these items",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 28913,
                        "byte_start": 28913,
                        "column_end": 5,
                        "column_start": 5,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 866,
                        "line_start": 866,
                        "suggested_replacement": "use crate::sync::fmt::Result;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 5,
                            "highlight_start": 5,
                            "text": "    use core::{"
                          }
                        ]
                      },
                      {
                        "byte_end": 28913,
                        "byte_start": 28913,
                        "column_end": 5,
                        "column_start": 5,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 866,
                        "line_start": 866,
                        "suggested_replacement": "use core::fmt::Result;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 5,
                            "highlight_start": 5,
                            "text": "    use core::{"
                          }
                        ]
                      },
                      {
                        "byte_end": 28913,
                        "byte_start": 28913,
                        "column_end": 5,
                        "column_start": 5,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 866,
                        "line_start": 866,
                        "suggested_replacement": "use core::result::Result;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 5,
                            "highlight_start": 5,
                            "text": "    use core::{"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0412",
                  "explanation": "A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"
                },
                "level": "error",
                "message": "cannot find type `Result` in this scope",
                "spans": [
                  {
                    "byte_end": 38624,
                    "byte_start": 38618,
                    "column_end": 34,
                    "column_start": 28,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 1156,
                    "line_start": 1156,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 34,
                        "highlight_start": 28,
                        "text": "            F: FnOnce() -> Result<T, E>,"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#once_cell@1.18.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "once_cell",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0412]: cannot find type `Result` in this scope\n    --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs:1154:54\n     |\n1154 |         pub fn get_or_try_init<F, E>(&self, f: F) -> Result<&T, E>\n     |                                                      ^^^^^^ not found in this scope\n     |\nhelp: consider importing one of these items\n     |\n866  +     use crate::sync::fmt::Result;\n     |\n866  +     use core::fmt::Result;\n     |\n866  +     use core::result::Result;\n     |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing one of these items",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 28913,
                        "byte_start": 28913,
                        "column_end": 5,
                        "column_start": 5,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 866,
                        "line_start": 866,
                        "suggested_replacement": "use crate::sync::fmt::Result;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 5,
                            "highlight_start": 5,
                            "text": "    use core::{"
                          }
                        ]
                      },
                      {
                        "byte_end": 28913,
                        "byte_start": 28913,
                        "column_end": 5,
                        "column_start": 5,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 866,
                        "line_start": 866,
                        "suggested_replacement": "use core::fmt::Result;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 5,
                            "highlight_start": 5,
                            "text": "    use core::{"
                          }
                        ]
                      },
                      {
                        "byte_end": 28913,
                        "byte_start": 28913,
                        "column_end": 5,
                        "column_start": 5,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 866,
                        "line_start": 866,
                        "suggested_replacement": "use core::result::Result;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 5,
                            "highlight_start": 5,
                            "text": "    use core::{"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0412",
                  "explanation": "A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"
                },
                "level": "error",
                "message": "cannot find type `Result` in this scope",
                "spans": [
                  {
                    "byte_end": 38569,
                    "byte_start": 38563,
                    "column_end": 60,
                    "column_start": 54,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 1154,
                    "line_start": 1154,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 60,
                        "highlight_start": 54,
                        "text": "        pub fn get_or_try_init<F, E>(&self, f: F) -> Result<&T, E>"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#once_cell@1.18.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "once_cell",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0531]: cannot find tuple struct or tuple variant `Some` in this scope\n    --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs:1159:20\n     |\n1159 |             if let Some(value) = self.get() {\n     |                    ^^^^ not found in this scope\n     |\nhelp: consider importing this tuple variant\n     |\n866  +     use core::option::Option::Some;\n     |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this tuple variant",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 28913,
                        "byte_start": 28913,
                        "column_end": 5,
                        "column_start": 5,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 866,
                        "line_start": 866,
                        "suggested_replacement": "use core::option::Option::Some;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 5,
                            "highlight_start": 5,
                            "text": "    use core::{"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0531",
                  "explanation": "An unknown tuple struct/variant has been used.\n\nErroneous code example:\n\n```compile_fail,E0531\nlet Type(x) = Type(12); // error!\nmatch Bar(12) {\n    Bar(x) => {} // error!\n    _ => {}\n}\n```\n\nIn most cases, it's either a forgotten import or a typo. However, let's look at\nhow you can have such a type:\n\n```edition2018\nstruct Type(u32); // this is a tuple struct\n\nenum Foo {\n    Bar(u32), // this is a tuple variant\n}\n\nuse Foo::*; // To use Foo's variant directly, we need to import them in\n            // the scope.\n```\n\nEither way, it should work fine with our previous code:\n\n```edition2018\nstruct Type(u32);\n\nenum Foo {\n    Bar(u32),\n}\nuse Foo::*;\n\nlet Type(x) = Type(12); // ok!\nmatch Type(12) {\n    Type(x) => {} // ok!\n    _ => {}\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find tuple struct or tuple variant `Some` in this scope",
                "spans": [
                  {
                    "byte_end": 38696,
                    "byte_start": 38692,
                    "column_end": 24,
                    "column_start": 20,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 1159,
                    "line_start": 1159,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 24,
                        "highlight_start": 20,
                        "text": "            if let Some(value) = self.get() {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#once_cell@1.18.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "once_cell",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0425]: cannot find function, tuple struct or tuple variant `Ok` in this scope\n    --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs:1160:24\n     |\n1160 |                 return Ok(value);\n     |                        ^^ not found in this scope\n     |\nhelp: consider importing this tuple variant\n     |\n866  +     use core::result::Result::Ok;\n     |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this tuple variant",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 28913,
                        "byte_start": 28913,
                        "column_end": 5,
                        "column_start": 5,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 866,
                        "line_start": 866,
                        "suggested_replacement": "use core::result::Result::Ok;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 5,
                            "highlight_start": 5,
                            "text": "    use core::{"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0425",
                  "explanation": "An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"
                },
                "level": "error",
                "message": "cannot find function, tuple struct or tuple variant `Ok` in this scope",
                "spans": [
                  {
                    "byte_end": 38744,
                    "byte_start": 38742,
                    "column_end": 26,
                    "column_start": 24,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 1160,
                    "line_start": 1160,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 26,
                        "highlight_start": 24,
                        "text": "                return Ok(value);"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#once_cell@1.18.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "once_cell",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0425]: cannot find function, tuple struct or tuple variant `Ok` in this scope\n    --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs:1167:13\n     |\n1167 |             Ok(unsafe { self.get_unchecked() })\n     |             ^^ not found in this scope\n     |\nhelp: consider importing this tuple variant\n     |\n866  +     use core::result::Result::Ok;\n     |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this tuple variant",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 28913,
                        "byte_start": 28913,
                        "column_end": 5,
                        "column_start": 5,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 866,
                        "line_start": 866,
                        "suggested_replacement": "use core::result::Result::Ok;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 5,
                            "highlight_start": 5,
                            "text": "    use core::{"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0425",
                  "explanation": "An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"
                },
                "level": "error",
                "message": "cannot find function, tuple struct or tuple variant `Ok` in this scope",
                "spans": [
                  {
                    "byte_end": 38916,
                    "byte_start": 38914,
                    "column_end": 15,
                    "column_start": 13,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 1167,
                    "line_start": 1167,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 15,
                        "highlight_start": 13,
                        "text": "            Ok(unsafe { self.get_unchecked() })"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#once_cell@1.18.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "once_cell",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0412]: cannot find type `Option` in this scope\n    --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs:1199:35\n     |\n1199 |         pub fn take(&mut self) -> Option<T> {\n     |                                   ^^^^^^ not found in this scope\n     |\nhelp: consider importing this enum\n     |\n866  +     use core::option::Option;\n     |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this enum",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 28913,
                        "byte_start": 28913,
                        "column_end": 5,
                        "column_start": 5,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 866,
                        "line_start": 866,
                        "suggested_replacement": "use core::option::Option;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 5,
                            "highlight_start": 5,
                            "text": "    use core::{"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0412",
                  "explanation": "A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"
                },
                "level": "error",
                "message": "cannot find type `Option` in this scope",
                "spans": [
                  {
                    "byte_end": 40137,
                    "byte_start": 40131,
                    "column_end": 41,
                    "column_start": 35,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 1199,
                    "line_start": 1199,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 41,
                        "highlight_start": 35,
                        "text": "        pub fn take(&mut self) -> Option<T> {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#once_cell@1.18.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "once_cell",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0412]: cannot find type `Option` in this scope\n    --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs:1219:36\n     |\n1219 |         pub fn into_inner(self) -> Option<T> {\n     |                                    ^^^^^^ not found in this scope\n     |\nhelp: consider importing this enum\n     |\n866  +     use core::option::Option;\n     |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this enum",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 28913,
                        "byte_start": 28913,
                        "column_end": 5,
                        "column_start": 5,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 866,
                        "line_start": 866,
                        "suggested_replacement": "use core::option::Option;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 5,
                            "highlight_start": 5,
                            "text": "    use core::{"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0412",
                  "explanation": "A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"
                },
                "level": "error",
                "message": "cannot find type `Option` in this scope",
                "spans": [
                  {
                    "byte_end": 40785,
                    "byte_start": 40779,
                    "column_end": 42,
                    "column_start": 36,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 1219,
                    "line_start": 1219,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 42,
                        "highlight_start": 36,
                        "text": "        pub fn into_inner(self) -> Option<T> {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#once_cell@1.18.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "once_cell",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0412]: cannot find type `Option` in this scope\n    --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs:1259:20\n     |\n1259 |         init: Cell<Option<F>>,\n     |                    ^^^^^^ not found in this scope\n     |\nhelp: consider importing this enum\n     |\n866  +     use core::option::Option;\n     |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this enum",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 28913,
                        "byte_start": 28913,
                        "column_end": 5,
                        "column_start": 5,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 866,
                        "line_start": 866,
                        "suggested_replacement": "use core::option::Option;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 5,
                            "highlight_start": 5,
                            "text": "    use core::{"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0412",
                  "explanation": "A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"
                },
                "level": "error",
                "message": "cannot find type `Option` in this scope",
                "spans": [
                  {
                    "byte_end": 41858,
                    "byte_start": 41852,
                    "column_end": 26,
                    "column_start": 20,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 1259,
                    "line_start": 1259,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 26,
                        "highlight_start": 20,
                        "text": "        init: Cell<Option<F>>,"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#once_cell@1.18.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "once_cell",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0405]: cannot find trait `Sync` in this scope\n    --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs:1272:29\n     |\n1272 |     unsafe impl<T, F: Send> Sync for Lazy<T, F> where OnceCell<T>: Sync {}\n     |                             ^^^^ not found in this scope\n     |\nhelp: consider importing this trait\n     |\n866  +     use core::marker::Sync;\n     |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this trait",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 28913,
                        "byte_start": 28913,
                        "column_end": 5,
                        "column_start": 5,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 866,
                        "line_start": 866,
                        "suggested_replacement": "use core::marker::Sync;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 5,
                            "highlight_start": 5,
                            "text": "    use core::{"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0405",
                  "explanation": "The code refers to a trait that is not in scope.\n\nErroneous code example:\n\n```compile_fail,E0405\nstruct Foo;\n\nimpl SomeTrait for Foo {} // error: trait `SomeTrait` is not in scope\n```\n\nPlease verify that the name of the trait wasn't misspelled and ensure that it\nwas imported. Example:\n\n```\n# #[cfg(for_demonstration_only)]\n// solution 1:\nuse some_file::SomeTrait;\n\n// solution 2:\ntrait SomeTrait {\n    // some functions\n}\n\nstruct Foo;\n\nimpl SomeTrait for Foo { // ok!\n    // implements functions\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find trait `Sync` in this scope",
                "spans": [
                  {
                    "byte_end": 42391,
                    "byte_start": 42387,
                    "column_end": 33,
                    "column_start": 29,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 1272,
                    "line_start": 1272,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 33,
                        "highlight_start": 29,
                        "text": "    unsafe impl<T, F: Send> Sync for Lazy<T, F> where OnceCell<T>: Sync {}"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#once_cell@1.18.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "once_cell",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0405]: cannot find trait `Send` in this scope\n    --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs:1272:23\n     |\n1272 |     unsafe impl<T, F: Send> Sync for Lazy<T, F> where OnceCell<T>: Sync {}\n     |                       ^^^^ not found in this scope\n     |\nhelp: consider importing this trait\n     |\n866  +     use core::marker::Send;\n     |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this trait",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 28913,
                        "byte_start": 28913,
                        "column_end": 5,
                        "column_start": 5,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 866,
                        "line_start": 866,
                        "suggested_replacement": "use core::marker::Send;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 5,
                            "highlight_start": 5,
                            "text": "    use core::{"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0405",
                  "explanation": "The code refers to a trait that is not in scope.\n\nErroneous code example:\n\n```compile_fail,E0405\nstruct Foo;\n\nimpl SomeTrait for Foo {} // error: trait `SomeTrait` is not in scope\n```\n\nPlease verify that the name of the trait wasn't misspelled and ensure that it\nwas imported. Example:\n\n```\n# #[cfg(for_demonstration_only)]\n// solution 1:\nuse some_file::SomeTrait;\n\n// solution 2:\ntrait SomeTrait {\n    // some functions\n}\n\nstruct Foo;\n\nimpl SomeTrait for Foo { // ok!\n    // implements functions\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find trait `Send` in this scope",
                "spans": [
                  {
                    "byte_end": 42385,
                    "byte_start": 42381,
                    "column_end": 27,
                    "column_start": 23,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 1272,
                    "line_start": 1272,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 27,
                        "highlight_start": 23,
                        "text": "    unsafe impl<T, F: Send> Sync for Lazy<T, F> where OnceCell<T>: Sync {}"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#once_cell@1.18.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "once_cell",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0405]: cannot find trait `Sync` in this scope\n    --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs:1272:68\n     |\n1272 |     unsafe impl<T, F: Send> Sync for Lazy<T, F> where OnceCell<T>: Sync {}\n     |                                                                    ^^^^ not found in this scope\n     |\nhelp: consider importing this trait\n     |\n866  +     use core::marker::Sync;\n     |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this trait",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 28913,
                        "byte_start": 28913,
                        "column_end": 5,
                        "column_start": 5,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 866,
                        "line_start": 866,
                        "suggested_replacement": "use core::marker::Sync;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 5,
                            "highlight_start": 5,
                            "text": "    use core::{"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0405",
                  "explanation": "The code refers to a trait that is not in scope.\n\nErroneous code example:\n\n```compile_fail,E0405\nstruct Foo;\n\nimpl SomeTrait for Foo {} // error: trait `SomeTrait` is not in scope\n```\n\nPlease verify that the name of the trait wasn't misspelled and ensure that it\nwas imported. Example:\n\n```\n# #[cfg(for_demonstration_only)]\n// solution 1:\nuse some_file::SomeTrait;\n\n// solution 2:\ntrait SomeTrait {\n    // some functions\n}\n\nstruct Foo;\n\nimpl SomeTrait for Foo { // ok!\n    // implements functions\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find trait `Sync` in this scope",
                "spans": [
                  {
                    "byte_end": 42430,
                    "byte_start": 42426,
                    "column_end": 72,
                    "column_start": 68,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 1272,
                    "line_start": 1272,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 72,
                        "highlight_start": 68,
                        "text": "    unsafe impl<T, F: Send> Sync for Lazy<T, F> where OnceCell<T>: Sync {}"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#once_cell@1.18.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "once_cell",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0425]: cannot find function, tuple struct or tuple variant `Some` in this scope\n    --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs:1281:59\n     |\n1281 |             Lazy { cell: OnceCell::new(), init: Cell::new(Some(f)) }\n     |                                                           ^^^^ not found in this scope\n     |\nhelp: consider importing this tuple variant\n     |\n866  +     use core::option::Option::Some;\n     |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this tuple variant",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 28913,
                        "byte_start": 28913,
                        "column_end": 5,
                        "column_start": 5,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 866,
                        "line_start": 866,
                        "suggested_replacement": "use core::option::Option::Some;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 5,
                            "highlight_start": 5,
                            "text": "    use core::{"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0425",
                  "explanation": "An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"
                },
                "level": "error",
                "message": "cannot find function, tuple struct or tuple variant `Some` in this scope",
                "spans": [
                  {
                    "byte_end": 42794,
                    "byte_start": 42790,
                    "column_end": 63,
                    "column_start": 59,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 1281,
                    "line_start": 1281,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 63,
                        "highlight_start": 59,
                        "text": "            Lazy { cell: OnceCell::new(), init: Cell::new(Some(f)) }"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#once_cell@1.18.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "once_cell",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0412]: cannot find type `Result` in this scope\n    --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs:1287:48\n     |\n1287 |         pub fn into_value(this: Lazy<T, F>) -> Result<T, F> {\n     |                                                ^^^^^^ not found in this scope\n     |\nhelp: consider importing one of these items\n     |\n866  +     use crate::sync::fmt::Result;\n     |\n866  +     use core::fmt::Result;\n     |\n866  +     use core::result::Result;\n     |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing one of these items",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 28913,
                        "byte_start": 28913,
                        "column_end": 5,
                        "column_start": 5,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 866,
                        "line_start": 866,
                        "suggested_replacement": "use crate::sync::fmt::Result;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 5,
                            "highlight_start": 5,
                            "text": "    use core::{"
                          }
                        ]
                      },
                      {
                        "byte_end": 28913,
                        "byte_start": 28913,
                        "column_end": 5,
                        "column_start": 5,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 866,
                        "line_start": 866,
                        "suggested_replacement": "use core::fmt::Result;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 5,
                            "highlight_start": 5,
                            "text": "    use core::{"
                          }
                        ]
                      },
                      {
                        "byte_end": 28913,
                        "byte_start": 28913,
                        "column_end": 5,
                        "column_start": 5,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 866,
                        "line_start": 866,
                        "suggested_replacement": "use core::result::Result;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 5,
                            "highlight_start": 5,
                            "text": "    use core::{"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0412",
                  "explanation": "A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"
                },
                "level": "error",
                "message": "cannot find type `Result` in this scope",
                "spans": [
                  {
                    "byte_end": 43019,
                    "byte_start": 43013,
                    "column_end": 54,
                    "column_start": 48,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 1287,
                    "line_start": 1287,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 54,
                        "highlight_start": 48,
                        "text": "        pub fn into_value(this: Lazy<T, F>) -> Result<T, F> {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#once_cell@1.18.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "once_cell",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0405]: cannot find trait `FnOnce` in this scope\n    --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs:1296:16\n     |\n1296 |     impl<T, F: FnOnce() -> T> Lazy<T, F> {\n     |                ^^^^^^ not found in this scope\n     |\nhelp: consider importing this trait\n     |\n866  +     use core::ops::FnOnce;\n     |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this trait",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 28913,
                        "byte_start": 28913,
                        "column_end": 5,
                        "column_start": 5,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 866,
                        "line_start": 866,
                        "suggested_replacement": "use core::ops::FnOnce;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 5,
                            "highlight_start": 5,
                            "text": "    use core::{"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0405",
                  "explanation": "The code refers to a trait that is not in scope.\n\nErroneous code example:\n\n```compile_fail,E0405\nstruct Foo;\n\nimpl SomeTrait for Foo {} // error: trait `SomeTrait` is not in scope\n```\n\nPlease verify that the name of the trait wasn't misspelled and ensure that it\nwas imported. Example:\n\n```\n# #[cfg(for_demonstration_only)]\n// solution 1:\nuse some_file::SomeTrait;\n\n// solution 2:\ntrait SomeTrait {\n    // some functions\n}\n\nstruct Foo;\n\nimpl SomeTrait for Foo { // ok!\n    // implements functions\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find trait `FnOnce` in this scope",
                "spans": [
                  {
                    "byte_end": 43295,
                    "byte_start": 43289,
                    "column_end": 22,
                    "column_start": 16,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 1296,
                    "line_start": 1296,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 22,
                        "highlight_start": 16,
                        "text": "    impl<T, F: FnOnce() -> T> Lazy<T, F> {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#once_cell@1.18.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "once_cell",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0531]: cannot find tuple struct or tuple variant `Some` in this scope\n    --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs:1312:17\n     |\n1312 |                 Some(f) => f(),\n     |                 ^^^^ not found in this scope\n     |\nhelp: consider importing this tuple variant\n     |\n866  +     use core::option::Option::Some;\n     |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this tuple variant",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 28913,
                        "byte_start": 28913,
                        "column_end": 5,
                        "column_start": 5,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 866,
                        "line_start": 866,
                        "suggested_replacement": "use core::option::Option::Some;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 5,
                            "highlight_start": 5,
                            "text": "    use core::{"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0531",
                  "explanation": "An unknown tuple struct/variant has been used.\n\nErroneous code example:\n\n```compile_fail,E0531\nlet Type(x) = Type(12); // error!\nmatch Bar(12) {\n    Bar(x) => {} // error!\n    _ => {}\n}\n```\n\nIn most cases, it's either a forgotten import or a typo. However, let's look at\nhow you can have such a type:\n\n```edition2018\nstruct Type(u32); // this is a tuple struct\n\nenum Foo {\n    Bar(u32), // this is a tuple variant\n}\n\nuse Foo::*; // To use Foo's variant directly, we need to import them in\n            // the scope.\n```\n\nEither way, it should work fine with our previous code:\n\n```edition2018\nstruct Type(u32);\n\nenum Foo {\n    Bar(u32),\n}\nuse Foo::*;\n\nlet Type(x) = Type(12); // ok!\nmatch Type(12) {\n    Type(x) => {} // ok!\n    _ => {}\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find tuple struct or tuple variant `Some` in this scope",
                "spans": [
                  {
                    "byte_end": 43876,
                    "byte_start": 43872,
                    "column_end": 21,
                    "column_start": 17,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 1312,
                    "line_start": 1312,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 21,
                        "highlight_start": 17,
                        "text": "                Some(f) => f(),"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#once_cell@1.18.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "once_cell",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0531]: cannot find tuple struct or tuple variant `Some` in this scope\n    --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs:1332:21\n     |\n1332 |                     Some(f) => f(),\n     |                     ^^^^ not found in this scope\n     |\nhelp: consider importing this tuple variant\n     |\n866  +     use core::option::Option::Some;\n     |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this tuple variant",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 28913,
                        "byte_start": 28913,
                        "column_end": 5,
                        "column_start": 5,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 866,
                        "line_start": 866,
                        "suggested_replacement": "use core::option::Option::Some;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 5,
                            "highlight_start": 5,
                            "text": "    use core::{"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0531",
                  "explanation": "An unknown tuple struct/variant has been used.\n\nErroneous code example:\n\n```compile_fail,E0531\nlet Type(x) = Type(12); // error!\nmatch Bar(12) {\n    Bar(x) => {} // error!\n    _ => {}\n}\n```\n\nIn most cases, it's either a forgotten import or a typo. However, let's look at\nhow you can have such a type:\n\n```edition2018\nstruct Type(u32); // this is a tuple struct\n\nenum Foo {\n    Bar(u32), // this is a tuple variant\n}\n\nuse Foo::*; // To use Foo's variant directly, we need to import them in\n            // the scope.\n```\n\nEither way, it should work fine with our previous code:\n\n```edition2018\nstruct Type(u32);\n\nenum Foo {\n    Bar(u32),\n}\nuse Foo::*;\n\nlet Type(x) = Type(12); // ok!\nmatch Type(12) {\n    Type(x) => {} // ok!\n    _ => {}\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find tuple struct or tuple variant `Some` in this scope",
                "spans": [
                  {
                    "byte_end": 44602,
                    "byte_start": 44598,
                    "column_end": 25,
                    "column_start": 21,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 1332,
                    "line_start": 1332,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 25,
                        "highlight_start": 21,
                        "text": "                    Some(f) => f(),"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#once_cell@1.18.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "once_cell",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0412]: cannot find type `Option` in this scope\n    --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs:1353:42\n     |\n1353 |         pub fn get(this: &Lazy<T, F>) -> Option<&T> {\n     |                                          ^^^^^^ not found in this scope\n     |\nhelp: consider importing this enum\n     |\n866  +     use core::option::Option;\n     |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this enum",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 28913,
                        "byte_start": 28913,
                        "column_end": 5,
                        "column_start": 5,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 866,
                        "line_start": 866,
                        "suggested_replacement": "use core::option::Option;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 5,
                            "highlight_start": 5,
                            "text": "    use core::{"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0412",
                  "explanation": "A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"
                },
                "level": "error",
                "message": "cannot find type `Option` in this scope",
                "spans": [
                  {
                    "byte_end": 45343,
                    "byte_start": 45337,
                    "column_end": 48,
                    "column_start": 42,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 1353,
                    "line_start": 1353,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 48,
                        "highlight_start": 42,
                        "text": "        pub fn get(this: &Lazy<T, F>) -> Option<&T> {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#once_cell@1.18.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "once_cell",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0412]: cannot find type `Option` in this scope\n    --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs:1370:50\n     |\n1370 |         pub fn get_mut(this: &mut Lazy<T, F>) -> Option<&mut T> {\n     |                                                  ^^^^^^ not found in this scope\n     |\nhelp: consider importing this enum\n     |\n866  +     use core::option::Option;\n     |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this enum",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 28913,
                        "byte_start": 28913,
                        "column_end": 5,
                        "column_start": 5,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 866,
                        "line_start": 866,
                        "suggested_replacement": "use core::option::Option;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 5,
                            "highlight_start": 5,
                            "text": "    use core::{"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0412",
                  "explanation": "A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"
                },
                "level": "error",
                "message": "cannot find type `Option` in this scope",
                "spans": [
                  {
                    "byte_end": 45901,
                    "byte_start": 45895,
                    "column_end": 56,
                    "column_start": 50,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 1370,
                    "line_start": 1370,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 56,
                        "highlight_start": 50,
                        "text": "        pub fn get_mut(this: &mut Lazy<T, F>) -> Option<&mut T> {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#once_cell@1.18.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "once_cell",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0405]: cannot find trait `FnOnce` in this scope\n    --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs:1375:16\n     |\n1375 |     impl<T, F: FnOnce() -> T> Deref for Lazy<T, F> {\n     |                ^^^^^^ not found in this scope\n     |\nhelp: consider importing this trait\n     |\n866  +     use core::ops::FnOnce;\n     |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this trait",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 28913,
                        "byte_start": 28913,
                        "column_end": 5,
                        "column_start": 5,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 866,
                        "line_start": 866,
                        "suggested_replacement": "use core::ops::FnOnce;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 5,
                            "highlight_start": 5,
                            "text": "    use core::{"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0405",
                  "explanation": "The code refers to a trait that is not in scope.\n\nErroneous code example:\n\n```compile_fail,E0405\nstruct Foo;\n\nimpl SomeTrait for Foo {} // error: trait `SomeTrait` is not in scope\n```\n\nPlease verify that the name of the trait wasn't misspelled and ensure that it\nwas imported. Example:\n\n```\n# #[cfg(for_demonstration_only)]\n// solution 1:\nuse some_file::SomeTrait;\n\n// solution 2:\ntrait SomeTrait {\n    // some functions\n}\n\nstruct Foo;\n\nimpl SomeTrait for Foo { // ok!\n    // implements functions\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find trait `FnOnce` in this scope",
                "spans": [
                  {
                    "byte_end": 45982,
                    "byte_start": 45976,
                    "column_end": 22,
                    "column_start": 16,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 1375,
                    "line_start": 1375,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 22,
                        "highlight_start": 16,
                        "text": "    impl<T, F: FnOnce() -> T> Deref for Lazy<T, F> {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#once_cell@1.18.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "once_cell",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0405]: cannot find trait `FnOnce` in this scope\n    --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs:1382:16\n     |\n1382 |     impl<T, F: FnOnce() -> T> DerefMut for Lazy<T, F> {\n     |                ^^^^^^ not found in this scope\n     |\nhelp: consider importing this trait\n     |\n866  +     use core::ops::FnOnce;\n     |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this trait",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 28913,
                        "byte_start": 28913,
                        "column_end": 5,
                        "column_start": 5,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 866,
                        "line_start": 866,
                        "suggested_replacement": "use core::ops::FnOnce;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 5,
                            "highlight_start": 5,
                            "text": "    use core::{"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0405",
                  "explanation": "The code refers to a trait that is not in scope.\n\nErroneous code example:\n\n```compile_fail,E0405\nstruct Foo;\n\nimpl SomeTrait for Foo {} // error: trait `SomeTrait` is not in scope\n```\n\nPlease verify that the name of the trait wasn't misspelled and ensure that it\nwas imported. Example:\n\n```\n# #[cfg(for_demonstration_only)]\n// solution 1:\nuse some_file::SomeTrait;\n\n// solution 2:\ntrait SomeTrait {\n    // some functions\n}\n\nstruct Foo;\n\nimpl SomeTrait for Foo { // ok!\n    // implements functions\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find trait `FnOnce` in this scope",
                "spans": [
                  {
                    "byte_end": 46139,
                    "byte_start": 46133,
                    "column_end": 22,
                    "column_start": 16,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 1382,
                    "line_start": 1382,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 22,
                        "highlight_start": 16,
                        "text": "    impl<T, F: FnOnce() -> T> DerefMut for Lazy<T, F> {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#once_cell@1.18.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "once_cell",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0405]: cannot find trait `Default` in this scope\n    --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs:1388:22\n     |\n1388 |     impl<T: Default> Default for Lazy<T> {\n     |                      ^^^^^^^ not found in this scope\n     |\nhelp: consider importing this trait\n     |\n866  +     use core::default::Default;\n     |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this trait",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 28913,
                        "byte_start": 28913,
                        "column_end": 5,
                        "column_start": 5,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 866,
                        "line_start": 866,
                        "suggested_replacement": "use core::default::Default;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 5,
                            "highlight_start": 5,
                            "text": "    use core::{"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0405",
                  "explanation": "The code refers to a trait that is not in scope.\n\nErroneous code example:\n\n```compile_fail,E0405\nstruct Foo;\n\nimpl SomeTrait for Foo {} // error: trait `SomeTrait` is not in scope\n```\n\nPlease verify that the name of the trait wasn't misspelled and ensure that it\nwas imported. Example:\n\n```\n# #[cfg(for_demonstration_only)]\n// solution 1:\nuse some_file::SomeTrait;\n\n// solution 2:\ntrait SomeTrait {\n    // some functions\n}\n\nstruct Foo;\n\nimpl SomeTrait for Foo { // ok!\n    // implements functions\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find trait `Default` in this scope",
                "spans": [
                  {
                    "byte_end": 46297,
                    "byte_start": 46290,
                    "column_end": 29,
                    "column_start": 22,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 1388,
                    "line_start": 1388,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 29,
                        "highlight_start": 22,
                        "text": "    impl<T: Default> Default for Lazy<T> {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#once_cell@1.18.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "once_cell",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0405]: cannot find trait `Default` in this scope\n    --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs:1388:13\n     |\n1388 |     impl<T: Default> Default for Lazy<T> {\n     |             ^^^^^^^ not found in this scope\n     |\nhelp: consider importing this trait\n     |\n866  +     use core::default::Default;\n     |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this trait",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 28913,
                        "byte_start": 28913,
                        "column_end": 5,
                        "column_start": 5,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 866,
                        "line_start": 866,
                        "suggested_replacement": "use core::default::Default;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 5,
                            "highlight_start": 5,
                            "text": "    use core::{"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0405",
                  "explanation": "The code refers to a trait that is not in scope.\n\nErroneous code example:\n\n```compile_fail,E0405\nstruct Foo;\n\nimpl SomeTrait for Foo {} // error: trait `SomeTrait` is not in scope\n```\n\nPlease verify that the name of the trait wasn't misspelled and ensure that it\nwas imported. Example:\n\n```\n# #[cfg(for_demonstration_only)]\n// solution 1:\nuse some_file::SomeTrait;\n\n// solution 2:\ntrait SomeTrait {\n    // some functions\n}\n\nstruct Foo;\n\nimpl SomeTrait for Foo { // ok!\n    // implements functions\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find trait `Default` in this scope",
                "spans": [
                  {
                    "byte_end": 46288,
                    "byte_start": 46281,
                    "column_end": 20,
                    "column_start": 13,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 1388,
                    "line_start": 1388,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 20,
                        "highlight_start": 13,
                        "text": "    impl<T: Default> Default for Lazy<T> {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#once_cell@1.18.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "once_cell",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0412]: cannot find type `Option` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\race.rs:48:26\n   |\n48 |     pub fn get(&self) -> Option<NonZeroUsize> {\n   |                          ^^^^^^ not found in this scope\n   |\nhelp: consider importing this enum\n   |\n24 + use core::option::Option;\n   |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this enum",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 1119,
                        "byte_start": 1119,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\race.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 24,
                        "line_start": 24,
                        "suggested_replacement": "use core::option::Option;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "#[cfg(not(feature = \"critical-section\"))]"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0412",
                  "explanation": "A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"
                },
                "level": "error",
                "message": "cannot find type `Option` in this scope",
                "spans": [
                  {
                    "byte_end": 1739,
                    "byte_start": 1733,
                    "column_end": 32,
                    "column_start": 26,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\race.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 48,
                    "line_start": 48,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 32,
                        "highlight_start": 26,
                        "text": "    pub fn get(&self) -> Option<NonZeroUsize> {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#once_cell@1.18.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "once_cell",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0412]: cannot find type `Result` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\race.rs:58:47\n   |\n58 |     pub fn set(&self, value: NonZeroUsize) -> Result<(), ()> {\n   |                                               ^^^^^^ not found in this scope\n   |\nhelp: consider importing one of these items\n   |\n24 + use core::fmt::Result;\n   |\n24 + use core::result::Result;\n   |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing one of these items",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 1119,
                        "byte_start": 1119,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\race.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 24,
                        "line_start": 24,
                        "suggested_replacement": "use core::fmt::Result;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "#[cfg(not(feature = \"critical-section\"))]"
                          }
                        ]
                      },
                      {
                        "byte_end": 1119,
                        "byte_start": 1119,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\race.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 24,
                        "line_start": 24,
                        "suggested_replacement": "use core::result::Result;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "#[cfg(not(feature = \"critical-section\"))]"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0412",
                  "explanation": "A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"
                },
                "level": "error",
                "message": "cannot find type `Result` in this scope",
                "spans": [
                  {
                    "byte_end": 2058,
                    "byte_start": 2052,
                    "column_end": 53,
                    "column_start": 47,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\race.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 58,
                    "line_start": 58,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 53,
                        "highlight_start": 47,
                        "text": "    pub fn set(&self, value: NonZeroUsize) -> Result<(), ()> {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#once_cell@1.18.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "once_cell",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0531]: cannot find tuple struct or tuple variant `Ok` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\race.rs:62:13\n   |\n62 |             Ok(_) => Ok(()),\n   |             ^^ not found in this scope\n   |\nhelp: consider importing this tuple variant\n   |\n24 + use core::result::Result::Ok;\n   |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this tuple variant",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 1119,
                        "byte_start": 1119,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\race.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 24,
                        "line_start": 24,
                        "suggested_replacement": "use core::result::Result::Ok;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "#[cfg(not(feature = \"critical-section\"))]"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0531",
                  "explanation": "An unknown tuple struct/variant has been used.\n\nErroneous code example:\n\n```compile_fail,E0531\nlet Type(x) = Type(12); // error!\nmatch Bar(12) {\n    Bar(x) => {} // error!\n    _ => {}\n}\n```\n\nIn most cases, it's either a forgotten import or a typo. However, let's look at\nhow you can have such a type:\n\n```edition2018\nstruct Type(u32); // this is a tuple struct\n\nenum Foo {\n    Bar(u32), // this is a tuple variant\n}\n\nuse Foo::*; // To use Foo's variant directly, we need to import them in\n            // the scope.\n```\n\nEither way, it should work fine with our previous code:\n\n```edition2018\nstruct Type(u32);\n\nenum Foo {\n    Bar(u32),\n}\nuse Foo::*;\n\nlet Type(x) = Type(12); // ok!\nmatch Type(12) {\n    Type(x) => {} // ok!\n    _ => {}\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find tuple struct or tuple variant `Ok` in this scope",
                "spans": [
                  {
                    "byte_end": 2225,
                    "byte_start": 2223,
                    "column_end": 15,
                    "column_start": 13,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\race.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 62,
                    "line_start": 62,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 15,
                        "highlight_start": 13,
                        "text": "            Ok(_) => Ok(()),"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#once_cell@1.18.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "once_cell",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0425]: cannot find function, tuple struct or tuple variant `Ok` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\race.rs:62:22\n   |\n62 |             Ok(_) => Ok(()),\n   |                      ^^ not found in this scope\n   |\nhelp: consider importing this tuple variant\n   |\n24 + use core::result::Result::Ok;\n   |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this tuple variant",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 1119,
                        "byte_start": 1119,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\race.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 24,
                        "line_start": 24,
                        "suggested_replacement": "use core::result::Result::Ok;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "#[cfg(not(feature = \"critical-section\"))]"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0425",
                  "explanation": "An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"
                },
                "level": "error",
                "message": "cannot find function, tuple struct or tuple variant `Ok` in this scope",
                "spans": [
                  {
                    "byte_end": 2234,
                    "byte_start": 2232,
                    "column_end": 24,
                    "column_start": 22,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\race.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 62,
                    "line_start": 62,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 24,
                        "highlight_start": 22,
                        "text": "            Ok(_) => Ok(()),"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#once_cell@1.18.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "once_cell",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0531]: cannot find tuple struct or tuple variant `Err` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\race.rs:63:13\n   |\n63 |             Err(_) => Err(()),\n   |             ^^^ not found in this scope\n   |\nhelp: consider importing this tuple variant\n   |\n24 + use core::result::Result::Err;\n   |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this tuple variant",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 1119,
                        "byte_start": 1119,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\race.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 24,
                        "line_start": 24,
                        "suggested_replacement": "use core::result::Result::Err;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "#[cfg(not(feature = \"critical-section\"))]"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0531",
                  "explanation": "An unknown tuple struct/variant has been used.\n\nErroneous code example:\n\n```compile_fail,E0531\nlet Type(x) = Type(12); // error!\nmatch Bar(12) {\n    Bar(x) => {} // error!\n    _ => {}\n}\n```\n\nIn most cases, it's either a forgotten import or a typo. However, let's look at\nhow you can have such a type:\n\n```edition2018\nstruct Type(u32); // this is a tuple struct\n\nenum Foo {\n    Bar(u32), // this is a tuple variant\n}\n\nuse Foo::*; // To use Foo's variant directly, we need to import them in\n            // the scope.\n```\n\nEither way, it should work fine with our previous code:\n\n```edition2018\nstruct Type(u32);\n\nenum Foo {\n    Bar(u32),\n}\nuse Foo::*;\n\nlet Type(x) = Type(12); // ok!\nmatch Type(12) {\n    Type(x) => {} // ok!\n    _ => {}\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find tuple struct or tuple variant `Err` in this scope",
                "spans": [
                  {
                    "byte_end": 2255,
                    "byte_start": 2252,
                    "column_end": 16,
                    "column_start": 13,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\race.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 63,
                    "line_start": 63,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 16,
                        "highlight_start": 13,
                        "text": "            Err(_) => Err(()),"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#once_cell@1.18.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "once_cell",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0425]: cannot find function, tuple struct or tuple variant `Err` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\race.rs:63:23\n   |\n63 |             Err(_) => Err(()),\n   |                       ^^^ not found in this scope\n   |\nhelp: consider importing this tuple variant\n   |\n24 + use core::result::Result::Err;\n   |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this tuple variant",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 1119,
                        "byte_start": 1119,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\race.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 24,
                        "line_start": 24,
                        "suggested_replacement": "use core::result::Result::Err;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "#[cfg(not(feature = \"critical-section\"))]"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0425",
                  "explanation": "An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"
                },
                "level": "error",
                "message": "cannot find function, tuple struct or tuple variant `Err` in this scope",
                "spans": [
                  {
                    "byte_end": 2265,
                    "byte_start": 2262,
                    "column_end": 26,
                    "column_start": 23,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\race.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 63,
                    "line_start": 63,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 26,
                        "highlight_start": 23,
                        "text": "            Err(_) => Err(()),"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#once_cell@1.18.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "once_cell",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0405]: cannot find trait `FnOnce` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\race.rs:75:12\n   |\n75 |         F: FnOnce() -> NonZeroUsize,\n   |            ^^^^^^ not found in this scope\n   |\nhelp: consider importing this trait\n   |\n24 + use core::ops::FnOnce;\n   |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this trait",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 1119,
                        "byte_start": 1119,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\race.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 24,
                        "line_start": 24,
                        "suggested_replacement": "use core::ops::FnOnce;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "#[cfg(not(feature = \"critical-section\"))]"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0405",
                  "explanation": "The code refers to a trait that is not in scope.\n\nErroneous code example:\n\n```compile_fail,E0405\nstruct Foo;\n\nimpl SomeTrait for Foo {} // error: trait `SomeTrait` is not in scope\n```\n\nPlease verify that the name of the trait wasn't misspelled and ensure that it\nwas imported. Example:\n\n```\n# #[cfg(for_demonstration_only)]\n// solution 1:\nuse some_file::SomeTrait;\n\n// solution 2:\ntrait SomeTrait {\n    // some functions\n}\n\nstruct Foo;\n\nimpl SomeTrait for Foo { // ok!\n    // implements functions\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find trait `FnOnce` in this scope",
                "spans": [
                  {
                    "byte_end": 2652,
                    "byte_start": 2646,
                    "column_end": 18,
                    "column_start": 12,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\race.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 75,
                    "line_start": 75,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 18,
                        "highlight_start": 12,
                        "text": "        F: FnOnce() -> NonZeroUsize,"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#once_cell@1.18.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "once_cell",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0425]: cannot find function, tuple struct or tuple variant `Ok` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\race.rs:78:39\n   |\n78 |         match self.get_or_try_init(|| Ok::<NonZeroUsize, Void>(f())) {\n   |                                       ^^ not found in this scope\n   |\nhelp: consider importing this tuple variant\n   |\n24 + use core::result::Result::Ok;\n   |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this tuple variant",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 1119,
                        "byte_start": 1119,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\race.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 24,
                        "line_start": 24,
                        "suggested_replacement": "use core::result::Result::Ok;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "#[cfg(not(feature = \"critical-section\"))]"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0425",
                  "explanation": "An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"
                },
                "level": "error",
                "message": "cannot find function, tuple struct or tuple variant `Ok` in this scope",
                "spans": [
                  {
                    "byte_end": 2739,
                    "byte_start": 2737,
                    "column_end": 41,
                    "column_start": 39,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\race.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 78,
                    "line_start": 78,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 41,
                        "highlight_start": 39,
                        "text": "        match self.get_or_try_init(|| Ok::<NonZeroUsize, Void>(f())) {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#once_cell@1.18.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "once_cell",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0531]: cannot find tuple struct or tuple variant `Ok` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\race.rs:79:13\n   |\n79 |             Ok(val) => val,\n   |             ^^ not found in this scope\n   |\nhelp: consider importing this tuple variant\n   |\n24 + use core::result::Result::Ok;\n   |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this tuple variant",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 1119,
                        "byte_start": 1119,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\race.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 24,
                        "line_start": 24,
                        "suggested_replacement": "use core::result::Result::Ok;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "#[cfg(not(feature = \"critical-section\"))]"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0531",
                  "explanation": "An unknown tuple struct/variant has been used.\n\nErroneous code example:\n\n```compile_fail,E0531\nlet Type(x) = Type(12); // error!\nmatch Bar(12) {\n    Bar(x) => {} // error!\n    _ => {}\n}\n```\n\nIn most cases, it's either a forgotten import or a typo. However, let's look at\nhow you can have such a type:\n\n```edition2018\nstruct Type(u32); // this is a tuple struct\n\nenum Foo {\n    Bar(u32), // this is a tuple variant\n}\n\nuse Foo::*; // To use Foo's variant directly, we need to import them in\n            // the scope.\n```\n\nEither way, it should work fine with our previous code:\n\n```edition2018\nstruct Type(u32);\n\nenum Foo {\n    Bar(u32),\n}\nuse Foo::*;\n\nlet Type(x) = Type(12); // ok!\nmatch Type(12) {\n    Type(x) => {} // ok!\n    _ => {}\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find tuple struct or tuple variant `Ok` in this scope",
                "spans": [
                  {
                    "byte_end": 2784,
                    "byte_start": 2782,
                    "column_end": 15,
                    "column_start": 13,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\race.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 79,
                    "line_start": 79,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 15,
                        "highlight_start": 13,
                        "text": "            Ok(val) => val,"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#once_cell@1.18.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "once_cell",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0531]: cannot find tuple struct or tuple variant `Err` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\race.rs:80:13\n   |\n80 |             Err(void) => match void {},\n   |             ^^^ not found in this scope\n   |\nhelp: consider importing this tuple variant\n   |\n24 + use core::result::Result::Err;\n   |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this tuple variant",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 1119,
                        "byte_start": 1119,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\race.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 24,
                        "line_start": 24,
                        "suggested_replacement": "use core::result::Result::Err;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "#[cfg(not(feature = \"critical-section\"))]"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0531",
                  "explanation": "An unknown tuple struct/variant has been used.\n\nErroneous code example:\n\n```compile_fail,E0531\nlet Type(x) = Type(12); // error!\nmatch Bar(12) {\n    Bar(x) => {} // error!\n    _ => {}\n}\n```\n\nIn most cases, it's either a forgotten import or a typo. However, let's look at\nhow you can have such a type:\n\n```edition2018\nstruct Type(u32); // this is a tuple struct\n\nenum Foo {\n    Bar(u32), // this is a tuple variant\n}\n\nuse Foo::*; // To use Foo's variant directly, we need to import them in\n            // the scope.\n```\n\nEither way, it should work fine with our previous code:\n\n```edition2018\nstruct Type(u32);\n\nenum Foo {\n    Bar(u32),\n}\nuse Foo::*;\n\nlet Type(x) = Type(12); // ok!\nmatch Type(12) {\n    Type(x) => {} // ok!\n    _ => {}\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find tuple struct or tuple variant `Err` in this scope",
                "spans": [
                  {
                    "byte_end": 2813,
                    "byte_start": 2810,
                    "column_end": 16,
                    "column_start": 13,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\race.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 80,
                    "line_start": 80,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 16,
                        "highlight_start": 13,
                        "text": "            Err(void) => match void {},"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#once_cell@1.18.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "once_cell",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0405]: cannot find trait `FnOnce` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\race.rs:93:12\n   |\n93 |         F: FnOnce() -> Result<NonZeroUsize, E>,\n   |            ^^^^^^ not found in this scope\n   |\nhelp: consider importing this trait\n   |\n24 + use core::ops::FnOnce;\n   |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this trait",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 1119,
                        "byte_start": 1119,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\race.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 24,
                        "line_start": 24,
                        "suggested_replacement": "use core::ops::FnOnce;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "#[cfg(not(feature = \"critical-section\"))]"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0405",
                  "explanation": "The code refers to a trait that is not in scope.\n\nErroneous code example:\n\n```compile_fail,E0405\nstruct Foo;\n\nimpl SomeTrait for Foo {} // error: trait `SomeTrait` is not in scope\n```\n\nPlease verify that the name of the trait wasn't misspelled and ensure that it\nwas imported. Example:\n\n```\n# #[cfg(for_demonstration_only)]\n// solution 1:\nuse some_file::SomeTrait;\n\n// solution 2:\ntrait SomeTrait {\n    // some functions\n}\n\nstruct Foo;\n\nimpl SomeTrait for Foo { // ok!\n    // implements functions\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find trait `FnOnce` in this scope",
                "spans": [
                  {
                    "byte_end": 3305,
                    "byte_start": 3299,
                    "column_end": 18,
                    "column_start": 12,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\race.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 93,
                    "line_start": 93,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 18,
                        "highlight_start": 12,
                        "text": "        F: FnOnce() -> Result<NonZeroUsize, E>,"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#once_cell@1.18.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "once_cell",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0412]: cannot find type `Result` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\race.rs:93:24\n   |\n93 |         F: FnOnce() -> Result<NonZeroUsize, E>,\n   |                        ^^^^^^ not found in this scope\n   |\nhelp: consider importing one of these items\n   |\n24 + use core::fmt::Result;\n   |\n24 + use core::result::Result;\n   |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing one of these items",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 1119,
                        "byte_start": 1119,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\race.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 24,
                        "line_start": 24,
                        "suggested_replacement": "use core::fmt::Result;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "#[cfg(not(feature = \"critical-section\"))]"
                          }
                        ]
                      },
                      {
                        "byte_end": 1119,
                        "byte_start": 1119,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\race.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 24,
                        "line_start": 24,
                        "suggested_replacement": "use core::result::Result;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "#[cfg(not(feature = \"critical-section\"))]"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0412",
                  "explanation": "A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"
                },
                "level": "error",
                "message": "cannot find type `Result` in this scope",
                "spans": [
                  {
                    "byte_end": 3317,
                    "byte_start": 3311,
                    "column_end": 30,
                    "column_start": 24,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\race.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 93,
                    "line_start": 93,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 30,
                        "highlight_start": 24,
                        "text": "        F: FnOnce() -> Result<NonZeroUsize, E>,"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#once_cell@1.18.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "once_cell",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0412]: cannot find type `Result` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\race.rs:91:50\n   |\n91 |     pub fn get_or_try_init<F, E>(&self, f: F) -> Result<NonZeroUsize, E>\n   |                                                  ^^^^^^ not found in this scope\n   |\nhelp: consider importing one of these items\n   |\n24 + use core::fmt::Result;\n   |\n24 + use core::result::Result;\n   |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing one of these items",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 1119,
                        "byte_start": 1119,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\race.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 24,
                        "line_start": 24,
                        "suggested_replacement": "use core::fmt::Result;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "#[cfg(not(feature = \"critical-section\"))]"
                          }
                        ]
                      },
                      {
                        "byte_end": 1119,
                        "byte_start": 1119,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\race.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 24,
                        "line_start": 24,
                        "suggested_replacement": "use core::result::Result;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "#[cfg(not(feature = \"critical-section\"))]"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0412",
                  "explanation": "A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"
                },
                "level": "error",
                "message": "cannot find type `Result` in this scope",
                "spans": [
                  {
                    "byte_end": 3260,
                    "byte_start": 3254,
                    "column_end": 56,
                    "column_start": 50,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\race.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 91,
                    "line_start": 91,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 56,
                        "highlight_start": 50,
                        "text": "    pub fn get_or_try_init<F, E>(&self, f: F) -> Result<NonZeroUsize, E>"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#once_cell@1.18.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "once_cell",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0531]: cannot find tuple struct or tuple variant `Some` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\race.rs:97:13\n   |\n97 |             Some(it) => it,\n   |             ^^^^ not found in this scope\n   |\nhelp: consider importing this tuple variant\n   |\n24 + use core::option::Option::Some;\n   |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this tuple variant",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 1119,
                        "byte_start": 1119,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\race.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 24,
                        "line_start": 24,
                        "suggested_replacement": "use core::option::Option::Some;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "#[cfg(not(feature = \"critical-section\"))]"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0531",
                  "explanation": "An unknown tuple struct/variant has been used.\n\nErroneous code example:\n\n```compile_fail,E0531\nlet Type(x) = Type(12); // error!\nmatch Bar(12) {\n    Bar(x) => {} // error!\n    _ => {}\n}\n```\n\nIn most cases, it's either a forgotten import or a typo. However, let's look at\nhow you can have such a type:\n\n```edition2018\nstruct Type(u32); // this is a tuple struct\n\nenum Foo {\n    Bar(u32), // this is a tuple variant\n}\n\nuse Foo::*; // To use Foo's variant directly, we need to import them in\n            // the scope.\n```\n\nEither way, it should work fine with our previous code:\n\n```edition2018\nstruct Type(u32);\n\nenum Foo {\n    Bar(u32),\n}\nuse Foo::*;\n\nlet Type(x) = Type(12); // ok!\nmatch Type(12) {\n    Type(x) => {} // ok!\n    _ => {}\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find tuple struct or tuple variant `Some` in this scope",
                "spans": [
                  {
                    "byte_end": 3461,
                    "byte_start": 3457,
                    "column_end": 17,
                    "column_start": 13,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\race.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 97,
                    "line_start": 97,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 17,
                        "highlight_start": 13,
                        "text": "            Some(it) => it,"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#once_cell@1.18.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "once_cell",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0531]: cannot find tuple struct or tuple variant `Err` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\race.rs:102:24\n    |\n102 |                 if let Err(old) = exchange {\n    |                        ^^^ not found in this scope\n    |\nhelp: consider importing this tuple variant\n    |\n24  + use core::result::Result::Err;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this tuple variant",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 1119,
                        "byte_start": 1119,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\race.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 24,
                        "line_start": 24,
                        "suggested_replacement": "use core::result::Result::Err;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "#[cfg(not(feature = \"critical-section\"))]"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0531",
                  "explanation": "An unknown tuple struct/variant has been used.\n\nErroneous code example:\n\n```compile_fail,E0531\nlet Type(x) = Type(12); // error!\nmatch Bar(12) {\n    Bar(x) => {} // error!\n    _ => {}\n}\n```\n\nIn most cases, it's either a forgotten import or a typo. However, let's look at\nhow you can have such a type:\n\n```edition2018\nstruct Type(u32); // this is a tuple struct\n\nenum Foo {\n    Bar(u32), // this is a tuple variant\n}\n\nuse Foo::*; // To use Foo's variant directly, we need to import them in\n            // the scope.\n```\n\nEither way, it should work fine with our previous code:\n\n```edition2018\nstruct Type(u32);\n\nenum Foo {\n    Bar(u32),\n}\nuse Foo::*;\n\nlet Type(x) = Type(12); // ok!\nmatch Type(12) {\n    Type(x) => {} // ok!\n    _ => {}\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find tuple struct or tuple variant `Err` in this scope",
                "spans": [
                  {
                    "byte_end": 3688,
                    "byte_start": 3685,
                    "column_end": 27,
                    "column_start": 24,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\race.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 102,
                    "line_start": 102,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 27,
                        "highlight_start": 24,
                        "text": "                if let Err(old) = exchange {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#once_cell@1.18.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "once_cell",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0425]: cannot find function, tuple struct or tuple variant `Ok` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\race.rs:108:9\n    |\n108 |         Ok(res)\n    |         ^^ not found in this scope\n    |\nhelp: consider importing this tuple variant\n    |\n24  + use core::result::Result::Ok;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this tuple variant",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 1119,
                        "byte_start": 1119,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\race.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 24,
                        "line_start": 24,
                        "suggested_replacement": "use core::result::Result::Ok;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "#[cfg(not(feature = \"critical-section\"))]"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0425",
                  "explanation": "An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"
                },
                "level": "error",
                "message": "cannot find function, tuple struct or tuple variant `Ok` in this scope",
                "spans": [
                  {
                    "byte_end": 3851,
                    "byte_start": 3849,
                    "column_end": 11,
                    "column_start": 9,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\race.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 108,
                    "line_start": 108,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 11,
                        "highlight_start": 9,
                        "text": "        Ok(res)"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#once_cell@1.18.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "once_cell",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0412]: cannot find type `Option` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\race.rs:127:26\n    |\n127 |     pub fn get(&self) -> Option<bool> {\n    |                          ^^^^^^ not found in this scope\n    |\nhelp: consider importing this enum\n    |\n24  + use core::option::Option;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this enum",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 1119,
                        "byte_start": 1119,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\race.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 24,
                        "line_start": 24,
                        "suggested_replacement": "use core::option::Option;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "#[cfg(not(feature = \"critical-section\"))]"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0412",
                  "explanation": "A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"
                },
                "level": "error",
                "message": "cannot find type `Option` in this scope",
                "spans": [
                  {
                    "byte_end": 4244,
                    "byte_start": 4238,
                    "column_end": 32,
                    "column_start": 26,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\race.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 127,
                    "line_start": 127,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 32,
                        "highlight_start": 26,
                        "text": "    pub fn get(&self) -> Option<bool> {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#once_cell@1.18.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "once_cell",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0412]: cannot find type `Result` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\race.rs:136:39\n    |\n136 |     pub fn set(&self, value: bool) -> Result<(), ()> {\n    |                                       ^^^^^^ not found in this scope\n    |\nhelp: consider importing one of these items\n    |\n24  + use core::fmt::Result;\n    |\n24  + use core::result::Result;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing one of these items",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 1119,
                        "byte_start": 1119,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\race.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 24,
                        "line_start": 24,
                        "suggested_replacement": "use core::fmt::Result;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "#[cfg(not(feature = \"critical-section\"))]"
                          }
                        ]
                      },
                      {
                        "byte_end": 1119,
                        "byte_start": 1119,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\race.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 24,
                        "line_start": 24,
                        "suggested_replacement": "use core::result::Result;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "#[cfg(not(feature = \"critical-section\"))]"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0412",
                  "explanation": "A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"
                },
                "level": "error",
                "message": "cannot find type `Result` in this scope",
                "spans": [
                  {
                    "byte_end": 4513,
                    "byte_start": 4507,
                    "column_end": 45,
                    "column_start": 39,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\race.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 136,
                    "line_start": 136,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 45,
                        "highlight_start": 39,
                        "text": "    pub fn set(&self, value: bool) -> Result<(), ()> {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#once_cell@1.18.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "once_cell",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0405]: cannot find trait `FnOnce` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\race.rs:148:12\n    |\n148 |         F: FnOnce() -> bool,\n    |            ^^^^^^ not found in this scope\n    |\nhelp: consider importing this trait\n    |\n24  + use core::ops::FnOnce;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this trait",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 1119,
                        "byte_start": 1119,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\race.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 24,
                        "line_start": 24,
                        "suggested_replacement": "use core::ops::FnOnce;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "#[cfg(not(feature = \"critical-section\"))]"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0405",
                  "explanation": "The code refers to a trait that is not in scope.\n\nErroneous code example:\n\n```compile_fail,E0405\nstruct Foo;\n\nimpl SomeTrait for Foo {} // error: trait `SomeTrait` is not in scope\n```\n\nPlease verify that the name of the trait wasn't misspelled and ensure that it\nwas imported. Example:\n\n```\n# #[cfg(for_demonstration_only)]\n// solution 1:\nuse some_file::SomeTrait;\n\n// solution 2:\ntrait SomeTrait {\n    // some functions\n}\n\nstruct Foo;\n\nimpl SomeTrait for Foo { // ok!\n    // implements functions\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find trait `FnOnce` in this scope",
                "spans": [
                  {
                    "byte_end": 4937,
                    "byte_start": 4931,
                    "column_end": 18,
                    "column_start": 12,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\race.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 148,
                    "line_start": 148,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 18,
                        "highlight_start": 12,
                        "text": "        F: FnOnce() -> bool,"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#once_cell@1.18.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "once_cell",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0405]: cannot find trait `FnOnce` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\race.rs:162:12\n    |\n162 |         F: FnOnce() -> Result<bool, E>,\n    |            ^^^^^^ not found in this scope\n    |\nhelp: consider importing this trait\n    |\n24  + use core::ops::FnOnce;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this trait",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 1119,
                        "byte_start": 1119,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\race.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 24,
                        "line_start": 24,
                        "suggested_replacement": "use core::ops::FnOnce;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "#[cfg(not(feature = \"critical-section\"))]"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0405",
                  "explanation": "The code refers to a trait that is not in scope.\n\nErroneous code example:\n\n```compile_fail,E0405\nstruct Foo;\n\nimpl SomeTrait for Foo {} // error: trait `SomeTrait` is not in scope\n```\n\nPlease verify that the name of the trait wasn't misspelled and ensure that it\nwas imported. Example:\n\n```\n# #[cfg(for_demonstration_only)]\n// solution 1:\nuse some_file::SomeTrait;\n\n// solution 2:\ntrait SomeTrait {\n    // some functions\n}\n\nstruct Foo;\n\nimpl SomeTrait for Foo { // ok!\n    // implements functions\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find trait `FnOnce` in this scope",
                "spans": [
                  {
                    "byte_end": 5485,
                    "byte_start": 5479,
                    "column_end": 18,
                    "column_start": 12,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\race.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 162,
                    "line_start": 162,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 18,
                        "highlight_start": 12,
                        "text": "        F: FnOnce() -> Result<bool, E>,"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#once_cell@1.18.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "once_cell",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0412]: cannot find type `Result` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\race.rs:162:24\n    |\n162 |         F: FnOnce() -> Result<bool, E>,\n    |                        ^^^^^^ not found in this scope\n    |\nhelp: consider importing one of these items\n    |\n24  + use core::fmt::Result;\n    |\n24  + use core::result::Result;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing one of these items",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 1119,
                        "byte_start": 1119,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\race.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 24,
                        "line_start": 24,
                        "suggested_replacement": "use core::fmt::Result;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "#[cfg(not(feature = \"critical-section\"))]"
                          }
                        ]
                      },
                      {
                        "byte_end": 1119,
                        "byte_start": 1119,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\race.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 24,
                        "line_start": 24,
                        "suggested_replacement": "use core::result::Result;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "#[cfg(not(feature = \"critical-section\"))]"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0412",
                  "explanation": "A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"
                },
                "level": "error",
                "message": "cannot find type `Result` in this scope",
                "spans": [
                  {
                    "byte_end": 5497,
                    "byte_start": 5491,
                    "column_end": 30,
                    "column_start": 24,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\race.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 162,
                    "line_start": 162,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 30,
                        "highlight_start": 24,
                        "text": "        F: FnOnce() -> Result<bool, E>,"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#once_cell@1.18.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "once_cell",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0412]: cannot find type `Result` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\race.rs:160:50\n    |\n160 |     pub fn get_or_try_init<F, E>(&self, f: F) -> Result<bool, E>\n    |                                                  ^^^^^^ not found in this scope\n    |\nhelp: consider importing one of these items\n    |\n24  + use core::fmt::Result;\n    |\n24  + use core::result::Result;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing one of these items",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 1119,
                        "byte_start": 1119,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\race.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 24,
                        "line_start": 24,
                        "suggested_replacement": "use core::fmt::Result;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "#[cfg(not(feature = \"critical-section\"))]"
                          }
                        ]
                      },
                      {
                        "byte_end": 1119,
                        "byte_start": 1119,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\race.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 24,
                        "line_start": 24,
                        "suggested_replacement": "use core::result::Result;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "#[cfg(not(feature = \"critical-section\"))]"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0412",
                  "explanation": "A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"
                },
                "level": "error",
                "message": "cannot find type `Result` in this scope",
                "spans": [
                  {
                    "byte_end": 5448,
                    "byte_start": 5442,
                    "column_end": 56,
                    "column_start": 50,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\race.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 160,
                    "line_start": 160,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 56,
                        "highlight_start": 50,
                        "text": "    pub fn get_or_try_init<F, E>(&self, f: F) -> Result<bool, E>"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#once_cell@1.18.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "once_cell",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0405]: cannot find trait `Sync` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\race.rs:185:26\n    |\n185 | unsafe impl<'a, T: Sync> Sync for OnceRef<'a, T> {}\n    |                          ^^^^ not found in this scope\n    |\nhelp: consider importing this trait\n    |\n24  + use core::marker::Sync;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this trait",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 1119,
                        "byte_start": 1119,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\race.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 24,
                        "line_start": 24,
                        "suggested_replacement": "use core::marker::Sync;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "#[cfg(not(feature = \"critical-section\"))]"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0405",
                  "explanation": "The code refers to a trait that is not in scope.\n\nErroneous code example:\n\n```compile_fail,E0405\nstruct Foo;\n\nimpl SomeTrait for Foo {} // error: trait `SomeTrait` is not in scope\n```\n\nPlease verify that the name of the trait wasn't misspelled and ensure that it\nwas imported. Example:\n\n```\n# #[cfg(for_demonstration_only)]\n// solution 1:\nuse some_file::SomeTrait;\n\n// solution 2:\ntrait SomeTrait {\n    // some functions\n}\n\nstruct Foo;\n\nimpl SomeTrait for Foo { // ok!\n    // implements functions\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find trait `Sync` in this scope",
                "spans": [
                  {
                    "byte_end": 6103,
                    "byte_start": 6099,
                    "column_end": 30,
                    "column_start": 26,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\race.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 185,
                    "line_start": 185,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 30,
                        "highlight_start": 26,
                        "text": "unsafe impl<'a, T: Sync> Sync for OnceRef<'a, T> {}"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#once_cell@1.18.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "once_cell",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0405]: cannot find trait `Sync` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\race.rs:185:20\n    |\n185 | unsafe impl<'a, T: Sync> Sync for OnceRef<'a, T> {}\n    |                    ^^^^ not found in this scope\n    |\nhelp: consider importing this trait\n    |\n24  + use core::marker::Sync;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this trait",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 1119,
                        "byte_start": 1119,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\race.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 24,
                        "line_start": 24,
                        "suggested_replacement": "use core::marker::Sync;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "#[cfg(not(feature = \"critical-section\"))]"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0405",
                  "explanation": "The code refers to a trait that is not in scope.\n\nErroneous code example:\n\n```compile_fail,E0405\nstruct Foo;\n\nimpl SomeTrait for Foo {} // error: trait `SomeTrait` is not in scope\n```\n\nPlease verify that the name of the trait wasn't misspelled and ensure that it\nwas imported. Example:\n\n```\n# #[cfg(for_demonstration_only)]\n// solution 1:\nuse some_file::SomeTrait;\n\n// solution 2:\ntrait SomeTrait {\n    // some functions\n}\n\nstruct Foo;\n\nimpl SomeTrait for Foo { // ok!\n    // implements functions\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find trait `Sync` in this scope",
                "spans": [
                  {
                    "byte_end": 6097,
                    "byte_start": 6093,
                    "column_end": 24,
                    "column_start": 20,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\race.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 185,
                    "line_start": 185,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 24,
                        "highlight_start": 20,
                        "text": "unsafe impl<'a, T: Sync> Sync for OnceRef<'a, T> {}"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#once_cell@1.18.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "once_cell",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0405]: cannot find trait `Default` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\race.rs:193:13\n    |\n193 | impl<'a, T> Default for OnceRef<'a, T> {\n    |             ^^^^^^^ not found in this scope\n    |\nhelp: consider importing this trait\n    |\n24  + use core::default::Default;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this trait",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 1119,
                        "byte_start": 1119,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\race.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 24,
                        "line_start": 24,
                        "suggested_replacement": "use core::default::Default;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "#[cfg(not(feature = \"critical-section\"))]"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0405",
                  "explanation": "The code refers to a trait that is not in scope.\n\nErroneous code example:\n\n```compile_fail,E0405\nstruct Foo;\n\nimpl SomeTrait for Foo {} // error: trait `SomeTrait` is not in scope\n```\n\nPlease verify that the name of the trait wasn't misspelled and ensure that it\nwas imported. Example:\n\n```\n# #[cfg(for_demonstration_only)]\n// solution 1:\nuse some_file::SomeTrait;\n\n// solution 2:\ntrait SomeTrait {\n    // some functions\n}\n\nstruct Foo;\n\nimpl SomeTrait for Foo { // ok!\n    // implements functions\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find trait `Default` in this scope",
                "spans": [
                  {
                    "byte_end": 6327,
                    "byte_start": 6320,
                    "column_end": 20,
                    "column_start": 13,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\race.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 193,
                    "line_start": 193,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 20,
                        "highlight_start": 13,
                        "text": "impl<'a, T> Default for OnceRef<'a, T> {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#once_cell@1.18.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "once_cell",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0412]: cannot find type `Option` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\race.rs:206:26\n    |\n206 |     pub fn get(&self) -> Option<&'a T> {\n    |                          ^^^^^^ not found in this scope\n    |\nhelp: consider importing this enum\n    |\n24  + use core::option::Option;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this enum",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 1119,
                        "byte_start": 1119,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\race.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 24,
                        "line_start": 24,
                        "suggested_replacement": "use core::option::Option;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "#[cfg(not(feature = \"critical-section\"))]"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0412",
                  "explanation": "A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"
                },
                "level": "error",
                "message": "cannot find type `Option` in this scope",
                "spans": [
                  {
                    "byte_end": 6678,
                    "byte_start": 6672,
                    "column_end": 32,
                    "column_start": 26,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\race.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 206,
                    "line_start": 206,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 32,
                        "highlight_start": 26,
                        "text": "    pub fn get(&self) -> Option<&'a T> {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#once_cell@1.18.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "once_cell",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0412]: cannot find type `Result` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\race.rs:215:40\n    |\n215 |     pub fn set(&self, value: &'a T) -> Result<(), ()> {\n    |                                        ^^^^^^ not found in this scope\n    |\nhelp: consider importing one of these items\n    |\n24  + use core::fmt::Result;\n    |\n24  + use core::result::Result;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing one of these items",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 1119,
                        "byte_start": 1119,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\race.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 24,
                        "line_start": 24,
                        "suggested_replacement": "use core::fmt::Result;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "#[cfg(not(feature = \"critical-section\"))]"
                          }
                        ]
                      },
                      {
                        "byte_end": 1119,
                        "byte_start": 1119,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\race.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 24,
                        "line_start": 24,
                        "suggested_replacement": "use core::result::Result;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "#[cfg(not(feature = \"critical-section\"))]"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0412",
                  "explanation": "A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"
                },
                "level": "error",
                "message": "cannot find type `Result` in this scope",
                "spans": [
                  {
                    "byte_end": 6973,
                    "byte_start": 6967,
                    "column_end": 46,
                    "column_start": 40,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\race.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 215,
                    "line_start": 215,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 46,
                        "highlight_start": 40,
                        "text": "    pub fn set(&self, value: &'a T) -> Result<(), ()> {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#once_cell@1.18.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "once_cell",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0531]: cannot find tuple struct or tuple variant `Ok` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\race.rs:220:13\n    |\n220 |             Ok(_) => Ok(()),\n    |             ^^ not found in this scope\n    |\nhelp: consider importing this tuple variant\n    |\n24  + use core::result::Result::Ok;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this tuple variant",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 1119,
                        "byte_start": 1119,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\race.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 24,
                        "line_start": 24,
                        "suggested_replacement": "use core::result::Result::Ok;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "#[cfg(not(feature = \"critical-section\"))]"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0531",
                  "explanation": "An unknown tuple struct/variant has been used.\n\nErroneous code example:\n\n```compile_fail,E0531\nlet Type(x) = Type(12); // error!\nmatch Bar(12) {\n    Bar(x) => {} // error!\n    _ => {}\n}\n```\n\nIn most cases, it's either a forgotten import or a typo. However, let's look at\nhow you can have such a type:\n\n```edition2018\nstruct Type(u32); // this is a tuple struct\n\nenum Foo {\n    Bar(u32), // this is a tuple variant\n}\n\nuse Foo::*; // To use Foo's variant directly, we need to import them in\n            // the scope.\n```\n\nEither way, it should work fine with our previous code:\n\n```edition2018\nstruct Type(u32);\n\nenum Foo {\n    Bar(u32),\n}\nuse Foo::*;\n\nlet Type(x) = Type(12); // ok!\nmatch Type(12) {\n    Type(x) => {} // ok!\n    _ => {}\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find tuple struct or tuple variant `Ok` in this scope",
                "spans": [
                  {
                    "byte_end": 7193,
                    "byte_start": 7191,
                    "column_end": 15,
                    "column_start": 13,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\race.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 220,
                    "line_start": 220,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 15,
                        "highlight_start": 13,
                        "text": "            Ok(_) => Ok(()),"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#once_cell@1.18.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "once_cell",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0425]: cannot find function, tuple struct or tuple variant `Ok` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\race.rs:220:22\n    |\n220 |             Ok(_) => Ok(()),\n    |                      ^^ not found in this scope\n    |\nhelp: consider importing this tuple variant\n    |\n24  + use core::result::Result::Ok;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this tuple variant",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 1119,
                        "byte_start": 1119,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\race.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 24,
                        "line_start": 24,
                        "suggested_replacement": "use core::result::Result::Ok;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "#[cfg(not(feature = \"critical-section\"))]"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0425",
                  "explanation": "An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"
                },
                "level": "error",
                "message": "cannot find function, tuple struct or tuple variant `Ok` in this scope",
                "spans": [
                  {
                    "byte_end": 7202,
                    "byte_start": 7200,
                    "column_end": 24,
                    "column_start": 22,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\race.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 220,
                    "line_start": 220,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 24,
                        "highlight_start": 22,
                        "text": "            Ok(_) => Ok(()),"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#once_cell@1.18.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "once_cell",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0531]: cannot find tuple struct or tuple variant `Err` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\race.rs:221:13\n    |\n221 |             Err(_) => Err(()),\n    |             ^^^ not found in this scope\n    |\nhelp: consider importing this tuple variant\n    |\n24  + use core::result::Result::Err;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this tuple variant",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 1119,
                        "byte_start": 1119,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\race.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 24,
                        "line_start": 24,
                        "suggested_replacement": "use core::result::Result::Err;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "#[cfg(not(feature = \"critical-section\"))]"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0531",
                  "explanation": "An unknown tuple struct/variant has been used.\n\nErroneous code example:\n\n```compile_fail,E0531\nlet Type(x) = Type(12); // error!\nmatch Bar(12) {\n    Bar(x) => {} // error!\n    _ => {}\n}\n```\n\nIn most cases, it's either a forgotten import or a typo. However, let's look at\nhow you can have such a type:\n\n```edition2018\nstruct Type(u32); // this is a tuple struct\n\nenum Foo {\n    Bar(u32), // this is a tuple variant\n}\n\nuse Foo::*; // To use Foo's variant directly, we need to import them in\n            // the scope.\n```\n\nEither way, it should work fine with our previous code:\n\n```edition2018\nstruct Type(u32);\n\nenum Foo {\n    Bar(u32),\n}\nuse Foo::*;\n\nlet Type(x) = Type(12); // ok!\nmatch Type(12) {\n    Type(x) => {} // ok!\n    _ => {}\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find tuple struct or tuple variant `Err` in this scope",
                "spans": [
                  {
                    "byte_end": 7223,
                    "byte_start": 7220,
                    "column_end": 16,
                    "column_start": 13,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\race.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 221,
                    "line_start": 221,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 16,
                        "highlight_start": 13,
                        "text": "            Err(_) => Err(()),"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#once_cell@1.18.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "once_cell",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0425]: cannot find function, tuple struct or tuple variant `Err` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\race.rs:221:23\n    |\n221 |             Err(_) => Err(()),\n    |                       ^^^ not found in this scope\n    |\nhelp: consider importing this tuple variant\n    |\n24  + use core::result::Result::Err;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this tuple variant",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 1119,
                        "byte_start": 1119,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\race.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 24,
                        "line_start": 24,
                        "suggested_replacement": "use core::result::Result::Err;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "#[cfg(not(feature = \"critical-section\"))]"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0425",
                  "explanation": "An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"
                },
                "level": "error",
                "message": "cannot find function, tuple struct or tuple variant `Err` in this scope",
                "spans": [
                  {
                    "byte_end": 7233,
                    "byte_start": 7230,
                    "column_end": 26,
                    "column_start": 23,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\race.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 221,
                    "line_start": 221,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 26,
                        "highlight_start": 23,
                        "text": "            Err(_) => Err(()),"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#once_cell@1.18.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "once_cell",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0405]: cannot find trait `FnOnce` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\race.rs:233:12\n    |\n233 |         F: FnOnce() -> &'a T,\n    |            ^^^^^^ not found in this scope\n    |\nhelp: consider importing this trait\n    |\n24  + use core::ops::FnOnce;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this trait",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 1119,
                        "byte_start": 1119,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\race.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 24,
                        "line_start": 24,
                        "suggested_replacement": "use core::ops::FnOnce;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "#[cfg(not(feature = \"critical-section\"))]"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0405",
                  "explanation": "The code refers to a trait that is not in scope.\n\nErroneous code example:\n\n```compile_fail,E0405\nstruct Foo;\n\nimpl SomeTrait for Foo {} // error: trait `SomeTrait` is not in scope\n```\n\nPlease verify that the name of the trait wasn't misspelled and ensure that it\nwas imported. Example:\n\n```\n# #[cfg(for_demonstration_only)]\n// solution 1:\nuse some_file::SomeTrait;\n\n// solution 2:\ntrait SomeTrait {\n    // some functions\n}\n\nstruct Foo;\n\nimpl SomeTrait for Foo { // ok!\n    // implements functions\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find trait `FnOnce` in this scope",
                "spans": [
                  {
                    "byte_end": 7613,
                    "byte_start": 7607,
                    "column_end": 18,
                    "column_start": 12,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\race.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 233,
                    "line_start": 233,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 18,
                        "highlight_start": 12,
                        "text": "        F: FnOnce() -> &'a T,"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#once_cell@1.18.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "once_cell",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0425]: cannot find function, tuple struct or tuple variant `Ok` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\race.rs:236:39\n    |\n236 |         match self.get_or_try_init(|| Ok::<&'a T, Void>(f())) {\n    |                                       ^^ not found in this scope\n    |\nhelp: consider importing this tuple variant\n    |\n24  + use core::result::Result::Ok;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this tuple variant",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 1119,
                        "byte_start": 1119,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\race.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 24,
                        "line_start": 24,
                        "suggested_replacement": "use core::result::Result::Ok;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "#[cfg(not(feature = \"critical-section\"))]"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0425",
                  "explanation": "An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"
                },
                "level": "error",
                "message": "cannot find function, tuple struct or tuple variant `Ok` in this scope",
                "spans": [
                  {
                    "byte_end": 7693,
                    "byte_start": 7691,
                    "column_end": 41,
                    "column_start": 39,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\race.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 236,
                    "line_start": 236,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 41,
                        "highlight_start": 39,
                        "text": "        match self.get_or_try_init(|| Ok::<&'a T, Void>(f())) {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#once_cell@1.18.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "once_cell",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0531]: cannot find tuple struct or tuple variant `Ok` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\race.rs:237:13\n    |\n237 |             Ok(val) => val,\n    |             ^^ not found in this scope\n    |\nhelp: consider importing this tuple variant\n    |\n24  + use core::result::Result::Ok;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this tuple variant",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 1119,
                        "byte_start": 1119,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\race.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 24,
                        "line_start": 24,
                        "suggested_replacement": "use core::result::Result::Ok;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "#[cfg(not(feature = \"critical-section\"))]"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0531",
                  "explanation": "An unknown tuple struct/variant has been used.\n\nErroneous code example:\n\n```compile_fail,E0531\nlet Type(x) = Type(12); // error!\nmatch Bar(12) {\n    Bar(x) => {} // error!\n    _ => {}\n}\n```\n\nIn most cases, it's either a forgotten import or a typo. However, let's look at\nhow you can have such a type:\n\n```edition2018\nstruct Type(u32); // this is a tuple struct\n\nenum Foo {\n    Bar(u32), // this is a tuple variant\n}\n\nuse Foo::*; // To use Foo's variant directly, we need to import them in\n            // the scope.\n```\n\nEither way, it should work fine with our previous code:\n\n```edition2018\nstruct Type(u32);\n\nenum Foo {\n    Bar(u32),\n}\nuse Foo::*;\n\nlet Type(x) = Type(12); // ok!\nmatch Type(12) {\n    Type(x) => {} // ok!\n    _ => {}\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find tuple struct or tuple variant `Ok` in this scope",
                "spans": [
                  {
                    "byte_end": 7731,
                    "byte_start": 7729,
                    "column_end": 15,
                    "column_start": 13,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\race.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 237,
                    "line_start": 237,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 15,
                        "highlight_start": 13,
                        "text": "            Ok(val) => val,"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#once_cell@1.18.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "once_cell",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0531]: cannot find tuple struct or tuple variant `Err` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\race.rs:238:13\n    |\n238 |             Err(void) => match void {},\n    |             ^^^ not found in this scope\n    |\nhelp: consider importing this tuple variant\n    |\n24  + use core::result::Result::Err;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this tuple variant",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 1119,
                        "byte_start": 1119,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\race.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 24,
                        "line_start": 24,
                        "suggested_replacement": "use core::result::Result::Err;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "#[cfg(not(feature = \"critical-section\"))]"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0531",
                  "explanation": "An unknown tuple struct/variant has been used.\n\nErroneous code example:\n\n```compile_fail,E0531\nlet Type(x) = Type(12); // error!\nmatch Bar(12) {\n    Bar(x) => {} // error!\n    _ => {}\n}\n```\n\nIn most cases, it's either a forgotten import or a typo. However, let's look at\nhow you can have such a type:\n\n```edition2018\nstruct Type(u32); // this is a tuple struct\n\nenum Foo {\n    Bar(u32), // this is a tuple variant\n}\n\nuse Foo::*; // To use Foo's variant directly, we need to import them in\n            // the scope.\n```\n\nEither way, it should work fine with our previous code:\n\n```edition2018\nstruct Type(u32);\n\nenum Foo {\n    Bar(u32),\n}\nuse Foo::*;\n\nlet Type(x) = Type(12); // ok!\nmatch Type(12) {\n    Type(x) => {} // ok!\n    _ => {}\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find tuple struct or tuple variant `Err` in this scope",
                "spans": [
                  {
                    "byte_end": 7760,
                    "byte_start": 7757,
                    "column_end": 16,
                    "column_start": 13,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\race.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 238,
                    "line_start": 238,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 16,
                        "highlight_start": 13,
                        "text": "            Err(void) => match void {},"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#once_cell@1.18.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "once_cell",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0405]: cannot find trait `FnOnce` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\race.rs:251:12\n    |\n251 |         F: FnOnce() -> Result<&'a T, E>,\n    |            ^^^^^^ not found in this scope\n    |\nhelp: consider importing this trait\n    |\n24  + use core::ops::FnOnce;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this trait",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 1119,
                        "byte_start": 1119,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\race.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 24,
                        "line_start": 24,
                        "suggested_replacement": "use core::ops::FnOnce;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "#[cfg(not(feature = \"critical-section\"))]"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0405",
                  "explanation": "The code refers to a trait that is not in scope.\n\nErroneous code example:\n\n```compile_fail,E0405\nstruct Foo;\n\nimpl SomeTrait for Foo {} // error: trait `SomeTrait` is not in scope\n```\n\nPlease verify that the name of the trait wasn't misspelled and ensure that it\nwas imported. Example:\n\n```\n# #[cfg(for_demonstration_only)]\n// solution 1:\nuse some_file::SomeTrait;\n\n// solution 2:\ntrait SomeTrait {\n    // some functions\n}\n\nstruct Foo;\n\nimpl SomeTrait for Foo { // ok!\n    // implements functions\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find trait `FnOnce` in this scope",
                "spans": [
                  {
                    "byte_end": 8245,
                    "byte_start": 8239,
                    "column_end": 18,
                    "column_start": 12,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\race.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 251,
                    "line_start": 251,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 18,
                        "highlight_start": 12,
                        "text": "        F: FnOnce() -> Result<&'a T, E>,"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#once_cell@1.18.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "once_cell",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0412]: cannot find type `Result` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\race.rs:251:24\n    |\n251 |         F: FnOnce() -> Result<&'a T, E>,\n    |                        ^^^^^^ not found in this scope\n    |\nhelp: consider importing one of these items\n    |\n24  + use core::fmt::Result;\n    |\n24  + use core::result::Result;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing one of these items",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 1119,
                        "byte_start": 1119,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\race.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 24,
                        "line_start": 24,
                        "suggested_replacement": "use core::fmt::Result;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "#[cfg(not(feature = \"critical-section\"))]"
                          }
                        ]
                      },
                      {
                        "byte_end": 1119,
                        "byte_start": 1119,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\race.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 24,
                        "line_start": 24,
                        "suggested_replacement": "use core::result::Result;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "#[cfg(not(feature = \"critical-section\"))]"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0412",
                  "explanation": "A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"
                },
                "level": "error",
                "message": "cannot find type `Result` in this scope",
                "spans": [
                  {
                    "byte_end": 8257,
                    "byte_start": 8251,
                    "column_end": 30,
                    "column_start": 24,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\race.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 251,
                    "line_start": 251,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 30,
                        "highlight_start": 24,
                        "text": "        F: FnOnce() -> Result<&'a T, E>,"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#once_cell@1.18.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "once_cell",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0412]: cannot find type `Result` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\race.rs:249:50\n    |\n249 |     pub fn get_or_try_init<F, E>(&self, f: F) -> Result<&'a T, E>\n    |                                                  ^^^^^^ not found in this scope\n    |\nhelp: consider importing one of these items\n    |\n24  + use core::fmt::Result;\n    |\n24  + use core::result::Result;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing one of these items",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 1119,
                        "byte_start": 1119,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\race.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 24,
                        "line_start": 24,
                        "suggested_replacement": "use core::fmt::Result;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "#[cfg(not(feature = \"critical-section\"))]"
                          }
                        ]
                      },
                      {
                        "byte_end": 1119,
                        "byte_start": 1119,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\race.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 24,
                        "line_start": 24,
                        "suggested_replacement": "use core::result::Result;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "#[cfg(not(feature = \"critical-section\"))]"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0412",
                  "explanation": "A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"
                },
                "level": "error",
                "message": "cannot find type `Result` in this scope",
                "spans": [
                  {
                    "byte_end": 8207,
                    "byte_start": 8201,
                    "column_end": 56,
                    "column_start": 50,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\race.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 249,
                    "line_start": 249,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 56,
                        "highlight_start": 50,
                        "text": "    pub fn get_or_try_init<F, E>(&self, f: F) -> Result<&'a T, E>"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#once_cell@1.18.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "once_cell",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0531]: cannot find tuple struct or tuple variant `Err` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\race.rs:264:20\n    |\n264 |             if let Err(old) = exchange {\n    |                    ^^^ not found in this scope\n    |\nhelp: consider importing this tuple variant\n    |\n24  + use core::result::Result::Err;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this tuple variant",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 1119,
                        "byte_start": 1119,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\race.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 24,
                        "line_start": 24,
                        "suggested_replacement": "use core::result::Result::Err;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "#[cfg(not(feature = \"critical-section\"))]"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0531",
                  "explanation": "An unknown tuple struct/variant has been used.\n\nErroneous code example:\n\n```compile_fail,E0531\nlet Type(x) = Type(12); // error!\nmatch Bar(12) {\n    Bar(x) => {} // error!\n    _ => {}\n}\n```\n\nIn most cases, it's either a forgotten import or a typo. However, let's look at\nhow you can have such a type:\n\n```edition2018\nstruct Type(u32); // this is a tuple struct\n\nenum Foo {\n    Bar(u32), // this is a tuple variant\n}\n\nuse Foo::*; // To use Foo's variant directly, we need to import them in\n            // the scope.\n```\n\nEither way, it should work fine with our previous code:\n\n```edition2018\nstruct Type(u32);\n\nenum Foo {\n    Bar(u32),\n}\nuse Foo::*;\n\nlet Type(x) = Type(12); // ok!\nmatch Type(12) {\n    Type(x) => {} // ok!\n    _ => {}\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find tuple struct or tuple variant `Err` in this scope",
                "spans": [
                  {
                    "byte_end": 8708,
                    "byte_start": 8705,
                    "column_end": 23,
                    "column_start": 20,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\race.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 264,
                    "line_start": 264,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 23,
                        "highlight_start": 20,
                        "text": "            if let Err(old) = exchange {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#once_cell@1.18.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "once_cell",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0425]: cannot find function, tuple struct or tuple variant `Ok` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\race.rs:269:9\n    |\n269 |         Ok(unsafe { &*ptr })\n    |         ^^ not found in this scope\n    |\nhelp: consider importing this tuple variant\n    |\n24  + use core::result::Result::Ok;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this tuple variant",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 1119,
                        "byte_start": 1119,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\race.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 24,
                        "line_start": 24,
                        "suggested_replacement": "use core::result::Result::Ok;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "#[cfg(not(feature = \"critical-section\"))]"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0425",
                  "explanation": "An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"
                },
                "level": "error",
                "message": "cannot find function, tuple struct or tuple variant `Ok` in this scope",
                "spans": [
                  {
                    "byte_end": 8789,
                    "byte_start": 8787,
                    "column_end": 11,
                    "column_start": 9,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\race.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 269,
                    "line_start": 269,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 11,
                        "highlight_start": 9,
                        "text": "        Ok(unsafe { &*ptr })"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#once_cell@1.18.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "once_cell",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0412]: cannot find type `Option` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\race.rs:303:28\n    |\n303 |         ghost: PhantomData<Option<Box<T>>>,\n    |                            ^^^^^^ not found in this scope\n    |\nhelp: consider importing this enum\n    |\n295 +     use core::option::Option;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this enum",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 9336,
                        "byte_start": 9336,
                        "column_end": 5,
                        "column_start": 5,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\race.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 295,
                        "line_start": 295,
                        "suggested_replacement": "use core::option::Option;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 5,
                            "highlight_start": 5,
                            "text": "    use super::atomic::{AtomicPtr, Ordering};"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0412",
                  "explanation": "A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"
                },
                "level": "error",
                "message": "cannot find type `Option` in this scope",
                "spans": [
                  {
                    "byte_end": 9601,
                    "byte_start": 9595,
                    "column_end": 34,
                    "column_start": 28,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\race.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 303,
                    "line_start": 303,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 34,
                        "highlight_start": 28,
                        "text": "        ghost: PhantomData<Option<Box<T>>>,"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#once_cell@1.18.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "once_cell",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0405]: cannot find trait `Default` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\race.rs:312:13\n    |\n312 |     impl<T> Default for OnceBox<T> {\n    |             ^^^^^^^ not found in this scope\n    |\nhelp: consider importing this trait\n    |\n295 +     use core::default::Default;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this trait",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 9336,
                        "byte_start": 9336,
                        "column_end": 5,
                        "column_start": 5,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\race.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 295,
                        "line_start": 295,
                        "suggested_replacement": "use core::default::Default;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 5,
                            "highlight_start": 5,
                            "text": "    use super::atomic::{AtomicPtr, Ordering};"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0405",
                  "explanation": "The code refers to a trait that is not in scope.\n\nErroneous code example:\n\n```compile_fail,E0405\nstruct Foo;\n\nimpl SomeTrait for Foo {} // error: trait `SomeTrait` is not in scope\n```\n\nPlease verify that the name of the trait wasn't misspelled and ensure that it\nwas imported. Example:\n\n```\n# #[cfg(for_demonstration_only)]\n// solution 1:\nuse some_file::SomeTrait;\n\n// solution 2:\ntrait SomeTrait {\n    // some functions\n}\n\nstruct Foo;\n\nimpl SomeTrait for Foo { // ok!\n    // implements functions\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find trait `Default` in this scope",
                "spans": [
                  {
                    "byte_end": 9855,
                    "byte_start": 9848,
                    "column_end": 20,
                    "column_start": 13,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\race.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 312,
                    "line_start": 312,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 20,
                        "highlight_start": 13,
                        "text": "    impl<T> Default for OnceBox<T> {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#once_cell@1.18.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "once_cell",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0405]: cannot find trait `Drop` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\race.rs:318:13\n    |\n318 |     impl<T> Drop for OnceBox<T> {\n    |             ^^^^ not found in this scope\n    |\nhelp: consider importing this trait\n    |\n295 +     use core::ops::Drop;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this trait",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 9336,
                        "byte_start": 9336,
                        "column_end": 5,
                        "column_start": 5,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\race.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 295,
                        "line_start": 295,
                        "suggested_replacement": "use core::ops::Drop;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 5,
                            "highlight_start": 5,
                            "text": "    use super::atomic::{AtomicPtr, Ordering};"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0405",
                  "explanation": "The code refers to a trait that is not in scope.\n\nErroneous code example:\n\n```compile_fail,E0405\nstruct Foo;\n\nimpl SomeTrait for Foo {} // error: trait `SomeTrait` is not in scope\n```\n\nPlease verify that the name of the trait wasn't misspelled and ensure that it\nwas imported. Example:\n\n```\n# #[cfg(for_demonstration_only)]\n// solution 1:\nuse some_file::SomeTrait;\n\n// solution 2:\ntrait SomeTrait {\n    // some functions\n}\n\nstruct Foo;\n\nimpl SomeTrait for Foo { // ok!\n    // implements functions\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find trait `Drop` in this scope",
                "spans": [
                  {
                    "byte_end": 9961,
                    "byte_start": 9957,
                    "column_end": 17,
                    "column_start": 13,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\race.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 318,
                    "line_start": 318,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 17,
                        "highlight_start": 13,
                        "text": "    impl<T> Drop for OnceBox<T> {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#once_cell@1.18.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "once_cell",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0425]: cannot find function `drop` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\race.rs:322:17\n    |\n322 |                 drop(unsafe { Box::from_raw(ptr) })\n    |                 ^^^^ not found in this scope\n    |\nhelp: consider using the method on `Self`\n    |\n322 |                 self.drop(unsafe { Box::from_raw(ptr) })\n    |                 +++++\nhelp: consider importing this function\n    |\n295 +     use core::mem::drop;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider using the method on `Self`",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 10101,
                        "byte_start": 10101,
                        "column_end": 17,
                        "column_start": 17,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\race.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 322,
                        "line_start": 322,
                        "suggested_replacement": "self.",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 17,
                            "highlight_start": 17,
                            "text": "                drop(unsafe { Box::from_raw(ptr) })"
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this function",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 9336,
                        "byte_start": 9336,
                        "column_end": 5,
                        "column_start": 5,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\race.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 295,
                        "line_start": 295,
                        "suggested_replacement": "use core::mem::drop;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 5,
                            "highlight_start": 5,
                            "text": "    use super::atomic::{AtomicPtr, Ordering};"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0425",
                  "explanation": "An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"
                },
                "level": "error",
                "message": "cannot find function `drop` in this scope",
                "spans": [
                  {
                    "byte_end": 10105,
                    "byte_start": 10101,
                    "column_end": 21,
                    "column_start": 17,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\race.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 322,
                    "line_start": 322,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 21,
                        "highlight_start": 17,
                        "text": "                drop(unsafe { Box::from_raw(ptr) })"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#once_cell@1.18.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "once_cell",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0412]: cannot find type `Option` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\race.rs:334:30\n    |\n334 |         pub fn get(&self) -> Option<&T> {\n    |                              ^^^^^^ not found in this scope\n    |\nhelp: consider importing this enum\n    |\n295 +     use core::option::Option;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this enum",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 9336,
                        "byte_start": 9336,
                        "column_end": 5,
                        "column_start": 5,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\race.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 295,
                        "line_start": 295,
                        "suggested_replacement": "use core::option::Option;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 5,
                            "highlight_start": 5,
                            "text": "    use super::atomic::{AtomicPtr, Ordering};"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0412",
                  "explanation": "A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"
                },
                "level": "error",
                "message": "cannot find type `Option` in this scope",
                "spans": [
                  {
                    "byte_end": 10457,
                    "byte_start": 10451,
                    "column_end": 36,
                    "column_start": 30,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\race.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 334,
                    "line_start": 334,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 36,
                        "highlight_start": 30,
                        "text": "        pub fn get(&self) -> Option<&T> {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#once_cell@1.18.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "once_cell",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0425]: cannot find value `None` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\race.rs:337:24\n    |\n337 |                 return None;\n    |                        ^^^^ not found in this scope\n    |\nhelp: consider importing this unit variant\n    |\n295 +     use core::option::Option::None;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this unit variant",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 9336,
                        "byte_start": 9336,
                        "column_end": 5,
                        "column_start": 5,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\race.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 295,
                        "line_start": 295,
                        "suggested_replacement": "use core::option::Option::None;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 5,
                            "highlight_start": 5,
                            "text": "    use super::atomic::{AtomicPtr, Ordering};"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0425",
                  "explanation": "An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"
                },
                "level": "error",
                "message": "cannot find value `None` in this scope",
                "spans": [
                  {
                    "byte_end": 10580,
                    "byte_start": 10576,
                    "column_end": 28,
                    "column_start": 24,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\race.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 337,
                    "line_start": 337,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 28,
                        "highlight_start": 24,
                        "text": "                return None;"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#once_cell@1.18.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "once_cell",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0425]: cannot find function, tuple struct or tuple variant `Some` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\race.rs:339:13\n    |\n339 |             Some(unsafe { &*ptr })\n    |             ^^^^ not found in this scope\n    |\nhelp: consider importing this tuple variant\n    |\n295 +     use core::option::Option::Some;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this tuple variant",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 9336,
                        "byte_start": 9336,
                        "column_end": 5,
                        "column_start": 5,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\race.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 295,
                        "line_start": 295,
                        "suggested_replacement": "use core::option::Option::Some;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 5,
                            "highlight_start": 5,
                            "text": "    use super::atomic::{AtomicPtr, Ordering};"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0425",
                  "explanation": "An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"
                },
                "level": "error",
                "message": "cannot find function, tuple struct or tuple variant `Some` in this scope",
                "spans": [
                  {
                    "byte_end": 10612,
                    "byte_start": 10608,
                    "column_end": 17,
                    "column_start": 13,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\race.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 339,
                    "line_start": 339,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 17,
                        "highlight_start": 13,
                        "text": "            Some(unsafe { &*ptr })"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#once_cell@1.18.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "once_cell",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0412]: cannot find type `Result` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\race.rs:346:45\n    |\n346 |         pub fn set(&self, value: Box<T>) -> Result<(), Box<T>> {\n    |                                             ^^^^^^ not found in this scope\n    |\nhelp: consider importing one of these items\n    |\n295 +     use core::fmt::Result;\n    |\n295 +     use core::result::Result;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing one of these items",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 9336,
                        "byte_start": 9336,
                        "column_end": 5,
                        "column_start": 5,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\race.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 295,
                        "line_start": 295,
                        "suggested_replacement": "use core::fmt::Result;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 5,
                            "highlight_start": 5,
                            "text": "    use super::atomic::{AtomicPtr, Ordering};"
                          }
                        ]
                      },
                      {
                        "byte_end": 9336,
                        "byte_start": 9336,
                        "column_end": 5,
                        "column_start": 5,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\race.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 295,
                        "line_start": 295,
                        "suggested_replacement": "use core::result::Result;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 5,
                            "highlight_start": 5,
                            "text": "    use super::atomic::{AtomicPtr, Ordering};"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0412",
                  "explanation": "A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"
                },
                "level": "error",
                "message": "cannot find type `Result` in this scope",
                "spans": [
                  {
                    "byte_end": 10855,
                    "byte_start": 10849,
                    "column_end": 51,
                    "column_start": 45,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\race.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 346,
                    "line_start": 346,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 51,
                        "highlight_start": 45,
                        "text": "        pub fn set(&self, value: Box<T>) -> Result<(), Box<T>> {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#once_cell@1.18.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "once_cell",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0425]: cannot find function, tuple struct or tuple variant `Err` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\race.rs:356:24\n    |\n356 |                 return Err(value);\n    |                        ^^^ not found in this scope\n    |\nhelp: consider importing this tuple variant\n    |\n295 +     use core::result::Result::Err;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this tuple variant",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 9336,
                        "byte_start": 9336,
                        "column_end": 5,
                        "column_start": 5,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\race.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 295,
                        "line_start": 295,
                        "suggested_replacement": "use core::result::Result::Err;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 5,
                            "highlight_start": 5,
                            "text": "    use super::atomic::{AtomicPtr, Ordering};"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0425",
                  "explanation": "An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"
                },
                "level": "error",
                "message": "cannot find function, tuple struct or tuple variant `Err` in this scope",
                "spans": [
                  {
                    "byte_end": 11228,
                    "byte_start": 11225,
                    "column_end": 27,
                    "column_start": 24,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\race.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 356,
                    "line_start": 356,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 27,
                        "highlight_start": 24,
                        "text": "                return Err(value);"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#once_cell@1.18.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "once_cell",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0425]: cannot find function, tuple struct or tuple variant `Ok` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\race.rs:358:13\n    |\n358 |             Ok(())\n    |             ^^ not found in this scope\n    |\nhelp: consider importing this tuple variant\n    |\n295 +     use core::result::Result::Ok;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this tuple variant",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 9336,
                        "byte_start": 9336,
                        "column_end": 5,
                        "column_start": 5,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\race.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 295,
                        "line_start": 295,
                        "suggested_replacement": "use core::result::Result::Ok;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 5,
                            "highlight_start": 5,
                            "text": "    use super::atomic::{AtomicPtr, Ordering};"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0425",
                  "explanation": "An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"
                },
                "level": "error",
                "message": "cannot find function, tuple struct or tuple variant `Ok` in this scope",
                "spans": [
                  {
                    "byte_end": 11265,
                    "byte_start": 11263,
                    "column_end": 15,
                    "column_start": 13,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\race.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 358,
                    "line_start": 358,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 15,
                        "highlight_start": 13,
                        "text": "            Ok(())"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#once_cell@1.18.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "once_cell",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0405]: cannot find trait `FnOnce` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\race.rs:369:16\n    |\n369 |             F: FnOnce() -> Box<T>,\n    |                ^^^^^^ not found in this scope\n    |\nhelp: consider importing this trait\n    |\n295 +     use core::ops::FnOnce;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this trait",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 9336,
                        "byte_start": 9336,
                        "column_end": 5,
                        "column_start": 5,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\race.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 295,
                        "line_start": 295,
                        "suggested_replacement": "use core::ops::FnOnce;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 5,
                            "highlight_start": 5,
                            "text": "    use super::atomic::{AtomicPtr, Ordering};"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0405",
                  "explanation": "The code refers to a trait that is not in scope.\n\nErroneous code example:\n\n```compile_fail,E0405\nstruct Foo;\n\nimpl SomeTrait for Foo {} // error: trait `SomeTrait` is not in scope\n```\n\nPlease verify that the name of the trait wasn't misspelled and ensure that it\nwas imported. Example:\n\n```\n# #[cfg(for_demonstration_only)]\n// solution 1:\nuse some_file::SomeTrait;\n\n// solution 2:\ntrait SomeTrait {\n    // some functions\n}\n\nstruct Foo;\n\nimpl SomeTrait for Foo { // ok!\n    // implements functions\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find trait `FnOnce` in this scope",
                "spans": [
                  {
                    "byte_end": 11671,
                    "byte_start": 11665,
                    "column_end": 22,
                    "column_start": 16,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\race.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 369,
                    "line_start": 369,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 22,
                        "highlight_start": 16,
                        "text": "            F: FnOnce() -> Box<T>,"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#once_cell@1.18.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "once_cell",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0425]: cannot find function, tuple struct or tuple variant `Ok` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\race.rs:372:43\n    |\n372 |             match self.get_or_try_init(|| Ok::<Box<T>, Void>(f())) {\n    |                                           ^^ not found in this scope\n    |\nhelp: consider importing this tuple variant\n    |\n295 +     use core::result::Result::Ok;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this tuple variant",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 9336,
                        "byte_start": 9336,
                        "column_end": 5,
                        "column_start": 5,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\race.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 295,
                        "line_start": 295,
                        "suggested_replacement": "use core::result::Result::Ok;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 5,
                            "highlight_start": 5,
                            "text": "    use super::atomic::{AtomicPtr, Ordering};"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0425",
                  "explanation": "An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"
                },
                "level": "error",
                "message": "cannot find function, tuple struct or tuple variant `Ok` in this scope",
                "spans": [
                  {
                    "byte_end": 11764,
                    "byte_start": 11762,
                    "column_end": 45,
                    "column_start": 43,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\race.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 372,
                    "line_start": 372,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 45,
                        "highlight_start": 43,
                        "text": "            match self.get_or_try_init(|| Ok::<Box<T>, Void>(f())) {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#once_cell@1.18.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "once_cell",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0531]: cannot find tuple struct or tuple variant `Ok` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\race.rs:373:17\n    |\n373 |                 Ok(val) => val,\n    |                 ^^ not found in this scope\n    |\nhelp: consider importing this tuple variant\n    |\n295 +     use core::result::Result::Ok;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this tuple variant",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 9336,
                        "byte_start": 9336,
                        "column_end": 5,
                        "column_start": 5,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\race.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 295,
                        "line_start": 295,
                        "suggested_replacement": "use core::result::Result::Ok;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 5,
                            "highlight_start": 5,
                            "text": "    use super::atomic::{AtomicPtr, Ordering};"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0531",
                  "explanation": "An unknown tuple struct/variant has been used.\n\nErroneous code example:\n\n```compile_fail,E0531\nlet Type(x) = Type(12); // error!\nmatch Bar(12) {\n    Bar(x) => {} // error!\n    _ => {}\n}\n```\n\nIn most cases, it's either a forgotten import or a typo. However, let's look at\nhow you can have such a type:\n\n```edition2018\nstruct Type(u32); // this is a tuple struct\n\nenum Foo {\n    Bar(u32), // this is a tuple variant\n}\n\nuse Foo::*; // To use Foo's variant directly, we need to import them in\n            // the scope.\n```\n\nEither way, it should work fine with our previous code:\n\n```edition2018\nstruct Type(u32);\n\nenum Foo {\n    Bar(u32),\n}\nuse Foo::*;\n\nlet Type(x) = Type(12); // ok!\nmatch Type(12) {\n    Type(x) => {} // ok!\n    _ => {}\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find tuple struct or tuple variant `Ok` in this scope",
                "spans": [
                  {
                    "byte_end": 11807,
                    "byte_start": 11805,
                    "column_end": 19,
                    "column_start": 17,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\race.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 373,
                    "line_start": 373,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 19,
                        "highlight_start": 17,
                        "text": "                Ok(val) => val,"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#once_cell@1.18.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "once_cell",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0531]: cannot find tuple struct or tuple variant `Err` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\race.rs:374:17\n    |\n374 |                 Err(void) => match void {},\n    |                 ^^^ not found in this scope\n    |\nhelp: consider importing this tuple variant\n    |\n295 +     use core::result::Result::Err;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this tuple variant",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 9336,
                        "byte_start": 9336,
                        "column_end": 5,
                        "column_start": 5,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\race.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 295,
                        "line_start": 295,
                        "suggested_replacement": "use core::result::Result::Err;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 5,
                            "highlight_start": 5,
                            "text": "    use super::atomic::{AtomicPtr, Ordering};"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0531",
                  "explanation": "An unknown tuple struct/variant has been used.\n\nErroneous code example:\n\n```compile_fail,E0531\nlet Type(x) = Type(12); // error!\nmatch Bar(12) {\n    Bar(x) => {} // error!\n    _ => {}\n}\n```\n\nIn most cases, it's either a forgotten import or a typo. However, let's look at\nhow you can have such a type:\n\n```edition2018\nstruct Type(u32); // this is a tuple struct\n\nenum Foo {\n    Bar(u32), // this is a tuple variant\n}\n\nuse Foo::*; // To use Foo's variant directly, we need to import them in\n            // the scope.\n```\n\nEither way, it should work fine with our previous code:\n\n```edition2018\nstruct Type(u32);\n\nenum Foo {\n    Bar(u32),\n}\nuse Foo::*;\n\nlet Type(x) = Type(12); // ok!\nmatch Type(12) {\n    Type(x) => {} // ok!\n    _ => {}\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find tuple struct or tuple variant `Err` in this scope",
                "spans": [
                  {
                    "byte_end": 11840,
                    "byte_start": 11837,
                    "column_end": 20,
                    "column_start": 17,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\race.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 374,
                    "line_start": 374,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 20,
                        "highlight_start": 17,
                        "text": "                Err(void) => match void {},"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#once_cell@1.18.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "once_cell",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0405]: cannot find trait `FnOnce` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\race.rs:387:16\n    |\n387 |             F: FnOnce() -> Result<Box<T>, E>,\n    |                ^^^^^^ not found in this scope\n    |\nhelp: consider importing this trait\n    |\n295 +     use core::ops::FnOnce;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this trait",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 9336,
                        "byte_start": 9336,
                        "column_end": 5,
                        "column_start": 5,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\race.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 295,
                        "line_start": 295,
                        "suggested_replacement": "use core::ops::FnOnce;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 5,
                            "highlight_start": 5,
                            "text": "    use super::atomic::{AtomicPtr, Ordering};"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0405",
                  "explanation": "The code refers to a trait that is not in scope.\n\nErroneous code example:\n\n```compile_fail,E0405\nstruct Foo;\n\nimpl SomeTrait for Foo {} // error: trait `SomeTrait` is not in scope\n```\n\nPlease verify that the name of the trait wasn't misspelled and ensure that it\nwas imported. Example:\n\n```\n# #[cfg(for_demonstration_only)]\n// solution 1:\nuse some_file::SomeTrait;\n\n// solution 2:\ntrait SomeTrait {\n    // some functions\n}\n\nstruct Foo;\n\nimpl SomeTrait for Foo { // ok!\n    // implements functions\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find trait `FnOnce` in this scope",
                "spans": [
                  {
                    "byte_end": 12370,
                    "byte_start": 12364,
                    "column_end": 22,
                    "column_start": 16,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\race.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 387,
                    "line_start": 387,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 22,
                        "highlight_start": 16,
                        "text": "            F: FnOnce() -> Result<Box<T>, E>,"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#once_cell@1.18.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "once_cell",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0412]: cannot find type `Result` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\race.rs:387:28\n    |\n387 |             F: FnOnce() -> Result<Box<T>, E>,\n    |                            ^^^^^^ not found in this scope\n    |\nhelp: consider importing one of these items\n    |\n295 +     use core::fmt::Result;\n    |\n295 +     use core::result::Result;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing one of these items",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 9336,
                        "byte_start": 9336,
                        "column_end": 5,
                        "column_start": 5,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\race.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 295,
                        "line_start": 295,
                        "suggested_replacement": "use core::fmt::Result;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 5,
                            "highlight_start": 5,
                            "text": "    use super::atomic::{AtomicPtr, Ordering};"
                          }
                        ]
                      },
                      {
                        "byte_end": 9336,
                        "byte_start": 9336,
                        "column_end": 5,
                        "column_start": 5,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\race.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 295,
                        "line_start": 295,
                        "suggested_replacement": "use core::result::Result;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 5,
                            "highlight_start": 5,
                            "text": "    use super::atomic::{AtomicPtr, Ordering};"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0412",
                  "explanation": "A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"
                },
                "level": "error",
                "message": "cannot find type `Result` in this scope",
                "spans": [
                  {
                    "byte_end": 12382,
                    "byte_start": 12376,
                    "column_end": 34,
                    "column_start": 28,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\race.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 387,
                    "line_start": 387,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 34,
                        "highlight_start": 28,
                        "text": "            F: FnOnce() -> Result<Box<T>, E>,"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#once_cell@1.18.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "once_cell",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0412]: cannot find type `Result` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\race.rs:385:54\n    |\n385 |         pub fn get_or_try_init<F, E>(&self, f: F) -> Result<&T, E>\n    |                                                      ^^^^^^ not found in this scope\n    |\nhelp: consider importing one of these items\n    |\n295 +     use core::fmt::Result;\n    |\n295 +     use core::result::Result;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing one of these items",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 9336,
                        "byte_start": 9336,
                        "column_end": 5,
                        "column_start": 5,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\race.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 295,
                        "line_start": 295,
                        "suggested_replacement": "use core::fmt::Result;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 5,
                            "highlight_start": 5,
                            "text": "    use super::atomic::{AtomicPtr, Ordering};"
                          }
                        ]
                      },
                      {
                        "byte_end": 9336,
                        "byte_start": 9336,
                        "column_end": 5,
                        "column_start": 5,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\race.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 295,
                        "line_start": 295,
                        "suggested_replacement": "use core::result::Result;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 5,
                            "highlight_start": 5,
                            "text": "    use super::atomic::{AtomicPtr, Ordering};"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0412",
                  "explanation": "A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"
                },
                "level": "error",
                "message": "cannot find type `Result` in this scope",
                "spans": [
                  {
                    "byte_end": 12327,
                    "byte_start": 12321,
                    "column_end": 60,
                    "column_start": 54,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\race.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 385,
                    "line_start": 385,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 60,
                        "highlight_start": 54,
                        "text": "        pub fn get_or_try_init<F, E>(&self, f: F) -> Result<&T, E>"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#once_cell@1.18.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "once_cell",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0531]: cannot find tuple struct or tuple variant `Err` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\race.rs:400:24\n    |\n400 |                 if let Err(old) = exchange {\n    |                        ^^^ not found in this scope\n    |\nhelp: consider importing this tuple variant\n    |\n295 +     use core::result::Result::Err;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this tuple variant",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 9336,
                        "byte_start": 9336,
                        "column_end": 5,
                        "column_start": 5,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\race.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 295,
                        "line_start": 295,
                        "suggested_replacement": "use core::result::Result::Err;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 5,
                            "highlight_start": 5,
                            "text": "    use super::atomic::{AtomicPtr, Ordering};"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0531",
                  "explanation": "An unknown tuple struct/variant has been used.\n\nErroneous code example:\n\n```compile_fail,E0531\nlet Type(x) = Type(12); // error!\nmatch Bar(12) {\n    Bar(x) => {} // error!\n    _ => {}\n}\n```\n\nIn most cases, it's either a forgotten import or a typo. However, let's look at\nhow you can have such a type:\n\n```edition2018\nstruct Type(u32); // this is a tuple struct\n\nenum Foo {\n    Bar(u32), // this is a tuple variant\n}\n\nuse Foo::*; // To use Foo's variant directly, we need to import them in\n            // the scope.\n```\n\nEither way, it should work fine with our previous code:\n\n```edition2018\nstruct Type(u32);\n\nenum Foo {\n    Bar(u32),\n}\nuse Foo::*;\n\nlet Type(x) = Type(12); // ok!\nmatch Type(12) {\n    Type(x) => {} // ok!\n    _ => {}\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find tuple struct or tuple variant `Err` in this scope",
                "spans": [
                  {
                    "byte_end": 12817,
                    "byte_start": 12814,
                    "column_end": 27,
                    "column_start": 24,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\race.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 400,
                    "line_start": 400,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 27,
                        "highlight_start": 24,
                        "text": "                if let Err(old) = exchange {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#once_cell@1.18.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "once_cell",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0425]: cannot find function `drop` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\race.rs:401:21\n    |\n401 |                     drop(unsafe { Box::from_raw(ptr) });\n    |                     ^^^^ not found in this scope\n    |\nhelp: consider importing this function\n    |\n295 +     use core::mem::drop;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this function",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 9336,
                        "byte_start": 9336,
                        "column_end": 5,
                        "column_start": 5,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\race.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 295,
                        "line_start": 295,
                        "suggested_replacement": "use core::mem::drop;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 5,
                            "highlight_start": 5,
                            "text": "    use super::atomic::{AtomicPtr, Ordering};"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0425",
                  "explanation": "An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"
                },
                "level": "error",
                "message": "cannot find function `drop` in this scope",
                "spans": [
                  {
                    "byte_end": 12860,
                    "byte_start": 12856,
                    "column_end": 25,
                    "column_start": 21,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\race.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 401,
                    "line_start": 401,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 25,
                        "highlight_start": 21,
                        "text": "                    drop(unsafe { Box::from_raw(ptr) });"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#once_cell@1.18.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "once_cell",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0425]: cannot find function, tuple struct or tuple variant `Ok` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\race.rs:405:13\n    |\n405 |             Ok(unsafe { &*ptr })\n    |             ^^ not found in this scope\n    |\nhelp: consider importing this tuple variant\n    |\n295 +     use core::result::Result::Ok;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this tuple variant",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 9336,
                        "byte_start": 9336,
                        "column_end": 5,
                        "column_start": 5,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\race.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 295,
                        "line_start": 295,
                        "suggested_replacement": "use core::result::Result::Ok;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 5,
                            "highlight_start": 5,
                            "text": "    use super::atomic::{AtomicPtr, Ordering};"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0425",
                  "explanation": "An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"
                },
                "level": "error",
                "message": "cannot find function, tuple struct or tuple variant `Ok` in this scope",
                "spans": [
                  {
                    "byte_end": 12971,
                    "byte_start": 12969,
                    "column_end": 15,
                    "column_start": 13,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\race.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 405,
                    "line_start": 405,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 15,
                        "highlight_start": 13,
                        "text": "            Ok(unsafe { &*ptr })"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#once_cell@1.18.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "once_cell",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0405]: cannot find trait `Sync` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\race.rs:409:33\n    |\n409 |     unsafe impl<T: Sync + Send> Sync for OnceBox<T> {}\n    |                                 ^^^^ not found in this scope\n    |\nhelp: consider importing this trait\n    |\n295 +     use core::marker::Sync;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this trait",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 9336,
                        "byte_start": 9336,
                        "column_end": 5,
                        "column_start": 5,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\race.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 295,
                        "line_start": 295,
                        "suggested_replacement": "use core::marker::Sync;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 5,
                            "highlight_start": 5,
                            "text": "    use super::atomic::{AtomicPtr, Ordering};"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0405",
                  "explanation": "The code refers to a trait that is not in scope.\n\nErroneous code example:\n\n```compile_fail,E0405\nstruct Foo;\n\nimpl SomeTrait for Foo {} // error: trait `SomeTrait` is not in scope\n```\n\nPlease verify that the name of the trait wasn't misspelled and ensure that it\nwas imported. Example:\n\n```\n# #[cfg(for_demonstration_only)]\n// solution 1:\nuse some_file::SomeTrait;\n\n// solution 2:\ntrait SomeTrait {\n    // some functions\n}\n\nstruct Foo;\n\nimpl SomeTrait for Foo { // ok!\n    // implements functions\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find trait `Sync` in this scope",
                "spans": [
                  {
                    "byte_end": 13043,
                    "byte_start": 13039,
                    "column_end": 37,
                    "column_start": 33,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\race.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 409,
                    "line_start": 409,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 37,
                        "highlight_start": 33,
                        "text": "    unsafe impl<T: Sync + Send> Sync for OnceBox<T> {}"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#once_cell@1.18.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "once_cell",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0405]: cannot find trait `Sync` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\race.rs:409:20\n    |\n409 |     unsafe impl<T: Sync + Send> Sync for OnceBox<T> {}\n    |                    ^^^^ not found in this scope\n    |\nhelp: consider importing this trait\n    |\n295 +     use core::marker::Sync;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this trait",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 9336,
                        "byte_start": 9336,
                        "column_end": 5,
                        "column_start": 5,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\race.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 295,
                        "line_start": 295,
                        "suggested_replacement": "use core::marker::Sync;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 5,
                            "highlight_start": 5,
                            "text": "    use super::atomic::{AtomicPtr, Ordering};"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0405",
                  "explanation": "The code refers to a trait that is not in scope.\n\nErroneous code example:\n\n```compile_fail,E0405\nstruct Foo;\n\nimpl SomeTrait for Foo {} // error: trait `SomeTrait` is not in scope\n```\n\nPlease verify that the name of the trait wasn't misspelled and ensure that it\nwas imported. Example:\n\n```\n# #[cfg(for_demonstration_only)]\n// solution 1:\nuse some_file::SomeTrait;\n\n// solution 2:\ntrait SomeTrait {\n    // some functions\n}\n\nstruct Foo;\n\nimpl SomeTrait for Foo { // ok!\n    // implements functions\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find trait `Sync` in this scope",
                "spans": [
                  {
                    "byte_end": 13030,
                    "byte_start": 13026,
                    "column_end": 24,
                    "column_start": 20,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\race.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 409,
                    "line_start": 409,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 24,
                        "highlight_start": 20,
                        "text": "    unsafe impl<T: Sync + Send> Sync for OnceBox<T> {}"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#once_cell@1.18.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "once_cell",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0405]: cannot find trait `Send` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\race.rs:409:27\n    |\n409 |     unsafe impl<T: Sync + Send> Sync for OnceBox<T> {}\n    |                           ^^^^ not found in this scope\n    |\nhelp: consider importing this trait\n    |\n295 +     use core::marker::Send;\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this trait",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 9336,
                        "byte_start": 9336,
                        "column_end": 5,
                        "column_start": 5,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\race.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 295,
                        "line_start": 295,
                        "suggested_replacement": "use core::marker::Send;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 5,
                            "highlight_start": 5,
                            "text": "    use super::atomic::{AtomicPtr, Ordering};"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0405",
                  "explanation": "The code refers to a trait that is not in scope.\n\nErroneous code example:\n\n```compile_fail,E0405\nstruct Foo;\n\nimpl SomeTrait for Foo {} // error: trait `SomeTrait` is not in scope\n```\n\nPlease verify that the name of the trait wasn't misspelled and ensure that it\nwas imported. Example:\n\n```\n# #[cfg(for_demonstration_only)]\n// solution 1:\nuse some_file::SomeTrait;\n\n// solution 2:\ntrait SomeTrait {\n    // some functions\n}\n\nstruct Foo;\n\nimpl SomeTrait for Foo { // ok!\n    // implements functions\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find trait `Send` in this scope",
                "spans": [
                  {
                    "byte_end": 13037,
                    "byte_start": 13033,
                    "column_end": 31,
                    "column_start": 27,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\race.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 409,
                    "line_start": 409,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 31,
                        "highlight_start": 27,
                        "text": "    unsafe impl<T: Sync + Send> Sync for OnceBox<T> {}"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#once_cell@1.18.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "once_cell",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "Some errors have detailed explanations: E0405, E0408, E0412, E0425, E0462, E0463, E0531, E0786.\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": null,
                "level": "failure-note",
                "message": "Some errors have detailed explanations: E0405, E0408, E0412, E0425, E0462, E0463, E0531, E0786.",
                "spans": []
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#once_cell@1.18.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "once_cell",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "For more information about an error, try `rustc --explain E0405`.\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": null,
                "level": "failure-note",
                "message": "For more information about an error, try `rustc --explain E0405`.",
                "spans": []
              }
            },
            {
              "reason": "build-finished",
              "success": false
            }
          ],
          "clippy": [
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#proc-macro2@1.0.63",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\proc-macro2-1.0.63\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\proc-macro2-1.0.63\\build.rs",
                "edition": "2018",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "proc-macro"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpkh7hmy5y\\trust-dns-0.23.2\\target\\debug\\build\\proc-macro2-4bc91f68a1a9ec42\\build-script-build.exe",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpkh7hmy5y\\trust-dns-0.23.2\\target\\debug\\build\\proc-macro2-4bc91f68a1a9ec42\\build_script_build.pdb"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#cfg-if@1.0.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\cfg-if-1.0.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "cfg_if",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\cfg-if-1.0.0\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpkh7hmy5y\\trust-dns-0.23.2\\target\\debug\\deps\\libcfg_if-f755e379589b9030.rmeta"
              ],
              "executable": null,
              "fresh": true
            },
            {
              "reason": "build-script-executed",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#proc-macro2@1.0.63",
              "linked_libs": [],
              "linked_paths": [],
              "cfgs": [
                "wrap_proc_macro"
              ],
              "env": [],
              "out_dir": "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpkh7hmy5y\\trust-dns-0.23.2\\target\\debug\\build\\proc-macro2-ca9778cd2fa5f480\\out"
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#pin-project-lite@0.2.9",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\pin-project-lite-0.2.9\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "pin_project_lite",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\pin-project-lite-0.2.9\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpkh7hmy5y\\trust-dns-0.23.2\\target\\debug\\deps\\libpin_project_lite-62d98a410d564966.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#smallvec@1.10.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.10.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "smallvec",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.10.0\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0786]: found invalid metadata files for crate `compiler_builtins` which `alloc` depends on\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.10.0\\src\\lib.rs:92:1\n   |\n92 | pub extern crate alloc;\n   | ^^^^^^^^^^^^^^^^^^^^^^^\n   |\n   = note: failed to mmap file 'C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib\\rustlib\\x86_64-pc-windows-msvc\\lib\\libcompiler_builtins-c7e124f7b7770f1f.rlib': The paging file is too small for this operation to complete. (os error 1455)\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "failed to mmap file 'C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib\\rustlib\\x86_64-pc-windows-msvc\\lib\\libcompiler_builtins-c7e124f7b7770f1f.rlib': The paging file is too small for this operation to complete. (os error 1455)",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "E0786",
                  "explanation": "A metadata file was invalid.\n\nErroneous code example:\n\n```ignore (needs extern files)\nuse ::foo; // error: found invalid metadata files for crate `foo`\n```\n\nWhen loading crates, each crate must have a valid metadata file.\nInvalid files could be caused by filesystem corruption,\nan IO error while reading the file, or (rarely) a bug in the compiler itself.\n\nConsider deleting the file and recreating it,\nor reporting a bug against the compiler.\n"
                },
                "level": "error",
                "message": "found invalid metadata files for crate `compiler_builtins` which `alloc` depends on",
                "spans": [
                  {
                    "byte_end": 3800,
                    "byte_start": 3777,
                    "column_end": 24,
                    "column_start": 1,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.10.0\\src\\lib.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 92,
                    "line_start": 92,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 24,
                        "highlight_start": 1,
                        "text": "pub extern crate alloc;"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#futures-core@0.3.27",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\futures-core-0.3.27\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\futures-core-0.3.27\\build.rs",
                "edition": "2018",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "message": {
                "rendered": "error[E0786]: found invalid metadata files for crate `alloc` which `std` depends on\n  |\n  = note: failed to mmap file 'C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib\\rustlib\\x86_64-pc-windows-msvc\\lib\\liballoc-95e341a3bbb0a38e.rlib': The paging file is too small for this operation to complete. (os error 1455)\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "failed to mmap file 'C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib\\rustlib\\x86_64-pc-windows-msvc\\lib\\liballoc-95e341a3bbb0a38e.rlib': The paging file is too small for this operation to complete. (os error 1455)",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "E0786",
                  "explanation": "A metadata file was invalid.\n\nErroneous code example:\n\n```ignore (needs extern files)\nuse ::foo; // error: found invalid metadata files for crate `foo`\n```\n\nWhen loading crates, each crate must have a valid metadata file.\nInvalid files could be caused by filesystem corruption,\nan IO error while reading the file, or (rarely) a bug in the compiler itself.\n\nConsider deleting the file and recreating it,\nor reporting a bug against the compiler.\n"
                },
                "level": "error",
                "message": "found invalid metadata files for crate `alloc` which `std` depends on",
                "spans": [
                  {
                    "byte_end": 0,
                    "byte_start": 0,
                    "column_end": 1,
                    "column_start": 1,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\futures-core-0.3.27\\build.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 1,
                    "line_start": 1,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": []
                  }
                ]
              }
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#unicode-ident@1.0.8",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\unicode-ident-1.0.8\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "unicode_ident",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\unicode-ident-1.0.8\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpkh7hmy5y\\trust-dns-0.23.2\\target\\debug\\deps\\libunicode_ident-b15c39dc295f6d9e.rlib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpkh7hmy5y\\trust-dns-0.23.2\\target\\debug\\deps\\libunicode_ident-b15c39dc295f6d9e.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#smallvec@1.10.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.10.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "smallvec",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.10.0\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0786]: found invalid metadata files for crate `compiler_builtins`\n --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.10.0\\src\\lib.rs:7:1\n  |\n7 | //! Small vectors in various sizes. These store a certain number of elements inline, and fall back\n  | ^\n  |\n  = note: failed to mmap file 'C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib\\rustlib\\x86_64-pc-windows-msvc\\lib\\libcompiler_builtins-c7e124f7b7770f1f.rlib': The paging file is too small for this operation to complete. (os error 1455)\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "failed to mmap file 'C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib\\rustlib\\x86_64-pc-windows-msvc\\lib\\libcompiler_builtins-c7e124f7b7770f1f.rlib': The paging file is too small for this operation to complete. (os error 1455)",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "E0786",
                  "explanation": "A metadata file was invalid.\n\nErroneous code example:\n\n```ignore (needs extern files)\nuse ::foo; // error: found invalid metadata files for crate `foo`\n```\n\nWhen loading crates, each crate must have a valid metadata file.\nInvalid files could be caused by filesystem corruption,\nan IO error while reading the file, or (rarely) a bug in the compiler itself.\n\nConsider deleting the file and recreating it,\nor reporting a bug against the compiler.\n"
                },
                "level": "error",
                "message": "found invalid metadata files for crate `compiler_builtins`",
                "spans": [
                  {
                    "byte_end": 301,
                    "byte_start": 301,
                    "column_end": 1,
                    "column_start": 1,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.10.0\\src\\lib.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 7,
                    "line_start": 7,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 1,
                        "highlight_start": 1,
                        "text": "//! Small vectors in various sizes. These store a certain number of elements inline, and fall back"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#windows_x86_64_msvc@0.48.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\windows_x86_64_msvc-0.48.0\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\windows_x86_64_msvc-0.48.0\\build.rs",
                "edition": "2018",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "message": {
                "rendered": "error[E0786]: found invalid metadata files for crate `core` which `std` depends on\n  |\n  = note: failed to mmap file 'C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib\\rustlib\\x86_64-pc-windows-msvc\\lib\\libcore-50d17f87cee49b53.rlib': The paging file is too small for this operation to complete. (os error 1455)\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "failed to mmap file 'C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib\\rustlib\\x86_64-pc-windows-msvc\\lib\\libcore-50d17f87cee49b53.rlib': The paging file is too small for this operation to complete. (os error 1455)",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "E0786",
                  "explanation": "A metadata file was invalid.\n\nErroneous code example:\n\n```ignore (needs extern files)\nuse ::foo; // error: found invalid metadata files for crate `foo`\n```\n\nWhen loading crates, each crate must have a valid metadata file.\nInvalid files could be caused by filesystem corruption,\nan IO error while reading the file, or (rarely) a bug in the compiler itself.\n\nConsider deleting the file and recreating it,\nor reporting a bug against the compiler.\n"
                },
                "level": "error",
                "message": "found invalid metadata files for crate `core` which `std` depends on",
                "spans": [
                  {
                    "byte_end": 0,
                    "byte_start": 0,
                    "column_end": 1,
                    "column_start": 1,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\windows_x86_64_msvc-0.48.0\\build.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 1,
                    "line_start": 1,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": []
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#serde@1.0.158",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde-1.0.158\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde-1.0.158\\build.rs",
                "edition": "2015",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "message": {
                "rendered": "error[E0786]: found invalid metadata files for crate `core` which `std` depends on\n  |\n  = note: failed to mmap file 'C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib\\rustlib\\x86_64-pc-windows-msvc\\lib\\libcore-50d17f87cee49b53.rlib': The paging file is too small for this operation to complete. (os error 1455)\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "failed to mmap file 'C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib\\rustlib\\x86_64-pc-windows-msvc\\lib\\libcore-50d17f87cee49b53.rlib': The paging file is too small for this operation to complete. (os error 1455)",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "E0786",
                  "explanation": "A metadata file was invalid.\n\nErroneous code example:\n\n```ignore (needs extern files)\nuse ::foo; // error: found invalid metadata files for crate `foo`\n```\n\nWhen loading crates, each crate must have a valid metadata file.\nInvalid files could be caused by filesystem corruption,\nan IO error while reading the file, or (rarely) a bug in the compiler itself.\n\nConsider deleting the file and recreating it,\nor reporting a bug against the compiler.\n"
                },
                "level": "error",
                "message": "found invalid metadata files for crate `core` which `std` depends on",
                "spans": [
                  {
                    "byte_end": 0,
                    "byte_start": 0,
                    "column_end": 1,
                    "column_start": 1,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde-1.0.158\\build.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 1,
                    "line_start": 1,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": []
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#serde@1.0.158",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde-1.0.158\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde-1.0.158\\build.rs",
                "edition": "2015",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "message": {
                "rendered": "error: cannot find macro `println` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde-1.0.158\\build.rs:121:9\n    |\n121 |         println!(\"cargo:rustc-cfg=no_core_cstr\");\n    |         ^^^^^^^\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": null,
                "level": "error",
                "message": "cannot find macro `println` in this scope",
                "spans": [
                  {
                    "byte_end": 4858,
                    "byte_start": 4851,
                    "column_end": 16,
                    "column_start": 9,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde-1.0.158\\build.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 121,
                    "line_start": 121,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 16,
                        "highlight_start": 9,
                        "text": "        println!(\"cargo:rustc-cfg=no_core_cstr\");"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#serde@1.0.158",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde-1.0.158\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde-1.0.158\\build.rs",
                "edition": "2015",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "message": {
                "rendered": "error: cannot find macro `println` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde-1.0.158\\build.rs:114:13\n    |\n114 |             println!(\"cargo:rustc-cfg=no_std_atomic\");\n    |             ^^^^^^^\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": null,
                "level": "error",
                "message": "cannot find macro `println` in this scope",
                "spans": [
                  {
                    "byte_end": 4583,
                    "byte_start": 4576,
                    "column_end": 20,
                    "column_start": 13,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde-1.0.158\\build.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 114,
                    "line_start": 114,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 20,
                        "highlight_start": 13,
                        "text": "            println!(\"cargo:rustc-cfg=no_std_atomic\");"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#serde@1.0.158",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde-1.0.158\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde-1.0.158\\build.rs",
                "edition": "2015",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "message": {
                "rendered": "error: cannot find macro `println` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde-1.0.158\\build.rs:111:13\n    |\n111 |             println!(\"cargo:rustc-cfg=no_std_atomic64\");\n    |             ^^^^^^^\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": null,
                "level": "error",
                "message": "cannot find macro `println` in this scope",
                "spans": [
                  {
                    "byte_end": 4475,
                    "byte_start": 4468,
                    "column_end": 20,
                    "column_start": 13,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde-1.0.158\\build.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 111,
                    "line_start": 111,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 20,
                        "highlight_start": 13,
                        "text": "            println!(\"cargo:rustc-cfg=no_std_atomic64\");"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#serde@1.0.158",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde-1.0.158\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde-1.0.158\\build.rs",
                "edition": "2015",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "message": {
                "rendered": "error: cannot find macro `println` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde-1.0.158\\build.rs:99:9\n   |\n99 |         println!(\"cargo:rustc-cfg=no_target_has_atomic\");\n   |         ^^^^^^^\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": null,
                "level": "error",
                "message": "cannot find macro `println` in this scope",
                "spans": [
                  {
                    "byte_end": 3848,
                    "byte_start": 3841,
                    "column_end": 16,
                    "column_start": 9,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde-1.0.158\\build.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 99,
                    "line_start": 99,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 16,
                        "highlight_start": 9,
                        "text": "        println!(\"cargo:rustc-cfg=no_target_has_atomic\");"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#serde@1.0.158",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde-1.0.158\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde-1.0.158\\build.rs",
                "edition": "2015",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "message": {
                "rendered": "error: cannot find macro `println` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde-1.0.158\\build.rs:94:9\n   |\n94 |         println!(\"cargo:rustc-cfg=no_serde_derive\");\n   |         ^^^^^^^\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": null,
                "level": "error",
                "message": "cannot find macro `println` in this scope",
                "spans": [
                  {
                    "byte_end": 3690,
                    "byte_start": 3683,
                    "column_end": 16,
                    "column_start": 9,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde-1.0.158\\build.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 94,
                    "line_start": 94,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 16,
                        "highlight_start": 9,
                        "text": "        println!(\"cargo:rustc-cfg=no_serde_derive\");"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#serde@1.0.158",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde-1.0.158\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde-1.0.158\\build.rs",
                "edition": "2015",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "message": {
                "rendered": "error: cannot find macro `println` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde-1.0.158\\build.rs:89:9\n   |\n89 |         println!(\"cargo:rustc-cfg=no_relaxed_trait_bounds\");\n   |         ^^^^^^^\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": null,
                "level": "error",
                "message": "cannot find macro `println` in this scope",
                "spans": [
                  {
                    "byte_end": 3525,
                    "byte_start": 3518,
                    "column_end": 16,
                    "column_start": 9,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde-1.0.158\\build.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 89,
                    "line_start": 89,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 16,
                        "highlight_start": 9,
                        "text": "        println!(\"cargo:rustc-cfg=no_relaxed_trait_bounds\");"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#serde@1.0.158",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde-1.0.158\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde-1.0.158\\build.rs",
                "edition": "2015",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "message": {
                "rendered": "error: cannot find macro `println` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde-1.0.158\\build.rs:88:9\n   |\n88 |         println!(\"cargo:rustc-cfg=no_systemtime_checked_add\");\n   |         ^^^^^^^\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": null,
                "level": "error",
                "message": "cannot find macro `println` in this scope",
                "spans": [
                  {
                    "byte_end": 3462,
                    "byte_start": 3455,
                    "column_end": 16,
                    "column_start": 9,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde-1.0.158\\build.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 88,
                    "line_start": 88,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 16,
                        "highlight_start": 9,
                        "text": "        println!(\"cargo:rustc-cfg=no_systemtime_checked_add\");"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#serde@1.0.158",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde-1.0.158\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde-1.0.158\\build.rs",
                "edition": "2015",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "message": {
                "rendered": "error: cannot find macro `println` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde-1.0.158\\build.rs:87:9\n   |\n87 |         println!(\"cargo:rustc-cfg=no_num_nonzero_signed\");\n   |         ^^^^^^^\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": null,
                "level": "error",
                "message": "cannot find macro `println` in this scope",
                "spans": [
                  {
                    "byte_end": 3403,
                    "byte_start": 3396,
                    "column_end": 16,
                    "column_start": 9,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde-1.0.158\\build.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 87,
                    "line_start": 87,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 16,
                        "highlight_start": 9,
                        "text": "        println!(\"cargo:rustc-cfg=no_num_nonzero_signed\");"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#serde@1.0.158",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde-1.0.158\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde-1.0.158\\build.rs",
                "edition": "2015",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "message": {
                "rendered": "error: cannot find macro `println` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde-1.0.158\\build.rs:86:9\n   |\n86 |         println!(\"cargo:rustc-cfg=no_core_try_from\");\n   |         ^^^^^^^\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": null,
                "level": "error",
                "message": "cannot find macro `println` in this scope",
                "spans": [
                  {
                    "byte_end": 3349,
                    "byte_start": 3342,
                    "column_end": 16,
                    "column_start": 9,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde-1.0.158\\build.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 86,
                    "line_start": 86,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 16,
                        "highlight_start": 9,
                        "text": "        println!(\"cargo:rustc-cfg=no_core_try_from\");"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#serde@1.0.158",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde-1.0.158\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde-1.0.158\\build.rs",
                "edition": "2015",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "message": {
                "rendered": "error: cannot find macro `println` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde-1.0.158\\build.rs:78:9\n   |\n78 |         println!(\"cargo:rustc-cfg=no_num_nonzero\");\n   |         ^^^^^^^\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": null,
                "level": "error",
                "message": "cannot find macro `println` in this scope",
                "spans": [
                  {
                    "byte_end": 2987,
                    "byte_start": 2980,
                    "column_end": 16,
                    "column_start": 9,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde-1.0.158\\build.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 78,
                    "line_start": 78,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 16,
                        "highlight_start": 9,
                        "text": "        println!(\"cargo:rustc-cfg=no_num_nonzero\");"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#serde@1.0.158",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde-1.0.158\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde-1.0.158\\build.rs",
                "edition": "2015",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "message": {
                "rendered": "error: cannot find macro `println` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde-1.0.158\\build.rs:72:9\n   |\n72 |         println!(\"cargo:rustc-cfg=no_iterator_try_fold\");\n   |         ^^^^^^^\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": null,
                "level": "error",
                "message": "cannot find macro `println` in this scope",
                "spans": [
                  {
                    "byte_end": 2769,
                    "byte_start": 2762,
                    "column_end": 16,
                    "column_start": 9,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde-1.0.158\\build.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 72,
                    "line_start": 72,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 16,
                        "highlight_start": 9,
                        "text": "        println!(\"cargo:rustc-cfg=no_iterator_try_fold\");"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#serde@1.0.158",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde-1.0.158\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde-1.0.158\\build.rs",
                "edition": "2015",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "message": {
                "rendered": "error: cannot find macro `println` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde-1.0.158\\build.rs:71:9\n   |\n71 |         println!(\"cargo:rustc-cfg=no_range_inclusive\");\n   |         ^^^^^^^\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": null,
                "level": "error",
                "message": "cannot find macro `println` in this scope",
                "spans": [
                  {
                    "byte_end": 2713,
                    "byte_start": 2706,
                    "column_end": 16,
                    "column_start": 9,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde-1.0.158\\build.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 71,
                    "line_start": 71,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 16,
                        "highlight_start": 9,
                        "text": "        println!(\"cargo:rustc-cfg=no_range_inclusive\");"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#memchr@2.5.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\memchr-2.5.0\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\memchr-2.5.0\\build.rs",
                "edition": "2018",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "message": {
                "rendered": "error[E0786]: found invalid metadata files for crate `core` which `std` depends on\n  |\n  = note: failed to mmap file 'C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib\\rustlib\\x86_64-pc-windows-msvc\\lib\\libcore-50d17f87cee49b53.rlib': The paging file is too small for this operation to complete. (os error 1455)\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "failed to mmap file 'C:\\Users\\davet\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib\\rustlib\\x86_64-pc-windows-msvc\\lib\\libcore-50d17f87cee49b53.rlib': The paging file is too small for this operation to complete. (os error 1455)",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "E0786",
                  "explanation": "A metadata file was invalid.\n\nErroneous code example:\n\n```ignore (needs extern files)\nuse ::foo; // error: found invalid metadata files for crate `foo`\n```\n\nWhen loading crates, each crate must have a valid metadata file.\nInvalid files could be caused by filesystem corruption,\nan IO error while reading the file, or (rarely) a bug in the compiler itself.\n\nConsider deleting the file and recreating it,\nor reporting a bug against the compiler.\n"
                },
                "level": "error",
                "message": "found invalid metadata files for crate `core` which `std` depends on",
                "spans": [
                  {
                    "byte_end": 0,
                    "byte_start": 0,
                    "column_end": 1,
                    "column_start": 1,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\memchr-2.5.0\\build.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 1,
                    "line_start": 1,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": []
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#serde@1.0.158",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde-1.0.158\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde-1.0.158\\build.rs",
                "edition": "2015",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "message": {
                "rendered": "error: cannot find macro `println` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde-1.0.158\\build.rs:63:9\n   |\n63 |         println!(\"cargo:rustc-cfg=no_integer128\");\n   |         ^^^^^^^\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": null,
                "level": "error",
                "message": "cannot find macro `println` in this scope",
                "spans": [
                  {
                    "byte_end": 2407,
                    "byte_start": 2400,
                    "column_end": 16,
                    "column_start": 9,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde-1.0.158\\build.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 63,
                    "line_start": 63,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 16,
                        "highlight_start": 9,
                        "text": "        println!(\"cargo:rustc-cfg=no_integer128\");"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#serde@1.0.158",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde-1.0.158\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde-1.0.158\\build.rs",
                "edition": "2015",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "message": {
                "rendered": "error: cannot find macro `println` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde-1.0.158\\build.rs:53:9\n   |\n53 |         println!(\"cargo:rustc-cfg=no_core_duration\");\n   |         ^^^^^^^\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": null,
                "level": "error",
                "message": "cannot find macro `println` in this scope",
                "spans": [
                  {
                    "byte_end": 2000,
                    "byte_start": 1993,
                    "column_end": 16,
                    "column_start": 9,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde-1.0.158\\build.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 53,
                    "line_start": 53,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 16,
                        "highlight_start": 9,
                        "text": "        println!(\"cargo:rustc-cfg=no_core_duration\");"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#serde@1.0.158",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde-1.0.158\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde-1.0.158\\build.rs",
                "edition": "2015",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "message": {
                "rendered": "error: cannot find macro `println` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde-1.0.158\\build.rs:47:9\n   |\n47 |         println!(\"cargo:rustc-cfg=no_de_rc_dst\");\n   |         ^^^^^^^\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": null,
                "level": "error",
                "message": "cannot find macro `println` in this scope",
                "spans": [
                  {
                    "byte_end": 1789,
                    "byte_start": 1782,
                    "column_end": 16,
                    "column_start": 9,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde-1.0.158\\build.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 47,
                    "line_start": 47,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 16,
                        "highlight_start": 9,
                        "text": "        println!(\"cargo:rustc-cfg=no_de_rc_dst\");"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#serde@1.0.158",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde-1.0.158\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde-1.0.158\\build.rs",
                "edition": "2015",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "message": {
                "rendered": "error: cannot find macro `println` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde-1.0.158\\build.rs:40:9\n   |\n40 |         println!(\"cargo:rustc-cfg=no_de_boxed_path\");\n   |         ^^^^^^^\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": null,
                "level": "error",
                "message": "cannot find macro `println` in this scope",
                "spans": [
                  {
                    "byte_end": 1495,
                    "byte_start": 1488,
                    "column_end": 16,
                    "column_start": 9,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde-1.0.158\\build.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 40,
                    "line_start": 40,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 16,
                        "highlight_start": 9,
                        "text": "        println!(\"cargo:rustc-cfg=no_de_boxed_path\");"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#serde@1.0.158",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde-1.0.158\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde-1.0.158\\build.rs",
                "edition": "2015",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "message": {
                "rendered": "error: cannot find macro `println` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde-1.0.158\\build.rs:39:9\n   |\n39 |         println!(\"cargo:rustc-cfg=no_de_boxed_c_str\");\n   |         ^^^^^^^\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": null,
                "level": "error",
                "message": "cannot find macro `println` in this scope",
                "spans": [
                  {
                    "byte_end": 1440,
                    "byte_start": 1433,
                    "column_end": 16,
                    "column_start": 9,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde-1.0.158\\build.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 39,
                    "line_start": 39,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 16,
                        "highlight_start": 9,
                        "text": "        println!(\"cargo:rustc-cfg=no_de_boxed_c_str\");"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#serde@1.0.158",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde-1.0.158\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde-1.0.158\\build.rs",
                "edition": "2015",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "message": {
                "rendered": "error: cannot find macro `println` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde-1.0.158\\build.rs:32:9\n   |\n32 |         println!(\"cargo:rustc-cfg=no_core_reverse\");\n   |         ^^^^^^^\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": null,
                "level": "error",
                "message": "cannot find macro `println` in this scope",
                "spans": [
                  {
                    "byte_end": 1103,
                    "byte_start": 1096,
                    "column_end": 16,
                    "column_start": 9,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde-1.0.158\\build.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 32,
                    "line_start": 32,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 16,
                        "highlight_start": 9,
                        "text": "        println!(\"cargo:rustc-cfg=no_core_reverse\");"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#serde@1.0.158",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde-1.0.158\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde-1.0.158\\build.rs",
                "edition": "2015",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "message": {
                "rendered": "error: cannot find macro `println` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde-1.0.158\\build.rs:25:13\n   |\n25 |             println!(\"cargo:rustc-cfg=no_collections_bound\");\n   |             ^^^^^^^\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": null,
                "level": "error",
                "message": "cannot find macro `println` in this scope",
                "spans": [
                  {
                    "byte_end": 888,
                    "byte_start": 881,
                    "column_end": 20,
                    "column_start": 13,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde-1.0.158\\build.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 25,
                    "line_start": 25,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 20,
                        "highlight_start": 13,
                        "text": "            println!(\"cargo:rustc-cfg=no_collections_bound\");"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#serde@1.0.158",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde-1.0.158\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde-1.0.158\\build.rs",
                "edition": "2015",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "message": {
                "rendered": "error: cannot find macro `println` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde-1.0.158\\build.rs:23:9\n   |\n23 |         println!(\"cargo:rustc-cfg=no_ops_bound\");\n   |         ^^^^^^^\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": null,
                "level": "error",
                "message": "cannot find macro `println` in this scope",
                "spans": [
                  {
                    "byte_end": 810,
                    "byte_start": 803,
                    "column_end": 16,
                    "column_start": 9,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde-1.0.158\\build.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 23,
                    "line_start": 23,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 16,
                        "highlight_start": 9,
                        "text": "        println!(\"cargo:rustc-cfg=no_ops_bound\");"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#serde@1.0.158",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde-1.0.158\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde-1.0.158\\build.rs",
                "edition": "2015",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "message": {
                "rendered": "error: cannot find macro `println` in this scope\n --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde-1.0.158\\build.rs:9:5\n  |\n9 |     println!(\"cargo:rerun-if-changed=build.rs\");\n  |     ^^^^^^^\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": null,
                "level": "error",
                "message": "cannot find macro `println` in this scope",
                "spans": [
                  {
                    "byte_end": 307,
                    "byte_start": 300,
                    "column_end": 12,
                    "column_start": 5,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde-1.0.158\\build.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 9,
                    "line_start": 9,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 12,
                        "highlight_start": 5,
                        "text": "    println!(\"cargo:rerun-if-changed=build.rs\");"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#once_cell@1.18.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "once_cell",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\once_cell-1.18.0\\src\\lib.rs",
                "edition": "2021",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "alloc",
                "default",
                "race",
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpkh7hmy5y\\trust-dns-0.23.2\\target\\debug\\deps\\libonce_cell-ac0a519ea1a3af5e.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#version_check@0.9.4",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.9.4\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "version_check",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\version_check-0.9.4\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpkh7hmy5y\\trust-dns-0.23.2\\target\\debug\\deps\\libversion_check-616d4ef6615e721f.rlib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpkh7hmy5y\\trust-dns-0.23.2\\target\\debug\\deps\\libversion_check-616d4ef6615e721f.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#autocfg@1.1.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.1.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "autocfg",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\autocfg-1.1.0\\src\\lib.rs",
                "edition": "2015",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpkh7hmy5y\\trust-dns-0.23.2\\target\\debug\\deps\\libautocfg-bc3c1568e43c163b.rlib",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpkh7hmy5y\\trust-dns-0.23.2\\target\\debug\\deps\\libautocfg-bc3c1568e43c163b.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#futures-core@0.3.27",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\futures-core-0.3.27\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\futures-core-0.3.27\\build.rs",
                "edition": "2018",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "message": {
                "rendered": "error[E0463]: can't find crate for `std`\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\futures-core-0.3.27\\build.rs:15:5\n   |\n15 | use std::env;\n   |     ^^^ can't find crate\n   |\n   = note: the `x86_64-pc-windows-msvc` target may not support the standard library\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "the `x86_64-pc-windows-msvc` target may not support the standard library",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "E0463",
                  "explanation": "A crate was declared but cannot be found.\n\nErroneous code example:\n\n```compile_fail,E0463\nextern crate foo; // error: can't find crate\n```\n\nYou need to link your code to the relevant crate in order to be able to use it\n(through Cargo or the `-L` option of rustc, for example).\n\n## Common causes\n\n- The crate is not present at all. If using Cargo, add it to `[dependencies]`\n  in Cargo.toml.\n- The crate is present, but under a different name. If using Cargo, look for\n  `package = ` under `[dependencies]` in Cargo.toml.\n\n## Common causes for missing `std` or `core`\n\n- You are cross-compiling for a target which doesn't have `std` prepackaged.\n  Consider one of the following:\n  + Adding a pre-compiled version of std with `rustup target add`\n  + Building std from source with `cargo build -Z build-std`\n  + Using `#![no_std]` at the crate root, so you won't need `std` in the first\n    place.\n- You are developing the compiler itself and haven't built libstd from source.\n  You can usually build it with `x.py build library/std`. More information\n  about x.py is available in the [rustc-dev-guide].\n\n[rustc-dev-guide]: https://rustc-dev-guide.rust-lang.org/building/how-to-build-and-run.html#building-the-compiler\n"
                },
                "level": "error",
                "message": "can't find crate for `std`",
                "spans": [
                  {
                    "byte_end": 616,
                    "byte_start": 613,
                    "column_end": 8,
                    "column_start": 5,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\futures-core-0.3.27\\build.rs",
                    "is_primary": true,
                    "label": "can't find crate",
                    "line_end": 15,
                    "line_start": 15,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 8,
                        "highlight_start": 5,
                        "text": "use std::env;"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#memchr@2.5.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\memchr-2.5.0\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\memchr-2.5.0\\build.rs",
                "edition": "2018",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "message": {
                "rendered": "error[E0463]: can't find crate for `std`\n --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\memchr-2.5.0\\build.rs:1:5\n  |\n1 | use std::env;\n  |     ^^^ can't find crate\n  |\n  = note: the `x86_64-pc-windows-msvc` target may not support the standard library\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "the `x86_64-pc-windows-msvc` target may not support the standard library",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "E0463",
                  "explanation": "A crate was declared but cannot be found.\n\nErroneous code example:\n\n```compile_fail,E0463\nextern crate foo; // error: can't find crate\n```\n\nYou need to link your code to the relevant crate in order to be able to use it\n(through Cargo or the `-L` option of rustc, for example).\n\n## Common causes\n\n- The crate is not present at all. If using Cargo, add it to `[dependencies]`\n  in Cargo.toml.\n- The crate is present, but under a different name. If using Cargo, look for\n  `package = ` under `[dependencies]` in Cargo.toml.\n\n## Common causes for missing `std` or `core`\n\n- You are cross-compiling for a target which doesn't have `std` prepackaged.\n  Consider one of the following:\n  + Adding a pre-compiled version of std with `rustup target add`\n  + Building std from source with `cargo build -Z build-std`\n  + Using `#![no_std]` at the crate root, so you won't need `std` in the first\n    place.\n- You are developing the compiler itself and haven't built libstd from source.\n  You can usually build it with `x.py build library/std`. More information\n  about x.py is available in the [rustc-dev-guide].\n\n[rustc-dev-guide]: https://rustc-dev-guide.rust-lang.org/building/how-to-build-and-run.html#building-the-compiler\n"
                },
                "level": "error",
                "message": "can't find crate for `std`",
                "spans": [
                  {
                    "byte_end": 7,
                    "byte_start": 4,
                    "column_end": 8,
                    "column_start": 5,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\memchr-2.5.0\\build.rs",
                    "is_primary": true,
                    "label": "can't find crate",
                    "line_end": 1,
                    "line_start": 1,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 8,
                        "highlight_start": 5,
                        "text": "use std::env;"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#serde@1.0.158",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde-1.0.158\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde-1.0.158\\build.rs",
                "edition": "2015",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "message": {
                "rendered": "error[E0531]: cannot find tuple struct or tuple variant `Some` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde-1.0.158\\build.rs:12:9\n   |\n12 |         Some(minor) => minor,\n   |         ^^^^ not found in this scope\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0531",
                  "explanation": "An unknown tuple struct/variant has been used.\n\nErroneous code example:\n\n```compile_fail,E0531\nlet Type(x) = Type(12); // error!\nmatch Bar(12) {\n    Bar(x) => {} // error!\n    _ => {}\n}\n```\n\nIn most cases, it's either a forgotten import or a typo. However, let's look at\nhow you can have such a type:\n\n```edition2018\nstruct Type(u32); // this is a tuple struct\n\nenum Foo {\n    Bar(u32), // this is a tuple variant\n}\n\nuse Foo::*; // To use Foo's variant directly, we need to import them in\n            // the scope.\n```\n\nEither way, it should work fine with our previous code:\n\n```edition2018\nstruct Type(u32);\n\nenum Foo {\n    Bar(u32),\n}\nuse Foo::*;\n\nlet Type(x) = Type(12); // ok!\nmatch Type(12) {\n    Type(x) => {} // ok!\n    _ => {}\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find tuple struct or tuple variant `Some` in this scope",
                "spans": [
                  {
                    "byte_end": 404,
                    "byte_start": 400,
                    "column_end": 13,
                    "column_start": 9,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde-1.0.158\\build.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 12,
                    "line_start": 12,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 13,
                        "highlight_start": 9,
                        "text": "        Some(minor) => minor,"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#serde@1.0.158",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde-1.0.158\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde-1.0.158\\build.rs",
                "edition": "2015",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "message": {
                "rendered": "error[E0412]: cannot find type `Option` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde-1.0.158\\build.rs:125:29\n    |\n125 | fn rustc_minor_version() -> Option<u32> {\n    |                             ^^^^^^ not found in this scope\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0412",
                  "explanation": "A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"
                },
                "level": "error",
                "message": "cannot find type `Option` in this scope",
                "spans": [
                  {
                    "byte_end": 4936,
                    "byte_start": 4930,
                    "column_end": 35,
                    "column_start": 29,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde-1.0.158\\build.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 125,
                    "line_start": 125,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 35,
                        "highlight_start": 29,
                        "text": "fn rustc_minor_version() -> Option<u32> {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#serde@1.0.158",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde-1.0.158\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde-1.0.158\\build.rs",
                "edition": "2015",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "message": {
                "rendered": "error[E0531]: cannot find tuple struct or tuple variant `Some` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde-1.0.158\\build.rs:127:9\n    |\n127 |         Some(rustc) => rustc,\n    |         ^^^^ not found in this scope\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0531",
                  "explanation": "An unknown tuple struct/variant has been used.\n\nErroneous code example:\n\n```compile_fail,E0531\nlet Type(x) = Type(12); // error!\nmatch Bar(12) {\n    Bar(x) => {} // error!\n    _ => {}\n}\n```\n\nIn most cases, it's either a forgotten import or a typo. However, let's look at\nhow you can have such a type:\n\n```edition2018\nstruct Type(u32); // this is a tuple struct\n\nenum Foo {\n    Bar(u32), // this is a tuple variant\n}\n\nuse Foo::*; // To use Foo's variant directly, we need to import them in\n            // the scope.\n```\n\nEither way, it should work fine with our previous code:\n\n```edition2018\nstruct Type(u32);\n\nenum Foo {\n    Bar(u32),\n}\nuse Foo::*;\n\nlet Type(x) = Type(12); // ok!\nmatch Type(12) {\n    Type(x) => {} // ok!\n    _ => {}\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find tuple struct or tuple variant `Some` in this scope",
                "spans": [
                  {
                    "byte_end": 5001,
                    "byte_start": 4997,
                    "column_end": 13,
                    "column_start": 9,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde-1.0.158\\build.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 127,
                    "line_start": 127,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 13,
                        "highlight_start": 9,
                        "text": "        Some(rustc) => rustc,"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#serde@1.0.158",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde-1.0.158\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde-1.0.158\\build.rs",
                "edition": "2015",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "message": {
                "rendered": "error[E0531]: cannot find tuple struct or tuple variant `Ok` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde-1.0.158\\build.rs:132:9\n    |\n132 |         Ok(output) => output,\n    |         ^^ not found in this scope\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0531",
                  "explanation": "An unknown tuple struct/variant has been used.\n\nErroneous code example:\n\n```compile_fail,E0531\nlet Type(x) = Type(12); // error!\nmatch Bar(12) {\n    Bar(x) => {} // error!\n    _ => {}\n}\n```\n\nIn most cases, it's either a forgotten import or a typo. However, let's look at\nhow you can have such a type:\n\n```edition2018\nstruct Type(u32); // this is a tuple struct\n\nenum Foo {\n    Bar(u32), // this is a tuple variant\n}\n\nuse Foo::*; // To use Foo's variant directly, we need to import them in\n            // the scope.\n```\n\nEither way, it should work fine with our previous code:\n\n```edition2018\nstruct Type(u32);\n\nenum Foo {\n    Bar(u32),\n}\nuse Foo::*;\n\nlet Type(x) = Type(12); // ok!\nmatch Type(12) {\n    Type(x) => {} // ok!\n    _ => {}\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find tuple struct or tuple variant `Ok` in this scope",
                "spans": [
                  {
                    "byte_end": 5137,
                    "byte_start": 5135,
                    "column_end": 11,
                    "column_start": 9,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde-1.0.158\\build.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 132,
                    "line_start": 132,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 11,
                        "highlight_start": 9,
                        "text": "        Ok(output) => output,"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#serde@1.0.158",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde-1.0.158\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde-1.0.158\\build.rs",
                "edition": "2015",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "message": {
                "rendered": "error[E0531]: cannot find tuple struct or tuple variant `Err` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde-1.0.158\\build.rs:133:9\n    |\n133 |         Err(_) => return None,\n    |         ^^^ not found in this scope\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0531",
                  "explanation": "An unknown tuple struct/variant has been used.\n\nErroneous code example:\n\n```compile_fail,E0531\nlet Type(x) = Type(12); // error!\nmatch Bar(12) {\n    Bar(x) => {} // error!\n    _ => {}\n}\n```\n\nIn most cases, it's either a forgotten import or a typo. However, let's look at\nhow you can have such a type:\n\n```edition2018\nstruct Type(u32); // this is a tuple struct\n\nenum Foo {\n    Bar(u32), // this is a tuple variant\n}\n\nuse Foo::*; // To use Foo's variant directly, we need to import them in\n            // the scope.\n```\n\nEither way, it should work fine with our previous code:\n\n```edition2018\nstruct Type(u32);\n\nenum Foo {\n    Bar(u32),\n}\nuse Foo::*;\n\nlet Type(x) = Type(12); // ok!\nmatch Type(12) {\n    Type(x) => {} // ok!\n    _ => {}\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find tuple struct or tuple variant `Err` in this scope",
                "spans": [
                  {
                    "byte_end": 5168,
                    "byte_start": 5165,
                    "column_end": 12,
                    "column_start": 9,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde-1.0.158\\build.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 133,
                    "line_start": 133,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 12,
                        "highlight_start": 9,
                        "text": "        Err(_) => return None,"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#serde@1.0.158",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde-1.0.158\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde-1.0.158\\build.rs",
                "edition": "2015",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "message": {
                "rendered": "error[E0425]: cannot find value `None` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde-1.0.158\\build.rs:133:26\n    |\n133 |         Err(_) => return None,\n    |                          ^^^^ not found in this scope\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0425",
                  "explanation": "An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"
                },
                "level": "error",
                "message": "cannot find value `None` in this scope",
                "spans": [
                  {
                    "byte_end": 5186,
                    "byte_start": 5182,
                    "column_end": 30,
                    "column_start": 26,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde-1.0.158\\build.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 133,
                    "line_start": 133,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 30,
                        "highlight_start": 26,
                        "text": "        Err(_) => return None,"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#serde@1.0.158",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde-1.0.158\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde-1.0.158\\build.rs",
                "edition": "2015",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "message": {
                "rendered": "error[E0531]: cannot find tuple struct or tuple variant `Ok` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde-1.0.158\\build.rs:137:9\n    |\n137 |         Ok(version) => version,\n    |         ^^ not found in this scope\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0531",
                  "explanation": "An unknown tuple struct/variant has been used.\n\nErroneous code example:\n\n```compile_fail,E0531\nlet Type(x) = Type(12); // error!\nmatch Bar(12) {\n    Bar(x) => {} // error!\n    _ => {}\n}\n```\n\nIn most cases, it's either a forgotten import or a typo. However, let's look at\nhow you can have such a type:\n\n```edition2018\nstruct Type(u32); // this is a tuple struct\n\nenum Foo {\n    Bar(u32), // this is a tuple variant\n}\n\nuse Foo::*; // To use Foo's variant directly, we need to import them in\n            // the scope.\n```\n\nEither way, it should work fine with our previous code:\n\n```edition2018\nstruct Type(u32);\n\nenum Foo {\n    Bar(u32),\n}\nuse Foo::*;\n\nlet Type(x) = Type(12); // ok!\nmatch Type(12) {\n    Type(x) => {} // ok!\n    _ => {}\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find tuple struct or tuple variant `Ok` in this scope",
                "spans": [
                  {
                    "byte_end": 5263,
                    "byte_start": 5261,
                    "column_end": 11,
                    "column_start": 9,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde-1.0.158\\build.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 137,
                    "line_start": 137,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 11,
                        "highlight_start": 9,
                        "text": "        Ok(version) => version,"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#serde@1.0.158",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde-1.0.158\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde-1.0.158\\build.rs",
                "edition": "2015",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "message": {
                "rendered": "error[E0531]: cannot find tuple struct or tuple variant `Err` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde-1.0.158\\build.rs:138:9\n    |\n138 |         Err(_) => return None,\n    |         ^^^ not found in this scope\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0531",
                  "explanation": "An unknown tuple struct/variant has been used.\n\nErroneous code example:\n\n```compile_fail,E0531\nlet Type(x) = Type(12); // error!\nmatch Bar(12) {\n    Bar(x) => {} // error!\n    _ => {}\n}\n```\n\nIn most cases, it's either a forgotten import or a typo. However, let's look at\nhow you can have such a type:\n\n```edition2018\nstruct Type(u32); // this is a tuple struct\n\nenum Foo {\n    Bar(u32), // this is a tuple variant\n}\n\nuse Foo::*; // To use Foo's variant directly, we need to import them in\n            // the scope.\n```\n\nEither way, it should work fine with our previous code:\n\n```edition2018\nstruct Type(u32);\n\nenum Foo {\n    Bar(u32),\n}\nuse Foo::*;\n\nlet Type(x) = Type(12); // ok!\nmatch Type(12) {\n    Type(x) => {} // ok!\n    _ => {}\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find tuple struct or tuple variant `Err` in this scope",
                "spans": [
                  {
                    "byte_end": 5296,
                    "byte_start": 5293,
                    "column_end": 12,
                    "column_start": 9,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde-1.0.158\\build.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 138,
                    "line_start": 138,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 12,
                        "highlight_start": 9,
                        "text": "        Err(_) => return None,"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#serde@1.0.158",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde-1.0.158\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde-1.0.158\\build.rs",
                "edition": "2015",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "message": {
                "rendered": "error[E0425]: cannot find value `None` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde-1.0.158\\build.rs:138:26\n    |\n138 |         Err(_) => return None,\n    |                          ^^^^ not found in this scope\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0425",
                  "explanation": "An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"
                },
                "level": "error",
                "message": "cannot find value `None` in this scope",
                "spans": [
                  {
                    "byte_end": 5314,
                    "byte_start": 5310,
                    "column_end": 30,
                    "column_start": 26,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde-1.0.158\\build.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 138,
                    "line_start": 138,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 30,
                        "highlight_start": 26,
                        "text": "        Err(_) => return None,"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#serde@1.0.158",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde-1.0.158\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde-1.0.158\\build.rs",
                "edition": "2015",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "message": {
                "rendered": "error[E0425]: cannot find value `None` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde-1.0.158\\build.rs:143:16\n    |\n143 |         return None;\n    |                ^^^^ not found in this scope\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0425",
                  "explanation": "An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"
                },
                "level": "error",
                "message": "cannot find value `None` in this scope",
                "spans": [
                  {
                    "byte_end": 5426,
                    "byte_start": 5422,
                    "column_end": 20,
                    "column_start": 16,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde-1.0.158\\build.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 143,
                    "line_start": 143,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 20,
                        "highlight_start": 16,
                        "text": "        return None;"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#serde@1.0.158",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde-1.0.158\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde-1.0.158\\build.rs",
                "edition": "2015",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "message": {
                "rendered": "error[E0531]: cannot find tuple struct or tuple variant `Some` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde-1.0.158\\build.rs:147:9\n    |\n147 |         Some(next) => next,\n    |         ^^^^ not found in this scope\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0531",
                  "explanation": "An unknown tuple struct/variant has been used.\n\nErroneous code example:\n\n```compile_fail,E0531\nlet Type(x) = Type(12); // error!\nmatch Bar(12) {\n    Bar(x) => {} // error!\n    _ => {}\n}\n```\n\nIn most cases, it's either a forgotten import or a typo. However, let's look at\nhow you can have such a type:\n\n```edition2018\nstruct Type(u32); // this is a tuple struct\n\nenum Foo {\n    Bar(u32), // this is a tuple variant\n}\n\nuse Foo::*; // To use Foo's variant directly, we need to import them in\n            // the scope.\n```\n\nEither way, it should work fine with our previous code:\n\n```edition2018\nstruct Type(u32);\n\nenum Foo {\n    Bar(u32),\n}\nuse Foo::*;\n\nlet Type(x) = Type(12); // ok!\nmatch Type(12) {\n    Type(x) => {} // ok!\n    _ => {}\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find tuple struct or tuple variant `Some` in this scope",
                "spans": [
                  {
                    "byte_end": 5484,
                    "byte_start": 5480,
                    "column_end": 13,
                    "column_start": 9,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde-1.0.158\\build.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 147,
                    "line_start": 147,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 13,
                        "highlight_start": 9,
                        "text": "        Some(next) => next,"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#serde@1.0.158",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde-1.0.158\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde-1.0.158\\build.rs",
                "edition": "2015",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "message": {
                "rendered": "error: `#[panic_handler]` function required, but not found\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": null,
                "level": "error",
                "message": "`#[panic_handler]` function required, but not found",
                "spans": []
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#serde@1.0.158",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde-1.0.158\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde-1.0.158\\build.rs",
                "edition": "2015",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "message": {
                "rendered": "error: unwinding panics are not supported without std\n  |\n  = help: using nightly cargo, use -Zbuild-std with panic=\"abort\" to avoid unwinding\n  = note: since the core library is usually precompiled with panic=\"unwind\", rebuilding your crate with panic=\"abort\" may not be enough to fix the problem\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "using nightly cargo, use -Zbuild-std with panic=\"abort\" to avoid unwinding",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "since the core library is usually precompiled with panic=\"unwind\", rebuilding your crate with panic=\"abort\" may not be enough to fix the problem",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": null,
                "level": "error",
                "message": "unwinding panics are not supported without std",
                "spans": []
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#serde@1.0.158",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde-1.0.158\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde-1.0.158\\build.rs",
                "edition": "2015",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "message": {
                "rendered": "error[E0425]: cannot find function, tuple struct or tuple variant `Some` in this scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde-1.0.158\\build.rs:142:25\n    |\n142 |     if pieces.next() != Some(\"rustc 1\") {\n    |                         ^^^^ not found in this scope\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0425",
                  "explanation": "An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"
                },
                "level": "error",
                "message": "cannot find function, tuple struct or tuple variant `Some` in this scope",
                "spans": [
                  {
                    "byte_end": 5393,
                    "byte_start": 5389,
                    "column_end": 29,
                    "column_start": 25,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde-1.0.158\\build.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 142,
                    "line_start": 142,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 29,
                        "highlight_start": 25,
                        "text": "    if pieces.next() != Some(\"rustc 1\") {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#serde@1.0.158",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde-1.0.158\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde-1.0.158\\build.rs",
                "edition": "2015",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "message": {
                "rendered": "error[E0599]: no function or associated item named `from_str` found for type `u32` in the current scope\n   --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde-1.0.158\\build.rs:151:10\n    |\n151 |     u32::from_str(next).ok()\n    |          ^^^^^^^^ function or associated item not found in `u32`\n    |\n    = help: items from traits can only be used if the trait is in scope\nhelp: you are looking for the module in `std`, not the primitive type\n    |\n151 |     std::u32::from_str(next).ok()\n    |     +++++\nhelp: trait `FromStr` which provides `from_str` is implemented but not in scope; perhaps you want to import it\n    |\n1   + use core::str::FromStr;\n    |\nhelp: there is an associated function `from` with a similar name\n    |\n151 -     u32::from_str(next).ok()\n151 +     u32::from(next).ok()\n    |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "items from traits can only be used if the trait is in scope",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "you are looking for the module in `std`, not the primitive type",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 5541,
                        "byte_start": 5541,
                        "column_end": 5,
                        "column_start": 5,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde-1.0.158\\build.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 151,
                        "line_start": 151,
                        "suggested_replacement": "std::",
                        "suggestion_applicability": "MachineApplicable",
                        "text": [
                          {
                            "highlight_end": 5,
                            "highlight_start": 5,
                            "text": "    u32::from_str(next).ok()"
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "trait `FromStr` which provides `from_str` is implemented but not in scope; perhaps you want to import it",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 0,
                        "byte_start": 0,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde-1.0.158\\build.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 1,
                        "line_start": 1,
                        "suggested_replacement": "use core::str::FromStr;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": []
                      }
                    ]
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "there is an associated function `from` with a similar name",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 5554,
                        "byte_start": 5546,
                        "column_end": 18,
                        "column_start": 10,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde-1.0.158\\build.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 151,
                        "line_start": 151,
                        "suggested_replacement": "from",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 18,
                            "highlight_start": 10,
                            "text": "    u32::from_str(next).ok()"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0599",
                  "explanation": "This error occurs when a method is used on a type which doesn't implement it:\n\nErroneous code example:\n\n```compile_fail,E0599\nstruct Mouth;\n\nlet x = Mouth;\nx.chocolate(); // error: no method named `chocolate` found for type `Mouth`\n               //        in the current scope\n```\n\nIn this case, you need to implement the `chocolate` method to fix the error:\n\n```\nstruct Mouth;\n\nimpl Mouth {\n    fn chocolate(&self) { // We implement the `chocolate` method here.\n        println!(\"Hmmm! I love chocolate!\");\n    }\n}\n\nlet x = Mouth;\nx.chocolate(); // ok!\n```\n"
                },
                "level": "error",
                "message": "no function or associated item named `from_str` found for type `u32` in the current scope",
                "spans": [
                  {
                    "byte_end": 5554,
                    "byte_start": 5546,
                    "column_end": 18,
                    "column_start": 10,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde-1.0.158\\build.rs",
                    "is_primary": true,
                    "label": "function or associated item not found in `u32`",
                    "line_end": 151,
                    "line_start": 151,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 18,
                        "highlight_start": 10,
                        "text": "    u32::from_str(next).ok()"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#futures-core@0.3.27",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\futures-core-0.3.27\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\futures-core-0.3.27\\build.rs",
                "edition": "2018",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "message": {
                "rendered": "error: cannot find macro `println` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\futures-core-0.3.27\\build.rs:40:5\n   |\n40 |     println!(\"cargo:rerun-if-changed=no_atomic_cas.rs\");\n   |     ^^^^^^^\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": null,
                "level": "error",
                "message": "cannot find macro `println` in this scope",
                "spans": [
                  {
                    "byte_end": 1356,
                    "byte_start": 1349,
                    "column_end": 12,
                    "column_start": 5,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\futures-core-0.3.27\\build.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 40,
                    "line_start": 40,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 12,
                        "highlight_start": 5,
                        "text": "    println!(\"cargo:rerun-if-changed=no_atomic_cas.rs\");"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#windows_x86_64_msvc@0.48.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\windows_x86_64_msvc-0.48.0\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\windows_x86_64_msvc-0.48.0\\build.rs",
                "edition": "2018",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "message": {
                "rendered": "error: cannot find macro `println` in this scope\n --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\windows_x86_64_msvc-0.48.0\\build.rs:9:5\n  |\n9 |     println!(\"cargo:rustc-link-search=native={}\", std::path::Path::new(&dir).join(\"lib\").display());\n  |     ^^^^^^^\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": null,
                "level": "error",
                "message": "cannot find macro `println` in this scope",
                "spans": [
                  {
                    "byte_end": 241,
                    "byte_start": 234,
                    "column_end": 12,
                    "column_start": 5,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\windows_x86_64_msvc-0.48.0\\build.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 9,
                    "line_start": 9,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 12,
                        "highlight_start": 5,
                        "text": "    println!(\"cargo:rustc-link-search=native={}\", std::path::Path::new(&dir).join(\"lib\").display());"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#windows_x86_64_msvc@0.48.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\windows_x86_64_msvc-0.48.0\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\windows_x86_64_msvc-0.48.0\\build.rs",
                "edition": "2018",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "message": {
                "rendered": "error[E0463]: can't find crate for `std`\n --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\windows_x86_64_msvc-0.48.0\\build.rs:2:18\n  |\n2 |     let target = std::env::var(\"TARGET\").unwrap();\n  |                  ^^^ can't find crate\n  |\n  = note: the `x86_64-pc-windows-msvc` target may not support the standard library\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "the `x86_64-pc-windows-msvc` target may not support the standard library",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "E0463",
                  "explanation": "A crate was declared but cannot be found.\n\nErroneous code example:\n\n```compile_fail,E0463\nextern crate foo; // error: can't find crate\n```\n\nYou need to link your code to the relevant crate in order to be able to use it\n(through Cargo or the `-L` option of rustc, for example).\n\n## Common causes\n\n- The crate is not present at all. If using Cargo, add it to `[dependencies]`\n  in Cargo.toml.\n- The crate is present, but under a different name. If using Cargo, look for\n  `package = ` under `[dependencies]` in Cargo.toml.\n\n## Common causes for missing `std` or `core`\n\n- You are cross-compiling for a target which doesn't have `std` prepackaged.\n  Consider one of the following:\n  + Adding a pre-compiled version of std with `rustup target add`\n  + Building std from source with `cargo build -Z build-std`\n  + Using `#![no_std]` at the crate root, so you won't need `std` in the first\n    place.\n- You are developing the compiler itself and haven't built libstd from source.\n  You can usually build it with `x.py build library/std`. More information\n  about x.py is available in the [rustc-dev-guide].\n\n[rustc-dev-guide]: https://rustc-dev-guide.rust-lang.org/building/how-to-build-and-run.html#building-the-compiler\n"
                },
                "level": "error",
                "message": "can't find crate for `std`",
                "spans": [
                  {
                    "byte_end": 32,
                    "byte_start": 29,
                    "column_end": 21,
                    "column_start": 18,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\windows_x86_64_msvc-0.48.0\\build.rs",
                    "is_primary": true,
                    "label": "can't find crate",
                    "line_end": 2,
                    "line_start": 2,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 21,
                        "highlight_start": 18,
                        "text": "    let target = std::env::var(\"TARGET\").unwrap();"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#futures-core@0.3.27",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\futures-core-0.3.27\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\futures-core-0.3.27\\build.rs",
                "edition": "2018",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "message": {
                "rendered": "error: cannot find macro `println` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\futures-core-0.3.27\\build.rs:37:9\n   |\n37 |         println!(\"cargo:rustc-cfg=futures_no_atomic_cas\");\n   |         ^^^^^^^\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": null,
                "level": "error",
                "message": "cannot find macro `println` in this scope",
                "spans": [
                  {
                    "byte_end": 1294,
                    "byte_start": 1287,
                    "column_end": 16,
                    "column_start": 9,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\futures-core-0.3.27\\build.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 37,
                    "line_start": 37,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 16,
                        "highlight_start": 9,
                        "text": "        println!(\"cargo:rustc-cfg=futures_no_atomic_cas\");"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#windows_x86_64_msvc@0.48.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\windows_x86_64_msvc-0.48.0\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\windows_x86_64_msvc-0.48.0\\build.rs",
                "edition": "2018",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "message": {
                "rendered": "error[E0463]: can't find crate for `std`\n --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\windows_x86_64_msvc-0.48.0\\build.rs:7:15\n  |\n7 |     let dir = std::env::var(\"CARGO_MANIFEST_DIR\").unwrap();\n  |               ^^^ can't find crate\n  |\n  = note: the `x86_64-pc-windows-msvc` target may not support the standard library\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "the `x86_64-pc-windows-msvc` target may not support the standard library",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": {
                  "code": "E0463",
                  "explanation": "A crate was declared but cannot be found.\n\nErroneous code example:\n\n```compile_fail,E0463\nextern crate foo; // error: can't find crate\n```\n\nYou need to link your code to the relevant crate in order to be able to use it\n(through Cargo or the `-L` option of rustc, for example).\n\n## Common causes\n\n- The crate is not present at all. If using Cargo, add it to `[dependencies]`\n  in Cargo.toml.\n- The crate is present, but under a different name. If using Cargo, look for\n  `package = ` under `[dependencies]` in Cargo.toml.\n\n## Common causes for missing `std` or `core`\n\n- You are cross-compiling for a target which doesn't have `std` prepackaged.\n  Consider one of the following:\n  + Adding a pre-compiled version of std with `rustup target add`\n  + Building std from source with `cargo build -Z build-std`\n  + Using `#![no_std]` at the crate root, so you won't need `std` in the first\n    place.\n- You are developing the compiler itself and haven't built libstd from source.\n  You can usually build it with `x.py build library/std`. More information\n  about x.py is available in the [rustc-dev-guide].\n\n[rustc-dev-guide]: https://rustc-dev-guide.rust-lang.org/building/how-to-build-and-run.html#building-the-compiler\n"
                },
                "level": "error",
                "message": "can't find crate for `std`",
                "spans": [
                  {
                    "byte_end": 186,
                    "byte_start": 183,
                    "column_end": 18,
                    "column_start": 15,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\windows_x86_64_msvc-0.48.0\\build.rs",
                    "is_primary": true,
                    "label": "can't find crate",
                    "line_end": 7,
                    "line_start": 7,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 18,
                        "highlight_start": 15,
                        "text": "    let dir = std::env::var(\"CARGO_MANIFEST_DIR\").unwrap();"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#futures-core@0.3.27",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\futures-core-0.3.27\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\futures-core-0.3.27\\build.rs",
                "edition": "2018",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "message": {
                "rendered": "error: cannot find macro `println` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\futures-core-0.3.27\\build.rs:23:13\n   |\n23 |             println!(\n   |             ^^^^^^^\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": null,
                "level": "error",
                "message": "cannot find macro `println` in this scope",
                "spans": [
                  {
                    "byte_end": 780,
                    "byte_start": 773,
                    "column_end": 20,
                    "column_start": 13,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\futures-core-0.3.27\\build.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 23,
                    "line_start": 23,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 20,
                        "highlight_start": 13,
                        "text": "            println!("
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#windows_x86_64_msvc@0.48.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\windows_x86_64_msvc-0.48.0\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\windows_x86_64_msvc-0.48.0\\build.rs",
                "edition": "2018",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "message": {
                "rendered": "error: `#[panic_handler]` function required, but not found\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": null,
                "level": "error",
                "message": "`#[panic_handler]` function required, but not found",
                "spans": []
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#windows_x86_64_msvc@0.48.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\windows_x86_64_msvc-0.48.0\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\windows_x86_64_msvc-0.48.0\\build.rs",
                "edition": "2018",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "message": {
                "rendered": "error: unwinding panics are not supported without std\n  |\n  = help: using nightly cargo, use -Zbuild-std with panic=\"abort\" to avoid unwinding\n  = note: since the core library is usually precompiled with panic=\"unwind\", rebuilding your crate with panic=\"abort\" may not be enough to fix the problem\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "using nightly cargo, use -Zbuild-std with panic=\"abort\" to avoid unwinding",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "since the core library is usually precompiled with panic=\"unwind\", rebuilding your crate with panic=\"abort\" may not be enough to fix the problem",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": null,
                "level": "error",
                "message": "unwinding panics are not supported without std",
                "spans": []
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#futures-core@0.3.27",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\futures-core-0.3.27\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\futures-core-0.3.27\\build.rs",
                "edition": "2018",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "message": {
                "rendered": "error: cannot find macro `include` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\futures-core-0.3.27\\build.rs:17:1\n   |\n17 | include!(\"no_atomic_cas.rs\");\n   | ^^^^^^^\n   |\nhelp: consider importing this macro\n   |\n15 + use core::include;\n   |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this macro",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 609,
                        "byte_start": 609,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\futures-core-0.3.27\\build.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 15,
                        "line_start": 15,
                        "suggested_replacement": "use core::include;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use std::env;"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": null,
                "level": "error",
                "message": "cannot find macro `include` in this scope",
                "spans": [
                  {
                    "byte_end": 631,
                    "byte_start": 624,
                    "column_end": 8,
                    "column_start": 1,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\futures-core-0.3.27\\build.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 17,
                    "line_start": 17,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 8,
                        "highlight_start": 1,
                        "text": "include!(\"no_atomic_cas.rs\");"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#serde@1.0.158",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde-1.0.158\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde-1.0.158\\build.rs",
                "edition": "2015",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "message": {
                "rendered": "Some errors have detailed explanations: E0412, E0425, E0531, E0599, E0786.\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": null,
                "level": "failure-note",
                "message": "Some errors have detailed explanations: E0412, E0425, E0531, E0599, E0786.",
                "spans": []
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#serde@1.0.158",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde-1.0.158\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde-1.0.158\\build.rs",
                "edition": "2015",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "message": {
                "rendered": "For more information about an error, try `rustc --explain E0412`.\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": null,
                "level": "failure-note",
                "message": "For more information about an error, try `rustc --explain E0412`.",
                "spans": []
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#windows_x86_64_msvc@0.48.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\windows_x86_64_msvc-0.48.0\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\windows_x86_64_msvc-0.48.0\\build.rs",
                "edition": "2018",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "message": {
                "rendered": "Some errors have detailed explanations: E0463, E0786.\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": null,
                "level": "failure-note",
                "message": "Some errors have detailed explanations: E0463, E0786.",
                "spans": []
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#windows_x86_64_msvc@0.48.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\windows_x86_64_msvc-0.48.0\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\windows_x86_64_msvc-0.48.0\\build.rs",
                "edition": "2018",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "message": {
                "rendered": "For more information about an error, try `rustc --explain E0463`.\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": null,
                "level": "failure-note",
                "message": "For more information about an error, try `rustc --explain E0463`.",
                "spans": []
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#memchr@2.5.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\memchr-2.5.0\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\memchr-2.5.0\\build.rs",
                "edition": "2018",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "message": {
                "rendered": "error: cannot find macro `format` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\memchr-2.5.0\\build.rs:77:17\n   |\n77 |     is_env_set(&format!(\"CARGO_FEATURE_{}\", name))\n   |                 ^^^^^^\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": null,
                "level": "error",
                "message": "cannot find macro `format` in this scope",
                "spans": [
                  {
                    "byte_end": 2458,
                    "byte_start": 2452,
                    "column_end": 23,
                    "column_start": 17,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\memchr-2.5.0\\build.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 77,
                    "line_start": 77,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 23,
                        "highlight_start": 17,
                        "text": "    is_env_set(&format!(\"CARGO_FEATURE_{}\", name))"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#memchr@2.5.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\memchr-2.5.0\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\memchr-2.5.0\\build.rs",
                "edition": "2018",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "message": {
                "rendered": "error: cannot find macro `println` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\memchr-2.5.0\\build.rs:27:13\n   |\n27 |             println!(\"cargo:rustc-cfg=memchr_runtime_simd\");\n   |             ^^^^^^^\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": null,
                "level": "error",
                "message": "cannot find macro `println` in this scope",
                "spans": [
                  {
                    "byte_end": 845,
                    "byte_start": 838,
                    "column_end": 20,
                    "column_start": 13,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\memchr-2.5.0\\build.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 27,
                    "line_start": 27,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 20,
                        "highlight_start": 13,
                        "text": "            println!(\"cargo:rustc-cfg=memchr_runtime_simd\");"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#memchr@2.5.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\memchr-2.5.0\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\memchr-2.5.0\\build.rs",
                "edition": "2018",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "message": {
                "rendered": "error: cannot find macro `println` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\memchr-2.5.0\\build.rs:28:13\n   |\n28 |             println!(\"cargo:rustc-cfg=memchr_runtime_sse2\");\n   |             ^^^^^^^\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": null,
                "level": "error",
                "message": "cannot find macro `println` in this scope",
                "spans": [
                  {
                    "byte_end": 906,
                    "byte_start": 899,
                    "column_end": 20,
                    "column_start": 13,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\memchr-2.5.0\\build.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 28,
                    "line_start": 28,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 20,
                        "highlight_start": 13,
                        "text": "            println!(\"cargo:rustc-cfg=memchr_runtime_sse2\");"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#memchr@2.5.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\memchr-2.5.0\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\memchr-2.5.0\\build.rs",
                "edition": "2018",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "message": {
                "rendered": "error: cannot find macro `println` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\memchr-2.5.0\\build.rs:29:13\n   |\n29 |             println!(\"cargo:rustc-cfg=memchr_runtime_sse42\");\n   |             ^^^^^^^\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": null,
                "level": "error",
                "message": "cannot find macro `println` in this scope",
                "spans": [
                  {
                    "byte_end": 967,
                    "byte_start": 960,
                    "column_end": 20,
                    "column_start": 13,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\memchr-2.5.0\\build.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 29,
                    "line_start": 29,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 20,
                        "highlight_start": 13,
                        "text": "            println!(\"cargo:rustc-cfg=memchr_runtime_sse42\");"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#memchr@2.5.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\memchr-2.5.0\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\memchr-2.5.0\\build.rs",
                "edition": "2018",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "message": {
                "rendered": "error: cannot find macro `println` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\memchr-2.5.0\\build.rs:30:13\n   |\n30 |             println!(\"cargo:rustc-cfg=memchr_runtime_avx\");\n   |             ^^^^^^^\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": null,
                "level": "error",
                "message": "cannot find macro `println` in this scope",
                "spans": [
                  {
                    "byte_end": 1029,
                    "byte_start": 1022,
                    "column_end": 20,
                    "column_start": 13,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\memchr-2.5.0\\build.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 30,
                    "line_start": 30,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 20,
                        "highlight_start": 13,
                        "text": "            println!(\"cargo:rustc-cfg=memchr_runtime_avx\");"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#memchr@2.5.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\memchr-2.5.0\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\memchr-2.5.0\\build.rs",
                "edition": "2018",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "message": {
                "rendered": "error: cannot find macro `println` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\memchr-2.5.0\\build.rs:36:13\n   |\n36 |             println!(\"cargo:rustc-cfg=memchr_runtime_simd\");\n   |             ^^^^^^^\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": null,
                "level": "error",
                "message": "cannot find macro `println` in this scope",
                "spans": [
                  {
                    "byte_end": 1218,
                    "byte_start": 1211,
                    "column_end": 20,
                    "column_start": 13,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\memchr-2.5.0\\build.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 36,
                    "line_start": 36,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 20,
                        "highlight_start": 13,
                        "text": "            println!(\"cargo:rustc-cfg=memchr_runtime_simd\");"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#memchr@2.5.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\memchr-2.5.0\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\memchr-2.5.0\\build.rs",
                "edition": "2018",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "message": {
                "rendered": "error: cannot find macro `println` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\memchr-2.5.0\\build.rs:37:13\n   |\n37 |             println!(\"cargo:rustc-cfg=memchr_runtime_wasm128\");\n   |             ^^^^^^^\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": null,
                "level": "error",
                "message": "cannot find macro `println` in this scope",
                "spans": [
                  {
                    "byte_end": 1279,
                    "byte_start": 1272,
                    "column_end": 20,
                    "column_start": 13,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\memchr-2.5.0\\build.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 37,
                    "line_start": 37,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 20,
                        "highlight_start": 13,
                        "text": "            println!(\"cargo:rustc-cfg=memchr_runtime_wasm128\");"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#futures-core@0.3.27",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\futures-core-0.3.27\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\futures-core-0.3.27\\build.rs",
                "edition": "2018",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "message": {
                "rendered": "error[E0531]: cannot find tuple struct or tuple variant `Ok` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\futures-core-0.3.27\\build.rs:21:9\n   |\n21 |         Ok(target) => target,\n   |         ^^ not found in this scope\n   |\nhelp: consider importing this tuple variant\n   |\n15 + use core::result::Result::Ok;\n   |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this tuple variant",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 609,
                        "byte_start": 609,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\futures-core-0.3.27\\build.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 15,
                        "line_start": 15,
                        "suggested_replacement": "use core::result::Result::Ok;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use std::env;"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0531",
                  "explanation": "An unknown tuple struct/variant has been used.\n\nErroneous code example:\n\n```compile_fail,E0531\nlet Type(x) = Type(12); // error!\nmatch Bar(12) {\n    Bar(x) => {} // error!\n    _ => {}\n}\n```\n\nIn most cases, it's either a forgotten import or a typo. However, let's look at\nhow you can have such a type:\n\n```edition2018\nstruct Type(u32); // this is a tuple struct\n\nenum Foo {\n    Bar(u32), // this is a tuple variant\n}\n\nuse Foo::*; // To use Foo's variant directly, we need to import them in\n            // the scope.\n```\n\nEither way, it should work fine with our previous code:\n\n```edition2018\nstruct Type(u32);\n\nenum Foo {\n    Bar(u32),\n}\nuse Foo::*;\n\nlet Type(x) = Type(12); // ok!\nmatch Type(12) {\n    Type(x) => {} // ok!\n    _ => {}\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find tuple struct or tuple variant `Ok` in this scope",
                "spans": [
                  {
                    "byte_end": 721,
                    "byte_start": 719,
                    "column_end": 11,
                    "column_start": 9,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\futures-core-0.3.27\\build.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 21,
                    "line_start": 21,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 11,
                        "highlight_start": 9,
                        "text": "        Ok(target) => target,"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#futures-core@0.3.27",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\futures-core-0.3.27\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\futures-core-0.3.27\\build.rs",
                "edition": "2018",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "message": {
                "rendered": "error[E0531]: cannot find tuple struct or tuple variant `Err` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\futures-core-0.3.27\\build.rs:22:9\n   |\n22 |         Err(e) => {\n   |         ^^^ not found in this scope\n   |\nhelp: consider importing this tuple variant\n   |\n15 + use core::result::Result::Err;\n   |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this tuple variant",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 609,
                        "byte_start": 609,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\futures-core-0.3.27\\build.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 15,
                        "line_start": 15,
                        "suggested_replacement": "use core::result::Result::Err;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 1,
                            "highlight_start": 1,
                            "text": "use std::env;"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0531",
                  "explanation": "An unknown tuple struct/variant has been used.\n\nErroneous code example:\n\n```compile_fail,E0531\nlet Type(x) = Type(12); // error!\nmatch Bar(12) {\n    Bar(x) => {} // error!\n    _ => {}\n}\n```\n\nIn most cases, it's either a forgotten import or a typo. However, let's look at\nhow you can have such a type:\n\n```edition2018\nstruct Type(u32); // this is a tuple struct\n\nenum Foo {\n    Bar(u32), // this is a tuple variant\n}\n\nuse Foo::*; // To use Foo's variant directly, we need to import them in\n            // the scope.\n```\n\nEither way, it should work fine with our previous code:\n\n```edition2018\nstruct Type(u32);\n\nenum Foo {\n    Bar(u32),\n}\nuse Foo::*;\n\nlet Type(x) = Type(12); // ok!\nmatch Type(12) {\n    Type(x) => {} // ok!\n    _ => {}\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find tuple struct or tuple variant `Err` in this scope",
                "spans": [
                  {
                    "byte_end": 752,
                    "byte_start": 749,
                    "column_end": 12,
                    "column_start": 9,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\futures-core-0.3.27\\build.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 22,
                    "line_start": 22,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 12,
                        "highlight_start": 9,
                        "text": "        Err(e) => {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#futures-core@0.3.27",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\futures-core-0.3.27\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\futures-core-0.3.27\\build.rs",
                "edition": "2018",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "message": {
                "rendered": "error[E0425]: cannot find value `NO_ATOMIC_CAS` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\futures-core-0.3.27\\build.rs:36:8\n   |\n36 |     if NO_ATOMIC_CAS.contains(&&*target) {\n   |        ^^^^^^^^^^^^^ not found in this scope\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": {
                  "code": "E0425",
                  "explanation": "An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"
                },
                "level": "error",
                "message": "cannot find value `NO_ATOMIC_CAS` in this scope",
                "spans": [
                  {
                    "byte_end": 1256,
                    "byte_start": 1243,
                    "column_end": 21,
                    "column_start": 8,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\futures-core-0.3.27\\build.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 36,
                    "line_start": 36,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 21,
                        "highlight_start": 8,
                        "text": "    if NO_ATOMIC_CAS.contains(&&*target) {"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#memchr@2.5.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\memchr-2.5.0\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\memchr-2.5.0\\build.rs",
                "edition": "2018",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "message": {
                "rendered": "error: cannot find macro `println` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\memchr-2.5.0\\build.rs:73:5\n   |\n73 |     println!(\"cargo:rustc-cfg=memchr_libc\");\n   |     ^^^^^^^\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": null,
                "level": "error",
                "message": "cannot find macro `println` in this scope",
                "spans": [
                  {
                    "byte_end": 2359,
                    "byte_start": 2352,
                    "column_end": 12,
                    "column_start": 5,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\memchr-2.5.0\\build.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 73,
                    "line_start": 73,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 12,
                        "highlight_start": 5,
                        "text": "    println!(\"cargo:rustc-cfg=memchr_libc\");"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#futures-core@0.3.27",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\futures-core-0.3.27\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\futures-core-0.3.27\\build.rs",
                "edition": "2018",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "message": {
                "rendered": "error: `#[panic_handler]` function required, but not found\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": null,
                "level": "error",
                "message": "`#[panic_handler]` function required, but not found",
                "spans": []
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#futures-core@0.3.27",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\futures-core-0.3.27\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\futures-core-0.3.27\\build.rs",
                "edition": "2018",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "message": {
                "rendered": "error: unwinding panics are not supported without std\n  |\n  = help: using nightly cargo, use -Zbuild-std with panic=\"abort\" to avoid unwinding\n  = note: since the core library is usually precompiled with panic=\"unwind\", rebuilding your crate with panic=\"abort\" may not be enough to fix the problem\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "using nightly cargo, use -Zbuild-std with panic=\"abort\" to avoid unwinding",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "since the core library is usually precompiled with panic=\"unwind\", rebuilding your crate with panic=\"abort\" may not be enough to fix the problem",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": null,
                "level": "error",
                "message": "unwinding panics are not supported without std",
                "spans": []
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#futures-core@0.3.27",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\futures-core-0.3.27\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\futures-core-0.3.27\\build.rs",
                "edition": "2018",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "message": {
                "rendered": "Some errors have detailed explanations: E0425, E0463, E0531, E0786.\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": null,
                "level": "failure-note",
                "message": "Some errors have detailed explanations: E0425, E0463, E0531, E0786.",
                "spans": []
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#futures-core@0.3.27",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\futures-core-0.3.27\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\futures-core-0.3.27\\build.rs",
                "edition": "2018",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "message": {
                "rendered": "For more information about an error, try `rustc --explain E0425`.\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": null,
                "level": "failure-note",
                "message": "For more information about an error, try `rustc --explain E0425`.",
                "spans": []
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#memchr@2.5.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\memchr-2.5.0\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\memchr-2.5.0\\build.rs",
                "edition": "2018",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "message": {
                "rendered": "error[E0531]: cannot find tuple struct or tuple variant `Err` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\memchr-2.5.0\\build.rs:62:9\n   |\n62 |         Err(_) => return,\n   |         ^^^ not found in this scope\n   |\nhelp: consider importing this tuple variant\n   |\n1  + use core::result::Result::Err;\n   |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this tuple variant",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 0,
                        "byte_start": 0,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\memchr-2.5.0\\build.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 1,
                        "line_start": 1,
                        "suggested_replacement": "use core::result::Result::Err;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": []
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0531",
                  "explanation": "An unknown tuple struct/variant has been used.\n\nErroneous code example:\n\n```compile_fail,E0531\nlet Type(x) = Type(12); // error!\nmatch Bar(12) {\n    Bar(x) => {} // error!\n    _ => {}\n}\n```\n\nIn most cases, it's either a forgotten import or a typo. However, let's look at\nhow you can have such a type:\n\n```edition2018\nstruct Type(u32); // this is a tuple struct\n\nenum Foo {\n    Bar(u32), // this is a tuple variant\n}\n\nuse Foo::*; // To use Foo's variant directly, we need to import them in\n            // the scope.\n```\n\nEither way, it should work fine with our previous code:\n\n```edition2018\nstruct Type(u32);\n\nenum Foo {\n    Bar(u32),\n}\nuse Foo::*;\n\nlet Type(x) = Type(12); // ok!\nmatch Type(12) {\n    Type(x) => {} // ok!\n    _ => {}\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find tuple struct or tuple variant `Err` in this scope",
                "spans": [
                  {
                    "byte_end": 2103,
                    "byte_start": 2100,
                    "column_end": 12,
                    "column_start": 9,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\memchr-2.5.0\\build.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 62,
                    "line_start": 62,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 12,
                        "highlight_start": 9,
                        "text": "        Err(_) => return,"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#memchr@2.5.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\memchr-2.5.0\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\memchr-2.5.0\\build.rs",
                "edition": "2018",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "message": {
                "rendered": "error[E0531]: cannot find tuple struct or tuple variant `Ok` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\memchr-2.5.0\\build.rs:63:9\n   |\n63 |         Ok(arch) => arch,\n   |         ^^ not found in this scope\n   |\nhelp: consider importing this tuple variant\n   |\n1  + use core::result::Result::Ok;\n   |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this tuple variant",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 0,
                        "byte_start": 0,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\memchr-2.5.0\\build.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 1,
                        "line_start": 1,
                        "suggested_replacement": "use core::result::Result::Ok;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": []
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0531",
                  "explanation": "An unknown tuple struct/variant has been used.\n\nErroneous code example:\n\n```compile_fail,E0531\nlet Type(x) = Type(12); // error!\nmatch Bar(12) {\n    Bar(x) => {} // error!\n    _ => {}\n}\n```\n\nIn most cases, it's either a forgotten import or a typo. However, let's look at\nhow you can have such a type:\n\n```edition2018\nstruct Type(u32); // this is a tuple struct\n\nenum Foo {\n    Bar(u32), // this is a tuple variant\n}\n\nuse Foo::*; // To use Foo's variant directly, we need to import them in\n            // the scope.\n```\n\nEither way, it should work fine with our previous code:\n\n```edition2018\nstruct Type(u32);\n\nenum Foo {\n    Bar(u32),\n}\nuse Foo::*;\n\nlet Type(x) = Type(12); // ok!\nmatch Type(12) {\n    Type(x) => {} // ok!\n    _ => {}\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find tuple struct or tuple variant `Ok` in this scope",
                "spans": [
                  {
                    "byte_end": 2128,
                    "byte_start": 2126,
                    "column_end": 11,
                    "column_start": 9,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\memchr-2.5.0\\build.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 63,
                    "line_start": 63,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 11,
                        "highlight_start": 9,
                        "text": "        Ok(arch) => arch,"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#memchr@2.5.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\memchr-2.5.0\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\memchr-2.5.0\\build.rs",
                "edition": "2018",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "message": {
                "rendered": "error[E0531]: cannot find tuple struct or tuple variant `Err` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\memchr-2.5.0\\build.rs:66:9\n   |\n66 |         Err(_) => return,\n   |         ^^^ not found in this scope\n   |\nhelp: consider importing this tuple variant\n   |\n1  + use core::result::Result::Err;\n   |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this tuple variant",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 0,
                        "byte_start": 0,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\memchr-2.5.0\\build.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 1,
                        "line_start": 1,
                        "suggested_replacement": "use core::result::Result::Err;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": []
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0531",
                  "explanation": "An unknown tuple struct/variant has been used.\n\nErroneous code example:\n\n```compile_fail,E0531\nlet Type(x) = Type(12); // error!\nmatch Bar(12) {\n    Bar(x) => {} // error!\n    _ => {}\n}\n```\n\nIn most cases, it's either a forgotten import or a typo. However, let's look at\nhow you can have such a type:\n\n```edition2018\nstruct Type(u32); // this is a tuple struct\n\nenum Foo {\n    Bar(u32), // this is a tuple variant\n}\n\nuse Foo::*; // To use Foo's variant directly, we need to import them in\n            // the scope.\n```\n\nEither way, it should work fine with our previous code:\n\n```edition2018\nstruct Type(u32);\n\nenum Foo {\n    Bar(u32),\n}\nuse Foo::*;\n\nlet Type(x) = Type(12); // ok!\nmatch Type(12) {\n    Type(x) => {} // ok!\n    _ => {}\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find tuple struct or tuple variant `Err` in this scope",
                "spans": [
                  {
                    "byte_end": 2217,
                    "byte_start": 2214,
                    "column_end": 12,
                    "column_start": 9,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\memchr-2.5.0\\build.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 66,
                    "line_start": 66,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 12,
                        "highlight_start": 9,
                        "text": "        Err(_) => return,"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#memchr@2.5.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\memchr-2.5.0\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\memchr-2.5.0\\build.rs",
                "edition": "2018",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "message": {
                "rendered": "error[E0531]: cannot find tuple struct or tuple variant `Ok` in this scope\n  --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\memchr-2.5.0\\build.rs:67:9\n   |\n67 |         Ok(env) => env,\n   |         ^^ not found in this scope\n   |\nhelp: consider importing this tuple variant\n   |\n1  + use core::result::Result::Ok;\n   |\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "consider importing this tuple variant",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 0,
                        "byte_start": 0,
                        "column_end": 1,
                        "column_start": 1,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\memchr-2.5.0\\build.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 1,
                        "line_start": 1,
                        "suggested_replacement": "use core::result::Result::Ok;\n",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": []
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0531",
                  "explanation": "An unknown tuple struct/variant has been used.\n\nErroneous code example:\n\n```compile_fail,E0531\nlet Type(x) = Type(12); // error!\nmatch Bar(12) {\n    Bar(x) => {} // error!\n    _ => {}\n}\n```\n\nIn most cases, it's either a forgotten import or a typo. However, let's look at\nhow you can have such a type:\n\n```edition2018\nstruct Type(u32); // this is a tuple struct\n\nenum Foo {\n    Bar(u32), // this is a tuple variant\n}\n\nuse Foo::*; // To use Foo's variant directly, we need to import them in\n            // the scope.\n```\n\nEither way, it should work fine with our previous code:\n\n```edition2018\nstruct Type(u32);\n\nenum Foo {\n    Bar(u32),\n}\nuse Foo::*;\n\nlet Type(x) = Type(12); // ok!\nmatch Type(12) {\n    Type(x) => {} // ok!\n    _ => {}\n}\n```\n"
                },
                "level": "error",
                "message": "cannot find tuple struct or tuple variant `Ok` in this scope",
                "spans": [
                  {
                    "byte_end": 2242,
                    "byte_start": 2240,
                    "column_end": 11,
                    "column_start": 9,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\memchr-2.5.0\\build.rs",
                    "is_primary": true,
                    "label": "not found in this scope",
                    "line_end": 67,
                    "line_start": 67,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 11,
                        "highlight_start": 9,
                        "text": "        Ok(env) => env,"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#memchr@2.5.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\memchr-2.5.0\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\memchr-2.5.0\\build.rs",
                "edition": "2018",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "message": {
                "rendered": "error: `#[panic_handler]` function required, but not found\n\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": null,
                "level": "error",
                "message": "`#[panic_handler]` function required, but not found",
                "spans": []
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#memchr@2.5.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\memchr-2.5.0\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\memchr-2.5.0\\build.rs",
                "edition": "2018",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "message": {
                "rendered": "error: unwinding panics are not supported without std\n  |\n  = help: using nightly cargo, use -Zbuild-std with panic=\"abort\" to avoid unwinding\n  = note: since the core library is usually precompiled with panic=\"unwind\", rebuilding your crate with panic=\"abort\" may not be enough to fix the problem\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "using nightly cargo, use -Zbuild-std with panic=\"abort\" to avoid unwinding",
                    "rendered": null,
                    "spans": []
                  },
                  {
                    "children": [],
                    "code": null,
                    "level": "note",
                    "message": "since the core library is usually precompiled with panic=\"unwind\", rebuilding your crate with panic=\"abort\" may not be enough to fix the problem",
                    "rendered": null,
                    "spans": []
                  }
                ],
                "code": null,
                "level": "error",
                "message": "unwinding panics are not supported without std",
                "spans": []
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#memchr@2.5.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\memchr-2.5.0\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\memchr-2.5.0\\build.rs",
                "edition": "2018",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "message": {
                "rendered": "Some errors have detailed explanations: E0463, E0531, E0786.\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": null,
                "level": "failure-note",
                "message": "Some errors have detailed explanations: E0463, E0531, E0786.",
                "spans": []
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#memchr@2.5.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\memchr-2.5.0\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\memchr-2.5.0\\build.rs",
                "edition": "2018",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "message": {
                "rendered": "For more information about an error, try `rustc --explain E0463`.\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": null,
                "level": "failure-note",
                "message": "For more information about an error, try `rustc --explain E0463`.",
                "spans": []
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#smallvec@1.10.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.10.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "smallvec",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.10.0\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "error[E0599]: no method named `to_vec` found for reference `&[<A as Array>::Item]` in the current scope\n    --> C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.10.0\\src\\lib.rs:1457:31\n     |\n1457 |             let mut b = slice.to_vec();\n     |                               ^^^^^^\n     |\nhelp: there is a method `to_smallvec` with a similar name\n     |\n1457 |             let mut b = slice.to_smallvec();\n     |                                  +++++\n\n",
                "$message_type": "diagnostic",
                "children": [
                  {
                    "children": [],
                    "code": null,
                    "level": "help",
                    "message": "there is a method `to_smallvec` with a similar name",
                    "rendered": null,
                    "spans": [
                      {
                        "byte_end": 49001,
                        "byte_start": 48995,
                        "column_end": 37,
                        "column_start": 31,
                        "expansion": null,
                        "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.10.0\\src\\lib.rs",
                        "is_primary": true,
                        "label": null,
                        "line_end": 1457,
                        "line_start": 1457,
                        "suggested_replacement": "to_smallvec",
                        "suggestion_applicability": "MaybeIncorrect",
                        "text": [
                          {
                            "highlight_end": 37,
                            "highlight_start": 31,
                            "text": "            let mut b = slice.to_vec();"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "code": {
                  "code": "E0599",
                  "explanation": "This error occurs when a method is used on a type which doesn't implement it:\n\nErroneous code example:\n\n```compile_fail,E0599\nstruct Mouth;\n\nlet x = Mouth;\nx.chocolate(); // error: no method named `chocolate` found for type `Mouth`\n               //        in the current scope\n```\n\nIn this case, you need to implement the `chocolate` method to fix the error:\n\n```\nstruct Mouth;\n\nimpl Mouth {\n    fn chocolate(&self) { // We implement the `chocolate` method here.\n        println!(\"Hmmm! I love chocolate!\");\n    }\n}\n\nlet x = Mouth;\nx.chocolate(); // ok!\n```\n"
                },
                "level": "error",
                "message": "no method named `to_vec` found for reference `&[<A as Array>::Item]` in the current scope",
                "spans": [
                  {
                    "byte_end": 49001,
                    "byte_start": 48995,
                    "column_end": 37,
                    "column_start": 31,
                    "expansion": null,
                    "file_name": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.10.0\\src\\lib.rs",
                    "is_primary": true,
                    "label": null,
                    "line_end": 1457,
                    "line_start": 1457,
                    "suggested_replacement": null,
                    "suggestion_applicability": null,
                    "text": [
                      {
                        "highlight_end": 37,
                        "highlight_start": 31,
                        "text": "            let mut b = slice.to_vec();"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#getrandom@0.2.8",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\getrandom-0.2.8\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "getrandom",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\getrandom-0.2.8\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 2,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpkh7hmy5y\\trust-dns-0.23.2\\target\\debug\\deps\\libgetrandom-1e7d2fedd670c2be.rmeta"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#log@0.4.18",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\log-0.4.18\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\log-0.4.18\\build.rs",
                "edition": "2015",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "std"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpkh7hmy5y\\trust-dns-0.23.2\\target\\debug\\build\\log-43b5c30a18e6b93c\\build-script-build.exe",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpkh7hmy5y\\trust-dns-0.23.2\\target\\debug\\build\\log-43b5c30a18e6b93c\\build_script_build.pdb"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#windows_x86_64_msvc@0.42.2",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\windows_x86_64_msvc-0.42.2\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\windows_x86_64_msvc-0.42.2\\build.rs",
                "edition": "2018",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpkh7hmy5y\\trust-dns-0.23.2\\target\\debug\\build\\windows_x86_64_msvc-851aba7a8c00e0c4\\build-script-build.exe",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpkh7hmy5y\\trust-dns-0.23.2\\target\\debug\\build\\windows_x86_64_msvc-851aba7a8c00e0c4\\build_script_build.pdb"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#smallvec@1.10.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.10.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "smallvec",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.10.0\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "Some errors have detailed explanations: E0599, E0786.\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": null,
                "level": "failure-note",
                "message": "Some errors have detailed explanations: E0599, E0786.",
                "spans": []
              }
            },
            {
              "reason": "compiler-message",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#smallvec@1.10.0",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.10.0\\Cargo.toml",
              "target": {
                "kind": [
                  "lib"
                ],
                "crate_types": [
                  "lib"
                ],
                "name": "smallvec",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\smallvec-1.10.0\\src\\lib.rs",
                "edition": "2018",
                "doc": true,
                "doctest": true,
                "test": true
              },
              "message": {
                "rendered": "For more information about an error, try `rustc --explain E0599`.\n",
                "$message_type": "diagnostic",
                "children": [],
                "code": null,
                "level": "failure-note",
                "message": "For more information about an error, try `rustc --explain E0599`.",
                "spans": []
              }
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#serde_derive@1.0.158",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde_derive-1.0.158\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\serde_derive-1.0.158\\build.rs",
                "edition": "2015",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpkh7hmy5y\\trust-dns-0.23.2\\target\\debug\\build\\serde_derive-57beb69f8755d2e6\\build-script-build.exe",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpkh7hmy5y\\trust-dns-0.23.2\\target\\debug\\build\\serde_derive-57beb69f8755d2e6\\build_script_build.pdb"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "compiler-artifact",
              "package_id": "registry+https://github.com/rust-lang/crates.io-index#quote@1.0.26",
              "manifest_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\quote-1.0.26\\Cargo.toml",
              "target": {
                "kind": [
                  "custom-build"
                ],
                "crate_types": [
                  "bin"
                ],
                "name": "build-script-build",
                "src_path": "C:\\Users\\davet\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\quote-1.0.26\\build.rs",
                "edition": "2018",
                "doc": false,
                "doctest": false,
                "test": false
              },
              "profile": {
                "opt_level": "0",
                "debuginfo": 0,
                "debug_assertions": true,
                "overflow_checks": true,
                "test": false
              },
              "features": [
                "default",
                "proc-macro"
              ],
              "filenames": [
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpkh7hmy5y\\trust-dns-0.23.2\\target\\debug\\build\\quote-bece8388381a7782\\build-script-build.exe",
                "C:\\Users\\davet\\AppData\\Local\\Temp\\tmpkh7hmy5y\\trust-dns-0.23.2\\target\\debug\\build\\quote-bece8388381a7782\\build_script_build.pdb"
              ],
              "executable": null,
              "fresh": false
            },
            {
              "reason": "build-finished",
              "success": false
            }
          ],
          "audit": {
            "database": {
              "advisory-count": 787,
              "last-commit": "7573f55ba337263f61167dbb0ea926cdc7c8eb5d",
              "last-updated": "2025-06-17T11:04:25+02:00"
            },
            "lockfile": {
              "dependency-count": 194
            },
            "settings": {
              "target_arch": [],
              "target_os": [],
              "severity": null,
              "ignore": [],
              "informational_warnings": [
                "unmaintained",
                "unsound",
                "notice"
              ]
            },
            "vulnerabilities": {
              "found": true,
              "count": 10,
              "list": [
                {
                  "advisory": {
                    "id": "RUSTSEC-2024-0003",
                    "package": "h2",
                    "title": "Resource exhaustion vulnerability in h2 may lead to Denial of Service (DoS)",
                    "description": "An attacker with an HTTP/2 connection to an affected endpoint can send a steady stream of invalid frames to force the\ngeneration of reset frames on the victim endpoint.\nBy closing their recv window, the attacker could then force these resets to be queued in an unbounded fashion,\nresulting in Out Of Memory (OOM) and high CPU usage.\n\nThis fix is corrected in [hyperium/h2#737](https://github.com/hyperium/h2/pull/737), which limits the total number of\ninternal error resets emitted by default before the connection is closed.",
                    "date": "2024-01-17",
                    "aliases": [
                      "GHSA-8r5v-vm4m-4g25"
                    ],
                    "related": [
                      "CVE-2019-9514"
                    ],
                    "collection": "crates",
                    "categories": [
                      "denial-of-service"
                    ],
                    "keywords": [
                      "http",
                      "http2",
                      "h2"
                    ],
                    "cvss": null,
                    "informational": null,
                    "references": [
                      "https://github.com/Netflix/security-bulletins/blob/master/advisories/third-party/2019-002.md"
                    ],
                    "source": null,
                    "url": null,
                    "withdrawn": null,
                    "license": "CC0-1.0"
                  },
                  "versions": {
                    "patched": [
                      "^0.3.24",
                      ">=0.4.2"
                    ],
                    "unaffected": []
                  },
                  "affected": null,
                  "package": {
                    "name": "h2",
                    "version": "0.3.18",
                    "source": "registry+https://github.com/rust-lang/crates.io-index",
                    "checksum": "17f8a914c2987b688368b5138aa05321db91f4090cf26118185672ad588bce21",
                    "dependencies": [
                      {
                        "name": "bytes",
                        "version": "1.4.0",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "fnv",
                        "version": "1.0.7",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "futures-core",
                        "version": "0.3.27",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "futures-sink",
                        "version": "0.3.27",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "futures-util",
                        "version": "0.3.27",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "http",
                        "version": "0.2.9",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "indexmap",
                        "version": "1.9.3",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "slab",
                        "version": "0.4.8",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "tokio",
                        "version": "1.28.1",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "tokio-util",
                        "version": "0.7.7",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "tracing",
                        "version": "0.1.37",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      }
                    ],
                    "replace": null
                  }
                },
                {
                  "advisory": {
                    "id": "RUSTSEC-2024-0332",
                    "package": "h2",
                    "title": "Degradation of service in h2 servers with CONTINUATION Flood",
                    "description": "An attacker can send a flood of CONTINUATION frames, causing `h2` to process them indefinitely.\nThis results in an increase in CPU usage.\n\nTokio task budget helps prevent this from a complete denial-of-service, as the server can still\nrespond to legitimate requests, albeit with increased latency.\n\nMore details at \"https://seanmonstar.com/blog/hyper-http2-continuation-flood/.\n\nPatches available for 0.4.x and 0.3.x versions.",
                    "date": "2024-04-03",
                    "aliases": [
                      "GHSA-q6cp-qfwq-4gcv"
                    ],
                    "related": [],
                    "collection": "crates",
                    "categories": [
                      "denial-of-service"
                    ],
                    "keywords": [
                      "http",
                      "http2",
                      "h2"
                    ],
                    "cvss": null,
                    "informational": null,
                    "references": [
                      "https://seanmonstar.com/blog/hyper-http2-continuation-flood/"
                    ],
                    "source": null,
                    "url": null,
                    "withdrawn": null,
                    "license": "CC0-1.0"
                  },
                  "versions": {
                    "patched": [
                      "^0.3.26",
                      ">=0.4.4"
                    ],
                    "unaffected": []
                  },
                  "affected": null,
                  "package": {
                    "name": "h2",
                    "version": "0.3.18",
                    "source": "registry+https://github.com/rust-lang/crates.io-index",
                    "checksum": "17f8a914c2987b688368b5138aa05321db91f4090cf26118185672ad588bce21",
                    "dependencies": [
                      {
                        "name": "bytes",
                        "version": "1.4.0",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "fnv",
                        "version": "1.0.7",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "futures-core",
                        "version": "0.3.27",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "futures-sink",
                        "version": "0.3.27",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "futures-util",
                        "version": "0.3.27",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "http",
                        "version": "0.2.9",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "indexmap",
                        "version": "1.9.3",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "slab",
                        "version": "0.4.8",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "tokio",
                        "version": "1.28.1",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "tokio-util",
                        "version": "0.7.7",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "tracing",
                        "version": "0.1.37",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      }
                    ],
                    "replace": null
                  }
                },
                {
                  "advisory": {
                    "id": "RUSTSEC-2024-0421",
                    "package": "idna",
                    "title": "`idna` accepts Punycode labels that do not produce any non-ASCII when decoded",
                    "description": "`idna` 0.5.0 and earlier accepts Punycode labels that do not produce any non-ASCII output, which means that either ASCII labels or the empty root label can be masked such that they appear unequal without IDNA processing or when processed with a different implementation and equal when processed with `idna` 0.5.0 or earlier.\n\nConcretely, `example.org` and `xn--example-.org` become equal after processing by `idna` 0.5.0 or earlier. Also, `example.org.xn--` and `example.org.` become equal after processing by `idna` 0.5.0 or earlier.\n\nIn applications using `idna` (but not in `idna` itself) this may be able to lead to privilege escalation when host name comparison is part of a privilege check and the behavior is combined with a client that resolves domains with such labels instead of treating them as errors that preclude DNS resolution / URL fetching and with the attacker managing to introduce a DNS entry (and TLS certificate) for an `xn--`-masked name that turns into the name of the target when processed by `idna` 0.5.0 or earlier.\n\n## Remedy\n\nUpgrade to `idna` 1.0.3 or later, if depending on `idna` directly, or to `url` 2.5.4 or later, if depending on `idna` via `url`. (This issue was fixed in `idna` 1.0.0, but versions earlier than 1.0.3 are not recommended for other reasons.)\n\nWhen upgrading, please take a moment to read about [alternative Unicode back ends for `idna`](https://docs.rs/crate/idna_adapter/latest).\n\nIf you are using Rust earlier than 1.81 in combination with SQLx 0.8.2 or earlier, please also read an [issue](https://github.com/servo/rust-url/issues/992) about combining them with `url` 2.5.4 and `idna` 1.0.3.\n\n## Additional information\n\nThis issue resulted from `idna` 0.5.0 and earlier implementing the UTS 46 specification literally on this point and the specification having this bug. The specification bug has been fixed in [revision 33 of UTS 46](https://www.unicode.org/reports/tr46/tr46-33.html#Modifications).\n\n## Acknowledgements\n\nThanks to kageshiron for recognizing the security implications of this behavior.",
                    "date": "2024-12-09",
                    "aliases": [
                      "CVE-2024-12224"
                    ],
                    "related": [],
                    "collection": "crates",
                    "categories": [
                      "privilege-escalation"
                    ],
                    "keywords": [
                      "idna",
                      "punycode",
                      "same-origin",
                      "domain-name"
                    ],
                    "cvss": null,
                    "informational": null,
                    "references": [],
                    "source": null,
                    "url": "https://bugzilla.mozilla.org/show_bug.cgi?id=1887898",
                    "withdrawn": null,
                    "license": "CC0-1.0"
                  },
                  "versions": {
                    "patched": [
                      ">=1.0.0"
                    ],
                    "unaffected": []
                  },
                  "affected": null,
                  "package": {
                    "name": "idna",
                    "version": "0.4.0",
                    "source": "registry+https://github.com/rust-lang/crates.io-index",
                    "checksum": "7d20d6b07bfbc108882d88ed8e37d39636dcc260e15e30c45e6ba089610b917c",
                    "dependencies": [
                      {
                        "name": "unicode-bidi",
                        "version": "0.3.13",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "unicode-normalization",
                        "version": "0.1.22",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      }
                    ],
                    "replace": null
                  }
                },
                {
                  "advisory": {
                    "id": "RUSTSEC-2024-0019",
                    "package": "mio",
                    "title": "Tokens for named pipes may be delivered after deregistration",
                    "description": "## Impact\n\nWhen using named pipes on Windows, mio will under some circumstances return invalid tokens that correspond to named pipes that have already been deregistered from the mio registry. The impact of this vulnerability depends on how mio is used. For some applications, invalid tokens may be ignored or cause a warning or a crash. On the other hand, for applications that store pointers in the tokens, this vulnerability may result in a use-after-free.\n\nFor users of Tokio, this vulnerability is serious and can result in a use-after-free in Tokio.\n\nThe vulnerability is Windows-specific, and can only happen if you are using named pipes. Other IO resources are not affected.\n\n## Affected versions\n\nThis vulnerability has been fixed in mio v0.8.11.\n\nAll versions of mio between v0.7.2 and v0.8.10 are vulnerable.\n\nTokio is vulnerable when you are using a vulnerable version of mio AND you are using at least Tokio v1.30.0. Versions of Tokio prior to v1.30.0 will ignore invalid tokens, so they are not vulnerable.\n\n## Workarounds\n\nVulnerable libraries that use mio can work around this issue by detecting and ignoring invalid tokens.\n\n## Technical details\n\nWhen an IO resource registered with mio has a readiness event, mio delivers that readiness event to the user using a user-specified token. Mio guarantees that when an IO resource is [deregistered](https://docs.rs/mio/latest/mio/struct.Registry.html#method.deregister), then it will never return the token for that IO resource again. However, for named pipes on windows, mio may sometimes deliver the token for a named pipe even though the named pipe has been previously deregistered.\n\nThis vulnerability was originally reported in the Tokio issue tracker: [tokio-rs/tokio#6369](https://github.com/tokio-rs/tokio/issues/6369)  \nThis vulnerability was fixed in: [tokio-rs/mio#1760](https://github.com/tokio-rs/mio/pull/1760)\n\nThank you to [@rofoun](https://github.com/rofoun) and [@radekvit](https://github.com/radekvit) for discovering and reporting this issue.",
                    "date": "2024-03-04",
                    "aliases": [
                      "CVE-2024-27308",
                      "GHSA-r8w9-5wcg-vfj7"
                    ],
                    "related": [],
                    "collection": "crates",
                    "categories": [],
                    "keywords": [],
                    "cvss": null,
                    "informational": null,
                    "references": [],
                    "source": null,
                    "url": "https://github.com/tokio-rs/mio/security/advisories/GHSA-r8w9-5wcg-vfj7",
                    "withdrawn": null,
                    "license": "CC0-1.0"
                  },
                  "versions": {
                    "patched": [
                      ">=0.8.11"
                    ],
                    "unaffected": [
                      "<0.7.2"
                    ]
                  },
                  "affected": {
                    "arch": [],
                    "os": [
                      "windows"
                    ],
                    "functions": {
                      "mio::windows::NamedPipe::new": [
                        ">=0.7.2, <=0.8.10"
                      ]
                    }
                  },
                  "package": {
                    "name": "mio",
                    "version": "0.8.6",
                    "source": "registry+https://github.com/rust-lang/crates.io-index",
                    "checksum": "5b9d9a46eff5b4ff64b45a9e316a6d1e0bc719ef429cbec4dc630684212bfdf9",
                    "dependencies": [
                      {
                        "name": "libc",
                        "version": "0.2.144",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "log",
                        "version": "0.4.18",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "wasi",
                        "version": "0.11.0+wasi-snapshot-preview1",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "windows-sys",
                        "version": "0.45.0",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      }
                    ],
                    "replace": null
                  }
                },
                {
                  "advisory": {
                    "id": "RUSTSEC-2024-0357",
                    "package": "openssl",
                    "title": "`MemBio::get_buf` has undefined behavior with empty buffers",
                    "description": "Previously, `MemBio::get_buf` called `slice::from_raw_parts` with a null-pointer, which violates the functions invariants, leading to undefined behavior. In debug builds this would produce an assertion failure. This is now fixed.",
                    "date": "2024-07-21",
                    "aliases": [],
                    "related": [],
                    "collection": "crates",
                    "categories": [],
                    "keywords": [],
                    "cvss": null,
                    "informational": null,
                    "references": [],
                    "source": null,
                    "url": "https://github.com/sfackler/rust-openssl/pull/2266",
                    "withdrawn": null,
                    "license": "CC0-1.0"
                  },
                  "versions": {
                    "patched": [
                      ">=0.10.66"
                    ],
                    "unaffected": []
                  },
                  "affected": {
                    "arch": [],
                    "os": [],
                    "functions": {
                      "openssl::bio::MemBio::get_buf": [
                        "<0.10.66, >=0.8.0"
                      ]
                    }
                  },
                  "package": {
                    "name": "openssl",
                    "version": "0.10.55",
                    "source": "registry+https://github.com/rust-lang/crates.io-index",
                    "checksum": "345df152bc43501c5eb9e4654ff05f794effb78d4efe3d53abc158baddc0703d",
                    "dependencies": [
                      {
                        "name": "bitflags",
                        "version": "1.3.2",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "cfg-if",
                        "version": "1.0.0",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "foreign-types",
                        "version": "0.3.2",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "libc",
                        "version": "0.2.144",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "once_cell",
                        "version": "1.18.0",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "openssl-macros",
                        "version": "0.1.0",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "openssl-sys",
                        "version": "0.9.90",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      }
                    ],
                    "replace": null
                  }
                },
                {
                  "advisory": {
                    "id": "RUSTSEC-2025-0004",
                    "package": "openssl",
                    "title": "ssl::select_next_proto use after free",
                    "description": "In `openssl` versions before `0.10.70`, `ssl::select_next_proto` can return a slice pointing into the `server` argument's buffer but with a lifetime bound to the `client` argument. In situations where the `server` buffer's lifetime is shorter than the `client` buffer's, this can cause a use after free. This could cause the server to crash or to return arbitrary memory contents to the client.\n\n`openssl` 0.10.70 fixes the signature of `ssl::select_next_proto` to properly constrain the output buffer's lifetime to that of both input buffers.\n\nIn standard usage of `ssl::select_next_proto` in the callback passed to `SslContextBuilder::set_alpn_select_callback`, code is only affected if the `server` buffer is constructed *within* the callback. For example:\n\nNot vulnerable - the server buffer has a `'static` lifetime:\n```rust\nbuilder.set_alpn_select_callback(|_, client_protos| {\n    ssl::select_next_proto(b\"\\x02h2\", client_protos).ok_or_else(AlpnError::NOACK)\n});\n```\n\nNot vulnerable - the server buffer outlives the handshake:\n```rust\nlet server_protos = b\"\\x02h2\".to_vec();\nbuilder.set_alpn_select_callback(|_, client_protos| {\n    ssl::select_next_proto(&server_protos, client_protos).ok_or_else(AlpnError::NOACK)\n});\n```\n\nVulnerable - the server buffer is freed when the callback returns:\n```rust\nbuilder.set_alpn_select_callback(|_, client_protos| {\n    let server_protos = b\"\\x02h2\".to_vec();\n    ssl::select_next_proto(&server_protos, client_protos).ok_or_else(AlpnError::NOACK)\n});\n```",
                    "date": "2025-02-02",
                    "aliases": [
                      "GHSA-rpmj-rpgj-qmpm"
                    ],
                    "related": [],
                    "collection": "crates",
                    "categories": [
                      "memory-exposure"
                    ],
                    "keywords": [
                      "ssl",
                      "tls",
                      "alpn"
                    ],
                    "cvss": null,
                    "informational": null,
                    "references": [
                      "https://github.com/sfackler/rust-openssl/pull/2360"
                    ],
                    "source": null,
                    "url": "https://github.com/sfackler/rust-openssl/security/advisories/GHSA-rpmj-rpgj-qmpm",
                    "withdrawn": null,
                    "license": "CC0-1.0"
                  },
                  "versions": {
                    "patched": [
                      ">=0.10.70"
                    ],
                    "unaffected": []
                  },
                  "affected": {
                    "arch": [],
                    "os": [],
                    "functions": {
                      "openssl::ssl::select_next_proto": [
                        ">=0.10.0, <0.10.70"
                      ]
                    }
                  },
                  "package": {
                    "name": "openssl",
                    "version": "0.10.55",
                    "source": "registry+https://github.com/rust-lang/crates.io-index",
                    "checksum": "345df152bc43501c5eb9e4654ff05f794effb78d4efe3d53abc158baddc0703d",
                    "dependencies": [
                      {
                        "name": "bitflags",
                        "version": "1.3.2",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "cfg-if",
                        "version": "1.0.0",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "foreign-types",
                        "version": "0.3.2",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "libc",
                        "version": "0.2.144",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "once_cell",
                        "version": "1.18.0",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "openssl-macros",
                        "version": "0.1.0",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "openssl-sys",
                        "version": "0.9.90",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      }
                    ],
                    "replace": null
                  }
                },
                {
                  "advisory": {
                    "id": "RUSTSEC-2025-0022",
                    "package": "openssl",
                    "title": "Use-After-Free in `Md::fetch` and `Cipher::fetch`",
                    "description": "When a `Some(...)` value was passed to the `properties` argument of either of these functions, a use-after-free would result.\n\nIn practice this would nearly always result in OpenSSL treating the properties as an empty string (due to `CString::drop`'s behavior).\n\nThe maintainers thank [quitbug](https://github.com/quitbug/) for reporting this vulnerability to us.",
                    "date": "2025-04-04",
                    "aliases": [],
                    "related": [],
                    "collection": "crates",
                    "categories": [
                      "memory-corruption"
                    ],
                    "keywords": [],
                    "cvss": null,
                    "informational": null,
                    "references": [],
                    "source": null,
                    "url": "https://github.com/sfackler/rust-openssl/pull/2390",
                    "withdrawn": null,
                    "license": "CC0-1.0"
                  },
                  "versions": {
                    "patched": [
                      ">=0.10.72"
                    ],
                    "unaffected": [
                      "<0.10.39"
                    ]
                  },
                  "affected": {
                    "arch": [],
                    "os": [],
                    "functions": {
                      "openssl::cipher::Cipher::fetch": [
                        ">=0.10.39, <0.10.72"
                      ],
                      "openssl::md::Md::fetch": [
                        ">=0.10.39, <0.10.72"
                      ]
                    }
                  },
                  "package": {
                    "name": "openssl",
                    "version": "0.10.55",
                    "source": "registry+https://github.com/rust-lang/crates.io-index",
                    "checksum": "345df152bc43501c5eb9e4654ff05f794effb78d4efe3d53abc158baddc0703d",
                    "dependencies": [
                      {
                        "name": "bitflags",
                        "version": "1.3.2",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "cfg-if",
                        "version": "1.0.0",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "foreign-types",
                        "version": "0.3.2",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "libc",
                        "version": "0.2.144",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "once_cell",
                        "version": "1.18.0",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "openssl-macros",
                        "version": "0.1.0",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "openssl-sys",
                        "version": "0.9.90",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      }
                    ],
                    "replace": null
                  }
                },
                {
                  "advisory": {
                    "id": "RUSTSEC-2023-0063",
                    "package": "quinn-proto",
                    "title": "Denial of service in Quinn servers",
                    "description": "Receiving QUIC frames containing a frame with unknown frame type could lead to a panic.\nUnfortunately this is issue was not found by our fuzzing infrastructure.\n\nThanks to the QUIC Tester research group for reporting this issue.",
                    "date": "2023-09-21",
                    "aliases": [
                      "CVE-2023-42805",
                      "GHSA-q8wc-j5m9-27w3"
                    ],
                    "related": [],
                    "collection": "crates",
                    "categories": [
                      "denial-of-service"
                    ],
                    "keywords": [
                      "panic"
                    ],
                    "cvss": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
                    "informational": null,
                    "references": [],
                    "source": null,
                    "url": "https://github.com/quinn-rs/quinn/pull/1667",
                    "withdrawn": null,
                    "license": "CC0-1.0"
                  },
                  "versions": {
                    "patched": [
                      "^0.9.5",
                      ">=0.10.5"
                    ],
                    "unaffected": []
                  },
                  "affected": null,
                  "package": {
                    "name": "quinn-proto",
                    "version": "0.10.1",
                    "source": "registry+https://github.com/rust-lang/crates.io-index",
                    "checksum": "85af4ed6ee5a89f26a26086e9089a6643650544c025158449a3626ebf72884b3",
                    "dependencies": [
                      {
                        "name": "bytes",
                        "version": "1.4.0",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "rand",
                        "version": "0.8.5",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "ring",
                        "version": "0.16.20",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "rustc-hash",
                        "version": "1.1.0",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "rustls",
                        "version": "0.21.5",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "slab",
                        "version": "0.4.8",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "thiserror",
                        "version": "1.0.40",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "tinyvec",
                        "version": "1.6.0",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "tracing",
                        "version": "0.1.37",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      }
                    ],
                    "replace": null
                  }
                },
                {
                  "advisory": {
                    "id": "RUSTSEC-2025-0009",
                    "package": "ring",
                    "title": "Some AES functions may panic when overflow checking is enabled.",
                    "description": "`ring::aead::quic::HeaderProtectionKey::new_mask()` may panic when overflow\nchecking is enabled. In the QUIC protocol, an attacker can induce this panic by\nsending a specially-crafted packet. Even unintentionally it is likely to occur\nin 1 out of every 2**32 packets sent and/or received.\n\nOn 64-bit targets operations using `ring::aead::{AES_128_GCM, AES_256_GCM}` may\npanic when overflow checking is enabled, when encrypting/decrypting approximately\n68,719,476,700 bytes (about 64 gigabytes) of data in a single chunk. Protocols\nlike TLS and SSH are not affected by this because those protocols break large\namounts of data into small chunks. Similarly, most applications will not\nattempt to encrypt/decrypt 64GB of data in one chunk.\n\nOverflow checking is not enabled in release mode by default, but\n`RUSTFLAGS=\"-C overflow-checks\"` or `overflow-checks = true` in the Cargo.toml\nprofile can override this. Overflow checking is usually enabled by default in\ndebug mode.",
                    "date": "2025-03-06",
                    "aliases": [],
                    "related": [],
                    "collection": "crates",
                    "categories": [
                      "denial-of-service"
                    ],
                    "keywords": [],
                    "cvss": null,
                    "informational": null,
                    "references": [],
                    "source": null,
                    "url": "https://github.com/briansmith/ring/blob/main/RELEASES.md#version-01712-2025-03-05",
                    "withdrawn": null,
                    "license": "CC0-1.0"
                  },
                  "versions": {
                    "patched": [
                      ">=0.17.12"
                    ],
                    "unaffected": []
                  },
                  "affected": null,
                  "package": {
                    "name": "ring",
                    "version": "0.16.20",
                    "source": "registry+https://github.com/rust-lang/crates.io-index",
                    "checksum": "3053cf52e236a3ed746dfc745aa9cacf1b791d846bdaf412f60a8d7d6e17c8fc",
                    "dependencies": [
                      {
                        "name": "cc",
                        "version": "1.0.79",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "libc",
                        "version": "0.2.144",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "once_cell",
                        "version": "1.18.0",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "spin",
                        "version": "0.5.2",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "untrusted",
                        "version": "0.7.1",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "web-sys",
                        "version": "0.3.61",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "winapi",
                        "version": "0.3.9",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      }
                    ],
                    "replace": null
                  }
                },
                {
                  "advisory": {
                    "id": "RUSTSEC-2024-0336",
                    "package": "rustls",
                    "title": "`rustls::ConnectionCommon::complete_io` could fall into an infinite loop based on network input",
                    "description": "If a `close_notify` alert is received during a handshake, `complete_io`\ndoes not terminate.\n\nCallers which do not call `complete_io` are not affected.\n\n`rustls-tokio` and `rustls-ffi` do not call `complete_io`\nand are not affected.\n\n`rustls::Stream` and `rustls::StreamOwned` types use\n`complete_io` and are affected.",
                    "date": "2024-04-19",
                    "aliases": [
                      "CVE-2024-32650",
                      "GHSA-6g7w-8wpp-frhj"
                    ],
                    "related": [],
                    "collection": "crates",
                    "categories": [
                      "denial-of-service"
                    ],
                    "keywords": [],
                    "cvss": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
                    "informational": null,
                    "references": [],
                    "source": null,
                    "url": "https://github.com/rustls/rustls/security/advisories/GHSA-6g7w-8wpp-frhj",
                    "withdrawn": null,
                    "license": "CC0-1.0"
                  },
                  "versions": {
                    "patched": [
                      ">=0.23.5",
                      ">=0.22.4, <0.23.0",
                      ">=0.21.11, <0.22.0"
                    ],
                    "unaffected": []
                  },
                  "affected": {
                    "arch": [],
                    "os": [],
                    "functions": {
                      "rustls::ConnectionCommon::complete_io": [
                        "<=0.23.4",
                        "<=0.22.3",
                        "<=0.21.10",
                        "^0.20"
                      ]
                    }
                  },
                  "package": {
                    "name": "rustls",
                    "version": "0.21.5",
                    "source": "registry+https://github.com/rust-lang/crates.io-index",
                    "checksum": "79ea77c539259495ce8ca47f53e66ae0330a8819f67e23ac96ca02f50e7b7d36",
                    "dependencies": [
                      {
                        "name": "log",
                        "version": "0.4.18",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "ring",
                        "version": "0.16.20",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "rustls-webpki",
                        "version": "0.101.4",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "sct",
                        "version": "0.7.0",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      }
                    ],
                    "replace": null
                  }
                }
              ]
            },
            "warnings": {
              "unmaintained": [
                {
                  "kind": "unmaintained",
                  "package": {
                    "name": "instant",
                    "version": "0.1.12",
                    "source": "registry+https://github.com/rust-lang/crates.io-index",
                    "checksum": "7a5bbe824c507c5da5956355e86a746d82e0e1464f65d862cc5e71da70e94b2c",
                    "dependencies": [
                      {
                        "name": "cfg-if",
                        "version": "1.0.0",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      }
                    ],
                    "replace": null
                  },
                  "advisory": {
                    "id": "RUSTSEC-2024-0384",
                    "package": "instant",
                    "title": "`instant` is unmaintained",
                    "description": "This crate is no longer maintained, and the author recommends using the maintained [`web-time`] crate instead.\n\n[`web-time`]: https://crates.io/crates/web-time",
                    "date": "2024-09-01",
                    "aliases": [],
                    "related": [],
                    "collection": "crates",
                    "categories": [],
                    "keywords": [],
                    "cvss": null,
                    "informational": "unmaintained",
                    "references": [
                      "https://crates.io/crates/instant/0.1.13",
                      "https://github.com/sebcrozet/instant/issues/52"
                    ],
                    "source": null,
                    "url": null,
                    "withdrawn": null,
                    "license": "CC0-1.0"
                  },
                  "affected": null,
                  "versions": {
                    "patched": [],
                    "unaffected": []
                  }
                },
                {
                  "kind": "unmaintained",
                  "package": {
                    "name": "ring",
                    "version": "0.16.20",
                    "source": "registry+https://github.com/rust-lang/crates.io-index",
                    "checksum": "3053cf52e236a3ed746dfc745aa9cacf1b791d846bdaf412f60a8d7d6e17c8fc",
                    "dependencies": [
                      {
                        "name": "cc",
                        "version": "1.0.79",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "libc",
                        "version": "0.2.144",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "once_cell",
                        "version": "1.18.0",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "spin",
                        "version": "0.5.2",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "untrusted",
                        "version": "0.7.1",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "web-sys",
                        "version": "0.3.61",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "winapi",
                        "version": "0.3.9",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      }
                    ],
                    "replace": null
                  },
                  "advisory": {
                    "id": "RUSTSEC-2025-0010",
                    "package": "ring",
                    "title": "Versions of *ring* prior to 0.17 are unmaintained.",
                    "description": "*ring* 0.16.20 was released over 4 years ago and isn't maintained, tested, etc.\n\nAdditionally, the project's general policy is to only patch the latest release,\nwhich is 0.17.12 now. It will be difficult for anybody to backport future fixes\nto versions earlier than 0.17.10 due to license changes.",
                    "date": "2025-03-05",
                    "aliases": [],
                    "related": [],
                    "collection": "crates",
                    "categories": [],
                    "keywords": [],
                    "cvss": null,
                    "informational": "unmaintained",
                    "references": [],
                    "source": null,
                    "url": "https://github.com/briansmith/ring/discussions/2450",
                    "withdrawn": null,
                    "license": "CC0-1.0"
                  },
                  "affected": null,
                  "versions": {
                    "patched": [],
                    "unaffected": [
                      ">=0.17"
                    ]
                  }
                },
                {
                  "kind": "unmaintained",
                  "package": {
                    "name": "trust-dns-proto",
                    "version": "0.23.2",
                    "source": "registry+https://github.com/rust-lang/crates.io-index",
                    "checksum": "3119112651c157f4488931a01e586aa459736e9d6046d3bd9105ffb69352d374",
                    "dependencies": [
                      {
                        "name": "async-trait",
                        "version": "0.1.68",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "bytes",
                        "version": "1.4.0",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "cfg-if",
                        "version": "1.0.0",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "data-encoding",
                        "version": "2.3.3",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "enum-as-inner",
                        "version": "0.6.0",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "futures-channel",
                        "version": "0.3.27",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "futures-io",
                        "version": "0.3.27",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "futures-util",
                        "version": "0.3.27",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "h2",
                        "version": "0.3.18",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "http",
                        "version": "0.2.9",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "idna",
                        "version": "0.4.0",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "ipnet",
                        "version": "2.7.1",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "native-tls",
                        "version": "0.2.11",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "once_cell",
                        "version": "1.18.0",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "openssl",
                        "version": "0.10.55",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "quinn",
                        "version": "0.10.1",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "rand",
                        "version": "0.8.5",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "ring",
                        "version": "0.16.20",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "rustls",
                        "version": "0.21.5",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "rustls-pemfile",
                        "version": "1.0.2",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "rustls-webpki",
                        "version": "0.101.4",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "serde",
                        "version": "1.0.158",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "smallvec",
                        "version": "1.10.0",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "thiserror",
                        "version": "1.0.40",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "tinyvec",
                        "version": "1.6.0",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "tokio",
                        "version": "1.28.1",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "tokio-native-tls",
                        "version": "0.3.1",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "tokio-openssl",
                        "version": "0.6.3",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "tokio-rustls",
                        "version": "0.24.0",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "tracing",
                        "version": "0.1.37",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "url",
                        "version": "2.4.0",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "webpki-roots",
                        "version": "0.25.1",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      }
                    ],
                    "replace": null
                  },
                  "advisory": {
                    "id": "RUSTSEC-2025-0017",
                    "package": "trust-dns-proto",
                    "title": "The `trust-dns` project has been rebranded to `hickory-dns`",
                    "description": "The `trust-dns-proto` crate is now available as `hickory-proto`.",
                    "date": "2025-03-23",
                    "aliases": [],
                    "related": [],
                    "collection": "crates",
                    "categories": [],
                    "keywords": [],
                    "cvss": null,
                    "informational": "unmaintained",
                    "references": [
                      "https://github.com/hickory-dns/hickory-dns/issues/2051"
                    ],
                    "source": null,
                    "url": "https://crates.io/crates/hickory-proto",
                    "withdrawn": null,
                    "license": "CC0-1.0"
                  },
                  "affected": null,
                  "versions": {
                    "patched": [],
                    "unaffected": [
                      "<=0.23.0"
                    ]
                  }
                }
              ],
              "unsound": [
                {
                  "kind": "unsound",
                  "package": {
                    "name": "openssl",
                    "version": "0.10.55",
                    "source": "registry+https://github.com/rust-lang/crates.io-index",
                    "checksum": "345df152bc43501c5eb9e4654ff05f794effb78d4efe3d53abc158baddc0703d",
                    "dependencies": [
                      {
                        "name": "bitflags",
                        "version": "1.3.2",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "cfg-if",
                        "version": "1.0.0",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "foreign-types",
                        "version": "0.3.2",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "libc",
                        "version": "0.2.144",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "once_cell",
                        "version": "1.18.0",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "openssl-macros",
                        "version": "0.1.0",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "openssl-sys",
                        "version": "0.9.90",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      }
                    ],
                    "replace": null
                  },
                  "advisory": {
                    "id": "RUSTSEC-2023-0072",
                    "package": "openssl",
                    "title": "`openssl` `X509StoreRef::objects` is unsound",
                    "description": "This function returned a shared reference into an OpenSSL datastructure but did not account for interior mutability. OpenSSL may modify the data behind this reference, meaning accesses can race and the reference is unsound.\n\nUse of this function should be replaced with `X509StoreRef::all_certificates`.",
                    "date": "2023-11-23",
                    "aliases": [
                      "GHSA-xphf-cx8h-7q9g"
                    ],
                    "related": [],
                    "collection": "crates",
                    "categories": [
                      "memory-corruption"
                    ],
                    "keywords": [],
                    "cvss": null,
                    "informational": "unsound",
                    "references": [],
                    "source": null,
                    "url": "https://github.com/sfackler/rust-openssl/issues/2096",
                    "withdrawn": null,
                    "license": "CC0-1.0"
                  },
                  "affected": {
                    "arch": [],
                    "os": [],
                    "functions": {
                      "openssl::x509::store::X509StoreRef::objects": [
                        "<0.10.60, >=0.10.29"
                      ]
                    }
                  },
                  "versions": {
                    "patched": [
                      ">=0.10.60"
                    ],
                    "unaffected": []
                  }
                },
                {
                  "kind": "unsound",
                  "package": {
                    "name": "tokio",
                    "version": "1.28.1",
                    "source": "registry+https://github.com/rust-lang/crates.io-index",
                    "checksum": "0aa32867d44e6f2ce3385e89dceb990188b8bb0fb25b0cf576647a6f98ac5105",
                    "dependencies": [
                      {
                        "name": "autocfg",
                        "version": "1.1.0",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "bytes",
                        "version": "1.4.0",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "libc",
                        "version": "0.2.144",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "mio",
                        "version": "0.8.6",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "num_cpus",
                        "version": "1.15.0",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "pin-project-lite",
                        "version": "0.2.9",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "socket2",
                        "version": "0.4.9",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "tokio-macros",
                        "version": "2.1.0",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "windows-sys",
                        "version": "0.48.0",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      }
                    ],
                    "replace": null
                  },
                  "advisory": {
                    "id": "RUSTSEC-2025-0023",
                    "package": "tokio",
                    "title": "Broadcast channel calls clone in parallel, but does not require `Sync`",
                    "description": "The broadcast channel internally calls `clone` on the stored value when\nreceiving it, and only requires `T:Send`. This means that using the broadcast\nchannel with values that are `Send` but not `Sync` can trigger unsoundness if\nthe `clone` implementation makes use of the value being `!Sync`.\n\nThank you to Austin Bonander for finding and reporting this issue.",
                    "date": "2025-04-07",
                    "aliases": [],
                    "related": [],
                    "collection": "crates",
                    "categories": [
                      "memory-corruption"
                    ],
                    "keywords": [],
                    "cvss": null,
                    "informational": "unsound",
                    "references": [],
                    "source": null,
                    "url": "https://github.com/tokio-rs/tokio/pull/7232",
                    "withdrawn": null,
                    "license": "CC0-1.0"
                  },
                  "affected": null,
                  "versions": {
                    "patched": [
                      ">=1.38.2, <1.39.0",
                      ">=1.42.1, <1.43.0",
                      ">=1.43.1, <1.44.0",
                      ">=1.44.2"
                    ],
                    "unaffected": [
                      "<0.2.5"
                    ]
                  }
                }
              ],
              "yanked": [
                {
                  "kind": "yanked",
                  "package": {
                    "name": "ahash",
                    "version": "0.7.6",
                    "source": "registry+https://github.com/rust-lang/crates.io-index",
                    "checksum": "fcb51a0695d8f838b1ee009b3fbf66bda078cd64590202a864a8f3e8c4315c47",
                    "dependencies": [
                      {
                        "name": "getrandom",
                        "version": "0.2.8",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "once_cell",
                        "version": "1.18.0",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "version_check",
                        "version": "0.9.4",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      }
                    ],
                    "replace": null
                  },
                  "advisory": null,
                  "affected": null,
                  "versions": null
                },
                {
                  "kind": "yanked",
                  "package": {
                    "name": "futures-util",
                    "version": "0.3.27",
                    "source": "registry+https://github.com/rust-lang/crates.io-index",
                    "checksum": "3ef6b17e481503ec85211fed8f39d1970f128935ca1f814cd32ac4a6842e84ab",
                    "dependencies": [
                      {
                        "name": "futures-channel",
                        "version": "0.3.27",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "futures-core",
                        "version": "0.3.27",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "futures-io",
                        "version": "0.3.27",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "futures-sink",
                        "version": "0.3.27",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "futures-task",
                        "version": "0.3.27",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "memchr",
                        "version": "2.5.0",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "pin-project-lite",
                        "version": "0.2.9",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "pin-utils",
                        "version": "0.1.0",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      },
                      {
                        "name": "slab",
                        "version": "0.4.8",
                        "source": "registry+https://github.com/rust-lang/crates.io-index"
                      }
                    ],
                    "replace": null
                  },
                  "advisory": null,
                  "affected": null,
                  "versions": null
                }
              ]
            }
          },
          "note": "Crate analysis performed with stable toolchain."
        },
        "crate_metadata": {
          "name": "trust-dns",
          "version": "0.23.2",
          "description": "ALLOW: Positive community sentiment",
          "repository": "",
          "keywords": [],
          "categories": [],
          "readme": {
            "raw_markdown": "###  [81 releases](https://lib.rs/crates/trust-dns/versions)\n0.23.2 |  Oct 23, 2023   \n---|---  \n0.23.0 |  Aug 22, 2023   \n0.23.0-alpha.4 |  Jun 11, 2023   \n0.22.0 |  Sep 2, 2022   \n0.4.0 |  Nov 9, 2015   \n#**4** in [#dynamic-dns](https://lib.rs/keywords/dynamic-dns)\nDownload history 261/week @ 2025-03-08 384/week @ 2025-03-15 247/week @ 2025-03-22 159/week @ 2025-03-29 233/week @ 2025-04-05 290/week @ 2025-04-12 271/week @ 2025-04-19 337/week @ 2025-04-26 269/week @ 2025-05-03 277/week @ 2025-05-10 165/week @ 2025-05-17 175/week @ 2025-05-24 225/week @ 2025-05-31 186/week @ 2025-06-07 238/week @ 2025-06-14 318/week @ 2025-06-21\n**993** downloads per month Used in [**14** crates (11 directly)](https://lib.rs/crates/trust-dns/rev)\n**MIT/Apache**\n2.5MB  **38K** SLoC\n**NOTICE** This project has been rebranded to Hickory DNS and has been moved to the <https://github.com/hickory-dns/hickory-dns> organization and repo, this crate/binary has been moved to [hickory-dns](https://lib.rs/crates/hickory-dns), from ```0.``24```\n# Overview\nTrust-DNS provides a binary for hosting or forwarding DNS zones.\nThis a named implementation for DNS zone hosting. It is capable of performing signing all records in the zone for server DNSSEC RRSIG records associated with all records in a zone. There is also a ``trust-dns`` binary that can be generated from the library with ````cargo``` install trust-dns```. Dynamic updates are supported via ```SIG0``` (an mTLS authentication method is under development).\n## Features\n  * Dynamic Update with sqlite journaling backend (SIG0)\n  * DNSSEC online signing (NSEC not NSEC3)\n  * DNS over TLS (DoT)\n  * DNS over HTTPS (DoH)\n  * Forwarding stub resolver\n  * ANAME resolution, for zone mapping aliass to A and AAAA records\n  * Additionals section generation for aliasing record types\n\n\n## DNS-over-TLS and DNS-over-HTTPS\nSupport of TLS on the Server is managed through a pkcs12 der file. The documentation is captured in the example test config file, [example.toml](https://github.com/bluejekyll/trust-dns/blob/main/tests/test-data/test_configs/example.toml). A registered certificate to the server can be pinned to the Client with the ```add_ca``(``)``` method. Alternatively, as the client uses the rust-native-tls library, it should work with certificate signed by any standard CA.\nDoT and DoH are supported. This is accomplished through the use of one of ``native-tls``, ``openssl``, or ``rustls`` (only ``rustls`` is currently supported for DoH). The Resolver requires only requires valid DoT or DoH resolvers being registered in order to be used.\nTo use with the ``Client``, the ``TlsClientConnection`` or ``HttpsClientConnection`` should be used. Similarly, to use with the tokio ``AsyncClient`` the ``TlsClientStream`` or ``HttpsClientStream`` should be used. ClientAuth, mTLS, is currently not supported, there are some issues still being worked on. TLS is useful for Server authentication and connection privacy.\nTo enable DoT one of the features ``dns-over-native-tls``, ``dns-over-openssl``, or ``dns-over-rustls`` must be enabled, ``dns-over-https-rustls`` is used for DoH.\n## DNSSEC status\nCurrently the root key is hardcoded into the system. This gives validation of DNSKEY and DS records back to the root. NSEC is implemented, but not NSEC3. Because caching is not yet enabled, it has been noticed that some DNS servers appear to rate limit the connections, validating RRSIG records back to the root can require a significant number of additional queries for those records.\nZones will be automatically resigned on any record updates via dynamic DNS. To enable DNSSEC, one of the features ``dnssec-openssl`` or ``dnssec-ring`` must be enabled.\n## Future goals\n  * Distributed dynamic DNS updates, with consensus\n  * mTLS based authorization for Dynamic Updates\n  * Online NSEC creation for queries\n  * Full hint based resolving\n  * Maybe NSEC3 and/or NSEC5 support\n\n\n## Minimum Rust Version\nThe current minimum rustc version for this project is ```1.``64```\n## Versioning\nTrust-DNS does it's best job to follow semver. Trust-DNS will be promoted to 1.0 upon stabilization of the publicly exposed APIs. This does not mean that Trust-DNS will necessarily break on upgrades between 0.x updates. Whenever possible, old APIs will be deprecated with notes on what replaced those deprecations. Trust-DNS will make a best effort to never break software which depends on it due to API changes, though this can not be guaranteed. Deprecated interfaces will be maintained for at minimum one major release after that in which they were deprecated (where possible), with the exception of the upgrade to 1.0 where all deprecated interfaces will be planned to be removed.\n#### Dependencies\n~13\u201332MB  ~493K SLoC\n  * [clap](https://lib.rs/crates/clap \"new\") 4.0[+std](https://lib.rs/crates/clap/features#feature-std)[+cargo](https://lib.rs/crates/clap/features#feature-cargo)[+help](https://lib.rs/crates/clap/features#feature-help)[+derive](https://lib.rs/crates/clap/features#feature-derive)[+suggestions](https://lib.rs/crates/clap/features#feature-suggestions)\n  * [futures](https://lib.rs/crates/futures \"0.3.5\")[+std](https://lib.rs/crates/futures/features#feature-std)\n  * [dns-over-rustls?](https://lib.rs/crates/trust-dns/features#feature-dns-over-rustls \"optional feature\") [rustls](https://lib.rs/crates/rustls \"obsolete\") 0.21\n  * [time](https://lib.rs/crates/time \"0.3\")\n  * [tokio](https://lib.rs/crates/tokio \"1.21\")[+time](https://lib.rs/crates/tokio/features#feature-time)[+rt](https://lib.rs/crates/tokio/features#feature-rt)\n  * [tracing](https://lib.rs/crates/tracing \"0.1.30\")\n  * [tracing-subscriber](https://lib.rs/crates/tracing-subscriber \"0.3\")[+std](https://lib.rs/crates/tracing-subscriber/features#feature-std)[+fmt](https://lib.rs/crates/tracing-subscriber/features#feature-fmt)[+env-filter](https://lib.rs/crates/tracing-subscriber/features#feature-env-filter)\n  * [trust-dns-client](https://lib.rs/crates/trust-dns-client \"obsolete\") 0.23.2\n  * [trust-dns-proto](https://lib.rs/crates/trust-dns-proto \"new\") 0.23.2\n  * [trust-dns-server](https://lib.rs/crates/trust-dns-server \"new\") 0.23.2\n\n\n  * dev  [native-tls](https://lib.rs/crates/native-tls \"0.2\")\n  * dev  [regex](https://lib.rs/crates/regex \"1.3.4\")\n  * dev  [trust-dns-resolver](https://lib.rs/crates/trust-dns-resolver \"new\") 0.23.2\n  * dev  [webpki-roots](https://lib.rs/crates/webpki-roots \"outdated\") 0.25\n\n\n#### [Other features](https://lib.rs/crates/trust-dns/features)\n  * [dns-over-https](https://lib.rs/crates/trust-dns/features#feature-dns-over-https)\n  * [dns-over-https-rustls](https://lib.rs/crates/trust-dns/features#feature-dns-over-https-rustls)\n  * [dns-over-openssl](https://lib.rs/crates/trust-dns/features#feature-dns-over-openssl)\n  * [dns-over-quic](https://lib.rs/crates/trust-dns/features#feature-dns-over-quic)\n  * [dns-over-tls](https://lib.rs/crates/trust-dns/features#feature-dns-over-tls)\n  * [dnssec](https://lib.rs/crates/trust-dns/features#feature-dnssec)\n  * [dnssec-openssl](https://lib.rs/crates/trust-dns/features#feature-dnssec-openssl)\n  * [dnssec-ring](https://lib.rs/crates/trust-dns/features#feature-dnssec-ring)\n  * [recursor](https://lib.rs/crates/trust-dns/features#feature-recursor)\n  * [resolver](https://lib.rs/crates/trust-dns/features#feature-resolver)\n  * [sqlite](https://lib.rs/crates/trust-dns/features#feature-sqlite)\n  * [tls](https://lib.rs/crates/trust-dns/features#feature-tls)\n  * [tls-openssl](https://lib.rs/crates/trust-dns/features#feature-tls-openssl)\n\n\n  *[SLoC]: approx. additional lines of code\n",
            "markdown_with_citations": "###  81 releases\u27e81\u27e9\n0.23.2 |  Oct 23, 2023   \n---|---  \n0.23.0 |  Aug 22, 2023   \n0.23.0-alpha.4 |  Jun 11, 2023   \n0.22.0 |  Sep 2, 2022   \n0.4.0 |  Nov 9, 2015   \n#**4** in #dynamic-dns\u27e82\u27e9\nDownload history 261/week @ 2025-03-08 384/week @ 2025-03-15 247/week @ 2025-03-22 159/week @ 2025-03-29 233/week @ 2025-04-05 290/week @ 2025-04-12 271/week @ 2025-04-19 337/week @ 2025-04-26 269/week @ 2025-05-03 277/week @ 2025-05-10 165/week @ 2025-05-17 175/week @ 2025-05-24 225/week @ 2025-05-31 186/week @ 2025-06-07 238/week @ 2025-06-14 318/week @ 2025-06-21\n**993** downloads per month Used in **14** crates (11 directly)\u27e83\u27e9\n**MIT/Apache**\n2.5MB  **38K** SLoC\n**NOTICE** This project has been rebranded to Hickory DNS and has been moved to the <https://github.com/hickory-dns/hickory-dns> organization and repo, this crate/binary has been moved to hickory-dns\u27e84\u27e9, from ```0.``24```\n# Overview\nTrust-DNS provides a binary for hosting or forwarding DNS zones.\nThis a named implementation for DNS zone hosting. It is capable of performing signing all records in the zone for server DNSSEC RRSIG records associated with all records in a zone. There is also a ``trust-dns`` binary that can be generated from the library with ````cargo``` install trust-dns```. Dynamic updates are supported via ```SIG0``` (an mTLS authentication method is under development).\n## Features\n  * Dynamic Update with sqlite journaling backend (SIG0)\n  * DNSSEC online signing (NSEC not NSEC3)\n  * DNS over TLS (DoT)\n  * DNS over HTTPS (DoH)\n  * Forwarding stub resolver\n  * ANAME resolution, for zone mapping aliass to A and AAAA records\n  * Additionals section generation for aliasing record types\n\n\n## DNS-over-TLS and DNS-over-HTTPS\nSupport of TLS on the Server is managed through a pkcs12 der file. The documentation is captured in the example test config file, example.toml\u27e85\u27e9. A registered certificate to the server can be pinned to the Client with the ```add_ca``(``)``` method. Alternatively, as the client uses the rust-native-tls library, it should work with certificate signed by any standard CA.\nDoT and DoH are supported. This is accomplished through the use of one of ``native-tls``, ``openssl``, or ``rustls`` (only ``rustls`` is currently supported for DoH). The Resolver requires only requires valid DoT or DoH resolvers being registered in order to be used.\nTo use with the ``Client``, the ``TlsClientConnection`` or ``HttpsClientConnection`` should be used. Similarly, to use with the tokio ``AsyncClient`` the ``TlsClientStream`` or ``HttpsClientStream`` should be used. ClientAuth, mTLS, is currently not supported, there are some issues still being worked on. TLS is useful for Server authentication and connection privacy.\nTo enable DoT one of the features ``dns-over-native-tls``, ``dns-over-openssl``, or ``dns-over-rustls`` must be enabled, ``dns-over-https-rustls`` is used for DoH.\n## DNSSEC status\nCurrently the root key is hardcoded into the system. This gives validation of DNSKEY and DS records back to the root. NSEC is implemented, but not NSEC3. Because caching is not yet enabled, it has been noticed that some DNS servers appear to rate limit the connections, validating RRSIG records back to the root can require a significant number of additional queries for those records.\nZones will be automatically resigned on any record updates via dynamic DNS. To enable DNSSEC, one of the features ``dnssec-openssl`` or ``dnssec-ring`` must be enabled.\n## Future goals\n  * Distributed dynamic DNS updates, with consensus\n  * mTLS based authorization for Dynamic Updates\n  * Online NSEC creation for queries\n  * Full hint based resolving\n  * Maybe NSEC3 and/or NSEC5 support\n\n\n## Minimum Rust Version\nThe current minimum rustc version for this project is ```1.``64```\n## Versioning\nTrust-DNS does it's best job to follow semver. Trust-DNS will be promoted to 1.0 upon stabilization of the publicly exposed APIs. This does not mean that Trust-DNS will necessarily break on upgrades between 0.x updates. Whenever possible, old APIs will be deprecated with notes on what replaced those deprecations. Trust-DNS will make a best effort to never break software which depends on it due to API changes, though this can not be guaranteed. Deprecated interfaces will be maintained for at minimum one major release after that in which they were deprecated (where possible), with the exception of the upgrade to 1.0 where all deprecated interfaces will be planned to be removed.\n#### Dependencies\n~13\u201332MB  ~493K SLoC\n  * clap\u27e86\u27e9 4.0+std\u27e87\u27e9+cargo\u27e88\u27e9+help\u27e89\u27e9+derive\u27e810\u27e9+suggestions\u27e811\u27e9\n  * futures\u27e812\u27e9+std\u27e813\u27e9\n  * dns-over-rustls?\u27e814\u27e9 rustls\u27e815\u27e9 0.21\n  * time\u27e816\u27e9\n  * tokio\u27e817\u27e9+time\u27e818\u27e9+rt\u27e819\u27e9\n  * tracing\u27e820\u27e9\n  * tracing-subscriber\u27e821\u27e9+std\u27e822\u27e9+fmt\u27e823\u27e9+env-filter\u27e824\u27e9\n  * trust-dns-client\u27e825\u27e9 0.23.2\n  * trust-dns-proto\u27e826\u27e9 0.23.2\n  * trust-dns-server\u27e827\u27e9 0.23.2\n\n\n  * dev  native-tls\u27e828\u27e9\n  * dev  regex\u27e829\u27e9\n  * dev  trust-dns-resolver\u27e830\u27e9 0.23.2\n  * dev  webpki-roots\u27e831\u27e9 0.25\n\n\n#### Other features\u27e832\u27e9\n  * dns-over-https\u27e833\u27e9\n  * dns-over-https-rustls\u27e834\u27e9\n  * dns-over-openssl\u27e835\u27e9\n  * dns-over-quic\u27e836\u27e9\n  * dns-over-tls\u27e837\u27e9\n  * dnssec\u27e838\u27e9\n  * dnssec-openssl\u27e839\u27e9\n  * dnssec-ring\u27e840\u27e9\n  * recursor\u27e841\u27e9\n  * resolver\u27e842\u27e9\n  * sqlite\u27e843\u27e9\n  * tls\u27e844\u27e9\n  * tls-openssl\u27e845\u27e9\n\n\n  *[SLoC]: approx. additional lines of code\n",
            "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://lib.rs/crates/trust-dns/versions: 81 releases\n\u27e82\u27e9 https://lib.rs/keywords/dynamic-dns: #dynamic-dns\n\u27e83\u27e9 https://lib.rs/crates/trust-dns/rev: **14** crates (11 directly)\n\u27e84\u27e9 https://lib.rs/crates/hickory-dns: hickory-dns\n\u27e85\u27e9 https://github.com/bluejekyll/trust-dns/blob/main/tests/test-data/test_configs/example.toml: example.toml\n\u27e86\u27e9 https://lib.rs/crates/clap: new - clap\n\u27e87\u27e9 https://lib.rs/crates/clap/features#feature-std: +std\n\u27e88\u27e9 https://lib.rs/crates/clap/features#feature-cargo: +cargo\n\u27e89\u27e9 https://lib.rs/crates/clap/features#feature-help: +help\n\u27e810\u27e9 https://lib.rs/crates/clap/features#feature-derive: +derive\n\u27e811\u27e9 https://lib.rs/crates/clap/features#feature-suggestions: +suggestions\n\u27e812\u27e9 https://lib.rs/crates/futures: 0.3.5 - futures\n\u27e813\u27e9 https://lib.rs/crates/futures/features#feature-std: +std\n\u27e814\u27e9 https://lib.rs/crates/trust-dns/features#feature-dns-over-rustls: optional feature - dns-over-rustls?\n\u27e815\u27e9 https://lib.rs/crates/rustls: obsolete - rustls\n\u27e816\u27e9 https://lib.rs/crates/time: 0.3 - time\n\u27e817\u27e9 https://lib.rs/crates/tokio: 1.21 - tokio\n\u27e818\u27e9 https://lib.rs/crates/tokio/features#feature-time: +time\n\u27e819\u27e9 https://lib.rs/crates/tokio/features#feature-rt: +rt\n\u27e820\u27e9 https://lib.rs/crates/tracing: 0.1.30 - tracing\n\u27e821\u27e9 https://lib.rs/crates/tracing-subscriber: 0.3 - tracing-subscriber\n\u27e822\u27e9 https://lib.rs/crates/tracing-subscriber/features#feature-std: +std\n\u27e823\u27e9 https://lib.rs/crates/tracing-subscriber/features#feature-fmt: +fmt\n\u27e824\u27e9 https://lib.rs/crates/tracing-subscriber/features#feature-env-filter: +env-filter\n\u27e825\u27e9 https://lib.rs/crates/trust-dns-client: obsolete - trust-dns-client\n\u27e826\u27e9 https://lib.rs/crates/trust-dns-proto: new - trust-dns-proto\n\u27e827\u27e9 https://lib.rs/crates/trust-dns-server: new - trust-dns-server\n\u27e828\u27e9 https://lib.rs/crates/native-tls: 0.2 - native-tls\n\u27e829\u27e9 https://lib.rs/crates/regex: 1.3.4 - regex\n\u27e830\u27e9 https://lib.rs/crates/trust-dns-resolver: new - trust-dns-resolver\n\u27e831\u27e9 https://lib.rs/crates/webpki-roots: outdated - webpki-roots\n\u27e832\u27e9 https://lib.rs/crates/trust-dns/features: Other features\n\u27e833\u27e9 https://lib.rs/crates/trust-dns/features#feature-dns-over-https: dns-over-https\n\u27e834\u27e9 https://lib.rs/crates/trust-dns/features#feature-dns-over-https-rustls: dns-over-https-rustls\n\u27e835\u27e9 https://lib.rs/crates/trust-dns/features#feature-dns-over-openssl: dns-over-openssl\n\u27e836\u27e9 https://lib.rs/crates/trust-dns/features#feature-dns-over-quic: dns-over-quic\n\u27e837\u27e9 https://lib.rs/crates/trust-dns/features#feature-dns-over-tls: dns-over-tls\n\u27e838\u27e9 https://lib.rs/crates/trust-dns/features#feature-dnssec: dnssec\n\u27e839\u27e9 https://lib.rs/crates/trust-dns/features#feature-dnssec-openssl: dnssec-openssl\n\u27e840\u27e9 https://lib.rs/crates/trust-dns/features#feature-dnssec-ring: dnssec-ring\n\u27e841\u27e9 https://lib.rs/crates/trust-dns/features#feature-recursor: recursor\n\u27e842\u27e9 https://lib.rs/crates/trust-dns/features#feature-resolver: resolver\n\u27e843\u27e9 https://lib.rs/crates/trust-dns/features#feature-sqlite: sqlite\n\u27e844\u27e9 https://lib.rs/crates/trust-dns/features#feature-tls: tls\n\u27e845\u27e9 https://lib.rs/crates/trust-dns/features#feature-tls-openssl: tls-openssl\n",
            "fit_markdown": "",
            "fit_html": ""
          },
          "downloads": 0,
          "github_stars": 0,
          "dependencies": [],
          "features": {},
          "code_snippets": [],
          "readme_sections": {},
          "librs_downloads": null,
          "source": "crates.io",
          "enhanced_scraping": {},
          "enhanced_features": [],
          "enhanced_dependencies": []
        },
        "enriched_crate": {
          "name": "trust-dns",
          "version": "0.23.2",
          "description": "ALLOW: Positive community sentiment",
          "repository": "",
          "keywords": [],
          "categories": [],
          "readme": {
            "raw_markdown": "###  [81 releases](https://lib.rs/crates/trust-dns/versions)\n0.23.2 |  Oct 23, 2023   \n---|---  \n0.23.0 |  Aug 22, 2023   \n0.23.0-alpha.4 |  Jun 11, 2023   \n0.22.0 |  Sep 2, 2022   \n0.4.0 |  Nov 9, 2015   \n#**4** in [#dynamic-dns](https://lib.rs/keywords/dynamic-dns)\nDownload history 261/week @ 2025-03-08 384/week @ 2025-03-15 247/week @ 2025-03-22 159/week @ 2025-03-29 233/week @ 2025-04-05 290/week @ 2025-04-12 271/week @ 2025-04-19 337/week @ 2025-04-26 269/week @ 2025-05-03 277/week @ 2025-05-10 165/week @ 2025-05-17 175/week @ 2025-05-24 225/week @ 2025-05-31 186/week @ 2025-06-07 238/week @ 2025-06-14 318/week @ 2025-06-21\n**993** downloads per month Used in [**14** crates (11 directly)](https://lib.rs/crates/trust-dns/rev)\n**MIT/Apache**\n2.5MB  **38K** SLoC\n**NOTICE** This project has been rebranded to Hickory DNS and has been moved to the <https://github.com/hickory-dns/hickory-dns> organization and repo, this crate/binary has been moved to [hickory-dns](https://lib.rs/crates/hickory-dns), from ```0.``24```\n# Overview\nTrust-DNS provides a binary for hosting or forwarding DNS zones.\nThis a named implementation for DNS zone hosting. It is capable of performing signing all records in the zone for server DNSSEC RRSIG records associated with all records in a zone. There is also a ``trust-dns`` binary that can be generated from the library with ````cargo``` install trust-dns```. Dynamic updates are supported via ```SIG0``` (an mTLS authentication method is under development).\n## Features\n  * Dynamic Update with sqlite journaling backend (SIG0)\n  * DNSSEC online signing (NSEC not NSEC3)\n  * DNS over TLS (DoT)\n  * DNS over HTTPS (DoH)\n  * Forwarding stub resolver\n  * ANAME resolution, for zone mapping aliass to A and AAAA records\n  * Additionals section generation for aliasing record types\n\n\n## DNS-over-TLS and DNS-over-HTTPS\nSupport of TLS on the Server is managed through a pkcs12 der file. The documentation is captured in the example test config file, [example.toml](https://github.com/bluejekyll/trust-dns/blob/main/tests/test-data/test_configs/example.toml). A registered certificate to the server can be pinned to the Client with the ```add_ca``(``)``` method. Alternatively, as the client uses the rust-native-tls library, it should work with certificate signed by any standard CA.\nDoT and DoH are supported. This is accomplished through the use of one of ``native-tls``, ``openssl``, or ``rustls`` (only ``rustls`` is currently supported for DoH). The Resolver requires only requires valid DoT or DoH resolvers being registered in order to be used.\nTo use with the ``Client``, the ``TlsClientConnection`` or ``HttpsClientConnection`` should be used. Similarly, to use with the tokio ``AsyncClient`` the ``TlsClientStream`` or ``HttpsClientStream`` should be used. ClientAuth, mTLS, is currently not supported, there are some issues still being worked on. TLS is useful for Server authentication and connection privacy.\nTo enable DoT one of the features ``dns-over-native-tls``, ``dns-over-openssl``, or ``dns-over-rustls`` must be enabled, ``dns-over-https-rustls`` is used for DoH.\n## DNSSEC status\nCurrently the root key is hardcoded into the system. This gives validation of DNSKEY and DS records back to the root. NSEC is implemented, but not NSEC3. Because caching is not yet enabled, it has been noticed that some DNS servers appear to rate limit the connections, validating RRSIG records back to the root can require a significant number of additional queries for those records.\nZones will be automatically resigned on any record updates via dynamic DNS. To enable DNSSEC, one of the features ``dnssec-openssl`` or ``dnssec-ring`` must be enabled.\n## Future goals\n  * Distributed dynamic DNS updates, with consensus\n  * mTLS based authorization for Dynamic Updates\n  * Online NSEC creation for queries\n  * Full hint based resolving\n  * Maybe NSEC3 and/or NSEC5 support\n\n\n## Minimum Rust Version\nThe current minimum rustc version for this project is ```1.``64```\n## Versioning\nTrust-DNS does it's best job to follow semver. Trust-DNS will be promoted to 1.0 upon stabilization of the publicly exposed APIs. This does not mean that Trust-DNS will necessarily break on upgrades between 0.x updates. Whenever possible, old APIs will be deprecated with notes on what replaced those deprecations. Trust-DNS will make a best effort to never break software which depends on it due to API changes, though this can not be guaranteed. Deprecated interfaces will be maintained for at minimum one major release after that in which they were deprecated (where possible), with the exception of the upgrade to 1.0 where all deprecated interfaces will be planned to be removed.\n#### Dependencies\n~13\u201332MB  ~493K SLoC\n  * [clap](https://lib.rs/crates/clap \"new\") 4.0[+std](https://lib.rs/crates/clap/features#feature-std)[+cargo](https://lib.rs/crates/clap/features#feature-cargo)[+help](https://lib.rs/crates/clap/features#feature-help)[+derive](https://lib.rs/crates/clap/features#feature-derive)[+suggestions](https://lib.rs/crates/clap/features#feature-suggestions)\n  * [futures](https://lib.rs/crates/futures \"0.3.5\")[+std](https://lib.rs/crates/futures/features#feature-std)\n  * [dns-over-rustls?](https://lib.rs/crates/trust-dns/features#feature-dns-over-rustls \"optional feature\") [rustls](https://lib.rs/crates/rustls \"obsolete\") 0.21\n  * [time](https://lib.rs/crates/time \"0.3\")\n  * [tokio](https://lib.rs/crates/tokio \"1.21\")[+time](https://lib.rs/crates/tokio/features#feature-time)[+rt](https://lib.rs/crates/tokio/features#feature-rt)\n  * [tracing](https://lib.rs/crates/tracing \"0.1.30\")\n  * [tracing-subscriber](https://lib.rs/crates/tracing-subscriber \"0.3\")[+std](https://lib.rs/crates/tracing-subscriber/features#feature-std)[+fmt](https://lib.rs/crates/tracing-subscriber/features#feature-fmt)[+env-filter](https://lib.rs/crates/tracing-subscriber/features#feature-env-filter)\n  * [trust-dns-client](https://lib.rs/crates/trust-dns-client \"obsolete\") 0.23.2\n  * [trust-dns-proto](https://lib.rs/crates/trust-dns-proto \"new\") 0.23.2\n  * [trust-dns-server](https://lib.rs/crates/trust-dns-server \"new\") 0.23.2\n\n\n  * dev  [native-tls](https://lib.rs/crates/native-tls \"0.2\")\n  * dev  [regex](https://lib.rs/crates/regex \"1.3.4\")\n  * dev  [trust-dns-resolver](https://lib.rs/crates/trust-dns-resolver \"new\") 0.23.2\n  * dev  [webpki-roots](https://lib.rs/crates/webpki-roots \"outdated\") 0.25\n\n\n#### [Other features](https://lib.rs/crates/trust-dns/features)\n  * [dns-over-https](https://lib.rs/crates/trust-dns/features#feature-dns-over-https)\n  * [dns-over-https-rustls](https://lib.rs/crates/trust-dns/features#feature-dns-over-https-rustls)\n  * [dns-over-openssl](https://lib.rs/crates/trust-dns/features#feature-dns-over-openssl)\n  * [dns-over-quic](https://lib.rs/crates/trust-dns/features#feature-dns-over-quic)\n  * [dns-over-tls](https://lib.rs/crates/trust-dns/features#feature-dns-over-tls)\n  * [dnssec](https://lib.rs/crates/trust-dns/features#feature-dnssec)\n  * [dnssec-openssl](https://lib.rs/crates/trust-dns/features#feature-dnssec-openssl)\n  * [dnssec-ring](https://lib.rs/crates/trust-dns/features#feature-dnssec-ring)\n  * [recursor](https://lib.rs/crates/trust-dns/features#feature-recursor)\n  * [resolver](https://lib.rs/crates/trust-dns/features#feature-resolver)\n  * [sqlite](https://lib.rs/crates/trust-dns/features#feature-sqlite)\n  * [tls](https://lib.rs/crates/trust-dns/features#feature-tls)\n  * [tls-openssl](https://lib.rs/crates/trust-dns/features#feature-tls-openssl)\n\n\n  *[SLoC]: approx. additional lines of code\n",
            "markdown_with_citations": "###  81 releases\u27e81\u27e9\n0.23.2 |  Oct 23, 2023   \n---|---  \n0.23.0 |  Aug 22, 2023   \n0.23.0-alpha.4 |  Jun 11, 2023   \n0.22.0 |  Sep 2, 2022   \n0.4.0 |  Nov 9, 2015   \n#**4** in #dynamic-dns\u27e82\u27e9\nDownload history 261/week @ 2025-03-08 384/week @ 2025-03-15 247/week @ 2025-03-22 159/week @ 2025-03-29 233/week @ 2025-04-05 290/week @ 2025-04-12 271/week @ 2025-04-19 337/week @ 2025-04-26 269/week @ 2025-05-03 277/week @ 2025-05-10 165/week @ 2025-05-17 175/week @ 2025-05-24 225/week @ 2025-05-31 186/week @ 2025-06-07 238/week @ 2025-06-14 318/week @ 2025-06-21\n**993** downloads per month Used in **14** crates (11 directly)\u27e83\u27e9\n**MIT/Apache**\n2.5MB  **38K** SLoC\n**NOTICE** This project has been rebranded to Hickory DNS and has been moved to the <https://github.com/hickory-dns/hickory-dns> organization and repo, this crate/binary has been moved to hickory-dns\u27e84\u27e9, from ```0.``24```\n# Overview\nTrust-DNS provides a binary for hosting or forwarding DNS zones.\nThis a named implementation for DNS zone hosting. It is capable of performing signing all records in the zone for server DNSSEC RRSIG records associated with all records in a zone. There is also a ``trust-dns`` binary that can be generated from the library with ````cargo``` install trust-dns```. Dynamic updates are supported via ```SIG0``` (an mTLS authentication method is under development).\n## Features\n  * Dynamic Update with sqlite journaling backend (SIG0)\n  * DNSSEC online signing (NSEC not NSEC3)\n  * DNS over TLS (DoT)\n  * DNS over HTTPS (DoH)\n  * Forwarding stub resolver\n  * ANAME resolution, for zone mapping aliass to A and AAAA records\n  * Additionals section generation for aliasing record types\n\n\n## DNS-over-TLS and DNS-over-HTTPS\nSupport of TLS on the Server is managed through a pkcs12 der file. The documentation is captured in the example test config file, example.toml\u27e85\u27e9. A registered certificate to the server can be pinned to the Client with the ```add_ca``(``)``` method. Alternatively, as the client uses the rust-native-tls library, it should work with certificate signed by any standard CA.\nDoT and DoH are supported. This is accomplished through the use of one of ``native-tls``, ``openssl``, or ``rustls`` (only ``rustls`` is currently supported for DoH). The Resolver requires only requires valid DoT or DoH resolvers being registered in order to be used.\nTo use with the ``Client``, the ``TlsClientConnection`` or ``HttpsClientConnection`` should be used. Similarly, to use with the tokio ``AsyncClient`` the ``TlsClientStream`` or ``HttpsClientStream`` should be used. ClientAuth, mTLS, is currently not supported, there are some issues still being worked on. TLS is useful for Server authentication and connection privacy.\nTo enable DoT one of the features ``dns-over-native-tls``, ``dns-over-openssl``, or ``dns-over-rustls`` must be enabled, ``dns-over-https-rustls`` is used for DoH.\n## DNSSEC status\nCurrently the root key is hardcoded into the system. This gives validation of DNSKEY and DS records back to the root. NSEC is implemented, but not NSEC3. Because caching is not yet enabled, it has been noticed that some DNS servers appear to rate limit the connections, validating RRSIG records back to the root can require a significant number of additional queries for those records.\nZones will be automatically resigned on any record updates via dynamic DNS. To enable DNSSEC, one of the features ``dnssec-openssl`` or ``dnssec-ring`` must be enabled.\n## Future goals\n  * Distributed dynamic DNS updates, with consensus\n  * mTLS based authorization for Dynamic Updates\n  * Online NSEC creation for queries\n  * Full hint based resolving\n  * Maybe NSEC3 and/or NSEC5 support\n\n\n## Minimum Rust Version\nThe current minimum rustc version for this project is ```1.``64```\n## Versioning\nTrust-DNS does it's best job to follow semver. Trust-DNS will be promoted to 1.0 upon stabilization of the publicly exposed APIs. This does not mean that Trust-DNS will necessarily break on upgrades between 0.x updates. Whenever possible, old APIs will be deprecated with notes on what replaced those deprecations. Trust-DNS will make a best effort to never break software which depends on it due to API changes, though this can not be guaranteed. Deprecated interfaces will be maintained for at minimum one major release after that in which they were deprecated (where possible), with the exception of the upgrade to 1.0 where all deprecated interfaces will be planned to be removed.\n#### Dependencies\n~13\u201332MB  ~493K SLoC\n  * clap\u27e86\u27e9 4.0+std\u27e87\u27e9+cargo\u27e88\u27e9+help\u27e89\u27e9+derive\u27e810\u27e9+suggestions\u27e811\u27e9\n  * futures\u27e812\u27e9+std\u27e813\u27e9\n  * dns-over-rustls?\u27e814\u27e9 rustls\u27e815\u27e9 0.21\n  * time\u27e816\u27e9\n  * tokio\u27e817\u27e9+time\u27e818\u27e9+rt\u27e819\u27e9\n  * tracing\u27e820\u27e9\n  * tracing-subscriber\u27e821\u27e9+std\u27e822\u27e9+fmt\u27e823\u27e9+env-filter\u27e824\u27e9\n  * trust-dns-client\u27e825\u27e9 0.23.2\n  * trust-dns-proto\u27e826\u27e9 0.23.2\n  * trust-dns-server\u27e827\u27e9 0.23.2\n\n\n  * dev  native-tls\u27e828\u27e9\n  * dev  regex\u27e829\u27e9\n  * dev  trust-dns-resolver\u27e830\u27e9 0.23.2\n  * dev  webpki-roots\u27e831\u27e9 0.25\n\n\n#### Other features\u27e832\u27e9\n  * dns-over-https\u27e833\u27e9\n  * dns-over-https-rustls\u27e834\u27e9\n  * dns-over-openssl\u27e835\u27e9\n  * dns-over-quic\u27e836\u27e9\n  * dns-over-tls\u27e837\u27e9\n  * dnssec\u27e838\u27e9\n  * dnssec-openssl\u27e839\u27e9\n  * dnssec-ring\u27e840\u27e9\n  * recursor\u27e841\u27e9\n  * resolver\u27e842\u27e9\n  * sqlite\u27e843\u27e9\n  * tls\u27e844\u27e9\n  * tls-openssl\u27e845\u27e9\n\n\n  *[SLoC]: approx. additional lines of code\n",
            "references_markdown": "\n\n## References\n\n\u27e81\u27e9 https://lib.rs/crates/trust-dns/versions: 81 releases\n\u27e82\u27e9 https://lib.rs/keywords/dynamic-dns: #dynamic-dns\n\u27e83\u27e9 https://lib.rs/crates/trust-dns/rev: **14** crates (11 directly)\n\u27e84\u27e9 https://lib.rs/crates/hickory-dns: hickory-dns\n\u27e85\u27e9 https://github.com/bluejekyll/trust-dns/blob/main/tests/test-data/test_configs/example.toml: example.toml\n\u27e86\u27e9 https://lib.rs/crates/clap: new - clap\n\u27e87\u27e9 https://lib.rs/crates/clap/features#feature-std: +std\n\u27e88\u27e9 https://lib.rs/crates/clap/features#feature-cargo: +cargo\n\u27e89\u27e9 https://lib.rs/crates/clap/features#feature-help: +help\n\u27e810\u27e9 https://lib.rs/crates/clap/features#feature-derive: +derive\n\u27e811\u27e9 https://lib.rs/crates/clap/features#feature-suggestions: +suggestions\n\u27e812\u27e9 https://lib.rs/crates/futures: 0.3.5 - futures\n\u27e813\u27e9 https://lib.rs/crates/futures/features#feature-std: +std\n\u27e814\u27e9 https://lib.rs/crates/trust-dns/features#feature-dns-over-rustls: optional feature - dns-over-rustls?\n\u27e815\u27e9 https://lib.rs/crates/rustls: obsolete - rustls\n\u27e816\u27e9 https://lib.rs/crates/time: 0.3 - time\n\u27e817\u27e9 https://lib.rs/crates/tokio: 1.21 - tokio\n\u27e818\u27e9 https://lib.rs/crates/tokio/features#feature-time: +time\n\u27e819\u27e9 https://lib.rs/crates/tokio/features#feature-rt: +rt\n\u27e820\u27e9 https://lib.rs/crates/tracing: 0.1.30 - tracing\n\u27e821\u27e9 https://lib.rs/crates/tracing-subscriber: 0.3 - tracing-subscriber\n\u27e822\u27e9 https://lib.rs/crates/tracing-subscriber/features#feature-std: +std\n\u27e823\u27e9 https://lib.rs/crates/tracing-subscriber/features#feature-fmt: +fmt\n\u27e824\u27e9 https://lib.rs/crates/tracing-subscriber/features#feature-env-filter: +env-filter\n\u27e825\u27e9 https://lib.rs/crates/trust-dns-client: obsolete - trust-dns-client\n\u27e826\u27e9 https://lib.rs/crates/trust-dns-proto: new - trust-dns-proto\n\u27e827\u27e9 https://lib.rs/crates/trust-dns-server: new - trust-dns-server\n\u27e828\u27e9 https://lib.rs/crates/native-tls: 0.2 - native-tls\n\u27e829\u27e9 https://lib.rs/crates/regex: 1.3.4 - regex\n\u27e830\u27e9 https://lib.rs/crates/trust-dns-resolver: new - trust-dns-resolver\n\u27e831\u27e9 https://lib.rs/crates/webpki-roots: outdated - webpki-roots\n\u27e832\u27e9 https://lib.rs/crates/trust-dns/features: Other features\n\u27e833\u27e9 https://lib.rs/crates/trust-dns/features#feature-dns-over-https: dns-over-https\n\u27e834\u27e9 https://lib.rs/crates/trust-dns/features#feature-dns-over-https-rustls: dns-over-https-rustls\n\u27e835\u27e9 https://lib.rs/crates/trust-dns/features#feature-dns-over-openssl: dns-over-openssl\n\u27e836\u27e9 https://lib.rs/crates/trust-dns/features#feature-dns-over-quic: dns-over-quic\n\u27e837\u27e9 https://lib.rs/crates/trust-dns/features#feature-dns-over-tls: dns-over-tls\n\u27e838\u27e9 https://lib.rs/crates/trust-dns/features#feature-dnssec: dnssec\n\u27e839\u27e9 https://lib.rs/crates/trust-dns/features#feature-dnssec-openssl: dnssec-openssl\n\u27e840\u27e9 https://lib.rs/crates/trust-dns/features#feature-dnssec-ring: dnssec-ring\n\u27e841\u27e9 https://lib.rs/crates/trust-dns/features#feature-recursor: recursor\n\u27e842\u27e9 https://lib.rs/crates/trust-dns/features#feature-resolver: resolver\n\u27e843\u27e9 https://lib.rs/crates/trust-dns/features#feature-sqlite: sqlite\n\u27e844\u27e9 https://lib.rs/crates/trust-dns/features#feature-tls: tls\n\u27e845\u27e9 https://lib.rs/crates/trust-dns/features#feature-tls-openssl: tls-openssl\n",
            "fit_markdown": "",
            "fit_html": ""
          },
          "downloads": 0,
          "github_stars": 0,
          "dependencies": [],
          "features": {},
          "code_snippets": [],
          "readme_sections": {},
          "librs_downloads": null,
          "source": "crates.io",
          "enhanced_scraping": {},
          "enhanced_features": [],
          "enhanced_dependencies": [],
          "readme_summary": "The `trust-dns` crate is a DNS library and server implementation for hosting, forwarding, and resolving DNS zones, with support for DNSSEC, dynamic updates (via SIG0), and advanced protocols like DNS-over-TLS (DoT) and DNS-over-HTTPS (DoH). It features online DNSSEC signing, ANAME resolution, and sqlite-backed journaling for dynamic updates. The crate is modular, enabling features like TLS, HTTPS, and DNSSEC through optional dependencies, and has been rebranded as Hickory DNS starting from version 0.24.",
          "feature_summary": null,
          "use_case": "Networking",
          "score": 7.0,
          "factual_counterfactual": "### Pair 1: DNSSEC Support  \n\u2705 Factual: Trust-DNS supports DNSSEC online signing for zones, automatically resigning records upon dynamic DNS updates. However, it implements NSEC but not NSEC3.  \n\u274c Counterfactual: Trust-DNS fully supports both NSEC and NSEC3 for DNSSEC, allowing advanced DNSSEC features like hashed denial of existence.\n\n---\n\n### Pair 2: DNS-over-TLS and DNS-over-HTTPS  \n\u2705 Factual: Trust-DNS provides support for DNS-over-TLS (DoT) and DNS-over-HTTPS (DoH) using libraries like `native-tls`, `openssl`, and `rustls`. However, DoH currently only works with `rustls`.  \n\u274c Counterfactual: Trust-DNS supports DNS-over-HTTPS (DoH) with all major TLS libraries, including `native-tls` and `openssl`, without restrictions.\n\n---\n\n### Pair 3: Dynamic DNS Updates  \n\u2705 Factual: Trust-DNS enables dynamic DNS updates using SIG(0) for authentication, with mTLS-based authorization under development as a future feature.  \n\u274c Counterfactual: Trust-DNS already supports mTLS-based authorization for dynamic DNS updates, providing robust authentication out of the box.",
          "source_analysis": null,
          "user_behavior": null,
          "security": null
        }
      },
      "irl_score": 8.6,
      "execution_id": "exec-009d4fef-0be08715-1751266382",
      "timestamp": "2025-06-30T06:53:02.653230+00:00",
      "canon_version": "1.3.0"
    },
    "rule_zero_compliant": true
  }
]